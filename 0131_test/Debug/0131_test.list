
0131_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077fc  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007ac8  08007ac8  00017ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007b00  08007b00  00017b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007b08  08007b08  00017b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007b0c  08007b0c  00017b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08007b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08007b20  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08007b80  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  240000d0  08007be0  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240002e4  08007be0  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001924d  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024df  00000000  00000000  0003934b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  0003b830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  0003c8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003437d  00000000  00000000  0003d848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014353  00000000  00000000  00071bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015bdd5  00000000  00000000  00085f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e1ced  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046cc  00000000  00000000  001e1d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08007ab0 	.word	0x08007ab0

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	08007ab0 	.word	0x08007ab0

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b974 	b.w	800060c <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468e      	mov	lr, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d14d      	bne.n	80003e6 <__udivmoddi4+0xaa>
 800034a:	428a      	cmp	r2, r1
 800034c:	4694      	mov	ip, r2
 800034e:	d969      	bls.n	8000424 <__udivmoddi4+0xe8>
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	b152      	cbz	r2, 800036c <__udivmoddi4+0x30>
 8000356:	fa01 f302 	lsl.w	r3, r1, r2
 800035a:	f1c2 0120 	rsb	r1, r2, #32
 800035e:	fa20 f101 	lsr.w	r1, r0, r1
 8000362:	fa0c fc02 	lsl.w	ip, ip, r2
 8000366:	ea41 0e03 	orr.w	lr, r1, r3
 800036a:	4094      	lsls	r4, r2
 800036c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000370:	0c21      	lsrs	r1, r4, #16
 8000372:	fbbe f6f8 	udiv	r6, lr, r8
 8000376:	fa1f f78c 	uxth.w	r7, ip
 800037a:	fb08 e316 	mls	r3, r8, r6, lr
 800037e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000382:	fb06 f107 	mul.w	r1, r6, r7
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 811f 	bcs.w	80005d4 <__udivmoddi4+0x298>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 811c 	bls.w	80005d4 <__udivmoddi4+0x298>
 800039c:	3e02      	subs	r6, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 f707 	mul.w	r7, r0, r7
 80003b4:	42a7      	cmp	r7, r4
 80003b6:	d90a      	bls.n	80003ce <__udivmoddi4+0x92>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c0:	f080 810a 	bcs.w	80005d8 <__udivmoddi4+0x29c>
 80003c4:	42a7      	cmp	r7, r4
 80003c6:	f240 8107 	bls.w	80005d8 <__udivmoddi4+0x29c>
 80003ca:	4464      	add	r4, ip
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d2:	1be4      	subs	r4, r4, r7
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa4>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xc2>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80ef 	beq.w	80005ce <__udivmoddi4+0x292>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x160>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd4>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80f9 	bhi.w	8000602 <__udivmoddi4+0x2c6>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	469e      	mov	lr, r3
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa4>
 800041e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa4>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xec>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 8092 	bne.w	8000556 <__udivmoddi4+0x21a>
 8000432:	eba1 010c 	sub.w	r1, r1, ip
 8000436:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	2601      	movs	r6, #1
 8000440:	0c20      	lsrs	r0, r4, #16
 8000442:	fbb1 f3f7 	udiv	r3, r1, r7
 8000446:	fb07 1113 	mls	r1, r7, r3, r1
 800044a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044e:	fb0e f003 	mul.w	r0, lr, r3
 8000452:	4288      	cmp	r0, r1
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x12c>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f103 38ff 	add.w	r8, r3, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x12a>
 8000460:	4288      	cmp	r0, r1
 8000462:	f200 80cb 	bhi.w	80005fc <__udivmoddi4+0x2c0>
 8000466:	4643      	mov	r3, r8
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1110 	mls	r1, r7, r0, r1
 8000474:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000478:	fb0e fe00 	mul.w	lr, lr, r0
 800047c:	45a6      	cmp	lr, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x156>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d202      	bcs.n	8000490 <__udivmoddi4+0x154>
 800048a:	45a6      	cmp	lr, r4
 800048c:	f200 80bb 	bhi.w	8000606 <__udivmoddi4+0x2ca>
 8000490:	4608      	mov	r0, r1
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049a:	e79c      	b.n	80003d6 <__udivmoddi4+0x9a>
 800049c:	f1c6 0720 	rsb	r7, r6, #32
 80004a0:	40b3      	lsls	r3, r6
 80004a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80004aa:	fa20 f407 	lsr.w	r4, r0, r7
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	431c      	orrs	r4, r3
 80004b4:	40f9      	lsrs	r1, r7
 80004b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ba:	fa00 f306 	lsl.w	r3, r0, r6
 80004be:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c2:	0c20      	lsrs	r0, r4, #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fb09 1118 	mls	r1, r9, r8, r1
 80004cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d0:	fb08 f00e 	mul.w	r0, r8, lr
 80004d4:	4288      	cmp	r0, r1
 80004d6:	fa02 f206 	lsl.w	r2, r2, r6
 80004da:	d90b      	bls.n	80004f4 <__udivmoddi4+0x1b8>
 80004dc:	eb1c 0101 	adds.w	r1, ip, r1
 80004e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e4:	f080 8088 	bcs.w	80005f8 <__udivmoddi4+0x2bc>
 80004e8:	4288      	cmp	r0, r1
 80004ea:	f240 8085 	bls.w	80005f8 <__udivmoddi4+0x2bc>
 80004ee:	f1a8 0802 	sub.w	r8, r8, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004fc:	fb09 1110 	mls	r1, r9, r0, r1
 8000500:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000504:	fb00 fe0e 	mul.w	lr, r0, lr
 8000508:	458e      	cmp	lr, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x1e2>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f100 34ff 	add.w	r4, r0, #4294967295
 8000514:	d26c      	bcs.n	80005f0 <__udivmoddi4+0x2b4>
 8000516:	458e      	cmp	lr, r1
 8000518:	d96a      	bls.n	80005f0 <__udivmoddi4+0x2b4>
 800051a:	3802      	subs	r0, #2
 800051c:	4461      	add	r1, ip
 800051e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000522:	fba0 9402 	umull	r9, r4, r0, r2
 8000526:	eba1 010e 	sub.w	r1, r1, lr
 800052a:	42a1      	cmp	r1, r4
 800052c:	46c8      	mov	r8, r9
 800052e:	46a6      	mov	lr, r4
 8000530:	d356      	bcc.n	80005e0 <__udivmoddi4+0x2a4>
 8000532:	d053      	beq.n	80005dc <__udivmoddi4+0x2a0>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x212>
 8000536:	ebb3 0208 	subs.w	r2, r3, r8
 800053a:	eb61 010e 	sbc.w	r1, r1, lr
 800053e:	fa01 f707 	lsl.w	r7, r1, r7
 8000542:	fa22 f306 	lsr.w	r3, r2, r6
 8000546:	40f1      	lsrs	r1, r6
 8000548:	431f      	orrs	r7, r3
 800054a:	e9c5 7100 	strd	r7, r1, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	40d8      	lsrs	r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa21 f303 	lsr.w	r3, r1, r3
 8000564:	4091      	lsls	r1, r2
 8000566:	4301      	orrs	r1, r0
 8000568:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800056c:	fa1f fe8c 	uxth.w	lr, ip
 8000570:	fbb3 f0f7 	udiv	r0, r3, r7
 8000574:	fb07 3610 	mls	r6, r7, r0, r3
 8000578:	0c0b      	lsrs	r3, r1, #16
 800057a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800057e:	fb00 f60e 	mul.w	r6, r0, lr
 8000582:	429e      	cmp	r6, r3
 8000584:	fa04 f402 	lsl.w	r4, r4, r2
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x260>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000592:	d22f      	bcs.n	80005f4 <__udivmoddi4+0x2b8>
 8000594:	429e      	cmp	r6, r3
 8000596:	d92d      	bls.n	80005f4 <__udivmoddi4+0x2b8>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1b9b      	subs	r3, r3, r6
 800059e:	b289      	uxth	r1, r1
 80005a0:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a4:	fb07 3316 	mls	r3, r7, r6, r3
 80005a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ac:	fb06 f30e 	mul.w	r3, r6, lr
 80005b0:	428b      	cmp	r3, r1
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x28a>
 80005b4:	eb1c 0101 	adds.w	r1, ip, r1
 80005b8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005bc:	d216      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 80005be:	428b      	cmp	r3, r1
 80005c0:	d914      	bls.n	80005ec <__udivmoddi4+0x2b0>
 80005c2:	3e02      	subs	r6, #2
 80005c4:	4461      	add	r1, ip
 80005c6:	1ac9      	subs	r1, r1, r3
 80005c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005cc:	e738      	b.n	8000440 <__udivmoddi4+0x104>
 80005ce:	462e      	mov	r6, r5
 80005d0:	4628      	mov	r0, r5
 80005d2:	e705      	b.n	80003e0 <__udivmoddi4+0xa4>
 80005d4:	4606      	mov	r6, r0
 80005d6:	e6e3      	b.n	80003a0 <__udivmoddi4+0x64>
 80005d8:	4618      	mov	r0, r3
 80005da:	e6f8      	b.n	80003ce <__udivmoddi4+0x92>
 80005dc:	454b      	cmp	r3, r9
 80005de:	d2a9      	bcs.n	8000534 <__udivmoddi4+0x1f8>
 80005e0:	ebb9 0802 	subs.w	r8, r9, r2
 80005e4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005e8:	3801      	subs	r0, #1
 80005ea:	e7a3      	b.n	8000534 <__udivmoddi4+0x1f8>
 80005ec:	4646      	mov	r6, r8
 80005ee:	e7ea      	b.n	80005c6 <__udivmoddi4+0x28a>
 80005f0:	4620      	mov	r0, r4
 80005f2:	e794      	b.n	800051e <__udivmoddi4+0x1e2>
 80005f4:	4640      	mov	r0, r8
 80005f6:	e7d1      	b.n	800059c <__udivmoddi4+0x260>
 80005f8:	46d0      	mov	r8, sl
 80005fa:	e77b      	b.n	80004f4 <__udivmoddi4+0x1b8>
 80005fc:	3b02      	subs	r3, #2
 80005fe:	4461      	add	r1, ip
 8000600:	e732      	b.n	8000468 <__udivmoddi4+0x12c>
 8000602:	4630      	mov	r0, r6
 8000604:	e709      	b.n	800041a <__udivmoddi4+0xde>
 8000606:	4464      	add	r4, ip
 8000608:	3802      	subs	r0, #2
 800060a:	e742      	b.n	8000492 <__udivmoddi4+0x156>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f000 fd70 	bl	80010f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f832 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 f9c2 	bl	80009a4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000620:	f000 f920 	bl	8000864 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000624:	f000 f96a 	bl	80008fc <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000628:	f000 f9b4 	bl	8000994 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 800062c:	f000 f8a2 	bl	8000774 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000630:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000634:	480f      	ldr	r0, [pc, #60]	; (8000674 <main+0x64>)
 8000636:	f003 f878 	bl	800372a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800063a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063e:	f000 fded 	bl	800121c <HAL_Delay>
	  i = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000646:	480c      	ldr	r0, [pc, #48]	; (8000678 <main+0x68>)
 8000648:	f003 f83e 	bl	80036c8 <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
 800064e:	461a      	mov	r2, r3
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <main+0x6c>)
 8000652:	601a      	str	r2, [r3, #0]
	  if(i){
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <main+0x6c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d005      	beq.n	8000668 <main+0x58>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2101      	movs	r1, #1
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <main+0x64>)
 8000662:	f003 f849 	bl	80036f8 <HAL_GPIO_WritePin>
 8000666:	e7e3      	b.n	8000630 <main+0x20>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2101      	movs	r1, #1
 800066c:	4801      	ldr	r0, [pc, #4]	; (8000674 <main+0x64>)
 800066e:	f003 f843 	bl	80036f8 <HAL_GPIO_WritePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000672:	e7dd      	b.n	8000630 <main+0x20>
 8000674:	58020400 	.word	0x58020400
 8000678:	58020800 	.word	0x58020800
 800067c:	240002d4 	.word	0x240002d4

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b09c      	sub	sp, #112	; 0x70
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068a:	224c      	movs	r2, #76	; 0x4c
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f007 fa06 	bl	8007aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2220      	movs	r2, #32
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f007 fa00 	bl	8007aa0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006a0:	2002      	movs	r0, #2
 80006a2:	f003 f85d 	bl	8003760 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	4b30      	ldr	r3, [pc, #192]	; (800076c <SystemClock_Config+0xec>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a2f      	ldr	r2, [pc, #188]	; (800076c <SystemClock_Config+0xec>)
 80006b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b2d      	ldr	r3, [pc, #180]	; (800076c <SystemClock_Config+0xec>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c2:	bf00      	nop
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <SystemClock_Config+0xec>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006d0:	d1f8      	bne.n	80006c4 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006d2:	4b27      	ldr	r3, [pc, #156]	; (8000770 <SystemClock_Config+0xf0>)
 80006d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006d6:	f023 0303 	bic.w	r3, r3, #3
 80006da:	4a25      	ldr	r2, [pc, #148]	; (8000770 <SystemClock_Config+0xf0>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006e2:	2321      	movs	r3, #33	; 0x21
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006e6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006ec:	2301      	movs	r3, #1
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f8:	2304      	movs	r3, #4
 80006fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80006fc:	f240 1313 	movw	r3, #275	; 0x113
 8000700:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000702:	2301      	movs	r3, #1
 8000704:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000706:	2304      	movs	r3, #4
 8000708:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800070e:	2304      	movs	r3, #4
 8000710:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000712:	2300      	movs	r3, #0
 8000714:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071e:	4618      	mov	r0, r3
 8000720:	f003 f858 	bl	80037d4 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800072a:	f000 fa55 	bl	8000bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	233f      	movs	r3, #63	; 0x3f
 8000730:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2303      	movs	r3, #3
 8000734:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800073a:	2308      	movs	r3, #8
 800073c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800073e:	2340      	movs	r3, #64	; 0x40
 8000740:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000742:	2340      	movs	r3, #64	; 0x40
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800074a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800074c:	2340      	movs	r3, #64	; 0x40
 800074e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2103      	movs	r1, #3
 8000754:	4618      	mov	r0, r3
 8000756:	f003 fbeb 	bl	8003f30 <HAL_RCC_ClockConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000760:	f000 fa3a 	bl	8000bd8 <Error_Handler>
  }
}
 8000764:	bf00      	nop
 8000766:	3770      	adds	r7, #112	; 0x70
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	58024800 	.word	0x58024800
 8000770:	58024400 	.word	0x58024400

08000774 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08c      	sub	sp, #48	; 0x30
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800077a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000786:	463b      	mov	r3, r7
 8000788:	2224      	movs	r2, #36	; 0x24
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f007 f987 	bl	8007aa0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000792:	4b31      	ldr	r3, [pc, #196]	; (8000858 <MX_ADC1_Init+0xe4>)
 8000794:	4a31      	ldr	r2, [pc, #196]	; (800085c <MX_ADC1_Init+0xe8>)
 8000796:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000798:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <MX_ADC1_Init+0xe4>)
 800079a:	2200      	movs	r2, #0
 800079c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800079e:	4b2e      	ldr	r3, [pc, #184]	; (8000858 <MX_ADC1_Init+0xe4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007a4:	4b2c      	ldr	r3, [pc, #176]	; (8000858 <MX_ADC1_Init+0xe4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007aa:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <MX_ADC1_Init+0xe4>)
 80007ac:	2204      	movs	r2, #4
 80007ae:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007b0:	4b29      	ldr	r3, [pc, #164]	; (8000858 <MX_ADC1_Init+0xe4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007b6:	4b28      	ldr	r3, [pc, #160]	; (8000858 <MX_ADC1_Init+0xe4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007bc:	4b26      	ldr	r3, [pc, #152]	; (8000858 <MX_ADC1_Init+0xe4>)
 80007be:	2201      	movs	r2, #1
 80007c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c2:	4b25      	ldr	r3, [pc, #148]	; (8000858 <MX_ADC1_Init+0xe4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ca:	4b23      	ldr	r3, [pc, #140]	; (8000858 <MX_ADC1_Init+0xe4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d0:	4b21      	ldr	r3, [pc, #132]	; (8000858 <MX_ADC1_Init+0xe4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007d6:	4b20      	ldr	r3, [pc, #128]	; (8000858 <MX_ADC1_Init+0xe4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <MX_ADC1_Init+0xe4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007e2:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <MX_ADC1_Init+0xe4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_ADC1_Init+0xe4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f0:	4819      	ldr	r0, [pc, #100]	; (8000858 <MX_ADC1_Init+0xe4>)
 80007f2:	f000 ff91 	bl	8001718 <HAL_ADC_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80007fc:	f000 f9ec 	bl	8000bd8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000808:	4619      	mov	r1, r3
 800080a:	4813      	ldr	r0, [pc, #76]	; (8000858 <MX_ADC1_Init+0xe4>)
 800080c:	f001 ffca 	bl	80027a4 <HAL_ADCEx_MultiModeConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000816:	f000 f9df 	bl	8000bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_ADC1_Init+0xec>)
 800081c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800081e:	2306      	movs	r3, #6
 8000820:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000826:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800082a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800082c:	2304      	movs	r3, #4
 800082e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083a:	463b      	mov	r3, r7
 800083c:	4619      	mov	r1, r3
 800083e:	4806      	ldr	r0, [pc, #24]	; (8000858 <MX_ADC1_Init+0xe4>)
 8000840:	f001 f972 	bl	8001b28 <HAL_ADC_ConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800084a:	f000 f9c5 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	3730      	adds	r7, #48	; 0x30
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	24000124 	.word	0x24000124
 800085c:	40022000 	.word	0x40022000
 8000860:	19200040 	.word	0x19200040

08000864 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000868:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <MX_ETH_Init+0x80>)
 800086a:	4a1f      	ldr	r2, [pc, #124]	; (80008e8 <MX_ETH_Init+0x84>)
 800086c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800086e:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_ETH_Init+0x88>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000874:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <MX_ETH_Init+0x88>)
 8000876:	2280      	movs	r2, #128	; 0x80
 8000878:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_ETH_Init+0x88>)
 800087c:	22e1      	movs	r2, #225	; 0xe1
 800087e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_ETH_Init+0x88>)
 8000882:	2200      	movs	r2, #0
 8000884:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <MX_ETH_Init+0x88>)
 8000888:	2200      	movs	r2, #0
 800088a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800088c:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_ETH_Init+0x88>)
 800088e:	2200      	movs	r2, #0
 8000890:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_ETH_Init+0x80>)
 8000894:	4a15      	ldr	r2, [pc, #84]	; (80008ec <MX_ETH_Init+0x88>)
 8000896:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_ETH_Init+0x80>)
 800089a:	2201      	movs	r2, #1
 800089c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_ETH_Init+0x80>)
 80008a0:	4a13      	ldr	r2, [pc, #76]	; (80008f0 <MX_ETH_Init+0x8c>)
 80008a2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_ETH_Init+0x80>)
 80008a6:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <MX_ETH_Init+0x90>)
 80008a8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_ETH_Init+0x80>)
 80008ac:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008b0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008b2:	480c      	ldr	r0, [pc, #48]	; (80008e4 <MX_ETH_Init+0x80>)
 80008b4:	f002 f93c 	bl	8002b30 <HAL_ETH_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008be:	f000 f98b 	bl	8000bd8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008c2:	2238      	movs	r2, #56	; 0x38
 80008c4:	2100      	movs	r1, #0
 80008c6:	480c      	ldr	r0, [pc, #48]	; (80008f8 <MX_ETH_Init+0x94>)
 80008c8:	f007 f8ea 	bl	8007aa0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_ETH_Init+0x94>)
 80008ce:	2221      	movs	r2, #33	; 0x21
 80008d0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_ETH_Init+0x94>)
 80008d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008d8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_ETH_Init+0x94>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	24000194 	.word	0x24000194
 80008e8:	40028000 	.word	0x40028000
 80008ec:	240002d8 	.word	0x240002d8
 80008f0:	24000070 	.word	0x24000070
 80008f4:	24000010 	.word	0x24000010
 80008f8:	240000ec 	.word	0x240000ec

080008fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000900:	4b22      	ldr	r3, [pc, #136]	; (800098c <MX_USART3_UART_Init+0x90>)
 8000902:	4a23      	ldr	r2, [pc, #140]	; (8000990 <MX_USART3_UART_Init+0x94>)
 8000904:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000906:	4b21      	ldr	r3, [pc, #132]	; (800098c <MX_USART3_UART_Init+0x90>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b1f      	ldr	r3, [pc, #124]	; (800098c <MX_USART3_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <MX_USART3_UART_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800091a:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_USART3_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <MX_USART3_UART_Init+0x90>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <MX_USART3_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <MX_USART3_UART_Init+0x90>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000932:	4b16      	ldr	r3, [pc, #88]	; (800098c <MX_USART3_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_USART3_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_USART3_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000944:	4811      	ldr	r0, [pc, #68]	; (800098c <MX_USART3_UART_Init+0x90>)
 8000946:	f005 ff13 	bl	8006770 <HAL_UART_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000950:	f000 f942 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000954:	2100      	movs	r1, #0
 8000956:	480d      	ldr	r0, [pc, #52]	; (800098c <MX_USART3_UART_Init+0x90>)
 8000958:	f006 ffb4 	bl	80078c4 <HAL_UARTEx_SetTxFifoThreshold>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000962:	f000 f939 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000966:	2100      	movs	r1, #0
 8000968:	4808      	ldr	r0, [pc, #32]	; (800098c <MX_USART3_UART_Init+0x90>)
 800096a:	f006 ffe9 	bl	8007940 <HAL_UARTEx_SetRxFifoThreshold>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000974:	f000 f930 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000978:	4804      	ldr	r0, [pc, #16]	; (800098c <MX_USART3_UART_Init+0x90>)
 800097a:	f006 ff6a 	bl	8007852 <HAL_UARTEx_DisableFifoMode>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000984:	f000 f928 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	24000244 	.word	0x24000244
 8000990:	40004800 	.word	0x40004800

08000994 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
	...

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08e      	sub	sp, #56	; 0x38
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b7f      	ldr	r3, [pc, #508]	; (8000bb8 <MX_GPIO_Init+0x214>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c0:	4a7d      	ldr	r2, [pc, #500]	; (8000bb8 <MX_GPIO_Init+0x214>)
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ca:	4b7b      	ldr	r3, [pc, #492]	; (8000bb8 <MX_GPIO_Init+0x214>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	f003 0304 	and.w	r3, r3, #4
 80009d4:	623b      	str	r3, [r7, #32]
 80009d6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d8:	4b77      	ldr	r3, [pc, #476]	; (8000bb8 <MX_GPIO_Init+0x214>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009de:	4a76      	ldr	r2, [pc, #472]	; (8000bb8 <MX_GPIO_Init+0x214>)
 80009e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e8:	4b73      	ldr	r3, [pc, #460]	; (8000bb8 <MX_GPIO_Init+0x214>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f2:	61fb      	str	r3, [r7, #28]
 80009f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b70      	ldr	r3, [pc, #448]	; (8000bb8 <MX_GPIO_Init+0x214>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fc:	4a6e      	ldr	r2, [pc, #440]	; (8000bb8 <MX_GPIO_Init+0x214>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a06:	4b6c      	ldr	r3, [pc, #432]	; (8000bb8 <MX_GPIO_Init+0x214>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	61bb      	str	r3, [r7, #24]
 8000a12:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	4b68      	ldr	r3, [pc, #416]	; (8000bb8 <MX_GPIO_Init+0x214>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1a:	4a67      	ldr	r2, [pc, #412]	; (8000bb8 <MX_GPIO_Init+0x214>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a24:	4b64      	ldr	r3, [pc, #400]	; (8000bb8 <MX_GPIO_Init+0x214>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a32:	4b61      	ldr	r3, [pc, #388]	; (8000bb8 <MX_GPIO_Init+0x214>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a38:	4a5f      	ldr	r2, [pc, #380]	; (8000bb8 <MX_GPIO_Init+0x214>)
 8000a3a:	f043 0320 	orr.w	r3, r3, #32
 8000a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a42:	4b5d      	ldr	r3, [pc, #372]	; (8000bb8 <MX_GPIO_Init+0x214>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a48:	f003 0320 	and.w	r3, r3, #32
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a50:	4b59      	ldr	r3, [pc, #356]	; (8000bb8 <MX_GPIO_Init+0x214>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a56:	4a58      	ldr	r2, [pc, #352]	; (8000bb8 <MX_GPIO_Init+0x214>)
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a60:	4b55      	ldr	r3, [pc, #340]	; (8000bb8 <MX_GPIO_Init+0x214>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a66:	f003 0308 	and.w	r3, r3, #8
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a6e:	4b52      	ldr	r3, [pc, #328]	; (8000bb8 <MX_GPIO_Init+0x214>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a74:	4a50      	ldr	r2, [pc, #320]	; (8000bb8 <MX_GPIO_Init+0x214>)
 8000a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7e:	4b4e      	ldr	r3, [pc, #312]	; (8000bb8 <MX_GPIO_Init+0x214>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a8c:	4b4a      	ldr	r3, [pc, #296]	; (8000bb8 <MX_GPIO_Init+0x214>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a92:	4a49      	ldr	r2, [pc, #292]	; (8000bb8 <MX_GPIO_Init+0x214>)
 8000a94:	f043 0310 	orr.w	r3, r3, #16
 8000a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9c:	4b46      	ldr	r3, [pc, #280]	; (8000bb8 <MX_GPIO_Init+0x214>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	f003 0310 	and.w	r3, r3, #16
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ab0:	4842      	ldr	r0, [pc, #264]	; (8000bbc <MX_GPIO_Init+0x218>)
 8000ab2:	f002 fe21 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000abc:	4840      	ldr	r0, [pc, #256]	; (8000bc0 <MX_GPIO_Init+0x21c>)
 8000abe:	f002 fe1b 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	483f      	ldr	r0, [pc, #252]	; (8000bc4 <MX_GPIO_Init+0x220>)
 8000ac8:	f002 fe16 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4839      	ldr	r0, [pc, #228]	; (8000bc8 <MX_GPIO_Init+0x224>)
 8000ae2:	f002 fc49 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000ae6:	f244 0301 	movw	r3, #16385	; 0x4001
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afc:	4619      	mov	r1, r3
 8000afe:	482f      	ldr	r0, [pc, #188]	; (8000bbc <MX_GPIO_Init+0x218>)
 8000b00:	f002 fc3a 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b16:	4619      	mov	r1, r3
 8000b18:	482c      	ldr	r0, [pc, #176]	; (8000bcc <MX_GPIO_Init+0x228>)
 8000b1a:	f002 fc2d 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	4822      	ldr	r0, [pc, #136]	; (8000bc0 <MX_GPIO_Init+0x21c>)
 8000b38:	f002 fc1e 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b40:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	481f      	ldr	r0, [pc, #124]	; (8000bd0 <MX_GPIO_Init+0x22c>)
 8000b52:	f002 fc11 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000b56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481a      	ldr	r0, [pc, #104]	; (8000bd4 <MX_GPIO_Init+0x230>)
 8000b6c:	f002 fc04 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000b82:	230a      	movs	r3, #10
 8000b84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <MX_GPIO_Init+0x230>)
 8000b8e:	f002 fbf3 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000b92:	2302      	movs	r3, #2
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4806      	ldr	r0, [pc, #24]	; (8000bc4 <MX_GPIO_Init+0x220>)
 8000baa:	f002 fbe5 	bl	8003378 <HAL_GPIO_Init>

}
 8000bae:	bf00      	nop
 8000bb0:	3738      	adds	r7, #56	; 0x38
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	58024400 	.word	0x58024400
 8000bbc:	58020400 	.word	0x58020400
 8000bc0:	58020c00 	.word	0x58020c00
 8000bc4:	58021000 	.word	0x58021000
 8000bc8:	58020800 	.word	0x58020800
 8000bcc:	58021400 	.word	0x58021400
 8000bd0:	58021800 	.word	0x58021800
 8000bd4:	58020000 	.word	0x58020000

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <Error_Handler+0x8>
	...

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_MspInit+0x30>)
 8000bec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bf0:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <HAL_MspInit+0x30>)
 8000bf2:	f043 0302 	orr.w	r3, r3, #2
 8000bf6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_MspInit+0x30>)
 8000bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c00:	f003 0302 	and.w	r3, r3, #2
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	58024400 	.word	0x58024400

08000c18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0b6      	sub	sp, #216	; 0xd8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	22b4      	movs	r2, #180	; 0xb4
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f006 ff31 	bl	8007aa0 <memset>
  if(hadc->Instance==ADC1)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a2a      	ldr	r2, [pc, #168]	; (8000cec <HAL_ADC_MspInit+0xd4>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d14d      	bne.n	8000ce4 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c4c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8000c52:	2313      	movs	r3, #19
 8000c54:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c62:	23c0      	movs	r3, #192	; 0xc0
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f003 fce5 	bl	8004648 <HAL_RCCEx_PeriphCLKConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000c84:	f7ff ffa8 	bl	8000bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_ADC_MspInit+0xd8>)
 8000c8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c8e:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <HAL_ADC_MspInit+0xd8>)
 8000c90:	f043 0320 	orr.w	r3, r3, #32
 8000c94:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_ADC_MspInit+0xd8>)
 8000c9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c9e:	f003 0320 	and.w	r3, r3, #32
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ca6:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_ADC_MspInit+0xd8>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <HAL_ADC_MspInit+0xd8>)
 8000cae:	f043 0320 	orr.w	r3, r3, #32
 8000cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_ADC_MspInit+0xd8>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	f003 0320 	and.w	r3, r3, #32
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cd8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <HAL_ADC_MspInit+0xdc>)
 8000ce0:	f002 fb4a 	bl	8003378 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ce4:	bf00      	nop
 8000ce6:	37d8      	adds	r7, #216	; 0xd8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40022000 	.word	0x40022000
 8000cf0:	58024400 	.word	0x58024400
 8000cf4:	58021400 	.word	0x58021400

08000cf8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08e      	sub	sp, #56	; 0x38
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a59      	ldr	r2, [pc, #356]	; (8000e7c <HAL_ETH_MspInit+0x184>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	f040 80ab 	bne.w	8000e72 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d1c:	4b58      	ldr	r3, [pc, #352]	; (8000e80 <HAL_ETH_MspInit+0x188>)
 8000d1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d22:	4a57      	ldr	r2, [pc, #348]	; (8000e80 <HAL_ETH_MspInit+0x188>)
 8000d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d28:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d2c:	4b54      	ldr	r3, [pc, #336]	; (8000e80 <HAL_ETH_MspInit+0x188>)
 8000d2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d36:	623b      	str	r3, [r7, #32]
 8000d38:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d3a:	4b51      	ldr	r3, [pc, #324]	; (8000e80 <HAL_ETH_MspInit+0x188>)
 8000d3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d40:	4a4f      	ldr	r2, [pc, #316]	; (8000e80 <HAL_ETH_MspInit+0x188>)
 8000d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d46:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d4a:	4b4d      	ldr	r3, [pc, #308]	; (8000e80 <HAL_ETH_MspInit+0x188>)
 8000d4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d58:	4b49      	ldr	r3, [pc, #292]	; (8000e80 <HAL_ETH_MspInit+0x188>)
 8000d5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d5e:	4a48      	ldr	r2, [pc, #288]	; (8000e80 <HAL_ETH_MspInit+0x188>)
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d68:	4b45      	ldr	r3, [pc, #276]	; (8000e80 <HAL_ETH_MspInit+0x188>)
 8000d6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d76:	4b42      	ldr	r3, [pc, #264]	; (8000e80 <HAL_ETH_MspInit+0x188>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7c:	4a40      	ldr	r2, [pc, #256]	; (8000e80 <HAL_ETH_MspInit+0x188>)
 8000d7e:	f043 0304 	orr.w	r3, r3, #4
 8000d82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d86:	4b3e      	ldr	r3, [pc, #248]	; (8000e80 <HAL_ETH_MspInit+0x188>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d94:	4b3a      	ldr	r3, [pc, #232]	; (8000e80 <HAL_ETH_MspInit+0x188>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9a:	4a39      	ldr	r2, [pc, #228]	; (8000e80 <HAL_ETH_MspInit+0x188>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da4:	4b36      	ldr	r3, [pc, #216]	; (8000e80 <HAL_ETH_MspInit+0x188>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b33      	ldr	r3, [pc, #204]	; (8000e80 <HAL_ETH_MspInit+0x188>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db8:	4a31      	ldr	r2, [pc, #196]	; (8000e80 <HAL_ETH_MspInit+0x188>)
 8000dba:	f043 0302 	orr.w	r3, r3, #2
 8000dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc2:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <HAL_ETH_MspInit+0x188>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dd0:	4b2b      	ldr	r3, [pc, #172]	; (8000e80 <HAL_ETH_MspInit+0x188>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd6:	4a2a      	ldr	r2, [pc, #168]	; (8000e80 <HAL_ETH_MspInit+0x188>)
 8000dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de0:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <HAL_ETH_MspInit+0x188>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dee:	2332      	movs	r3, #50	; 0x32
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dfe:	230b      	movs	r3, #11
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e06:	4619      	mov	r1, r3
 8000e08:	481e      	ldr	r0, [pc, #120]	; (8000e84 <HAL_ETH_MspInit+0x18c>)
 8000e0a:	f002 fab5 	bl	8003378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e0e:	2386      	movs	r3, #134	; 0x86
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e1e:	230b      	movs	r3, #11
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	4817      	ldr	r0, [pc, #92]	; (8000e88 <HAL_ETH_MspInit+0x190>)
 8000e2a:	f002 faa5 	bl	8003378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e40:	230b      	movs	r3, #11
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4810      	ldr	r0, [pc, #64]	; (8000e8c <HAL_ETH_MspInit+0x194>)
 8000e4c:	f002 fa94 	bl	8003378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e50:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e62:	230b      	movs	r3, #11
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4808      	ldr	r0, [pc, #32]	; (8000e90 <HAL_ETH_MspInit+0x198>)
 8000e6e:	f002 fa83 	bl	8003378 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3738      	adds	r7, #56	; 0x38
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40028000 	.word	0x40028000
 8000e80:	58024400 	.word	0x58024400
 8000e84:	58020800 	.word	0x58020800
 8000e88:	58020000 	.word	0x58020000
 8000e8c:	58020400 	.word	0x58020400
 8000e90:	58021800 	.word	0x58021800

08000e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b0b6      	sub	sp, #216	; 0xd8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	22b4      	movs	r2, #180	; 0xb4
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f006 fdf3 	bl	8007aa0 <memset>
  if(huart->Instance==USART3)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a25      	ldr	r2, [pc, #148]	; (8000f54 <HAL_UART_MspInit+0xc0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d142      	bne.n	8000f4a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f003 fbb8 	bl	8004648 <HAL_RCCEx_PeriphCLKConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ede:	f7ff fe7b 	bl	8000bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <HAL_UART_MspInit+0xc4>)
 8000ee4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ee8:	4a1b      	ldr	r2, [pc, #108]	; (8000f58 <HAL_UART_MspInit+0xc4>)
 8000eea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_UART_MspInit+0xc4>)
 8000ef4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_UART_MspInit+0xc4>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f06:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <HAL_UART_MspInit+0xc4>)
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_UART_MspInit+0xc4>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000f1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f38:	2307      	movs	r3, #7
 8000f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	; (8000f5c <HAL_UART_MspInit+0xc8>)
 8000f46:	f002 fa17 	bl	8003378 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	37d8      	adds	r7, #216	; 0xd8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40004800 	.word	0x40004800
 8000f58:	58024400 	.word	0x58024400
 8000f5c:	58020c00 	.word	0x58020c00

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <NMI_Handler+0x4>

08000f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <MemManage_Handler+0x4>

08000f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <BusFault_Handler+0x4>

08000f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <UsageFault_Handler+0x4>

08000f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fac:	f000 f916 	bl	80011dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fb8:	4b32      	ldr	r3, [pc, #200]	; (8001084 <SystemInit+0xd0>)
 8000fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fbe:	4a31      	ldr	r2, [pc, #196]	; (8001084 <SystemInit+0xd0>)
 8000fc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fc8:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <SystemInit+0xd4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	2b06      	cmp	r3, #6
 8000fd2:	d807      	bhi.n	8000fe4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <SystemInit+0xd4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f023 030f 	bic.w	r3, r3, #15
 8000fdc:	4a2a      	ldr	r2, [pc, #168]	; (8001088 <SystemInit+0xd4>)
 8000fde:	f043 0307 	orr.w	r3, r3, #7
 8000fe2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fe4:	4b29      	ldr	r3, [pc, #164]	; (800108c <SystemInit+0xd8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a28      	ldr	r2, [pc, #160]	; (800108c <SystemInit+0xd8>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ff0:	4b26      	ldr	r3, [pc, #152]	; (800108c <SystemInit+0xd8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ff6:	4b25      	ldr	r3, [pc, #148]	; (800108c <SystemInit+0xd8>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	4924      	ldr	r1, [pc, #144]	; (800108c <SystemInit+0xd8>)
 8000ffc:	4b24      	ldr	r3, [pc, #144]	; (8001090 <SystemInit+0xdc>)
 8000ffe:	4013      	ands	r3, r2
 8001000:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <SystemInit+0xd4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	2b00      	cmp	r3, #0
 800100c:	d007      	beq.n	800101e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800100e:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <SystemInit+0xd4>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f023 030f 	bic.w	r3, r3, #15
 8001016:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <SystemInit+0xd4>)
 8001018:	f043 0307 	orr.w	r3, r3, #7
 800101c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800101e:	4b1b      	ldr	r3, [pc, #108]	; (800108c <SystemInit+0xd8>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <SystemInit+0xd8>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <SystemInit+0xd8>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <SystemInit+0xd8>)
 8001032:	4a18      	ldr	r2, [pc, #96]	; (8001094 <SystemInit+0xe0>)
 8001034:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <SystemInit+0xd8>)
 8001038:	4a17      	ldr	r2, [pc, #92]	; (8001098 <SystemInit+0xe4>)
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <SystemInit+0xd8>)
 800103e:	4a17      	ldr	r2, [pc, #92]	; (800109c <SystemInit+0xe8>)
 8001040:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001042:	4b12      	ldr	r3, [pc, #72]	; (800108c <SystemInit+0xd8>)
 8001044:	2200      	movs	r2, #0
 8001046:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001048:	4b10      	ldr	r3, [pc, #64]	; (800108c <SystemInit+0xd8>)
 800104a:	4a14      	ldr	r2, [pc, #80]	; (800109c <SystemInit+0xe8>)
 800104c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <SystemInit+0xd8>)
 8001050:	2200      	movs	r2, #0
 8001052:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001054:	4b0d      	ldr	r3, [pc, #52]	; (800108c <SystemInit+0xd8>)
 8001056:	4a11      	ldr	r2, [pc, #68]	; (800109c <SystemInit+0xe8>)
 8001058:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <SystemInit+0xd8>)
 800105c:	2200      	movs	r2, #0
 800105e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <SystemInit+0xd8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a09      	ldr	r2, [pc, #36]	; (800108c <SystemInit+0xd8>)
 8001066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <SystemInit+0xd8>)
 800106e:	2200      	movs	r2, #0
 8001070:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <SystemInit+0xec>)
 8001074:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001078:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00
 8001088:	52002000 	.word	0x52002000
 800108c:	58024400 	.word	0x58024400
 8001090:	eaf6ed7f 	.word	0xeaf6ed7f
 8001094:	02020200 	.word	0x02020200
 8001098:	01ff0000 	.word	0x01ff0000
 800109c:	01010280 	.word	0x01010280
 80010a0:	52004000 	.word	0x52004000

080010a4 <Reset_Handler>:
 80010a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010dc <LoopFillZerobss+0xe>
 80010a8:	f7ff ff84 	bl	8000fb4 <SystemInit>
 80010ac:	480c      	ldr	r0, [pc, #48]	; (80010e0 <LoopFillZerobss+0x12>)
 80010ae:	490d      	ldr	r1, [pc, #52]	; (80010e4 <LoopFillZerobss+0x16>)
 80010b0:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <LoopFillZerobss+0x1a>)
 80010b2:	2300      	movs	r3, #0
 80010b4:	e002      	b.n	80010bc <LoopCopyDataInit>

080010b6 <CopyDataInit>:
 80010b6:	58d4      	ldr	r4, [r2, r3]
 80010b8:	50c4      	str	r4, [r0, r3]
 80010ba:	3304      	adds	r3, #4

080010bc <LoopCopyDataInit>:
 80010bc:	18c4      	adds	r4, r0, r3
 80010be:	428c      	cmp	r4, r1
 80010c0:	d3f9      	bcc.n	80010b6 <CopyDataInit>
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <LoopFillZerobss+0x1e>)
 80010c4:	4c0a      	ldr	r4, [pc, #40]	; (80010f0 <LoopFillZerobss+0x22>)
 80010c6:	2300      	movs	r3, #0
 80010c8:	e001      	b.n	80010ce <LoopFillZerobss>

080010ca <FillZerobss>:
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	3204      	adds	r2, #4

080010ce <LoopFillZerobss>:
 80010ce:	42a2      	cmp	r2, r4
 80010d0:	d3fb      	bcc.n	80010ca <FillZerobss>
 80010d2:	f006 fcc1 	bl	8007a58 <__libc_init_array>
 80010d6:	f7ff fa9b 	bl	8000610 <main>
 80010da:	4770      	bx	lr
 80010dc:	24050000 	.word	0x24050000
 80010e0:	24000000 	.word	0x24000000
 80010e4:	24000010 	.word	0x24000010
 80010e8:	08007b10 	.word	0x08007b10
 80010ec:	240000d0 	.word	0x240000d0
 80010f0:	240002e4 	.word	0x240002e4

080010f4 <ADC3_IRQHandler>:
 80010f4:	e7fe      	b.n	80010f4 <ADC3_IRQHandler>
	...

080010f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fe:	2003      	movs	r0, #3
 8001100:	f001 fce4 	bl	8002acc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001104:	f003 f8ca 	bl	800429c <HAL_RCC_GetSysClockFreq>
 8001108:	4602      	mov	r2, r0
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_Init+0x68>)
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	0a1b      	lsrs	r3, r3, #8
 8001110:	f003 030f 	and.w	r3, r3, #15
 8001114:	4913      	ldr	r1, [pc, #76]	; (8001164 <HAL_Init+0x6c>)
 8001116:	5ccb      	ldrb	r3, [r1, r3]
 8001118:	f003 031f 	and.w	r3, r3, #31
 800111c:	fa22 f303 	lsr.w	r3, r2, r3
 8001120:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <HAL_Init+0x68>)
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <HAL_Init+0x6c>)
 800112c:	5cd3      	ldrb	r3, [r2, r3]
 800112e:	f003 031f 	and.w	r3, r3, #31
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	fa22 f303 	lsr.w	r3, r2, r3
 8001138:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <HAL_Init+0x70>)
 800113a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800113c:	4a0b      	ldr	r2, [pc, #44]	; (800116c <HAL_Init+0x74>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001142:	2000      	movs	r0, #0
 8001144:	f000 f814 	bl	8001170 <HAL_InitTick>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e002      	b.n	8001158 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001152:	f7ff fd47 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	58024400 	.word	0x58024400
 8001164:	08007ac8 	.word	0x08007ac8
 8001168:	24000004 	.word	0x24000004
 800116c:	24000000 	.word	0x24000000

08001170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_InitTick+0x60>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e021      	b.n	80011c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <HAL_InitTick+0x64>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_InitTick+0x60>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001192:	fbb3 f3f1 	udiv	r3, r3, r1
 8001196:	fbb2 f3f3 	udiv	r3, r2, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f001 fcbb 	bl	8002b16 <HAL_SYSTICK_Config>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00e      	b.n	80011c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	d80a      	bhi.n	80011c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b0:	2200      	movs	r2, #0
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f001 fc93 	bl	8002ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011bc:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <HAL_InitTick+0x68>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e000      	b.n	80011c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	2400000c 	.word	0x2400000c
 80011d4:	24000000 	.word	0x24000000
 80011d8:	24000008 	.word	0x24000008

080011dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x20>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x24>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <HAL_IncTick+0x24>)
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	2400000c 	.word	0x2400000c
 8001200:	240002e0 	.word	0x240002e0

08001204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <HAL_GetTick+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	240002e0 	.word	0x240002e0

0800121c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001224:	f7ff ffee 	bl	8001204 <HAL_GetTick>
 8001228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001234:	d005      	beq.n	8001242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_Delay+0x44>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4413      	add	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001242:	bf00      	nop
 8001244:	f7ff ffde 	bl	8001204 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	429a      	cmp	r2, r3
 8001252:	d8f7      	bhi.n	8001244 <HAL_Delay+0x28>
  {
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2400000c 	.word	0x2400000c

08001264 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001274:	4904      	ldr	r1, [pc, #16]	; (8001288 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4313      	orrs	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	58000400 	.word	0x58000400

0800128c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	609a      	str	r2, [r3, #8]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	431a      	orrs	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	609a      	str	r2, [r3, #8]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	3360      	adds	r3, #96	; 0x60
 8001306:	461a      	mov	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4a10      	ldr	r2, [pc, #64]	; (8001354 <LL_ADC_SetOffset+0x60>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d10b      	bne.n	8001330 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	4313      	orrs	r3, r2
 8001326:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800132e:	e00b      	b.n	8001348 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	430b      	orrs	r3, r1
 8001342:	431a      	orrs	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	601a      	str	r2, [r3, #0]
}
 8001348:	bf00      	nop
 800134a:	371c      	adds	r7, #28
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	58026000 	.word	0x58026000

08001358 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3360      	adds	r3, #96	; 0x60
 8001366:	461a      	mov	r2, r3
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	f003 031f 	and.w	r3, r3, #31
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	431a      	orrs	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	611a      	str	r2, [r3, #16]
}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b087      	sub	sp, #28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4a0c      	ldr	r2, [pc, #48]	; (80013f8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d00e      	beq.n	80013ea <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	3360      	adds	r3, #96	; 0x60
 80013d0:	461a      	mov	r2, r3
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	431a      	orrs	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	601a      	str	r2, [r3, #0]
  }
}
 80013ea:	bf00      	nop
 80013ec:	371c      	adds	r7, #28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	58026000 	.word	0x58026000

080013fc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b087      	sub	sp, #28
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4a0c      	ldr	r2, [pc, #48]	; (800143c <LL_ADC_SetOffsetSaturation+0x40>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d10e      	bne.n	800142e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3360      	adds	r3, #96	; 0x60
 8001414:	461a      	mov	r2, r3
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	431a      	orrs	r2, r3
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800142e:	bf00      	nop
 8001430:	371c      	adds	r7, #28
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	58026000 	.word	0x58026000

08001440 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001440:	b480      	push	{r7}
 8001442:	b087      	sub	sp, #28
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4a0c      	ldr	r2, [pc, #48]	; (8001480 <LL_ADC_SetOffsetSign+0x40>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d10e      	bne.n	8001472 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3360      	adds	r3, #96	; 0x60
 8001458:	461a      	mov	r2, r3
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	431a      	orrs	r2, r3
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001472:	bf00      	nop
 8001474:	371c      	adds	r7, #28
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	58026000 	.word	0x58026000

08001484 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001484:	b480      	push	{r7}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3360      	adds	r3, #96	; 0x60
 8001494:	461a      	mov	r2, r3
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4a0c      	ldr	r2, [pc, #48]	; (80014d4 <LL_ADC_SetOffsetState+0x50>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d108      	bne.n	80014b8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	431a      	orrs	r2, r3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80014b6:	e007      	b.n	80014c8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	431a      	orrs	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	601a      	str	r2, [r3, #0]
}
 80014c8:	bf00      	nop
 80014ca:	371c      	adds	r7, #28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	58026000 	.word	0x58026000

080014d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3330      	adds	r3, #48	; 0x30
 80014e8:	461a      	mov	r2, r3
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	f003 030c 	and.w	r3, r3, #12
 80014f4:	4413      	add	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	211f      	movs	r1, #31
 8001504:	fa01 f303 	lsl.w	r3, r1, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	401a      	ands	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	0e9b      	lsrs	r3, r3, #26
 8001510:	f003 011f 	and.w	r1, r3, #31
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	431a      	orrs	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001524:	bf00      	nop
 8001526:	371c      	adds	r7, #28
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001530:	b480      	push	{r7}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3314      	adds	r3, #20
 8001540:	461a      	mov	r2, r3
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	0e5b      	lsrs	r3, r3, #25
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	4413      	add	r3, r2
 800154e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	0d1b      	lsrs	r3, r3, #20
 8001558:	f003 031f 	and.w	r3, r3, #31
 800155c:	2107      	movs	r1, #7
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	401a      	ands	r2, r3
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	0d1b      	lsrs	r3, r3, #20
 800156a:	f003 031f 	and.w	r3, r3, #31
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	fa01 f303 	lsl.w	r3, r1, r3
 8001574:	431a      	orrs	r2, r3
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800157a:	bf00      	nop
 800157c:	371c      	adds	r7, #28
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4a1a      	ldr	r2, [pc, #104]	; (8001600 <LL_ADC_SetChannelSingleDiff+0x78>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d115      	bne.n	80015c8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015a8:	43db      	mvns	r3, r3
 80015aa:	401a      	ands	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f003 0318 	and.w	r3, r3, #24
 80015b2:	4914      	ldr	r1, [pc, #80]	; (8001604 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80015b4:	40d9      	lsrs	r1, r3
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	400b      	ands	r3, r1
 80015ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015be:	431a      	orrs	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80015c6:	e014      	b.n	80015f2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015d4:	43db      	mvns	r3, r3
 80015d6:	401a      	ands	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0318 	and.w	r3, r3, #24
 80015de:	4909      	ldr	r1, [pc, #36]	; (8001604 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80015e0:	40d9      	lsrs	r1, r3
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	400b      	ands	r3, r1
 80015e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015ea:	431a      	orrs	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	58026000 	.word	0x58026000
 8001604:	000fffff 	.word	0x000fffff

08001608 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001616:	4013      	ands	r3, r2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6093      	str	r3, [r2, #8]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	5fffffc0 	.word	0x5fffffc0

0800162c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800163c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001640:	d101      	bne.n	8001646 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <LL_ADC_EnableInternalRegulator+0x24>)
 8001662:	4013      	ands	r3, r2
 8001664:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	6fffffc0 	.word	0x6fffffc0

0800167c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001690:	d101      	bne.n	8001696 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d101      	bne.n	80016bc <LL_ADC_IsEnabled+0x18>
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <LL_ADC_IsEnabled+0x1a>
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d101      	bne.n	80016e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b08      	cmp	r3, #8
 8001702:	d101      	bne.n	8001708 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b089      	sub	sp, #36	; 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e1ee      	b.n	8001b10 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173c:	2b00      	cmp	r3, #0
 800173e:	d109      	bne.n	8001754 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fa69 	bl	8000c18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff67 	bl	800162c <LL_ADC_IsDeepPowerDownEnabled>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d004      	beq.n	800176e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff4d 	bl	8001608 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ff82 	bl	800167c <LL_ADC_IsInternalRegulatorEnabled>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d114      	bne.n	80017a8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ff66 	bl	8001654 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001788:	4b8e      	ldr	r3, [pc, #568]	; (80019c4 <HAL_ADC_Init+0x2ac>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	099b      	lsrs	r3, r3, #6
 800178e:	4a8e      	ldr	r2, [pc, #568]	; (80019c8 <HAL_ADC_Init+0x2b0>)
 8001790:	fba2 2303 	umull	r2, r3, r2, r3
 8001794:	099b      	lsrs	r3, r3, #6
 8001796:	3301      	adds	r3, #1
 8001798:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800179a:	e002      	b.n	80017a2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	3b01      	subs	r3, #1
 80017a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f9      	bne.n	800179c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff65 	bl	800167c <LL_ADC_IsInternalRegulatorEnabled>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10d      	bne.n	80017d4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017bc:	f043 0210 	orr.w	r2, r3, #16
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017c8:	f043 0201 	orr.w	r2, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff76 	bl	80016ca <LL_ADC_REG_IsConversionOngoing>
 80017de:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e4:	f003 0310 	and.w	r3, r3, #16
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f040 8188 	bne.w	8001afe <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f040 8184 	bne.w	8001afe <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017fe:	f043 0202 	orr.w	r2, r3, #2
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff ff4a 	bl	80016a4 <LL_ADC_IsEnabled>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d136      	bne.n	8001884 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a6c      	ldr	r2, [pc, #432]	; (80019cc <HAL_ADC_Init+0x2b4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d004      	beq.n	800182a <HAL_ADC_Init+0x112>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a6a      	ldr	r2, [pc, #424]	; (80019d0 <HAL_ADC_Init+0x2b8>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d10e      	bne.n	8001848 <HAL_ADC_Init+0x130>
 800182a:	4868      	ldr	r0, [pc, #416]	; (80019cc <HAL_ADC_Init+0x2b4>)
 800182c:	f7ff ff3a 	bl	80016a4 <LL_ADC_IsEnabled>
 8001830:	4604      	mov	r4, r0
 8001832:	4867      	ldr	r0, [pc, #412]	; (80019d0 <HAL_ADC_Init+0x2b8>)
 8001834:	f7ff ff36 	bl	80016a4 <LL_ADC_IsEnabled>
 8001838:	4603      	mov	r3, r0
 800183a:	4323      	orrs	r3, r4
 800183c:	2b00      	cmp	r3, #0
 800183e:	bf0c      	ite	eq
 8001840:	2301      	moveq	r3, #1
 8001842:	2300      	movne	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	e008      	b.n	800185a <HAL_ADC_Init+0x142>
 8001848:	4862      	ldr	r0, [pc, #392]	; (80019d4 <HAL_ADC_Init+0x2bc>)
 800184a:	f7ff ff2b 	bl	80016a4 <LL_ADC_IsEnabled>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf0c      	ite	eq
 8001854:	2301      	moveq	r3, #1
 8001856:	2300      	movne	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d012      	beq.n	8001884 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a5a      	ldr	r2, [pc, #360]	; (80019cc <HAL_ADC_Init+0x2b4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d004      	beq.n	8001872 <HAL_ADC_Init+0x15a>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a58      	ldr	r2, [pc, #352]	; (80019d0 <HAL_ADC_Init+0x2b8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d101      	bne.n	8001876 <HAL_ADC_Init+0x15e>
 8001872:	4a59      	ldr	r2, [pc, #356]	; (80019d8 <HAL_ADC_Init+0x2c0>)
 8001874:	e000      	b.n	8001878 <HAL_ADC_Init+0x160>
 8001876:	4a59      	ldr	r2, [pc, #356]	; (80019dc <HAL_ADC_Init+0x2c4>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4619      	mov	r1, r3
 800187e:	4610      	mov	r0, r2
 8001880:	f7ff fd04 	bl	800128c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a52      	ldr	r2, [pc, #328]	; (80019d4 <HAL_ADC_Init+0x2bc>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d129      	bne.n	80018e2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	7e5b      	ldrb	r3, [r3, #25]
 8001892:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001898:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800189e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d013      	beq.n	80018d0 <HAL_ADC_Init+0x1b8>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b0c      	cmp	r3, #12
 80018ae:	d00d      	beq.n	80018cc <HAL_ADC_Init+0x1b4>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b1c      	cmp	r3, #28
 80018b6:	d007      	beq.n	80018c8 <HAL_ADC_Init+0x1b0>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b18      	cmp	r3, #24
 80018be:	d101      	bne.n	80018c4 <HAL_ADC_Init+0x1ac>
 80018c0:	2318      	movs	r3, #24
 80018c2:	e006      	b.n	80018d2 <HAL_ADC_Init+0x1ba>
 80018c4:	2300      	movs	r3, #0
 80018c6:	e004      	b.n	80018d2 <HAL_ADC_Init+0x1ba>
 80018c8:	2310      	movs	r3, #16
 80018ca:	e002      	b.n	80018d2 <HAL_ADC_Init+0x1ba>
 80018cc:	2308      	movs	r3, #8
 80018ce:	e000      	b.n	80018d2 <HAL_ADC_Init+0x1ba>
 80018d0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80018d2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018da:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	e00e      	b.n	8001900 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7e5b      	ldrb	r3, [r3, #25]
 80018e6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018ec:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80018f2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018fa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d106      	bne.n	8001918 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	3b01      	subs	r3, #1
 8001910:	045b      	lsls	r3, r3, #17
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	2b00      	cmp	r3, #0
 800191e:	d009      	beq.n	8001934 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001924:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a26      	ldr	r2, [pc, #152]	; (80019d4 <HAL_ADC_Init+0x2bc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d115      	bne.n	800196a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <HAL_ADC_Init+0x2c8>)
 8001946:	4013      	ands	r3, r2
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	69b9      	ldr	r1, [r7, #24]
 800194e:	430b      	orrs	r3, r1
 8001950:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	611a      	str	r2, [r3, #16]
 8001968:	e009      	b.n	800197e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <HAL_ADC_Init+0x2cc>)
 8001972:	4013      	ands	r3, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	69b9      	ldr	r1, [r7, #24]
 800197a:	430b      	orrs	r3, r1
 800197c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fea1 	bl	80016ca <LL_ADC_REG_IsConversionOngoing>
 8001988:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff feae 	bl	80016f0 <LL_ADC_INJ_IsConversionOngoing>
 8001994:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	2b00      	cmp	r3, #0
 800199a:	f040 808e 	bne.w	8001aba <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f040 808a 	bne.w	8001aba <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <HAL_ADC_Init+0x2bc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d11b      	bne.n	80019e8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	7e1b      	ldrb	r3, [r3, #24]
 80019b4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019bc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
 80019c2:	e018      	b.n	80019f6 <HAL_ADC_Init+0x2de>
 80019c4:	24000000 	.word	0x24000000
 80019c8:	053e2d63 	.word	0x053e2d63
 80019cc:	40022000 	.word	0x40022000
 80019d0:	40022100 	.word	0x40022100
 80019d4:	58026000 	.word	0x58026000
 80019d8:	40022300 	.word	0x40022300
 80019dc:	58026300 	.word	0x58026300
 80019e0:	fff04007 	.word	0xfff04007
 80019e4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7e1b      	ldrb	r3, [r3, #24]
 80019ec:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	4b46      	ldr	r3, [pc, #280]	; (8001b18 <HAL_ADC_Init+0x400>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	69b9      	ldr	r1, [r7, #24]
 8001a06:	430b      	orrs	r3, r1
 8001a08:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d137      	bne.n	8001a84 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a3f      	ldr	r2, [pc, #252]	; (8001b1c <HAL_ADC_Init+0x404>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d116      	bne.n	8001a52 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691a      	ldr	r2, [r3, #16]
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <HAL_ADC_Init+0x408>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a36:	4311      	orrs	r1, r2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a3c:	4311      	orrs	r1, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001a42:	430a      	orrs	r2, r1
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0201 	orr.w	r2, r2, #1
 8001a4e:	611a      	str	r2, [r3, #16]
 8001a50:	e020      	b.n	8001a94 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	691a      	ldr	r2, [r3, #16]
 8001a58:	4b32      	ldr	r3, [pc, #200]	; (8001b24 <HAL_ADC_Init+0x40c>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a60:	3a01      	subs	r2, #1
 8001a62:	0411      	lsls	r1, r2, #16
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a68:	4311      	orrs	r1, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a6e:	4311      	orrs	r1, r2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001a74:	430a      	orrs	r2, r1
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f042 0201 	orr.w	r2, r2, #1
 8001a80:	611a      	str	r2, [r3, #16]
 8001a82:	e007      	b.n	8001a94 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691a      	ldr	r2, [r3, #16]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0201 	bic.w	r2, r2, #1
 8001a92:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <HAL_ADC_Init+0x404>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d002      	beq.n	8001aba <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 fd63 	bl	8002580 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d10c      	bne.n	8001adc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	f023 010f 	bic.w	r1, r3, #15
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	1e5a      	subs	r2, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	631a      	str	r2, [r3, #48]	; 0x30
 8001ada:	e007      	b.n	8001aec <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 020f 	bic.w	r2, r2, #15
 8001aea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af0:	f023 0303 	bic.w	r3, r3, #3
 8001af4:	f043 0201 	orr.w	r2, r3, #1
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	661a      	str	r2, [r3, #96]	; 0x60
 8001afc:	e007      	b.n	8001b0e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b02:	f043 0210 	orr.w	r2, r3, #16
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3724      	adds	r7, #36	; 0x24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd90      	pop	{r4, r7, pc}
 8001b18:	ffffbffc 	.word	0xffffbffc
 8001b1c:	58026000 	.word	0x58026000
 8001b20:	fc00f81f 	.word	0xfc00f81f
 8001b24:	fc00f81e 	.word	0xfc00f81e

08001b28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b0b9      	sub	sp, #228	; 0xe4
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b42:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4aa9      	ldr	r2, [pc, #676]	; (8001df0 <HAL_ADC_ConfigChannel+0x2c8>)
 8001b4a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d102      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x34>
 8001b56:	2302      	movs	r3, #2
 8001b58:	f000 bcfa 	b.w	8002550 <HAL_ADC_ConfigChannel+0xa28>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fdae 	bl	80016ca <LL_ADC_REG_IsConversionOngoing>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f040 84de 	bne.w	8002532 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a9e      	ldr	r2, [pc, #632]	; (8001df4 <HAL_ADC_ConfigChannel+0x2cc>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d033      	beq.n	8001be8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d108      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x76>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	0e9b      	lsrs	r3, r3, #26
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	2201      	movs	r2, #1
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	e01d      	b.n	8001bda <HAL_ADC_ConfigChannel+0xb2>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e004      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8001bc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	69d1      	ldr	r1, [r2, #28]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	430b      	orrs	r3, r1
 8001be6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	6859      	ldr	r1, [r3, #4]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	f7ff fc6f 	bl	80014d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fd63 	bl	80016ca <LL_ADC_REG_IsConversionOngoing>
 8001c04:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fd6f 	bl	80016f0 <LL_ADC_INJ_IsConversionOngoing>
 8001c12:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f040 8270 	bne.w	8002100 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f040 826b 	bne.w	8002100 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6818      	ldr	r0, [r3, #0]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	6819      	ldr	r1, [r3, #0]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	461a      	mov	r2, r3
 8001c38:	f7ff fc7a 	bl	8001530 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a6c      	ldr	r2, [pc, #432]	; (8001df4 <HAL_ADC_ConfigChannel+0x2cc>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d10d      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	695a      	ldr	r2, [r3, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	08db      	lsrs	r3, r3, #3
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c60:	e032      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c62:	4b65      	ldr	r3, [pc, #404]	; (8001df8 <HAL_ADC_ConfigChannel+0x2d0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001c6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c6e:	d10b      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x160>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	695a      	ldr	r2, [r3, #20]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	e01d      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x19c>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10b      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x186>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	695a      	ldr	r2, [r3, #20]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	e00a      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x19c>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	695a      	ldr	r2, [r3, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d048      	beq.n	8001d62 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	6919      	ldr	r1, [r3, #16]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ce0:	f7ff fb08 	bl	80012f4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a42      	ldr	r2, [pc, #264]	; (8001df4 <HAL_ADC_ConfigChannel+0x2cc>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d119      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	6919      	ldr	r1, [r3, #16]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	f7ff fba0 	bl	8001440 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	6919      	ldr	r1, [r3, #16]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d102      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1f0>
 8001d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d16:	e000      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1f2>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	f7ff fb6e 	bl	80013fc <LL_ADC_SetOffsetSaturation>
 8001d20:	e1ee      	b.n	8002100 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	6919      	ldr	r1, [r3, #16]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d102      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x212>
 8001d34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001d38:	e000      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x214>
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f7ff fb3b 	bl	80013b8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	6919      	ldr	r1, [r3, #16]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	7e1b      	ldrb	r3, [r3, #24]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d102      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x230>
 8001d52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d56:	e000      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x232>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f7ff fb12 	bl	8001384 <LL_ADC_SetDataRightShift>
 8001d60:	e1ce      	b.n	8002100 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a23      	ldr	r2, [pc, #140]	; (8001df4 <HAL_ADC_ConfigChannel+0x2cc>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	f040 8181 	bne.w	8002070 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff faef 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10a      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x272>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fae4 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001d90:	4603      	mov	r3, r0
 8001d92:	0e9b      	lsrs	r3, r3, #26
 8001d94:	f003 021f 	and.w	r2, r3, #31
 8001d98:	e01e      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x2b0>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fad9 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001db0:	fa93 f3a3 	rbit	r3, r3
 8001db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8001db8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001dbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8001dc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8001dc8:	2320      	movs	r3, #32
 8001dca:	e004      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8001dcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dd0:	fab3 f383 	clz	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10b      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x2d4>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0e9b      	lsrs	r3, r3, #26
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	e01e      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x306>
 8001df0:	47ff0000 	.word	0x47ff0000
 8001df4:	58026000 	.word	0x58026000
 8001df8:	5c001000 	.word	0x5c001000
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001e10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001e18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8001e20:	2320      	movs	r3, #32
 8001e22:	e004      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8001e24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e28:	fab3 f383 	clz	r3, r3
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d106      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fb22 	bl	8001484 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2101      	movs	r1, #1
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fa86 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10a      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x344>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fa7b 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	0e9b      	lsrs	r3, r3, #26
 8001e66:	f003 021f 	and.w	r2, r3, #31
 8001e6a:	e01e      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x382>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2101      	movs	r1, #1
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fa70 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001e8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001e92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8001e9a:	2320      	movs	r3, #32
 8001e9c:	e004      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8001e9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d105      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x39a>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	0e9b      	lsrs	r3, r3, #26
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	e018      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x3cc>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001ed6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001eda:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001ede:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8001ee6:	2320      	movs	r3, #32
 8001ee8:	e004      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8001eea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d106      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2200      	movs	r2, #0
 8001efe:	2101      	movs	r1, #1
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fabf 	bl	8001484 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2102      	movs	r1, #2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fa23 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001f12:	4603      	mov	r3, r0
 8001f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10a      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x40a>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2102      	movs	r1, #2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fa18 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	0e9b      	lsrs	r3, r3, #26
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	e01e      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x448>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2102      	movs	r1, #2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fa0d 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f48:	fa93 f3a3 	rbit	r3, r3
 8001f4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001f58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8001f60:	2320      	movs	r3, #32
 8001f62:	e004      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8001f64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f68:	fab3 f383 	clz	r3, r3
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	461a      	mov	r2, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x460>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	0e9b      	lsrs	r3, r3, #26
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	e014      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x48a>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001f96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001f9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8001fa4:	2320      	movs	r3, #32
 8001fa6:	e004      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8001fa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fac:	fab3 f383 	clz	r3, r3
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d106      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fa60 	bl	8001484 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2103      	movs	r1, #3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff f9c4 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10a      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x4c8>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2103      	movs	r1, #3
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff f9b9 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	0e9b      	lsrs	r3, r3, #26
 8001fea:	f003 021f 	and.w	r2, r3, #31
 8001fee:	e017      	b.n	8002020 <HAL_ADC_ConfigChannel+0x4f8>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2103      	movs	r1, #3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff f9ae 	bl	8001358 <LL_ADC_GetOffsetChannel>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800200a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800200c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002012:	2320      	movs	r3, #32
 8002014:	e003      	b.n	800201e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002028:	2b00      	cmp	r3, #0
 800202a:	d105      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x510>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	0e9b      	lsrs	r3, r3, #26
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	e011      	b.n	800205c <HAL_ADC_ConfigChannel+0x534>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002048:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800204a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8002050:	2320      	movs	r3, #32
 8002052:	e003      	b.n	800205c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8002054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	429a      	cmp	r2, r3
 800205e:	d14f      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2200      	movs	r2, #0
 8002066:	2103      	movs	r1, #3
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fa0b 	bl	8001484 <LL_ADC_SetOffsetState>
 800206e:	e047      	b.n	8002100 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002076:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	069b      	lsls	r3, r3, #26
 8002080:	429a      	cmp	r2, r3
 8002082:	d107      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002092:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800209a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	069b      	lsls	r3, r3, #26
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d107      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020b6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	069b      	lsls	r3, r3, #26
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d107      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020da:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	069b      	lsls	r3, r3, #26
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d107      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020fe:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff facd 	bl	80016a4 <LL_ADC_IsEnabled>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	f040 8219 	bne.w	8002544 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6819      	ldr	r1, [r3, #0]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	461a      	mov	r2, r3
 8002120:	f7ff fa32 	bl	8001588 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4aa1      	ldr	r2, [pc, #644]	; (80023b0 <HAL_ADC_ConfigChannel+0x888>)
 800212a:	4293      	cmp	r3, r2
 800212c:	f040 812e 	bne.w	800238c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10b      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x630>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	0e9b      	lsrs	r3, r3, #26
 8002146:	3301      	adds	r3, #1
 8002148:	f003 031f 	and.w	r3, r3, #31
 800214c:	2b09      	cmp	r3, #9
 800214e:	bf94      	ite	ls
 8002150:	2301      	movls	r3, #1
 8002152:	2300      	movhi	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	e019      	b.n	800218c <HAL_ADC_ConfigChannel+0x664>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002160:	fa93 f3a3 	rbit	r3, r3
 8002164:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002168:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800216a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8002170:	2320      	movs	r3, #32
 8002172:	e003      	b.n	800217c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8002174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	3301      	adds	r3, #1
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	2b09      	cmp	r3, #9
 8002184:	bf94      	ite	ls
 8002186:	2301      	movls	r3, #1
 8002188:	2300      	movhi	r3, #0
 800218a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800218c:	2b00      	cmp	r3, #0
 800218e:	d079      	beq.n	8002284 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002198:	2b00      	cmp	r3, #0
 800219a:	d107      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x684>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0e9b      	lsrs	r3, r3, #26
 80021a2:	3301      	adds	r3, #1
 80021a4:	069b      	lsls	r3, r3, #26
 80021a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021aa:	e015      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x6b0>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80021ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80021be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80021c4:	2320      	movs	r3, #32
 80021c6:	e003      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80021c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	3301      	adds	r3, #1
 80021d2:	069b      	lsls	r3, r3, #26
 80021d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x6d0>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0e9b      	lsrs	r3, r3, #26
 80021ea:	3301      	adds	r3, #1
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	2101      	movs	r1, #1
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	e017      	b.n	8002228 <HAL_ADC_ConfigChannel+0x700>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002208:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800220a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8002210:	2320      	movs	r3, #32
 8002212:	e003      	b.n	800221c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8002214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	3301      	adds	r3, #1
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	2101      	movs	r1, #1
 8002224:	fa01 f303 	lsl.w	r3, r1, r3
 8002228:	ea42 0103 	orr.w	r1, r2, r3
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10a      	bne.n	800224e <HAL_ADC_ConfigChannel+0x726>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	0e9b      	lsrs	r3, r3, #26
 800223e:	3301      	adds	r3, #1
 8002240:	f003 021f 	and.w	r2, r3, #31
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	051b      	lsls	r3, r3, #20
 800224c:	e018      	b.n	8002280 <HAL_ADC_ConfigChannel+0x758>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800225c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8002266:	2320      	movs	r3, #32
 8002268:	e003      	b.n	8002272 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800226a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	3301      	adds	r3, #1
 8002274:	f003 021f 	and.w	r2, r3, #31
 8002278:	4613      	mov	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4413      	add	r3, r2
 800227e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002280:	430b      	orrs	r3, r1
 8002282:	e07e      	b.n	8002382 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800228c:	2b00      	cmp	r3, #0
 800228e:	d107      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x778>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	0e9b      	lsrs	r3, r3, #26
 8002296:	3301      	adds	r3, #1
 8002298:	069b      	lsls	r3, r3, #26
 800229a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800229e:	e015      	b.n	80022cc <HAL_ADC_ConfigChannel+0x7a4>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80022b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80022b8:	2320      	movs	r3, #32
 80022ba:	e003      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80022bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	3301      	adds	r3, #1
 80022c6:	069b      	lsls	r3, r3, #26
 80022c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d109      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x7c4>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	0e9b      	lsrs	r3, r3, #26
 80022de:	3301      	adds	r3, #1
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	2101      	movs	r1, #1
 80022e6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ea:	e017      	b.n	800231c <HAL_ADC_ConfigChannel+0x7f4>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	61bb      	str	r3, [r7, #24]
  return result;
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8002304:	2320      	movs	r3, #32
 8002306:	e003      	b.n	8002310 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	3301      	adds	r3, #1
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	2101      	movs	r1, #1
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	ea42 0103 	orr.w	r1, r2, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10d      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x820>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0e9b      	lsrs	r3, r3, #26
 8002332:	3301      	adds	r3, #1
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	4613      	mov	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	3b1e      	subs	r3, #30
 8002340:	051b      	lsls	r3, r3, #20
 8002342:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002346:	e01b      	b.n	8002380 <HAL_ADC_ConfigChannel+0x858>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	fa93 f3a3 	rbit	r3, r3
 8002354:	60fb      	str	r3, [r7, #12]
  return result;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8002360:	2320      	movs	r3, #32
 8002362:	e003      	b.n	800236c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fab3 f383 	clz	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	3301      	adds	r3, #1
 800236e:	f003 021f 	and.w	r2, r3, #31
 8002372:	4613      	mov	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4413      	add	r3, r2
 8002378:	3b1e      	subs	r3, #30
 800237a:	051b      	lsls	r3, r3, #20
 800237c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002380:	430b      	orrs	r3, r1
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	6892      	ldr	r2, [r2, #8]
 8002386:	4619      	mov	r1, r3
 8002388:	f7ff f8d2 	bl	8001530 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	f280 80d7 	bge.w	8002544 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a06      	ldr	r2, [pc, #24]	; (80023b4 <HAL_ADC_ConfigChannel+0x88c>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d004      	beq.n	80023aa <HAL_ADC_ConfigChannel+0x882>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <HAL_ADC_ConfigChannel+0x890>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d10a      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x898>
 80023aa:	4b04      	ldr	r3, [pc, #16]	; (80023bc <HAL_ADC_ConfigChannel+0x894>)
 80023ac:	e009      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x89a>
 80023ae:	bf00      	nop
 80023b0:	47ff0000 	.word	0x47ff0000
 80023b4:	40022000 	.word	0x40022000
 80023b8:	40022100 	.word	0x40022100
 80023bc:	40022300 	.word	0x40022300
 80023c0:	4b65      	ldr	r3, [pc, #404]	; (8002558 <HAL_ADC_ConfigChannel+0xa30>)
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe ff88 	bl	80012d8 <LL_ADC_GetCommonPathInternalCh>
 80023c8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a62      	ldr	r2, [pc, #392]	; (800255c <HAL_ADC_ConfigChannel+0xa34>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d004      	beq.n	80023e0 <HAL_ADC_ConfigChannel+0x8b8>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a61      	ldr	r2, [pc, #388]	; (8002560 <HAL_ADC_ConfigChannel+0xa38>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d10e      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x8d6>
 80023e0:	485e      	ldr	r0, [pc, #376]	; (800255c <HAL_ADC_ConfigChannel+0xa34>)
 80023e2:	f7ff f95f 	bl	80016a4 <LL_ADC_IsEnabled>
 80023e6:	4604      	mov	r4, r0
 80023e8:	485d      	ldr	r0, [pc, #372]	; (8002560 <HAL_ADC_ConfigChannel+0xa38>)
 80023ea:	f7ff f95b 	bl	80016a4 <LL_ADC_IsEnabled>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4323      	orrs	r3, r4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	bf0c      	ite	eq
 80023f6:	2301      	moveq	r3, #1
 80023f8:	2300      	movne	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	e008      	b.n	8002410 <HAL_ADC_ConfigChannel+0x8e8>
 80023fe:	4859      	ldr	r0, [pc, #356]	; (8002564 <HAL_ADC_ConfigChannel+0xa3c>)
 8002400:	f7ff f950 	bl	80016a4 <LL_ADC_IsEnabled>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf0c      	ite	eq
 800240a:	2301      	moveq	r3, #1
 800240c:	2300      	movne	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 8084 	beq.w	800251e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a53      	ldr	r2, [pc, #332]	; (8002568 <HAL_ADC_ConfigChannel+0xa40>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d132      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x95e>
 8002420:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002424:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d12c      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a4c      	ldr	r2, [pc, #304]	; (8002564 <HAL_ADC_ConfigChannel+0xa3c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	f040 8086 	bne.w	8002544 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a47      	ldr	r2, [pc, #284]	; (800255c <HAL_ADC_ConfigChannel+0xa34>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d004      	beq.n	800244c <HAL_ADC_ConfigChannel+0x924>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a46      	ldr	r2, [pc, #280]	; (8002560 <HAL_ADC_ConfigChannel+0xa38>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d101      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x928>
 800244c:	4a47      	ldr	r2, [pc, #284]	; (800256c <HAL_ADC_ConfigChannel+0xa44>)
 800244e:	e000      	b.n	8002452 <HAL_ADC_ConfigChannel+0x92a>
 8002450:	4a41      	ldr	r2, [pc, #260]	; (8002558 <HAL_ADC_ConfigChannel+0xa30>)
 8002452:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002456:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800245a:	4619      	mov	r1, r3
 800245c:	4610      	mov	r0, r2
 800245e:	f7fe ff28 	bl	80012b2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002462:	4b43      	ldr	r3, [pc, #268]	; (8002570 <HAL_ADC_ConfigChannel+0xa48>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	099b      	lsrs	r3, r3, #6
 8002468:	4a42      	ldr	r2, [pc, #264]	; (8002574 <HAL_ADC_ConfigChannel+0xa4c>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	099b      	lsrs	r3, r3, #6
 8002470:	3301      	adds	r3, #1
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002476:	e002      	b.n	800247e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	3b01      	subs	r3, #1
 800247c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f9      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002484:	e05e      	b.n	8002544 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a3b      	ldr	r2, [pc, #236]	; (8002578 <HAL_ADC_ConfigChannel+0xa50>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d120      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x9aa>
 8002490:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d11a      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a30      	ldr	r2, [pc, #192]	; (8002564 <HAL_ADC_ConfigChannel+0xa3c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d14e      	bne.n	8002544 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a2c      	ldr	r2, [pc, #176]	; (800255c <HAL_ADC_ConfigChannel+0xa34>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d004      	beq.n	80024ba <HAL_ADC_ConfigChannel+0x992>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a2a      	ldr	r2, [pc, #168]	; (8002560 <HAL_ADC_ConfigChannel+0xa38>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d101      	bne.n	80024be <HAL_ADC_ConfigChannel+0x996>
 80024ba:	4a2c      	ldr	r2, [pc, #176]	; (800256c <HAL_ADC_ConfigChannel+0xa44>)
 80024bc:	e000      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x998>
 80024be:	4a26      	ldr	r2, [pc, #152]	; (8002558 <HAL_ADC_ConfigChannel+0xa30>)
 80024c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c8:	4619      	mov	r1, r3
 80024ca:	4610      	mov	r0, r2
 80024cc:	f7fe fef1 	bl	80012b2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024d0:	e038      	b.n	8002544 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a29      	ldr	r2, [pc, #164]	; (800257c <HAL_ADC_ConfigChannel+0xa54>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d133      	bne.n	8002544 <HAL_ADC_ConfigChannel+0xa1c>
 80024dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d12d      	bne.n	8002544 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <HAL_ADC_ConfigChannel+0xa3c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d128      	bne.n	8002544 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a19      	ldr	r2, [pc, #100]	; (800255c <HAL_ADC_ConfigChannel+0xa34>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d004      	beq.n	8002506 <HAL_ADC_ConfigChannel+0x9de>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a17      	ldr	r2, [pc, #92]	; (8002560 <HAL_ADC_ConfigChannel+0xa38>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d101      	bne.n	800250a <HAL_ADC_ConfigChannel+0x9e2>
 8002506:	4a19      	ldr	r2, [pc, #100]	; (800256c <HAL_ADC_ConfigChannel+0xa44>)
 8002508:	e000      	b.n	800250c <HAL_ADC_ConfigChannel+0x9e4>
 800250a:	4a13      	ldr	r2, [pc, #76]	; (8002558 <HAL_ADC_ConfigChannel+0xa30>)
 800250c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002510:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002514:	4619      	mov	r1, r3
 8002516:	4610      	mov	r0, r2
 8002518:	f7fe fecb 	bl	80012b2 <LL_ADC_SetCommonPathInternalCh>
 800251c:	e012      	b.n	8002544 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002522:	f043 0220 	orr.w	r2, r3, #32
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8002530:	e008      	b.n	8002544 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002536:	f043 0220 	orr.w	r2, r3, #32
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800254c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8002550:	4618      	mov	r0, r3
 8002552:	37e4      	adds	r7, #228	; 0xe4
 8002554:	46bd      	mov	sp, r7
 8002556:	bd90      	pop	{r4, r7, pc}
 8002558:	58026300 	.word	0x58026300
 800255c:	40022000 	.word	0x40022000
 8002560:	40022100 	.word	0x40022100
 8002564:	58026000 	.word	0x58026000
 8002568:	c7520000 	.word	0xc7520000
 800256c:	40022300 	.word	0x40022300
 8002570:	24000000 	.word	0x24000000
 8002574:	053e2d63 	.word	0x053e2d63
 8002578:	c3210000 	.word	0xc3210000
 800257c:	cb840000 	.word	0xcb840000

08002580 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a6b      	ldr	r2, [pc, #428]	; (800273c <ADC_ConfigureBoostMode+0x1bc>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d004      	beq.n	800259c <ADC_ConfigureBoostMode+0x1c>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a6a      	ldr	r2, [pc, #424]	; (8002740 <ADC_ConfigureBoostMode+0x1c0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d109      	bne.n	80025b0 <ADC_ConfigureBoostMode+0x30>
 800259c:	4b69      	ldr	r3, [pc, #420]	; (8002744 <ADC_ConfigureBoostMode+0x1c4>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bf14      	ite	ne
 80025a8:	2301      	movne	r3, #1
 80025aa:	2300      	moveq	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	e008      	b.n	80025c2 <ADC_ConfigureBoostMode+0x42>
 80025b0:	4b65      	ldr	r3, [pc, #404]	; (8002748 <ADC_ConfigureBoostMode+0x1c8>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bf14      	ite	ne
 80025bc:	2301      	movne	r3, #1
 80025be:	2300      	moveq	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d01c      	beq.n	8002600 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80025c6:	f001 ffe3 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 80025ca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80025d4:	d010      	beq.n	80025f8 <ADC_ConfigureBoostMode+0x78>
 80025d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80025da:	d871      	bhi.n	80026c0 <ADC_ConfigureBoostMode+0x140>
 80025dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e0:	d002      	beq.n	80025e8 <ADC_ConfigureBoostMode+0x68>
 80025e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025e6:	d16b      	bne.n	80026c0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	0c1b      	lsrs	r3, r3, #16
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f4:	60fb      	str	r3, [r7, #12]
        break;
 80025f6:	e066      	b.n	80026c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	60fb      	str	r3, [r7, #12]
        break;
 80025fe:	e062      	b.n	80026c6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002600:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002604:	f002 ff1a 	bl	800543c <HAL_RCCEx_GetPeriphCLKFreq>
 8002608:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002612:	d051      	beq.n	80026b8 <ADC_ConfigureBoostMode+0x138>
 8002614:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002618:	d854      	bhi.n	80026c4 <ADC_ConfigureBoostMode+0x144>
 800261a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800261e:	d047      	beq.n	80026b0 <ADC_ConfigureBoostMode+0x130>
 8002620:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002624:	d84e      	bhi.n	80026c4 <ADC_ConfigureBoostMode+0x144>
 8002626:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800262a:	d03d      	beq.n	80026a8 <ADC_ConfigureBoostMode+0x128>
 800262c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002630:	d848      	bhi.n	80026c4 <ADC_ConfigureBoostMode+0x144>
 8002632:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002636:	d033      	beq.n	80026a0 <ADC_ConfigureBoostMode+0x120>
 8002638:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800263c:	d842      	bhi.n	80026c4 <ADC_ConfigureBoostMode+0x144>
 800263e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002642:	d029      	beq.n	8002698 <ADC_ConfigureBoostMode+0x118>
 8002644:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002648:	d83c      	bhi.n	80026c4 <ADC_ConfigureBoostMode+0x144>
 800264a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800264e:	d01a      	beq.n	8002686 <ADC_ConfigureBoostMode+0x106>
 8002650:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002654:	d836      	bhi.n	80026c4 <ADC_ConfigureBoostMode+0x144>
 8002656:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800265a:	d014      	beq.n	8002686 <ADC_ConfigureBoostMode+0x106>
 800265c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002660:	d830      	bhi.n	80026c4 <ADC_ConfigureBoostMode+0x144>
 8002662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002666:	d00e      	beq.n	8002686 <ADC_ConfigureBoostMode+0x106>
 8002668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800266c:	d82a      	bhi.n	80026c4 <ADC_ConfigureBoostMode+0x144>
 800266e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002672:	d008      	beq.n	8002686 <ADC_ConfigureBoostMode+0x106>
 8002674:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002678:	d824      	bhi.n	80026c4 <ADC_ConfigureBoostMode+0x144>
 800267a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800267e:	d002      	beq.n	8002686 <ADC_ConfigureBoostMode+0x106>
 8002680:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002684:	d11e      	bne.n	80026c4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	0c9b      	lsrs	r3, r3, #18
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	60fb      	str	r3, [r7, #12]
        break;
 8002696:	e016      	b.n	80026c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	60fb      	str	r3, [r7, #12]
        break;
 800269e:	e012      	b.n	80026c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	60fb      	str	r3, [r7, #12]
        break;
 80026a6:	e00e      	b.n	80026c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	099b      	lsrs	r3, r3, #6
 80026ac:	60fb      	str	r3, [r7, #12]
        break;
 80026ae:	e00a      	b.n	80026c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	09db      	lsrs	r3, r3, #7
 80026b4:	60fb      	str	r3, [r7, #12]
        break;
 80026b6:	e006      	b.n	80026c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	60fb      	str	r3, [r7, #12]
        break;
 80026be:	e002      	b.n	80026c6 <ADC_ConfigureBoostMode+0x146>
        break;
 80026c0:	bf00      	nop
 80026c2:	e000      	b.n	80026c6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80026c4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	085b      	lsrs	r3, r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4a1f      	ldr	r2, [pc, #124]	; (800274c <ADC_ConfigureBoostMode+0x1cc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d808      	bhi.n	80026e6 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026e2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80026e4:	e025      	b.n	8002732 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4a19      	ldr	r2, [pc, #100]	; (8002750 <ADC_ConfigureBoostMode+0x1d0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d80a      	bhi.n	8002704 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002700:	609a      	str	r2, [r3, #8]
}
 8002702:	e016      	b.n	8002732 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4a13      	ldr	r2, [pc, #76]	; (8002754 <ADC_ConfigureBoostMode+0x1d4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d80a      	bhi.n	8002722 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800271e:	609a      	str	r2, [r3, #8]
}
 8002720:	e007      	b.n	8002732 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002730:	609a      	str	r2, [r3, #8]
}
 8002732:	bf00      	nop
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40022000 	.word	0x40022000
 8002740:	40022100 	.word	0x40022100
 8002744:	40022300 	.word	0x40022300
 8002748:	58026300 	.word	0x58026300
 800274c:	005f5e10 	.word	0x005f5e10
 8002750:	00bebc20 	.word	0x00bebc20
 8002754:	017d7840 	.word	0x017d7840

08002758 <LL_ADC_IsEnabled>:
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <LL_ADC_IsEnabled+0x18>
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <LL_ADC_IsEnabled+0x1a>
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <LL_ADC_REG_IsConversionOngoing>:
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b04      	cmp	r3, #4
 8002790:	d101      	bne.n	8002796 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b0a3      	sub	sp, #140	; 0x8c
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80027be:	2302      	movs	r3, #2
 80027c0:	e0c1      	b.n	8002946 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a5e      	ldr	r2, [pc, #376]	; (8002950 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d102      	bne.n	80027e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80027dc:	4b5d      	ldr	r3, [pc, #372]	; (8002954 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	e001      	b.n	80027e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10b      	bne.n	8002804 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f0:	f043 0220 	orr.w	r2, r3, #32
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0a0      	b.n	8002946 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff ffb9 	bl	800277e <LL_ADC_REG_IsConversionOngoing>
 800280c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ffb2 	bl	800277e <LL_ADC_REG_IsConversionOngoing>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	f040 8081 	bne.w	8002924 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002822:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002826:	2b00      	cmp	r3, #0
 8002828:	d17c      	bne.n	8002924 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a48      	ldr	r2, [pc, #288]	; (8002950 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d004      	beq.n	800283e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a46      	ldr	r2, [pc, #280]	; (8002954 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d101      	bne.n	8002842 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800283e:	4b46      	ldr	r3, [pc, #280]	; (8002958 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002840:	e000      	b.n	8002844 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8002842:	4b46      	ldr	r3, [pc, #280]	; (800295c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002844:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d039      	beq.n	80028c2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800284e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	431a      	orrs	r2, r3
 800285c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800285e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a3a      	ldr	r2, [pc, #232]	; (8002950 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d004      	beq.n	8002874 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a39      	ldr	r2, [pc, #228]	; (8002954 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d10e      	bne.n	8002892 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8002874:	4836      	ldr	r0, [pc, #216]	; (8002950 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002876:	f7ff ff6f 	bl	8002758 <LL_ADC_IsEnabled>
 800287a:	4604      	mov	r4, r0
 800287c:	4835      	ldr	r0, [pc, #212]	; (8002954 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800287e:	f7ff ff6b 	bl	8002758 <LL_ADC_IsEnabled>
 8002882:	4603      	mov	r3, r0
 8002884:	4323      	orrs	r3, r4
 8002886:	2b00      	cmp	r3, #0
 8002888:	bf0c      	ite	eq
 800288a:	2301      	moveq	r3, #1
 800288c:	2300      	movne	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	e008      	b.n	80028a4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002892:	4833      	ldr	r0, [pc, #204]	; (8002960 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8002894:	f7ff ff60 	bl	8002758 <LL_ADC_IsEnabled>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	bf0c      	ite	eq
 800289e:	2301      	moveq	r3, #1
 80028a0:	2300      	movne	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d047      	beq.n	8002938 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80028a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	6811      	ldr	r1, [r2, #0]
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	6892      	ldr	r2, [r2, #8]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	431a      	orrs	r2, r3
 80028bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028be:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028c0:	e03a      	b.n	8002938 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80028c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028cc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a1f      	ldr	r2, [pc, #124]	; (8002950 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d004      	beq.n	80028e2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10e      	bne.n	8002900 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80028e2:	481b      	ldr	r0, [pc, #108]	; (8002950 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80028e4:	f7ff ff38 	bl	8002758 <LL_ADC_IsEnabled>
 80028e8:	4604      	mov	r4, r0
 80028ea:	481a      	ldr	r0, [pc, #104]	; (8002954 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80028ec:	f7ff ff34 	bl	8002758 <LL_ADC_IsEnabled>
 80028f0:	4603      	mov	r3, r0
 80028f2:	4323      	orrs	r3, r4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	e008      	b.n	8002912 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8002900:	4817      	ldr	r0, [pc, #92]	; (8002960 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8002902:	f7ff ff29 	bl	8002758 <LL_ADC_IsEnabled>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf0c      	ite	eq
 800290c:	2301      	moveq	r3, #1
 800290e:	2300      	movne	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d010      	beq.n	8002938 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002916:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800291c:	4013      	ands	r3, r2
 800291e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002920:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002922:	e009      	b.n	8002938 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002928:	f043 0220 	orr.w	r2, r3, #32
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002936:	e000      	b.n	800293a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002938:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002942:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8002946:	4618      	mov	r0, r3
 8002948:	378c      	adds	r7, #140	; 0x8c
 800294a:	46bd      	mov	sp, r7
 800294c:	bd90      	pop	{r4, r7, pc}
 800294e:	bf00      	nop
 8002950:	40022000 	.word	0x40022000
 8002954:	40022100 	.word	0x40022100
 8002958:	40022300 	.word	0x40022300
 800295c:	58026300 	.word	0x58026300
 8002960:	58026000 	.word	0x58026000
 8002964:	fffff0e0 	.word	0xfffff0e0

08002968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <__NVIC_SetPriorityGrouping+0x40>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002984:	4013      	ands	r3, r2
 8002986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <__NVIC_SetPriorityGrouping+0x44>)
 8002992:	4313      	orrs	r3, r2
 8002994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002996:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <__NVIC_SetPriorityGrouping+0x40>)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	60d3      	str	r3, [r2, #12]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000ed00 	.word	0xe000ed00
 80029ac:	05fa0000 	.word	0x05fa0000

080029b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b4:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <__NVIC_GetPriorityGrouping+0x18>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	f003 0307 	and.w	r3, r3, #7
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	db0a      	blt.n	80029f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	490c      	ldr	r1, [pc, #48]	; (8002a18 <__NVIC_SetPriority+0x4c>)
 80029e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	440b      	add	r3, r1
 80029f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f4:	e00a      	b.n	8002a0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4908      	ldr	r1, [pc, #32]	; (8002a1c <__NVIC_SetPriority+0x50>)
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	3b04      	subs	r3, #4
 8002a04:	0112      	lsls	r2, r2, #4
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	440b      	add	r3, r1
 8002a0a:	761a      	strb	r2, [r3, #24]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000e100 	.word	0xe000e100
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	; 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f1c3 0307 	rsb	r3, r3, #7
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	bf28      	it	cs
 8002a3e:	2304      	movcs	r3, #4
 8002a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3304      	adds	r3, #4
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d902      	bls.n	8002a50 <NVIC_EncodePriority+0x30>
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3b03      	subs	r3, #3
 8002a4e:	e000      	b.n	8002a52 <NVIC_EncodePriority+0x32>
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	401a      	ands	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a68:	f04f 31ff 	mov.w	r1, #4294967295
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	43d9      	mvns	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	4313      	orrs	r3, r2
         );
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3724      	adds	r7, #36	; 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a98:	d301      	bcc.n	8002a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e00f      	b.n	8002abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <SysTick_Config+0x40>)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aa6:	210f      	movs	r1, #15
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aac:	f7ff ff8e 	bl	80029cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <SysTick_Config+0x40>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ab6:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <SysTick_Config+0x40>)
 8002ab8:	2207      	movs	r2, #7
 8002aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	e000e010 	.word	0xe000e010

08002acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff ff47 	bl	8002968 <__NVIC_SetPriorityGrouping>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b086      	sub	sp, #24
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	4603      	mov	r3, r0
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002af0:	f7ff ff5e 	bl	80029b0 <__NVIC_GetPriorityGrouping>
 8002af4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	6978      	ldr	r0, [r7, #20]
 8002afc:	f7ff ff90 	bl	8002a20 <NVIC_EncodePriority>
 8002b00:	4602      	mov	r2, r0
 8002b02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b06:	4611      	mov	r1, r2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff5f 	bl	80029cc <__NVIC_SetPriority>
}
 8002b0e:	bf00      	nop
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff ffb2 	bl	8002a88 <SysTick_Config>
 8002b24:	4603      	mov	r3, r0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e0cf      	b.n	8002ce2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d106      	bne.n	8002b5a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2223      	movs	r2, #35	; 0x23
 8002b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7fe f8cf 	bl	8000cf8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5a:	4b64      	ldr	r3, [pc, #400]	; (8002cec <HAL_ETH_Init+0x1bc>)
 8002b5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b60:	4a62      	ldr	r2, [pc, #392]	; (8002cec <HAL_ETH_Init+0x1bc>)
 8002b62:	f043 0302 	orr.w	r3, r3, #2
 8002b66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b6a:	4b60      	ldr	r3, [pc, #384]	; (8002cec <HAL_ETH_Init+0x1bc>)
 8002b6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	7a1b      	ldrb	r3, [r3, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d103      	bne.n	8002b88 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002b80:	2000      	movs	r0, #0
 8002b82:	f7fe fb6f 	bl	8001264 <HAL_SYSCFG_ETHInterfaceSelect>
 8002b86:	e003      	b.n	8002b90 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002b88:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002b8c:	f7fe fb6a 	bl	8001264 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002b90:	4b57      	ldr	r3, [pc, #348]	; (8002cf0 <HAL_ETH_Init+0x1c0>)
 8002b92:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002baa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bac:	f7fe fb2a 	bl	8001204 <HAL_GetTick>
 8002bb0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002bb2:	e011      	b.n	8002bd8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002bb4:	f7fe fb26 	bl	8001204 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bc2:	d909      	bls.n	8002bd8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	22e0      	movs	r2, #224	; 0xe0
 8002bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e084      	b.n	8002ce2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1e4      	bne.n	8002bb4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f886 	bl	8002cfc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002bf0:	f001 fcce 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4a3f      	ldr	r2, [pc, #252]	; (8002cf4 <HAL_ETH_Init+0x1c4>)
 8002bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfc:	0c9a      	lsrs	r2, r3, #18
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3a01      	subs	r2, #1
 8002c04:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fa71 	bl	80030f0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c16:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002c1a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c2a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d009      	beq.n	8002c4e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	22e0      	movs	r2, #224	; 0xe0
 8002c46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e049      	b.n	8002ce2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c56:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002c5a:	4b27      	ldr	r3, [pc, #156]	; (8002cf8 <HAL_ETH_Init+0x1c8>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6952      	ldr	r2, [r2, #20]
 8002c62:	0051      	lsls	r1, r2, #1
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c6e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fad9 	bl	800322a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 fb1f 	bl	80032bc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	3305      	adds	r3, #5
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	021a      	lsls	r2, r3, #8
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	4619      	mov	r1, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	3303      	adds	r3, #3
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	061a      	lsls	r2, r3, #24
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	3302      	adds	r3, #2
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	041b      	lsls	r3, r3, #16
 8002cb0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002cbc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002cca:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002ccc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2210      	movs	r2, #16
 8002cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	58024400 	.word	0x58024400
 8002cf0:	58000400 	.word	0x58000400
 8002cf4:	431bde83 	.word	0x431bde83
 8002cf8:	ffff8001 	.word	0xffff8001

08002cfc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d16:	f001 fc3b 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 8002d1a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4a1e      	ldr	r2, [pc, #120]	; (8002d98 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d908      	bls.n	8002d36 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4a1d      	ldr	r2, [pc, #116]	; (8002d9c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d804      	bhi.n	8002d36 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	e027      	b.n	8002d86 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4a18      	ldr	r2, [pc, #96]	; (8002d9c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d908      	bls.n	8002d50 <HAL_ETH_SetMDIOClockRange+0x54>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4a17      	ldr	r2, [pc, #92]	; (8002da0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d204      	bcs.n	8002d50 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	e01a      	b.n	8002d86 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4a13      	ldr	r2, [pc, #76]	; (8002da0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d303      	bcc.n	8002d60 <HAL_ETH_SetMDIOClockRange+0x64>
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4a12      	ldr	r2, [pc, #72]	; (8002da4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d911      	bls.n	8002d84 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4a10      	ldr	r2, [pc, #64]	; (8002da4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d908      	bls.n	8002d7a <HAL_ETH_SetMDIOClockRange+0x7e>
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4a0f      	ldr	r2, [pc, #60]	; (8002da8 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d804      	bhi.n	8002d7a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	e005      	b.n	8002d86 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	e000      	b.n	8002d86 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002d84:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002d90:	bf00      	nop
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	01312cff 	.word	0x01312cff
 8002d9c:	02160ebf 	.word	0x02160ebf
 8002da0:	03938700 	.word	0x03938700
 8002da4:	05f5e0ff 	.word	0x05f5e0ff
 8002da8:	08f0d17f 	.word	0x08f0d17f

08002dac <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002dbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	791b      	ldrb	r3, [r3, #4]
 8002dc4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002dc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	7b1b      	ldrb	r3, [r3, #12]
 8002dcc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002dce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	7b5b      	ldrb	r3, [r3, #13]
 8002dd4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002dd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	7b9b      	ldrb	r3, [r3, #14]
 8002ddc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002dde:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	7bdb      	ldrb	r3, [r3, #15]
 8002de4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002de6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	7c12      	ldrb	r2, [r2, #16]
 8002dec:	2a00      	cmp	r2, #0
 8002dee:	d102      	bne.n	8002df6 <ETH_SetMACConfig+0x4a>
 8002df0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002df4:	e000      	b.n	8002df8 <ETH_SetMACConfig+0x4c>
 8002df6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002df8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	7c52      	ldrb	r2, [r2, #17]
 8002dfe:	2a00      	cmp	r2, #0
 8002e00:	d102      	bne.n	8002e08 <ETH_SetMACConfig+0x5c>
 8002e02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e06:	e000      	b.n	8002e0a <ETH_SetMACConfig+0x5e>
 8002e08:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002e0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	7c9b      	ldrb	r3, [r3, #18]
 8002e10:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002e12:	431a      	orrs	r2, r3
               macconf->Speed |
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002e18:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002e1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	7f1b      	ldrb	r3, [r3, #28]
 8002e24:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002e26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	7f5b      	ldrb	r3, [r3, #29]
 8002e2c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002e2e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	7f92      	ldrb	r2, [r2, #30]
 8002e34:	2a00      	cmp	r2, #0
 8002e36:	d102      	bne.n	8002e3e <ETH_SetMACConfig+0x92>
 8002e38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e3c:	e000      	b.n	8002e40 <ETH_SetMACConfig+0x94>
 8002e3e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002e40:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	7fdb      	ldrb	r3, [r3, #31]
 8002e46:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002e48:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002e50:	2a00      	cmp	r2, #0
 8002e52:	d102      	bne.n	8002e5a <ETH_SetMACConfig+0xae>
 8002e54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e58:	e000      	b.n	8002e5c <ETH_SetMACConfig+0xb0>
 8002e5a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002e5c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002e62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e6a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002e6c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4b56      	ldr	r3, [pc, #344]	; (8002fd8 <ETH_SetMACConfig+0x22c>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	68f9      	ldr	r1, [r7, #12]
 8002e86:	430b      	orrs	r3, r1
 8002e88:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e96:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002e98:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ea0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002ea2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002eaa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002eac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002eb4:	2a00      	cmp	r2, #0
 8002eb6:	d102      	bne.n	8002ebe <ETH_SetMACConfig+0x112>
 8002eb8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ebc:	e000      	b.n	8002ec0 <ETH_SetMACConfig+0x114>
 8002ebe:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002ec0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	4b42      	ldr	r3, [pc, #264]	; (8002fdc <ETH_SetMACConfig+0x230>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	68f9      	ldr	r1, [r7, #12]
 8002eda:	430b      	orrs	r3, r1
 8002edc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ee4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	4b3a      	ldr	r3, [pc, #232]	; (8002fe0 <ETH_SetMACConfig+0x234>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	68f9      	ldr	r1, [r7, #12]
 8002efe:	430b      	orrs	r3, r1
 8002f00:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f08:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002f0e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002f16:	2a00      	cmp	r2, #0
 8002f18:	d101      	bne.n	8002f1e <ETH_SetMACConfig+0x172>
 8002f1a:	2280      	movs	r2, #128	; 0x80
 8002f1c:	e000      	b.n	8002f20 <ETH_SetMACConfig+0x174>
 8002f1e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002f20:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f26:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f32:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002f36:	4013      	ands	r3, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	68f9      	ldr	r1, [r7, #12]
 8002f3e:	430b      	orrs	r3, r1
 8002f40:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002f48:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002f50:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5e:	f023 0103 	bic.w	r1, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002f76:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002f92:	2a00      	cmp	r2, #0
 8002f94:	d101      	bne.n	8002f9a <ETH_SetMACConfig+0x1ee>
 8002f96:	2240      	movs	r2, #64	; 0x40
 8002f98:	e000      	b.n	8002f9c <ETH_SetMACConfig+0x1f0>
 8002f9a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002f9c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002fa4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002fa6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002fae:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002fbc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	00048083 	.word	0x00048083
 8002fdc:	c0f88000 	.word	0xc0f88000
 8002fe0:	fffffef0 	.word	0xfffffef0

08002fe4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4b38      	ldr	r3, [pc, #224]	; (80030dc <ETH_SetDMAConfig+0xf8>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	6811      	ldr	r1, [r2, #0]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	430b      	orrs	r3, r1
 8003006:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800300a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	791b      	ldrb	r3, [r3, #4]
 8003010:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003016:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	7b1b      	ldrb	r3, [r3, #12]
 800301c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800301e:	4313      	orrs	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	4b2c      	ldr	r3, [pc, #176]	; (80030e0 <ETH_SetDMAConfig+0xfc>)
 800302e:	4013      	ands	r3, r2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	68f9      	ldr	r1, [r7, #12]
 8003036:	430b      	orrs	r3, r1
 8003038:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800303c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	7b5b      	ldrb	r3, [r3, #13]
 8003042:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003048:	4313      	orrs	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003054:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003058:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <ETH_SetDMAConfig+0x100>)
 800305a:	4013      	ands	r3, r2
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	68f9      	ldr	r1, [r7, #12]
 8003062:	430b      	orrs	r3, r1
 8003064:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003068:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	7d1b      	ldrb	r3, [r3, #20]
 8003074:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003076:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	7f5b      	ldrb	r3, [r3, #29]
 800307c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800308a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800308e:	4b16      	ldr	r3, [pc, #88]	; (80030e8 <ETH_SetDMAConfig+0x104>)
 8003090:	4013      	ands	r3, r2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	68f9      	ldr	r1, [r7, #12]
 8003098:	430b      	orrs	r3, r1
 800309a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800309e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	7f1b      	ldrb	r3, [r3, #28]
 80030a6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030b8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <ETH_SetDMAConfig+0x108>)
 80030be:	4013      	ands	r3, r2
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	68f9      	ldr	r1, [r7, #12]
 80030c6:	430b      	orrs	r3, r1
 80030c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030cc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	ffff87fd 	.word	0xffff87fd
 80030e0:	ffff2ffe 	.word	0xffff2ffe
 80030e4:	fffec000 	.word	0xfffec000
 80030e8:	ffc0efef 	.word	0xffc0efef
 80030ec:	7fc0ffff 	.word	0x7fc0ffff

080030f0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b0a4      	sub	sp, #144	; 0x90
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80030fe:	2300      	movs	r3, #0
 8003100:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003102:	2300      	movs	r3, #0
 8003104:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003108:	2300      	movs	r3, #0
 800310a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800310e:	2301      	movs	r3, #1
 8003110:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003114:	2301      	movs	r3, #1
 8003116:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800311a:	2301      	movs	r3, #1
 800311c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003120:	2300      	movs	r3, #0
 8003122:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003126:	2301      	movs	r3, #1
 8003128:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800312c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003130:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003132:	2300      	movs	r3, #0
 8003134:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003138:	2300      	movs	r3, #0
 800313a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800313c:	2300      	movs	r3, #0
 800313e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003142:	2300      	movs	r3, #0
 8003144:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003148:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800314c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800314e:	2300      	movs	r3, #0
 8003150:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003154:	2300      	movs	r3, #0
 8003156:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003158:	2301      	movs	r3, #1
 800315a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800315e:	2300      	movs	r3, #0
 8003160:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003164:	2300      	movs	r3, #0
 8003166:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800316a:	2300      	movs	r3, #0
 800316c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800316e:	2300      	movs	r3, #0
 8003170:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003172:	2300      	movs	r3, #0
 8003174:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003176:	2300      	movs	r3, #0
 8003178:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800317c:	2300      	movs	r3, #0
 800317e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003182:	2301      	movs	r3, #1
 8003184:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003188:	2320      	movs	r3, #32
 800318a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800318e:	2301      	movs	r3, #1
 8003190:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003194:	2300      	movs	r3, #0
 8003196:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800319a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80031a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031a4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80031ac:	2302      	movs	r3, #2
 80031ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80031b8:	2300      	movs	r3, #0
 80031ba:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80031be:	2300      	movs	r3, #0
 80031c0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80031c4:	2301      	movs	r3, #1
 80031c6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80031ca:	2300      	movs	r3, #0
 80031cc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80031d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031d8:	4619      	mov	r1, r3
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff fde6 	bl	8002dac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80031e0:	2301      	movs	r3, #1
 80031e2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80031e4:	2301      	movs	r3, #1
 80031e6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80031ec:	2300      	movs	r3, #0
 80031ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80031f2:	2300      	movs	r3, #0
 80031f4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80031f6:	2300      	movs	r3, #0
 80031f8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80031fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031fe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003200:	2300      	movs	r3, #0
 8003202:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003204:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003208:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800320a:	2300      	movs	r3, #0
 800320c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003210:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003214:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003216:	f107 0308 	add.w	r3, r7, #8
 800321a:	4619      	mov	r1, r3
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff fee1 	bl	8002fe4 <ETH_SetDMAConfig>
}
 8003222:	bf00      	nop
 8003224:	3790      	adds	r7, #144	; 0x90
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800322a:	b480      	push	{r7}
 800322c:	b085      	sub	sp, #20
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	e01d      	b.n	8003274 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68d9      	ldr	r1, [r3, #12]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4613      	mov	r3, r2
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4413      	add	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	440b      	add	r3, r1
 8003248:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2200      	movs	r2, #0
 8003254:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2200      	movs	r2, #0
 800325a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2200      	movs	r2, #0
 8003260:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	3206      	adds	r2, #6
 800326a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3301      	adds	r3, #1
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b03      	cmp	r3, #3
 8003278:	d9de      	bls.n	8003238 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003288:	461a      	mov	r2, r3
 800328a:	2303      	movs	r3, #3
 800328c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800329c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80032b0:	bf00      	nop
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	e023      	b.n	8003312 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6919      	ldr	r1, [r3, #16]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4613      	mov	r3, r2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	4413      	add	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	440b      	add	r3, r1
 80032da:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2200      	movs	r2, #0
 80032e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2200      	movs	r2, #0
 80032ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2200      	movs	r2, #0
 80032f2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2200      	movs	r2, #0
 80032f8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2200      	movs	r2, #0
 80032fe:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	3212      	adds	r2, #18
 8003308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	3301      	adds	r3, #1
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d9d8      	bls.n	80032ca <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800333e:	461a      	mov	r2, r3
 8003340:	2303      	movs	r3, #3
 8003342:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003352:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003366:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800336a:	bf00      	nop
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
	...

08003378 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	; 0x24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003386:	4b86      	ldr	r3, [pc, #536]	; (80035a0 <HAL_GPIO_Init+0x228>)
 8003388:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800338a:	e18c      	b.n	80036a6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	2101      	movs	r1, #1
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	fa01 f303 	lsl.w	r3, r1, r3
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 817e 	beq.w	80036a0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d005      	beq.n	80033bc <HAL_GPIO_Init+0x44>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d130      	bne.n	800341e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	2203      	movs	r2, #3
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033f2:	2201      	movs	r2, #1
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	091b      	lsrs	r3, r3, #4
 8003408:	f003 0201 	and.w	r2, r3, #1
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4313      	orrs	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	2b03      	cmp	r3, #3
 8003428:	d017      	beq.n	800345a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	2203      	movs	r2, #3
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43db      	mvns	r3, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4013      	ands	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d123      	bne.n	80034ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	08da      	lsrs	r2, r3, #3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3208      	adds	r2, #8
 800346e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	220f      	movs	r2, #15
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4013      	ands	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	08da      	lsrs	r2, r3, #3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3208      	adds	r2, #8
 80034a8:	69b9      	ldr	r1, [r7, #24]
 80034aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	2203      	movs	r2, #3
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4013      	ands	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 0203 	and.w	r2, r3, #3
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 80d8 	beq.w	80036a0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f0:	4b2c      	ldr	r3, [pc, #176]	; (80035a4 <HAL_GPIO_Init+0x22c>)
 80034f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034f6:	4a2b      	ldr	r2, [pc, #172]	; (80035a4 <HAL_GPIO_Init+0x22c>)
 80034f8:	f043 0302 	orr.w	r3, r3, #2
 80034fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003500:	4b28      	ldr	r3, [pc, #160]	; (80035a4 <HAL_GPIO_Init+0x22c>)
 8003502:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800350e:	4a26      	ldr	r2, [pc, #152]	; (80035a8 <HAL_GPIO_Init+0x230>)
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	089b      	lsrs	r3, r3, #2
 8003514:	3302      	adds	r3, #2
 8003516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	220f      	movs	r2, #15
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a1d      	ldr	r2, [pc, #116]	; (80035ac <HAL_GPIO_Init+0x234>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d04a      	beq.n	80035d0 <HAL_GPIO_Init+0x258>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a1c      	ldr	r2, [pc, #112]	; (80035b0 <HAL_GPIO_Init+0x238>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d02b      	beq.n	800359a <HAL_GPIO_Init+0x222>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a1b      	ldr	r2, [pc, #108]	; (80035b4 <HAL_GPIO_Init+0x23c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d025      	beq.n	8003596 <HAL_GPIO_Init+0x21e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a1a      	ldr	r2, [pc, #104]	; (80035b8 <HAL_GPIO_Init+0x240>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d01f      	beq.n	8003592 <HAL_GPIO_Init+0x21a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a19      	ldr	r2, [pc, #100]	; (80035bc <HAL_GPIO_Init+0x244>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d019      	beq.n	800358e <HAL_GPIO_Init+0x216>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a18      	ldr	r2, [pc, #96]	; (80035c0 <HAL_GPIO_Init+0x248>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d013      	beq.n	800358a <HAL_GPIO_Init+0x212>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a17      	ldr	r2, [pc, #92]	; (80035c4 <HAL_GPIO_Init+0x24c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00d      	beq.n	8003586 <HAL_GPIO_Init+0x20e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a16      	ldr	r2, [pc, #88]	; (80035c8 <HAL_GPIO_Init+0x250>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d007      	beq.n	8003582 <HAL_GPIO_Init+0x20a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a15      	ldr	r2, [pc, #84]	; (80035cc <HAL_GPIO_Init+0x254>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d101      	bne.n	800357e <HAL_GPIO_Init+0x206>
 800357a:	2309      	movs	r3, #9
 800357c:	e029      	b.n	80035d2 <HAL_GPIO_Init+0x25a>
 800357e:	230a      	movs	r3, #10
 8003580:	e027      	b.n	80035d2 <HAL_GPIO_Init+0x25a>
 8003582:	2307      	movs	r3, #7
 8003584:	e025      	b.n	80035d2 <HAL_GPIO_Init+0x25a>
 8003586:	2306      	movs	r3, #6
 8003588:	e023      	b.n	80035d2 <HAL_GPIO_Init+0x25a>
 800358a:	2305      	movs	r3, #5
 800358c:	e021      	b.n	80035d2 <HAL_GPIO_Init+0x25a>
 800358e:	2304      	movs	r3, #4
 8003590:	e01f      	b.n	80035d2 <HAL_GPIO_Init+0x25a>
 8003592:	2303      	movs	r3, #3
 8003594:	e01d      	b.n	80035d2 <HAL_GPIO_Init+0x25a>
 8003596:	2302      	movs	r3, #2
 8003598:	e01b      	b.n	80035d2 <HAL_GPIO_Init+0x25a>
 800359a:	2301      	movs	r3, #1
 800359c:	e019      	b.n	80035d2 <HAL_GPIO_Init+0x25a>
 800359e:	bf00      	nop
 80035a0:	58000080 	.word	0x58000080
 80035a4:	58024400 	.word	0x58024400
 80035a8:	58000400 	.word	0x58000400
 80035ac:	58020000 	.word	0x58020000
 80035b0:	58020400 	.word	0x58020400
 80035b4:	58020800 	.word	0x58020800
 80035b8:	58020c00 	.word	0x58020c00
 80035bc:	58021000 	.word	0x58021000
 80035c0:	58021400 	.word	0x58021400
 80035c4:	58021800 	.word	0x58021800
 80035c8:	58021c00 	.word	0x58021c00
 80035cc:	58022400 	.word	0x58022400
 80035d0:	2300      	movs	r3, #0
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	f002 0203 	and.w	r2, r2, #3
 80035d8:	0092      	lsls	r2, r2, #2
 80035da:	4093      	lsls	r3, r2
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035e2:	4938      	ldr	r1, [pc, #224]	; (80036c4 <HAL_GPIO_Init+0x34c>)
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	089b      	lsrs	r3, r3, #2
 80035e8:	3302      	adds	r3, #2
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003616:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800361e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003644:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	43db      	mvns	r3, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4013      	ands	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	43db      	mvns	r3, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4013      	ands	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	3301      	adds	r3, #1
 80036a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f47f ae6b 	bne.w	800338c <HAL_GPIO_Init+0x14>
  }
}
 80036b6:	bf00      	nop
 80036b8:	bf00      	nop
 80036ba:	3724      	adds	r7, #36	; 0x24
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	58000400 	.word	0x58000400

080036c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	887b      	ldrh	r3, [r7, #2]
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036e0:	2301      	movs	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
 80036e4:	e001      	b.n	80036ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036e6:	2300      	movs	r3, #0
 80036e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
 8003704:	4613      	mov	r3, r2
 8003706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003708:	787b      	ldrb	r3, [r7, #1]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003714:	e003      	b.n	800371e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003716:	887b      	ldrh	r3, [r7, #2]
 8003718:	041a      	lsls	r2, r3, #16
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	619a      	str	r2, [r3, #24]
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800372a:	b480      	push	{r7}
 800372c:	b085      	sub	sp, #20
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	460b      	mov	r3, r1
 8003734:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800373c:	887a      	ldrh	r2, [r7, #2]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4013      	ands	r3, r2
 8003742:	041a      	lsls	r2, r3, #16
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	43d9      	mvns	r1, r3
 8003748:	887b      	ldrh	r3, [r7, #2]
 800374a:	400b      	ands	r3, r1
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	619a      	str	r2, [r3, #24]
}
 8003752:	bf00      	nop
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
	...

08003760 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003768:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <HAL_PWREx_ConfigSupply+0x70>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b04      	cmp	r3, #4
 8003772:	d00a      	beq.n	800378a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003774:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <HAL_PWREx_ConfigSupply+0x70>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	429a      	cmp	r2, r3
 8003780:	d001      	beq.n	8003786 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e01f      	b.n	80037c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	e01d      	b.n	80037c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800378a:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <HAL_PWREx_ConfigSupply+0x70>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f023 0207 	bic.w	r2, r3, #7
 8003792:	490f      	ldr	r1, [pc, #60]	; (80037d0 <HAL_PWREx_ConfigSupply+0x70>)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4313      	orrs	r3, r2
 8003798:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800379a:	f7fd fd33 	bl	8001204 <HAL_GetTick>
 800379e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037a0:	e009      	b.n	80037b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80037a2:	f7fd fd2f 	bl	8001204 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037b0:	d901      	bls.n	80037b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e007      	b.n	80037c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037b6:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <HAL_PWREx_ConfigSupply+0x70>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c2:	d1ee      	bne.n	80037a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	58024800 	.word	0x58024800

080037d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08c      	sub	sp, #48	; 0x30
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e39d      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 8087 	beq.w	8003902 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037f4:	4b88      	ldr	r3, [pc, #544]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037fe:	4b86      	ldr	r3, [pc, #536]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003802:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003806:	2b10      	cmp	r3, #16
 8003808:	d007      	beq.n	800381a <HAL_RCC_OscConfig+0x46>
 800380a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380c:	2b18      	cmp	r3, #24
 800380e:	d110      	bne.n	8003832 <HAL_RCC_OscConfig+0x5e>
 8003810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d10b      	bne.n	8003832 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381a:	4b7f      	ldr	r3, [pc, #508]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d06c      	beq.n	8003900 <HAL_RCC_OscConfig+0x12c>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d168      	bne.n	8003900 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e377      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383a:	d106      	bne.n	800384a <HAL_RCC_OscConfig+0x76>
 800383c:	4b76      	ldr	r3, [pc, #472]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a75      	ldr	r2, [pc, #468]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003846:	6013      	str	r3, [r2, #0]
 8003848:	e02e      	b.n	80038a8 <HAL_RCC_OscConfig+0xd4>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10c      	bne.n	800386c <HAL_RCC_OscConfig+0x98>
 8003852:	4b71      	ldr	r3, [pc, #452]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a70      	ldr	r2, [pc, #448]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	4b6e      	ldr	r3, [pc, #440]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a6d      	ldr	r2, [pc, #436]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	e01d      	b.n	80038a8 <HAL_RCC_OscConfig+0xd4>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003874:	d10c      	bne.n	8003890 <HAL_RCC_OscConfig+0xbc>
 8003876:	4b68      	ldr	r3, [pc, #416]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a67      	ldr	r2, [pc, #412]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 800387c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	4b65      	ldr	r3, [pc, #404]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a64      	ldr	r2, [pc, #400]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	e00b      	b.n	80038a8 <HAL_RCC_OscConfig+0xd4>
 8003890:	4b61      	ldr	r3, [pc, #388]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a60      	ldr	r2, [pc, #384]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	4b5e      	ldr	r3, [pc, #376]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a5d      	ldr	r2, [pc, #372]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 80038a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d013      	beq.n	80038d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fd fca8 	bl	8001204 <HAL_GetTick>
 80038b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b8:	f7fd fca4 	bl	8001204 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b64      	cmp	r3, #100	; 0x64
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e32b      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038ca:	4b53      	ldr	r3, [pc, #332]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0xe4>
 80038d6:	e014      	b.n	8003902 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fd fc94 	bl	8001204 <HAL_GetTick>
 80038dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038e0:	f7fd fc90 	bl	8001204 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	; 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e317      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038f2:	4b49      	ldr	r3, [pc, #292]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0x10c>
 80038fe:	e000      	b.n	8003902 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 808c 	beq.w	8003a28 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003910:	4b41      	ldr	r3, [pc, #260]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003918:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800391a:	4b3f      	ldr	r3, [pc, #252]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <HAL_RCC_OscConfig+0x162>
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	2b18      	cmp	r3, #24
 800392a:	d137      	bne.n	800399c <HAL_RCC_OscConfig+0x1c8>
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d132      	bne.n	800399c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003936:	4b38      	ldr	r3, [pc, #224]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_RCC_OscConfig+0x17a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e2e9      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800394e:	4b32      	ldr	r3, [pc, #200]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 0219 	bic.w	r2, r3, #25
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	492f      	ldr	r1, [pc, #188]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 800395c:	4313      	orrs	r3, r2
 800395e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003960:	f7fd fc50 	bl	8001204 <HAL_GetTick>
 8003964:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003968:	f7fd fc4c 	bl	8001204 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e2d3      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800397a:	4b27      	ldr	r3, [pc, #156]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003986:	4b24      	ldr	r3, [pc, #144]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	061b      	lsls	r3, r3, #24
 8003994:	4920      	ldr	r1, [pc, #128]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003996:	4313      	orrs	r3, r2
 8003998:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800399a:	e045      	b.n	8003a28 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d026      	beq.n	80039f2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039a4:	4b1c      	ldr	r3, [pc, #112]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f023 0219 	bic.w	r2, r3, #25
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4919      	ldr	r1, [pc, #100]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b6:	f7fd fc25 	bl	8001204 <HAL_GetTick>
 80039ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039be:	f7fd fc21 	bl	8001204 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e2a8      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039d0:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039dc:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	061b      	lsls	r3, r3, #24
 80039ea:	490b      	ldr	r1, [pc, #44]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	604b      	str	r3, [r1, #4]
 80039f0:	e01a      	b.n	8003a28 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f2:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a08      	ldr	r2, [pc, #32]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fe:	f7fd fc01 	bl	8001204 <HAL_GetTick>
 8003a02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a04:	e00a      	b.n	8003a1c <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a06:	f7fd fbfd 	bl	8001204 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d903      	bls.n	8003a1c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e284      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
 8003a18:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a1c:	4b96      	ldr	r3, [pc, #600]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1ee      	bne.n	8003a06 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d06a      	beq.n	8003b0a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a34:	4b90      	ldr	r3, [pc, #576]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a3c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a3e:	4b8e      	ldr	r3, [pc, #568]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d007      	beq.n	8003a5a <HAL_RCC_OscConfig+0x286>
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b18      	cmp	r3, #24
 8003a4e:	d11b      	bne.n	8003a88 <HAL_RCC_OscConfig+0x2b4>
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d116      	bne.n	8003a88 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a5a:	4b87      	ldr	r3, [pc, #540]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <HAL_RCC_OscConfig+0x29e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	2b80      	cmp	r3, #128	; 0x80
 8003a6c:	d001      	beq.n	8003a72 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e257      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a72:	4b81      	ldr	r3, [pc, #516]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	061b      	lsls	r3, r3, #24
 8003a80:	497d      	ldr	r1, [pc, #500]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a86:	e040      	b.n	8003b0a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d023      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a90:	4b79      	ldr	r3, [pc, #484]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a78      	ldr	r2, [pc, #480]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7fd fbb2 	bl	8001204 <HAL_GetTick>
 8003aa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003aa4:	f7fd fbae 	bl	8001204 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e235      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ab6:	4b70      	ldr	r3, [pc, #448]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ac2:	4b6d      	ldr	r3, [pc, #436]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	061b      	lsls	r3, r3, #24
 8003ad0:	4969      	ldr	r1, [pc, #420]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60cb      	str	r3, [r1, #12]
 8003ad6:	e018      	b.n	8003b0a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ad8:	4b67      	ldr	r3, [pc, #412]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a66      	ldr	r2, [pc, #408]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7fd fb8e 	bl	8001204 <HAL_GetTick>
 8003ae8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003aec:	f7fd fb8a 	bl	8001204 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e211      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003afe:	4b5e      	ldr	r3, [pc, #376]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d036      	beq.n	8003b84 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d019      	beq.n	8003b52 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b1e:	4b56      	ldr	r3, [pc, #344]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b22:	4a55      	ldr	r2, [pc, #340]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2a:	f7fd fb6b 	bl	8001204 <HAL_GetTick>
 8003b2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b32:	f7fd fb67 	bl	8001204 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e1ee      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b44:	4b4c      	ldr	r3, [pc, #304]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x35e>
 8003b50:	e018      	b.n	8003b84 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b52:	4b49      	ldr	r3, [pc, #292]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b56:	4a48      	ldr	r2, [pc, #288]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5e:	f7fd fb51 	bl	8001204 <HAL_GetTick>
 8003b62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b66:	f7fd fb4d 	bl	8001204 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e1d4      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b78:	4b3f      	ldr	r3, [pc, #252]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1f0      	bne.n	8003b66 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d036      	beq.n	8003bfe <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d019      	beq.n	8003bcc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b98:	4b37      	ldr	r3, [pc, #220]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a36      	ldr	r2, [pc, #216]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003b9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ba2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ba4:	f7fd fb2e 	bl	8001204 <HAL_GetTick>
 8003ba8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003bac:	f7fd fb2a 	bl	8001204 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e1b1      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003bbe:	4b2e      	ldr	r3, [pc, #184]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f0      	beq.n	8003bac <HAL_RCC_OscConfig+0x3d8>
 8003bca:	e018      	b.n	8003bfe <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bcc:	4b2a      	ldr	r3, [pc, #168]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a29      	ldr	r2, [pc, #164]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003bd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bd6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003bd8:	f7fd fb14 	bl	8001204 <HAL_GetTick>
 8003bdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003be0:	f7fd fb10 	bl	8001204 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e197      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bf2:	4b21      	ldr	r3, [pc, #132]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 8086 	beq.w	8003d18 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c0c:	4b1b      	ldr	r3, [pc, #108]	; (8003c7c <HAL_RCC_OscConfig+0x4a8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a1a      	ldr	r2, [pc, #104]	; (8003c7c <HAL_RCC_OscConfig+0x4a8>)
 8003c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c18:	f7fd faf4 	bl	8001204 <HAL_GetTick>
 8003c1c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c20:	f7fd faf0 	bl	8001204 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b64      	cmp	r3, #100	; 0x64
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e177      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <HAL_RCC_OscConfig+0x4a8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d106      	bne.n	8003c54 <HAL_RCC_OscConfig+0x480>
 8003c46:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4a:	4a0b      	ldr	r2, [pc, #44]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	6713      	str	r3, [r2, #112]	; 0x70
 8003c52:	e032      	b.n	8003cba <HAL_RCC_OscConfig+0x4e6>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d111      	bne.n	8003c80 <HAL_RCC_OscConfig+0x4ac>
 8003c5c:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c60:	4a05      	ldr	r2, [pc, #20]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003c62:	f023 0301 	bic.w	r3, r3, #1
 8003c66:	6713      	str	r3, [r2, #112]	; 0x70
 8003c68:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	4a02      	ldr	r2, [pc, #8]	; (8003c78 <HAL_RCC_OscConfig+0x4a4>)
 8003c6e:	f023 0304 	bic.w	r3, r3, #4
 8003c72:	6713      	str	r3, [r2, #112]	; 0x70
 8003c74:	e021      	b.n	8003cba <HAL_RCC_OscConfig+0x4e6>
 8003c76:	bf00      	nop
 8003c78:	58024400 	.word	0x58024400
 8003c7c:	58024800 	.word	0x58024800
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b05      	cmp	r3, #5
 8003c86:	d10c      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x4ce>
 8003c88:	4b83      	ldr	r3, [pc, #524]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8c:	4a82      	ldr	r2, [pc, #520]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003c8e:	f043 0304 	orr.w	r3, r3, #4
 8003c92:	6713      	str	r3, [r2, #112]	; 0x70
 8003c94:	4b80      	ldr	r3, [pc, #512]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	4a7f      	ldr	r2, [pc, #508]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca0:	e00b      	b.n	8003cba <HAL_RCC_OscConfig+0x4e6>
 8003ca2:	4b7d      	ldr	r3, [pc, #500]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca6:	4a7c      	ldr	r2, [pc, #496]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003ca8:	f023 0301 	bic.w	r3, r3, #1
 8003cac:	6713      	str	r3, [r2, #112]	; 0x70
 8003cae:	4b7a      	ldr	r3, [pc, #488]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb2:	4a79      	ldr	r2, [pc, #484]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003cb4:	f023 0304 	bic.w	r3, r3, #4
 8003cb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d015      	beq.n	8003cee <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc2:	f7fd fa9f 	bl	8001204 <HAL_GetTick>
 8003cc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cc8:	e00a      	b.n	8003ce0 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cca:	f7fd fa9b 	bl	8001204 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e120      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ce0:	4b6d      	ldr	r3, [pc, #436]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0ee      	beq.n	8003cca <HAL_RCC_OscConfig+0x4f6>
 8003cec:	e014      	b.n	8003d18 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cee:	f7fd fa89 	bl	8001204 <HAL_GetTick>
 8003cf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cf4:	e00a      	b.n	8003d0c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cf6:	f7fd fa85 	bl	8001204 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e10a      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d0c:	4b62      	ldr	r3, [pc, #392]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1ee      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 80ff 	beq.w	8003f20 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d22:	4b5d      	ldr	r3, [pc, #372]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d2a:	2b18      	cmp	r3, #24
 8003d2c:	f000 80ba 	beq.w	8003ea4 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	f040 8095 	bne.w	8003e64 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3a:	4b57      	ldr	r3, [pc, #348]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a56      	ldr	r2, [pc, #344]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003d40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d46:	f7fd fa5d 	bl	8001204 <HAL_GetTick>
 8003d4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4e:	f7fd fa59 	bl	8001204 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e0e0      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d60:	4b4d      	ldr	r3, [pc, #308]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f0      	bne.n	8003d4e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d6c:	4b4a      	ldr	r3, [pc, #296]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003d6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d70:	4b4a      	ldr	r3, [pc, #296]	; (8003e9c <HAL_RCC_OscConfig+0x6c8>)
 8003d72:	4013      	ands	r3, r2
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d7c:	0112      	lsls	r2, r2, #4
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	4945      	ldr	r1, [pc, #276]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	628b      	str	r3, [r1, #40]	; 0x28
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d94:	3b01      	subs	r3, #1
 8003d96:	025b      	lsls	r3, r3, #9
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da0:	3b01      	subs	r3, #1
 8003da2:	041b      	lsls	r3, r3, #16
 8003da4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dae:	3b01      	subs	r3, #1
 8003db0:	061b      	lsls	r3, r3, #24
 8003db2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003db6:	4938      	ldr	r1, [pc, #224]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003dbc:	4b36      	ldr	r3, [pc, #216]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	4a35      	ldr	r2, [pc, #212]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003dc2:	f023 0301 	bic.w	r3, r3, #1
 8003dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003dc8:	4b33      	ldr	r3, [pc, #204]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dcc:	4b34      	ldr	r3, [pc, #208]	; (8003ea0 <HAL_RCC_OscConfig+0x6cc>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003dd4:	00d2      	lsls	r2, r2, #3
 8003dd6:	4930      	ldr	r1, [pc, #192]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ddc:	4b2e      	ldr	r3, [pc, #184]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	f023 020c 	bic.w	r2, r3, #12
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	492b      	ldr	r1, [pc, #172]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003dee:	4b2a      	ldr	r3, [pc, #168]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	f023 0202 	bic.w	r2, r3, #2
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	4927      	ldr	r1, [pc, #156]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e00:	4b25      	ldr	r3, [pc, #148]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	4a24      	ldr	r2, [pc, #144]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e0c:	4b22      	ldr	r3, [pc, #136]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	4a21      	ldr	r2, [pc, #132]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003e18:	4b1f      	ldr	r3, [pc, #124]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	4a1e      	ldr	r2, [pc, #120]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003e24:	4b1c      	ldr	r3, [pc, #112]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	4a1b      	ldr	r2, [pc, #108]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e30:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a18      	ldr	r2, [pc, #96]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fd f9e2 	bl	8001204 <HAL_GetTick>
 8003e40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e44:	f7fd f9de 	bl	8001204 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e065      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e56:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x670>
 8003e62:	e05d      	b.n	8003f20 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e64:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a0b      	ldr	r2, [pc, #44]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e70:	f7fd f9c8 	bl	8001204 <HAL_GetTick>
 8003e74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e78:	f7fd f9c4 	bl	8001204 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e04b      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e8a:	4b03      	ldr	r3, [pc, #12]	; (8003e98 <HAL_RCC_OscConfig+0x6c4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x6a4>
 8003e96:	e043      	b.n	8003f20 <HAL_RCC_OscConfig+0x74c>
 8003e98:	58024400 	.word	0x58024400
 8003e9c:	fffffc0c 	.word	0xfffffc0c
 8003ea0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ea4:	4b21      	ldr	r3, [pc, #132]	; (8003f2c <HAL_RCC_OscConfig+0x758>)
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003eaa:	4b20      	ldr	r3, [pc, #128]	; (8003f2c <HAL_RCC_OscConfig+0x758>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d031      	beq.n	8003f1c <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f003 0203 	and.w	r2, r3, #3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d12a      	bne.n	8003f1c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d122      	bne.n	8003f1c <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d11a      	bne.n	8003f1c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	0a5b      	lsrs	r3, r3, #9
 8003eea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d111      	bne.n	8003f1c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	0c1b      	lsrs	r3, r3, #16
 8003efc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d108      	bne.n	8003f1c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	0e1b      	lsrs	r3, r3, #24
 8003f0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f16:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3730      	adds	r7, #48	; 0x30
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	58024400 	.word	0x58024400

08003f30 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e19c      	b.n	800427e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f44:	4b8a      	ldr	r3, [pc, #552]	; (8004170 <HAL_RCC_ClockConfig+0x240>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d910      	bls.n	8003f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f52:	4b87      	ldr	r3, [pc, #540]	; (8004170 <HAL_RCC_ClockConfig+0x240>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 020f 	bic.w	r2, r3, #15
 8003f5a:	4985      	ldr	r1, [pc, #532]	; (8004170 <HAL_RCC_ClockConfig+0x240>)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f62:	4b83      	ldr	r3, [pc, #524]	; (8004170 <HAL_RCC_ClockConfig+0x240>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e184      	b.n	800427e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d010      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	4b7b      	ldr	r3, [pc, #492]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d908      	bls.n	8003fa2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f90:	4b78      	ldr	r3, [pc, #480]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	4975      	ldr	r1, [pc, #468]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d010      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	4b70      	ldr	r3, [pc, #448]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d908      	bls.n	8003fd0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003fbe:	4b6d      	ldr	r3, [pc, #436]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	496a      	ldr	r1, [pc, #424]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699a      	ldr	r2, [r3, #24]
 8003fe0:	4b64      	ldr	r3, [pc, #400]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d908      	bls.n	8003ffe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003fec:	4b61      	ldr	r3, [pc, #388]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	495e      	ldr	r1, [pc, #376]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b00      	cmp	r3, #0
 8004008:	d010      	beq.n	800402c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69da      	ldr	r2, [r3, #28]
 800400e:	4b59      	ldr	r3, [pc, #356]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004016:	429a      	cmp	r2, r3
 8004018:	d908      	bls.n	800402c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800401a:	4b56      	ldr	r3, [pc, #344]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	4953      	ldr	r1, [pc, #332]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 8004028:	4313      	orrs	r3, r2
 800402a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d010      	beq.n	800405a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	4b4d      	ldr	r3, [pc, #308]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	429a      	cmp	r2, r3
 8004046:	d908      	bls.n	800405a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004048:	4b4a      	ldr	r3, [pc, #296]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	f023 020f 	bic.w	r2, r3, #15
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4947      	ldr	r1, [pc, #284]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 8004056:	4313      	orrs	r3, r2
 8004058:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d055      	beq.n	8004112 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004066:	4b43      	ldr	r3, [pc, #268]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	4940      	ldr	r1, [pc, #256]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 8004074:	4313      	orrs	r3, r2
 8004076:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b02      	cmp	r3, #2
 800407e:	d107      	bne.n	8004090 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004080:	4b3c      	ldr	r3, [pc, #240]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d121      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e0f6      	b.n	800427e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b03      	cmp	r3, #3
 8004096:	d107      	bne.n	80040a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004098:	4b36      	ldr	r3, [pc, #216]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d115      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0ea      	b.n	800427e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d107      	bne.n	80040c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040b0:	4b30      	ldr	r3, [pc, #192]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d109      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0de      	b.n	800427e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040c0:	4b2c      	ldr	r3, [pc, #176]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e0d6      	b.n	800427e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040d0:	4b28      	ldr	r3, [pc, #160]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f023 0207 	bic.w	r2, r3, #7
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	4925      	ldr	r1, [pc, #148]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e2:	f7fd f88f 	bl	8001204 <HAL_GetTick>
 80040e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e8:	e00a      	b.n	8004100 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ea:	f7fd f88b 	bl	8001204 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e0be      	b.n	800427e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004100:	4b1c      	ldr	r3, [pc, #112]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	429a      	cmp	r2, r3
 8004110:	d1eb      	bne.n	80040ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d010      	beq.n	8004140 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	4b14      	ldr	r3, [pc, #80]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	429a      	cmp	r2, r3
 800412c:	d208      	bcs.n	8004140 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800412e:	4b11      	ldr	r3, [pc, #68]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	f023 020f 	bic.w	r2, r3, #15
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	490e      	ldr	r1, [pc, #56]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 800413c:	4313      	orrs	r3, r2
 800413e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_RCC_ClockConfig+0x240>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d214      	bcs.n	8004178 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414e:	4b08      	ldr	r3, [pc, #32]	; (8004170 <HAL_RCC_ClockConfig+0x240>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 020f 	bic.w	r2, r3, #15
 8004156:	4906      	ldr	r1, [pc, #24]	; (8004170 <HAL_RCC_ClockConfig+0x240>)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	4b04      	ldr	r3, [pc, #16]	; (8004170 <HAL_RCC_ClockConfig+0x240>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d005      	beq.n	8004178 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e086      	b.n	800427e <HAL_RCC_ClockConfig+0x34e>
 8004170:	52002000 	.word	0x52002000
 8004174:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d010      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691a      	ldr	r2, [r3, #16]
 8004188:	4b3f      	ldr	r3, [pc, #252]	; (8004288 <HAL_RCC_ClockConfig+0x358>)
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004190:	429a      	cmp	r2, r3
 8004192:	d208      	bcs.n	80041a6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004194:	4b3c      	ldr	r3, [pc, #240]	; (8004288 <HAL_RCC_ClockConfig+0x358>)
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	4939      	ldr	r1, [pc, #228]	; (8004288 <HAL_RCC_ClockConfig+0x358>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d010      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695a      	ldr	r2, [r3, #20]
 80041b6:	4b34      	ldr	r3, [pc, #208]	; (8004288 <HAL_RCC_ClockConfig+0x358>)
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041be:	429a      	cmp	r2, r3
 80041c0:	d208      	bcs.n	80041d4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041c2:	4b31      	ldr	r3, [pc, #196]	; (8004288 <HAL_RCC_ClockConfig+0x358>)
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	492e      	ldr	r1, [pc, #184]	; (8004288 <HAL_RCC_ClockConfig+0x358>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d010      	beq.n	8004202 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699a      	ldr	r2, [r3, #24]
 80041e4:	4b28      	ldr	r3, [pc, #160]	; (8004288 <HAL_RCC_ClockConfig+0x358>)
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d208      	bcs.n	8004202 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041f0:	4b25      	ldr	r3, [pc, #148]	; (8004288 <HAL_RCC_ClockConfig+0x358>)
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	4922      	ldr	r1, [pc, #136]	; (8004288 <HAL_RCC_ClockConfig+0x358>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b00      	cmp	r3, #0
 800420c:	d010      	beq.n	8004230 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69da      	ldr	r2, [r3, #28]
 8004212:	4b1d      	ldr	r3, [pc, #116]	; (8004288 <HAL_RCC_ClockConfig+0x358>)
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800421a:	429a      	cmp	r2, r3
 800421c:	d208      	bcs.n	8004230 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800421e:	4b1a      	ldr	r3, [pc, #104]	; (8004288 <HAL_RCC_ClockConfig+0x358>)
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	4917      	ldr	r1, [pc, #92]	; (8004288 <HAL_RCC_ClockConfig+0x358>)
 800422c:	4313      	orrs	r3, r2
 800422e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004230:	f000 f834 	bl	800429c <HAL_RCC_GetSysClockFreq>
 8004234:	4602      	mov	r2, r0
 8004236:	4b14      	ldr	r3, [pc, #80]	; (8004288 <HAL_RCC_ClockConfig+0x358>)
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	0a1b      	lsrs	r3, r3, #8
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	4912      	ldr	r1, [pc, #72]	; (800428c <HAL_RCC_ClockConfig+0x35c>)
 8004242:	5ccb      	ldrb	r3, [r1, r3]
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	fa22 f303 	lsr.w	r3, r2, r3
 800424c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800424e:	4b0e      	ldr	r3, [pc, #56]	; (8004288 <HAL_RCC_ClockConfig+0x358>)
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	4a0d      	ldr	r2, [pc, #52]	; (800428c <HAL_RCC_ClockConfig+0x35c>)
 8004258:	5cd3      	ldrb	r3, [r2, r3]
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	fa22 f303 	lsr.w	r3, r2, r3
 8004264:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <HAL_RCC_ClockConfig+0x360>)
 8004266:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004268:	4a0a      	ldr	r2, [pc, #40]	; (8004294 <HAL_RCC_ClockConfig+0x364>)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800426e:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <HAL_RCC_ClockConfig+0x368>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f7fc ff7c 	bl	8001170 <HAL_InitTick>
 8004278:	4603      	mov	r3, r0
 800427a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800427c:	7bfb      	ldrb	r3, [r7, #15]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	58024400 	.word	0x58024400
 800428c:	08007ac8 	.word	0x08007ac8
 8004290:	24000004 	.word	0x24000004
 8004294:	24000000 	.word	0x24000000
 8004298:	24000008 	.word	0x24000008

0800429c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800429c:	b480      	push	{r7}
 800429e:	b089      	sub	sp, #36	; 0x24
 80042a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042a2:	4bb3      	ldr	r3, [pc, #716]	; (8004570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042aa:	2b18      	cmp	r3, #24
 80042ac:	f200 8155 	bhi.w	800455a <HAL_RCC_GetSysClockFreq+0x2be>
 80042b0:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80042b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b6:	bf00      	nop
 80042b8:	0800431d 	.word	0x0800431d
 80042bc:	0800455b 	.word	0x0800455b
 80042c0:	0800455b 	.word	0x0800455b
 80042c4:	0800455b 	.word	0x0800455b
 80042c8:	0800455b 	.word	0x0800455b
 80042cc:	0800455b 	.word	0x0800455b
 80042d0:	0800455b 	.word	0x0800455b
 80042d4:	0800455b 	.word	0x0800455b
 80042d8:	08004343 	.word	0x08004343
 80042dc:	0800455b 	.word	0x0800455b
 80042e0:	0800455b 	.word	0x0800455b
 80042e4:	0800455b 	.word	0x0800455b
 80042e8:	0800455b 	.word	0x0800455b
 80042ec:	0800455b 	.word	0x0800455b
 80042f0:	0800455b 	.word	0x0800455b
 80042f4:	0800455b 	.word	0x0800455b
 80042f8:	08004349 	.word	0x08004349
 80042fc:	0800455b 	.word	0x0800455b
 8004300:	0800455b 	.word	0x0800455b
 8004304:	0800455b 	.word	0x0800455b
 8004308:	0800455b 	.word	0x0800455b
 800430c:	0800455b 	.word	0x0800455b
 8004310:	0800455b 	.word	0x0800455b
 8004314:	0800455b 	.word	0x0800455b
 8004318:	0800434f 	.word	0x0800434f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800431c:	4b94      	ldr	r3, [pc, #592]	; (8004570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d009      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004328:	4b91      	ldr	r3, [pc, #580]	; (8004570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	08db      	lsrs	r3, r3, #3
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	4a90      	ldr	r2, [pc, #576]	; (8004574 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
 8004338:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800433a:	e111      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800433c:	4b8d      	ldr	r3, [pc, #564]	; (8004574 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800433e:	61bb      	str	r3, [r7, #24]
    break;
 8004340:	e10e      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004342:	4b8d      	ldr	r3, [pc, #564]	; (8004578 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004344:	61bb      	str	r3, [r7, #24]
    break;
 8004346:	e10b      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004348:	4b8c      	ldr	r3, [pc, #560]	; (800457c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800434a:	61bb      	str	r3, [r7, #24]
    break;
 800434c:	e108      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800434e:	4b88      	ldr	r3, [pc, #544]	; (8004570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004358:	4b85      	ldr	r3, [pc, #532]	; (8004570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004362:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004364:	4b82      	ldr	r3, [pc, #520]	; (8004570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800436e:	4b80      	ldr	r3, [pc, #512]	; (8004570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004372:	08db      	lsrs	r3, r3, #3
 8004374:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	fb02 f303 	mul.w	r3, r2, r3
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004386:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80e1 	beq.w	8004554 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b02      	cmp	r3, #2
 8004396:	f000 8083 	beq.w	80044a0 <HAL_RCC_GetSysClockFreq+0x204>
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2b02      	cmp	r3, #2
 800439e:	f200 80a1 	bhi.w	80044e4 <HAL_RCC_GetSysClockFreq+0x248>
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <HAL_RCC_GetSysClockFreq+0x114>
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d056      	beq.n	800445c <HAL_RCC_GetSysClockFreq+0x1c0>
 80043ae:	e099      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043b0:	4b6f      	ldr	r3, [pc, #444]	; (8004570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d02d      	beq.n	8004418 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043bc:	4b6c      	ldr	r3, [pc, #432]	; (8004570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	08db      	lsrs	r3, r3, #3
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	4a6b      	ldr	r2, [pc, #428]	; (8004574 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043c8:	fa22 f303 	lsr.w	r3, r2, r3
 80043cc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	ee07 3a90 	vmov	s15, r3
 80043d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e6:	4b62      	ldr	r3, [pc, #392]	; (8004570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004580 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800440a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004412:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004416:	e087      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004422:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004584 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800442a:	4b51      	ldr	r3, [pc, #324]	; (8004570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443a:	ed97 6a02 	vldr	s12, [r7, #8]
 800443e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004580 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800444a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800444e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800445a:	e065      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	ee07 3a90 	vmov	s15, r3
 8004462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004466:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004588 <HAL_RCC_GetSysClockFreq+0x2ec>
 800446a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800446e:	4b40      	ldr	r3, [pc, #256]	; (8004570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004476:	ee07 3a90 	vmov	s15, r3
 800447a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800447e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004482:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004580 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800448a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800448e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800449e:	e043      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	ee07 3a90 	vmov	s15, r3
 80044a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800458c <HAL_RCC_GetSysClockFreq+0x2f0>
 80044ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044b2:	4b2f      	ldr	r3, [pc, #188]	; (8004570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ba:	ee07 3a90 	vmov	s15, r3
 80044be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80044c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004580 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044e2:	e021      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	ee07 3a90 	vmov	s15, r3
 80044ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004588 <HAL_RCC_GetSysClockFreq+0x2ec>
 80044f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044f6:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044fe:	ee07 3a90 	vmov	s15, r3
 8004502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004506:	ed97 6a02 	vldr	s12, [r7, #8]
 800450a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004580 <HAL_RCC_GetSysClockFreq+0x2e4>
 800450e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800451a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800451e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004526:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004528:	4b11      	ldr	r3, [pc, #68]	; (8004570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800452a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452c:	0a5b      	lsrs	r3, r3, #9
 800452e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004532:	3301      	adds	r3, #1
 8004534:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	ee07 3a90 	vmov	s15, r3
 800453c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004540:	edd7 6a07 	vldr	s13, [r7, #28]
 8004544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800454c:	ee17 3a90 	vmov	r3, s15
 8004550:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004552:	e005      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	61bb      	str	r3, [r7, #24]
    break;
 8004558:	e002      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800455a:	4b07      	ldr	r3, [pc, #28]	; (8004578 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800455c:	61bb      	str	r3, [r7, #24]
    break;
 800455e:	bf00      	nop
  }

  return sysclockfreq;
 8004560:	69bb      	ldr	r3, [r7, #24]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3724      	adds	r7, #36	; 0x24
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	58024400 	.word	0x58024400
 8004574:	03d09000 	.word	0x03d09000
 8004578:	003d0900 	.word	0x003d0900
 800457c:	007a1200 	.word	0x007a1200
 8004580:	46000000 	.word	0x46000000
 8004584:	4c742400 	.word	0x4c742400
 8004588:	4a742400 	.word	0x4a742400
 800458c:	4af42400 	.word	0x4af42400

08004590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004596:	f7ff fe81 	bl	800429c <HAL_RCC_GetSysClockFreq>
 800459a:	4602      	mov	r2, r0
 800459c:	4b10      	ldr	r3, [pc, #64]	; (80045e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	0a1b      	lsrs	r3, r3, #8
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	490f      	ldr	r1, [pc, #60]	; (80045e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80045a8:	5ccb      	ldrb	r3, [r1, r3]
 80045aa:	f003 031f 	and.w	r3, r3, #31
 80045ae:	fa22 f303 	lsr.w	r3, r2, r3
 80045b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045b4:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	4a09      	ldr	r2, [pc, #36]	; (80045e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80045be:	5cd3      	ldrb	r3, [r2, r3]
 80045c0:	f003 031f 	and.w	r3, r3, #31
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ca:	4a07      	ldr	r2, [pc, #28]	; (80045e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80045cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045ce:	4a07      	ldr	r2, [pc, #28]	; (80045ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80045d4:	4b04      	ldr	r3, [pc, #16]	; (80045e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80045d6:	681b      	ldr	r3, [r3, #0]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	58024400 	.word	0x58024400
 80045e4:	08007ac8 	.word	0x08007ac8
 80045e8:	24000004 	.word	0x24000004
 80045ec:	24000000 	.word	0x24000000

080045f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80045f4:	f7ff ffcc 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 80045f8:	4602      	mov	r2, r0
 80045fa:	4b06      	ldr	r3, [pc, #24]	; (8004614 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	091b      	lsrs	r3, r3, #4
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	4904      	ldr	r1, [pc, #16]	; (8004618 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004606:	5ccb      	ldrb	r3, [r1, r3]
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004610:	4618      	mov	r0, r3
 8004612:	bd80      	pop	{r7, pc}
 8004614:	58024400 	.word	0x58024400
 8004618:	08007ac8 	.word	0x08007ac8

0800461c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004620:	f7ff ffb6 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 8004624:	4602      	mov	r2, r0
 8004626:	4b06      	ldr	r3, [pc, #24]	; (8004640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	0a1b      	lsrs	r3, r3, #8
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	4904      	ldr	r1, [pc, #16]	; (8004644 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004632:	5ccb      	ldrb	r3, [r1, r3]
 8004634:	f003 031f 	and.w	r3, r3, #31
 8004638:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800463c:	4618      	mov	r0, r3
 800463e:	bd80      	pop	{r7, pc}
 8004640:	58024400 	.word	0x58024400
 8004644:	08007ac8 	.word	0x08007ac8

08004648 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004650:	2300      	movs	r3, #0
 8004652:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004654:	2300      	movs	r3, #0
 8004656:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d03f      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004668:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800466c:	d02a      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800466e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004672:	d824      	bhi.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004674:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004678:	d018      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800467a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800467e:	d81e      	bhi.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004684:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004688:	d007      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800468a:	e018      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800468c:	4ba4      	ldr	r3, [pc, #656]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	4aa3      	ldr	r2, [pc, #652]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004696:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004698:	e015      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3304      	adds	r3, #4
 800469e:	2102      	movs	r1, #2
 80046a0:	4618      	mov	r0, r3
 80046a2:	f001 ff01 	bl	80064a8 <RCCEx_PLL2_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80046aa:	e00c      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3324      	adds	r3, #36	; 0x24
 80046b0:	2102      	movs	r1, #2
 80046b2:	4618      	mov	r0, r3
 80046b4:	f001 ffaa 	bl	800660c <RCCEx_PLL3_Config>
 80046b8:	4603      	mov	r3, r0
 80046ba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80046bc:	e003      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	75fb      	strb	r3, [r7, #23]
      break;
 80046c2:	e000      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80046c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d109      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80046cc:	4b94      	ldr	r3, [pc, #592]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80046ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d8:	4991      	ldr	r1, [pc, #580]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	650b      	str	r3, [r1, #80]	; 0x50
 80046de:	e001      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
 80046e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d03d      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d826      	bhi.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80046f8:	a201      	add	r2, pc, #4	; (adr r2, 8004700 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80046fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fe:	bf00      	nop
 8004700:	08004715 	.word	0x08004715
 8004704:	08004723 	.word	0x08004723
 8004708:	08004735 	.word	0x08004735
 800470c:	0800474d 	.word	0x0800474d
 8004710:	0800474d 	.word	0x0800474d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004714:	4b82      	ldr	r3, [pc, #520]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	4a81      	ldr	r2, [pc, #516]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800471a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800471e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004720:	e015      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3304      	adds	r3, #4
 8004726:	2100      	movs	r1, #0
 8004728:	4618      	mov	r0, r3
 800472a:	f001 febd 	bl	80064a8 <RCCEx_PLL2_Config>
 800472e:	4603      	mov	r3, r0
 8004730:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004732:	e00c      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3324      	adds	r3, #36	; 0x24
 8004738:	2100      	movs	r1, #0
 800473a:	4618      	mov	r0, r3
 800473c:	f001 ff66 	bl	800660c <RCCEx_PLL3_Config>
 8004740:	4603      	mov	r3, r0
 8004742:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004744:	e003      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	75fb      	strb	r3, [r7, #23]
      break;
 800474a:	e000      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800474c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800474e:	7dfb      	ldrb	r3, [r7, #23]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d109      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004754:	4b72      	ldr	r3, [pc, #456]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004758:	f023 0207 	bic.w	r2, r3, #7
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004760:	496f      	ldr	r1, [pc, #444]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004762:	4313      	orrs	r3, r2
 8004764:	650b      	str	r3, [r1, #80]	; 0x50
 8004766:	e001      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004768:	7dfb      	ldrb	r3, [r7, #23]
 800476a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004774:	2b00      	cmp	r3, #0
 8004776:	d051      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800477e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004782:	d036      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004784:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004788:	d830      	bhi.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800478a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800478e:	d032      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004790:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004794:	d82a      	bhi.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004796:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800479a:	d02e      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800479c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80047a0:	d824      	bhi.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80047a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047a6:	d018      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x192>
 80047a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ac:	d81e      	bhi.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x172>
 80047b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047b6:	d007      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80047b8:	e018      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ba:	4b59      	ldr	r3, [pc, #356]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	4a58      	ldr	r2, [pc, #352]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80047c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047c6:	e019      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3304      	adds	r3, #4
 80047cc:	2100      	movs	r1, #0
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 fe6a 	bl	80064a8 <RCCEx_PLL2_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80047d8:	e010      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3324      	adds	r3, #36	; 0x24
 80047de:	2100      	movs	r1, #0
 80047e0:	4618      	mov	r0, r3
 80047e2:	f001 ff13 	bl	800660c <RCCEx_PLL3_Config>
 80047e6:	4603      	mov	r3, r0
 80047e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047ea:	e007      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	75fb      	strb	r3, [r7, #23]
      break;
 80047f0:	e004      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80047f2:	bf00      	nop
 80047f4:	e002      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80047f6:	bf00      	nop
 80047f8:	e000      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80047fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047fc:	7dfb      	ldrb	r3, [r7, #23]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10a      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004802:	4b47      	ldr	r3, [pc, #284]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004806:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004810:	4943      	ldr	r1, [pc, #268]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004812:	4313      	orrs	r3, r2
 8004814:	658b      	str	r3, [r1, #88]	; 0x58
 8004816:	e001      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004818:	7dfb      	ldrb	r3, [r7, #23]
 800481a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004824:	2b00      	cmp	r3, #0
 8004826:	d051      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800482e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004832:	d036      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004834:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004838:	d830      	bhi.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800483a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800483e:	d032      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004844:	d82a      	bhi.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004846:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800484a:	d02e      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x262>
 800484c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004850:	d824      	bhi.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004856:	d018      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004858:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800485c:	d81e      	bhi.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004862:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004866:	d007      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004868:	e018      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800486a:	4b2d      	ldr	r3, [pc, #180]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	4a2c      	ldr	r2, [pc, #176]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004874:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004876:	e019      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3304      	adds	r3, #4
 800487c:	2100      	movs	r1, #0
 800487e:	4618      	mov	r0, r3
 8004880:	f001 fe12 	bl	80064a8 <RCCEx_PLL2_Config>
 8004884:	4603      	mov	r3, r0
 8004886:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004888:	e010      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3324      	adds	r3, #36	; 0x24
 800488e:	2100      	movs	r1, #0
 8004890:	4618      	mov	r0, r3
 8004892:	f001 febb 	bl	800660c <RCCEx_PLL3_Config>
 8004896:	4603      	mov	r3, r0
 8004898:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800489a:	e007      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	75fb      	strb	r3, [r7, #23]
      break;
 80048a0:	e004      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80048a2:	bf00      	nop
 80048a4:	e002      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80048a6:	bf00      	nop
 80048a8:	e000      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80048aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10a      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80048b2:	4b1b      	ldr	r3, [pc, #108]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80048b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048c0:	4917      	ldr	r1, [pc, #92]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	658b      	str	r3, [r1, #88]	; 0x58
 80048c6:	e001      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c8:	7dfb      	ldrb	r3, [r7, #23]
 80048ca:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d035      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048dc:	2b30      	cmp	r3, #48	; 0x30
 80048de:	d01c      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80048e0:	2b30      	cmp	r3, #48	; 0x30
 80048e2:	d817      	bhi.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d00c      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d813      	bhi.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d019      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80048f0:	2b10      	cmp	r3, #16
 80048f2:	d10f      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f4:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	4a09      	ldr	r2, [pc, #36]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80048fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004900:	e011      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3304      	adds	r3, #4
 8004906:	2102      	movs	r1, #2
 8004908:	4618      	mov	r0, r3
 800490a:	f001 fdcd 	bl	80064a8 <RCCEx_PLL2_Config>
 800490e:	4603      	mov	r3, r0
 8004910:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004912:	e008      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	75fb      	strb	r3, [r7, #23]
      break;
 8004918:	e005      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800491a:	bf00      	nop
 800491c:	e003      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800491e:	bf00      	nop
 8004920:	58024400 	.word	0x58024400
      break;
 8004924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004926:	7dfb      	ldrb	r3, [r7, #23]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d109      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800492c:	4ba3      	ldr	r3, [pc, #652]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800492e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004930:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004938:	49a0      	ldr	r1, [pc, #640]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800493a:	4313      	orrs	r3, r2
 800493c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800493e:	e001      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004940:	7dfb      	ldrb	r3, [r7, #23]
 8004942:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d047      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004958:	d030      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x374>
 800495a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800495e:	d82a      	bhi.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004960:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004964:	d02c      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8004966:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800496a:	d824      	bhi.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800496c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004970:	d018      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004976:	d81e      	bhi.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800497c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004980:	d007      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004982:	e018      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004984:	4b8d      	ldr	r3, [pc, #564]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004988:	4a8c      	ldr	r2, [pc, #560]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800498a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800498e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004990:	e017      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3304      	adds	r3, #4
 8004996:	2100      	movs	r1, #0
 8004998:	4618      	mov	r0, r3
 800499a:	f001 fd85 	bl	80064a8 <RCCEx_PLL2_Config>
 800499e:	4603      	mov	r3, r0
 80049a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049a2:	e00e      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3324      	adds	r3, #36	; 0x24
 80049a8:	2100      	movs	r1, #0
 80049aa:	4618      	mov	r0, r3
 80049ac:	f001 fe2e 	bl	800660c <RCCEx_PLL3_Config>
 80049b0:	4603      	mov	r3, r0
 80049b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049b4:	e005      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	75fb      	strb	r3, [r7, #23]
      break;
 80049ba:	e002      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80049bc:	bf00      	nop
 80049be:	e000      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80049c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049c2:	7dfb      	ldrb	r3, [r7, #23]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d109      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80049c8:	4b7c      	ldr	r3, [pc, #496]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80049ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049cc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d4:	4979      	ldr	r1, [pc, #484]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	650b      	str	r3, [r1, #80]	; 0x50
 80049da:	e001      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049dc:	7dfb      	ldrb	r3, [r7, #23]
 80049de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d049      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049f4:	d02e      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80049f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049fa:	d828      	bhi.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80049fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a00:	d02a      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004a02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a06:	d822      	bhi.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004a08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a0c:	d026      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004a0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a12:	d81c      	bhi.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004a14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a18:	d010      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004a1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a1e:	d816      	bhi.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d01d      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a28:	d111      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	2101      	movs	r1, #1
 8004a30:	4618      	mov	r0, r3
 8004a32:	f001 fd39 	bl	80064a8 <RCCEx_PLL2_Config>
 8004a36:	4603      	mov	r3, r0
 8004a38:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a3a:	e012      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3324      	adds	r3, #36	; 0x24
 8004a40:	2101      	movs	r1, #1
 8004a42:	4618      	mov	r0, r3
 8004a44:	f001 fde2 	bl	800660c <RCCEx_PLL3_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a4c:	e009      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	75fb      	strb	r3, [r7, #23]
      break;
 8004a52:	e006      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004a54:	bf00      	nop
 8004a56:	e004      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004a58:	bf00      	nop
 8004a5a:	e002      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004a5c:	bf00      	nop
 8004a5e:	e000      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004a60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a62:	7dfb      	ldrb	r3, [r7, #23]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d109      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a68:	4b54      	ldr	r3, [pc, #336]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a74:	4951      	ldr	r1, [pc, #324]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	650b      	str	r3, [r1, #80]	; 0x50
 8004a7a:	e001      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7c:	7dfb      	ldrb	r3, [r7, #23]
 8004a7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d04b      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a96:	d02e      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a9c:	d828      	bhi.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa2:	d02a      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa8:	d822      	bhi.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004aaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004aae:	d026      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004ab0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ab4:	d81c      	bhi.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aba:	d010      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x496>
 8004abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ac0:	d816      	bhi.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d01d      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aca:	d111      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f001 fce8 	bl	80064a8 <RCCEx_PLL2_Config>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004adc:	e012      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3324      	adds	r3, #36	; 0x24
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f001 fd91 	bl	800660c <RCCEx_PLL3_Config>
 8004aea:	4603      	mov	r3, r0
 8004aec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004aee:	e009      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	75fb      	strb	r3, [r7, #23]
      break;
 8004af4:	e006      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004af6:	bf00      	nop
 8004af8:	e004      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004afa:	bf00      	nop
 8004afc:	e002      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004afe:	bf00      	nop
 8004b00:	e000      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b0a:	4b2c      	ldr	r3, [pc, #176]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b18:	4928      	ldr	r1, [pc, #160]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	658b      	str	r3, [r1, #88]	; 0x58
 8004b1e:	e001      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b20:	7dfb      	ldrb	r3, [r7, #23]
 8004b22:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d02f      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b38:	d00e      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8004b3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b3e:	d814      	bhi.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d015      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004b44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b48:	d10f      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b4a:	4b1c      	ldr	r3, [pc, #112]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	4a1b      	ldr	r2, [pc, #108]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b56:	e00c      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f001 fca2 	bl	80064a8 <RCCEx_PLL2_Config>
 8004b64:	4603      	mov	r3, r0
 8004b66:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b68:	e003      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b6e:	e000      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8004b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b72:	7dfb      	ldrb	r3, [r7, #23]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b78:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b7c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b84:	490d      	ldr	r1, [pc, #52]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	650b      	str	r3, [r1, #80]	; 0x50
 8004b8a:	e001      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8c:	7dfb      	ldrb	r3, [r7, #23]
 8004b8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d034      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d81d      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004ba4:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004be7 	.word	0x08004be7
 8004bb0:	08004bc1 	.word	0x08004bc1
 8004bb4:	08004bcf 	.word	0x08004bcf
 8004bb8:	08004be7 	.word	0x08004be7
 8004bbc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc0:	4bb1      	ldr	r3, [pc, #708]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	4ab0      	ldr	r2, [pc, #704]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004bcc:	e00c      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	2102      	movs	r1, #2
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f001 fc67 	bl	80064a8 <RCCEx_PLL2_Config>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004bde:	e003      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	75fb      	strb	r3, [r7, #23]
      break;
 8004be4:	e000      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8004be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004be8:	7dfb      	ldrb	r3, [r7, #23]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d109      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004bee:	4ba6      	ldr	r3, [pc, #664]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf2:	f023 0203 	bic.w	r2, r3, #3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfa:	49a3      	ldr	r1, [pc, #652]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c00:	e001      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 8086 	beq.w	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c14:	4b9d      	ldr	r3, [pc, #628]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a9c      	ldr	r2, [pc, #624]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c20:	f7fc faf0 	bl	8001204 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c26:	e009      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c28:	f7fc faec 	bl	8001204 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b64      	cmp	r3, #100	; 0x64
 8004c34:	d902      	bls.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	75fb      	strb	r3, [r7, #23]
        break;
 8004c3a:	e005      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c3c:	4b93      	ldr	r3, [pc, #588]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0ef      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d166      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004c4e:	4b8e      	ldr	r3, [pc, #568]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c58:	4053      	eors	r3, r2
 8004c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d013      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c62:	4b89      	ldr	r3, [pc, #548]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c6a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c6c:	4b86      	ldr	r3, [pc, #536]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c70:	4a85      	ldr	r2, [pc, #532]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c76:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c78:	4b83      	ldr	r3, [pc, #524]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7c:	4a82      	ldr	r2, [pc, #520]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c82:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004c84:	4a80      	ldr	r2, [pc, #512]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c94:	d115      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c96:	f7fc fab5 	bl	8001204 <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c9c:	e00b      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c9e:	f7fc fab1 	bl	8001204 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d902      	bls.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	75fb      	strb	r3, [r7, #23]
            break;
 8004cb4:	e005      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cb6:	4b74      	ldr	r3, [pc, #464]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0ed      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8004cc2:	7dfb      	ldrb	r3, [r7, #23]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d126      	bne.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cd6:	d10d      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8004cd8:	4b6b      	ldr	r3, [pc, #428]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ce6:	0919      	lsrs	r1, r3, #4
 8004ce8:	4b69      	ldr	r3, [pc, #420]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004cea:	400b      	ands	r3, r1
 8004cec:	4966      	ldr	r1, [pc, #408]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	610b      	str	r3, [r1, #16]
 8004cf2:	e005      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8004cf4:	4b64      	ldr	r3, [pc, #400]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	4a63      	ldr	r2, [pc, #396]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004cfa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004cfe:	6113      	str	r3, [r2, #16]
 8004d00:	4b61      	ldr	r3, [pc, #388]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d0e:	495e      	ldr	r1, [pc, #376]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	670b      	str	r3, [r1, #112]	; 0x70
 8004d14:	e004      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d16:	7dfb      	ldrb	r3, [r7, #23]
 8004d18:	75bb      	strb	r3, [r7, #22]
 8004d1a:	e001      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1c:	7dfb      	ldrb	r3, [r7, #23]
 8004d1e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d07e      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d30:	2b28      	cmp	r3, #40	; 0x28
 8004d32:	d867      	bhi.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8004d34:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8004d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3a:	bf00      	nop
 8004d3c:	08004e0b 	.word	0x08004e0b
 8004d40:	08004e05 	.word	0x08004e05
 8004d44:	08004e05 	.word	0x08004e05
 8004d48:	08004e05 	.word	0x08004e05
 8004d4c:	08004e05 	.word	0x08004e05
 8004d50:	08004e05 	.word	0x08004e05
 8004d54:	08004e05 	.word	0x08004e05
 8004d58:	08004e05 	.word	0x08004e05
 8004d5c:	08004de1 	.word	0x08004de1
 8004d60:	08004e05 	.word	0x08004e05
 8004d64:	08004e05 	.word	0x08004e05
 8004d68:	08004e05 	.word	0x08004e05
 8004d6c:	08004e05 	.word	0x08004e05
 8004d70:	08004e05 	.word	0x08004e05
 8004d74:	08004e05 	.word	0x08004e05
 8004d78:	08004e05 	.word	0x08004e05
 8004d7c:	08004df3 	.word	0x08004df3
 8004d80:	08004e05 	.word	0x08004e05
 8004d84:	08004e05 	.word	0x08004e05
 8004d88:	08004e05 	.word	0x08004e05
 8004d8c:	08004e05 	.word	0x08004e05
 8004d90:	08004e05 	.word	0x08004e05
 8004d94:	08004e05 	.word	0x08004e05
 8004d98:	08004e05 	.word	0x08004e05
 8004d9c:	08004e0b 	.word	0x08004e0b
 8004da0:	08004e05 	.word	0x08004e05
 8004da4:	08004e05 	.word	0x08004e05
 8004da8:	08004e05 	.word	0x08004e05
 8004dac:	08004e05 	.word	0x08004e05
 8004db0:	08004e05 	.word	0x08004e05
 8004db4:	08004e05 	.word	0x08004e05
 8004db8:	08004e05 	.word	0x08004e05
 8004dbc:	08004e0b 	.word	0x08004e0b
 8004dc0:	08004e05 	.word	0x08004e05
 8004dc4:	08004e05 	.word	0x08004e05
 8004dc8:	08004e05 	.word	0x08004e05
 8004dcc:	08004e05 	.word	0x08004e05
 8004dd0:	08004e05 	.word	0x08004e05
 8004dd4:	08004e05 	.word	0x08004e05
 8004dd8:	08004e05 	.word	0x08004e05
 8004ddc:	08004e0b 	.word	0x08004e0b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3304      	adds	r3, #4
 8004de4:	2101      	movs	r1, #1
 8004de6:	4618      	mov	r0, r3
 8004de8:	f001 fb5e 	bl	80064a8 <RCCEx_PLL2_Config>
 8004dec:	4603      	mov	r3, r0
 8004dee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004df0:	e00c      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3324      	adds	r3, #36	; 0x24
 8004df6:	2101      	movs	r1, #1
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f001 fc07 	bl	800660c <RCCEx_PLL3_Config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e02:	e003      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	75fb      	strb	r3, [r7, #23]
      break;
 8004e08:	e000      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8004e0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e0c:	7dfb      	ldrb	r3, [r7, #23]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d109      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e12:	4b1d      	ldr	r3, [pc, #116]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e1e:	491a      	ldr	r1, [pc, #104]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	654b      	str	r3, [r1, #84]	; 0x54
 8004e24:	e001      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e26:	7dfb      	ldrb	r3, [r7, #23]
 8004e28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d03e      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3a:	2b05      	cmp	r3, #5
 8004e3c:	d820      	bhi.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8004e3e:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8004e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e44:	08004e95 	.word	0x08004e95
 8004e48:	08004e5d 	.word	0x08004e5d
 8004e4c:	08004e6f 	.word	0x08004e6f
 8004e50:	08004e95 	.word	0x08004e95
 8004e54:	08004e95 	.word	0x08004e95
 8004e58:	08004e95 	.word	0x08004e95
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	2101      	movs	r1, #1
 8004e62:	4618      	mov	r0, r3
 8004e64:	f001 fb20 	bl	80064a8 <RCCEx_PLL2_Config>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e6c:	e013      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3324      	adds	r3, #36	; 0x24
 8004e72:	2101      	movs	r1, #1
 8004e74:	4618      	mov	r0, r3
 8004e76:	f001 fbc9 	bl	800660c <RCCEx_PLL3_Config>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e7e:	e00a      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	75fb      	strb	r3, [r7, #23]
      break;
 8004e84:	e007      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8004e86:	bf00      	nop
 8004e88:	58024400 	.word	0x58024400
 8004e8c:	58024800 	.word	0x58024800
 8004e90:	00ffffcf 	.word	0x00ffffcf
      break;
 8004e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e96:	7dfb      	ldrb	r3, [r7, #23]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d109      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004e9c:	4b9f      	ldr	r3, [pc, #636]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea0:	f023 0207 	bic.w	r2, r3, #7
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea8:	499c      	ldr	r1, [pc, #624]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	654b      	str	r3, [r1, #84]	; 0x54
 8004eae:	e001      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb0:	7dfb      	ldrb	r3, [r7, #23]
 8004eb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d039      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ec6:	2b05      	cmp	r3, #5
 8004ec8:	d820      	bhi.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8004eca:	a201      	add	r2, pc, #4	; (adr r2, 8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8004ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed0:	08004f13 	.word	0x08004f13
 8004ed4:	08004ee9 	.word	0x08004ee9
 8004ed8:	08004efb 	.word	0x08004efb
 8004edc:	08004f13 	.word	0x08004f13
 8004ee0:	08004f13 	.word	0x08004f13
 8004ee4:	08004f13 	.word	0x08004f13
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3304      	adds	r3, #4
 8004eec:	2101      	movs	r1, #1
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f001 fada 	bl	80064a8 <RCCEx_PLL2_Config>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004ef8:	e00c      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	3324      	adds	r3, #36	; 0x24
 8004efe:	2101      	movs	r1, #1
 8004f00:	4618      	mov	r0, r3
 8004f02:	f001 fb83 	bl	800660c <RCCEx_PLL3_Config>
 8004f06:	4603      	mov	r3, r0
 8004f08:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f0a:	e003      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f10:	e000      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8004f12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f14:	7dfb      	ldrb	r3, [r7, #23]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10a      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f1a:	4b80      	ldr	r3, [pc, #512]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1e:	f023 0207 	bic.w	r2, r3, #7
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f28:	497c      	ldr	r1, [pc, #496]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	658b      	str	r3, [r1, #88]	; 0x58
 8004f2e:	e001      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f30:	7dfb      	ldrb	r3, [r7, #23]
 8004f32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d04b      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f4a:	d02e      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x962>
 8004f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f50:	d828      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f56:	d02a      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5c:	d822      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004f5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f62:	d026      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004f64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f68:	d81c      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004f6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f6e:	d010      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8004f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f74:	d816      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d01d      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004f7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f7e:	d111      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	2100      	movs	r1, #0
 8004f86:	4618      	mov	r0, r3
 8004f88:	f001 fa8e 	bl	80064a8 <RCCEx_PLL2_Config>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004f90:	e012      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3324      	adds	r3, #36	; 0x24
 8004f96:	2102      	movs	r1, #2
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f001 fb37 	bl	800660c <RCCEx_PLL3_Config>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004fa2:	e009      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fa8:	e006      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004faa:	bf00      	nop
 8004fac:	e004      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004fae:	bf00      	nop
 8004fb0:	e002      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004fb2:	bf00      	nop
 8004fb4:	e000      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004fb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fb8:	7dfb      	ldrb	r3, [r7, #23]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10a      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fbe:	4b57      	ldr	r3, [pc, #348]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fcc:	4953      	ldr	r1, [pc, #332]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	654b      	str	r3, [r1, #84]	; 0x54
 8004fd2:	e001      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd4:	7dfb      	ldrb	r3, [r7, #23]
 8004fd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d04b      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004fee:	d02e      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8004ff0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004ff4:	d828      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffa:	d02a      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005000:	d822      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005002:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005006:	d026      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005008:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800500c:	d81c      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800500e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005012:	d010      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005018:	d816      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800501a:	2b00      	cmp	r3, #0
 800501c:	d01d      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800501e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005022:	d111      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3304      	adds	r3, #4
 8005028:	2100      	movs	r1, #0
 800502a:	4618      	mov	r0, r3
 800502c:	f001 fa3c 	bl	80064a8 <RCCEx_PLL2_Config>
 8005030:	4603      	mov	r3, r0
 8005032:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005034:	e012      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3324      	adds	r3, #36	; 0x24
 800503a:	2102      	movs	r1, #2
 800503c:	4618      	mov	r0, r3
 800503e:	f001 fae5 	bl	800660c <RCCEx_PLL3_Config>
 8005042:	4603      	mov	r3, r0
 8005044:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005046:	e009      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	75fb      	strb	r3, [r7, #23]
      break;
 800504c:	e006      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800504e:	bf00      	nop
 8005050:	e004      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005052:	bf00      	nop
 8005054:	e002      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005056:	bf00      	nop
 8005058:	e000      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800505a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800505c:	7dfb      	ldrb	r3, [r7, #23]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10a      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005062:	4b2e      	ldr	r3, [pc, #184]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005066:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005070:	492a      	ldr	r1, [pc, #168]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005072:	4313      	orrs	r3, r2
 8005074:	658b      	str	r3, [r1, #88]	; 0x58
 8005076:	e001      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005078:	7dfb      	ldrb	r3, [r7, #23]
 800507a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005084:	2b00      	cmp	r3, #0
 8005086:	d04d      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800508e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005092:	d02e      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8005094:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005098:	d828      	bhi.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800509a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800509e:	d02a      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80050a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a4:	d822      	bhi.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80050a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050aa:	d026      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80050ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050b0:	d81c      	bhi.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80050b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050b6:	d010      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80050b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050bc:	d816      	bhi.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d01d      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80050c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c6:	d111      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3304      	adds	r3, #4
 80050cc:	2100      	movs	r1, #0
 80050ce:	4618      	mov	r0, r3
 80050d0:	f001 f9ea 	bl	80064a8 <RCCEx_PLL2_Config>
 80050d4:	4603      	mov	r3, r0
 80050d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80050d8:	e012      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3324      	adds	r3, #36	; 0x24
 80050de:	2102      	movs	r1, #2
 80050e0:	4618      	mov	r0, r3
 80050e2:	f001 fa93 	bl	800660c <RCCEx_PLL3_Config>
 80050e6:	4603      	mov	r3, r0
 80050e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80050ea:	e009      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	75fb      	strb	r3, [r7, #23]
      break;
 80050f0:	e006      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80050f2:	bf00      	nop
 80050f4:	e004      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80050f6:	bf00      	nop
 80050f8:	e002      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80050fa:	bf00      	nop
 80050fc:	e000      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80050fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005100:	7dfb      	ldrb	r3, [r7, #23]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10c      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005106:	4b05      	ldr	r3, [pc, #20]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005114:	4901      	ldr	r1, [pc, #4]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005116:	4313      	orrs	r3, r2
 8005118:	658b      	str	r3, [r1, #88]	; 0x58
 800511a:	e003      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800511c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005120:	7dfb      	ldrb	r3, [r7, #23]
 8005122:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b00      	cmp	r3, #0
 800512e:	d018      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005138:	d10a      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3324      	adds	r3, #36	; 0x24
 800513e:	2102      	movs	r1, #2
 8005140:	4618      	mov	r0, r3
 8005142:	f001 fa63 	bl	800660c <RCCEx_PLL3_Config>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005150:	4b8a      	ldr	r3, [pc, #552]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005154:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800515c:	4987      	ldr	r1, [pc, #540]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800515e:	4313      	orrs	r3, r2
 8005160:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b00      	cmp	r3, #0
 800516c:	d01a      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005178:	d10a      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3324      	adds	r3, #36	; 0x24
 800517e:	2102      	movs	r1, #2
 8005180:	4618      	mov	r0, r3
 8005182:	f001 fa43 	bl	800660c <RCCEx_PLL3_Config>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005190:	4b7a      	ldr	r3, [pc, #488]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519e:	4977      	ldr	r1, [pc, #476]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d034      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ba:	d01d      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80051bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051c0:	d817      	bhi.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80051c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ca:	d009      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80051cc:	e011      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3304      	adds	r3, #4
 80051d2:	2100      	movs	r1, #0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f001 f967 	bl	80064a8 <RCCEx_PLL2_Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80051de:	e00c      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3324      	adds	r3, #36	; 0x24
 80051e4:	2102      	movs	r1, #2
 80051e6:	4618      	mov	r0, r3
 80051e8:	f001 fa10 	bl	800660c <RCCEx_PLL3_Config>
 80051ec:	4603      	mov	r3, r0
 80051ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80051f0:	e003      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	75fb      	strb	r3, [r7, #23]
      break;
 80051f6:	e000      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80051f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051fa:	7dfb      	ldrb	r3, [r7, #23]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10a      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005200:	4b5e      	ldr	r3, [pc, #376]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005204:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800520e:	495b      	ldr	r1, [pc, #364]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005210:	4313      	orrs	r3, r2
 8005212:	658b      	str	r3, [r1, #88]	; 0x58
 8005214:	e001      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005216:	7dfb      	ldrb	r3, [r7, #23]
 8005218:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d033      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800522c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005230:	d01c      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005232:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005236:	d816      	bhi.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005238:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800523c:	d003      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800523e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005242:	d007      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8005244:	e00f      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005246:	4b4d      	ldr	r3, [pc, #308]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	4a4c      	ldr	r2, [pc, #304]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800524c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005250:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005252:	e00c      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3324      	adds	r3, #36	; 0x24
 8005258:	2101      	movs	r1, #1
 800525a:	4618      	mov	r0, r3
 800525c:	f001 f9d6 	bl	800660c <RCCEx_PLL3_Config>
 8005260:	4603      	mov	r3, r0
 8005262:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005264:	e003      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	75fb      	strb	r3, [r7, #23]
      break;
 800526a:	e000      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800526c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800526e:	7dfb      	ldrb	r3, [r7, #23]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10a      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005274:	4b41      	ldr	r3, [pc, #260]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005278:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005282:	493e      	ldr	r1, [pc, #248]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005284:	4313      	orrs	r3, r2
 8005286:	654b      	str	r3, [r1, #84]	; 0x54
 8005288:	e001      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528a:	7dfb      	ldrb	r3, [r7, #23]
 800528c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d029      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80052a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a6:	d007      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80052a8:	e00f      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052aa:	4b34      	ldr	r3, [pc, #208]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80052ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ae:	4a33      	ldr	r2, [pc, #204]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80052b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80052b6:	e00b      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3304      	adds	r3, #4
 80052bc:	2102      	movs	r1, #2
 80052be:	4618      	mov	r0, r3
 80052c0:	f001 f8f2 	bl	80064a8 <RCCEx_PLL2_Config>
 80052c4:	4603      	mov	r3, r0
 80052c6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80052c8:	e002      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	75fb      	strb	r3, [r7, #23]
      break;
 80052ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052d0:	7dfb      	ldrb	r3, [r7, #23]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d109      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80052d6:	4b29      	ldr	r3, [pc, #164]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80052d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e2:	4926      	ldr	r1, [pc, #152]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80052e8:	e001      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ea:	7dfb      	ldrb	r3, [r7, #23]
 80052ec:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3324      	adds	r3, #36	; 0x24
 80052fe:	2102      	movs	r1, #2
 8005300:	4618      	mov	r0, r3
 8005302:	f001 f983 	bl	800660c <RCCEx_PLL3_Config>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d033      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005320:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005324:	d017      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005326:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800532a:	d811      	bhi.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800532c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005330:	d013      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8005332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005336:	d80b      	bhi.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005338:	2b00      	cmp	r3, #0
 800533a:	d010      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800533c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005340:	d106      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005342:	4b0e      	ldr	r3, [pc, #56]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	4a0d      	ldr	r2, [pc, #52]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800534c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800534e:	e007      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	75fb      	strb	r3, [r7, #23]
      break;
 8005354:	e004      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8005356:	bf00      	nop
 8005358:	e002      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800535a:	bf00      	nop
 800535c:	e000      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800535e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005360:	7dfb      	ldrb	r3, [r7, #23]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10c      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005366:	4b05      	ldr	r3, [pc, #20]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005372:	4902      	ldr	r1, [pc, #8]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005374:	4313      	orrs	r3, r2
 8005376:	654b      	str	r3, [r1, #84]	; 0x54
 8005378:	e004      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800537a:	bf00      	nop
 800537c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005380:	7dfb      	ldrb	r3, [r7, #23]
 8005382:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d008      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005390:	4b29      	ldr	r3, [pc, #164]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005394:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800539c:	4926      	ldr	r1, [pc, #152]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d008      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053ae:	4b22      	ldr	r3, [pc, #136]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80053b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ba:	491f      	ldr	r1, [pc, #124]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00d      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053cc:	4b1a      	ldr	r3, [pc, #104]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	4a19      	ldr	r2, [pc, #100]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80053d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053d6:	6113      	str	r3, [r2, #16]
 80053d8:	4b17      	ldr	r3, [pc, #92]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053e2:	4915      	ldr	r1, [pc, #84]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	da08      	bge.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80053f0:	4b11      	ldr	r3, [pc, #68]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80053f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fc:	490e      	ldr	r1, [pc, #56]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d009      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800540e:	4b0a      	ldr	r3, [pc, #40]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005412:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800541c:	4906      	ldr	r1, [pc, #24]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800541e:	4313      	orrs	r3, r2
 8005420:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005422:	7dbb      	ldrb	r3, [r7, #22]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8005428:	2300      	movs	r3, #0
 800542a:	e000      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
}
 800542e:	4618      	mov	r0, r3
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	58024400 	.word	0x58024400

0800543c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b090      	sub	sp, #64	; 0x40
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544a:	f040 8089 	bne.w	8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800544e:	4b95      	ldr	r3, [pc, #596]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545a:	2b04      	cmp	r3, #4
 800545c:	d87d      	bhi.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800545e:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8005460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005464:	08005479 	.word	0x08005479
 8005468:	0800549d 	.word	0x0800549d
 800546c:	080054c1 	.word	0x080054c1
 8005470:	08005555 	.word	0x08005555
 8005474:	080054e5 	.word	0x080054e5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005478:	4b8a      	ldr	r3, [pc, #552]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005480:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005484:	d107      	bne.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800548a:	4618      	mov	r0, r3
 800548c:	f000 feba 	bl	8006204 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005494:	e3ef      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8005496:	2300      	movs	r3, #0
 8005498:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800549a:	e3ec      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800549c:	4b81      	ldr	r3, [pc, #516]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054a8:	d107      	bne.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054aa:	f107 0318 	add.w	r3, r7, #24
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fc00 	bl	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054b8:	e3dd      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054be:	e3da      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054c0:	4b78      	ldr	r3, [pc, #480]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054cc:	d107      	bne.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054ce:	f107 030c 	add.w	r3, r7, #12
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fd42 	bl	8005f5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054dc:	e3cb      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80054de:	2300      	movs	r3, #0
 80054e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054e2:	e3c8      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80054e4:	4b6f      	ldr	r3, [pc, #444]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80054e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80054ec:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80054ee:	4b6d      	ldr	r3, [pc, #436]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0304 	and.w	r3, r3, #4
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d10c      	bne.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80054fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d109      	bne.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005500:	4b68      	ldr	r3, [pc, #416]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	08db      	lsrs	r3, r3, #3
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	4a67      	ldr	r2, [pc, #412]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
 8005510:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005512:	e01e      	b.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005514:	4b63      	ldr	r3, [pc, #396]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005520:	d106      	bne.n	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005524:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005528:	d102      	bne.n	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800552a:	4b60      	ldr	r3, [pc, #384]	; (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800552c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800552e:	e010      	b.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005530:	4b5c      	ldr	r3, [pc, #368]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800553c:	d106      	bne.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800553e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005544:	d102      	bne.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005546:	4b5a      	ldr	r3, [pc, #360]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800554a:	e002      	b.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800554c:	2300      	movs	r3, #0
 800554e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005550:	e391      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005552:	e390      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005554:	4b57      	ldr	r3, [pc, #348]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005556:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005558:	e38d      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800555a:	2300      	movs	r3, #0
 800555c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800555e:	e38a      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005566:	f040 80a7 	bne.w	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800556a:	4b4e      	ldr	r3, [pc, #312]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800556c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005572:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005576:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800557a:	d054      	beq.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005582:	f200 808b 	bhi.w	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800558c:	f000 8083 	beq.w	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005596:	f200 8081 	bhi.w	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055a0:	d02f      	beq.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055a8:	d878      	bhi.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80055aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d004      	beq.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055b6:	d012      	beq.n	80055de <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80055b8:	e070      	b.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055ba:	4b3a      	ldr	r3, [pc, #232]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055c6:	d107      	bne.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 fe19 	bl	8006204 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80055d6:	e34e      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055dc:	e34b      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055de:	4b31      	ldr	r3, [pc, #196]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055ea:	d107      	bne.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055ec:	f107 0318 	add.w	r3, r7, #24
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 fb5f 	bl	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80055fa:	e33c      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005600:	e339      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005602:	4b28      	ldr	r3, [pc, #160]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800560a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800560e:	d107      	bne.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005610:	f107 030c 	add.w	r3, r7, #12
 8005614:	4618      	mov	r0, r3
 8005616:	f000 fca1 	bl	8005f5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800561e:	e32a      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005624:	e327      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005626:	4b1f      	ldr	r3, [pc, #124]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800562a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800562e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005630:	4b1c      	ldr	r3, [pc, #112]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b04      	cmp	r3, #4
 800563a:	d10c      	bne.n	8005656 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800563c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563e:	2b00      	cmp	r3, #0
 8005640:	d109      	bne.n	8005656 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005642:	4b18      	ldr	r3, [pc, #96]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	08db      	lsrs	r3, r3, #3
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	4a16      	ldr	r2, [pc, #88]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800564e:	fa22 f303 	lsr.w	r3, r2, r3
 8005652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005654:	e01e      	b.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005656:	4b13      	ldr	r3, [pc, #76]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005662:	d106      	bne.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8005664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005666:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800566a:	d102      	bne.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800566c:	4b0f      	ldr	r3, [pc, #60]	; (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800566e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005670:	e010      	b.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005672:	4b0c      	ldr	r3, [pc, #48]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800567e:	d106      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8005680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005682:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005686:	d102      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005688:	4b09      	ldr	r3, [pc, #36]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800568a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800568c:	e002      	b.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005692:	e2f0      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005694:	e2ef      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005696:	4b07      	ldr	r3, [pc, #28]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005698:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800569a:	e2ec      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800569c:	2300      	movs	r3, #0
 800569e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056a0:	e2e9      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80056a2:	bf00      	nop
 80056a4:	58024400 	.word	0x58024400
 80056a8:	03d09000 	.word	0x03d09000
 80056ac:	003d0900 	.word	0x003d0900
 80056b0:	007a1200 	.word	0x007a1200
 80056b4:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056be:	f040 809c 	bne.w	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80056c2:	4b9d      	ldr	r3, [pc, #628]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80056c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80056ca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056d2:	d054      	beq.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80056d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056da:	f200 808b 	bhi.w	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056e4:	f000 8083 	beq.w	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80056e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056ee:	f200 8081 	bhi.w	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056f8:	d02f      	beq.n	800575a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005700:	d878      	bhi.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	2b00      	cmp	r3, #0
 8005706:	d004      	beq.n	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800570e:	d012      	beq.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005710:	e070      	b.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005712:	4b89      	ldr	r3, [pc, #548]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800571e:	d107      	bne.n	8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005724:	4618      	mov	r0, r3
 8005726:	f000 fd6d 	bl	8006204 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800572e:	e2a2      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8005730:	2300      	movs	r3, #0
 8005732:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005734:	e29f      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005736:	4b80      	ldr	r3, [pc, #512]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800573e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005742:	d107      	bne.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005744:	f107 0318 	add.w	r3, r7, #24
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fab3 	bl	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005752:	e290      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005758:	e28d      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800575a:	4b77      	ldr	r3, [pc, #476]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005766:	d107      	bne.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005768:	f107 030c 	add.w	r3, r7, #12
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fbf5 	bl	8005f5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005776:	e27e      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8005778:	2300      	movs	r3, #0
 800577a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800577c:	e27b      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800577e:	4b6e      	ldr	r3, [pc, #440]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8005780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005782:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005786:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005788:	4b6b      	ldr	r3, [pc, #428]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b04      	cmp	r3, #4
 8005792:	d10c      	bne.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005796:	2b00      	cmp	r3, #0
 8005798:	d109      	bne.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800579a:	4b67      	ldr	r3, [pc, #412]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	08db      	lsrs	r3, r3, #3
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	4a65      	ldr	r2, [pc, #404]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80057a6:	fa22 f303 	lsr.w	r3, r2, r3
 80057aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ac:	e01e      	b.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057ae:	4b62      	ldr	r3, [pc, #392]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ba:	d106      	bne.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80057bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057c2:	d102      	bne.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80057c4:	4b5e      	ldr	r3, [pc, #376]	; (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80057c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057c8:	e010      	b.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057ca:	4b5b      	ldr	r3, [pc, #364]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057d6:	d106      	bne.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80057d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057de:	d102      	bne.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80057e0:	4b58      	ldr	r3, [pc, #352]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80057e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057e4:	e002      	b.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80057ea:	e244      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80057ec:	e243      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80057ee:	4b56      	ldr	r3, [pc, #344]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80057f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057f2:	e240      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 80057f4:	2300      	movs	r3, #0
 80057f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057f8:	e23d      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005800:	f040 80a7 	bne.w	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005804:	4b4c      	ldr	r3, [pc, #304]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8005806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005808:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800580c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800580e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005810:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005814:	d055      	beq.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800581c:	f200 8096 	bhi.w	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8005820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005822:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005826:	f000 8084 	beq.w	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800582a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005830:	f200 808c 	bhi.w	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800583a:	d030      	beq.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800583c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005842:	f200 8083 	bhi.w	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	2b00      	cmp	r3, #0
 800584a:	d004      	beq.n	8005856 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005852:	d012      	beq.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 8005854:	e07a      	b.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005856:	4b38      	ldr	r3, [pc, #224]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800585e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005862:	d107      	bne.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fccb 	bl	8006204 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005872:	e200      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005878:	e1fd      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800587a:	4b2f      	ldr	r3, [pc, #188]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005886:	d107      	bne.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005888:	f107 0318 	add.w	r3, r7, #24
 800588c:	4618      	mov	r0, r3
 800588e:	f000 fa11 	bl	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005896:	e1ee      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8005898:	2300      	movs	r3, #0
 800589a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800589c:	e1eb      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800589e:	4b26      	ldr	r3, [pc, #152]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058aa:	d107      	bne.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058ac:	f107 030c 	add.w	r3, r7, #12
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fb53 	bl	8005f5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058ba:	e1dc      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058c0:	e1d9      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80058c2:	4b1d      	ldr	r3, [pc, #116]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80058c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058ca:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058cc:	4b1a      	ldr	r3, [pc, #104]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d10c      	bne.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 80058d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d109      	bne.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058de:	4b16      	ldr	r3, [pc, #88]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	08db      	lsrs	r3, r3, #3
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	4a14      	ldr	r2, [pc, #80]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80058ea:	fa22 f303 	lsr.w	r3, r2, r3
 80058ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f0:	e01e      	b.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058f2:	4b11      	ldr	r3, [pc, #68]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058fe:	d106      	bne.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 8005900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005902:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005906:	d102      	bne.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005908:	4b0d      	ldr	r3, [pc, #52]	; (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800590a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800590c:	e010      	b.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800590e:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005916:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800591a:	d106      	bne.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800591c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005922:	d102      	bne.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005924:	4b07      	ldr	r3, [pc, #28]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005928:	e002      	b.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800592a:	2300      	movs	r3, #0
 800592c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800592e:	e1a2      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005930:	e1a1      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005932:	4b05      	ldr	r3, [pc, #20]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005934:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005936:	e19e      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005938:	58024400 	.word	0x58024400
 800593c:	03d09000 	.word	0x03d09000
 8005940:	003d0900 	.word	0x003d0900
 8005944:	007a1200 	.word	0x007a1200
 8005948:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005950:	e191      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005958:	d173      	bne.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800595a:	4b9b      	ldr	r3, [pc, #620]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800595c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800595e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005962:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800596a:	d02f      	beq.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800596c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005972:	d863      	bhi.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8005974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005976:	2b00      	cmp	r3, #0
 8005978:	d004      	beq.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800597a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005980:	d012      	beq.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8005982:	e05b      	b.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005984:	4b90      	ldr	r3, [pc, #576]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800598c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005990:	d107      	bne.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005992:	f107 0318 	add.w	r3, r7, #24
 8005996:	4618      	mov	r0, r3
 8005998:	f000 f98c 	bl	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059a0:	e169      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80059a2:	2300      	movs	r3, #0
 80059a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059a6:	e166      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059a8:	4b87      	ldr	r3, [pc, #540]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059b4:	d107      	bne.n	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059b6:	f107 030c 	add.w	r3, r7, #12
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 face 	bl	8005f5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059c4:	e157      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80059c6:	2300      	movs	r3, #0
 80059c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059ca:	e154      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80059cc:	4b7e      	ldr	r3, [pc, #504]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80059ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059d4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059d6:	4b7c      	ldr	r3, [pc, #496]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0304 	and.w	r3, r3, #4
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d10c      	bne.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80059e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d109      	bne.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059e8:	4b77      	ldr	r3, [pc, #476]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	08db      	lsrs	r3, r3, #3
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	4a76      	ldr	r2, [pc, #472]	; (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80059f4:	fa22 f303 	lsr.w	r3, r2, r3
 80059f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059fa:	e01e      	b.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059fc:	4b72      	ldr	r3, [pc, #456]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a08:	d106      	bne.n	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8005a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a10:	d102      	bne.n	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005a12:	4b6f      	ldr	r3, [pc, #444]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a16:	e010      	b.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a18:	4b6b      	ldr	r3, [pc, #428]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a24:	d106      	bne.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 8005a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a2c:	d102      	bne.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005a2e:	4b69      	ldr	r3, [pc, #420]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a32:	e002      	b.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005a34:	2300      	movs	r3, #0
 8005a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005a38:	e11d      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005a3a:	e11c      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a40:	e119      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a48:	d133      	bne.n	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005a4a:	4b5f      	ldr	r3, [pc, #380]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a52:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d004      	beq.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a60:	d012      	beq.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005a62:	e023      	b.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a64:	4b58      	ldr	r3, [pc, #352]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a70:	d107      	bne.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fbc4 	bl	8006204 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a80:	e0f9      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a86:	e0f6      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a88:	4b4f      	ldr	r3, [pc, #316]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a94:	d107      	bne.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a96:	f107 0318 	add.w	r3, r7, #24
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 f90a 	bl	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005aa4:	e0e7      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005aaa:	e0e4      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8005aac:	2300      	movs	r3, #0
 8005aae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ab0:	e0e1      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ab8:	f040 808e 	bne.w	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005abc:	4b42      	ldr	r3, [pc, #264]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005ac4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005acc:	d06b      	beq.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8005ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ad4:	d874      	bhi.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005adc:	d056      	beq.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 8005ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae4:	d86c      	bhi.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005aec:	d03b      	beq.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8005aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005af4:	d864      	bhi.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8005af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005afc:	d021      	beq.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 8005afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b04:	d85c      	bhi.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8005b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d004      	beq.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b12:	d004      	beq.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 8005b14:	e054      	b.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005b16:	f000 f8b7 	bl	8005c88 <HAL_RCCEx_GetD3PCLK1Freq>
 8005b1a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005b1c:	e0ab      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b1e:	4b2a      	ldr	r3, [pc, #168]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b2a:	d107      	bne.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b2c:	f107 0318 	add.w	r3, r7, #24
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 f8bf 	bl	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b3a:	e09c      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b40:	e099      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b42:	4b21      	ldr	r3, [pc, #132]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b4e:	d107      	bne.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b50:	f107 030c 	add.w	r3, r7, #12
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 fa01 	bl	8005f5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b5e:	e08a      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b64:	e087      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b66:	4b18      	ldr	r3, [pc, #96]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d109      	bne.n	8005b86 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b72:	4b15      	ldr	r3, [pc, #84]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	08db      	lsrs	r3, r3, #3
 8005b78:	f003 0303 	and.w	r3, r3, #3
 8005b7c:	4a13      	ldr	r2, [pc, #76]	; (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b84:	e077      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8005b86:	2300      	movs	r3, #0
 8005b88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b8a:	e074      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005b8c:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b98:	d102      	bne.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 8005b9a:	4b0d      	ldr	r3, [pc, #52]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b9e:	e06a      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ba4:	e067      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ba6:	4b08      	ldr	r3, [pc, #32]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bb2:	d102      	bne.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 8005bb4:	4b07      	ldr	r3, [pc, #28]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005bb8:	e05d      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bbe:	e05a      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bc4:	e057      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005bc6:	bf00      	nop
 8005bc8:	58024400 	.word	0x58024400
 8005bcc:	03d09000 	.word	0x03d09000
 8005bd0:	003d0900 	.word	0x003d0900
 8005bd4:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bde:	d148      	bne.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005be0:	4b27      	ldr	r3, [pc, #156]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005be8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bf0:	d02a      	beq.n	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 8005bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bf8:	d838      	bhi.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8005bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d004      	beq.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 8005c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c06:	d00d      	beq.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 8005c08:	e030      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c0a:	4b1d      	ldr	r3, [pc, #116]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c16:	d102      	bne.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 8005c18:	4b1a      	ldr	r3, [pc, #104]	; (8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005c1c:	e02b      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c22:	e028      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c24:	4b16      	ldr	r3, [pc, #88]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c30:	d107      	bne.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 fae4 	bl	8006204 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005c40:	e019      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8005c42:	2300      	movs	r3, #0
 8005c44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c46:	e016      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c48:	4b0d      	ldr	r3, [pc, #52]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c54:	d107      	bne.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c56:	f107 0318 	add.w	r3, r7, #24
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 f82a 	bl	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005c64:	e007      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8005c66:	2300      	movs	r3, #0
 8005c68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c6a:	e004      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c70:	e001      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 8005c72:	2300      	movs	r3, #0
 8005c74:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3740      	adds	r7, #64	; 0x40
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	58024400 	.word	0x58024400
 8005c84:	007a1200 	.word	0x007a1200

08005c88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c8c:	f7fe fc80 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 8005c90:	4602      	mov	r2, r0
 8005c92:	4b06      	ldr	r3, [pc, #24]	; (8005cac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	091b      	lsrs	r3, r3, #4
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	4904      	ldr	r1, [pc, #16]	; (8005cb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ca0:	f003 031f 	and.w	r3, r3, #31
 8005ca4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	58024400 	.word	0x58024400
 8005cb0:	08007ac8 	.word	0x08007ac8

08005cb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b089      	sub	sp, #36	; 0x24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cbc:	4ba1      	ldr	r3, [pc, #644]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc0:	f003 0303 	and.w	r3, r3, #3
 8005cc4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005cc6:	4b9f      	ldr	r3, [pc, #636]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	0b1b      	lsrs	r3, r3, #12
 8005ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cd0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005cd2:	4b9c      	ldr	r3, [pc, #624]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	091b      	lsrs	r3, r3, #4
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005cde:	4b99      	ldr	r3, [pc, #612]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce2:	08db      	lsrs	r3, r3, #3
 8005ce4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	fb02 f303 	mul.w	r3, r2, r3
 8005cee:	ee07 3a90 	vmov	s15, r3
 8005cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 8111 	beq.w	8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	f000 8083 	beq.w	8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	f200 80a1 	bhi.w	8005e54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d056      	beq.n	8005dcc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005d1e:	e099      	b.n	8005e54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d20:	4b88      	ldr	r3, [pc, #544]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0320 	and.w	r3, r3, #32
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d02d      	beq.n	8005d88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d2c:	4b85      	ldr	r3, [pc, #532]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	08db      	lsrs	r3, r3, #3
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	4a84      	ldr	r2, [pc, #528]	; (8005f48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005d38:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	ee07 3a90 	vmov	s15, r3
 8005d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d56:	4b7b      	ldr	r3, [pc, #492]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d82:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005d86:	e087      	b.n	8005e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005f50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d9a:	4b6a      	ldr	r3, [pc, #424]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dae:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dca:	e065      	b.n	8005e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	ee07 3a90 	vmov	s15, r3
 8005dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dde:	4b59      	ldr	r3, [pc, #356]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8005df2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e0e:	e043      	b.n	8005e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e22:	4b48      	ldr	r3, [pc, #288]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e36:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e52:	e021      	b.n	8005e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e66:	4b37      	ldr	r3, [pc, #220]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005e98:	4b2a      	ldr	r3, [pc, #168]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9c:	0a5b      	lsrs	r3, r3, #9
 8005e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ea2:	ee07 3a90 	vmov	s15, r3
 8005ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005eae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ebe:	ee17 2a90 	vmov	r2, s15
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005ec6:	4b1f      	ldr	r3, [pc, #124]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eca:	0c1b      	lsrs	r3, r3, #16
 8005ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ed0:	ee07 3a90 	vmov	s15, r3
 8005ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005edc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ee0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eec:	ee17 2a90 	vmov	r2, s15
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005ef4:	4b13      	ldr	r3, [pc, #76]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef8:	0e1b      	lsrs	r3, r3, #24
 8005efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f1a:	ee17 2a90 	vmov	r2, s15
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f22:	e008      	b.n	8005f36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	609a      	str	r2, [r3, #8]
}
 8005f36:	bf00      	nop
 8005f38:	3724      	adds	r7, #36	; 0x24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	58024400 	.word	0x58024400
 8005f48:	03d09000 	.word	0x03d09000
 8005f4c:	46000000 	.word	0x46000000
 8005f50:	4c742400 	.word	0x4c742400
 8005f54:	4a742400 	.word	0x4a742400
 8005f58:	4af42400 	.word	0x4af42400

08005f5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b089      	sub	sp, #36	; 0x24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f64:	4ba1      	ldr	r3, [pc, #644]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	f003 0303 	and.w	r3, r3, #3
 8005f6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005f6e:	4b9f      	ldr	r3, [pc, #636]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f72:	0d1b      	lsrs	r3, r3, #20
 8005f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f7a:	4b9c      	ldr	r3, [pc, #624]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7e:	0a1b      	lsrs	r3, r3, #8
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005f86:	4b99      	ldr	r3, [pc, #612]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8a:	08db      	lsrs	r3, r3, #3
 8005f8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	fb02 f303 	mul.w	r3, r2, r3
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 8111 	beq.w	80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	f000 8083 	beq.w	80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	f200 80a1 	bhi.w	80060fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d056      	beq.n	8006074 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005fc6:	e099      	b.n	80060fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fc8:	4b88      	ldr	r3, [pc, #544]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0320 	and.w	r3, r3, #32
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d02d      	beq.n	8006030 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fd4:	4b85      	ldr	r3, [pc, #532]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	08db      	lsrs	r3, r3, #3
 8005fda:	f003 0303 	and.w	r3, r3, #3
 8005fde:	4a84      	ldr	r2, [pc, #528]	; (80061f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	ee07 3a90 	vmov	s15, r3
 8005fec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ffe:	4b7b      	ldr	r3, [pc, #492]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800600e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006012:	eddf 5a78 	vldr	s11, [pc, #480]	; 80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800601a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800601e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800602a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800602e:	e087      	b.n	8006140 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80061f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800603e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006042:	4b6a      	ldr	r3, [pc, #424]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006052:	ed97 6a03 	vldr	s12, [r7, #12]
 8006056:	eddf 5a67 	vldr	s11, [pc, #412]	; 80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800605a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800605e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800606a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006072:	e065      	b.n	8006140 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80061fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006086:	4b59      	ldr	r3, [pc, #356]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006096:	ed97 6a03 	vldr	s12, [r7, #12]
 800609a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800609e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060b6:	e043      	b.n	8006140 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	ee07 3a90 	vmov	s15, r3
 80060be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006200 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80060c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ca:	4b48      	ldr	r3, [pc, #288]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060da:	ed97 6a03 	vldr	s12, [r7, #12]
 80060de:	eddf 5a45 	vldr	s11, [pc, #276]	; 80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060fa:	e021      	b.n	8006140 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	ee07 3a90 	vmov	s15, r3
 8006102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006106:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80061fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800610a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800610e:	4b37      	ldr	r3, [pc, #220]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006116:	ee07 3a90 	vmov	s15, r3
 800611a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800611e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006122:	eddf 5a34 	vldr	s11, [pc, #208]	; 80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800612a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800612e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800613a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800613e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006140:	4b2a      	ldr	r3, [pc, #168]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006144:	0a5b      	lsrs	r3, r3, #9
 8006146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006152:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006156:	ee37 7a87 	vadd.f32	s14, s15, s14
 800615a:	edd7 6a07 	vldr	s13, [r7, #28]
 800615e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006166:	ee17 2a90 	vmov	r2, s15
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800616e:	4b1f      	ldr	r3, [pc, #124]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	0c1b      	lsrs	r3, r3, #16
 8006174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006178:	ee07 3a90 	vmov	s15, r3
 800617c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006180:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006184:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006188:	edd7 6a07 	vldr	s13, [r7, #28]
 800618c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006194:	ee17 2a90 	vmov	r2, s15
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800619c:	4b13      	ldr	r3, [pc, #76]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800619e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a0:	0e1b      	lsrs	r3, r3, #24
 80061a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80061ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061c2:	ee17 2a90 	vmov	r2, s15
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80061ca:	e008      	b.n	80061de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	609a      	str	r2, [r3, #8]
}
 80061de:	bf00      	nop
 80061e0:	3724      	adds	r7, #36	; 0x24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	58024400 	.word	0x58024400
 80061f0:	03d09000 	.word	0x03d09000
 80061f4:	46000000 	.word	0x46000000
 80061f8:	4c742400 	.word	0x4c742400
 80061fc:	4a742400 	.word	0x4a742400
 8006200:	4af42400 	.word	0x4af42400

08006204 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006204:	b480      	push	{r7}
 8006206:	b089      	sub	sp, #36	; 0x24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800620c:	4ba0      	ldr	r3, [pc, #640]	; (8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800620e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006210:	f003 0303 	and.w	r3, r3, #3
 8006214:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006216:	4b9e      	ldr	r3, [pc, #632]	; (8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621a:	091b      	lsrs	r3, r3, #4
 800621c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006220:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006222:	4b9b      	ldr	r3, [pc, #620]	; (8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800622c:	4b98      	ldr	r3, [pc, #608]	; (8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800622e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006230:	08db      	lsrs	r3, r3, #3
 8006232:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	fb02 f303 	mul.w	r3, r2, r3
 800623c:	ee07 3a90 	vmov	s15, r3
 8006240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006244:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2b00      	cmp	r3, #0
 800624c:	f000 8111 	beq.w	8006472 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	2b02      	cmp	r3, #2
 8006254:	f000 8083 	beq.w	800635e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	2b02      	cmp	r3, #2
 800625c:	f200 80a1 	bhi.w	80063a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d056      	beq.n	800631a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800626c:	e099      	b.n	80063a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800626e:	4b88      	ldr	r3, [pc, #544]	; (8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d02d      	beq.n	80062d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800627a:	4b85      	ldr	r3, [pc, #532]	; (8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	08db      	lsrs	r3, r3, #3
 8006280:	f003 0303 	and.w	r3, r3, #3
 8006284:	4a83      	ldr	r2, [pc, #524]	; (8006494 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006286:	fa22 f303 	lsr.w	r3, r2, r3
 800628a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	ee07 3a90 	vmov	s15, r3
 8006292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	ee07 3a90 	vmov	s15, r3
 800629c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062a4:	4b7a      	ldr	r3, [pc, #488]	; (8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ac:	ee07 3a90 	vmov	s15, r3
 80062b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80062b8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006498 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80062bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80062d4:	e087      	b.n	80063e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	ee07 3a90 	vmov	s15, r3
 80062dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800649c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80062e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062e8:	4b69      	ldr	r3, [pc, #420]	; (8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f0:	ee07 3a90 	vmov	s15, r3
 80062f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80062fc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006498 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006300:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006304:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006308:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800630c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006314:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006318:	e065      	b.n	80063e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	ee07 3a90 	vmov	s15, r3
 8006320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006324:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80064a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006328:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800632c:	4b58      	ldr	r3, [pc, #352]	; (8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800632e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006334:	ee07 3a90 	vmov	s15, r3
 8006338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800633c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006340:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006498 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006344:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006348:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800634c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006350:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006358:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800635c:	e043      	b.n	80063e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	ee07 3a90 	vmov	s15, r3
 8006364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006368:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800636c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006370:	4b47      	ldr	r3, [pc, #284]	; (8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006378:	ee07 3a90 	vmov	s15, r3
 800637c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006380:	ed97 6a03 	vldr	s12, [r7, #12]
 8006384:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006498 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006388:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800638c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006390:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006394:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063a0:	e021      	b.n	80063e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	ee07 3a90 	vmov	s15, r3
 80063a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ac:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800649c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80063b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063b4:	4b36      	ldr	r3, [pc, #216]	; (8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063bc:	ee07 3a90 	vmov	s15, r3
 80063c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80063c8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006498 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80063cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063e4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80063e6:	4b2a      	ldr	r3, [pc, #168]	; (8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ea:	0a5b      	lsrs	r3, r3, #9
 80063ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063f0:	ee07 3a90 	vmov	s15, r3
 80063f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006400:	edd7 6a07 	vldr	s13, [r7, #28]
 8006404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800640c:	ee17 2a90 	vmov	r2, s15
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006414:	4b1e      	ldr	r3, [pc, #120]	; (8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006418:	0c1b      	lsrs	r3, r3, #16
 800641a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800642a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800642e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800643a:	ee17 2a90 	vmov	r2, s15
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006442:	4b13      	ldr	r3, [pc, #76]	; (8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	0e1b      	lsrs	r3, r3, #24
 8006448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800644c:	ee07 3a90 	vmov	s15, r3
 8006450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006454:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006458:	ee37 7a87 	vadd.f32	s14, s15, s14
 800645c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006468:	ee17 2a90 	vmov	r2, s15
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006470:	e008      	b.n	8006484 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	609a      	str	r2, [r3, #8]
}
 8006484:	bf00      	nop
 8006486:	3724      	adds	r7, #36	; 0x24
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	58024400 	.word	0x58024400
 8006494:	03d09000 	.word	0x03d09000
 8006498:	46000000 	.word	0x46000000
 800649c:	4c742400 	.word	0x4c742400
 80064a0:	4a742400 	.word	0x4a742400
 80064a4:	4af42400 	.word	0x4af42400

080064a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064b6:	4b53      	ldr	r3, [pc, #332]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 80064b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d101      	bne.n	80064c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e099      	b.n	80065fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80064c6:	4b4f      	ldr	r3, [pc, #316]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a4e      	ldr	r2, [pc, #312]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 80064cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064d2:	f7fa fe97 	bl	8001204 <HAL_GetTick>
 80064d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064d8:	e008      	b.n	80064ec <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80064da:	f7fa fe93 	bl	8001204 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d901      	bls.n	80064ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e086      	b.n	80065fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064ec:	4b45      	ldr	r3, [pc, #276]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1f0      	bne.n	80064da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80064f8:	4b42      	ldr	r3, [pc, #264]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 80064fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	031b      	lsls	r3, r3, #12
 8006506:	493f      	ldr	r1, [pc, #252]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 8006508:	4313      	orrs	r3, r2
 800650a:	628b      	str	r3, [r1, #40]	; 0x28
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	3b01      	subs	r3, #1
 8006512:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	3b01      	subs	r3, #1
 800651c:	025b      	lsls	r3, r3, #9
 800651e:	b29b      	uxth	r3, r3
 8006520:	431a      	orrs	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	3b01      	subs	r3, #1
 8006528:	041b      	lsls	r3, r3, #16
 800652a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800652e:	431a      	orrs	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	3b01      	subs	r3, #1
 8006536:	061b      	lsls	r3, r3, #24
 8006538:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800653c:	4931      	ldr	r1, [pc, #196]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 800653e:	4313      	orrs	r3, r2
 8006540:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006542:	4b30      	ldr	r3, [pc, #192]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 8006544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006546:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	492d      	ldr	r1, [pc, #180]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 8006550:	4313      	orrs	r3, r2
 8006552:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006554:	4b2b      	ldr	r3, [pc, #172]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	f023 0220 	bic.w	r2, r3, #32
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	4928      	ldr	r1, [pc, #160]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 8006562:	4313      	orrs	r3, r2
 8006564:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006566:	4b27      	ldr	r3, [pc, #156]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 8006568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656a:	4a26      	ldr	r2, [pc, #152]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 800656c:	f023 0310 	bic.w	r3, r3, #16
 8006570:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006572:	4b24      	ldr	r3, [pc, #144]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 8006574:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006576:	4b24      	ldr	r3, [pc, #144]	; (8006608 <RCCEx_PLL2_Config+0x160>)
 8006578:	4013      	ands	r3, r2
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	69d2      	ldr	r2, [r2, #28]
 800657e:	00d2      	lsls	r2, r2, #3
 8006580:	4920      	ldr	r1, [pc, #128]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 8006582:	4313      	orrs	r3, r2
 8006584:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006586:	4b1f      	ldr	r3, [pc, #124]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 8006588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658a:	4a1e      	ldr	r2, [pc, #120]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 800658c:	f043 0310 	orr.w	r3, r3, #16
 8006590:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d106      	bne.n	80065a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006598:	4b1a      	ldr	r3, [pc, #104]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 800659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659c:	4a19      	ldr	r2, [pc, #100]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 800659e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065a4:	e00f      	b.n	80065c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d106      	bne.n	80065ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80065ac:	4b15      	ldr	r3, [pc, #84]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	4a14      	ldr	r2, [pc, #80]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 80065b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065b8:	e005      	b.n	80065c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80065ba:	4b12      	ldr	r3, [pc, #72]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	4a11      	ldr	r2, [pc, #68]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 80065c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80065c6:	4b0f      	ldr	r3, [pc, #60]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a0e      	ldr	r2, [pc, #56]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 80065cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065d2:	f7fa fe17 	bl	8001204 <HAL_GetTick>
 80065d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065d8:	e008      	b.n	80065ec <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80065da:	f7fa fe13 	bl	8001204 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d901      	bls.n	80065ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e006      	b.n	80065fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065ec:	4b05      	ldr	r3, [pc, #20]	; (8006604 <RCCEx_PLL2_Config+0x15c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0f0      	beq.n	80065da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	58024400 	.word	0x58024400
 8006608:	ffff0007 	.word	0xffff0007

0800660c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006616:	2300      	movs	r3, #0
 8006618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800661a:	4b53      	ldr	r3, [pc, #332]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 800661c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	2b03      	cmp	r3, #3
 8006624:	d101      	bne.n	800662a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e099      	b.n	800675e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800662a:	4b4f      	ldr	r3, [pc, #316]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a4e      	ldr	r2, [pc, #312]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 8006630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006636:	f7fa fde5 	bl	8001204 <HAL_GetTick>
 800663a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800663c:	e008      	b.n	8006650 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800663e:	f7fa fde1 	bl	8001204 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d901      	bls.n	8006650 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e086      	b.n	800675e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006650:	4b45      	ldr	r3, [pc, #276]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1f0      	bne.n	800663e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800665c:	4b42      	ldr	r3, [pc, #264]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 800665e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006660:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	051b      	lsls	r3, r3, #20
 800666a:	493f      	ldr	r1, [pc, #252]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 800666c:	4313      	orrs	r3, r2
 800666e:	628b      	str	r3, [r1, #40]	; 0x28
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	3b01      	subs	r3, #1
 8006676:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	3b01      	subs	r3, #1
 8006680:	025b      	lsls	r3, r3, #9
 8006682:	b29b      	uxth	r3, r3
 8006684:	431a      	orrs	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	3b01      	subs	r3, #1
 800668c:	041b      	lsls	r3, r3, #16
 800668e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	3b01      	subs	r3, #1
 800669a:	061b      	lsls	r3, r3, #24
 800669c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066a0:	4931      	ldr	r1, [pc, #196]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80066a6:	4b30      	ldr	r3, [pc, #192]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 80066a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	492d      	ldr	r1, [pc, #180]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80066b8:	4b2b      	ldr	r3, [pc, #172]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	4928      	ldr	r1, [pc, #160]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80066ca:	4b27      	ldr	r3, [pc, #156]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 80066cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ce:	4a26      	ldr	r2, [pc, #152]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 80066d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80066d6:	4b24      	ldr	r3, [pc, #144]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 80066d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066da:	4b24      	ldr	r3, [pc, #144]	; (800676c <RCCEx_PLL3_Config+0x160>)
 80066dc:	4013      	ands	r3, r2
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	69d2      	ldr	r2, [r2, #28]
 80066e2:	00d2      	lsls	r2, r2, #3
 80066e4:	4920      	ldr	r1, [pc, #128]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80066ea:	4b1f      	ldr	r3, [pc, #124]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 80066ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ee:	4a1e      	ldr	r2, [pc, #120]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 80066f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d106      	bne.n	800670a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80066fc:	4b1a      	ldr	r3, [pc, #104]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 80066fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006700:	4a19      	ldr	r2, [pc, #100]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 8006702:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006706:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006708:	e00f      	b.n	800672a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d106      	bne.n	800671e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006710:	4b15      	ldr	r3, [pc, #84]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 8006712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006714:	4a14      	ldr	r2, [pc, #80]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 8006716:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800671a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800671c:	e005      	b.n	800672a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800671e:	4b12      	ldr	r3, [pc, #72]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 8006720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006722:	4a11      	ldr	r2, [pc, #68]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 8006724:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006728:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800672a:	4b0f      	ldr	r3, [pc, #60]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a0e      	ldr	r2, [pc, #56]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 8006730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006736:	f7fa fd65 	bl	8001204 <HAL_GetTick>
 800673a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800673c:	e008      	b.n	8006750 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800673e:	f7fa fd61 	bl	8001204 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b02      	cmp	r3, #2
 800674a:	d901      	bls.n	8006750 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e006      	b.n	800675e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006750:	4b05      	ldr	r3, [pc, #20]	; (8006768 <RCCEx_PLL3_Config+0x15c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0f0      	beq.n	800673e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800675c:	7bfb      	ldrb	r3, [r7, #15]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	58024400 	.word	0x58024400
 800676c:	ffff0007 	.word	0xffff0007

08006770 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e042      	b.n	8006808 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006788:	2b00      	cmp	r3, #0
 800678a:	d106      	bne.n	800679a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7fa fb7d 	bl	8000e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2224      	movs	r2, #36	; 0x24
 800679e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0201 	bic.w	r2, r2, #1
 80067b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f82c 	bl	8006810 <UART_SetConfig>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d101      	bne.n	80067c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e022      	b.n	8006808 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fe8c 	bl	80074e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689a      	ldr	r2, [r3, #8]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0201 	orr.w	r2, r2, #1
 80067fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 ff13 	bl	800762c <UART_CheckIdleState>
 8006806:	4603      	mov	r3, r0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006814:	b092      	sub	sp, #72	; 0x48
 8006816:	af00      	add	r7, sp, #0
 8006818:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	431a      	orrs	r2, r3
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	431a      	orrs	r2, r3
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	4313      	orrs	r3, r2
 8006836:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	4bbe      	ldr	r3, [pc, #760]	; (8006b38 <UART_SetConfig+0x328>)
 8006840:	4013      	ands	r3, r2
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	6812      	ldr	r2, [r2, #0]
 8006846:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006848:	430b      	orrs	r3, r1
 800684a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4ab3      	ldr	r2, [pc, #716]	; (8006b3c <UART_SetConfig+0x32c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d004      	beq.n	800687c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006878:	4313      	orrs	r3, r2
 800687a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689a      	ldr	r2, [r3, #8]
 8006882:	4baf      	ldr	r3, [pc, #700]	; (8006b40 <UART_SetConfig+0x330>)
 8006884:	4013      	ands	r3, r2
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	6812      	ldr	r2, [r2, #0]
 800688a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800688c:	430b      	orrs	r3, r1
 800688e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006896:	f023 010f 	bic.w	r1, r3, #15
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4aa6      	ldr	r2, [pc, #664]	; (8006b44 <UART_SetConfig+0x334>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d177      	bne.n	80069a0 <UART_SetConfig+0x190>
 80068b0:	4ba5      	ldr	r3, [pc, #660]	; (8006b48 <UART_SetConfig+0x338>)
 80068b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068b8:	2b28      	cmp	r3, #40	; 0x28
 80068ba:	d86d      	bhi.n	8006998 <UART_SetConfig+0x188>
 80068bc:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <UART_SetConfig+0xb4>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	08006969 	.word	0x08006969
 80068c8:	08006999 	.word	0x08006999
 80068cc:	08006999 	.word	0x08006999
 80068d0:	08006999 	.word	0x08006999
 80068d4:	08006999 	.word	0x08006999
 80068d8:	08006999 	.word	0x08006999
 80068dc:	08006999 	.word	0x08006999
 80068e0:	08006999 	.word	0x08006999
 80068e4:	08006971 	.word	0x08006971
 80068e8:	08006999 	.word	0x08006999
 80068ec:	08006999 	.word	0x08006999
 80068f0:	08006999 	.word	0x08006999
 80068f4:	08006999 	.word	0x08006999
 80068f8:	08006999 	.word	0x08006999
 80068fc:	08006999 	.word	0x08006999
 8006900:	08006999 	.word	0x08006999
 8006904:	08006979 	.word	0x08006979
 8006908:	08006999 	.word	0x08006999
 800690c:	08006999 	.word	0x08006999
 8006910:	08006999 	.word	0x08006999
 8006914:	08006999 	.word	0x08006999
 8006918:	08006999 	.word	0x08006999
 800691c:	08006999 	.word	0x08006999
 8006920:	08006999 	.word	0x08006999
 8006924:	08006981 	.word	0x08006981
 8006928:	08006999 	.word	0x08006999
 800692c:	08006999 	.word	0x08006999
 8006930:	08006999 	.word	0x08006999
 8006934:	08006999 	.word	0x08006999
 8006938:	08006999 	.word	0x08006999
 800693c:	08006999 	.word	0x08006999
 8006940:	08006999 	.word	0x08006999
 8006944:	08006989 	.word	0x08006989
 8006948:	08006999 	.word	0x08006999
 800694c:	08006999 	.word	0x08006999
 8006950:	08006999 	.word	0x08006999
 8006954:	08006999 	.word	0x08006999
 8006958:	08006999 	.word	0x08006999
 800695c:	08006999 	.word	0x08006999
 8006960:	08006999 	.word	0x08006999
 8006964:	08006991 	.word	0x08006991
 8006968:	2301      	movs	r3, #1
 800696a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800696e:	e326      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006970:	2304      	movs	r3, #4
 8006972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006976:	e322      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006978:	2308      	movs	r3, #8
 800697a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800697e:	e31e      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006980:	2310      	movs	r3, #16
 8006982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006986:	e31a      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006988:	2320      	movs	r3, #32
 800698a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800698e:	e316      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006990:	2340      	movs	r3, #64	; 0x40
 8006992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006996:	e312      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006998:	2380      	movs	r3, #128	; 0x80
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800699e:	e30e      	b.n	8006fbe <UART_SetConfig+0x7ae>
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a69      	ldr	r2, [pc, #420]	; (8006b4c <UART_SetConfig+0x33c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d130      	bne.n	8006a0c <UART_SetConfig+0x1fc>
 80069aa:	4b67      	ldr	r3, [pc, #412]	; (8006b48 <UART_SetConfig+0x338>)
 80069ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	2b05      	cmp	r3, #5
 80069b4:	d826      	bhi.n	8006a04 <UART_SetConfig+0x1f4>
 80069b6:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <UART_SetConfig+0x1ac>)
 80069b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069bc:	080069d5 	.word	0x080069d5
 80069c0:	080069dd 	.word	0x080069dd
 80069c4:	080069e5 	.word	0x080069e5
 80069c8:	080069ed 	.word	0x080069ed
 80069cc:	080069f5 	.word	0x080069f5
 80069d0:	080069fd 	.word	0x080069fd
 80069d4:	2300      	movs	r3, #0
 80069d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069da:	e2f0      	b.n	8006fbe <UART_SetConfig+0x7ae>
 80069dc:	2304      	movs	r3, #4
 80069de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069e2:	e2ec      	b.n	8006fbe <UART_SetConfig+0x7ae>
 80069e4:	2308      	movs	r3, #8
 80069e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ea:	e2e8      	b.n	8006fbe <UART_SetConfig+0x7ae>
 80069ec:	2310      	movs	r3, #16
 80069ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069f2:	e2e4      	b.n	8006fbe <UART_SetConfig+0x7ae>
 80069f4:	2320      	movs	r3, #32
 80069f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069fa:	e2e0      	b.n	8006fbe <UART_SetConfig+0x7ae>
 80069fc:	2340      	movs	r3, #64	; 0x40
 80069fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a02:	e2dc      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006a04:	2380      	movs	r3, #128	; 0x80
 8006a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a0a:	e2d8      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a4f      	ldr	r2, [pc, #316]	; (8006b50 <UART_SetConfig+0x340>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d130      	bne.n	8006a78 <UART_SetConfig+0x268>
 8006a16:	4b4c      	ldr	r3, [pc, #304]	; (8006b48 <UART_SetConfig+0x338>)
 8006a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1a:	f003 0307 	and.w	r3, r3, #7
 8006a1e:	2b05      	cmp	r3, #5
 8006a20:	d826      	bhi.n	8006a70 <UART_SetConfig+0x260>
 8006a22:	a201      	add	r2, pc, #4	; (adr r2, 8006a28 <UART_SetConfig+0x218>)
 8006a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a28:	08006a41 	.word	0x08006a41
 8006a2c:	08006a49 	.word	0x08006a49
 8006a30:	08006a51 	.word	0x08006a51
 8006a34:	08006a59 	.word	0x08006a59
 8006a38:	08006a61 	.word	0x08006a61
 8006a3c:	08006a69 	.word	0x08006a69
 8006a40:	2300      	movs	r3, #0
 8006a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a46:	e2ba      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006a48:	2304      	movs	r3, #4
 8006a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a4e:	e2b6      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006a50:	2308      	movs	r3, #8
 8006a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a56:	e2b2      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006a58:	2310      	movs	r3, #16
 8006a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a5e:	e2ae      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006a60:	2320      	movs	r3, #32
 8006a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a66:	e2aa      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006a68:	2340      	movs	r3, #64	; 0x40
 8006a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a6e:	e2a6      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006a70:	2380      	movs	r3, #128	; 0x80
 8006a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a76:	e2a2      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a35      	ldr	r2, [pc, #212]	; (8006b54 <UART_SetConfig+0x344>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d130      	bne.n	8006ae4 <UART_SetConfig+0x2d4>
 8006a82:	4b31      	ldr	r3, [pc, #196]	; (8006b48 <UART_SetConfig+0x338>)
 8006a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	2b05      	cmp	r3, #5
 8006a8c:	d826      	bhi.n	8006adc <UART_SetConfig+0x2cc>
 8006a8e:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <UART_SetConfig+0x284>)
 8006a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a94:	08006aad 	.word	0x08006aad
 8006a98:	08006ab5 	.word	0x08006ab5
 8006a9c:	08006abd 	.word	0x08006abd
 8006aa0:	08006ac5 	.word	0x08006ac5
 8006aa4:	08006acd 	.word	0x08006acd
 8006aa8:	08006ad5 	.word	0x08006ad5
 8006aac:	2300      	movs	r3, #0
 8006aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ab2:	e284      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006ab4:	2304      	movs	r3, #4
 8006ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aba:	e280      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006abc:	2308      	movs	r3, #8
 8006abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ac2:	e27c      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006ac4:	2310      	movs	r3, #16
 8006ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aca:	e278      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006acc:	2320      	movs	r3, #32
 8006ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ad2:	e274      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006ad4:	2340      	movs	r3, #64	; 0x40
 8006ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ada:	e270      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006adc:	2380      	movs	r3, #128	; 0x80
 8006ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ae2:	e26c      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1b      	ldr	r2, [pc, #108]	; (8006b58 <UART_SetConfig+0x348>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d142      	bne.n	8006b74 <UART_SetConfig+0x364>
 8006aee:	4b16      	ldr	r3, [pc, #88]	; (8006b48 <UART_SetConfig+0x338>)
 8006af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af2:	f003 0307 	and.w	r3, r3, #7
 8006af6:	2b05      	cmp	r3, #5
 8006af8:	d838      	bhi.n	8006b6c <UART_SetConfig+0x35c>
 8006afa:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <UART_SetConfig+0x2f0>)
 8006afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b00:	08006b19 	.word	0x08006b19
 8006b04:	08006b21 	.word	0x08006b21
 8006b08:	08006b29 	.word	0x08006b29
 8006b0c:	08006b31 	.word	0x08006b31
 8006b10:	08006b5d 	.word	0x08006b5d
 8006b14:	08006b65 	.word	0x08006b65
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b1e:	e24e      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006b20:	2304      	movs	r3, #4
 8006b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b26:	e24a      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006b28:	2308      	movs	r3, #8
 8006b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b2e:	e246      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006b30:	2310      	movs	r3, #16
 8006b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b36:	e242      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006b38:	cfff69f3 	.word	0xcfff69f3
 8006b3c:	58000c00 	.word	0x58000c00
 8006b40:	11fff4ff 	.word	0x11fff4ff
 8006b44:	40011000 	.word	0x40011000
 8006b48:	58024400 	.word	0x58024400
 8006b4c:	40004400 	.word	0x40004400
 8006b50:	40004800 	.word	0x40004800
 8006b54:	40004c00 	.word	0x40004c00
 8006b58:	40005000 	.word	0x40005000
 8006b5c:	2320      	movs	r3, #32
 8006b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b62:	e22c      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006b64:	2340      	movs	r3, #64	; 0x40
 8006b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b6a:	e228      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006b6c:	2380      	movs	r3, #128	; 0x80
 8006b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b72:	e224      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4ab1      	ldr	r2, [pc, #708]	; (8006e40 <UART_SetConfig+0x630>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d176      	bne.n	8006c6c <UART_SetConfig+0x45c>
 8006b7e:	4bb1      	ldr	r3, [pc, #708]	; (8006e44 <UART_SetConfig+0x634>)
 8006b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b86:	2b28      	cmp	r3, #40	; 0x28
 8006b88:	d86c      	bhi.n	8006c64 <UART_SetConfig+0x454>
 8006b8a:	a201      	add	r2, pc, #4	; (adr r2, 8006b90 <UART_SetConfig+0x380>)
 8006b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b90:	08006c35 	.word	0x08006c35
 8006b94:	08006c65 	.word	0x08006c65
 8006b98:	08006c65 	.word	0x08006c65
 8006b9c:	08006c65 	.word	0x08006c65
 8006ba0:	08006c65 	.word	0x08006c65
 8006ba4:	08006c65 	.word	0x08006c65
 8006ba8:	08006c65 	.word	0x08006c65
 8006bac:	08006c65 	.word	0x08006c65
 8006bb0:	08006c3d 	.word	0x08006c3d
 8006bb4:	08006c65 	.word	0x08006c65
 8006bb8:	08006c65 	.word	0x08006c65
 8006bbc:	08006c65 	.word	0x08006c65
 8006bc0:	08006c65 	.word	0x08006c65
 8006bc4:	08006c65 	.word	0x08006c65
 8006bc8:	08006c65 	.word	0x08006c65
 8006bcc:	08006c65 	.word	0x08006c65
 8006bd0:	08006c45 	.word	0x08006c45
 8006bd4:	08006c65 	.word	0x08006c65
 8006bd8:	08006c65 	.word	0x08006c65
 8006bdc:	08006c65 	.word	0x08006c65
 8006be0:	08006c65 	.word	0x08006c65
 8006be4:	08006c65 	.word	0x08006c65
 8006be8:	08006c65 	.word	0x08006c65
 8006bec:	08006c65 	.word	0x08006c65
 8006bf0:	08006c4d 	.word	0x08006c4d
 8006bf4:	08006c65 	.word	0x08006c65
 8006bf8:	08006c65 	.word	0x08006c65
 8006bfc:	08006c65 	.word	0x08006c65
 8006c00:	08006c65 	.word	0x08006c65
 8006c04:	08006c65 	.word	0x08006c65
 8006c08:	08006c65 	.word	0x08006c65
 8006c0c:	08006c65 	.word	0x08006c65
 8006c10:	08006c55 	.word	0x08006c55
 8006c14:	08006c65 	.word	0x08006c65
 8006c18:	08006c65 	.word	0x08006c65
 8006c1c:	08006c65 	.word	0x08006c65
 8006c20:	08006c65 	.word	0x08006c65
 8006c24:	08006c65 	.word	0x08006c65
 8006c28:	08006c65 	.word	0x08006c65
 8006c2c:	08006c65 	.word	0x08006c65
 8006c30:	08006c5d 	.word	0x08006c5d
 8006c34:	2301      	movs	r3, #1
 8006c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c3a:	e1c0      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006c3c:	2304      	movs	r3, #4
 8006c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c42:	e1bc      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006c44:	2308      	movs	r3, #8
 8006c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c4a:	e1b8      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006c4c:	2310      	movs	r3, #16
 8006c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c52:	e1b4      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006c54:	2320      	movs	r3, #32
 8006c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c5a:	e1b0      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006c5c:	2340      	movs	r3, #64	; 0x40
 8006c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c62:	e1ac      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006c64:	2380      	movs	r3, #128	; 0x80
 8006c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c6a:	e1a8      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a75      	ldr	r2, [pc, #468]	; (8006e48 <UART_SetConfig+0x638>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d130      	bne.n	8006cd8 <UART_SetConfig+0x4c8>
 8006c76:	4b73      	ldr	r3, [pc, #460]	; (8006e44 <UART_SetConfig+0x634>)
 8006c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7a:	f003 0307 	and.w	r3, r3, #7
 8006c7e:	2b05      	cmp	r3, #5
 8006c80:	d826      	bhi.n	8006cd0 <UART_SetConfig+0x4c0>
 8006c82:	a201      	add	r2, pc, #4	; (adr r2, 8006c88 <UART_SetConfig+0x478>)
 8006c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c88:	08006ca1 	.word	0x08006ca1
 8006c8c:	08006ca9 	.word	0x08006ca9
 8006c90:	08006cb1 	.word	0x08006cb1
 8006c94:	08006cb9 	.word	0x08006cb9
 8006c98:	08006cc1 	.word	0x08006cc1
 8006c9c:	08006cc9 	.word	0x08006cc9
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ca6:	e18a      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006ca8:	2304      	movs	r3, #4
 8006caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cae:	e186      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006cb0:	2308      	movs	r3, #8
 8006cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cb6:	e182      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006cb8:	2310      	movs	r3, #16
 8006cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cbe:	e17e      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006cc0:	2320      	movs	r3, #32
 8006cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cc6:	e17a      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006cc8:	2340      	movs	r3, #64	; 0x40
 8006cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cce:	e176      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006cd0:	2380      	movs	r3, #128	; 0x80
 8006cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cd6:	e172      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a5b      	ldr	r2, [pc, #364]	; (8006e4c <UART_SetConfig+0x63c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d130      	bne.n	8006d44 <UART_SetConfig+0x534>
 8006ce2:	4b58      	ldr	r3, [pc, #352]	; (8006e44 <UART_SetConfig+0x634>)
 8006ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce6:	f003 0307 	and.w	r3, r3, #7
 8006cea:	2b05      	cmp	r3, #5
 8006cec:	d826      	bhi.n	8006d3c <UART_SetConfig+0x52c>
 8006cee:	a201      	add	r2, pc, #4	; (adr r2, 8006cf4 <UART_SetConfig+0x4e4>)
 8006cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf4:	08006d0d 	.word	0x08006d0d
 8006cf8:	08006d15 	.word	0x08006d15
 8006cfc:	08006d1d 	.word	0x08006d1d
 8006d00:	08006d25 	.word	0x08006d25
 8006d04:	08006d2d 	.word	0x08006d2d
 8006d08:	08006d35 	.word	0x08006d35
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d12:	e154      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006d14:	2304      	movs	r3, #4
 8006d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d1a:	e150      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006d1c:	2308      	movs	r3, #8
 8006d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d22:	e14c      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006d24:	2310      	movs	r3, #16
 8006d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d2a:	e148      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006d2c:	2320      	movs	r3, #32
 8006d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d32:	e144      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006d34:	2340      	movs	r3, #64	; 0x40
 8006d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d3a:	e140      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006d3c:	2380      	movs	r3, #128	; 0x80
 8006d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d42:	e13c      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a41      	ldr	r2, [pc, #260]	; (8006e50 <UART_SetConfig+0x640>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	f040 8082 	bne.w	8006e54 <UART_SetConfig+0x644>
 8006d50:	4b3c      	ldr	r3, [pc, #240]	; (8006e44 <UART_SetConfig+0x634>)
 8006d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d58:	2b28      	cmp	r3, #40	; 0x28
 8006d5a:	d86d      	bhi.n	8006e38 <UART_SetConfig+0x628>
 8006d5c:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <UART_SetConfig+0x554>)
 8006d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d62:	bf00      	nop
 8006d64:	08006e09 	.word	0x08006e09
 8006d68:	08006e39 	.word	0x08006e39
 8006d6c:	08006e39 	.word	0x08006e39
 8006d70:	08006e39 	.word	0x08006e39
 8006d74:	08006e39 	.word	0x08006e39
 8006d78:	08006e39 	.word	0x08006e39
 8006d7c:	08006e39 	.word	0x08006e39
 8006d80:	08006e39 	.word	0x08006e39
 8006d84:	08006e11 	.word	0x08006e11
 8006d88:	08006e39 	.word	0x08006e39
 8006d8c:	08006e39 	.word	0x08006e39
 8006d90:	08006e39 	.word	0x08006e39
 8006d94:	08006e39 	.word	0x08006e39
 8006d98:	08006e39 	.word	0x08006e39
 8006d9c:	08006e39 	.word	0x08006e39
 8006da0:	08006e39 	.word	0x08006e39
 8006da4:	08006e19 	.word	0x08006e19
 8006da8:	08006e39 	.word	0x08006e39
 8006dac:	08006e39 	.word	0x08006e39
 8006db0:	08006e39 	.word	0x08006e39
 8006db4:	08006e39 	.word	0x08006e39
 8006db8:	08006e39 	.word	0x08006e39
 8006dbc:	08006e39 	.word	0x08006e39
 8006dc0:	08006e39 	.word	0x08006e39
 8006dc4:	08006e21 	.word	0x08006e21
 8006dc8:	08006e39 	.word	0x08006e39
 8006dcc:	08006e39 	.word	0x08006e39
 8006dd0:	08006e39 	.word	0x08006e39
 8006dd4:	08006e39 	.word	0x08006e39
 8006dd8:	08006e39 	.word	0x08006e39
 8006ddc:	08006e39 	.word	0x08006e39
 8006de0:	08006e39 	.word	0x08006e39
 8006de4:	08006e29 	.word	0x08006e29
 8006de8:	08006e39 	.word	0x08006e39
 8006dec:	08006e39 	.word	0x08006e39
 8006df0:	08006e39 	.word	0x08006e39
 8006df4:	08006e39 	.word	0x08006e39
 8006df8:	08006e39 	.word	0x08006e39
 8006dfc:	08006e39 	.word	0x08006e39
 8006e00:	08006e39 	.word	0x08006e39
 8006e04:	08006e31 	.word	0x08006e31
 8006e08:	2301      	movs	r3, #1
 8006e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e0e:	e0d6      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006e10:	2304      	movs	r3, #4
 8006e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e16:	e0d2      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006e18:	2308      	movs	r3, #8
 8006e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e1e:	e0ce      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006e20:	2310      	movs	r3, #16
 8006e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e26:	e0ca      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006e28:	2320      	movs	r3, #32
 8006e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e2e:	e0c6      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006e30:	2340      	movs	r3, #64	; 0x40
 8006e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e36:	e0c2      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006e38:	2380      	movs	r3, #128	; 0x80
 8006e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e3e:	e0be      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006e40:	40011400 	.word	0x40011400
 8006e44:	58024400 	.word	0x58024400
 8006e48:	40007800 	.word	0x40007800
 8006e4c:	40007c00 	.word	0x40007c00
 8006e50:	40011800 	.word	0x40011800
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4aad      	ldr	r2, [pc, #692]	; (8007110 <UART_SetConfig+0x900>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d176      	bne.n	8006f4c <UART_SetConfig+0x73c>
 8006e5e:	4bad      	ldr	r3, [pc, #692]	; (8007114 <UART_SetConfig+0x904>)
 8006e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e66:	2b28      	cmp	r3, #40	; 0x28
 8006e68:	d86c      	bhi.n	8006f44 <UART_SetConfig+0x734>
 8006e6a:	a201      	add	r2, pc, #4	; (adr r2, 8006e70 <UART_SetConfig+0x660>)
 8006e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e70:	08006f15 	.word	0x08006f15
 8006e74:	08006f45 	.word	0x08006f45
 8006e78:	08006f45 	.word	0x08006f45
 8006e7c:	08006f45 	.word	0x08006f45
 8006e80:	08006f45 	.word	0x08006f45
 8006e84:	08006f45 	.word	0x08006f45
 8006e88:	08006f45 	.word	0x08006f45
 8006e8c:	08006f45 	.word	0x08006f45
 8006e90:	08006f1d 	.word	0x08006f1d
 8006e94:	08006f45 	.word	0x08006f45
 8006e98:	08006f45 	.word	0x08006f45
 8006e9c:	08006f45 	.word	0x08006f45
 8006ea0:	08006f45 	.word	0x08006f45
 8006ea4:	08006f45 	.word	0x08006f45
 8006ea8:	08006f45 	.word	0x08006f45
 8006eac:	08006f45 	.word	0x08006f45
 8006eb0:	08006f25 	.word	0x08006f25
 8006eb4:	08006f45 	.word	0x08006f45
 8006eb8:	08006f45 	.word	0x08006f45
 8006ebc:	08006f45 	.word	0x08006f45
 8006ec0:	08006f45 	.word	0x08006f45
 8006ec4:	08006f45 	.word	0x08006f45
 8006ec8:	08006f45 	.word	0x08006f45
 8006ecc:	08006f45 	.word	0x08006f45
 8006ed0:	08006f2d 	.word	0x08006f2d
 8006ed4:	08006f45 	.word	0x08006f45
 8006ed8:	08006f45 	.word	0x08006f45
 8006edc:	08006f45 	.word	0x08006f45
 8006ee0:	08006f45 	.word	0x08006f45
 8006ee4:	08006f45 	.word	0x08006f45
 8006ee8:	08006f45 	.word	0x08006f45
 8006eec:	08006f45 	.word	0x08006f45
 8006ef0:	08006f35 	.word	0x08006f35
 8006ef4:	08006f45 	.word	0x08006f45
 8006ef8:	08006f45 	.word	0x08006f45
 8006efc:	08006f45 	.word	0x08006f45
 8006f00:	08006f45 	.word	0x08006f45
 8006f04:	08006f45 	.word	0x08006f45
 8006f08:	08006f45 	.word	0x08006f45
 8006f0c:	08006f45 	.word	0x08006f45
 8006f10:	08006f3d 	.word	0x08006f3d
 8006f14:	2301      	movs	r3, #1
 8006f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f1a:	e050      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006f1c:	2304      	movs	r3, #4
 8006f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f22:	e04c      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006f24:	2308      	movs	r3, #8
 8006f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f2a:	e048      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006f2c:	2310      	movs	r3, #16
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f32:	e044      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006f34:	2320      	movs	r3, #32
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3a:	e040      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006f3c:	2340      	movs	r3, #64	; 0x40
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f42:	e03c      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006f44:	2380      	movs	r3, #128	; 0x80
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4a:	e038      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a71      	ldr	r2, [pc, #452]	; (8007118 <UART_SetConfig+0x908>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d130      	bne.n	8006fb8 <UART_SetConfig+0x7a8>
 8006f56:	4b6f      	ldr	r3, [pc, #444]	; (8007114 <UART_SetConfig+0x904>)
 8006f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f5a:	f003 0307 	and.w	r3, r3, #7
 8006f5e:	2b05      	cmp	r3, #5
 8006f60:	d826      	bhi.n	8006fb0 <UART_SetConfig+0x7a0>
 8006f62:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <UART_SetConfig+0x758>)
 8006f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f68:	08006f81 	.word	0x08006f81
 8006f6c:	08006f89 	.word	0x08006f89
 8006f70:	08006f91 	.word	0x08006f91
 8006f74:	08006f99 	.word	0x08006f99
 8006f78:	08006fa1 	.word	0x08006fa1
 8006f7c:	08006fa9 	.word	0x08006fa9
 8006f80:	2302      	movs	r3, #2
 8006f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f86:	e01a      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006f88:	2304      	movs	r3, #4
 8006f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8e:	e016      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006f90:	2308      	movs	r3, #8
 8006f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f96:	e012      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006f98:	2310      	movs	r3, #16
 8006f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f9e:	e00e      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006fa0:	2320      	movs	r3, #32
 8006fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fa6:	e00a      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006fa8:	2340      	movs	r3, #64	; 0x40
 8006faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fae:	e006      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006fb0:	2380      	movs	r3, #128	; 0x80
 8006fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fb6:	e002      	b.n	8006fbe <UART_SetConfig+0x7ae>
 8006fb8:	2380      	movs	r3, #128	; 0x80
 8006fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a55      	ldr	r2, [pc, #340]	; (8007118 <UART_SetConfig+0x908>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	f040 80f8 	bne.w	80071ba <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006fca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006fce:	2b20      	cmp	r3, #32
 8006fd0:	dc46      	bgt.n	8007060 <UART_SetConfig+0x850>
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	db75      	blt.n	80070c2 <UART_SetConfig+0x8b2>
 8006fd6:	3b02      	subs	r3, #2
 8006fd8:	2b1e      	cmp	r3, #30
 8006fda:	d872      	bhi.n	80070c2 <UART_SetConfig+0x8b2>
 8006fdc:	a201      	add	r2, pc, #4	; (adr r2, 8006fe4 <UART_SetConfig+0x7d4>)
 8006fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe2:	bf00      	nop
 8006fe4:	08007067 	.word	0x08007067
 8006fe8:	080070c3 	.word	0x080070c3
 8006fec:	0800706f 	.word	0x0800706f
 8006ff0:	080070c3 	.word	0x080070c3
 8006ff4:	080070c3 	.word	0x080070c3
 8006ff8:	080070c3 	.word	0x080070c3
 8006ffc:	0800707f 	.word	0x0800707f
 8007000:	080070c3 	.word	0x080070c3
 8007004:	080070c3 	.word	0x080070c3
 8007008:	080070c3 	.word	0x080070c3
 800700c:	080070c3 	.word	0x080070c3
 8007010:	080070c3 	.word	0x080070c3
 8007014:	080070c3 	.word	0x080070c3
 8007018:	080070c3 	.word	0x080070c3
 800701c:	0800708f 	.word	0x0800708f
 8007020:	080070c3 	.word	0x080070c3
 8007024:	080070c3 	.word	0x080070c3
 8007028:	080070c3 	.word	0x080070c3
 800702c:	080070c3 	.word	0x080070c3
 8007030:	080070c3 	.word	0x080070c3
 8007034:	080070c3 	.word	0x080070c3
 8007038:	080070c3 	.word	0x080070c3
 800703c:	080070c3 	.word	0x080070c3
 8007040:	080070c3 	.word	0x080070c3
 8007044:	080070c3 	.word	0x080070c3
 8007048:	080070c3 	.word	0x080070c3
 800704c:	080070c3 	.word	0x080070c3
 8007050:	080070c3 	.word	0x080070c3
 8007054:	080070c3 	.word	0x080070c3
 8007058:	080070c3 	.word	0x080070c3
 800705c:	080070b5 	.word	0x080070b5
 8007060:	2b40      	cmp	r3, #64	; 0x40
 8007062:	d02a      	beq.n	80070ba <UART_SetConfig+0x8aa>
 8007064:	e02d      	b.n	80070c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007066:	f7fe fe0f 	bl	8005c88 <HAL_RCCEx_GetD3PCLK1Freq>
 800706a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800706c:	e02f      	b.n	80070ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800706e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007072:	4618      	mov	r0, r3
 8007074:	f7fe fe1e 	bl	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800707c:	e027      	b.n	80070ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800707e:	f107 0318 	add.w	r3, r7, #24
 8007082:	4618      	mov	r0, r3
 8007084:	f7fe ff6a 	bl	8005f5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800708c:	e01f      	b.n	80070ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800708e:	4b21      	ldr	r3, [pc, #132]	; (8007114 <UART_SetConfig+0x904>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0320 	and.w	r3, r3, #32
 8007096:	2b00      	cmp	r3, #0
 8007098:	d009      	beq.n	80070ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800709a:	4b1e      	ldr	r3, [pc, #120]	; (8007114 <UART_SetConfig+0x904>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	08db      	lsrs	r3, r3, #3
 80070a0:	f003 0303 	and.w	r3, r3, #3
 80070a4:	4a1d      	ldr	r2, [pc, #116]	; (800711c <UART_SetConfig+0x90c>)
 80070a6:	fa22 f303 	lsr.w	r3, r2, r3
 80070aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070ac:	e00f      	b.n	80070ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80070ae:	4b1b      	ldr	r3, [pc, #108]	; (800711c <UART_SetConfig+0x90c>)
 80070b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070b2:	e00c      	b.n	80070ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80070b4:	4b1a      	ldr	r3, [pc, #104]	; (8007120 <UART_SetConfig+0x910>)
 80070b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070b8:	e009      	b.n	80070ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070c0:	e005      	b.n	80070ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80070c2:	2300      	movs	r3, #0
 80070c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80070cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 81ee 	beq.w	80074b2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	4a12      	ldr	r2, [pc, #72]	; (8007124 <UART_SetConfig+0x914>)
 80070dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070e0:	461a      	mov	r2, r3
 80070e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80070e8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	4613      	mov	r3, r2
 80070f0:	005b      	lsls	r3, r3, #1
 80070f2:	4413      	add	r3, r2
 80070f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d305      	bcc.n	8007106 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007102:	429a      	cmp	r2, r3
 8007104:	d910      	bls.n	8007128 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800710c:	e1d1      	b.n	80074b2 <UART_SetConfig+0xca2>
 800710e:	bf00      	nop
 8007110:	40011c00 	.word	0x40011c00
 8007114:	58024400 	.word	0x58024400
 8007118:	58000c00 	.word	0x58000c00
 800711c:	03d09000 	.word	0x03d09000
 8007120:	003d0900 	.word	0x003d0900
 8007124:	08007ad8 	.word	0x08007ad8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800712a:	2200      	movs	r2, #0
 800712c:	60bb      	str	r3, [r7, #8]
 800712e:	60fa      	str	r2, [r7, #12]
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007134:	4ac0      	ldr	r2, [pc, #768]	; (8007438 <UART_SetConfig+0xc28>)
 8007136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800713a:	b29b      	uxth	r3, r3
 800713c:	2200      	movs	r2, #0
 800713e:	603b      	str	r3, [r7, #0]
 8007140:	607a      	str	r2, [r7, #4]
 8007142:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007146:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800714a:	f7f9 f8df 	bl	800030c <__aeabi_uldivmod>
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	4610      	mov	r0, r2
 8007154:	4619      	mov	r1, r3
 8007156:	f04f 0200 	mov.w	r2, #0
 800715a:	f04f 0300 	mov.w	r3, #0
 800715e:	020b      	lsls	r3, r1, #8
 8007160:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007164:	0202      	lsls	r2, r0, #8
 8007166:	6979      	ldr	r1, [r7, #20]
 8007168:	6849      	ldr	r1, [r1, #4]
 800716a:	0849      	lsrs	r1, r1, #1
 800716c:	2000      	movs	r0, #0
 800716e:	460c      	mov	r4, r1
 8007170:	4605      	mov	r5, r0
 8007172:	eb12 0804 	adds.w	r8, r2, r4
 8007176:	eb43 0905 	adc.w	r9, r3, r5
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	469a      	mov	sl, r3
 8007182:	4693      	mov	fp, r2
 8007184:	4652      	mov	r2, sl
 8007186:	465b      	mov	r3, fp
 8007188:	4640      	mov	r0, r8
 800718a:	4649      	mov	r1, r9
 800718c:	f7f9 f8be 	bl	800030c <__aeabi_uldivmod>
 8007190:	4602      	mov	r2, r0
 8007192:	460b      	mov	r3, r1
 8007194:	4613      	mov	r3, r2
 8007196:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800719e:	d308      	bcc.n	80071b2 <UART_SetConfig+0x9a2>
 80071a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071a6:	d204      	bcs.n	80071b2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071ae:	60da      	str	r2, [r3, #12]
 80071b0:	e17f      	b.n	80074b2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80071b8:	e17b      	b.n	80074b2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071c2:	f040 80bd 	bne.w	8007340 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80071c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	dc48      	bgt.n	8007260 <UART_SetConfig+0xa50>
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	db7b      	blt.n	80072ca <UART_SetConfig+0xaba>
 80071d2:	2b20      	cmp	r3, #32
 80071d4:	d879      	bhi.n	80072ca <UART_SetConfig+0xaba>
 80071d6:	a201      	add	r2, pc, #4	; (adr r2, 80071dc <UART_SetConfig+0x9cc>)
 80071d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071dc:	08007267 	.word	0x08007267
 80071e0:	0800726f 	.word	0x0800726f
 80071e4:	080072cb 	.word	0x080072cb
 80071e8:	080072cb 	.word	0x080072cb
 80071ec:	08007277 	.word	0x08007277
 80071f0:	080072cb 	.word	0x080072cb
 80071f4:	080072cb 	.word	0x080072cb
 80071f8:	080072cb 	.word	0x080072cb
 80071fc:	08007287 	.word	0x08007287
 8007200:	080072cb 	.word	0x080072cb
 8007204:	080072cb 	.word	0x080072cb
 8007208:	080072cb 	.word	0x080072cb
 800720c:	080072cb 	.word	0x080072cb
 8007210:	080072cb 	.word	0x080072cb
 8007214:	080072cb 	.word	0x080072cb
 8007218:	080072cb 	.word	0x080072cb
 800721c:	08007297 	.word	0x08007297
 8007220:	080072cb 	.word	0x080072cb
 8007224:	080072cb 	.word	0x080072cb
 8007228:	080072cb 	.word	0x080072cb
 800722c:	080072cb 	.word	0x080072cb
 8007230:	080072cb 	.word	0x080072cb
 8007234:	080072cb 	.word	0x080072cb
 8007238:	080072cb 	.word	0x080072cb
 800723c:	080072cb 	.word	0x080072cb
 8007240:	080072cb 	.word	0x080072cb
 8007244:	080072cb 	.word	0x080072cb
 8007248:	080072cb 	.word	0x080072cb
 800724c:	080072cb 	.word	0x080072cb
 8007250:	080072cb 	.word	0x080072cb
 8007254:	080072cb 	.word	0x080072cb
 8007258:	080072cb 	.word	0x080072cb
 800725c:	080072bd 	.word	0x080072bd
 8007260:	2b40      	cmp	r3, #64	; 0x40
 8007262:	d02e      	beq.n	80072c2 <UART_SetConfig+0xab2>
 8007264:	e031      	b.n	80072ca <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007266:	f7fd f9c3 	bl	80045f0 <HAL_RCC_GetPCLK1Freq>
 800726a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800726c:	e033      	b.n	80072d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800726e:	f7fd f9d5 	bl	800461c <HAL_RCC_GetPCLK2Freq>
 8007272:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007274:	e02f      	b.n	80072d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800727a:	4618      	mov	r0, r3
 800727c:	f7fe fd1a 	bl	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007282:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007284:	e027      	b.n	80072d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007286:	f107 0318 	add.w	r3, r7, #24
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe fe66 	bl	8005f5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007294:	e01f      	b.n	80072d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007296:	4b69      	ldr	r3, [pc, #420]	; (800743c <UART_SetConfig+0xc2c>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0320 	and.w	r3, r3, #32
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d009      	beq.n	80072b6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80072a2:	4b66      	ldr	r3, [pc, #408]	; (800743c <UART_SetConfig+0xc2c>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	08db      	lsrs	r3, r3, #3
 80072a8:	f003 0303 	and.w	r3, r3, #3
 80072ac:	4a64      	ldr	r2, [pc, #400]	; (8007440 <UART_SetConfig+0xc30>)
 80072ae:	fa22 f303 	lsr.w	r3, r2, r3
 80072b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80072b4:	e00f      	b.n	80072d6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80072b6:	4b62      	ldr	r3, [pc, #392]	; (8007440 <UART_SetConfig+0xc30>)
 80072b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072ba:	e00c      	b.n	80072d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80072bc:	4b61      	ldr	r3, [pc, #388]	; (8007444 <UART_SetConfig+0xc34>)
 80072be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072c0:	e009      	b.n	80072d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072c8:	e005      	b.n	80072d6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80072d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f000 80ea 	beq.w	80074b2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	4a55      	ldr	r2, [pc, #340]	; (8007438 <UART_SetConfig+0xc28>)
 80072e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072e8:	461a      	mov	r2, r3
 80072ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80072f0:	005a      	lsls	r2, r3, #1
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	085b      	lsrs	r3, r3, #1
 80072f8:	441a      	add	r2, r3
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007302:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007306:	2b0f      	cmp	r3, #15
 8007308:	d916      	bls.n	8007338 <UART_SetConfig+0xb28>
 800730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007310:	d212      	bcs.n	8007338 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007314:	b29b      	uxth	r3, r3
 8007316:	f023 030f 	bic.w	r3, r3, #15
 800731a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800731c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731e:	085b      	lsrs	r3, r3, #1
 8007320:	b29b      	uxth	r3, r3
 8007322:	f003 0307 	and.w	r3, r3, #7
 8007326:	b29a      	uxth	r2, r3
 8007328:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800732a:	4313      	orrs	r3, r2
 800732c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007334:	60da      	str	r2, [r3, #12]
 8007336:	e0bc      	b.n	80074b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800733e:	e0b8      	b.n	80074b2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007340:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007344:	2b20      	cmp	r3, #32
 8007346:	dc4b      	bgt.n	80073e0 <UART_SetConfig+0xbd0>
 8007348:	2b00      	cmp	r3, #0
 800734a:	f2c0 8087 	blt.w	800745c <UART_SetConfig+0xc4c>
 800734e:	2b20      	cmp	r3, #32
 8007350:	f200 8084 	bhi.w	800745c <UART_SetConfig+0xc4c>
 8007354:	a201      	add	r2, pc, #4	; (adr r2, 800735c <UART_SetConfig+0xb4c>)
 8007356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735a:	bf00      	nop
 800735c:	080073e7 	.word	0x080073e7
 8007360:	080073ef 	.word	0x080073ef
 8007364:	0800745d 	.word	0x0800745d
 8007368:	0800745d 	.word	0x0800745d
 800736c:	080073f7 	.word	0x080073f7
 8007370:	0800745d 	.word	0x0800745d
 8007374:	0800745d 	.word	0x0800745d
 8007378:	0800745d 	.word	0x0800745d
 800737c:	08007407 	.word	0x08007407
 8007380:	0800745d 	.word	0x0800745d
 8007384:	0800745d 	.word	0x0800745d
 8007388:	0800745d 	.word	0x0800745d
 800738c:	0800745d 	.word	0x0800745d
 8007390:	0800745d 	.word	0x0800745d
 8007394:	0800745d 	.word	0x0800745d
 8007398:	0800745d 	.word	0x0800745d
 800739c:	08007417 	.word	0x08007417
 80073a0:	0800745d 	.word	0x0800745d
 80073a4:	0800745d 	.word	0x0800745d
 80073a8:	0800745d 	.word	0x0800745d
 80073ac:	0800745d 	.word	0x0800745d
 80073b0:	0800745d 	.word	0x0800745d
 80073b4:	0800745d 	.word	0x0800745d
 80073b8:	0800745d 	.word	0x0800745d
 80073bc:	0800745d 	.word	0x0800745d
 80073c0:	0800745d 	.word	0x0800745d
 80073c4:	0800745d 	.word	0x0800745d
 80073c8:	0800745d 	.word	0x0800745d
 80073cc:	0800745d 	.word	0x0800745d
 80073d0:	0800745d 	.word	0x0800745d
 80073d4:	0800745d 	.word	0x0800745d
 80073d8:	0800745d 	.word	0x0800745d
 80073dc:	0800744f 	.word	0x0800744f
 80073e0:	2b40      	cmp	r3, #64	; 0x40
 80073e2:	d037      	beq.n	8007454 <UART_SetConfig+0xc44>
 80073e4:	e03a      	b.n	800745c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073e6:	f7fd f903 	bl	80045f0 <HAL_RCC_GetPCLK1Freq>
 80073ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80073ec:	e03c      	b.n	8007468 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073ee:	f7fd f915 	bl	800461c <HAL_RCC_GetPCLK2Freq>
 80073f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80073f4:	e038      	b.n	8007468 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fe fc5a 	bl	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007404:	e030      	b.n	8007468 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007406:	f107 0318 	add.w	r3, r7, #24
 800740a:	4618      	mov	r0, r3
 800740c:	f7fe fda6 	bl	8005f5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007414:	e028      	b.n	8007468 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007416:	4b09      	ldr	r3, [pc, #36]	; (800743c <UART_SetConfig+0xc2c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0320 	and.w	r3, r3, #32
 800741e:	2b00      	cmp	r3, #0
 8007420:	d012      	beq.n	8007448 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007422:	4b06      	ldr	r3, [pc, #24]	; (800743c <UART_SetConfig+0xc2c>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	08db      	lsrs	r3, r3, #3
 8007428:	f003 0303 	and.w	r3, r3, #3
 800742c:	4a04      	ldr	r2, [pc, #16]	; (8007440 <UART_SetConfig+0xc30>)
 800742e:	fa22 f303 	lsr.w	r3, r2, r3
 8007432:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007434:	e018      	b.n	8007468 <UART_SetConfig+0xc58>
 8007436:	bf00      	nop
 8007438:	08007ad8 	.word	0x08007ad8
 800743c:	58024400 	.word	0x58024400
 8007440:	03d09000 	.word	0x03d09000
 8007444:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007448:	4b24      	ldr	r3, [pc, #144]	; (80074dc <UART_SetConfig+0xccc>)
 800744a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800744c:	e00c      	b.n	8007468 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800744e:	4b24      	ldr	r3, [pc, #144]	; (80074e0 <UART_SetConfig+0xcd0>)
 8007450:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007452:	e009      	b.n	8007468 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007454:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007458:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800745a:	e005      	b.n	8007468 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800745c:	2300      	movs	r3, #0
 800745e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007466:	bf00      	nop
    }

    if (pclk != 0U)
 8007468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800746a:	2b00      	cmp	r3, #0
 800746c:	d021      	beq.n	80074b2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	4a1c      	ldr	r2, [pc, #112]	; (80074e4 <UART_SetConfig+0xcd4>)
 8007474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007478:	461a      	mov	r2, r3
 800747a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800747c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	085b      	lsrs	r3, r3, #1
 8007486:	441a      	add	r2, r3
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007490:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007494:	2b0f      	cmp	r3, #15
 8007496:	d909      	bls.n	80074ac <UART_SetConfig+0xc9c>
 8007498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800749e:	d205      	bcs.n	80074ac <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	60da      	str	r2, [r3, #12]
 80074aa:	e002      	b.n	80074b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2201      	movs	r2, #1
 80074be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2200      	movs	r2, #0
 80074c6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2200      	movs	r2, #0
 80074cc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80074ce:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3748      	adds	r7, #72	; 0x48
 80074d6:	46bd      	mov	sp, r7
 80074d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074dc:	03d09000 	.word	0x03d09000
 80074e0:	003d0900 	.word	0x003d0900
 80074e4:	08007ad8 	.word	0x08007ad8

080074e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00a      	beq.n	8007512 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	430a      	orrs	r2, r1
 8007532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007538:	f003 0304 	and.w	r3, r3, #4
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755a:	f003 0308 	and.w	r3, r3, #8
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00a      	beq.n	8007578 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757c:	f003 0310 	and.w	r3, r3, #16
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00a      	beq.n	800759a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759e:	f003 0320 	and.w	r3, r3, #32
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00a      	beq.n	80075bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	430a      	orrs	r2, r1
 80075ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d01a      	beq.n	80075fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075e6:	d10a      	bne.n	80075fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	430a      	orrs	r2, r1
 80075fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00a      	beq.n	8007620 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	430a      	orrs	r2, r1
 800761e:	605a      	str	r2, [r3, #4]
  }
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af02      	add	r7, sp, #8
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800763c:	f7f9 fde2 	bl	8001204 <HAL_GetTick>
 8007640:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0308 	and.w	r3, r3, #8
 800764c:	2b08      	cmp	r3, #8
 800764e:	d10e      	bne.n	800766e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007650:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f82f 	bl	80076c2 <UART_WaitOnFlagUntilTimeout>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e025      	b.n	80076ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0304 	and.w	r3, r3, #4
 8007678:	2b04      	cmp	r3, #4
 800767a:	d10e      	bne.n	800769a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800767c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f819 	bl	80076c2 <UART_WaitOnFlagUntilTimeout>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e00f      	b.n	80076ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2220      	movs	r2, #32
 800769e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b09c      	sub	sp, #112	; 0x70
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	60b9      	str	r1, [r7, #8]
 80076cc:	603b      	str	r3, [r7, #0]
 80076ce:	4613      	mov	r3, r2
 80076d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076d2:	e0a9      	b.n	8007828 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076da:	f000 80a5 	beq.w	8007828 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076de:	f7f9 fd91 	bl	8001204 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d302      	bcc.n	80076f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80076ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d140      	bne.n	8007776 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007704:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007708:	667b      	str	r3, [r7, #100]	; 0x64
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007712:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007714:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007716:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007718:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800771a:	e841 2300 	strex	r3, r2, [r1]
 800771e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1e6      	bne.n	80076f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	3308      	adds	r3, #8
 800772c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007730:	e853 3f00 	ldrex	r3, [r3]
 8007734:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007738:	f023 0301 	bic.w	r3, r3, #1
 800773c:	663b      	str	r3, [r7, #96]	; 0x60
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	3308      	adds	r3, #8
 8007744:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007746:	64ba      	str	r2, [r7, #72]	; 0x48
 8007748:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800774c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800774e:	e841 2300 	strex	r3, r2, [r1]
 8007752:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1e5      	bne.n	8007726 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2220      	movs	r2, #32
 800775e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2220      	movs	r2, #32
 8007766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e069      	b.n	800784a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0304 	and.w	r3, r3, #4
 8007780:	2b00      	cmp	r3, #0
 8007782:	d051      	beq.n	8007828 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	69db      	ldr	r3, [r3, #28]
 800778a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800778e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007792:	d149      	bne.n	8007828 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800779c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a6:	e853 3f00 	ldrex	r3, [r3]
 80077aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	461a      	mov	r2, r3
 80077ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077bc:	637b      	str	r3, [r7, #52]	; 0x34
 80077be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077c4:	e841 2300 	strex	r3, r2, [r1]
 80077c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1e6      	bne.n	800779e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3308      	adds	r3, #8
 80077d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	e853 3f00 	ldrex	r3, [r3]
 80077de:	613b      	str	r3, [r7, #16]
   return(result);
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	f023 0301 	bic.w	r3, r3, #1
 80077e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3308      	adds	r3, #8
 80077ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80077f0:	623a      	str	r2, [r7, #32]
 80077f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f4:	69f9      	ldr	r1, [r7, #28]
 80077f6:	6a3a      	ldr	r2, [r7, #32]
 80077f8:	e841 2300 	strex	r3, r2, [r1]
 80077fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e5      	bne.n	80077d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2220      	movs	r2, #32
 8007808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2220      	movs	r2, #32
 8007810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2220      	movs	r2, #32
 8007818:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e010      	b.n	800784a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	69da      	ldr	r2, [r3, #28]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	4013      	ands	r3, r2
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	429a      	cmp	r2, r3
 8007836:	bf0c      	ite	eq
 8007838:	2301      	moveq	r3, #1
 800783a:	2300      	movne	r3, #0
 800783c:	b2db      	uxtb	r3, r3
 800783e:	461a      	mov	r2, r3
 8007840:	79fb      	ldrb	r3, [r7, #7]
 8007842:	429a      	cmp	r2, r3
 8007844:	f43f af46 	beq.w	80076d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3770      	adds	r7, #112	; 0x70
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007852:	b480      	push	{r7}
 8007854:	b085      	sub	sp, #20
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007860:	2b01      	cmp	r3, #1
 8007862:	d101      	bne.n	8007868 <HAL_UARTEx_DisableFifoMode+0x16>
 8007864:	2302      	movs	r3, #2
 8007866:	e027      	b.n	80078b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2224      	movs	r2, #36	; 0x24
 8007874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f022 0201 	bic.w	r2, r2, #1
 800788e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007896:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2220      	movs	r2, #32
 80078aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d101      	bne.n	80078dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078d8:	2302      	movs	r3, #2
 80078da:	e02d      	b.n	8007938 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2224      	movs	r2, #36	; 0x24
 80078e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f022 0201 	bic.w	r2, r2, #1
 8007902:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	430a      	orrs	r2, r1
 8007916:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f84f 	bl	80079bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2220      	movs	r2, #32
 800792a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007950:	2b01      	cmp	r3, #1
 8007952:	d101      	bne.n	8007958 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007954:	2302      	movs	r3, #2
 8007956:	e02d      	b.n	80079b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2224      	movs	r2, #36	; 0x24
 8007964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0201 	bic.w	r2, r2, #1
 800797e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	430a      	orrs	r2, r1
 8007992:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f811 	bl	80079bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d108      	bne.n	80079de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80079dc:	e031      	b.n	8007a42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80079de:	2310      	movs	r3, #16
 80079e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80079e2:	2310      	movs	r3, #16
 80079e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	0e5b      	lsrs	r3, r3, #25
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	f003 0307 	and.w	r3, r3, #7
 80079f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	0f5b      	lsrs	r3, r3, #29
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	f003 0307 	and.w	r3, r3, #7
 8007a04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
 8007a08:	7b3a      	ldrb	r2, [r7, #12]
 8007a0a:	4911      	ldr	r1, [pc, #68]	; (8007a50 <UARTEx_SetNbDataToProcess+0x94>)
 8007a0c:	5c8a      	ldrb	r2, [r1, r2]
 8007a0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a12:	7b3a      	ldrb	r2, [r7, #12]
 8007a14:	490f      	ldr	r1, [pc, #60]	; (8007a54 <UARTEx_SetNbDataToProcess+0x98>)
 8007a16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a18:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
 8007a26:	7b7a      	ldrb	r2, [r7, #13]
 8007a28:	4909      	ldr	r1, [pc, #36]	; (8007a50 <UARTEx_SetNbDataToProcess+0x94>)
 8007a2a:	5c8a      	ldrb	r2, [r1, r2]
 8007a2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a30:	7b7a      	ldrb	r2, [r7, #13]
 8007a32:	4908      	ldr	r1, [pc, #32]	; (8007a54 <UARTEx_SetNbDataToProcess+0x98>)
 8007a34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a36:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007a42:	bf00      	nop
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	08007af0 	.word	0x08007af0
 8007a54:	08007af8 	.word	0x08007af8

08007a58 <__libc_init_array>:
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	4d0d      	ldr	r5, [pc, #52]	; (8007a90 <__libc_init_array+0x38>)
 8007a5c:	4c0d      	ldr	r4, [pc, #52]	; (8007a94 <__libc_init_array+0x3c>)
 8007a5e:	1b64      	subs	r4, r4, r5
 8007a60:	10a4      	asrs	r4, r4, #2
 8007a62:	2600      	movs	r6, #0
 8007a64:	42a6      	cmp	r6, r4
 8007a66:	d109      	bne.n	8007a7c <__libc_init_array+0x24>
 8007a68:	4d0b      	ldr	r5, [pc, #44]	; (8007a98 <__libc_init_array+0x40>)
 8007a6a:	4c0c      	ldr	r4, [pc, #48]	; (8007a9c <__libc_init_array+0x44>)
 8007a6c:	f000 f820 	bl	8007ab0 <_init>
 8007a70:	1b64      	subs	r4, r4, r5
 8007a72:	10a4      	asrs	r4, r4, #2
 8007a74:	2600      	movs	r6, #0
 8007a76:	42a6      	cmp	r6, r4
 8007a78:	d105      	bne.n	8007a86 <__libc_init_array+0x2e>
 8007a7a:	bd70      	pop	{r4, r5, r6, pc}
 8007a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a80:	4798      	blx	r3
 8007a82:	3601      	adds	r6, #1
 8007a84:	e7ee      	b.n	8007a64 <__libc_init_array+0xc>
 8007a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a8a:	4798      	blx	r3
 8007a8c:	3601      	adds	r6, #1
 8007a8e:	e7f2      	b.n	8007a76 <__libc_init_array+0x1e>
 8007a90:	08007b08 	.word	0x08007b08
 8007a94:	08007b08 	.word	0x08007b08
 8007a98:	08007b08 	.word	0x08007b08
 8007a9c:	08007b0c 	.word	0x08007b0c

08007aa0 <memset>:
 8007aa0:	4402      	add	r2, r0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d100      	bne.n	8007aaa <memset+0xa>
 8007aa8:	4770      	bx	lr
 8007aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8007aae:	e7f9      	b.n	8007aa4 <memset+0x4>

08007ab0 <_init>:
 8007ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab2:	bf00      	nop
 8007ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ab6:	bc08      	pop	{r3}
 8007ab8:	469e      	mov	lr, r3
 8007aba:	4770      	bx	lr

08007abc <_fini>:
 8007abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007abe:	bf00      	nop
 8007ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac2:	bc08      	pop	{r3}
 8007ac4:	469e      	mov	lr, r3
 8007ac6:	4770      	bx	lr
