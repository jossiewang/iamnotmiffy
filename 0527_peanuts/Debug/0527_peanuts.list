
0527_peanuts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e08c  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  0800e358  0800e358  0001e358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e654  0800e654  0001e654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800e65c  0800e65c  0001e65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e664  0800e664  0001e664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800e668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000d94  24000078  0800e6e0  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24000e0c  0800e6e0  00020e0c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f3e4  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003327  00000000  00000000  0003f48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001458  00000000  00000000  000427b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001368  00000000  00000000  00043c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034eda  00000000  00000000  00044f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a75f  00000000  00000000  00079e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001533b8  00000000  00000000  000945b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e7969  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005bc8  00000000  00000000  001e79bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000078 	.word	0x24000078
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800e340 	.word	0x0800e340

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400007c 	.word	0x2400007c
 8000308:	0800e340 	.word	0x0800e340

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295
 800032c:	f04f 30ff 	movne.w	r0, #4294967295
 8000330:	f000 b974 	b.w	800061c <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9d08      	ldr	r5, [sp, #32]
 8000352:	4604      	mov	r4, r0
 8000354:	468e      	mov	lr, r1
 8000356:	2b00      	cmp	r3, #0
 8000358:	d14d      	bne.n	80003f6 <__udivmoddi4+0xaa>
 800035a:	428a      	cmp	r2, r1
 800035c:	4694      	mov	ip, r2
 800035e:	d969      	bls.n	8000434 <__udivmoddi4+0xe8>
 8000360:	fab2 f282 	clz	r2, r2
 8000364:	b152      	cbz	r2, 800037c <__udivmoddi4+0x30>
 8000366:	fa01 f302 	lsl.w	r3, r1, r2
 800036a:	f1c2 0120 	rsb	r1, r2, #32
 800036e:	fa20 f101 	lsr.w	r1, r0, r1
 8000372:	fa0c fc02 	lsl.w	ip, ip, r2
 8000376:	ea41 0e03 	orr.w	lr, r1, r3
 800037a:	4094      	lsls	r4, r2
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	0c21      	lsrs	r1, r4, #16
 8000382:	fbbe f6f8 	udiv	r6, lr, r8
 8000386:	fa1f f78c 	uxth.w	r7, ip
 800038a:	fb08 e316 	mls	r3, r8, r6, lr
 800038e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000392:	fb06 f107 	mul.w	r1, r6, r7
 8000396:	4299      	cmp	r1, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x64>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 811f 	bcs.w	80005e4 <__udivmoddi4+0x298>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 811c 	bls.w	80005e4 <__udivmoddi4+0x298>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	4463      	add	r3, ip
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 f707 	mul.w	r7, r0, r7
 80003c4:	42a7      	cmp	r7, r4
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x92>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	f080 810a 	bcs.w	80005e8 <__udivmoddi4+0x29c>
 80003d4:	42a7      	cmp	r7, r4
 80003d6:	f240 8107 	bls.w	80005e8 <__udivmoddi4+0x29c>
 80003da:	4464      	add	r4, ip
 80003dc:	3802      	subs	r0, #2
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	1be4      	subs	r4, r4, r7
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa4>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0xc2>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80ef 	beq.w	80005de <__udivmoddi4+0x292>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x160>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0xd4>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80f9 	bhi.w	8000612 <__udivmoddi4+0x2c6>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0303 	sbc.w	r3, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	469e      	mov	lr, r3
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0e0      	beq.n	80003f0 <__udivmoddi4+0xa4>
 800042e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000432:	e7dd      	b.n	80003f0 <__udivmoddi4+0xa4>
 8000434:	b902      	cbnz	r2, 8000438 <__udivmoddi4+0xec>
 8000436:	deff      	udf	#255	; 0xff
 8000438:	fab2 f282 	clz	r2, r2
 800043c:	2a00      	cmp	r2, #0
 800043e:	f040 8092 	bne.w	8000566 <__udivmoddi4+0x21a>
 8000442:	eba1 010c 	sub.w	r1, r1, ip
 8000446:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	2601      	movs	r6, #1
 8000450:	0c20      	lsrs	r0, r4, #16
 8000452:	fbb1 f3f7 	udiv	r3, r1, r7
 8000456:	fb07 1113 	mls	r1, r7, r3, r1
 800045a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800045e:	fb0e f003 	mul.w	r0, lr, r3
 8000462:	4288      	cmp	r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x12c>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f103 38ff 	add.w	r8, r3, #4294967295
 800046e:	d202      	bcs.n	8000476 <__udivmoddi4+0x12a>
 8000470:	4288      	cmp	r0, r1
 8000472:	f200 80cb 	bhi.w	800060c <__udivmoddi4+0x2c0>
 8000476:	4643      	mov	r3, r8
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1110 	mls	r1, r7, r0, r1
 8000484:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000488:	fb0e fe00 	mul.w	lr, lr, r0
 800048c:	45a6      	cmp	lr, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x156>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f100 31ff 	add.w	r1, r0, #4294967295
 8000498:	d202      	bcs.n	80004a0 <__udivmoddi4+0x154>
 800049a:	45a6      	cmp	lr, r4
 800049c:	f200 80bb 	bhi.w	8000616 <__udivmoddi4+0x2ca>
 80004a0:	4608      	mov	r0, r1
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004aa:	e79c      	b.n	80003e6 <__udivmoddi4+0x9a>
 80004ac:	f1c6 0720 	rsb	r7, r6, #32
 80004b0:	40b3      	lsls	r3, r6
 80004b2:	fa22 fc07 	lsr.w	ip, r2, r7
 80004b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ba:	fa20 f407 	lsr.w	r4, r0, r7
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	431c      	orrs	r4, r3
 80004c4:	40f9      	lsrs	r1, r7
 80004c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ca:	fa00 f306 	lsl.w	r3, r0, r6
 80004ce:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d2:	0c20      	lsrs	r0, r4, #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fb09 1118 	mls	r1, r9, r8, r1
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	fb08 f00e 	mul.w	r0, r8, lr
 80004e4:	4288      	cmp	r0, r1
 80004e6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ea:	d90b      	bls.n	8000504 <__udivmoddi4+0x1b8>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f4:	f080 8088 	bcs.w	8000608 <__udivmoddi4+0x2bc>
 80004f8:	4288      	cmp	r0, r1
 80004fa:	f240 8085 	bls.w	8000608 <__udivmoddi4+0x2bc>
 80004fe:	f1a8 0802 	sub.w	r8, r8, #2
 8000502:	4461      	add	r1, ip
 8000504:	1a09      	subs	r1, r1, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb1 f0f9 	udiv	r0, r1, r9
 800050c:	fb09 1110 	mls	r1, r9, r0, r1
 8000510:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000514:	fb00 fe0e 	mul.w	lr, r0, lr
 8000518:	458e      	cmp	lr, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x1e2>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f100 34ff 	add.w	r4, r0, #4294967295
 8000524:	d26c      	bcs.n	8000600 <__udivmoddi4+0x2b4>
 8000526:	458e      	cmp	lr, r1
 8000528:	d96a      	bls.n	8000600 <__udivmoddi4+0x2b4>
 800052a:	3802      	subs	r0, #2
 800052c:	4461      	add	r1, ip
 800052e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000532:	fba0 9402 	umull	r9, r4, r0, r2
 8000536:	eba1 010e 	sub.w	r1, r1, lr
 800053a:	42a1      	cmp	r1, r4
 800053c:	46c8      	mov	r8, r9
 800053e:	46a6      	mov	lr, r4
 8000540:	d356      	bcc.n	80005f0 <__udivmoddi4+0x2a4>
 8000542:	d053      	beq.n	80005ec <__udivmoddi4+0x2a0>
 8000544:	b15d      	cbz	r5, 800055e <__udivmoddi4+0x212>
 8000546:	ebb3 0208 	subs.w	r2, r3, r8
 800054a:	eb61 010e 	sbc.w	r1, r1, lr
 800054e:	fa01 f707 	lsl.w	r7, r1, r7
 8000552:	fa22 f306 	lsr.w	r3, r2, r6
 8000556:	40f1      	lsrs	r1, r6
 8000558:	431f      	orrs	r7, r3
 800055a:	e9c5 7100 	strd	r7, r1, [r5]
 800055e:	2600      	movs	r6, #0
 8000560:	4631      	mov	r1, r6
 8000562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000566:	f1c2 0320 	rsb	r3, r2, #32
 800056a:	40d8      	lsrs	r0, r3
 800056c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000570:	fa21 f303 	lsr.w	r3, r1, r3
 8000574:	4091      	lsls	r1, r2
 8000576:	4301      	orrs	r1, r0
 8000578:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800057c:	fa1f fe8c 	uxth.w	lr, ip
 8000580:	fbb3 f0f7 	udiv	r0, r3, r7
 8000584:	fb07 3610 	mls	r6, r7, r0, r3
 8000588:	0c0b      	lsrs	r3, r1, #16
 800058a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800058e:	fb00 f60e 	mul.w	r6, r0, lr
 8000592:	429e      	cmp	r6, r3
 8000594:	fa04 f402 	lsl.w	r4, r4, r2
 8000598:	d908      	bls.n	80005ac <__udivmoddi4+0x260>
 800059a:	eb1c 0303 	adds.w	r3, ip, r3
 800059e:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a2:	d22f      	bcs.n	8000604 <__udivmoddi4+0x2b8>
 80005a4:	429e      	cmp	r6, r3
 80005a6:	d92d      	bls.n	8000604 <__udivmoddi4+0x2b8>
 80005a8:	3802      	subs	r0, #2
 80005aa:	4463      	add	r3, ip
 80005ac:	1b9b      	subs	r3, r3, r6
 80005ae:	b289      	uxth	r1, r1
 80005b0:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b4:	fb07 3316 	mls	r3, r7, r6, r3
 80005b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005bc:	fb06 f30e 	mul.w	r3, r6, lr
 80005c0:	428b      	cmp	r3, r1
 80005c2:	d908      	bls.n	80005d6 <__udivmoddi4+0x28a>
 80005c4:	eb1c 0101 	adds.w	r1, ip, r1
 80005c8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005cc:	d216      	bcs.n	80005fc <__udivmoddi4+0x2b0>
 80005ce:	428b      	cmp	r3, r1
 80005d0:	d914      	bls.n	80005fc <__udivmoddi4+0x2b0>
 80005d2:	3e02      	subs	r6, #2
 80005d4:	4461      	add	r1, ip
 80005d6:	1ac9      	subs	r1, r1, r3
 80005d8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005dc:	e738      	b.n	8000450 <__udivmoddi4+0x104>
 80005de:	462e      	mov	r6, r5
 80005e0:	4628      	mov	r0, r5
 80005e2:	e705      	b.n	80003f0 <__udivmoddi4+0xa4>
 80005e4:	4606      	mov	r6, r0
 80005e6:	e6e3      	b.n	80003b0 <__udivmoddi4+0x64>
 80005e8:	4618      	mov	r0, r3
 80005ea:	e6f8      	b.n	80003de <__udivmoddi4+0x92>
 80005ec:	454b      	cmp	r3, r9
 80005ee:	d2a9      	bcs.n	8000544 <__udivmoddi4+0x1f8>
 80005f0:	ebb9 0802 	subs.w	r8, r9, r2
 80005f4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005f8:	3801      	subs	r0, #1
 80005fa:	e7a3      	b.n	8000544 <__udivmoddi4+0x1f8>
 80005fc:	4646      	mov	r6, r8
 80005fe:	e7ea      	b.n	80005d6 <__udivmoddi4+0x28a>
 8000600:	4620      	mov	r0, r4
 8000602:	e794      	b.n	800052e <__udivmoddi4+0x1e2>
 8000604:	4640      	mov	r0, r8
 8000606:	e7d1      	b.n	80005ac <__udivmoddi4+0x260>
 8000608:	46d0      	mov	r8, sl
 800060a:	e77b      	b.n	8000504 <__udivmoddi4+0x1b8>
 800060c:	3b02      	subs	r3, #2
 800060e:	4461      	add	r1, ip
 8000610:	e732      	b.n	8000478 <__udivmoddi4+0x12c>
 8000612:	4630      	mov	r0, r6
 8000614:	e709      	b.n	800042a <__udivmoddi4+0xde>
 8000616:	4464      	add	r4, ip
 8000618:	3802      	subs	r0, #2
 800061a:	e742      	b.n	80004a2 <__udivmoddi4+0x156>

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	0a5a      	lsrs	r2, r3, #9
 8000630:	490f      	ldr	r1, [pc, #60]	; (8000670 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000632:	fba1 1202 	umull	r1, r2, r1, r2
 8000636:	09d2      	lsrs	r2, r2, #7
 8000638:	490e      	ldr	r1, [pc, #56]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063a:	fb01 f202 	mul.w	r2, r1, r2
 800063e:	1a9b      	subs	r3, r3, r2
 8000640:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	0a5b      	lsrs	r3, r3, #9
 8000648:	4a09      	ldr	r2, [pc, #36]	; (8000670 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064a:	fba2 2303 	umull	r2, r3, r2, r3
 800064e:	09db      	lsrs	r3, r3, #7
 8000650:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	441a      	add	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	68fa      	ldr	r2, [r7, #12]
 8000662:	601a      	str	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	00044b83 	.word	0x00044b83
 8000674:	3b9aca00 	.word	0x3b9aca00

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f003 fcd2 	bl	8004024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f84a 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f000 fb74 	bl	8000d70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000688:	f000 fb4a 	bl	8000d20 <MX_DMA_Init>
  MX_TIM2_Init();
 800068c:	f000 f90e 	bl	80008ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8000690:	f000 f970 	bl	8000974 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000694:	f000 f9be 	bl	8000a14 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000698:	f000 fa12 	bl	8000ac0 <MX_TIM8_Init>
  MX_TIM23_Init();
 800069c:	f000 fa9e 	bl	8000bdc <MX_TIM23_Init>
  MX_USART3_UART_Init();
 80006a0:	f000 faf2 	bl	8000c88 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80006a4:	f000 f8a8 	bl	80007f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim3);
 80006a8:	4815      	ldr	r0, [pc, #84]	; (8000700 <main+0x88>)
 80006aa:	f009 fefd 	bl	800a4a8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Encoder_Start(TIM_ENC_MF, TIM_CHANNEL_1);
 80006ae:	2100      	movs	r1, #0
 80006b0:	4814      	ldr	r0, [pc, #80]	; (8000704 <main+0x8c>)
 80006b2:	f00a f999 	bl	800a9e8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_MF, TIM_CHANNEL_2);
 80006b6:	2104      	movs	r1, #4
 80006b8:	4812      	ldr	r0, [pc, #72]	; (8000704 <main+0x8c>)
 80006ba:	f00a f995 	bl	800a9e8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_ML, TIM_CHANNEL_1);
 80006be:	2100      	movs	r1, #0
 80006c0:	4811      	ldr	r0, [pc, #68]	; (8000708 <main+0x90>)
 80006c2:	f00a f991 	bl	800a9e8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_ML, TIM_CHANNEL_2);
 80006c6:	2104      	movs	r1, #4
 80006c8:	480f      	ldr	r0, [pc, #60]	; (8000708 <main+0x90>)
 80006ca:	f00a f98d 	bl	800a9e8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_MR, TIM_CHANNEL_1);
 80006ce:	2100      	movs	r1, #0
 80006d0:	480e      	ldr	r0, [pc, #56]	; (800070c <main+0x94>)
 80006d2:	f00a f989 	bl	800a9e8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_MR, TIM_CHANNEL_2);
 80006d6:	2104      	movs	r1, #4
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <main+0x94>)
 80006da:	f00a f985 	bl	800a9e8 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(TIM_PWM_MF, CH_PWM_MF);
 80006de:	2100      	movs	r1, #0
 80006e0:	480b      	ldr	r0, [pc, #44]	; (8000710 <main+0x98>)
 80006e2:	f009 ffbf 	bl	800a664 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(TIM_PWM_ML, CH_PWM_ML);
 80006e6:	210c      	movs	r1, #12
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <main+0x98>)
 80006ea:	f009 ffbb 	bl	800a664 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(TIM_PWM_MR, CH_PWM_MR);
 80006ee:	2108      	movs	r1, #8
 80006f0:	4808      	ldr	r0, [pc, #32]	; (8000714 <main+0x9c>)
 80006f2:	f009 ffb7 	bl	800a664 <HAL_TIM_PWM_Start>
  	setup();
 80006f6:	f002 fa59 	bl	8002bac <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 80006fa:	f002 fa67 	bl	8002bcc <loop>
 80006fe:	e7fc      	b.n	80006fa <main+0x82>
 8000700:	2400012c 	.word	0x2400012c
 8000704:	24000094 	.word	0x24000094
 8000708:	24000178 	.word	0x24000178
 800070c:	24000210 	.word	0x24000210
 8000710:	240000e0 	.word	0x240000e0
 8000714:	240001c4 	.word	0x240001c4

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b09c      	sub	sp, #112	; 0x70
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000722:	224c      	movs	r2, #76	; 0x4c
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f00d fc80 	bl	800e02c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2220      	movs	r2, #32
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f00d fc7a 	bl	800e02c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000738:	2002      	movs	r0, #2
 800073a:	f007 f8fb 	bl	8007934 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b2c      	ldr	r3, [pc, #176]	; (80007f4 <SystemClock_Config+0xdc>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800074a:	4a2a      	ldr	r2, [pc, #168]	; (80007f4 <SystemClock_Config+0xdc>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6193      	str	r3, [r2, #24]
 8000752:	4b28      	ldr	r3, [pc, #160]	; (80007f4 <SystemClock_Config+0xdc>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800075e:	bf00      	nop
 8000760:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <SystemClock_Config+0xdc>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800076c:	d1f8      	bne.n	8000760 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076e:	2301      	movs	r3, #1
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000772:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000778:	2302      	movs	r3, #2
 800077a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077c:	2302      	movs	r3, #2
 800077e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000780:	2304      	movs	r3, #4
 8000782:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000784:	23a8      	movs	r3, #168	; 0xa8
 8000786:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000788:	2301      	movs	r3, #1
 800078a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800078c:	2302      	movs	r3, #2
 800078e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000790:	2302      	movs	r3, #2
 8000792:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000794:	2304      	movs	r3, #4
 8000796:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000798:	2300      	movs	r3, #0
 800079a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a4:	4618      	mov	r0, r3
 80007a6:	f007 f8ff 	bl	80079a8 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007b0:	f000 fbbe 	bl	8000f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	233f      	movs	r3, #63	; 0x3f
 80007b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2303      	movs	r3, #3
 80007ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80007bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007c2:	2308      	movs	r3, #8
 80007c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007c6:	2340      	movs	r3, #64	; 0x40
 80007c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ca:	2340      	movs	r3, #64	; 0x40
 80007cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007d4:	2340      	movs	r3, #64	; 0x40
 80007d6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2102      	movs	r1, #2
 80007dc:	4618      	mov	r0, r3
 80007de:	f007 fcbd 	bl	800815c <HAL_RCC_ClockConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007e8:	f000 fba2 	bl	8000f30 <Error_Handler>
  }
}
 80007ec:	bf00      	nop
 80007ee:	3770      	adds	r7, #112	; 0x70
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	58024800 	.word	0x58024800

080007f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	; 0x30
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	2224      	movs	r2, #36	; 0x24
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f00d fc10 	bl	800e02c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080c:	463b      	mov	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000816:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <MX_TIM1_Init+0xac>)
 8000818:	4a23      	ldr	r2, [pc, #140]	; (80008a8 <MX_TIM1_Init+0xb0>)
 800081a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800081c:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_TIM1_Init+0xac>)
 800081e:	2200      	movs	r2, #0
 8000820:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000822:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <MX_TIM1_Init+0xac>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <MX_TIM1_Init+0xac>)
 800082a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800082e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_TIM1_Init+0xac>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <MX_TIM1_Init+0xac>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_TIM1_Init+0xac>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000842:	2303      	movs	r3, #3
 8000844:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800084a:	2301      	movs	r3, #1
 800084c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800085a:	2301      	movs	r3, #1
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	4619      	mov	r1, r3
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_TIM1_Init+0xac>)
 800086e:	f00a f815 	bl	800a89c <HAL_TIM_Encoder_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000878:	f000 fb5a 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087c:	2300      	movs	r3, #0
 800087e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_TIM1_Init+0xac>)
 800088e:	f00b f8cd 	bl	800ba2c <HAL_TIMEx_MasterConfigSynchronization>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000898:	f000 fb4a 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	3730      	adds	r7, #48	; 0x30
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	24000094 	.word	0x24000094
 80008a8:	40010000 	.word	0x40010000

080008ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008be:	463b      	mov	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
 80008cc:	615a      	str	r2, [r3, #20]
 80008ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d0:	4b27      	ldr	r3, [pc, #156]	; (8000970 <MX_TIM2_Init+0xc4>)
 80008d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <MX_TIM2_Init+0xc4>)
 80008da:	223f      	movs	r2, #63	; 0x3f
 80008dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b24      	ldr	r3, [pc, #144]	; (8000970 <MX_TIM2_Init+0xc4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <MX_TIM2_Init+0xc4>)
 80008e6:	2231      	movs	r2, #49	; 0x31
 80008e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ea:	4b21      	ldr	r3, [pc, #132]	; (8000970 <MX_TIM2_Init+0xc4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_TIM2_Init+0xc4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008f6:	481e      	ldr	r0, [pc, #120]	; (8000970 <MX_TIM2_Init+0xc4>)
 80008f8:	f009 fe5c 	bl	800a5b4 <HAL_TIM_PWM_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000902:	f000 fb15 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4816      	ldr	r0, [pc, #88]	; (8000970 <MX_TIM2_Init+0xc4>)
 8000916:	f00b f889 	bl	800ba2c <HAL_TIMEx_MasterConfigSynchronization>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000920:	f000 fb06 	bl	8000f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000924:	2360      	movs	r3, #96	; 0x60
 8000926:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	4619      	mov	r1, r3
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <MX_TIM2_Init+0xc4>)
 800093c:	f00a fa02 	bl	800ad44 <HAL_TIM_PWM_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000946:	f000 faf3 	bl	8000f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800094a:	463b      	mov	r3, r7
 800094c:	220c      	movs	r2, #12
 800094e:	4619      	mov	r1, r3
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <MX_TIM2_Init+0xc4>)
 8000952:	f00a f9f7 	bl	800ad44 <HAL_TIM_PWM_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800095c:	f000 fae8 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000960:	4803      	ldr	r0, [pc, #12]	; (8000970 <MX_TIM2_Init+0xc4>)
 8000962:	f003 f8ab 	bl	8003abc <HAL_TIM_MspPostInit>

}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	; 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	240000e0 	.word	0x240000e0

08000974 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097a:	f107 0310 	add.w	r3, r7, #16
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000992:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <MX_TIM3_Init+0x98>)
 8000994:	4a1e      	ldr	r2, [pc, #120]	; (8000a10 <MX_TIM3_Init+0x9c>)
 8000996:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_TIM3_Init+0x98>)
 800099a:	f240 3247 	movw	r2, #839	; 0x347
 800099e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_TIM3_Init+0x98>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_TIM3_Init+0x98>)
 80009a8:	f242 720f 	movw	r2, #9999	; 0x270f
 80009ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_TIM3_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <MX_TIM3_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009ba:	4814      	ldr	r0, [pc, #80]	; (8000a0c <MX_TIM3_Init+0x98>)
 80009bc:	f009 fd1c 	bl	800a3f8 <HAL_TIM_Base_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80009c6:	f000 fab3 	bl	8000f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	480d      	ldr	r0, [pc, #52]	; (8000a0c <MX_TIM3_Init+0x98>)
 80009d8:	f00a fac8 	bl	800af6c <HAL_TIM_ConfigClockSource>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80009e2:	f000 faa5 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	4619      	mov	r1, r3
 80009f2:	4806      	ldr	r0, [pc, #24]	; (8000a0c <MX_TIM3_Init+0x98>)
 80009f4:	f00b f81a 	bl	800ba2c <HAL_TIMEx_MasterConfigSynchronization>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80009fe:	f000 fa97 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	3720      	adds	r7, #32
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2400012c 	.word	0x2400012c
 8000a10:	40000400 	.word	0x40000400

08000a14 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	2224      	movs	r2, #36	; 0x24
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f00d fb02 	bl	800e02c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000a34:	4a21      	ldr	r2, [pc, #132]	; (8000abc <MX_TIM4_Init+0xa8>)
 8000a36:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a4a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a60:	2301      	movs	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a70:	2301      	movs	r3, #1
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	4619      	mov	r1, r3
 8000a82:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000a84:	f009 ff0a 	bl	800a89c <HAL_TIM_Encoder_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000a8e:	f000 fa4f 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000aa0:	f00a ffc4 	bl	800ba2c <HAL_TIMEx_MasterConfigSynchronization>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000aaa:	f000 fa41 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	3730      	adds	r7, #48	; 0x30
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	24000178 	.word	0x24000178
 8000abc:	40000800 	.word	0x40000800

08000ac0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b098      	sub	sp, #96	; 0x60
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]
 8000ae2:	615a      	str	r2, [r3, #20]
 8000ae4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2234      	movs	r2, #52	; 0x34
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f00d fa9d 	bl	800e02c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000af2:	4b38      	ldr	r3, [pc, #224]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000af4:	4a38      	ldr	r2, [pc, #224]	; (8000bd8 <MX_TIM8_Init+0x118>)
 8000af6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 8000af8:	4b36      	ldr	r3, [pc, #216]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000afa:	223f      	movs	r2, #63	; 0x3f
 8000afc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afe:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8000b04:	4b33      	ldr	r3, [pc, #204]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b06:	2231      	movs	r2, #49	; 0x31
 8000b08:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0a:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b10:	4b30      	ldr	r3, [pc, #192]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b16:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b1c:	482d      	ldr	r0, [pc, #180]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b1e:	f009 fd49 	bl	800a5b4 <HAL_TIM_PWM_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000b28:	f000 fa02 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b30:	2300      	movs	r3, #0
 8000b32:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4825      	ldr	r0, [pc, #148]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b40:	f00a ff74 	bl	800ba2c <HAL_TIMEx_MasterConfigSynchronization>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8000b4a:	f000 f9f1 	bl	8000f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b4e:	2360      	movs	r3, #96	; 0x60
 8000b50:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b56:	2300      	movs	r3, #0
 8000b58:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b6e:	2208      	movs	r2, #8
 8000b70:	4619      	mov	r1, r3
 8000b72:	4818      	ldr	r0, [pc, #96]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b74:	f00a f8e6 	bl	800ad44 <HAL_TIM_PWM_ConfigChannel>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8000b7e:	f000 f9d7 	bl	8000f30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ba4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000bb8:	f00a ffd4 	bl	800bb64 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8000bc2:	f000 f9b5 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000bc6:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000bc8:	f002 ff78 	bl	8003abc <HAL_TIM_MspPostInit>

}
 8000bcc:	bf00      	nop
 8000bce:	3760      	adds	r7, #96	; 0x60
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	240001c4 	.word	0x240001c4
 8000bd8:	40010400 	.word	0x40010400

08000bdc <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	; 0x30
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	2224      	movs	r2, #36	; 0x24
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f00d fa1e 	bl	800e02c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000bfa:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000bfc:	4a21      	ldr	r2, [pc, #132]	; (8000c84 <MX_TIM23_Init+0xa8>)
 8000bfe:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8000c00:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c06:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8000c0c:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c12:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c20:	2303      	movs	r3, #3
 8000c22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480d      	ldr	r0, [pc, #52]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000c4c:	f009 fe26 	bl	800a89c <HAL_TIM_Encoder_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 8000c56:	f000 f96b 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8000c62:	463b      	mov	r3, r7
 8000c64:	4619      	mov	r1, r3
 8000c66:	4806      	ldr	r0, [pc, #24]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000c68:	f00a fee0 	bl	800ba2c <HAL_TIMEx_MasterConfigSynchronization>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 8000c72:	f000 f95d 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	3730      	adds	r7, #48	; 0x30
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	24000210 	.word	0x24000210
 8000c84:	4000e000 	.word	0x4000e000

08000c88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000c8e:	4a23      	ldr	r2, [pc, #140]	; (8000d1c <MX_USART3_UART_Init+0x94>)
 8000c90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000c94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ca0:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000cae:	220c      	movs	r2, #12
 8000cb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cd0:	4811      	ldr	r0, [pc, #68]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000cd2:	f00b f805 	bl	800bce0 <HAL_UART_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cdc:	f000 f928 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	480d      	ldr	r0, [pc, #52]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000ce4:	f00d f884 	bl	800ddf0 <HAL_UARTEx_SetTxFifoThreshold>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cee:	f000 f91f 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4808      	ldr	r0, [pc, #32]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000cf6:	f00d f8b9 	bl	800de6c <HAL_UARTEx_SetRxFifoThreshold>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d00:	f000 f916 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d04:	4804      	ldr	r0, [pc, #16]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000d06:	f00d f83a 	bl	800dd7e <HAL_UARTEx_DisableFifoMode>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d10:	f000 f90e 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	2400025c 	.word	0x2400025c
 8000d1c:	40004800 	.word	0x40004800

08000d20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_DMA_Init+0x4c>)
 8000d28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d2c:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <MX_DMA_Init+0x4c>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <MX_DMA_Init+0x4c>)
 8000d38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	200b      	movs	r0, #11
 8000d4a:	f003 fafc 	bl	8004346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d4e:	200b      	movs	r0, #11
 8000d50:	f003 fb13 	bl	800437a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2100      	movs	r1, #0
 8000d58:	200c      	movs	r0, #12
 8000d5a:	f003 faf4 	bl	8004346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d5e:	200c      	movs	r0, #12
 8000d60:	f003 fb0b 	bl	800437a <HAL_NVIC_EnableIRQ>

}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	58024400 	.word	0x58024400

08000d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	; 0x30
 8000d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d86:	4b39      	ldr	r3, [pc, #228]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8c:	4a37      	ldr	r2, [pc, #220]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d96:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	f003 0310 	and.w	r3, r3, #16
 8000da0:	61bb      	str	r3, [r7, #24]
 8000da2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000da4:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	4a30      	ldr	r2, [pc, #192]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000dac:	f043 0320 	orr.w	r3, r3, #32
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db4:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	f003 0320 	and.w	r3, r3, #32
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc2:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	4a28      	ldr	r2, [pc, #160]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd2:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de6:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfe:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e04:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000e06:	f043 0308 	orr.w	r3, r3, #8
 8000e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e14:	f003 0308 	and.w	r3, r3, #8
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f249 51c0 	movw	r1, #38336	; 0x95c0
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <MX_GPIO_Init+0x100>)
 8000e42:	f006 fd5d 	bl	8007900 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8000e46:	f249 53c0 	movw	r3, #38336	; 0x95c0
 8000e4a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4804      	ldr	r0, [pc, #16]	; (8000e70 <MX_GPIO_Init+0x100>)
 8000e60:	f006 faa4 	bl	80073ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e64:	bf00      	nop
 8000e66:	3730      	adds	r7, #48	; 0x30
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	58021000 	.word	0x58021000

08000e74 <HAL_UART_ErrorCallback>:
void Encoder();
void PID_PWM();
void kinematics_model();

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
    if (huart == &huart3)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <HAL_UART_ErrorCallback+0x40>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d112      	bne.n	8000eaa <HAL_UART_ErrorCallback+0x36>
    {
		Vx = 0.0;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <HAL_UART_ErrorCallback+0x44>)
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
		Vy = 0.0;
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_UART_ErrorCallback+0x48>)
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
		W = 0.0;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_UART_ErrorCallback+0x4c>)
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
		HAL_UART_DeInit(&huart3);
 8000e9c:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <HAL_UART_ErrorCallback+0x40>)
 8000e9e:	f00a ff6f 	bl	800bd80 <HAL_UART_DeInit>
		MX_USART3_UART_Init();
 8000ea2:	f7ff fef1 	bl	8000c88 <MX_USART3_UART_Init>
		errcallback();
 8000ea6:	f001 fe9b 	bl	8002be0 <errcallback>
    }
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2400025c 	.word	0x2400025c
 8000eb8:	24000d80 	.word	0x24000d80
 8000ebc:	24000d84 	.word	0x24000d84
 8000ec0:	24000d88 	.word	0x24000d88

08000ec4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d11f      	bne.n	8000f16 <HAL_TIM_PeriodElapsedCallback+0x52>
		rVx++;
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000ed8:	edd3 7a00 	vldr	s15, [r3]
 8000edc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ee0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000ee6:	edc3 7a00 	vstr	s15, [r3]
		rVy++;
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000eec:	edd3 7a00 	vldr	s15, [r3]
 8000ef0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ef4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000efa:	edc3 7a00 	vstr	s15, [r3]
		rW++;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000f00:	edd3 7a00 	vldr	s15, [r3]
 8000f04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000f0e:	edc3 7a00 	vstr	s15, [r3]
		realspeed();
 8000f12:	f001 fe73 	bl	8002bfc <realspeed>
		//inverse_kinematics_model();
		//Encoder();
		//PID_PWM();
		//kinematics_model();
	}
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40000400 	.word	0x40000400
 8000f24:	24000d8c 	.word	0x24000d8c
 8000f28:	24000d90 	.word	0x24000d90
 8000f2c:	24000d94 	.word	0x24000d94

08000f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <Error_Handler+0x8>

08000f3a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <_ZN3ros3MsgC1Ev+0x1c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	0800e604 	.word	0x0800e604

08000f7c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
      data()
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ffe8 	bl	8000f5c <_ZN3ros3MsgC1Ev>
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3304      	adds	r3, #4
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ffcf 	bl	8000f3a <_ZN3ros4TimeC1Ev>
    {
    }
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	0800e5ec 	.word	0x0800e5ec

08000fac <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6859      	ldr	r1, [r3, #4]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	b2ca      	uxtb	r2, r1
 8000fc6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	0a19      	lsrs	r1, r3, #8
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b2ca      	uxtb	r2, r1
 8000fd8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	0c19      	lsrs	r1, r3, #16
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b2ca      	uxtb	r2, r1
 8000fea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	0e19      	lsrs	r1, r3, #24
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3303      	adds	r3, #3
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	b2ca      	uxtb	r2, r1
 8000ffc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3304      	adds	r3, #4
 8001002:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6899      	ldr	r1, [r3, #8]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	4413      	add	r3, r2
 800100e:	b2ca      	uxtb	r2, r1
 8001010:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	0a19      	lsrs	r1, r3, #8
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3301      	adds	r3, #1
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	4413      	add	r3, r2
 8001020:	b2ca      	uxtb	r2, r1
 8001022:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	0c19      	lsrs	r1, r3, #16
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	3302      	adds	r3, #2
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	4413      	add	r3, r2
 8001032:	b2ca      	uxtb	r2, r1
 8001034:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	0e19      	lsrs	r1, r3, #24
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	3303      	adds	r3, #3
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	4413      	add	r3, r2
 8001044:	b2ca      	uxtb	r2, r1
 8001046:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3304      	adds	r3, #4
 800104c:	60fb      	str	r3, [r7, #12]
      return offset;
 800104e:	68fb      	ldr	r3, [r7, #12]
    }
 8001050:	4618      	mov	r0, r3
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	3301      	adds	r3, #1
 8001080:	6839      	ldr	r1, [r7, #0]
 8001082:	440b      	add	r3, r1
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	431a      	orrs	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3302      	adds	r3, #2
 8001096:	6839      	ldr	r1, [r7, #0]
 8001098:	440b      	add	r3, r1
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	041b      	lsls	r3, r3, #16
 800109e:	431a      	orrs	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	3303      	adds	r3, #3
 80010ac:	6839      	ldr	r1, [r7, #0]
 80010ae:	440b      	add	r3, r1
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	061b      	lsls	r3, r3, #24
 80010b4:	431a      	orrs	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3304      	adds	r3, #4
 80010be:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	4413      	add	r3, r2
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3301      	adds	r3, #1
 80010d6:	6839      	ldr	r1, [r7, #0]
 80010d8:	440b      	add	r3, r1
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	431a      	orrs	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	3302      	adds	r3, #2
 80010ec:	6839      	ldr	r1, [r7, #0]
 80010ee:	440b      	add	r3, r1
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	041b      	lsls	r3, r3, #16
 80010f4:	431a      	orrs	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3303      	adds	r3, #3
 8001102:	6839      	ldr	r1, [r7, #0]
 8001104:	440b      	add	r3, r1
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	061b      	lsls	r3, r3, #24
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3304      	adds	r3, #4
 8001114:	60fb      	str	r3, [r7, #12]
     return offset;
 8001116:	68fb      	ldr	r3, [r7, #12]
    }
 8001118:	4618      	mov	r0, r3
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	0800e358 	.word	0x0800e358

08001140 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	0800e368 	.word	0x0800e368

0800115c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fef8 	bl	8000f5c <_ZN3ros3MsgC1Ev>
 800116c:	4a0b      	ldr	r2, [pc, #44]	; (800119c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	809a      	strh	r2, [r3, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a09      	ldr	r2, [pc, #36]	; (80011a0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001188:	611a      	str	r2, [r3, #16]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	615a      	str	r2, [r3, #20]
    {
    }
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	0800e5d4 	.word	0x0800e5d4
 80011a0:	0800e38c 	.word	0x0800e38c

080011a4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	8899      	ldrh	r1, [r3, #4]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	b2ca      	uxtb	r2, r1
 80011be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	889b      	ldrh	r3, [r3, #4]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	b299      	uxth	r1, r3
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	3301      	adds	r3, #1
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	b2ca      	uxtb	r2, r1
 80011d2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	3302      	adds	r3, #2
 80011d8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f894 	bl	800030c <strlen>
 80011e4:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	69b9      	ldr	r1, [r7, #24]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f001 fd2e 	bl	8002c50 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	3304      	adds	r3, #4
 80011f8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	18d0      	adds	r0, r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4619      	mov	r1, r3
 8001208:	f00c ff02 	bl	800e010 <memcpy>
      offset += length_topic_name;
 800120c:	69fa      	ldr	r2, [r7, #28]
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	4413      	add	r3, r2
 8001212:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f877 	bl	800030c <strlen>
 800121e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	4413      	add	r3, r2
 8001226:	6979      	ldr	r1, [r7, #20]
 8001228:	4618      	mov	r0, r3
 800122a:	f001 fd11 	bl	8002c50 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	18d0      	adds	r0, r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	4619      	mov	r1, r3
 8001242:	f00c fee5 	bl	800e010 <memcpy>
      offset += length_message_type;
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	4413      	add	r3, r2
 800124c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f85a 	bl	800030c <strlen>
 8001258:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	4413      	add	r3, r2
 8001260:	6939      	ldr	r1, [r7, #16]
 8001262:	4618      	mov	r0, r3
 8001264:	f001 fcf4 	bl	8002c50 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	3304      	adds	r3, #4
 800126c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	18d0      	adds	r0, r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4619      	mov	r1, r3
 800127c:	f00c fec8 	bl	800e010 <memcpy>
      offset += length_md5sum;
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4413      	add	r3, r2
 8001286:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800128e:	68f9      	ldr	r1, [r7, #12]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	4413      	add	r3, r2
 8001296:	b2ca      	uxtb	r2, r1
 8001298:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	0a19      	lsrs	r1, r3, #8
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3301      	adds	r3, #1
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	4413      	add	r3, r2
 80012a6:	b2ca      	uxtb	r2, r1
 80012a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	0c19      	lsrs	r1, r3, #16
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3302      	adds	r3, #2
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	4413      	add	r3, r2
 80012b6:	b2ca      	uxtb	r2, r1
 80012b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	0e19      	lsrs	r1, r3, #24
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3303      	adds	r3, #3
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	4413      	add	r3, r2
 80012c6:	b2ca      	uxtb	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3304      	adds	r3, #4
 80012ce:	61fb      	str	r3, [r7, #28]
      return offset;
 80012d0:	69fb      	ldr	r3, [r7, #28]
    }
 80012d2:	4618      	mov	r0, r3
 80012d4:	3720      	adds	r7, #32
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80012da:	b580      	push	{r7, lr}
 80012dc:	b08a      	sub	sp, #40	; 0x28
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	4413      	add	r3, r2
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	889b      	ldrh	r3, [r3, #4]
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	3301      	adds	r3, #1
 8001300:	6839      	ldr	r1, [r7, #0]
 8001302:	440b      	add	r3, r1
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b21b      	sxth	r3, r3
 800130a:	4313      	orrs	r3, r2
 800130c:	b21b      	sxth	r3, r3
 800130e:	b29a      	uxth	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	3302      	adds	r3, #2
 8001318:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	441a      	add	r2, r3
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f001 fcb0 	bl	8002c8c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	3304      	adds	r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	4413      	add	r3, r2
 800133c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800133e:	429a      	cmp	r2, r3
 8001340:	d20c      	bcs.n	800135c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	441a      	add	r2, r3
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	3b01      	subs	r3, #1
 800134c:	6839      	ldr	r1, [r7, #0]
 800134e:	440b      	add	r3, r1
 8001350:	7812      	ldrb	r2, [r2, #0]
 8001352:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	3301      	adds	r3, #1
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
 800135a:	e7ec      	b.n	8001336 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	4413      	add	r3, r2
 8001362:	3b01      	subs	r3, #1
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	4413      	add	r3, r2
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	3b01      	subs	r3, #1
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	441a      	add	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	4413      	add	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	441a      	add	r2, r3
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f001 fc7d 	bl	8002c8c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	3304      	adds	r3, #4
 8001396:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	623b      	str	r3, [r7, #32]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4413      	add	r3, r2
 80013a2:	6a3a      	ldr	r2, [r7, #32]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d20c      	bcs.n	80013c2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	441a      	add	r2, r3
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	6839      	ldr	r1, [r7, #0]
 80013b4:	440b      	add	r3, r1
 80013b6:	7812      	ldrb	r2, [r2, #0]
 80013b8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	3301      	adds	r3, #1
 80013be:	623b      	str	r3, [r7, #32]
 80013c0:	e7ec      	b.n	800139c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4413      	add	r3, r2
 80013c8:	3b01      	subs	r3, #1
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	4413      	add	r3, r2
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	441a      	add	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4413      	add	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	441a      	add	r2, r3
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	4611      	mov	r1, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f001 fc4a 	bl	8002c8c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	3304      	adds	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	69fa      	ldr	r2, [r7, #28]
 800140a:	429a      	cmp	r2, r3
 800140c:	d20c      	bcs.n	8001428 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	441a      	add	r2, r3
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	3b01      	subs	r3, #1
 8001418:	6839      	ldr	r1, [r7, #0]
 800141a:	440b      	add	r3, r1
 800141c:	7812      	ldrb	r2, [r2, #0]
 800141e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	3301      	adds	r3, #1
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	e7ec      	b.n	8001402 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4413      	add	r3, r2
 800142e:	3b01      	subs	r3, #1
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	4413      	add	r3, r2
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	3b01      	subs	r3, #1
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	441a      	add	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4413      	add	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	6839      	ldr	r1, [r7, #0]
 8001456:	440a      	add	r2, r1
 8001458:	7812      	ldrb	r2, [r2, #0]
 800145a:	4313      	orrs	r3, r2
 800145c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	3301      	adds	r3, #1
 8001464:	6839      	ldr	r1, [r7, #0]
 8001466:	440b      	add	r3, r1
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	4313      	orrs	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	3302      	adds	r3, #2
 8001476:	6839      	ldr	r1, [r7, #0]
 8001478:	440b      	add	r3, r1
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	041b      	lsls	r3, r3, #16
 800147e:	4313      	orrs	r3, r2
 8001480:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	3303      	adds	r3, #3
 8001488:	6839      	ldr	r1, [r7, #0]
 800148a:	440b      	add	r3, r1
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	061b      	lsls	r3, r3, #24
 8001490:	4313      	orrs	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	3304      	adds	r3, #4
 800149e:	61bb      	str	r3, [r7, #24]
     return offset;
 80014a0:	69bb      	ldr	r3, [r7, #24]
    }
 80014a2:	4618      	mov	r0, r3
 80014a4:	3728      	adds	r7, #40	; 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	0800e390 	.word	0x0800e390

080014c8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	0800e3ac 	.word	0x0800e3ac

080014e4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fd34 	bl	8000f5c <_ZN3ros3MsgC1Ev>
 80014f4:	4a06      	ldr	r2, [pc, #24]	; (8001510 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	711a      	strb	r2, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001504:	609a      	str	r2, [r3, #8]
    {
    }
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	0800e5bc 	.word	0x0800e5bc
 8001514:	0800e38c 	.word	0x0800e38c

08001518 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	4413      	add	r3, r2
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	7912      	ldrb	r2, [r2, #4]
 8001530:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	3301      	adds	r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe fee5 	bl	800030c <strlen>
 8001542:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	4413      	add	r3, r2
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	4618      	mov	r0, r3
 800154e:	f001 fb7f 	bl	8002c50 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3304      	adds	r3, #4
 8001556:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	18d0      	adds	r0, r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	4619      	mov	r1, r3
 8001566:	f00c fd53 	bl	800e010 <memcpy>
      offset += length_msg;
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
      return offset;
 8001572:	68fb      	ldr	r3, [r7, #12]
    }
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	4413      	add	r3, r2
 8001590:	781a      	ldrb	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	3301      	adds	r3, #1
 800159a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	441a      	add	r2, r3
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 fb6f 	bl	8002c8c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	3304      	adds	r3, #4
 80015b2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4413      	add	r3, r2
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d20c      	bcs.n	80015de <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	441a      	add	r2, r3
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	440b      	add	r3, r1
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3301      	adds	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	e7ec      	b.n	80015b8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4413      	add	r3, r2
 80015e4:	3b01      	subs	r3, #1
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	4413      	add	r3, r2
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	441a      	add	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
     return offset;
 8001602:	693b      	ldr	r3, [r7, #16]
    }
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	0800e3d0 	.word	0x0800e3d0

08001628 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	0800e3e4 	.word	0x0800e3e4

08001644 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fc84 	bl	8000f5c <_ZN3ros3MsgC1Ev>
 8001654:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	619a      	str	r2, [r3, #24]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	61da      	str	r2, [r3, #28]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	0800e5a4 	.word	0x0800e5a4

0800168c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6859      	ldr	r1, [r3, #4]
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	b2ca      	uxtb	r2, r1
 80016a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	0a19      	lsrs	r1, r3, #8
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	3301      	adds	r3, #1
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	4413      	add	r3, r2
 80016b6:	b2ca      	uxtb	r2, r1
 80016b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	0c19      	lsrs	r1, r3, #16
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	3302      	adds	r3, #2
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	b2ca      	uxtb	r2, r1
 80016ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	0e19      	lsrs	r1, r3, #24
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	3303      	adds	r3, #3
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	4413      	add	r3, r2
 80016da:	b2ca      	uxtb	r2, r1
 80016dc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	3304      	adds	r3, #4
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	6a3a      	ldr	r2, [r7, #32]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d22b      	bcs.n	800174a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001700:	6939      	ldr	r1, [r7, #16]
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	4413      	add	r3, r2
 8001708:	b2ca      	uxtb	r2, r1
 800170a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	0a19      	lsrs	r1, r3, #8
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	3301      	adds	r3, #1
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	4413      	add	r3, r2
 8001718:	b2ca      	uxtb	r2, r1
 800171a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	0c19      	lsrs	r1, r3, #16
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	3302      	adds	r3, #2
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	4413      	add	r3, r2
 8001728:	b2ca      	uxtb	r2, r1
 800172a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	0e19      	lsrs	r1, r3, #24
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	3303      	adds	r3, #3
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	4413      	add	r3, r2
 8001738:	b2ca      	uxtb	r2, r1
 800173a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	3304      	adds	r3, #4
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	3301      	adds	r3, #1
 8001746:	623b      	str	r3, [r7, #32]
 8001748:	e7ce      	b.n	80016e8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6919      	ldr	r1, [r3, #16]
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	4413      	add	r3, r2
 8001754:	b2ca      	uxtb	r2, r1
 8001756:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	0a19      	lsrs	r1, r3, #8
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	3301      	adds	r3, #1
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	4413      	add	r3, r2
 8001766:	b2ca      	uxtb	r2, r1
 8001768:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	0c19      	lsrs	r1, r3, #16
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	3302      	adds	r3, #2
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	4413      	add	r3, r2
 8001778:	b2ca      	uxtb	r2, r1
 800177a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	0e19      	lsrs	r1, r3, #24
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	3303      	adds	r3, #3
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	4413      	add	r3, r2
 800178a:	b2ca      	uxtb	r2, r1
 800178c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	3304      	adds	r3, #4
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001794:	2300      	movs	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d22b      	bcs.n	80017fa <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699a      	ldr	r2, [r3, #24]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80017b0:	68f9      	ldr	r1, [r7, #12]
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	b2ca      	uxtb	r2, r1
 80017ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	0a19      	lsrs	r1, r3, #8
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	3301      	adds	r3, #1
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	b2ca      	uxtb	r2, r1
 80017ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	0c19      	lsrs	r1, r3, #16
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	3302      	adds	r3, #2
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	b2ca      	uxtb	r2, r1
 80017da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	0e19      	lsrs	r1, r3, #24
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	3303      	adds	r3, #3
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	b2ca      	uxtb	r2, r1
 80017ea:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	3304      	adds	r3, #4
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3301      	adds	r3, #1
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	e7ce      	b.n	8001798 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69d9      	ldr	r1, [r3, #28]
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	4413      	add	r3, r2
 8001804:	b2ca      	uxtb	r2, r1
 8001806:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	0a19      	lsrs	r1, r3, #8
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	3301      	adds	r3, #1
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	4413      	add	r3, r2
 8001816:	b2ca      	uxtb	r2, r1
 8001818:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	0c19      	lsrs	r1, r3, #16
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	3302      	adds	r3, #2
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	4413      	add	r3, r2
 8001828:	b2ca      	uxtb	r2, r1
 800182a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	0e19      	lsrs	r1, r3, #24
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	3303      	adds	r3, #3
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	4413      	add	r3, r2
 800183a:	b2ca      	uxtb	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	3304      	adds	r3, #4
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	429a      	cmp	r2, r3
 8001850:	d228      	bcs.n	80018a4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fd54 	bl	800030c <strlen>
 8001864:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	4413      	add	r3, r2
 800186c:	6979      	ldr	r1, [r7, #20]
 800186e:	4618      	mov	r0, r3
 8001870:	f001 f9ee 	bl	8002c50 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	3304      	adds	r3, #4
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	18d0      	adds	r0, r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	4619      	mov	r1, r3
 8001890:	f00c fbbe 	bl	800e010 <memcpy>
      offset += length_stringsi;
 8001894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	4413      	add	r3, r2
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	3301      	adds	r3, #1
 80018a0:	61bb      	str	r3, [r7, #24]
 80018a2:	e7d1      	b.n	8001848 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80018a6:	4618      	mov	r0, r3
 80018a8:	3728      	adds	r7, #40	; 0x28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b08e      	sub	sp, #56	; 0x38
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80018bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	4413      	add	r3, r2
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80018c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c8:	3301      	adds	r3, #1
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	4413      	add	r3, r2
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	6a3a      	ldr	r2, [r7, #32]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80018d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018da:	3302      	adds	r3, #2
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	041b      	lsls	r3, r3, #16
 80018e4:	6a3a      	ldr	r2, [r7, #32]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80018ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ec:	3303      	adds	r3, #3
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	4413      	add	r3, r2
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	061b      	lsls	r3, r3, #24
 80018f6:	6a3a      	ldr	r2, [r7, #32]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80018fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fe:	3304      	adds	r3, #4
 8001900:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	6a3a      	ldr	r2, [r7, #32]
 8001908:	429a      	cmp	r2, r3
 800190a:	d90a      	bls.n	8001922 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4619      	mov	r1, r3
 8001916:	4610      	mov	r0, r2
 8001918:	f00c fb90 	bl	800e03c <realloc>
 800191c:	4602      	mov	r2, r0
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a3a      	ldr	r2, [r7, #32]
 8001926:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001928:	2300      	movs	r3, #0
 800192a:	633b      	str	r3, [r7, #48]	; 0x30
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001932:	429a      	cmp	r2, r3
 8001934:	d236      	bcs.n	80019a4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	440a      	add	r2, r1
 8001942:	7812      	ldrb	r2, [r2, #0]
 8001944:	4313      	orrs	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194c:	3301      	adds	r3, #1
 800194e:	6839      	ldr	r1, [r7, #0]
 8001950:	440b      	add	r3, r1
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	021b      	lsls	r3, r3, #8
 8001956:	4313      	orrs	r3, r2
 8001958:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195e:	3302      	adds	r3, #2
 8001960:	6839      	ldr	r1, [r7, #0]
 8001962:	440b      	add	r3, r1
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	041b      	lsls	r3, r3, #16
 8001968:	4313      	orrs	r3, r2
 800196a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001970:	3303      	adds	r3, #3
 8001972:	6839      	ldr	r1, [r7, #0]
 8001974:	440b      	add	r3, r1
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	061b      	lsls	r3, r3, #24
 800197a:	4313      	orrs	r3, r2
 800197c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001986:	3304      	adds	r3, #4
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800199c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199e:	3301      	adds	r3, #1
 80019a0:	633b      	str	r3, [r7, #48]	; 0x30
 80019a2:	e7c3      	b.n	800192c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80019a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	4413      	add	r3, r2
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80019ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b0:	3301      	adds	r3, #1
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	4413      	add	r3, r2
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	69fa      	ldr	r2, [r7, #28]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80019c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c2:	3302      	adds	r3, #2
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	041b      	lsls	r3, r3, #16
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80019d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d4:	3303      	adds	r3, #3
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	4413      	add	r3, r2
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	061b      	lsls	r3, r3, #24
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80019e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e6:	3304      	adds	r3, #4
 80019e8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d90a      	bls.n	8001a0a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	699a      	ldr	r2, [r3, #24]
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4619      	mov	r1, r3
 80019fe:	4610      	mov	r0, r2
 8001a00:	f00c fb1c 	bl	800e03c <realloc>
 8001a04:	4602      	mov	r2, r0
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69fa      	ldr	r2, [r7, #28]
 8001a0e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d236      	bcs.n	8001a8c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a26:	6839      	ldr	r1, [r7, #0]
 8001a28:	440a      	add	r2, r1
 8001a2a:	7812      	ldrb	r2, [r2, #0]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a34:	3301      	adds	r3, #1
 8001a36:	6839      	ldr	r1, [r7, #0]
 8001a38:	440b      	add	r3, r1
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a46:	3302      	adds	r3, #2
 8001a48:	6839      	ldr	r1, [r7, #0]
 8001a4a:	440b      	add	r3, r1
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	041b      	lsls	r3, r3, #16
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a58:	3303      	adds	r3, #3
 8001a5a:	6839      	ldr	r1, [r7, #0]
 8001a5c:	440b      	add	r3, r1
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	061b      	lsls	r3, r3, #24
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a6e:	3304      	adds	r3, #4
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699a      	ldr	r2, [r3, #24]
 8001a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	3214      	adds	r2, #20
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a86:	3301      	adds	r3, #1
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a8a:	e7c3      	b.n	8001a14 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	4413      	add	r3, r2
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a98:	3301      	adds	r3, #1
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aaa:	3302      	adds	r3, #2
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	041b      	lsls	r3, r3, #16
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001abc:	3303      	adds	r3, #3
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	061b      	lsls	r3, r3, #24
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ace:	3304      	adds	r3, #4
 8001ad0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d90a      	bls.n	8001af2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	f00c faa8 	bl	800e03c <realloc>
 8001aec:	4602      	mov	r2, r0
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001af8:	2300      	movs	r3, #0
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d23f      	bcs.n	8001b86 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	441a      	add	r2, r3
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f001 f8ba 	bl	8002c8c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
 8001b22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d20c      	bcs.n	8001b48 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	441a      	add	r2, r3
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	3b01      	subs	r3, #1
 8001b38:	6839      	ldr	r1, [r7, #0]
 8001b3a:	440b      	add	r3, r1
 8001b3c:	7812      	ldrb	r2, [r2, #0]
 8001b3e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	3301      	adds	r3, #1
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
 8001b46:	e7ec      	b.n	8001b22 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001b48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	441a      	add	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001b64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4413      	add	r3, r2
 8001b6a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	3220      	adds	r2, #32
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b80:	3301      	adds	r3, #1
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b84:	e7ba      	b.n	8001afc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3738      	adds	r7, #56	; 0x38
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	0800e4f8 	.word	0x0800e4f8

08001bac <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	0800e408 	.word	0x0800e408

08001bc8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	611a      	str	r2, [r3, #16]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68d8      	ldr	r0, [r3, #12]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6891      	ldr	r1, [r2, #8]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	4798      	blx	r3
 8001c14:	4603      	mov	r3, r0
  };
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
  }
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a4b      	ldr	r2, [pc, #300]	; (8001d78 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d077      	beq.n	8001d40 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a48      	ldr	r2, [pc, #288]	; (8001d7c <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d06f      	beq.n	8001d40 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a45      	ldr	r2, [pc, #276]	; (8001d80 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d067      	beq.n	8001d40 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a42      	ldr	r2, [pc, #264]	; (8001d84 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d05f      	beq.n	8001d40 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a3f      	ldr	r2, [pc, #252]	; (8001d88 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d057      	beq.n	8001d40 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a3c      	ldr	r2, [pc, #240]	; (8001d8c <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d04f      	beq.n	8001d40 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a39      	ldr	r2, [pc, #228]	; (8001d90 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d047      	beq.n	8001d40 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a36      	ldr	r2, [pc, #216]	; (8001d94 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d03f      	beq.n	8001d40 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a33      	ldr	r2, [pc, #204]	; (8001d98 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d037      	beq.n	8001d40 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a30      	ldr	r2, [pc, #192]	; (8001d9c <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d02f      	beq.n	8001d40 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a2d      	ldr	r2, [pc, #180]	; (8001da0 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d027      	beq.n	8001d40 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a2a      	ldr	r2, [pc, #168]	; (8001da4 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d01f      	beq.n	8001d40 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a27      	ldr	r2, [pc, #156]	; (8001da8 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d017      	beq.n	8001d40 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a24      	ldr	r2, [pc, #144]	; (8001dac <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d00f      	beq.n	8001d40 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a21      	ldr	r2, [pc, #132]	; (8001db0 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d007      	beq.n	8001d40 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a1e      	ldr	r2, [pc, #120]	; (8001db4 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d10a      	bne.n	8001d56 <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d54:	e009      	b.n	8001d6a <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40020010 	.word	0x40020010
 8001d7c:	40020028 	.word	0x40020028
 8001d80:	40020040 	.word	0x40020040
 8001d84:	40020058 	.word	0x40020058
 8001d88:	40020070 	.word	0x40020070
 8001d8c:	40020088 	.word	0x40020088
 8001d90:	400200a0 	.word	0x400200a0
 8001d94:	400200b8 	.word	0x400200b8
 8001d98:	40020410 	.word	0x40020410
 8001d9c:	40020428 	.word	0x40020428
 8001da0:	40020440 	.word	0x40020440
 8001da4:	40020458 	.word	0x40020458
 8001da8:	40020470 	.word	0x40020470
 8001dac:	40020488 	.word	0x40020488
 8001db0:	400204a0 	.word	0x400204a0
 8001db4:	400204b8 	.word	0x400204b8

08001db8 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <_ZN13STM32HardwareC1Ev+0x34>)
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	2400025c 	.word	0x2400025c

08001df0 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f804 	bl	8001e06 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3304      	adds	r3, #4
 8001e16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f00a f870 	bl	800bf00 <HAL_UART_Receive_DMA>
    }
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001e30:	f04f 33ff 	mov.w	r3, #4294967295
 8001e34:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff fefb 	bl	8001c38 <_ZN13STM32Hardware10getRdmaIndEv>
 8001e42:	4603      	mov	r3, r0
 8001e44:	429c      	cmp	r4, r3
 8001e46:	bf14      	ite	ne
 8001e48:	2301      	movne	r3, #1
 8001e4a:	2300      	moveq	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d012      	beq.n	8001e78 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e58:	1c59      	adds	r1, r3, #1
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	4413      	add	r3, r2
 8001e64:	791b      	ldrb	r3, [r3, #4]
 8001e66:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001e78:	68fb      	ldr	r3, [r7, #12]
    }
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd90      	pop	{r4, r7, pc}
	...

08001e84 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d108      	bne.n	8001eaa <_ZN13STM32Hardware5flushEv+0x26>
 8001e98:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <_ZN13STM32Hardware5flushEv+0xb4>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	f083 0301 	eor.w	r3, r3, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <_ZN13STM32Hardware5flushEv+0x26>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <_ZN13STM32Hardware5flushEv+0x28>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d03f      	beq.n	8001f30 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8001eb0:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <_ZN13STM32Hardware5flushEv+0xb4>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d031      	beq.n	8001f2a <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d20a      	bcs.n	8001eec <_ZN13STM32Hardware5flushEv+0x68>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	e006      	b.n	8001efa <_ZN13STM32Hardware5flushEv+0x76>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001f06:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	89fa      	ldrh	r2, [r7, #14]
 8001f10:	4619      	mov	r1, r3
 8001f12:	f009 ff75 	bl	800be00 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001f1c:	89fb      	ldrh	r3, [r7, #14]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001f2a:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <_ZN13STM32Hardware5flushEv+0xb4>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
      }
    }
 8001f30:	bf00      	nop
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	240003e0 	.word	0x240003e0

08001f3c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
      int n = length;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f52:	bfa8      	it	ge
 8001f54:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001f58:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f60:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	4293      	cmp	r3, r2
 8001f68:	bf28      	it	cs
 8001f6a:	4613      	movcs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	68b9      	ldr	r1, [r7, #8]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f00c f845 	bl	800e010 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d00b      	beq.n	8001fba <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	18d1      	adds	r1, r2, r3
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f00c f82b 	bl	800e010 <memcpy>
      }

      flush();
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f7ff ff62 	bl	8001e84 <_ZN13STM32Hardware5flushEv>
    }
 8001fc0:	bf00      	nop
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	f002 f8ae 	bl	8004130 <HAL_GetTick>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe ffb6 	bl	8000f5c <_ZN3ros3MsgC1Ev>
 8001ff0:	4a0e      	ldr	r2, [pc, #56]	; (800202c <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	0800e560 	.word	0x0800e560

08002030 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002030:	b480      	push	{r7}
 8002032:	b08b      	sub	sp, #44	; 0x2c
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002044:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800204c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800204e:	6838      	ldr	r0, [r7, #0]
 8002050:	4401      	add	r1, r0
 8002052:	b2d3      	uxtb	r3, r2
 8002054:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002056:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	0a02      	lsrs	r2, r0, #8
 8002064:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002068:	0a0b      	lsrs	r3, r1, #8
 800206a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800206c:	3101      	adds	r1, #1
 800206e:	6838      	ldr	r0, [r7, #0]
 8002070:	4401      	add	r1, r0
 8002072:	b2d3      	uxtb	r3, r2
 8002074:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002076:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	0c02      	lsrs	r2, r0, #16
 8002084:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002088:	0c0b      	lsrs	r3, r1, #16
 800208a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800208c:	3102      	adds	r1, #2
 800208e:	6838      	ldr	r0, [r7, #0]
 8002090:	4401      	add	r1, r0
 8002092:	b2d3      	uxtb	r3, r2
 8002094:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002096:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	0e02      	lsrs	r2, r0, #24
 80020a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020a8:	0e0b      	lsrs	r3, r1, #24
 80020aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ac:	3103      	adds	r1, #3
 80020ae:	6838      	ldr	r0, [r7, #0]
 80020b0:	4401      	add	r1, r0
 80020b2:	b2d3      	uxtb	r3, r2
 80020b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80020b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	000a      	movs	r2, r1
 80020c4:	2300      	movs	r3, #0
 80020c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020c8:	3104      	adds	r1, #4
 80020ca:	6838      	ldr	r0, [r7, #0]
 80020cc:	4401      	add	r1, r0
 80020ce:	b2d3      	uxtb	r3, r2
 80020d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80020d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	0a0a      	lsrs	r2, r1, #8
 80020e0:	2300      	movs	r3, #0
 80020e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020e4:	3105      	adds	r1, #5
 80020e6:	6838      	ldr	r0, [r7, #0]
 80020e8:	4401      	add	r1, r0
 80020ea:	b2d3      	uxtb	r3, r2
 80020ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80020ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	0c0a      	lsrs	r2, r1, #16
 80020fc:	2300      	movs	r3, #0
 80020fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002100:	3106      	adds	r1, #6
 8002102:	6838      	ldr	r0, [r7, #0]
 8002104:	4401      	add	r1, r0
 8002106:	b2d3      	uxtb	r3, r2
 8002108:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800210a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	0e0a      	lsrs	r2, r1, #24
 8002118:	2300      	movs	r3, #0
 800211a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800211c:	3107      	adds	r1, #7
 800211e:	6838      	ldr	r0, [r7, #0]
 8002120:	4401      	add	r1, r0
 8002122:	b2d3      	uxtb	r3, r2
 8002124:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	3308      	adds	r3, #8
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002132:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002136:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800213a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800213c:	6838      	ldr	r0, [r7, #0]
 800213e:	4401      	add	r1, r0
 8002140:	b2d3      	uxtb	r3, r2
 8002142:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002144:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	0a02      	lsrs	r2, r0, #8
 8002152:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002156:	0a0b      	lsrs	r3, r1, #8
 8002158:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800215a:	3101      	adds	r1, #1
 800215c:	6838      	ldr	r0, [r7, #0]
 800215e:	4401      	add	r1, r0
 8002160:	b2d3      	uxtb	r3, r2
 8002162:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002164:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	0c02      	lsrs	r2, r0, #16
 8002172:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002176:	0c0b      	lsrs	r3, r1, #16
 8002178:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800217a:	3102      	adds	r1, #2
 800217c:	6838      	ldr	r0, [r7, #0]
 800217e:	4401      	add	r1, r0
 8002180:	b2d3      	uxtb	r3, r2
 8002182:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002184:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	0e02      	lsrs	r2, r0, #24
 8002192:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002196:	0e0b      	lsrs	r3, r1, #24
 8002198:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800219a:	3103      	adds	r1, #3
 800219c:	6838      	ldr	r0, [r7, #0]
 800219e:	4401      	add	r1, r0
 80021a0:	b2d3      	uxtb	r3, r2
 80021a2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80021a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	000a      	movs	r2, r1
 80021b2:	2300      	movs	r3, #0
 80021b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021b6:	3104      	adds	r1, #4
 80021b8:	6838      	ldr	r0, [r7, #0]
 80021ba:	4401      	add	r1, r0
 80021bc:	b2d3      	uxtb	r3, r2
 80021be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80021c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	0a0a      	lsrs	r2, r1, #8
 80021ce:	2300      	movs	r3, #0
 80021d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021d2:	3105      	adds	r1, #5
 80021d4:	6838      	ldr	r0, [r7, #0]
 80021d6:	4401      	add	r1, r0
 80021d8:	b2d3      	uxtb	r3, r2
 80021da:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80021dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	0c0a      	lsrs	r2, r1, #16
 80021ea:	2300      	movs	r3, #0
 80021ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021ee:	3106      	adds	r1, #6
 80021f0:	6838      	ldr	r0, [r7, #0]
 80021f2:	4401      	add	r1, r0
 80021f4:	b2d3      	uxtb	r3, r2
 80021f6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80021f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	0e0a      	lsrs	r2, r1, #24
 8002206:	2300      	movs	r3, #0
 8002208:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800220a:	3107      	adds	r1, #7
 800220c:	6838      	ldr	r0, [r7, #0]
 800220e:	4401      	add	r1, r0
 8002210:	b2d3      	uxtb	r3, r2
 8002212:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	3308      	adds	r3, #8
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002220:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002224:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800222a:	6838      	ldr	r0, [r7, #0]
 800222c:	4401      	add	r1, r0
 800222e:	b2d3      	uxtb	r3, r2
 8002230:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002232:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	0a02      	lsrs	r2, r0, #8
 8002240:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002244:	0a0b      	lsrs	r3, r1, #8
 8002246:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002248:	3101      	adds	r1, #1
 800224a:	6838      	ldr	r0, [r7, #0]
 800224c:	4401      	add	r1, r0
 800224e:	b2d3      	uxtb	r3, r2
 8002250:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002252:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	f04f 0300 	mov.w	r3, #0
 800225e:	0c02      	lsrs	r2, r0, #16
 8002260:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002264:	0c0b      	lsrs	r3, r1, #16
 8002266:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002268:	3102      	adds	r1, #2
 800226a:	6838      	ldr	r0, [r7, #0]
 800226c:	4401      	add	r1, r0
 800226e:	b2d3      	uxtb	r3, r2
 8002270:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002272:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	f04f 0300 	mov.w	r3, #0
 800227e:	0e02      	lsrs	r2, r0, #24
 8002280:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002284:	0e0b      	lsrs	r3, r1, #24
 8002286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002288:	3103      	adds	r1, #3
 800228a:	6838      	ldr	r0, [r7, #0]
 800228c:	4401      	add	r1, r0
 800228e:	b2d3      	uxtb	r3, r2
 8002290:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002292:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	000a      	movs	r2, r1
 80022a0:	2300      	movs	r3, #0
 80022a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022a4:	3104      	adds	r1, #4
 80022a6:	6838      	ldr	r0, [r7, #0]
 80022a8:	4401      	add	r1, r0
 80022aa:	b2d3      	uxtb	r3, r2
 80022ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80022ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	0a0a      	lsrs	r2, r1, #8
 80022bc:	2300      	movs	r3, #0
 80022be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022c0:	3105      	adds	r1, #5
 80022c2:	6838      	ldr	r0, [r7, #0]
 80022c4:	4401      	add	r1, r0
 80022c6:	b2d3      	uxtb	r3, r2
 80022c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80022ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	0c0a      	lsrs	r2, r1, #16
 80022d8:	2300      	movs	r3, #0
 80022da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022dc:	3106      	adds	r1, #6
 80022de:	6838      	ldr	r0, [r7, #0]
 80022e0:	4401      	add	r1, r0
 80022e2:	b2d3      	uxtb	r3, r2
 80022e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80022e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	0e0a      	lsrs	r2, r1, #24
 80022f4:	2300      	movs	r3, #0
 80022f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022f8:	3107      	adds	r1, #7
 80022fa:	6838      	ldr	r0, [r7, #0]
 80022fc:	4401      	add	r1, r0
 80022fe:	b2d3      	uxtb	r3, r2
 8002300:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	3308      	adds	r3, #8
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800230a:	4618      	mov	r0, r3
 800230c:	372c      	adds	r7, #44	; 0x2c
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002316:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800231a:	b0eb      	sub	sp, #428	; 0x1ac
 800231c:	af00      	add	r7, sp, #0
 800231e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002322:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002338:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800233c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002340:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002344:	4413      	add	r3, r2
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2200      	movs	r2, #0
 800234c:	461c      	mov	r4, r3
 800234e:	4615      	mov	r5, r2
 8002350:	ea40 0804 	orr.w	r8, r0, r4
 8002354:	ea41 0905 	orr.w	r9, r1, r5
 8002358:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800235c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002360:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800236a:	4413      	add	r3, r2
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2200      	movs	r2, #0
 8002372:	469a      	mov	sl, r3
 8002374:	4693      	mov	fp, r2
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002382:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002386:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800238a:	ea40 0402 	orr.w	r4, r0, r2
 800238e:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002392:	430b      	orrs	r3, r1
 8002394:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002398:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800239c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80023a0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80023a4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80023a8:	1c9a      	adds	r2, r3, #2
 80023aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023ae:	4413      	add	r3, r2
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2200      	movs	r2, #0
 80023b6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80023ba:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80023ca:	464c      	mov	r4, r9
 80023cc:	0423      	lsls	r3, r4, #16
 80023ce:	4644      	mov	r4, r8
 80023d0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80023d4:	4644      	mov	r4, r8
 80023d6:	0422      	lsls	r2, r4, #16
 80023d8:	ea40 0402 	orr.w	r4, r0, r2
 80023dc:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80023e0:	430b      	orrs	r3, r1
 80023e2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80023e6:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80023ea:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80023ee:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80023f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80023f6:	1cda      	adds	r2, r3, #3
 80023f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023fc:	4413      	add	r3, r2
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2200      	movs	r2, #0
 8002404:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002408:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800240c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002410:	4623      	mov	r3, r4
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002418:	4623      	mov	r3, r4
 800241a:	061b      	lsls	r3, r3, #24
 800241c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002420:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002424:	4623      	mov	r3, r4
 8002426:	4303      	orrs	r3, r0
 8002428:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800242c:	462b      	mov	r3, r5
 800242e:	430b      	orrs	r3, r1
 8002430:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002434:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002438:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800243c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002440:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002444:	1d1a      	adds	r2, r3, #4
 8002446:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800244a:	4413      	add	r3, r2
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2200      	movs	r2, #0
 8002452:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002456:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002466:	0023      	movs	r3, r4
 8002468:	2200      	movs	r2, #0
 800246a:	ea40 0402 	orr.w	r4, r0, r2
 800246e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002472:	430b      	orrs	r3, r1
 8002474:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002478:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800247c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002480:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002484:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002488:	1d5a      	adds	r2, r3, #5
 800248a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800248e:	4413      	add	r3, r2
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2200      	movs	r2, #0
 8002496:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800249a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80024aa:	0223      	lsls	r3, r4, #8
 80024ac:	2200      	movs	r2, #0
 80024ae:	ea40 0402 	orr.w	r4, r0, r2
 80024b2:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80024b6:	430b      	orrs	r3, r1
 80024b8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80024bc:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80024c0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80024c4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80024c8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80024cc:	1d9a      	adds	r2, r3, #6
 80024ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80024d2:	4413      	add	r3, r2
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2200      	movs	r2, #0
 80024da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80024de:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80024ee:	0423      	lsls	r3, r4, #16
 80024f0:	2200      	movs	r2, #0
 80024f2:	ea40 0402 	orr.w	r4, r0, r2
 80024f6:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80024fa:	430b      	orrs	r3, r1
 80024fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002500:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002504:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002508:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800250c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002510:	1dda      	adds	r2, r3, #7
 8002512:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002516:	4413      	add	r3, r2
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2200      	movs	r2, #0
 800251e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002522:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002532:	0623      	lsls	r3, r4, #24
 8002534:	2200      	movs	r2, #0
 8002536:	ea40 0402 	orr.w	r4, r0, r2
 800253a:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800253e:	430b      	orrs	r3, r1
 8002540:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002544:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002548:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 800254c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002550:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002554:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002558:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800255c:	3308      	adds	r3, #8
 800255e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800256e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002572:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002576:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800257a:	4413      	add	r3, r2
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2200      	movs	r2, #0
 8002582:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002586:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800258a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800258e:	4623      	mov	r3, r4
 8002590:	4303      	orrs	r3, r0
 8002592:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002596:	462b      	mov	r3, r5
 8002598:	430b      	orrs	r3, r1
 800259a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800259e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80025a2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80025a6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80025aa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025b4:	4413      	add	r3, r2
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2200      	movs	r2, #0
 80025bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80025c0:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80025d0:	464c      	mov	r4, r9
 80025d2:	0223      	lsls	r3, r4, #8
 80025d4:	4644      	mov	r4, r8
 80025d6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80025da:	4644      	mov	r4, r8
 80025dc:	0222      	lsls	r2, r4, #8
 80025de:	ea40 0402 	orr.w	r4, r0, r2
 80025e2:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80025e6:	430b      	orrs	r3, r1
 80025e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80025ec:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80025f0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025f4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80025f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025fc:	1c9a      	adds	r2, r3, #2
 80025fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002602:	4413      	add	r3, r2
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2200      	movs	r2, #0
 800260a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800260e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800261e:	464c      	mov	r4, r9
 8002620:	0423      	lsls	r3, r4, #16
 8002622:	4644      	mov	r4, r8
 8002624:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002628:	4644      	mov	r4, r8
 800262a:	0422      	lsls	r2, r4, #16
 800262c:	ea40 0402 	orr.w	r4, r0, r2
 8002630:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002634:	430b      	orrs	r3, r1
 8002636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800263a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800263e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002642:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002646:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800264a:	1cda      	adds	r2, r3, #3
 800264c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002650:	4413      	add	r3, r2
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2200      	movs	r2, #0
 8002658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800265c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002660:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002664:	4623      	mov	r3, r4
 8002666:	0a1b      	lsrs	r3, r3, #8
 8002668:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800266c:	4623      	mov	r3, r4
 800266e:	061b      	lsls	r3, r3, #24
 8002670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002674:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002678:	4623      	mov	r3, r4
 800267a:	4303      	orrs	r3, r0
 800267c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002680:	462b      	mov	r3, r5
 8002682:	430b      	orrs	r3, r1
 8002684:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002688:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800268c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002690:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002694:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002698:	1d1a      	adds	r2, r3, #4
 800269a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800269e:	4413      	add	r3, r2
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2200      	movs	r2, #0
 80026a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026aa:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80026ba:	0023      	movs	r3, r4
 80026bc:	2200      	movs	r2, #0
 80026be:	ea40 0402 	orr.w	r4, r0, r2
 80026c2:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80026c6:	430b      	orrs	r3, r1
 80026c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80026cc:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80026d0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80026d4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80026d8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026dc:	1d5a      	adds	r2, r3, #5
 80026de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026e2:	4413      	add	r3, r2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2200      	movs	r2, #0
 80026ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026ee:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80026fe:	0223      	lsls	r3, r4, #8
 8002700:	2200      	movs	r2, #0
 8002702:	ea40 0402 	orr.w	r4, r0, r2
 8002706:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800270a:	430b      	orrs	r3, r1
 800270c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002710:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002714:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002718:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800271c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002720:	1d9a      	adds	r2, r3, #6
 8002722:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002726:	4413      	add	r3, r2
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2200      	movs	r2, #0
 800272e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002732:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002742:	0423      	lsls	r3, r4, #16
 8002744:	2200      	movs	r2, #0
 8002746:	ea40 0402 	orr.w	r4, r0, r2
 800274a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800274e:	430b      	orrs	r3, r1
 8002750:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002754:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002758:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800275c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002760:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002764:	1dda      	adds	r2, r3, #7
 8002766:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800276a:	4413      	add	r3, r2
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2200      	movs	r2, #0
 8002772:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002776:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002786:	0623      	lsls	r3, r4, #24
 8002788:	2200      	movs	r2, #0
 800278a:	ea40 0402 	orr.w	r4, r0, r2
 800278e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002792:	430b      	orrs	r3, r1
 8002794:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002798:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800279c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 80027a0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80027a4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80027a8:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80027ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027b0:	3308      	adds	r3, #8
 80027b2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80027c2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80027c6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80027ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027ce:	4413      	add	r3, r2
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2200      	movs	r2, #0
 80027d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027da:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80027de:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80027e2:	4623      	mov	r3, r4
 80027e4:	4303      	orrs	r3, r0
 80027e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80027e8:	462b      	mov	r3, r5
 80027ea:	430b      	orrs	r3, r1
 80027ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027ee:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80027f2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027f6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80027fa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002804:	4413      	add	r3, r2
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2200      	movs	r2, #0
 800280c:	673b      	str	r3, [r7, #112]	; 0x70
 800280e:	677a      	str	r2, [r7, #116]	; 0x74
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800281c:	464c      	mov	r4, r9
 800281e:	0223      	lsls	r3, r4, #8
 8002820:	4644      	mov	r4, r8
 8002822:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002826:	4644      	mov	r4, r8
 8002828:	0222      	lsls	r2, r4, #8
 800282a:	ea40 0402 	orr.w	r4, r0, r2
 800282e:	66bc      	str	r4, [r7, #104]	; 0x68
 8002830:	430b      	orrs	r3, r1
 8002832:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002834:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002838:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800283c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002840:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002844:	1c9a      	adds	r2, r3, #2
 8002846:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800284a:	4413      	add	r3, r2
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2200      	movs	r2, #0
 8002852:	663b      	str	r3, [r7, #96]	; 0x60
 8002854:	667a      	str	r2, [r7, #100]	; 0x64
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002862:	464c      	mov	r4, r9
 8002864:	0423      	lsls	r3, r4, #16
 8002866:	4644      	mov	r4, r8
 8002868:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800286c:	4644      	mov	r4, r8
 800286e:	0422      	lsls	r2, r4, #16
 8002870:	ea40 0402 	orr.w	r4, r0, r2
 8002874:	65bc      	str	r4, [r7, #88]	; 0x58
 8002876:	430b      	orrs	r3, r1
 8002878:	65fb      	str	r3, [r7, #92]	; 0x5c
 800287a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800287e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002882:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002886:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800288a:	1cda      	adds	r2, r3, #3
 800288c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002890:	4413      	add	r3, r2
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2200      	movs	r2, #0
 8002898:	653b      	str	r3, [r7, #80]	; 0x50
 800289a:	657a      	str	r2, [r7, #84]	; 0x54
 800289c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80028a0:	4623      	mov	r3, r4
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028a6:	4623      	mov	r3, r4
 80028a8:	061b      	lsls	r3, r3, #24
 80028aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80028ac:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80028b0:	4623      	mov	r3, r4
 80028b2:	4303      	orrs	r3, r0
 80028b4:	643b      	str	r3, [r7, #64]	; 0x40
 80028b6:	462b      	mov	r3, r5
 80028b8:	430b      	orrs	r3, r1
 80028ba:	647b      	str	r3, [r7, #68]	; 0x44
 80028bc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80028c0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80028c4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80028c8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028cc:	1d1a      	adds	r2, r3, #4
 80028ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028d2:	4413      	add	r3, r2
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2200      	movs	r2, #0
 80028da:	63bb      	str	r3, [r7, #56]	; 0x38
 80028dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80028e8:	0023      	movs	r3, r4
 80028ea:	2200      	movs	r2, #0
 80028ec:	ea40 0402 	orr.w	r4, r0, r2
 80028f0:	633c      	str	r4, [r7, #48]	; 0x30
 80028f2:	430b      	orrs	r3, r1
 80028f4:	637b      	str	r3, [r7, #52]	; 0x34
 80028f6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80028fa:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80028fe:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002902:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002906:	1d5a      	adds	r2, r3, #5
 8002908:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800290c:	4413      	add	r3, r2
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2200      	movs	r2, #0
 8002914:	62bb      	str	r3, [r7, #40]	; 0x28
 8002916:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002922:	0223      	lsls	r3, r4, #8
 8002924:	2200      	movs	r2, #0
 8002926:	ea40 0402 	orr.w	r4, r0, r2
 800292a:	623c      	str	r4, [r7, #32]
 800292c:	430b      	orrs	r3, r1
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
 8002930:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002934:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002938:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800293c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002940:	3306      	adds	r3, #6
 8002942:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002946:	4413      	add	r3, r2
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2200      	movs	r2, #0
 800294e:	61bb      	str	r3, [r7, #24]
 8002950:	61fa      	str	r2, [r7, #28]
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	69bc      	ldr	r4, [r7, #24]
 800295c:	0423      	lsls	r3, r4, #16
 800295e:	2200      	movs	r2, #0
 8002960:	ea40 0402 	orr.w	r4, r0, r2
 8002964:	613c      	str	r4, [r7, #16]
 8002966:	430b      	orrs	r3, r1
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800296e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002972:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002976:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800297a:	3307      	adds	r3, #7
 800297c:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002980:	4413      	add	r3, r2
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2200      	movs	r2, #0
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	60fa      	str	r2, [r7, #12]
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	68bc      	ldr	r4, [r7, #8]
 8002996:	0623      	lsls	r3, r4, #24
 8002998:	2200      	movs	r2, #0
 800299a:	ea40 0402 	orr.w	r4, r0, r2
 800299e:	603c      	str	r4, [r7, #0]
 80029a0:	430b      	orrs	r3, r1
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80029a8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 80029ac:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80029b0:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 80029b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80029b8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029bc:	3308      	adds	r3, #8
 80029be:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 80029c2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 80029c6:	4618      	mov	r0, r3
 80029c8:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 80029cc:	46bd      	mov	sp, r7
 80029ce:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80029d2:	4770      	bx	lr

080029d4 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	0800e42c 	.word	0x0800e42c

080029f0 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	0800e444 	.word	0x0800e444

08002a0c <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe faa0 	bl	8000f5c <_ZN3ros3MsgC1Ev>
 8002a1c:	4a08      	ldr	r2, [pc, #32]	; (8002a40 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3308      	adds	r3, #8
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fada 	bl	8001fe0 <_ZN13geometry_msgs7Vector3C1Ev>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3328      	adds	r3, #40	; 0x28
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fad5 	bl	8001fe0 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	0800e548 	.word	0x0800e548

08002a44 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f103 0008 	add.w	r0, r3, #8
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f7ff fae6 	bl	8002030 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4413      	add	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	4413      	add	r3, r2
 8002a78:	4619      	mov	r1, r3
 8002a7a:	f7ff fad9 	bl	8002030 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4413      	add	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]
      return offset;
 8002a86:	68fb      	ldr	r3, [r7, #12]
    }
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f103 0008 	add.w	r0, r3, #8
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f7ff fc33 	bl	8002316 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f7ff fc26 	bl	8002316 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002aca:	4602      	mov	r2, r0
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
     return offset;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
    }
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	0800e468 	.word	0x0800e468

08002af8 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	0800e47c 	.word	0x0800e47c

08002b14 <_Z12vel_callbackRKN13geometry_msgs5TwistE>:
#include "mainpp.h"
#include "ros.h"
#include "geometry_msgs/Twist.h"

void vel_callback(const geometry_msgs::Twist &msg)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	ed93 7b04 	vldr	d7, [r3, #16]
 8002b22:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x44>)
 8002b28:	edc3 7a00 	vstr	s15, [r3]
	Vy = msg.linear.y;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	ed93 7b06 	vldr	d7, [r3, #24]
 8002b32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x48>)
 8002b38:	edc3 7a00 	vstr	s15, [r3]
	W=msg.angular.z;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002b42:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x4c>)
 8002b48:	edc3 7a00 	vstr	s15, [r3]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	24000d80 	.word	0x24000d80
 8002b5c:	24000d84 	.word	0x24000d84
 8002b60:	24000d88 	.word	0x24000d88

08002b64 <HAL_UART_TxCpltCallback>:

geometry_msgs::Twist speed;
ros::Publisher pub("speed_toSTM",&speed);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8002b6c:	4805      	ldr	r0, [pc, #20]	; (8002b84 <HAL_UART_TxCpltCallback+0x20>)
 8002b6e:	f000 f977 	bl	8002e60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002b72:	4603      	mov	r3, r0
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff f985 	bl	8001e84 <_ZN13STM32Hardware5flushEv>
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	240003e4 	.word	0x240003e4

08002b88 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8002b90:	4805      	ldr	r0, [pc, #20]	; (8002ba8 <HAL_UART_RxCpltCallback+0x20>)
 8002b92:	f000 f965 	bl	8002e60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff f934 	bl	8001e06 <_ZN13STM32Hardware10reset_rbufEv>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	240003e4 	.word	0x240003e4

08002bac <setup>:
void setup(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
    nh.initNode();
 8002bb0:	4804      	ldr	r0, [pc, #16]	; (8002bc4 <setup+0x18>)
 8002bb2:	f000 f961 	bl	8002e78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 8002bb6:	4904      	ldr	r1, [pc, #16]	; (8002bc8 <setup+0x1c>)
 8002bb8:	4802      	ldr	r0, [pc, #8]	; (8002bc4 <setup+0x18>)
 8002bba:	f000 f97a 	bl	8002eb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	240003e4 	.word	0x240003e4
 8002bc8:	24000d20 	.word	0x24000d20

08002bcc <loop>:
void loop(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8002bd0:	4802      	ldr	r0, [pc, #8]	; (8002bdc <loop+0x10>)
 8002bd2:	f000 f999 	bl	8002f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	240003e4 	.word	0x240003e4

08002be0 <errcallback>:
void errcallback(void) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
	nh.getHardware()->init();
 8002be4:	4804      	ldr	r0, [pc, #16]	; (8002bf8 <errcallback+0x18>)
 8002be6:	f000 f93b 	bl	8002e60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002bea:	4603      	mov	r3, r0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff f8ff 	bl	8001df0 <_ZN13STM32Hardware4initEv>
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	240003e4 	.word	0x240003e4

08002bfc <realspeed>:
void realspeed(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
	speed.linear.x=rVx;
 8002c00:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <realspeed+0x40>)
 8002c02:	edd3 7a00 	vldr	s15, [r3]
 8002c06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <realspeed+0x44>)
 8002c0c:	ed83 7b04 	vstr	d7, [r3, #16]
	speed.linear.y=rVy;
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <realspeed+0x48>)
 8002c12:	edd3 7a00 	vldr	s15, [r3]
 8002c16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c1a:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <realspeed+0x44>)
 8002c1c:	ed83 7b06 	vstr	d7, [r3, #24]
	speed.angular.z=rW;
 8002c20:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <realspeed+0x4c>)
 8002c22:	edd3 7a00 	vldr	s15, [r3]
 8002c26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c2a:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <realspeed+0x44>)
 8002c2c:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	pub.publish(&speed);
 8002c30:	4903      	ldr	r1, [pc, #12]	; (8002c40 <realspeed+0x44>)
 8002c32:	4806      	ldr	r0, [pc, #24]	; (8002c4c <realspeed+0x50>)
 8002c34:	f7fe ffdf 	bl	8001bf6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8002c38:	bf00      	nop
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	24000d8c 	.word	0x24000d8c
 8002c40:	24000d98 	.word	0x24000d98
 8002c44:	24000d90 	.word	0x24000d90
 8002c48:	24000d94 	.word	0x24000d94
 8002c4c:	24000de0 	.word	0x24000de0

08002c50 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d80d      	bhi.n	8002c80 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	fa22 f103 	lsr.w	r1, r2, r3
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4413      	add	r3, r2
 8002c74:	b2ca      	uxtb	r2, r1
 8002c76:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	e7ee      	b.n	8002c5e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002c80:	bf00      	nop
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d811      	bhi.n	8002cca <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6839      	ldr	r1, [r7, #0]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	440a      	add	r2, r1
 8002cb0:	7812      	ldrb	r2, [r2, #0]
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	00d2      	lsls	r2, r2, #3
 8002cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	e7ea      	b.n	8002ca0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	0800e590 	.word	0x0800e590

08002cf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff ffe8 	bl	8002cd8 <_ZN3ros15NodeHandleBase_C1Ev>
 8002d08:	4a3a      	ldr	r2, [pc, #232]	; (8002df4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3304      	adds	r3, #4
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff f850 	bl	8001db8 <_ZN13STM32HardwareC1Ev>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fc8c 	bl	8001644 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b18      	cmp	r3, #24
 8002d34:	d80b      	bhi.n	8002d4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	2200      	movs	r2, #0
 8002d44:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	e7f0      	b.n	8002d30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002d4e:	2300      	movs	r3, #0
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	2b18      	cmp	r3, #24
 8002d56:	d80a      	bhi.n	8002d6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002d60:	2100      	movs	r1, #0
 8002d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	e7f1      	b.n	8002d52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d78:	d20a      	bcs.n	8002d90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	e7f0      	b.n	8002d72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002d90:	2300      	movs	r3, #0
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d9a:	d20a      	bcs.n	8002db2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4413      	add	r3, r2
 8002da2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002da6:	2200      	movs	r2, #0
 8002da8:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	3301      	adds	r3, #1
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	e7f0      	b.n	8002d94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	0800e534 	.word	0x0800e534

08002df8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	4a04      	ldr	r2, [pc, #16]	; (8002e14 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	0800e578 	.word	0x0800e578

08002e18 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ffe5 	bl	8002df8 <_ZN3ros11Subscriber_C1Ev>
 8002e2e:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3310      	adds	r3, #16
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fde7 	bl	8002a0c <_ZN13geometry_msgs5TwistC1Ev>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	659a      	str	r2, [r3, #88]	; 0x58
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	609a      	str	r2, [r3, #8]
  };
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	0800e51c 	.word	0x0800e51c

08002e60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3304      	adds	r3, #4
  }
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3304      	adds	r3, #4
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe ffb3 	bl	8001df0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8002eb2:	b480      	push	{r7}
 8002eb4:	b085      	sub	sp, #20
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b18      	cmp	r3, #24
 8002ec4:	dc19      	bgt.n	8002efa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10d      	bne.n	8002ef2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8002ed6:	6839      	ldr	r1, [r7, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	605a      	str	r2, [r3, #4]
        return true;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e004      	b.n	8002efc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	e7e2      	b.n	8002ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8002efa:	2300      	movs	r3, #0
  }
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3304      	adds	r3, #4
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff f857 	bl	8001fc8 <_ZN13STM32Hardware4timeEv>
 8002f1a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d903      	bls.n	8002f36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d009      	beq.n	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d903      	bls.n	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d014      	beq.n	8002f88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3304      	adds	r3, #4
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff f830 	bl	8001fc8 <_ZN13STM32Hardware4timeEv>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1ad2      	subs	r2, r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002f74:	429a      	cmp	r2, r3
 8002f76:	bf8c      	ite	hi
 8002f78:	2301      	movhi	r3, #1
 8002f7a:	2300      	movls	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8002f82:	f06f 0301 	mvn.w	r3, #1
 8002f86:	e194      	b.n	80032b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fe ff4b 	bl	8001e28 <_ZN13STM32Hardware4readEv>
 8002f92:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f2c0 8174 	blt.w	8003284 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	441a      	add	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002fb2:	2b07      	cmp	r3, #7
 8002fb4:	d11e      	bne.n	8002ff4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8002fbc:	1c59      	adds	r1, r3, #1
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	b2d1      	uxtb	r1, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4413      	add	r3, r2
 8002fcc:	460a      	mov	r2, r1
 8002fce:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002fd8:	1e5a      	subs	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1b4      	bne.n	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2208      	movs	r2, #8
 8002fee:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002ff2:	e7af      	b.n	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d128      	bne.n	8003050 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2bff      	cmp	r3, #255	; 0xff
 8003002:	d10d      	bne.n	8003020 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f103 0214 	add.w	r2, r3, #20
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800301e:	e799      	b.n	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3304      	adds	r3, #4
 8003024:	4618      	mov	r0, r3
 8003026:	f7fe ffcf 	bl	8001fc8 <_ZN13STM32Hardware4timeEv>
 800302a:	4602      	mov	r2, r0
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	f241 3288 	movw	r2, #5000	; 0x1388
 8003034:	4293      	cmp	r3, r2
 8003036:	bf8c      	ite	hi
 8003038:	2301      	movhi	r3, #1
 800303a:	2300      	movls	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d088      	beq.n	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800304a:	f06f 0301 	mvn.w	r3, #1
 800304e:	e130      	b.n	80032b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003056:	2b01      	cmp	r3, #1
 8003058:	d118      	bne.n	800308c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2bfe      	cmp	r3, #254	; 0xfe
 800305e:	d107      	bne.n	8003070 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800306e:	e771      	b.n	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800307e:	2b00      	cmp	r3, #0
 8003080:	f47f af68 	bne.w	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f918 	bl	80032ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800308a:	e763      	b.n	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003092:	2b02      	cmp	r3, #2
 8003094:	d113      	bne.n	80030be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80030bc:	e74a      	b.n	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d110      	bne.n	80030ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	021b      	lsls	r3, r3, #8
 80030d2:	441a      	add	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80030e8:	e734      	b.n	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d116      	bne.n	8003122 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80030fa:	425a      	negs	r2, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	bf58      	it	pl
 8003102:	4253      	negpl	r3, r2
 8003104:	2bff      	cmp	r3, #255	; 0xff
 8003106:	d107      	bne.n	8003118 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003116:	e71d      	b.n	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003120:	e718      	b.n	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003128:	2b05      	cmp	r3, #5
 800312a:	d10f      	bne.n	800314c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800314a:	e703      	b.n	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003152:	2b06      	cmp	r3, #6
 8003154:	d117      	bne.n	8003186 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	021b      	lsls	r3, r3, #8
 8003160:	441a      	add	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2207      	movs	r2, #7
 800316c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003176:	2b00      	cmp	r3, #0
 8003178:	f47f aeec 	bne.w	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2208      	movs	r2, #8
 8003180:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003184:	e6e6      	b.n	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800318c:	2b08      	cmp	r3, #8
 800318e:	f47f aee1 	bne.w	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80031a0:	425a      	negs	r2, r3
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	bf58      	it	pl
 80031a8:	4253      	negpl	r3, r2
 80031aa:	2bff      	cmp	r3, #255	; 0xff
 80031ac:	f47f aed2 	bne.w	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d110      	bne.n	80031dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f87d 	bl	80032ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f898 	bl	80032f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295
 80031da:	e06a      	b.n	80032b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80031e2:	2b0a      	cmp	r3, #10
 80031e4:	d107      	bne.n	80031f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80031ec:	4619      	mov	r1, r3
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f960 	bl	80034b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80031f4:	e6ae      	b.n	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80031fc:	2b06      	cmp	r3, #6
 80031fe:	d10e      	bne.n	800321e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800320c:	4619      	mov	r1, r3
 800320e:	4610      	mov	r0, r2
 8003210:	f7fe fb4d 	bl	80018ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800321c:	e69a      	b.n	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003224:	2b0b      	cmp	r3, #11
 8003226:	d104      	bne.n	8003232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003230:	e690      	b.n	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003238:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f43f ae84 	beq.w	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003252:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f202 2222 	addw	r2, r2, #546	; 0x222
 800325c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003266:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800327e:	4611      	mov	r1, r2
 8003280:	4798      	blx	r3
    while (true)
 8003282:	e667      	b.n	8002f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003284:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00f      	beq.n	80032b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800329e:	4293      	cmp	r3, r2
 80032a0:	d906      	bls.n	80032b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f809 	bl	80032ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80032b0:	2300      	movs	r3, #0
  }
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b086      	sub	sp, #24
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80032c2:	f107 030c 	add.w	r3, r7, #12
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd fe58 	bl	8000f7c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f107 020c 	add.w	r2, r7, #12
 80032d6:	210a      	movs	r1, #10
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
    rt_time = hardware_.time();
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3304      	adds	r3, #4
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fe fe71 	bl	8001fc8 <_ZN13STM32Hardware4timeEv>
 80032e6:	4602      	mov	r2, r0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80032f6:	b590      	push	{r4, r7, lr}
 80032f8:	b08b      	sub	sp, #44	; 0x2c
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80032fe:	f107 030c 	add.w	r3, r7, #12
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd ff2a 	bl	800115c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003308:	2300      	movs	r3, #0
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	2b18      	cmp	r3, #24
 8003310:	dc63      	bgt.n	80033da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d056      	beq.n	80033d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	b29b      	uxth	r3, r3
 8003336:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	6859      	ldr	r1, [r3, #4]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3308      	adds	r3, #8
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4608      	mov	r0, r1
 8003372:	4798      	blx	r3
 8003374:	4603      	mov	r3, r0
 8003376:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	6859      	ldr	r1, [r3, #4]
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	330c      	adds	r3, #12
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4608      	mov	r0, r1
 80033a0:	4798      	blx	r3
 80033a2:	4603      	mov	r3, r0
 80033a4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80033a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033aa:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681c      	ldr	r4, [r3, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fe fc2c 	bl	8001c1e <_ZN3ros9Publisher15getEndpointTypeEv>
 80033c6:	4601      	mov	r1, r0
 80033c8:	f107 030c 	add.w	r3, r7, #12
 80033cc:	461a      	mov	r2, r3
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	3301      	adds	r3, #1
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
 80033d8:	e798      	b.n	800330c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80033da:	2300      	movs	r3, #0
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	2b18      	cmp	r3, #24
 80033e2:	dc5f      	bgt.n	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80033ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d053      	beq.n	800349c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80033fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	b29b      	uxth	r3, r3
 8003404:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800340e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800341e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003426:	f202 2222 	addw	r2, r2, #546	; 0x222
 800342a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3308      	adds	r3, #8
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4608      	mov	r0, r1
 8003436:	4798      	blx	r3
 8003438:	4603      	mov	r3, r0
 800343a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003440:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003444:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	330c      	adds	r3, #12
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4608      	mov	r0, r1
 800345c:	4798      	blx	r3
 800345e:	4603      	mov	r3, r0
 8003460:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003466:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681c      	ldr	r4, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003472:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003476:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3304      	adds	r3, #4
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4608      	mov	r0, r1
 800348e:	4798      	blx	r3
 8003490:	4601      	mov	r1, r0
 8003492:	f107 030c 	add.w	r3, r7, #12
 8003496:	461a      	mov	r2, r3
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	3301      	adds	r3, #1
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
 80034a2:	e79c      	b.n	80033de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80034ac:	bf00      	nop
 80034ae:	372c      	adds	r7, #44	; 0x2c
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd90      	pop	{r4, r7, pc}

080034b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80034be:	f107 0308 	add.w	r3, r7, #8
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd fd5a 	bl	8000f7c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3304      	adds	r3, #4
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fe fd7b 	bl	8001fc8 <_ZN13STM32Hardware4timeEv>
 80034d2:	4602      	mov	r2, r0
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80034de:	f107 0308 	add.w	r3, r7, #8
 80034e2:	6839      	ldr	r1, [r7, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fd fdb9 	bl	800105c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	4915      	ldr	r1, [pc, #84]	; (8003544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80034f0:	fba1 1303 	umull	r1, r3, r1, r3
 80034f4:	099b      	lsrs	r3, r3, #6
 80034f6:	4413      	add	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80034fa:	6939      	ldr	r1, [r7, #16]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	4b11      	ldr	r3, [pc, #68]	; (8003544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003500:	fba3 0302 	umull	r0, r3, r3, r2
 8003504:	099b      	lsrs	r3, r3, #6
 8003506:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800350a:	fb00 f303 	mul.w	r3, r0, r3
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	4a0d      	ldr	r2, [pc, #52]	; (8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003512:	fb02 f303 	mul.w	r3, r2, r3
 8003516:	440b      	add	r3, r1
 8003518:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800351a:	f107 0308 	add.w	r3, r7, #8
 800351e:	3304      	adds	r3, #4
 8003520:	4619      	mov	r1, r3
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f8a6 	bl	8003674 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3304      	adds	r3, #4
 800352c:	4618      	mov	r0, r3
 800352e:	f7fe fd4b 	bl	8001fc8 <_ZN13STM32Hardware4timeEv>
 8003532:	4602      	mov	r2, r0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800353a:	bf00      	nop
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	10624dd3 	.word	0x10624dd3
 8003548:	000f4240 	.word	0x000f4240

0800354c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b63      	cmp	r3, #99	; 0x63
 800355c:	dd09      	ble.n	8003572 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003564:	f083 0301 	eor.w	r3, r3, #1
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800356e:	2300      	movs	r3, #0
 8003570:	e079      	b.n	8003666 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800357e:	3207      	adds	r2, #7
 8003580:	4611      	mov	r1, r2
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	4798      	blx	r3
 8003586:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	22ff      	movs	r2, #255	; 0xff
 800358c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	22fe      	movs	r2, #254	; 0xfe
 8003594:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	b2da      	uxtb	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	0a1b      	lsrs	r3, r3, #8
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80035be:	4413      	add	r3, r2
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	b21b      	sxth	r3, r3
 80035da:	121b      	asrs	r3, r3, #8
 80035dc:	b21b      	sxth	r3, r3
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80035ea:	2305      	movs	r3, #5
 80035ec:	61bb      	str	r3, [r7, #24]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	3306      	adds	r3, #6
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	dc0d      	bgt.n	8003614 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	4413      	add	r3, r2
 80035fe:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	461a      	mov	r2, r3
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	4413      	add	r3, r2
 800360a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	3301      	adds	r3, #1
 8003610:	61bb      	str	r3, [r7, #24]
 8003612:	e7ec      	b.n	80035ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	3307      	adds	r3, #7
 8003618:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	425a      	negs	r2, r3
 800361e:	b2db      	uxtb	r3, r3
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	bf58      	it	pl
 8003624:	4253      	negpl	r3, r2
 8003626:	b2da      	uxtb	r2, r3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	1c59      	adds	r1, r3, #1
 800362c:	6179      	str	r1, [r7, #20]
 800362e:	43d2      	mvns	r2, r2
 8003630:	b2d1      	uxtb	r1, r2
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4413      	add	r3, r2
 8003636:	460a      	mov	r2, r1
 8003638:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003642:	dc0a      	bgt.n	800365a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1d18      	adds	r0, r3, #4
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4619      	mov	r1, r3
 8003652:	f7fe fc73 	bl	8001f3c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	e005      	b.n	8003666 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800365a:	4905      	ldr	r1, [pc, #20]	; (8003670 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f849 	bl	80036f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003662:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003666:	4618      	mov	r0, r3
 8003668:	3720      	adds	r7, #32
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	0800e4a0 	.word	0x0800e4a0

08003674 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3304      	adds	r3, #4
 8003682:	4618      	mov	r0, r3
 8003684:	f7fe fca0 	bl	8001fc8 <_ZN13STM32Hardware4timeEv>
 8003688:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4915      	ldr	r1, [pc, #84]	; (80036e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003692:	fba1 1303 	umull	r1, r3, r1, r3
 8003696:	099b      	lsrs	r3, r3, #6
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	1e5a      	subs	r2, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6859      	ldr	r1, [r3, #4]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4b0f      	ldr	r3, [pc, #60]	; (80036e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80036aa:	fba3 0302 	umull	r0, r3, r3, r2
 80036ae:	099b      	lsrs	r3, r3, #6
 80036b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036b4:	fb00 f303 	mul.w	r3, r0, r3
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	4a0c      	ldr	r2, [pc, #48]	; (80036ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80036bc:	fb02 f303 	mul.w	r3, r2, r3
 80036c0:	1aca      	subs	r2, r1, r3
 80036c2:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80036c4:	4413      	add	r3, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80036d8:	4619      	mov	r1, r3
 80036da:	4610      	mov	r0, r2
 80036dc:	f7fc ffa0 	bl	8000620 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80036e0:	bf00      	nop
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	10624dd3 	.word	0x10624dd3
 80036ec:	000f4240 	.word	0x000f4240
 80036f0:	3b9aca00 	.word	0x3b9aca00

080036f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	2103      	movs	r1, #3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f804 	bl	8003710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	460b      	mov	r3, r1
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800371e:	f107 0314 	add.w	r3, r7, #20
 8003722:	4618      	mov	r0, r3
 8003724:	f7fd fede 	bl	80014e4 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003728:	7afb      	ldrb	r3, [r7, #11]
 800372a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f107 0214 	add.w	r2, r7, #20
 800373a:	2107      	movs	r1, #7
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	4798      	blx	r3
  }
 8003740:	bf00      	nop
 8003742:	3720      	adds	r7, #32
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <_Z41__static_initialization_and_destruction_0ii>:
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d116      	bne.n	8003786 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800375e:	4293      	cmp	r3, r2
 8003760:	d111      	bne.n	8003786 <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8003762:	480b      	ldr	r0, [pc, #44]	; (8003790 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003764:	f7ff fac8 	bl	8002cf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub("cmdvel_toSTM", vel_callback);
 8003768:	2301      	movs	r3, #1
 800376a:	4a0a      	ldr	r2, [pc, #40]	; (8003794 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800376c:	490a      	ldr	r1, [pc, #40]	; (8003798 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800376e:	480b      	ldr	r0, [pc, #44]	; (800379c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003770:	f7ff fb52 	bl	8002e18 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
geometry_msgs::Twist speed;
 8003774:	480a      	ldr	r0, [pc, #40]	; (80037a0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003776:	f7ff f949 	bl	8002a0c <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher pub("speed_toSTM",&speed);
 800377a:	2300      	movs	r3, #0
 800377c:	4a08      	ldr	r2, [pc, #32]	; (80037a0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800377e:	4909      	ldr	r1, [pc, #36]	; (80037a4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003780:	4809      	ldr	r0, [pc, #36]	; (80037a8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003782:	f7fe fa21 	bl	8001bc8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	240003e4 	.word	0x240003e4
 8003794:	08002b15 	.word	0x08002b15
 8003798:	0800e4dc 	.word	0x0800e4dc
 800379c:	24000d20 	.word	0x24000d20
 80037a0:	24000d98 	.word	0x24000d98
 80037a4:	0800e4ec 	.word	0x0800e4ec
 80037a8:	24000de0 	.word	0x24000de0

080037ac <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3310      	adds	r3, #16
 80037ba:	6839      	ldr	r1, [r7, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff f967 	bl	8002a90 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	3210      	adds	r2, #16
 80037ca:	4610      	mov	r0, r2
 80037cc:	4798      	blx	r3
  }
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b082      	sub	sp, #8
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3310      	adds	r3, #16
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff f96e 	bl	8002adc <_ZN13geometry_msgs5Twist7getTypeEv>
 8003800:	4603      	mov	r3, r0
  }
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800380a:	b580      	push	{r7, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3310      	adds	r3, #16
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff f96e 	bl	8002af8 <_ZN13geometry_msgs5Twist6getMD5Ev>
 800381c:	4603      	mov	r3, r0
  }
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
    return configured_;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <_GLOBAL__sub_I__Z12vel_callbackRKN13geometry_msgs5TwistE>:
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
 8003844:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003848:	2001      	movs	r0, #1
 800384a:	f7ff ff7d 	bl	8003748 <_Z41__static_initialization_and_destruction_0ii>
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003856:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <HAL_MspInit+0x30>)
 8003858:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800385c:	4a08      	ldr	r2, [pc, #32]	; (8003880 <HAL_MspInit+0x30>)
 800385e:	f043 0302 	orr.w	r3, r3, #2
 8003862:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003866:	4b06      	ldr	r3, [pc, #24]	; (8003880 <HAL_MspInit+0x30>)
 8003868:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	607b      	str	r3, [r7, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	58024400 	.word	0x58024400

08003884 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08e      	sub	sp, #56	; 0x38
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	60da      	str	r2, [r3, #12]
 800389a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a4f      	ldr	r2, [pc, #316]	; (80039e0 <HAL_TIM_Encoder_MspInit+0x15c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d12f      	bne.n	8003906 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038a6:	4b4f      	ldr	r3, [pc, #316]	; (80039e4 <HAL_TIM_Encoder_MspInit+0x160>)
 80038a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038ac:	4a4d      	ldr	r2, [pc, #308]	; (80039e4 <HAL_TIM_Encoder_MspInit+0x160>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038b6:	4b4b      	ldr	r3, [pc, #300]	; (80039e4 <HAL_TIM_Encoder_MspInit+0x160>)
 80038b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	623b      	str	r3, [r7, #32]
 80038c2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80038c4:	4b47      	ldr	r3, [pc, #284]	; (80039e4 <HAL_TIM_Encoder_MspInit+0x160>)
 80038c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038ca:	4a46      	ldr	r2, [pc, #280]	; (80039e4 <HAL_TIM_Encoder_MspInit+0x160>)
 80038cc:	f043 0310 	orr.w	r3, r3, #16
 80038d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038d4:	4b43      	ldr	r3, [pc, #268]	; (80039e4 <HAL_TIM_Encoder_MspInit+0x160>)
 80038d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	61fb      	str	r3, [r7, #28]
 80038e0:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80038e2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e8:	2302      	movs	r3, #2
 80038ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f0:	2300      	movs	r3, #0
 80038f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80038f4:	2301      	movs	r3, #1
 80038f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038fc:	4619      	mov	r1, r3
 80038fe:	483a      	ldr	r0, [pc, #232]	; (80039e8 <HAL_TIM_Encoder_MspInit+0x164>)
 8003900:	f003 fd54 	bl	80073ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8003904:	e067      	b.n	80039d6 <HAL_TIM_Encoder_MspInit+0x152>
  else if(htim_encoder->Instance==TIM4)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a38      	ldr	r2, [pc, #224]	; (80039ec <HAL_TIM_Encoder_MspInit+0x168>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d12f      	bne.n	8003970 <HAL_TIM_Encoder_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003910:	4b34      	ldr	r3, [pc, #208]	; (80039e4 <HAL_TIM_Encoder_MspInit+0x160>)
 8003912:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003916:	4a33      	ldr	r2, [pc, #204]	; (80039e4 <HAL_TIM_Encoder_MspInit+0x160>)
 8003918:	f043 0304 	orr.w	r3, r3, #4
 800391c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003920:	4b30      	ldr	r3, [pc, #192]	; (80039e4 <HAL_TIM_Encoder_MspInit+0x160>)
 8003922:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800392e:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <HAL_TIM_Encoder_MspInit+0x160>)
 8003930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003934:	4a2b      	ldr	r2, [pc, #172]	; (80039e4 <HAL_TIM_Encoder_MspInit+0x160>)
 8003936:	f043 0308 	orr.w	r3, r3, #8
 800393a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800393e:	4b29      	ldr	r3, [pc, #164]	; (80039e4 <HAL_TIM_Encoder_MspInit+0x160>)
 8003940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800394c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003952:	2302      	movs	r3, #2
 8003954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003956:	2300      	movs	r3, #0
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395a:	2300      	movs	r3, #0
 800395c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800395e:	2302      	movs	r3, #2
 8003960:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003966:	4619      	mov	r1, r3
 8003968:	4821      	ldr	r0, [pc, #132]	; (80039f0 <HAL_TIM_Encoder_MspInit+0x16c>)
 800396a:	f003 fd1f 	bl	80073ac <HAL_GPIO_Init>
}
 800396e:	e032      	b.n	80039d6 <HAL_TIM_Encoder_MspInit+0x152>
  else if(htim_encoder->Instance==TIM23)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a1f      	ldr	r2, [pc, #124]	; (80039f4 <HAL_TIM_Encoder_MspInit+0x170>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d12d      	bne.n	80039d6 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800397a:	4b1a      	ldr	r3, [pc, #104]	; (80039e4 <HAL_TIM_Encoder_MspInit+0x160>)
 800397c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003980:	4a18      	ldr	r2, [pc, #96]	; (80039e4 <HAL_TIM_Encoder_MspInit+0x160>)
 8003982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003986:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800398a:	4b16      	ldr	r3, [pc, #88]	; (80039e4 <HAL_TIM_Encoder_MspInit+0x160>)
 800398c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003998:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <HAL_TIM_Encoder_MspInit+0x160>)
 800399a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800399e:	4a11      	ldr	r2, [pc, #68]	; (80039e4 <HAL_TIM_Encoder_MspInit+0x160>)
 80039a0:	f043 0320 	orr.w	r3, r3, #32
 80039a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039a8:	4b0e      	ldr	r3, [pc, #56]	; (80039e4 <HAL_TIM_Encoder_MspInit+0x160>)
 80039aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80039b6:	2303      	movs	r3, #3
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ba:	2302      	movs	r3, #2
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c2:	2300      	movs	r3, #0
 80039c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 80039c6:	230d      	movs	r3, #13
 80039c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ce:	4619      	mov	r1, r3
 80039d0:	4809      	ldr	r0, [pc, #36]	; (80039f8 <HAL_TIM_Encoder_MspInit+0x174>)
 80039d2:	f003 fceb 	bl	80073ac <HAL_GPIO_Init>
}
 80039d6:	bf00      	nop
 80039d8:	3738      	adds	r7, #56	; 0x38
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40010000 	.word	0x40010000
 80039e4:	58024400 	.word	0x58024400
 80039e8:	58021000 	.word	0x58021000
 80039ec:	40000800 	.word	0x40000800
 80039f0:	58020c00 	.word	0x58020c00
 80039f4:	4000e000 	.word	0x4000e000
 80039f8:	58021400 	.word	0x58021400

080039fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a0c:	d10f      	bne.n	8003a2e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a0e:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <HAL_TIM_PWM_MspInit+0x68>)
 8003a10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a14:	4a13      	ldr	r2, [pc, #76]	; (8003a64 <HAL_TIM_PWM_MspInit+0x68>)
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a1e:	4b11      	ldr	r3, [pc, #68]	; (8003a64 <HAL_TIM_PWM_MspInit+0x68>)
 8003a20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003a2c:	e013      	b.n	8003a56 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM8)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a0d      	ldr	r2, [pc, #52]	; (8003a68 <HAL_TIM_PWM_MspInit+0x6c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d10e      	bne.n	8003a56 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003a38:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <HAL_TIM_PWM_MspInit+0x68>)
 8003a3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a3e:	4a09      	ldr	r2, [pc, #36]	; (8003a64 <HAL_TIM_PWM_MspInit+0x68>)
 8003a40:	f043 0302 	orr.w	r3, r3, #2
 8003a44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <HAL_TIM_PWM_MspInit+0x68>)
 8003a4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	60bb      	str	r3, [r7, #8]
 8003a54:	68bb      	ldr	r3, [r7, #8]
}
 8003a56:	bf00      	nop
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	58024400 	.word	0x58024400
 8003a68:	40010400 	.word	0x40010400

08003a6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a0e      	ldr	r2, [pc, #56]	; (8003ab4 <HAL_TIM_Base_MspInit+0x48>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d116      	bne.n	8003aac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a7e:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <HAL_TIM_Base_MspInit+0x4c>)
 8003a80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a84:	4a0c      	ldr	r2, [pc, #48]	; (8003ab8 <HAL_TIM_Base_MspInit+0x4c>)
 8003a86:	f043 0302 	orr.w	r3, r3, #2
 8003a8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <HAL_TIM_Base_MspInit+0x4c>)
 8003a90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	201d      	movs	r0, #29
 8003aa2:	f000 fc50 	bl	8004346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003aa6:	201d      	movs	r0, #29
 8003aa8:	f000 fc67 	bl	800437a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003aac:	bf00      	nop
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40000400 	.word	0x40000400
 8003ab8:	58024400 	.word	0x58024400

08003abc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08a      	sub	sp, #40	; 0x28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac4:	f107 0314 	add.w	r3, r7, #20
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	605a      	str	r2, [r3, #4]
 8003ace:	609a      	str	r2, [r3, #8]
 8003ad0:	60da      	str	r2, [r3, #12]
 8003ad2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003adc:	d11f      	bne.n	8003b1e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ade:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <HAL_TIM_MspPostInit+0xb4>)
 8003ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ae4:	4a22      	ldr	r2, [pc, #136]	; (8003b70 <HAL_TIM_MspPostInit+0xb4>)
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
 8003aea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003aee:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <HAL_TIM_MspPostInit+0xb4>)
 8003af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8003afc:	2309      	movs	r3, #9
 8003afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b00:	2302      	movs	r3, #2
 8003b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b10:	f107 0314 	add.w	r3, r7, #20
 8003b14:	4619      	mov	r1, r3
 8003b16:	4817      	ldr	r0, [pc, #92]	; (8003b74 <HAL_TIM_MspPostInit+0xb8>)
 8003b18:	f003 fc48 	bl	80073ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003b1c:	e024      	b.n	8003b68 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM8)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a15      	ldr	r2, [pc, #84]	; (8003b78 <HAL_TIM_MspPostInit+0xbc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d11f      	bne.n	8003b68 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b28:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <HAL_TIM_MspPostInit+0xb4>)
 8003b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b2e:	4a10      	ldr	r2, [pc, #64]	; (8003b70 <HAL_TIM_MspPostInit+0xb4>)
 8003b30:	f043 0304 	orr.w	r3, r3, #4
 8003b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b38:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <HAL_TIM_MspPostInit+0xb4>)
 8003b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b54:	2300      	movs	r3, #0
 8003b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b5c:	f107 0314 	add.w	r3, r7, #20
 8003b60:	4619      	mov	r1, r3
 8003b62:	4806      	ldr	r0, [pc, #24]	; (8003b7c <HAL_TIM_MspPostInit+0xc0>)
 8003b64:	f003 fc22 	bl	80073ac <HAL_GPIO_Init>
}
 8003b68:	bf00      	nop
 8003b6a:	3728      	adds	r7, #40	; 0x28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	58024400 	.word	0x58024400
 8003b74:	58020000 	.word	0x58020000
 8003b78:	40010400 	.word	0x40010400
 8003b7c:	58020800 	.word	0x58020800

08003b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b0b8      	sub	sp, #224	; 0xe0
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	609a      	str	r2, [r3, #8]
 8003b94:	60da      	str	r2, [r3, #12]
 8003b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b98:	f107 0310 	add.w	r3, r7, #16
 8003b9c:	22b8      	movs	r2, #184	; 0xb8
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f00a fa43 	bl	800e02c <memset>
  if(huart->Instance==USART3)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a5a      	ldr	r2, [pc, #360]	; (8003d14 <HAL_UART_MspInit+0x194>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	f040 80ac 	bne.w	8003d0a <HAL_UART_MspInit+0x18a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003bb2:	f04f 0202 	mov.w	r2, #2
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bc4:	f107 0310 	add.w	r3, r7, #16
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f004 fe53 	bl	8008874 <HAL_RCCEx_PeriphCLKConfig>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8003bd4:	f7fd f9ac 	bl	8000f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003bd8:	4b4f      	ldr	r3, [pc, #316]	; (8003d18 <HAL_UART_MspInit+0x198>)
 8003bda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bde:	4a4e      	ldr	r2, [pc, #312]	; (8003d18 <HAL_UART_MspInit+0x198>)
 8003be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003be4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003be8:	4b4b      	ldr	r3, [pc, #300]	; (8003d18 <HAL_UART_MspInit+0x198>)
 8003bea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bf6:	4b48      	ldr	r3, [pc, #288]	; (8003d18 <HAL_UART_MspInit+0x198>)
 8003bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bfc:	4a46      	ldr	r2, [pc, #280]	; (8003d18 <HAL_UART_MspInit+0x198>)
 8003bfe:	f043 0308 	orr.w	r3, r3, #8
 8003c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c06:	4b44      	ldr	r3, [pc, #272]	; (8003d18 <HAL_UART_MspInit+0x198>)
 8003c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c2e:	2307      	movs	r3, #7
 8003c30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4838      	ldr	r0, [pc, #224]	; (8003d1c <HAL_UART_MspInit+0x19c>)
 8003c3c:	f003 fbb6 	bl	80073ac <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8003c40:	4b37      	ldr	r3, [pc, #220]	; (8003d20 <HAL_UART_MspInit+0x1a0>)
 8003c42:	4a38      	ldr	r2, [pc, #224]	; (8003d24 <HAL_UART_MspInit+0x1a4>)
 8003c44:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003c46:	4b36      	ldr	r3, [pc, #216]	; (8003d20 <HAL_UART_MspInit+0x1a0>)
 8003c48:	222d      	movs	r2, #45	; 0x2d
 8003c4a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c4c:	4b34      	ldr	r3, [pc, #208]	; (8003d20 <HAL_UART_MspInit+0x1a0>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c52:	4b33      	ldr	r3, [pc, #204]	; (8003d20 <HAL_UART_MspInit+0x1a0>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c58:	4b31      	ldr	r3, [pc, #196]	; (8003d20 <HAL_UART_MspInit+0x1a0>)
 8003c5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c5e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c60:	4b2f      	ldr	r3, [pc, #188]	; (8003d20 <HAL_UART_MspInit+0x1a0>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c66:	4b2e      	ldr	r3, [pc, #184]	; (8003d20 <HAL_UART_MspInit+0x1a0>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003c6c:	4b2c      	ldr	r3, [pc, #176]	; (8003d20 <HAL_UART_MspInit+0x1a0>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003c72:	4b2b      	ldr	r3, [pc, #172]	; (8003d20 <HAL_UART_MspInit+0x1a0>)
 8003c74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c78:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c7a:	4b29      	ldr	r3, [pc, #164]	; (8003d20 <HAL_UART_MspInit+0x1a0>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003c80:	4827      	ldr	r0, [pc, #156]	; (8003d20 <HAL_UART_MspInit+0x1a0>)
 8003c82:	f000 fba3 	bl	80043cc <HAL_DMA_Init>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8003c8c:	f7fd f950 	bl	8000f30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a23      	ldr	r2, [pc, #140]	; (8003d20 <HAL_UART_MspInit+0x1a0>)
 8003c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003c98:	4a21      	ldr	r2, [pc, #132]	; (8003d20 <HAL_UART_MspInit+0x1a0>)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8003c9e:	4b22      	ldr	r3, [pc, #136]	; (8003d28 <HAL_UART_MspInit+0x1a8>)
 8003ca0:	4a22      	ldr	r2, [pc, #136]	; (8003d2c <HAL_UART_MspInit+0x1ac>)
 8003ca2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003ca4:	4b20      	ldr	r3, [pc, #128]	; (8003d28 <HAL_UART_MspInit+0x1a8>)
 8003ca6:	222e      	movs	r2, #46	; 0x2e
 8003ca8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003caa:	4b1f      	ldr	r3, [pc, #124]	; (8003d28 <HAL_UART_MspInit+0x1a8>)
 8003cac:	2240      	movs	r2, #64	; 0x40
 8003cae:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cb0:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <HAL_UART_MspInit+0x1a8>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003cb6:	4b1c      	ldr	r3, [pc, #112]	; (8003d28 <HAL_UART_MspInit+0x1a8>)
 8003cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cbc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cbe:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <HAL_UART_MspInit+0x1a8>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cc4:	4b18      	ldr	r3, [pc, #96]	; (8003d28 <HAL_UART_MspInit+0x1a8>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003cca:	4b17      	ldr	r3, [pc, #92]	; (8003d28 <HAL_UART_MspInit+0x1a8>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003cd0:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <HAL_UART_MspInit+0x1a8>)
 8003cd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cd6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cd8:	4b13      	ldr	r3, [pc, #76]	; (8003d28 <HAL_UART_MspInit+0x1a8>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003cde:	4812      	ldr	r0, [pc, #72]	; (8003d28 <HAL_UART_MspInit+0x1a8>)
 8003ce0:	f000 fb74 	bl	80043cc <HAL_DMA_Init>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 8003cea:	f7fd f921 	bl	8000f30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a0d      	ldr	r2, [pc, #52]	; (8003d28 <HAL_UART_MspInit+0x1a8>)
 8003cf2:	67da      	str	r2, [r3, #124]	; 0x7c
 8003cf4:	4a0c      	ldr	r2, [pc, #48]	; (8003d28 <HAL_UART_MspInit+0x1a8>)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	2027      	movs	r0, #39	; 0x27
 8003d00:	f000 fb21 	bl	8004346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003d04:	2027      	movs	r0, #39	; 0x27
 8003d06:	f000 fb38 	bl	800437a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003d0a:	bf00      	nop
 8003d0c:	37e0      	adds	r7, #224	; 0xe0
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40004800 	.word	0x40004800
 8003d18:	58024400 	.word	0x58024400
 8003d1c:	58020c00 	.word	0x58020c00
 8003d20:	240002f0 	.word	0x240002f0
 8003d24:	40020010 	.word	0x40020010
 8003d28:	24000368 	.word	0x24000368
 8003d2c:	40020028 	.word	0x40020028

08003d30 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART3)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a10      	ldr	r2, [pc, #64]	; (8003d80 <HAL_UART_MspDeInit+0x50>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d11a      	bne.n	8003d78 <HAL_UART_MspDeInit+0x48>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 8003d42:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <HAL_UART_MspDeInit+0x54>)
 8003d44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d48:	4a0e      	ldr	r2, [pc, #56]	; (8003d84 <HAL_UART_MspDeInit+0x54>)
 8003d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9);
 8003d52:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003d56:	480c      	ldr	r0, [pc, #48]	; (8003d88 <HAL_UART_MspDeInit+0x58>)
 8003d58:	f003 fcd0 	bl	80076fc <HAL_GPIO_DeInit>

    /* USART3 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fe8c 	bl	8004a80 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fe87 	bl	8004a80 <HAL_DMA_DeInit>

    /* USART3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8003d72:	2027      	movs	r0, #39	; 0x27
 8003d74:	f000 fb0f 	bl	8004396 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8003d78:	bf00      	nop
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40004800 	.word	0x40004800
 8003d84:	58024400 	.word	0x58024400
 8003d88:	58020c00 	.word	0x58020c00

08003d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d90:	e7fe      	b.n	8003d90 <NMI_Handler+0x4>

08003d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d92:	b480      	push	{r7}
 8003d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d96:	e7fe      	b.n	8003d96 <HardFault_Handler+0x4>

08003d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d9c:	e7fe      	b.n	8003d9c <MemManage_Handler+0x4>

08003d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003da2:	e7fe      	b.n	8003da2 <BusFault_Handler+0x4>

08003da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003da8:	e7fe      	b.n	8003da8 <UsageFault_Handler+0x4>

08003daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003daa:	b480      	push	{r7}
 8003dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dae:	bf00      	nop
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dbc:	bf00      	nop
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dca:	bf00      	nop
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dd8:	f000 f996 	bl	8004108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ddc:	bf00      	nop
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003de4:	4802      	ldr	r0, [pc, #8]	; (8003df0 <DMA1_Stream0_IRQHandler+0x10>)
 8003de6:	f001 ffcf 	bl	8005d88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003dea:	bf00      	nop
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	240002f0 	.word	0x240002f0

08003df4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003df8:	4802      	ldr	r0, [pc, #8]	; (8003e04 <DMA1_Stream1_IRQHandler+0x10>)
 8003dfa:	f001 ffc5 	bl	8005d88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	24000368 	.word	0x24000368

08003e08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003e0c:	4802      	ldr	r0, [pc, #8]	; (8003e18 <TIM3_IRQHandler+0x10>)
 8003e0e:	f006 fe79 	bl	800ab04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003e12:	bf00      	nop
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	2400012c 	.word	0x2400012c

08003e1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003e20:	4802      	ldr	r0, [pc, #8]	; (8003e2c <USART3_IRQHandler+0x10>)
 8003e22:	f008 f8b9 	bl	800bf98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003e26:	bf00      	nop
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	2400025c 	.word	0x2400025c

08003e30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return 1;
 8003e34:	2301      	movs	r3, #1
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <_kill>:

int _kill(int pid, int sig)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e4a:	f00a f8b7 	bl	800dfbc <__errno>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2216      	movs	r2, #22
 8003e52:	601a      	str	r2, [r3, #0]
  return -1;
 8003e54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <_exit>:

void _exit (int status)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e68:	f04f 31ff 	mov.w	r1, #4294967295
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff ffe7 	bl	8003e40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e72:	e7fe      	b.n	8003e72 <_exit+0x12>

08003e74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e7c:	4a14      	ldr	r2, [pc, #80]	; (8003ed0 <_sbrk+0x5c>)
 8003e7e:	4b15      	ldr	r3, [pc, #84]	; (8003ed4 <_sbrk+0x60>)
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e88:	4b13      	ldr	r3, [pc, #76]	; (8003ed8 <_sbrk+0x64>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d102      	bne.n	8003e96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e90:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <_sbrk+0x64>)
 8003e92:	4a12      	ldr	r2, [pc, #72]	; (8003edc <_sbrk+0x68>)
 8003e94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e96:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <_sbrk+0x64>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d207      	bcs.n	8003eb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ea4:	f00a f88a 	bl	800dfbc <__errno>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	220c      	movs	r2, #12
 8003eac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003eae:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb2:	e009      	b.n	8003ec8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003eb4:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <_sbrk+0x64>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003eba:	4b07      	ldr	r3, [pc, #28]	; (8003ed8 <_sbrk+0x64>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	4a05      	ldr	r2, [pc, #20]	; (8003ed8 <_sbrk+0x64>)
 8003ec4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	24050000 	.word	0x24050000
 8003ed4:	00000400 	.word	0x00000400
 8003ed8:	24000df4 	.word	0x24000df4
 8003edc:	24000e10 	.word	0x24000e10

08003ee0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ee4:	4b32      	ldr	r3, [pc, #200]	; (8003fb0 <SystemInit+0xd0>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eea:	4a31      	ldr	r2, [pc, #196]	; (8003fb0 <SystemInit+0xd0>)
 8003eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ef4:	4b2f      	ldr	r3, [pc, #188]	; (8003fb4 <SystemInit+0xd4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 030f 	and.w	r3, r3, #15
 8003efc:	2b06      	cmp	r3, #6
 8003efe:	d807      	bhi.n	8003f10 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f00:	4b2c      	ldr	r3, [pc, #176]	; (8003fb4 <SystemInit+0xd4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f023 030f 	bic.w	r3, r3, #15
 8003f08:	4a2a      	ldr	r2, [pc, #168]	; (8003fb4 <SystemInit+0xd4>)
 8003f0a:	f043 0307 	orr.w	r3, r3, #7
 8003f0e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003f10:	4b29      	ldr	r3, [pc, #164]	; (8003fb8 <SystemInit+0xd8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a28      	ldr	r2, [pc, #160]	; (8003fb8 <SystemInit+0xd8>)
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f1c:	4b26      	ldr	r3, [pc, #152]	; (8003fb8 <SystemInit+0xd8>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003f22:	4b25      	ldr	r3, [pc, #148]	; (8003fb8 <SystemInit+0xd8>)
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	4924      	ldr	r1, [pc, #144]	; (8003fb8 <SystemInit+0xd8>)
 8003f28:	4b24      	ldr	r3, [pc, #144]	; (8003fbc <SystemInit+0xdc>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f2e:	4b21      	ldr	r3, [pc, #132]	; (8003fb4 <SystemInit+0xd4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d007      	beq.n	8003f4a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f3a:	4b1e      	ldr	r3, [pc, #120]	; (8003fb4 <SystemInit+0xd4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 030f 	bic.w	r3, r3, #15
 8003f42:	4a1c      	ldr	r2, [pc, #112]	; (8003fb4 <SystemInit+0xd4>)
 8003f44:	f043 0307 	orr.w	r3, r3, #7
 8003f48:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003f4a:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <SystemInit+0xd8>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003f50:	4b19      	ldr	r3, [pc, #100]	; (8003fb8 <SystemInit+0xd8>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003f56:	4b18      	ldr	r3, [pc, #96]	; (8003fb8 <SystemInit+0xd8>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003f5c:	4b16      	ldr	r3, [pc, #88]	; (8003fb8 <SystemInit+0xd8>)
 8003f5e:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <SystemInit+0xe0>)
 8003f60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003f62:	4b15      	ldr	r3, [pc, #84]	; (8003fb8 <SystemInit+0xd8>)
 8003f64:	4a17      	ldr	r2, [pc, #92]	; (8003fc4 <SystemInit+0xe4>)
 8003f66:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003f68:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <SystemInit+0xd8>)
 8003f6a:	4a17      	ldr	r2, [pc, #92]	; (8003fc8 <SystemInit+0xe8>)
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003f6e:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <SystemInit+0xd8>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003f74:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <SystemInit+0xd8>)
 8003f76:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <SystemInit+0xe8>)
 8003f78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003f7a:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <SystemInit+0xd8>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003f80:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <SystemInit+0xd8>)
 8003f82:	4a11      	ldr	r2, [pc, #68]	; (8003fc8 <SystemInit+0xe8>)
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003f86:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <SystemInit+0xd8>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <SystemInit+0xd8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a09      	ldr	r2, [pc, #36]	; (8003fb8 <SystemInit+0xd8>)
 8003f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003f98:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <SystemInit+0xd8>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003f9e:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <SystemInit+0xec>)
 8003fa0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003fa4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003fa6:	bf00      	nop
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	e000ed00 	.word	0xe000ed00
 8003fb4:	52002000 	.word	0x52002000
 8003fb8:	58024400 	.word	0x58024400
 8003fbc:	eaf6ed7f 	.word	0xeaf6ed7f
 8003fc0:	02020200 	.word	0x02020200
 8003fc4:	01ff0000 	.word	0x01ff0000
 8003fc8:	01010280 	.word	0x01010280
 8003fcc:	52004000 	.word	0x52004000

08003fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004008 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003fd4:	f7ff ff84 	bl	8003ee0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fd8:	480c      	ldr	r0, [pc, #48]	; (800400c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fda:	490d      	ldr	r1, [pc, #52]	; (8004010 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fdc:	4a0d      	ldr	r2, [pc, #52]	; (8004014 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fe0:	e002      	b.n	8003fe8 <LoopCopyDataInit>

08003fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fe6:	3304      	adds	r3, #4

08003fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fec:	d3f9      	bcc.n	8003fe2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fee:	4a0a      	ldr	r2, [pc, #40]	; (8004018 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ff0:	4c0a      	ldr	r4, [pc, #40]	; (800401c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ff4:	e001      	b.n	8003ffa <LoopFillZerobss>

08003ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ff8:	3204      	adds	r2, #4

08003ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ffc:	d3fb      	bcc.n	8003ff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ffe:	f009 ffe3 	bl	800dfc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004002:	f7fc fb39 	bl	8000678 <main>
  bx  lr
 8004006:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004008:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800400c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004010:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8004014:	0800e668 	.word	0x0800e668
  ldr r2, =_sbss
 8004018:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 800401c:	24000e0c 	.word	0x24000e0c

08004020 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004020:	e7fe      	b.n	8004020 <ADC3_IRQHandler>
	...

08004024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800402a:	2003      	movs	r0, #3
 800402c:	f000 f980 	bl	8004330 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004030:	f004 fa4a 	bl	80084c8 <HAL_RCC_GetSysClockFreq>
 8004034:	4602      	mov	r2, r0
 8004036:	4b15      	ldr	r3, [pc, #84]	; (800408c <HAL_Init+0x68>)
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	0a1b      	lsrs	r3, r3, #8
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	4913      	ldr	r1, [pc, #76]	; (8004090 <HAL_Init+0x6c>)
 8004042:	5ccb      	ldrb	r3, [r1, r3]
 8004044:	f003 031f 	and.w	r3, r3, #31
 8004048:	fa22 f303 	lsr.w	r3, r2, r3
 800404c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800404e:	4b0f      	ldr	r3, [pc, #60]	; (800408c <HAL_Init+0x68>)
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	4a0e      	ldr	r2, [pc, #56]	; (8004090 <HAL_Init+0x6c>)
 8004058:	5cd3      	ldrb	r3, [r2, r3]
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
 8004064:	4a0b      	ldr	r2, [pc, #44]	; (8004094 <HAL_Init+0x70>)
 8004066:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004068:	4a0b      	ldr	r2, [pc, #44]	; (8004098 <HAL_Init+0x74>)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800406e:	200f      	movs	r0, #15
 8004070:	f000 f814 	bl	800409c <HAL_InitTick>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e002      	b.n	8004084 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800407e:	f7ff fbe7 	bl	8003850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	58024400 	.word	0x58024400
 8004090:	0800e614 	.word	0x0800e614
 8004094:	24000004 	.word	0x24000004
 8004098:	24000000 	.word	0x24000000

0800409c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80040a4:	4b15      	ldr	r3, [pc, #84]	; (80040fc <HAL_InitTick+0x60>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e021      	b.n	80040f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80040b0:	4b13      	ldr	r3, [pc, #76]	; (8004100 <HAL_InitTick+0x64>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4b11      	ldr	r3, [pc, #68]	; (80040fc <HAL_InitTick+0x60>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	4619      	mov	r1, r3
 80040ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040be:	fbb3 f3f1 	udiv	r3, r3, r1
 80040c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 f973 	bl	80043b2 <HAL_SYSTICK_Config>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e00e      	b.n	80040f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b0f      	cmp	r3, #15
 80040da:	d80a      	bhi.n	80040f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040dc:	2200      	movs	r2, #0
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	f04f 30ff 	mov.w	r0, #4294967295
 80040e4:	f000 f92f 	bl	8004346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040e8:	4a06      	ldr	r2, [pc, #24]	; (8004104 <HAL_InitTick+0x68>)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	e000      	b.n	80040f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	2400000c 	.word	0x2400000c
 8004100:	24000000 	.word	0x24000000
 8004104:	24000008 	.word	0x24000008

08004108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800410c:	4b06      	ldr	r3, [pc, #24]	; (8004128 <HAL_IncTick+0x20>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_IncTick+0x24>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4413      	add	r3, r2
 8004118:	4a04      	ldr	r2, [pc, #16]	; (800412c <HAL_IncTick+0x24>)
 800411a:	6013      	str	r3, [r2, #0]
}
 800411c:	bf00      	nop
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	2400000c 	.word	0x2400000c
 800412c:	24000df8 	.word	0x24000df8

08004130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return uwTick;
 8004134:	4b03      	ldr	r3, [pc, #12]	; (8004144 <HAL_GetTick+0x14>)
 8004136:	681b      	ldr	r3, [r3, #0]
}
 8004138:	4618      	mov	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	24000df8 	.word	0x24000df8

08004148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004158:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <__NVIC_SetPriorityGrouping+0x40>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004164:	4013      	ands	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004170:	4b06      	ldr	r3, [pc, #24]	; (800418c <__NVIC_SetPriorityGrouping+0x44>)
 8004172:	4313      	orrs	r3, r2
 8004174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004176:	4a04      	ldr	r2, [pc, #16]	; (8004188 <__NVIC_SetPriorityGrouping+0x40>)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	60d3      	str	r3, [r2, #12]
}
 800417c:	bf00      	nop
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	e000ed00 	.word	0xe000ed00
 800418c:	05fa0000 	.word	0x05fa0000

08004190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	0a1b      	lsrs	r3, r3, #8
 800419a:	f003 0307 	and.w	r3, r3, #7
}
 800419e:	4618      	mov	r0, r3
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	db0b      	blt.n	80041d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041be:	88fb      	ldrh	r3, [r7, #6]
 80041c0:	f003 021f 	and.w	r2, r3, #31
 80041c4:	4907      	ldr	r1, [pc, #28]	; (80041e4 <__NVIC_EnableIRQ+0x38>)
 80041c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	2001      	movs	r0, #1
 80041ce:	fa00 f202 	lsl.w	r2, r0, r2
 80041d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	e000e100 	.word	0xe000e100

080041e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	db12      	blt.n	8004220 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041fa:	88fb      	ldrh	r3, [r7, #6]
 80041fc:	f003 021f 	and.w	r2, r3, #31
 8004200:	490a      	ldr	r1, [pc, #40]	; (800422c <__NVIC_DisableIRQ+0x44>)
 8004202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	2001      	movs	r0, #1
 800420a:	fa00 f202 	lsl.w	r2, r0, r2
 800420e:	3320      	adds	r3, #32
 8004210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004214:	f3bf 8f4f 	dsb	sy
}
 8004218:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800421a:	f3bf 8f6f 	isb	sy
}
 800421e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	e000e100 	.word	0xe000e100

08004230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	6039      	str	r1, [r7, #0]
 800423a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800423c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004240:	2b00      	cmp	r3, #0
 8004242:	db0a      	blt.n	800425a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	b2da      	uxtb	r2, r3
 8004248:	490c      	ldr	r1, [pc, #48]	; (800427c <__NVIC_SetPriority+0x4c>)
 800424a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800424e:	0112      	lsls	r2, r2, #4
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	440b      	add	r3, r1
 8004254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004258:	e00a      	b.n	8004270 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	4908      	ldr	r1, [pc, #32]	; (8004280 <__NVIC_SetPriority+0x50>)
 8004260:	88fb      	ldrh	r3, [r7, #6]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	3b04      	subs	r3, #4
 8004268:	0112      	lsls	r2, r2, #4
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	440b      	add	r3, r1
 800426e:	761a      	strb	r2, [r3, #24]
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	e000e100 	.word	0xe000e100
 8004280:	e000ed00 	.word	0xe000ed00

08004284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004284:	b480      	push	{r7}
 8004286:	b089      	sub	sp, #36	; 0x24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f1c3 0307 	rsb	r3, r3, #7
 800429e:	2b04      	cmp	r3, #4
 80042a0:	bf28      	it	cs
 80042a2:	2304      	movcs	r3, #4
 80042a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	3304      	adds	r3, #4
 80042aa:	2b06      	cmp	r3, #6
 80042ac:	d902      	bls.n	80042b4 <NVIC_EncodePriority+0x30>
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	3b03      	subs	r3, #3
 80042b2:	e000      	b.n	80042b6 <NVIC_EncodePriority+0x32>
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b8:	f04f 32ff 	mov.w	r2, #4294967295
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	43da      	mvns	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	401a      	ands	r2, r3
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042cc:	f04f 31ff 	mov.w	r1, #4294967295
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	fa01 f303 	lsl.w	r3, r1, r3
 80042d6:	43d9      	mvns	r1, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042dc:	4313      	orrs	r3, r2
         );
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3724      	adds	r7, #36	; 0x24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
	...

080042ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042fc:	d301      	bcc.n	8004302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042fe:	2301      	movs	r3, #1
 8004300:	e00f      	b.n	8004322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004302:	4a0a      	ldr	r2, [pc, #40]	; (800432c <SysTick_Config+0x40>)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3b01      	subs	r3, #1
 8004308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800430a:	210f      	movs	r1, #15
 800430c:	f04f 30ff 	mov.w	r0, #4294967295
 8004310:	f7ff ff8e 	bl	8004230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004314:	4b05      	ldr	r3, [pc, #20]	; (800432c <SysTick_Config+0x40>)
 8004316:	2200      	movs	r2, #0
 8004318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800431a:	4b04      	ldr	r3, [pc, #16]	; (800432c <SysTick_Config+0x40>)
 800431c:	2207      	movs	r2, #7
 800431e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	e000e010 	.word	0xe000e010

08004330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff ff05 	bl	8004148 <__NVIC_SetPriorityGrouping>
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b086      	sub	sp, #24
 800434a:	af00      	add	r7, sp, #0
 800434c:	4603      	mov	r3, r0
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
 8004352:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004354:	f7ff ff1c 	bl	8004190 <__NVIC_GetPriorityGrouping>
 8004358:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	68b9      	ldr	r1, [r7, #8]
 800435e:	6978      	ldr	r0, [r7, #20]
 8004360:	f7ff ff90 	bl	8004284 <NVIC_EncodePriority>
 8004364:	4602      	mov	r2, r0
 8004366:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800436a:	4611      	mov	r1, r2
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff ff5f 	bl	8004230 <__NVIC_SetPriority>
}
 8004372:	bf00      	nop
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	4603      	mov	r3, r0
 8004382:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004384:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff ff0f 	bl	80041ac <__NVIC_EnableIRQ>
}
 800438e:	bf00      	nop
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	4603      	mov	r3, r0
 800439e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80043a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff ff1f 	bl	80041e8 <__NVIC_DisableIRQ>
}
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff ff96 	bl	80042ec <SysTick_Config>
 80043c0:	4603      	mov	r3, r0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80043d4:	f7ff feac 	bl	8004130 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e314      	b.n	8004a0e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a66      	ldr	r2, [pc, #408]	; (8004584 <HAL_DMA_Init+0x1b8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d04a      	beq.n	8004484 <HAL_DMA_Init+0xb8>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a65      	ldr	r2, [pc, #404]	; (8004588 <HAL_DMA_Init+0x1bc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d045      	beq.n	8004484 <HAL_DMA_Init+0xb8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a63      	ldr	r2, [pc, #396]	; (800458c <HAL_DMA_Init+0x1c0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d040      	beq.n	8004484 <HAL_DMA_Init+0xb8>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a62      	ldr	r2, [pc, #392]	; (8004590 <HAL_DMA_Init+0x1c4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d03b      	beq.n	8004484 <HAL_DMA_Init+0xb8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a60      	ldr	r2, [pc, #384]	; (8004594 <HAL_DMA_Init+0x1c8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d036      	beq.n	8004484 <HAL_DMA_Init+0xb8>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a5f      	ldr	r2, [pc, #380]	; (8004598 <HAL_DMA_Init+0x1cc>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d031      	beq.n	8004484 <HAL_DMA_Init+0xb8>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a5d      	ldr	r2, [pc, #372]	; (800459c <HAL_DMA_Init+0x1d0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d02c      	beq.n	8004484 <HAL_DMA_Init+0xb8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a5c      	ldr	r2, [pc, #368]	; (80045a0 <HAL_DMA_Init+0x1d4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d027      	beq.n	8004484 <HAL_DMA_Init+0xb8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a5a      	ldr	r2, [pc, #360]	; (80045a4 <HAL_DMA_Init+0x1d8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d022      	beq.n	8004484 <HAL_DMA_Init+0xb8>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a59      	ldr	r2, [pc, #356]	; (80045a8 <HAL_DMA_Init+0x1dc>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d01d      	beq.n	8004484 <HAL_DMA_Init+0xb8>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a57      	ldr	r2, [pc, #348]	; (80045ac <HAL_DMA_Init+0x1e0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d018      	beq.n	8004484 <HAL_DMA_Init+0xb8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a56      	ldr	r2, [pc, #344]	; (80045b0 <HAL_DMA_Init+0x1e4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d013      	beq.n	8004484 <HAL_DMA_Init+0xb8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a54      	ldr	r2, [pc, #336]	; (80045b4 <HAL_DMA_Init+0x1e8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00e      	beq.n	8004484 <HAL_DMA_Init+0xb8>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a53      	ldr	r2, [pc, #332]	; (80045b8 <HAL_DMA_Init+0x1ec>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d009      	beq.n	8004484 <HAL_DMA_Init+0xb8>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a51      	ldr	r2, [pc, #324]	; (80045bc <HAL_DMA_Init+0x1f0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d004      	beq.n	8004484 <HAL_DMA_Init+0xb8>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a50      	ldr	r2, [pc, #320]	; (80045c0 <HAL_DMA_Init+0x1f4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d101      	bne.n	8004488 <HAL_DMA_Init+0xbc>
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <HAL_DMA_Init+0xbe>
 8004488:	2300      	movs	r3, #0
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 813c 	beq.w	8004708 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a37      	ldr	r2, [pc, #220]	; (8004584 <HAL_DMA_Init+0x1b8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d04a      	beq.n	8004540 <HAL_DMA_Init+0x174>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a36      	ldr	r2, [pc, #216]	; (8004588 <HAL_DMA_Init+0x1bc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d045      	beq.n	8004540 <HAL_DMA_Init+0x174>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a34      	ldr	r2, [pc, #208]	; (800458c <HAL_DMA_Init+0x1c0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d040      	beq.n	8004540 <HAL_DMA_Init+0x174>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a33      	ldr	r2, [pc, #204]	; (8004590 <HAL_DMA_Init+0x1c4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d03b      	beq.n	8004540 <HAL_DMA_Init+0x174>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a31      	ldr	r2, [pc, #196]	; (8004594 <HAL_DMA_Init+0x1c8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d036      	beq.n	8004540 <HAL_DMA_Init+0x174>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a30      	ldr	r2, [pc, #192]	; (8004598 <HAL_DMA_Init+0x1cc>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d031      	beq.n	8004540 <HAL_DMA_Init+0x174>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a2e      	ldr	r2, [pc, #184]	; (800459c <HAL_DMA_Init+0x1d0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d02c      	beq.n	8004540 <HAL_DMA_Init+0x174>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a2d      	ldr	r2, [pc, #180]	; (80045a0 <HAL_DMA_Init+0x1d4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d027      	beq.n	8004540 <HAL_DMA_Init+0x174>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a2b      	ldr	r2, [pc, #172]	; (80045a4 <HAL_DMA_Init+0x1d8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d022      	beq.n	8004540 <HAL_DMA_Init+0x174>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a2a      	ldr	r2, [pc, #168]	; (80045a8 <HAL_DMA_Init+0x1dc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d01d      	beq.n	8004540 <HAL_DMA_Init+0x174>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a28      	ldr	r2, [pc, #160]	; (80045ac <HAL_DMA_Init+0x1e0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d018      	beq.n	8004540 <HAL_DMA_Init+0x174>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a27      	ldr	r2, [pc, #156]	; (80045b0 <HAL_DMA_Init+0x1e4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d013      	beq.n	8004540 <HAL_DMA_Init+0x174>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a25      	ldr	r2, [pc, #148]	; (80045b4 <HAL_DMA_Init+0x1e8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00e      	beq.n	8004540 <HAL_DMA_Init+0x174>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a24      	ldr	r2, [pc, #144]	; (80045b8 <HAL_DMA_Init+0x1ec>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d009      	beq.n	8004540 <HAL_DMA_Init+0x174>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a22      	ldr	r2, [pc, #136]	; (80045bc <HAL_DMA_Init+0x1f0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d004      	beq.n	8004540 <HAL_DMA_Init+0x174>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a21      	ldr	r2, [pc, #132]	; (80045c0 <HAL_DMA_Init+0x1f4>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d108      	bne.n	8004552 <HAL_DMA_Init+0x186>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0201 	bic.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	e007      	b.n	8004562 <HAL_DMA_Init+0x196>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0201 	bic.w	r2, r2, #1
 8004560:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004562:	e02f      	b.n	80045c4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004564:	f7ff fde4 	bl	8004130 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b05      	cmp	r3, #5
 8004570:	d928      	bls.n	80045c4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2220      	movs	r2, #32
 8004576:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2203      	movs	r2, #3
 800457c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e244      	b.n	8004a0e <HAL_DMA_Init+0x642>
 8004584:	40020010 	.word	0x40020010
 8004588:	40020028 	.word	0x40020028
 800458c:	40020040 	.word	0x40020040
 8004590:	40020058 	.word	0x40020058
 8004594:	40020070 	.word	0x40020070
 8004598:	40020088 	.word	0x40020088
 800459c:	400200a0 	.word	0x400200a0
 80045a0:	400200b8 	.word	0x400200b8
 80045a4:	40020410 	.word	0x40020410
 80045a8:	40020428 	.word	0x40020428
 80045ac:	40020440 	.word	0x40020440
 80045b0:	40020458 	.word	0x40020458
 80045b4:	40020470 	.word	0x40020470
 80045b8:	40020488 	.word	0x40020488
 80045bc:	400204a0 	.word	0x400204a0
 80045c0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1c8      	bne.n	8004564 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4b84      	ldr	r3, [pc, #528]	; (80047f0 <HAL_DMA_Init+0x424>)
 80045de:	4013      	ands	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80045ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004602:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	2b04      	cmp	r3, #4
 8004616:	d107      	bne.n	8004628 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	4313      	orrs	r3, r2
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b28      	cmp	r3, #40	; 0x28
 800462e:	d903      	bls.n	8004638 <HAL_DMA_Init+0x26c>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b2e      	cmp	r3, #46	; 0x2e
 8004636:	d91f      	bls.n	8004678 <HAL_DMA_Init+0x2ac>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b3e      	cmp	r3, #62	; 0x3e
 800463e:	d903      	bls.n	8004648 <HAL_DMA_Init+0x27c>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b42      	cmp	r3, #66	; 0x42
 8004646:	d917      	bls.n	8004678 <HAL_DMA_Init+0x2ac>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b46      	cmp	r3, #70	; 0x46
 800464e:	d903      	bls.n	8004658 <HAL_DMA_Init+0x28c>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b48      	cmp	r3, #72	; 0x48
 8004656:	d90f      	bls.n	8004678 <HAL_DMA_Init+0x2ac>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2b4e      	cmp	r3, #78	; 0x4e
 800465e:	d903      	bls.n	8004668 <HAL_DMA_Init+0x29c>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b52      	cmp	r3, #82	; 0x52
 8004666:	d907      	bls.n	8004678 <HAL_DMA_Init+0x2ac>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b73      	cmp	r3, #115	; 0x73
 800466e:	d905      	bls.n	800467c <HAL_DMA_Init+0x2b0>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b77      	cmp	r3, #119	; 0x77
 8004676:	d801      	bhi.n	800467c <HAL_DMA_Init+0x2b0>
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <HAL_DMA_Init+0x2b2>
 800467c:	2300      	movs	r3, #0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004688:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f023 0307 	bic.w	r3, r3, #7
 80046a0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d117      	bne.n	80046e4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00e      	beq.n	80046e4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f002 fce6 	bl	8007098 <DMA_CheckFifoParam>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2240      	movs	r2, #64	; 0x40
 80046d6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e194      	b.n	8004a0e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f002 fc21 	bl	8006f34 <DMA_CalcBaseAndBitshift>
 80046f2:	4603      	mov	r3, r0
 80046f4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fa:	f003 031f 	and.w	r3, r3, #31
 80046fe:	223f      	movs	r2, #63	; 0x3f
 8004700:	409a      	lsls	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	609a      	str	r2, [r3, #8]
 8004706:	e0ca      	b.n	800489e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a39      	ldr	r2, [pc, #228]	; (80047f4 <HAL_DMA_Init+0x428>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d022      	beq.n	8004758 <HAL_DMA_Init+0x38c>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a38      	ldr	r2, [pc, #224]	; (80047f8 <HAL_DMA_Init+0x42c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d01d      	beq.n	8004758 <HAL_DMA_Init+0x38c>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a36      	ldr	r2, [pc, #216]	; (80047fc <HAL_DMA_Init+0x430>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d018      	beq.n	8004758 <HAL_DMA_Init+0x38c>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a35      	ldr	r2, [pc, #212]	; (8004800 <HAL_DMA_Init+0x434>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d013      	beq.n	8004758 <HAL_DMA_Init+0x38c>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a33      	ldr	r2, [pc, #204]	; (8004804 <HAL_DMA_Init+0x438>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00e      	beq.n	8004758 <HAL_DMA_Init+0x38c>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a32      	ldr	r2, [pc, #200]	; (8004808 <HAL_DMA_Init+0x43c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d009      	beq.n	8004758 <HAL_DMA_Init+0x38c>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a30      	ldr	r2, [pc, #192]	; (800480c <HAL_DMA_Init+0x440>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d004      	beq.n	8004758 <HAL_DMA_Init+0x38c>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a2f      	ldr	r2, [pc, #188]	; (8004810 <HAL_DMA_Init+0x444>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d101      	bne.n	800475c <HAL_DMA_Init+0x390>
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <HAL_DMA_Init+0x392>
 800475c:	2300      	movs	r3, #0
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 8094 	beq.w	800488c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a22      	ldr	r2, [pc, #136]	; (80047f4 <HAL_DMA_Init+0x428>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d021      	beq.n	80047b2 <HAL_DMA_Init+0x3e6>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a21      	ldr	r2, [pc, #132]	; (80047f8 <HAL_DMA_Init+0x42c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d01c      	beq.n	80047b2 <HAL_DMA_Init+0x3e6>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1f      	ldr	r2, [pc, #124]	; (80047fc <HAL_DMA_Init+0x430>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d017      	beq.n	80047b2 <HAL_DMA_Init+0x3e6>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1e      	ldr	r2, [pc, #120]	; (8004800 <HAL_DMA_Init+0x434>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d012      	beq.n	80047b2 <HAL_DMA_Init+0x3e6>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1c      	ldr	r2, [pc, #112]	; (8004804 <HAL_DMA_Init+0x438>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d00d      	beq.n	80047b2 <HAL_DMA_Init+0x3e6>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1b      	ldr	r2, [pc, #108]	; (8004808 <HAL_DMA_Init+0x43c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d008      	beq.n	80047b2 <HAL_DMA_Init+0x3e6>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a19      	ldr	r2, [pc, #100]	; (800480c <HAL_DMA_Init+0x440>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d003      	beq.n	80047b2 <HAL_DMA_Init+0x3e6>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a18      	ldr	r2, [pc, #96]	; (8004810 <HAL_DMA_Init+0x444>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	4b11      	ldr	r3, [pc, #68]	; (8004814 <HAL_DMA_Init+0x448>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b40      	cmp	r3, #64	; 0x40
 80047da:	d01d      	beq.n	8004818 <HAL_DMA_Init+0x44c>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2b80      	cmp	r3, #128	; 0x80
 80047e2:	d102      	bne.n	80047ea <HAL_DMA_Init+0x41e>
 80047e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047e8:	e017      	b.n	800481a <HAL_DMA_Init+0x44e>
 80047ea:	2300      	movs	r3, #0
 80047ec:	e015      	b.n	800481a <HAL_DMA_Init+0x44e>
 80047ee:	bf00      	nop
 80047f0:	fe10803f 	.word	0xfe10803f
 80047f4:	58025408 	.word	0x58025408
 80047f8:	5802541c 	.word	0x5802541c
 80047fc:	58025430 	.word	0x58025430
 8004800:	58025444 	.word	0x58025444
 8004804:	58025458 	.word	0x58025458
 8004808:	5802546c 	.word	0x5802546c
 800480c:	58025480 	.word	0x58025480
 8004810:	58025494 	.word	0x58025494
 8004814:	fffe000f 	.word	0xfffe000f
 8004818:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68d2      	ldr	r2, [r2, #12]
 800481e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004820:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004828:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004830:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004838:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004840:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004848:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	461a      	mov	r2, r3
 800485e:	4b6e      	ldr	r3, [pc, #440]	; (8004a18 <HAL_DMA_Init+0x64c>)
 8004860:	4413      	add	r3, r2
 8004862:	4a6e      	ldr	r2, [pc, #440]	; (8004a1c <HAL_DMA_Init+0x650>)
 8004864:	fba2 2303 	umull	r2, r3, r2, r3
 8004868:	091b      	lsrs	r3, r3, #4
 800486a:	009a      	lsls	r2, r3, #2
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f002 fb5f 	bl	8006f34 <DMA_CalcBaseAndBitshift>
 8004876:	4603      	mov	r3, r0
 8004878:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487e:	f003 031f 	and.w	r3, r3, #31
 8004882:	2201      	movs	r2, #1
 8004884:	409a      	lsls	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	605a      	str	r2, [r3, #4]
 800488a:	e008      	b.n	800489e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2240      	movs	r2, #64	; 0x40
 8004890:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2203      	movs	r2, #3
 8004896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e0b7      	b.n	8004a0e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a5f      	ldr	r2, [pc, #380]	; (8004a20 <HAL_DMA_Init+0x654>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d072      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a5d      	ldr	r2, [pc, #372]	; (8004a24 <HAL_DMA_Init+0x658>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d06d      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a5c      	ldr	r2, [pc, #368]	; (8004a28 <HAL_DMA_Init+0x65c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d068      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a5a      	ldr	r2, [pc, #360]	; (8004a2c <HAL_DMA_Init+0x660>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d063      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a59      	ldr	r2, [pc, #356]	; (8004a30 <HAL_DMA_Init+0x664>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d05e      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a57      	ldr	r2, [pc, #348]	; (8004a34 <HAL_DMA_Init+0x668>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d059      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a56      	ldr	r2, [pc, #344]	; (8004a38 <HAL_DMA_Init+0x66c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d054      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a54      	ldr	r2, [pc, #336]	; (8004a3c <HAL_DMA_Init+0x670>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d04f      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a53      	ldr	r2, [pc, #332]	; (8004a40 <HAL_DMA_Init+0x674>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d04a      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a51      	ldr	r2, [pc, #324]	; (8004a44 <HAL_DMA_Init+0x678>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d045      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a50      	ldr	r2, [pc, #320]	; (8004a48 <HAL_DMA_Init+0x67c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d040      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a4e      	ldr	r2, [pc, #312]	; (8004a4c <HAL_DMA_Init+0x680>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d03b      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a4d      	ldr	r2, [pc, #308]	; (8004a50 <HAL_DMA_Init+0x684>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d036      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a4b      	ldr	r2, [pc, #300]	; (8004a54 <HAL_DMA_Init+0x688>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d031      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a4a      	ldr	r2, [pc, #296]	; (8004a58 <HAL_DMA_Init+0x68c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d02c      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a48      	ldr	r2, [pc, #288]	; (8004a5c <HAL_DMA_Init+0x690>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d027      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a47      	ldr	r2, [pc, #284]	; (8004a60 <HAL_DMA_Init+0x694>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d022      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a45      	ldr	r2, [pc, #276]	; (8004a64 <HAL_DMA_Init+0x698>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d01d      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a44      	ldr	r2, [pc, #272]	; (8004a68 <HAL_DMA_Init+0x69c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d018      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a42      	ldr	r2, [pc, #264]	; (8004a6c <HAL_DMA_Init+0x6a0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d013      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a41      	ldr	r2, [pc, #260]	; (8004a70 <HAL_DMA_Init+0x6a4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00e      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a3f      	ldr	r2, [pc, #252]	; (8004a74 <HAL_DMA_Init+0x6a8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d009      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a3e      	ldr	r2, [pc, #248]	; (8004a78 <HAL_DMA_Init+0x6ac>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d004      	beq.n	800498e <HAL_DMA_Init+0x5c2>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a3c      	ldr	r2, [pc, #240]	; (8004a7c <HAL_DMA_Init+0x6b0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d101      	bne.n	8004992 <HAL_DMA_Init+0x5c6>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <HAL_DMA_Init+0x5c8>
 8004992:	2300      	movs	r3, #0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d032      	beq.n	80049fe <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f002 fbf9 	bl	8007190 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b80      	cmp	r3, #128	; 0x80
 80049a4:	d102      	bne.n	80049ac <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80049c0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d010      	beq.n	80049ec <HAL_DMA_Init+0x620>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d80c      	bhi.n	80049ec <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f002 fc76 	bl	80072c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80049e8:	605a      	str	r2, [r3, #4]
 80049ea:	e008      	b.n	80049fe <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	a7fdabf8 	.word	0xa7fdabf8
 8004a1c:	cccccccd 	.word	0xcccccccd
 8004a20:	40020010 	.word	0x40020010
 8004a24:	40020028 	.word	0x40020028
 8004a28:	40020040 	.word	0x40020040
 8004a2c:	40020058 	.word	0x40020058
 8004a30:	40020070 	.word	0x40020070
 8004a34:	40020088 	.word	0x40020088
 8004a38:	400200a0 	.word	0x400200a0
 8004a3c:	400200b8 	.word	0x400200b8
 8004a40:	40020410 	.word	0x40020410
 8004a44:	40020428 	.word	0x40020428
 8004a48:	40020440 	.word	0x40020440
 8004a4c:	40020458 	.word	0x40020458
 8004a50:	40020470 	.word	0x40020470
 8004a54:	40020488 	.word	0x40020488
 8004a58:	400204a0 	.word	0x400204a0
 8004a5c:	400204b8 	.word	0x400204b8
 8004a60:	58025408 	.word	0x58025408
 8004a64:	5802541c 	.word	0x5802541c
 8004a68:	58025430 	.word	0x58025430
 8004a6c:	58025444 	.word	0x58025444
 8004a70:	58025458 	.word	0x58025458
 8004a74:	5802546c 	.word	0x5802546c
 8004a78:	58025480 	.word	0x58025480
 8004a7c:	58025494 	.word	0x58025494

08004a80 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e1a8      	b.n	8004de4 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a82      	ldr	r2, [pc, #520]	; (8004ca0 <HAL_DMA_DeInit+0x220>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d04a      	beq.n	8004b32 <HAL_DMA_DeInit+0xb2>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a80      	ldr	r2, [pc, #512]	; (8004ca4 <HAL_DMA_DeInit+0x224>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d045      	beq.n	8004b32 <HAL_DMA_DeInit+0xb2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a7f      	ldr	r2, [pc, #508]	; (8004ca8 <HAL_DMA_DeInit+0x228>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d040      	beq.n	8004b32 <HAL_DMA_DeInit+0xb2>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a7d      	ldr	r2, [pc, #500]	; (8004cac <HAL_DMA_DeInit+0x22c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d03b      	beq.n	8004b32 <HAL_DMA_DeInit+0xb2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a7c      	ldr	r2, [pc, #496]	; (8004cb0 <HAL_DMA_DeInit+0x230>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d036      	beq.n	8004b32 <HAL_DMA_DeInit+0xb2>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a7a      	ldr	r2, [pc, #488]	; (8004cb4 <HAL_DMA_DeInit+0x234>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d031      	beq.n	8004b32 <HAL_DMA_DeInit+0xb2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a79      	ldr	r2, [pc, #484]	; (8004cb8 <HAL_DMA_DeInit+0x238>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d02c      	beq.n	8004b32 <HAL_DMA_DeInit+0xb2>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a77      	ldr	r2, [pc, #476]	; (8004cbc <HAL_DMA_DeInit+0x23c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d027      	beq.n	8004b32 <HAL_DMA_DeInit+0xb2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a76      	ldr	r2, [pc, #472]	; (8004cc0 <HAL_DMA_DeInit+0x240>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d022      	beq.n	8004b32 <HAL_DMA_DeInit+0xb2>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a74      	ldr	r2, [pc, #464]	; (8004cc4 <HAL_DMA_DeInit+0x244>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d01d      	beq.n	8004b32 <HAL_DMA_DeInit+0xb2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a73      	ldr	r2, [pc, #460]	; (8004cc8 <HAL_DMA_DeInit+0x248>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d018      	beq.n	8004b32 <HAL_DMA_DeInit+0xb2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a71      	ldr	r2, [pc, #452]	; (8004ccc <HAL_DMA_DeInit+0x24c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d013      	beq.n	8004b32 <HAL_DMA_DeInit+0xb2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a70      	ldr	r2, [pc, #448]	; (8004cd0 <HAL_DMA_DeInit+0x250>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00e      	beq.n	8004b32 <HAL_DMA_DeInit+0xb2>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a6e      	ldr	r2, [pc, #440]	; (8004cd4 <HAL_DMA_DeInit+0x254>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d009      	beq.n	8004b32 <HAL_DMA_DeInit+0xb2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a6d      	ldr	r2, [pc, #436]	; (8004cd8 <HAL_DMA_DeInit+0x258>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d004      	beq.n	8004b32 <HAL_DMA_DeInit+0xb2>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a6b      	ldr	r2, [pc, #428]	; (8004cdc <HAL_DMA_DeInit+0x25c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d108      	bne.n	8004b44 <HAL_DMA_DeInit+0xc4>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0201 	bic.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	e007      	b.n	8004b54 <HAL_DMA_DeInit+0xd4>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0201 	bic.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a51      	ldr	r2, [pc, #324]	; (8004ca0 <HAL_DMA_DeInit+0x220>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d04a      	beq.n	8004bf4 <HAL_DMA_DeInit+0x174>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a50      	ldr	r2, [pc, #320]	; (8004ca4 <HAL_DMA_DeInit+0x224>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d045      	beq.n	8004bf4 <HAL_DMA_DeInit+0x174>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a4e      	ldr	r2, [pc, #312]	; (8004ca8 <HAL_DMA_DeInit+0x228>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d040      	beq.n	8004bf4 <HAL_DMA_DeInit+0x174>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a4d      	ldr	r2, [pc, #308]	; (8004cac <HAL_DMA_DeInit+0x22c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d03b      	beq.n	8004bf4 <HAL_DMA_DeInit+0x174>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a4b      	ldr	r2, [pc, #300]	; (8004cb0 <HAL_DMA_DeInit+0x230>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d036      	beq.n	8004bf4 <HAL_DMA_DeInit+0x174>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a4a      	ldr	r2, [pc, #296]	; (8004cb4 <HAL_DMA_DeInit+0x234>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d031      	beq.n	8004bf4 <HAL_DMA_DeInit+0x174>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a48      	ldr	r2, [pc, #288]	; (8004cb8 <HAL_DMA_DeInit+0x238>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d02c      	beq.n	8004bf4 <HAL_DMA_DeInit+0x174>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a47      	ldr	r2, [pc, #284]	; (8004cbc <HAL_DMA_DeInit+0x23c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d027      	beq.n	8004bf4 <HAL_DMA_DeInit+0x174>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a45      	ldr	r2, [pc, #276]	; (8004cc0 <HAL_DMA_DeInit+0x240>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d022      	beq.n	8004bf4 <HAL_DMA_DeInit+0x174>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a44      	ldr	r2, [pc, #272]	; (8004cc4 <HAL_DMA_DeInit+0x244>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d01d      	beq.n	8004bf4 <HAL_DMA_DeInit+0x174>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a42      	ldr	r2, [pc, #264]	; (8004cc8 <HAL_DMA_DeInit+0x248>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d018      	beq.n	8004bf4 <HAL_DMA_DeInit+0x174>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a41      	ldr	r2, [pc, #260]	; (8004ccc <HAL_DMA_DeInit+0x24c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d013      	beq.n	8004bf4 <HAL_DMA_DeInit+0x174>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a3f      	ldr	r2, [pc, #252]	; (8004cd0 <HAL_DMA_DeInit+0x250>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00e      	beq.n	8004bf4 <HAL_DMA_DeInit+0x174>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a3e      	ldr	r2, [pc, #248]	; (8004cd4 <HAL_DMA_DeInit+0x254>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d009      	beq.n	8004bf4 <HAL_DMA_DeInit+0x174>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a3c      	ldr	r2, [pc, #240]	; (8004cd8 <HAL_DMA_DeInit+0x258>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d004      	beq.n	8004bf4 <HAL_DMA_DeInit+0x174>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a3b      	ldr	r2, [pc, #236]	; (8004cdc <HAL_DMA_DeInit+0x25c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d101      	bne.n	8004bf8 <HAL_DMA_DeInit+0x178>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e000      	b.n	8004bfa <HAL_DMA_DeInit+0x17a>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d025      	beq.n	8004c4a <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2200      	movs	r2, #0
 8004c14:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2200      	movs	r2, #0
 8004c24:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2221      	movs	r2, #33	; 0x21
 8004c2c:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f002 f980 	bl	8006f34 <DMA_CalcBaseAndBitshift>
 8004c34:	4603      	mov	r3, r0
 8004c36:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3c:	f003 031f 	and.w	r3, r3, #31
 8004c40:	223f      	movs	r2, #63	; 0x3f
 8004c42:	409a      	lsls	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	609a      	str	r2, [r3, #8]
 8004c48:	e081      	b.n	8004d4e <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a24      	ldr	r2, [pc, #144]	; (8004ce0 <HAL_DMA_DeInit+0x260>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d022      	beq.n	8004c9a <HAL_DMA_DeInit+0x21a>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a22      	ldr	r2, [pc, #136]	; (8004ce4 <HAL_DMA_DeInit+0x264>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d01d      	beq.n	8004c9a <HAL_DMA_DeInit+0x21a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a21      	ldr	r2, [pc, #132]	; (8004ce8 <HAL_DMA_DeInit+0x268>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d018      	beq.n	8004c9a <HAL_DMA_DeInit+0x21a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a1f      	ldr	r2, [pc, #124]	; (8004cec <HAL_DMA_DeInit+0x26c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d013      	beq.n	8004c9a <HAL_DMA_DeInit+0x21a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a1e      	ldr	r2, [pc, #120]	; (8004cf0 <HAL_DMA_DeInit+0x270>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d00e      	beq.n	8004c9a <HAL_DMA_DeInit+0x21a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a1c      	ldr	r2, [pc, #112]	; (8004cf4 <HAL_DMA_DeInit+0x274>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d009      	beq.n	8004c9a <HAL_DMA_DeInit+0x21a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a1b      	ldr	r2, [pc, #108]	; (8004cf8 <HAL_DMA_DeInit+0x278>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d004      	beq.n	8004c9a <HAL_DMA_DeInit+0x21a>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a19      	ldr	r2, [pc, #100]	; (8004cfc <HAL_DMA_DeInit+0x27c>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d132      	bne.n	8004d00 <HAL_DMA_DeInit+0x280>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e031      	b.n	8004d02 <HAL_DMA_DeInit+0x282>
 8004c9e:	bf00      	nop
 8004ca0:	40020010 	.word	0x40020010
 8004ca4:	40020028 	.word	0x40020028
 8004ca8:	40020040 	.word	0x40020040
 8004cac:	40020058 	.word	0x40020058
 8004cb0:	40020070 	.word	0x40020070
 8004cb4:	40020088 	.word	0x40020088
 8004cb8:	400200a0 	.word	0x400200a0
 8004cbc:	400200b8 	.word	0x400200b8
 8004cc0:	40020410 	.word	0x40020410
 8004cc4:	40020428 	.word	0x40020428
 8004cc8:	40020440 	.word	0x40020440
 8004ccc:	40020458 	.word	0x40020458
 8004cd0:	40020470 	.word	0x40020470
 8004cd4:	40020488 	.word	0x40020488
 8004cd8:	400204a0 	.word	0x400204a0
 8004cdc:	400204b8 	.word	0x400204b8
 8004ce0:	58025408 	.word	0x58025408
 8004ce4:	5802541c 	.word	0x5802541c
 8004ce8:	58025430 	.word	0x58025430
 8004cec:	58025444 	.word	0x58025444
 8004cf0:	58025458 	.word	0x58025458
 8004cf4:	5802546c 	.word	0x5802546c
 8004cf8:	58025480 	.word	0x58025480
 8004cfc:	58025494 	.word	0x58025494
 8004d00:	2300      	movs	r3, #0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d021      	beq.n	8004d4a <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2200      	movs	r2, #0
 8004d14:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2200      	movs	r2, #0
 8004d24:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f002 f900 	bl	8006f34 <DMA_CalcBaseAndBitshift>
 8004d34:	4603      	mov	r3, r0
 8004d36:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d3c:	f003 031f 	and.w	r3, r3, #31
 8004d40:	2201      	movs	r2, #1
 8004d42:	409a      	lsls	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	605a      	str	r2, [r3, #4]
 8004d48:	e001      	b.n	8004d4e <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e04a      	b.n	8004de4 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f002 fa1e 	bl	8007190 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d008      	beq.n	8004d6e <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d6c:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00f      	beq.n	8004d96 <HAL_DMA_DeInit+0x316>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d80b      	bhi.n	8004d96 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f002 faa0 	bl	80072c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d94:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e226      	b.n	8005256 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_DMA_Start_IT+0x2a>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e21f      	b.n	8005256 <HAL_DMA_Start_IT+0x46a>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	f040 820a 	bne.w	8005240 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a68      	ldr	r2, [pc, #416]	; (8004fe0 <HAL_DMA_Start_IT+0x1f4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d04a      	beq.n	8004eda <HAL_DMA_Start_IT+0xee>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a66      	ldr	r2, [pc, #408]	; (8004fe4 <HAL_DMA_Start_IT+0x1f8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d045      	beq.n	8004eda <HAL_DMA_Start_IT+0xee>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a65      	ldr	r2, [pc, #404]	; (8004fe8 <HAL_DMA_Start_IT+0x1fc>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d040      	beq.n	8004eda <HAL_DMA_Start_IT+0xee>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a63      	ldr	r2, [pc, #396]	; (8004fec <HAL_DMA_Start_IT+0x200>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d03b      	beq.n	8004eda <HAL_DMA_Start_IT+0xee>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a62      	ldr	r2, [pc, #392]	; (8004ff0 <HAL_DMA_Start_IT+0x204>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d036      	beq.n	8004eda <HAL_DMA_Start_IT+0xee>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a60      	ldr	r2, [pc, #384]	; (8004ff4 <HAL_DMA_Start_IT+0x208>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d031      	beq.n	8004eda <HAL_DMA_Start_IT+0xee>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a5f      	ldr	r2, [pc, #380]	; (8004ff8 <HAL_DMA_Start_IT+0x20c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d02c      	beq.n	8004eda <HAL_DMA_Start_IT+0xee>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a5d      	ldr	r2, [pc, #372]	; (8004ffc <HAL_DMA_Start_IT+0x210>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d027      	beq.n	8004eda <HAL_DMA_Start_IT+0xee>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a5c      	ldr	r2, [pc, #368]	; (8005000 <HAL_DMA_Start_IT+0x214>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d022      	beq.n	8004eda <HAL_DMA_Start_IT+0xee>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a5a      	ldr	r2, [pc, #360]	; (8005004 <HAL_DMA_Start_IT+0x218>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d01d      	beq.n	8004eda <HAL_DMA_Start_IT+0xee>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a59      	ldr	r2, [pc, #356]	; (8005008 <HAL_DMA_Start_IT+0x21c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d018      	beq.n	8004eda <HAL_DMA_Start_IT+0xee>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a57      	ldr	r2, [pc, #348]	; (800500c <HAL_DMA_Start_IT+0x220>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d013      	beq.n	8004eda <HAL_DMA_Start_IT+0xee>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a56      	ldr	r2, [pc, #344]	; (8005010 <HAL_DMA_Start_IT+0x224>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00e      	beq.n	8004eda <HAL_DMA_Start_IT+0xee>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a54      	ldr	r2, [pc, #336]	; (8005014 <HAL_DMA_Start_IT+0x228>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d009      	beq.n	8004eda <HAL_DMA_Start_IT+0xee>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a53      	ldr	r2, [pc, #332]	; (8005018 <HAL_DMA_Start_IT+0x22c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d004      	beq.n	8004eda <HAL_DMA_Start_IT+0xee>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a51      	ldr	r2, [pc, #324]	; (800501c <HAL_DMA_Start_IT+0x230>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d108      	bne.n	8004eec <HAL_DMA_Start_IT+0x100>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 0201 	bic.w	r2, r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	e007      	b.n	8004efc <HAL_DMA_Start_IT+0x110>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0201 	bic.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	68b9      	ldr	r1, [r7, #8]
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f001 fe6a 	bl	8006bdc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a34      	ldr	r2, [pc, #208]	; (8004fe0 <HAL_DMA_Start_IT+0x1f4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d04a      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x1bc>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a33      	ldr	r2, [pc, #204]	; (8004fe4 <HAL_DMA_Start_IT+0x1f8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d045      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x1bc>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a31      	ldr	r2, [pc, #196]	; (8004fe8 <HAL_DMA_Start_IT+0x1fc>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d040      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x1bc>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a30      	ldr	r2, [pc, #192]	; (8004fec <HAL_DMA_Start_IT+0x200>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d03b      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x1bc>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a2e      	ldr	r2, [pc, #184]	; (8004ff0 <HAL_DMA_Start_IT+0x204>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d036      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x1bc>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a2d      	ldr	r2, [pc, #180]	; (8004ff4 <HAL_DMA_Start_IT+0x208>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d031      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x1bc>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a2b      	ldr	r2, [pc, #172]	; (8004ff8 <HAL_DMA_Start_IT+0x20c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d02c      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x1bc>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a2a      	ldr	r2, [pc, #168]	; (8004ffc <HAL_DMA_Start_IT+0x210>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d027      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x1bc>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a28      	ldr	r2, [pc, #160]	; (8005000 <HAL_DMA_Start_IT+0x214>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d022      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x1bc>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a27      	ldr	r2, [pc, #156]	; (8005004 <HAL_DMA_Start_IT+0x218>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d01d      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x1bc>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a25      	ldr	r2, [pc, #148]	; (8005008 <HAL_DMA_Start_IT+0x21c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d018      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x1bc>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a24      	ldr	r2, [pc, #144]	; (800500c <HAL_DMA_Start_IT+0x220>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d013      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x1bc>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a22      	ldr	r2, [pc, #136]	; (8005010 <HAL_DMA_Start_IT+0x224>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00e      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x1bc>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a21      	ldr	r2, [pc, #132]	; (8005014 <HAL_DMA_Start_IT+0x228>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d009      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x1bc>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a1f      	ldr	r2, [pc, #124]	; (8005018 <HAL_DMA_Start_IT+0x22c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d004      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x1bc>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1e      	ldr	r2, [pc, #120]	; (800501c <HAL_DMA_Start_IT+0x230>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d101      	bne.n	8004fac <HAL_DMA_Start_IT+0x1c0>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <HAL_DMA_Start_IT+0x1c2>
 8004fac:	2300      	movs	r3, #0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d036      	beq.n	8005020 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f023 021e 	bic.w	r2, r3, #30
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0216 	orr.w	r2, r2, #22
 8004fc4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d03e      	beq.n	800504c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 0208 	orr.w	r2, r2, #8
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e035      	b.n	800504c <HAL_DMA_Start_IT+0x260>
 8004fe0:	40020010 	.word	0x40020010
 8004fe4:	40020028 	.word	0x40020028
 8004fe8:	40020040 	.word	0x40020040
 8004fec:	40020058 	.word	0x40020058
 8004ff0:	40020070 	.word	0x40020070
 8004ff4:	40020088 	.word	0x40020088
 8004ff8:	400200a0 	.word	0x400200a0
 8004ffc:	400200b8 	.word	0x400200b8
 8005000:	40020410 	.word	0x40020410
 8005004:	40020428 	.word	0x40020428
 8005008:	40020440 	.word	0x40020440
 800500c:	40020458 	.word	0x40020458
 8005010:	40020470 	.word	0x40020470
 8005014:	40020488 	.word	0x40020488
 8005018:	400204a0 	.word	0x400204a0
 800501c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f023 020e 	bic.w	r2, r3, #14
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 020a 	orr.w	r2, r2, #10
 8005032:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	2b00      	cmp	r3, #0
 800503a:	d007      	beq.n	800504c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0204 	orr.w	r2, r2, #4
 800504a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a83      	ldr	r2, [pc, #524]	; (8005260 <HAL_DMA_Start_IT+0x474>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d072      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a82      	ldr	r2, [pc, #520]	; (8005264 <HAL_DMA_Start_IT+0x478>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d06d      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a80      	ldr	r2, [pc, #512]	; (8005268 <HAL_DMA_Start_IT+0x47c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d068      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a7f      	ldr	r2, [pc, #508]	; (800526c <HAL_DMA_Start_IT+0x480>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d063      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a7d      	ldr	r2, [pc, #500]	; (8005270 <HAL_DMA_Start_IT+0x484>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d05e      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a7c      	ldr	r2, [pc, #496]	; (8005274 <HAL_DMA_Start_IT+0x488>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d059      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a7a      	ldr	r2, [pc, #488]	; (8005278 <HAL_DMA_Start_IT+0x48c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d054      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a79      	ldr	r2, [pc, #484]	; (800527c <HAL_DMA_Start_IT+0x490>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d04f      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a77      	ldr	r2, [pc, #476]	; (8005280 <HAL_DMA_Start_IT+0x494>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d04a      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a76      	ldr	r2, [pc, #472]	; (8005284 <HAL_DMA_Start_IT+0x498>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d045      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a74      	ldr	r2, [pc, #464]	; (8005288 <HAL_DMA_Start_IT+0x49c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d040      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a73      	ldr	r2, [pc, #460]	; (800528c <HAL_DMA_Start_IT+0x4a0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d03b      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a71      	ldr	r2, [pc, #452]	; (8005290 <HAL_DMA_Start_IT+0x4a4>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d036      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a70      	ldr	r2, [pc, #448]	; (8005294 <HAL_DMA_Start_IT+0x4a8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d031      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a6e      	ldr	r2, [pc, #440]	; (8005298 <HAL_DMA_Start_IT+0x4ac>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d02c      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a6d      	ldr	r2, [pc, #436]	; (800529c <HAL_DMA_Start_IT+0x4b0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d027      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a6b      	ldr	r2, [pc, #428]	; (80052a0 <HAL_DMA_Start_IT+0x4b4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d022      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a6a      	ldr	r2, [pc, #424]	; (80052a4 <HAL_DMA_Start_IT+0x4b8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d01d      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a68      	ldr	r2, [pc, #416]	; (80052a8 <HAL_DMA_Start_IT+0x4bc>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d018      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a67      	ldr	r2, [pc, #412]	; (80052ac <HAL_DMA_Start_IT+0x4c0>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d013      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a65      	ldr	r2, [pc, #404]	; (80052b0 <HAL_DMA_Start_IT+0x4c4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00e      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a64      	ldr	r2, [pc, #400]	; (80052b4 <HAL_DMA_Start_IT+0x4c8>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d009      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a62      	ldr	r2, [pc, #392]	; (80052b8 <HAL_DMA_Start_IT+0x4cc>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d004      	beq.n	800513c <HAL_DMA_Start_IT+0x350>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a61      	ldr	r2, [pc, #388]	; (80052bc <HAL_DMA_Start_IT+0x4d0>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d101      	bne.n	8005140 <HAL_DMA_Start_IT+0x354>
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <HAL_DMA_Start_IT+0x356>
 8005140:	2300      	movs	r3, #0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d01a      	beq.n	800517c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d007      	beq.n	8005164 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800515e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005162:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005168:	2b00      	cmp	r3, #0
 800516a:	d007      	beq.n	800517c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800517a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a37      	ldr	r2, [pc, #220]	; (8005260 <HAL_DMA_Start_IT+0x474>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d04a      	beq.n	800521c <HAL_DMA_Start_IT+0x430>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a36      	ldr	r2, [pc, #216]	; (8005264 <HAL_DMA_Start_IT+0x478>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d045      	beq.n	800521c <HAL_DMA_Start_IT+0x430>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a34      	ldr	r2, [pc, #208]	; (8005268 <HAL_DMA_Start_IT+0x47c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d040      	beq.n	800521c <HAL_DMA_Start_IT+0x430>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a33      	ldr	r2, [pc, #204]	; (800526c <HAL_DMA_Start_IT+0x480>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d03b      	beq.n	800521c <HAL_DMA_Start_IT+0x430>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a31      	ldr	r2, [pc, #196]	; (8005270 <HAL_DMA_Start_IT+0x484>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d036      	beq.n	800521c <HAL_DMA_Start_IT+0x430>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a30      	ldr	r2, [pc, #192]	; (8005274 <HAL_DMA_Start_IT+0x488>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d031      	beq.n	800521c <HAL_DMA_Start_IT+0x430>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a2e      	ldr	r2, [pc, #184]	; (8005278 <HAL_DMA_Start_IT+0x48c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d02c      	beq.n	800521c <HAL_DMA_Start_IT+0x430>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a2d      	ldr	r2, [pc, #180]	; (800527c <HAL_DMA_Start_IT+0x490>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d027      	beq.n	800521c <HAL_DMA_Start_IT+0x430>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a2b      	ldr	r2, [pc, #172]	; (8005280 <HAL_DMA_Start_IT+0x494>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d022      	beq.n	800521c <HAL_DMA_Start_IT+0x430>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a2a      	ldr	r2, [pc, #168]	; (8005284 <HAL_DMA_Start_IT+0x498>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d01d      	beq.n	800521c <HAL_DMA_Start_IT+0x430>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a28      	ldr	r2, [pc, #160]	; (8005288 <HAL_DMA_Start_IT+0x49c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d018      	beq.n	800521c <HAL_DMA_Start_IT+0x430>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a27      	ldr	r2, [pc, #156]	; (800528c <HAL_DMA_Start_IT+0x4a0>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d013      	beq.n	800521c <HAL_DMA_Start_IT+0x430>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a25      	ldr	r2, [pc, #148]	; (8005290 <HAL_DMA_Start_IT+0x4a4>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00e      	beq.n	800521c <HAL_DMA_Start_IT+0x430>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a24      	ldr	r2, [pc, #144]	; (8005294 <HAL_DMA_Start_IT+0x4a8>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d009      	beq.n	800521c <HAL_DMA_Start_IT+0x430>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a22      	ldr	r2, [pc, #136]	; (8005298 <HAL_DMA_Start_IT+0x4ac>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d004      	beq.n	800521c <HAL_DMA_Start_IT+0x430>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a21      	ldr	r2, [pc, #132]	; (800529c <HAL_DMA_Start_IT+0x4b0>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d108      	bne.n	800522e <HAL_DMA_Start_IT+0x442>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	e012      	b.n	8005254 <HAL_DMA_Start_IT+0x468>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 0201 	orr.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	e009      	b.n	8005254 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005246:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005254:	7dfb      	ldrb	r3, [r7, #23]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3718      	adds	r7, #24
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	40020010 	.word	0x40020010
 8005264:	40020028 	.word	0x40020028
 8005268:	40020040 	.word	0x40020040
 800526c:	40020058 	.word	0x40020058
 8005270:	40020070 	.word	0x40020070
 8005274:	40020088 	.word	0x40020088
 8005278:	400200a0 	.word	0x400200a0
 800527c:	400200b8 	.word	0x400200b8
 8005280:	40020410 	.word	0x40020410
 8005284:	40020428 	.word	0x40020428
 8005288:	40020440 	.word	0x40020440
 800528c:	40020458 	.word	0x40020458
 8005290:	40020470 	.word	0x40020470
 8005294:	40020488 	.word	0x40020488
 8005298:	400204a0 	.word	0x400204a0
 800529c:	400204b8 	.word	0x400204b8
 80052a0:	58025408 	.word	0x58025408
 80052a4:	5802541c 	.word	0x5802541c
 80052a8:	58025430 	.word	0x58025430
 80052ac:	58025444 	.word	0x58025444
 80052b0:	58025458 	.word	0x58025458
 80052b4:	5802546c 	.word	0x5802546c
 80052b8:	58025480 	.word	0x58025480
 80052bc:	58025494 	.word	0x58025494

080052c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80052c8:	f7fe ff32 	bl	8004130 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e2dc      	b.n	8005892 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d008      	beq.n	80052f6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2280      	movs	r2, #128	; 0x80
 80052e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e2cd      	b.n	8005892 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a76      	ldr	r2, [pc, #472]	; (80054d4 <HAL_DMA_Abort+0x214>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d04a      	beq.n	8005396 <HAL_DMA_Abort+0xd6>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a74      	ldr	r2, [pc, #464]	; (80054d8 <HAL_DMA_Abort+0x218>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d045      	beq.n	8005396 <HAL_DMA_Abort+0xd6>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a73      	ldr	r2, [pc, #460]	; (80054dc <HAL_DMA_Abort+0x21c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d040      	beq.n	8005396 <HAL_DMA_Abort+0xd6>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a71      	ldr	r2, [pc, #452]	; (80054e0 <HAL_DMA_Abort+0x220>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d03b      	beq.n	8005396 <HAL_DMA_Abort+0xd6>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a70      	ldr	r2, [pc, #448]	; (80054e4 <HAL_DMA_Abort+0x224>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d036      	beq.n	8005396 <HAL_DMA_Abort+0xd6>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a6e      	ldr	r2, [pc, #440]	; (80054e8 <HAL_DMA_Abort+0x228>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d031      	beq.n	8005396 <HAL_DMA_Abort+0xd6>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a6d      	ldr	r2, [pc, #436]	; (80054ec <HAL_DMA_Abort+0x22c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d02c      	beq.n	8005396 <HAL_DMA_Abort+0xd6>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a6b      	ldr	r2, [pc, #428]	; (80054f0 <HAL_DMA_Abort+0x230>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d027      	beq.n	8005396 <HAL_DMA_Abort+0xd6>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a6a      	ldr	r2, [pc, #424]	; (80054f4 <HAL_DMA_Abort+0x234>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d022      	beq.n	8005396 <HAL_DMA_Abort+0xd6>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a68      	ldr	r2, [pc, #416]	; (80054f8 <HAL_DMA_Abort+0x238>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d01d      	beq.n	8005396 <HAL_DMA_Abort+0xd6>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a67      	ldr	r2, [pc, #412]	; (80054fc <HAL_DMA_Abort+0x23c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d018      	beq.n	8005396 <HAL_DMA_Abort+0xd6>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a65      	ldr	r2, [pc, #404]	; (8005500 <HAL_DMA_Abort+0x240>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d013      	beq.n	8005396 <HAL_DMA_Abort+0xd6>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a64      	ldr	r2, [pc, #400]	; (8005504 <HAL_DMA_Abort+0x244>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00e      	beq.n	8005396 <HAL_DMA_Abort+0xd6>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a62      	ldr	r2, [pc, #392]	; (8005508 <HAL_DMA_Abort+0x248>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d009      	beq.n	8005396 <HAL_DMA_Abort+0xd6>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a61      	ldr	r2, [pc, #388]	; (800550c <HAL_DMA_Abort+0x24c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d004      	beq.n	8005396 <HAL_DMA_Abort+0xd6>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a5f      	ldr	r2, [pc, #380]	; (8005510 <HAL_DMA_Abort+0x250>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d101      	bne.n	800539a <HAL_DMA_Abort+0xda>
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <HAL_DMA_Abort+0xdc>
 800539a:	2300      	movs	r3, #0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d013      	beq.n	80053c8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 021e 	bic.w	r2, r2, #30
 80053ae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	695a      	ldr	r2, [r3, #20]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053be:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	617b      	str	r3, [r7, #20]
 80053c6:	e00a      	b.n	80053de <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 020e 	bic.w	r2, r2, #14
 80053d6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a3c      	ldr	r2, [pc, #240]	; (80054d4 <HAL_DMA_Abort+0x214>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d072      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a3a      	ldr	r2, [pc, #232]	; (80054d8 <HAL_DMA_Abort+0x218>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d06d      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a39      	ldr	r2, [pc, #228]	; (80054dc <HAL_DMA_Abort+0x21c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d068      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a37      	ldr	r2, [pc, #220]	; (80054e0 <HAL_DMA_Abort+0x220>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d063      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a36      	ldr	r2, [pc, #216]	; (80054e4 <HAL_DMA_Abort+0x224>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d05e      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a34      	ldr	r2, [pc, #208]	; (80054e8 <HAL_DMA_Abort+0x228>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d059      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a33      	ldr	r2, [pc, #204]	; (80054ec <HAL_DMA_Abort+0x22c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d054      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a31      	ldr	r2, [pc, #196]	; (80054f0 <HAL_DMA_Abort+0x230>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d04f      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a30      	ldr	r2, [pc, #192]	; (80054f4 <HAL_DMA_Abort+0x234>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d04a      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a2e      	ldr	r2, [pc, #184]	; (80054f8 <HAL_DMA_Abort+0x238>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d045      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a2d      	ldr	r2, [pc, #180]	; (80054fc <HAL_DMA_Abort+0x23c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d040      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a2b      	ldr	r2, [pc, #172]	; (8005500 <HAL_DMA_Abort+0x240>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d03b      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a2a      	ldr	r2, [pc, #168]	; (8005504 <HAL_DMA_Abort+0x244>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d036      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a28      	ldr	r2, [pc, #160]	; (8005508 <HAL_DMA_Abort+0x248>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d031      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a27      	ldr	r2, [pc, #156]	; (800550c <HAL_DMA_Abort+0x24c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d02c      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a25      	ldr	r2, [pc, #148]	; (8005510 <HAL_DMA_Abort+0x250>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d027      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a24      	ldr	r2, [pc, #144]	; (8005514 <HAL_DMA_Abort+0x254>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d022      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a22      	ldr	r2, [pc, #136]	; (8005518 <HAL_DMA_Abort+0x258>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d01d      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a21      	ldr	r2, [pc, #132]	; (800551c <HAL_DMA_Abort+0x25c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d018      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a1f      	ldr	r2, [pc, #124]	; (8005520 <HAL_DMA_Abort+0x260>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d013      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a1e      	ldr	r2, [pc, #120]	; (8005524 <HAL_DMA_Abort+0x264>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d00e      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1c      	ldr	r2, [pc, #112]	; (8005528 <HAL_DMA_Abort+0x268>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d009      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1b      	ldr	r2, [pc, #108]	; (800552c <HAL_DMA_Abort+0x26c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d004      	beq.n	80054ce <HAL_DMA_Abort+0x20e>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a19      	ldr	r2, [pc, #100]	; (8005530 <HAL_DMA_Abort+0x270>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d132      	bne.n	8005534 <HAL_DMA_Abort+0x274>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e031      	b.n	8005536 <HAL_DMA_Abort+0x276>
 80054d2:	bf00      	nop
 80054d4:	40020010 	.word	0x40020010
 80054d8:	40020028 	.word	0x40020028
 80054dc:	40020040 	.word	0x40020040
 80054e0:	40020058 	.word	0x40020058
 80054e4:	40020070 	.word	0x40020070
 80054e8:	40020088 	.word	0x40020088
 80054ec:	400200a0 	.word	0x400200a0
 80054f0:	400200b8 	.word	0x400200b8
 80054f4:	40020410 	.word	0x40020410
 80054f8:	40020428 	.word	0x40020428
 80054fc:	40020440 	.word	0x40020440
 8005500:	40020458 	.word	0x40020458
 8005504:	40020470 	.word	0x40020470
 8005508:	40020488 	.word	0x40020488
 800550c:	400204a0 	.word	0x400204a0
 8005510:	400204b8 	.word	0x400204b8
 8005514:	58025408 	.word	0x58025408
 8005518:	5802541c 	.word	0x5802541c
 800551c:	58025430 	.word	0x58025430
 8005520:	58025444 	.word	0x58025444
 8005524:	58025458 	.word	0x58025458
 8005528:	5802546c 	.word	0x5802546c
 800552c:	58025480 	.word	0x58025480
 8005530:	58025494 	.word	0x58025494
 8005534:	2300      	movs	r3, #0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d007      	beq.n	800554a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005544:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005548:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a6d      	ldr	r2, [pc, #436]	; (8005704 <HAL_DMA_Abort+0x444>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d04a      	beq.n	80055ea <HAL_DMA_Abort+0x32a>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a6b      	ldr	r2, [pc, #428]	; (8005708 <HAL_DMA_Abort+0x448>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d045      	beq.n	80055ea <HAL_DMA_Abort+0x32a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a6a      	ldr	r2, [pc, #424]	; (800570c <HAL_DMA_Abort+0x44c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d040      	beq.n	80055ea <HAL_DMA_Abort+0x32a>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a68      	ldr	r2, [pc, #416]	; (8005710 <HAL_DMA_Abort+0x450>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d03b      	beq.n	80055ea <HAL_DMA_Abort+0x32a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a67      	ldr	r2, [pc, #412]	; (8005714 <HAL_DMA_Abort+0x454>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d036      	beq.n	80055ea <HAL_DMA_Abort+0x32a>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a65      	ldr	r2, [pc, #404]	; (8005718 <HAL_DMA_Abort+0x458>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d031      	beq.n	80055ea <HAL_DMA_Abort+0x32a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a64      	ldr	r2, [pc, #400]	; (800571c <HAL_DMA_Abort+0x45c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d02c      	beq.n	80055ea <HAL_DMA_Abort+0x32a>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a62      	ldr	r2, [pc, #392]	; (8005720 <HAL_DMA_Abort+0x460>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d027      	beq.n	80055ea <HAL_DMA_Abort+0x32a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a61      	ldr	r2, [pc, #388]	; (8005724 <HAL_DMA_Abort+0x464>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d022      	beq.n	80055ea <HAL_DMA_Abort+0x32a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a5f      	ldr	r2, [pc, #380]	; (8005728 <HAL_DMA_Abort+0x468>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d01d      	beq.n	80055ea <HAL_DMA_Abort+0x32a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a5e      	ldr	r2, [pc, #376]	; (800572c <HAL_DMA_Abort+0x46c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d018      	beq.n	80055ea <HAL_DMA_Abort+0x32a>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a5c      	ldr	r2, [pc, #368]	; (8005730 <HAL_DMA_Abort+0x470>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d013      	beq.n	80055ea <HAL_DMA_Abort+0x32a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a5b      	ldr	r2, [pc, #364]	; (8005734 <HAL_DMA_Abort+0x474>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d00e      	beq.n	80055ea <HAL_DMA_Abort+0x32a>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a59      	ldr	r2, [pc, #356]	; (8005738 <HAL_DMA_Abort+0x478>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d009      	beq.n	80055ea <HAL_DMA_Abort+0x32a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a58      	ldr	r2, [pc, #352]	; (800573c <HAL_DMA_Abort+0x47c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d004      	beq.n	80055ea <HAL_DMA_Abort+0x32a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a56      	ldr	r2, [pc, #344]	; (8005740 <HAL_DMA_Abort+0x480>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d108      	bne.n	80055fc <HAL_DMA_Abort+0x33c>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0201 	bic.w	r2, r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	e007      	b.n	800560c <HAL_DMA_Abort+0x34c>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0201 	bic.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800560c:	e013      	b.n	8005636 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800560e:	f7fe fd8f 	bl	8004130 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b05      	cmp	r3, #5
 800561a:	d90c      	bls.n	8005636 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2220      	movs	r2, #32
 8005620:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2203      	movs	r2, #3
 8005626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e12d      	b.n	8005892 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1e5      	bne.n	800560e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a2f      	ldr	r2, [pc, #188]	; (8005704 <HAL_DMA_Abort+0x444>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d04a      	beq.n	80056e2 <HAL_DMA_Abort+0x422>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a2d      	ldr	r2, [pc, #180]	; (8005708 <HAL_DMA_Abort+0x448>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d045      	beq.n	80056e2 <HAL_DMA_Abort+0x422>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a2c      	ldr	r2, [pc, #176]	; (800570c <HAL_DMA_Abort+0x44c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d040      	beq.n	80056e2 <HAL_DMA_Abort+0x422>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a2a      	ldr	r2, [pc, #168]	; (8005710 <HAL_DMA_Abort+0x450>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d03b      	beq.n	80056e2 <HAL_DMA_Abort+0x422>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a29      	ldr	r2, [pc, #164]	; (8005714 <HAL_DMA_Abort+0x454>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d036      	beq.n	80056e2 <HAL_DMA_Abort+0x422>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a27      	ldr	r2, [pc, #156]	; (8005718 <HAL_DMA_Abort+0x458>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d031      	beq.n	80056e2 <HAL_DMA_Abort+0x422>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a26      	ldr	r2, [pc, #152]	; (800571c <HAL_DMA_Abort+0x45c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d02c      	beq.n	80056e2 <HAL_DMA_Abort+0x422>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a24      	ldr	r2, [pc, #144]	; (8005720 <HAL_DMA_Abort+0x460>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d027      	beq.n	80056e2 <HAL_DMA_Abort+0x422>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a23      	ldr	r2, [pc, #140]	; (8005724 <HAL_DMA_Abort+0x464>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d022      	beq.n	80056e2 <HAL_DMA_Abort+0x422>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a21      	ldr	r2, [pc, #132]	; (8005728 <HAL_DMA_Abort+0x468>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d01d      	beq.n	80056e2 <HAL_DMA_Abort+0x422>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a20      	ldr	r2, [pc, #128]	; (800572c <HAL_DMA_Abort+0x46c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d018      	beq.n	80056e2 <HAL_DMA_Abort+0x422>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1e      	ldr	r2, [pc, #120]	; (8005730 <HAL_DMA_Abort+0x470>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d013      	beq.n	80056e2 <HAL_DMA_Abort+0x422>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1d      	ldr	r2, [pc, #116]	; (8005734 <HAL_DMA_Abort+0x474>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00e      	beq.n	80056e2 <HAL_DMA_Abort+0x422>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a1b      	ldr	r2, [pc, #108]	; (8005738 <HAL_DMA_Abort+0x478>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d009      	beq.n	80056e2 <HAL_DMA_Abort+0x422>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a1a      	ldr	r2, [pc, #104]	; (800573c <HAL_DMA_Abort+0x47c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d004      	beq.n	80056e2 <HAL_DMA_Abort+0x422>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a18      	ldr	r2, [pc, #96]	; (8005740 <HAL_DMA_Abort+0x480>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d101      	bne.n	80056e6 <HAL_DMA_Abort+0x426>
 80056e2:	2301      	movs	r3, #1
 80056e4:	e000      	b.n	80056e8 <HAL_DMA_Abort+0x428>
 80056e6:	2300      	movs	r3, #0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d02b      	beq.n	8005744 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f6:	f003 031f 	and.w	r3, r3, #31
 80056fa:	223f      	movs	r2, #63	; 0x3f
 80056fc:	409a      	lsls	r2, r3
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	609a      	str	r2, [r3, #8]
 8005702:	e02a      	b.n	800575a <HAL_DMA_Abort+0x49a>
 8005704:	40020010 	.word	0x40020010
 8005708:	40020028 	.word	0x40020028
 800570c:	40020040 	.word	0x40020040
 8005710:	40020058 	.word	0x40020058
 8005714:	40020070 	.word	0x40020070
 8005718:	40020088 	.word	0x40020088
 800571c:	400200a0 	.word	0x400200a0
 8005720:	400200b8 	.word	0x400200b8
 8005724:	40020410 	.word	0x40020410
 8005728:	40020428 	.word	0x40020428
 800572c:	40020440 	.word	0x40020440
 8005730:	40020458 	.word	0x40020458
 8005734:	40020470 	.word	0x40020470
 8005738:	40020488 	.word	0x40020488
 800573c:	400204a0 	.word	0x400204a0
 8005740:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005748:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800574e:	f003 031f 	and.w	r3, r3, #31
 8005752:	2201      	movs	r2, #1
 8005754:	409a      	lsls	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a4f      	ldr	r2, [pc, #316]	; (800589c <HAL_DMA_Abort+0x5dc>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d072      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a4d      	ldr	r2, [pc, #308]	; (80058a0 <HAL_DMA_Abort+0x5e0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d06d      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a4c      	ldr	r2, [pc, #304]	; (80058a4 <HAL_DMA_Abort+0x5e4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d068      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a4a      	ldr	r2, [pc, #296]	; (80058a8 <HAL_DMA_Abort+0x5e8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d063      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a49      	ldr	r2, [pc, #292]	; (80058ac <HAL_DMA_Abort+0x5ec>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d05e      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a47      	ldr	r2, [pc, #284]	; (80058b0 <HAL_DMA_Abort+0x5f0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d059      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a46      	ldr	r2, [pc, #280]	; (80058b4 <HAL_DMA_Abort+0x5f4>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d054      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a44      	ldr	r2, [pc, #272]	; (80058b8 <HAL_DMA_Abort+0x5f8>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d04f      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a43      	ldr	r2, [pc, #268]	; (80058bc <HAL_DMA_Abort+0x5fc>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d04a      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a41      	ldr	r2, [pc, #260]	; (80058c0 <HAL_DMA_Abort+0x600>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d045      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a40      	ldr	r2, [pc, #256]	; (80058c4 <HAL_DMA_Abort+0x604>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d040      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a3e      	ldr	r2, [pc, #248]	; (80058c8 <HAL_DMA_Abort+0x608>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d03b      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a3d      	ldr	r2, [pc, #244]	; (80058cc <HAL_DMA_Abort+0x60c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d036      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a3b      	ldr	r2, [pc, #236]	; (80058d0 <HAL_DMA_Abort+0x610>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d031      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a3a      	ldr	r2, [pc, #232]	; (80058d4 <HAL_DMA_Abort+0x614>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d02c      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a38      	ldr	r2, [pc, #224]	; (80058d8 <HAL_DMA_Abort+0x618>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d027      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a37      	ldr	r2, [pc, #220]	; (80058dc <HAL_DMA_Abort+0x61c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d022      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a35      	ldr	r2, [pc, #212]	; (80058e0 <HAL_DMA_Abort+0x620>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d01d      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a34      	ldr	r2, [pc, #208]	; (80058e4 <HAL_DMA_Abort+0x624>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d018      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a32      	ldr	r2, [pc, #200]	; (80058e8 <HAL_DMA_Abort+0x628>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d013      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a31      	ldr	r2, [pc, #196]	; (80058ec <HAL_DMA_Abort+0x62c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00e      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a2f      	ldr	r2, [pc, #188]	; (80058f0 <HAL_DMA_Abort+0x630>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d009      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a2e      	ldr	r2, [pc, #184]	; (80058f4 <HAL_DMA_Abort+0x634>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d004      	beq.n	800584a <HAL_DMA_Abort+0x58a>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a2c      	ldr	r2, [pc, #176]	; (80058f8 <HAL_DMA_Abort+0x638>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d101      	bne.n	800584e <HAL_DMA_Abort+0x58e>
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <HAL_DMA_Abort+0x590>
 800584e:	2300      	movs	r3, #0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d015      	beq.n	8005880 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800585c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00c      	beq.n	8005880 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005870:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005874:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800587e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3718      	adds	r7, #24
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	40020010 	.word	0x40020010
 80058a0:	40020028 	.word	0x40020028
 80058a4:	40020040 	.word	0x40020040
 80058a8:	40020058 	.word	0x40020058
 80058ac:	40020070 	.word	0x40020070
 80058b0:	40020088 	.word	0x40020088
 80058b4:	400200a0 	.word	0x400200a0
 80058b8:	400200b8 	.word	0x400200b8
 80058bc:	40020410 	.word	0x40020410
 80058c0:	40020428 	.word	0x40020428
 80058c4:	40020440 	.word	0x40020440
 80058c8:	40020458 	.word	0x40020458
 80058cc:	40020470 	.word	0x40020470
 80058d0:	40020488 	.word	0x40020488
 80058d4:	400204a0 	.word	0x400204a0
 80058d8:	400204b8 	.word	0x400204b8
 80058dc:	58025408 	.word	0x58025408
 80058e0:	5802541c 	.word	0x5802541c
 80058e4:	58025430 	.word	0x58025430
 80058e8:	58025444 	.word	0x58025444
 80058ec:	58025458 	.word	0x58025458
 80058f0:	5802546c 	.word	0x5802546c
 80058f4:	58025480 	.word	0x58025480
 80058f8:	58025494 	.word	0x58025494

080058fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e237      	b.n	8005d7e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d004      	beq.n	8005924 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2280      	movs	r2, #128	; 0x80
 800591e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e22c      	b.n	8005d7e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a5c      	ldr	r2, [pc, #368]	; (8005a9c <HAL_DMA_Abort_IT+0x1a0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d04a      	beq.n	80059c4 <HAL_DMA_Abort_IT+0xc8>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a5b      	ldr	r2, [pc, #364]	; (8005aa0 <HAL_DMA_Abort_IT+0x1a4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d045      	beq.n	80059c4 <HAL_DMA_Abort_IT+0xc8>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a59      	ldr	r2, [pc, #356]	; (8005aa4 <HAL_DMA_Abort_IT+0x1a8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d040      	beq.n	80059c4 <HAL_DMA_Abort_IT+0xc8>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a58      	ldr	r2, [pc, #352]	; (8005aa8 <HAL_DMA_Abort_IT+0x1ac>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d03b      	beq.n	80059c4 <HAL_DMA_Abort_IT+0xc8>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a56      	ldr	r2, [pc, #344]	; (8005aac <HAL_DMA_Abort_IT+0x1b0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d036      	beq.n	80059c4 <HAL_DMA_Abort_IT+0xc8>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a55      	ldr	r2, [pc, #340]	; (8005ab0 <HAL_DMA_Abort_IT+0x1b4>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d031      	beq.n	80059c4 <HAL_DMA_Abort_IT+0xc8>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a53      	ldr	r2, [pc, #332]	; (8005ab4 <HAL_DMA_Abort_IT+0x1b8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d02c      	beq.n	80059c4 <HAL_DMA_Abort_IT+0xc8>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a52      	ldr	r2, [pc, #328]	; (8005ab8 <HAL_DMA_Abort_IT+0x1bc>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d027      	beq.n	80059c4 <HAL_DMA_Abort_IT+0xc8>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a50      	ldr	r2, [pc, #320]	; (8005abc <HAL_DMA_Abort_IT+0x1c0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d022      	beq.n	80059c4 <HAL_DMA_Abort_IT+0xc8>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a4f      	ldr	r2, [pc, #316]	; (8005ac0 <HAL_DMA_Abort_IT+0x1c4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d01d      	beq.n	80059c4 <HAL_DMA_Abort_IT+0xc8>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a4d      	ldr	r2, [pc, #308]	; (8005ac4 <HAL_DMA_Abort_IT+0x1c8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d018      	beq.n	80059c4 <HAL_DMA_Abort_IT+0xc8>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a4c      	ldr	r2, [pc, #304]	; (8005ac8 <HAL_DMA_Abort_IT+0x1cc>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d013      	beq.n	80059c4 <HAL_DMA_Abort_IT+0xc8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a4a      	ldr	r2, [pc, #296]	; (8005acc <HAL_DMA_Abort_IT+0x1d0>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d00e      	beq.n	80059c4 <HAL_DMA_Abort_IT+0xc8>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a49      	ldr	r2, [pc, #292]	; (8005ad0 <HAL_DMA_Abort_IT+0x1d4>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d009      	beq.n	80059c4 <HAL_DMA_Abort_IT+0xc8>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a47      	ldr	r2, [pc, #284]	; (8005ad4 <HAL_DMA_Abort_IT+0x1d8>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d004      	beq.n	80059c4 <HAL_DMA_Abort_IT+0xc8>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a46      	ldr	r2, [pc, #280]	; (8005ad8 <HAL_DMA_Abort_IT+0x1dc>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d101      	bne.n	80059c8 <HAL_DMA_Abort_IT+0xcc>
 80059c4:	2301      	movs	r3, #1
 80059c6:	e000      	b.n	80059ca <HAL_DMA_Abort_IT+0xce>
 80059c8:	2300      	movs	r3, #0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 8086 	beq.w	8005adc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2204      	movs	r2, #4
 80059d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a2f      	ldr	r2, [pc, #188]	; (8005a9c <HAL_DMA_Abort_IT+0x1a0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d04a      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x17c>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a2e      	ldr	r2, [pc, #184]	; (8005aa0 <HAL_DMA_Abort_IT+0x1a4>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d045      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x17c>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a2c      	ldr	r2, [pc, #176]	; (8005aa4 <HAL_DMA_Abort_IT+0x1a8>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d040      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x17c>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a2b      	ldr	r2, [pc, #172]	; (8005aa8 <HAL_DMA_Abort_IT+0x1ac>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d03b      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x17c>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a29      	ldr	r2, [pc, #164]	; (8005aac <HAL_DMA_Abort_IT+0x1b0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d036      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x17c>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a28      	ldr	r2, [pc, #160]	; (8005ab0 <HAL_DMA_Abort_IT+0x1b4>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d031      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x17c>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a26      	ldr	r2, [pc, #152]	; (8005ab4 <HAL_DMA_Abort_IT+0x1b8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d02c      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x17c>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a25      	ldr	r2, [pc, #148]	; (8005ab8 <HAL_DMA_Abort_IT+0x1bc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d027      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x17c>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a23      	ldr	r2, [pc, #140]	; (8005abc <HAL_DMA_Abort_IT+0x1c0>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d022      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x17c>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a22      	ldr	r2, [pc, #136]	; (8005ac0 <HAL_DMA_Abort_IT+0x1c4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d01d      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x17c>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a20      	ldr	r2, [pc, #128]	; (8005ac4 <HAL_DMA_Abort_IT+0x1c8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d018      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x17c>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a1f      	ldr	r2, [pc, #124]	; (8005ac8 <HAL_DMA_Abort_IT+0x1cc>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d013      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x17c>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a1d      	ldr	r2, [pc, #116]	; (8005acc <HAL_DMA_Abort_IT+0x1d0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00e      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x17c>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a1c      	ldr	r2, [pc, #112]	; (8005ad0 <HAL_DMA_Abort_IT+0x1d4>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d009      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x17c>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a1a      	ldr	r2, [pc, #104]	; (8005ad4 <HAL_DMA_Abort_IT+0x1d8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d004      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x17c>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a19      	ldr	r2, [pc, #100]	; (8005ad8 <HAL_DMA_Abort_IT+0x1dc>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d108      	bne.n	8005a8a <HAL_DMA_Abort_IT+0x18e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f022 0201 	bic.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	e178      	b.n	8005d7c <HAL_DMA_Abort_IT+0x480>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0201 	bic.w	r2, r2, #1
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	e16f      	b.n	8005d7c <HAL_DMA_Abort_IT+0x480>
 8005a9c:	40020010 	.word	0x40020010
 8005aa0:	40020028 	.word	0x40020028
 8005aa4:	40020040 	.word	0x40020040
 8005aa8:	40020058 	.word	0x40020058
 8005aac:	40020070 	.word	0x40020070
 8005ab0:	40020088 	.word	0x40020088
 8005ab4:	400200a0 	.word	0x400200a0
 8005ab8:	400200b8 	.word	0x400200b8
 8005abc:	40020410 	.word	0x40020410
 8005ac0:	40020428 	.word	0x40020428
 8005ac4:	40020440 	.word	0x40020440
 8005ac8:	40020458 	.word	0x40020458
 8005acc:	40020470 	.word	0x40020470
 8005ad0:	40020488 	.word	0x40020488
 8005ad4:	400204a0 	.word	0x400204a0
 8005ad8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 020e 	bic.w	r2, r2, #14
 8005aea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a6c      	ldr	r2, [pc, #432]	; (8005ca4 <HAL_DMA_Abort_IT+0x3a8>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d04a      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x290>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a6b      	ldr	r2, [pc, #428]	; (8005ca8 <HAL_DMA_Abort_IT+0x3ac>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d045      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x290>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a69      	ldr	r2, [pc, #420]	; (8005cac <HAL_DMA_Abort_IT+0x3b0>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d040      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x290>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a68      	ldr	r2, [pc, #416]	; (8005cb0 <HAL_DMA_Abort_IT+0x3b4>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d03b      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x290>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a66      	ldr	r2, [pc, #408]	; (8005cb4 <HAL_DMA_Abort_IT+0x3b8>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d036      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x290>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a65      	ldr	r2, [pc, #404]	; (8005cb8 <HAL_DMA_Abort_IT+0x3bc>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d031      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x290>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a63      	ldr	r2, [pc, #396]	; (8005cbc <HAL_DMA_Abort_IT+0x3c0>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d02c      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x290>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a62      	ldr	r2, [pc, #392]	; (8005cc0 <HAL_DMA_Abort_IT+0x3c4>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d027      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x290>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a60      	ldr	r2, [pc, #384]	; (8005cc4 <HAL_DMA_Abort_IT+0x3c8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d022      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x290>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a5f      	ldr	r2, [pc, #380]	; (8005cc8 <HAL_DMA_Abort_IT+0x3cc>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d01d      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x290>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a5d      	ldr	r2, [pc, #372]	; (8005ccc <HAL_DMA_Abort_IT+0x3d0>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d018      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x290>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a5c      	ldr	r2, [pc, #368]	; (8005cd0 <HAL_DMA_Abort_IT+0x3d4>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d013      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x290>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a5a      	ldr	r2, [pc, #360]	; (8005cd4 <HAL_DMA_Abort_IT+0x3d8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d00e      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x290>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a59      	ldr	r2, [pc, #356]	; (8005cd8 <HAL_DMA_Abort_IT+0x3dc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d009      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x290>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a57      	ldr	r2, [pc, #348]	; (8005cdc <HAL_DMA_Abort_IT+0x3e0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d004      	beq.n	8005b8c <HAL_DMA_Abort_IT+0x290>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a56      	ldr	r2, [pc, #344]	; (8005ce0 <HAL_DMA_Abort_IT+0x3e4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d108      	bne.n	8005b9e <HAL_DMA_Abort_IT+0x2a2>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0201 	bic.w	r2, r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	e007      	b.n	8005bae <HAL_DMA_Abort_IT+0x2b2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0201 	bic.w	r2, r2, #1
 8005bac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a3c      	ldr	r2, [pc, #240]	; (8005ca4 <HAL_DMA_Abort_IT+0x3a8>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d072      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a3a      	ldr	r2, [pc, #232]	; (8005ca8 <HAL_DMA_Abort_IT+0x3ac>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d06d      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a39      	ldr	r2, [pc, #228]	; (8005cac <HAL_DMA_Abort_IT+0x3b0>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d068      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a37      	ldr	r2, [pc, #220]	; (8005cb0 <HAL_DMA_Abort_IT+0x3b4>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d063      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a36      	ldr	r2, [pc, #216]	; (8005cb4 <HAL_DMA_Abort_IT+0x3b8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d05e      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a34      	ldr	r2, [pc, #208]	; (8005cb8 <HAL_DMA_Abort_IT+0x3bc>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d059      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a33      	ldr	r2, [pc, #204]	; (8005cbc <HAL_DMA_Abort_IT+0x3c0>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d054      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a31      	ldr	r2, [pc, #196]	; (8005cc0 <HAL_DMA_Abort_IT+0x3c4>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d04f      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a30      	ldr	r2, [pc, #192]	; (8005cc4 <HAL_DMA_Abort_IT+0x3c8>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d04a      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a2e      	ldr	r2, [pc, #184]	; (8005cc8 <HAL_DMA_Abort_IT+0x3cc>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d045      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a2d      	ldr	r2, [pc, #180]	; (8005ccc <HAL_DMA_Abort_IT+0x3d0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d040      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a2b      	ldr	r2, [pc, #172]	; (8005cd0 <HAL_DMA_Abort_IT+0x3d4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d03b      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a2a      	ldr	r2, [pc, #168]	; (8005cd4 <HAL_DMA_Abort_IT+0x3d8>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d036      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a28      	ldr	r2, [pc, #160]	; (8005cd8 <HAL_DMA_Abort_IT+0x3dc>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d031      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a27      	ldr	r2, [pc, #156]	; (8005cdc <HAL_DMA_Abort_IT+0x3e0>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d02c      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a25      	ldr	r2, [pc, #148]	; (8005ce0 <HAL_DMA_Abort_IT+0x3e4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d027      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a24      	ldr	r2, [pc, #144]	; (8005ce4 <HAL_DMA_Abort_IT+0x3e8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d022      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a22      	ldr	r2, [pc, #136]	; (8005ce8 <HAL_DMA_Abort_IT+0x3ec>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d01d      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a21      	ldr	r2, [pc, #132]	; (8005cec <HAL_DMA_Abort_IT+0x3f0>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d018      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a1f      	ldr	r2, [pc, #124]	; (8005cf0 <HAL_DMA_Abort_IT+0x3f4>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d013      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a1e      	ldr	r2, [pc, #120]	; (8005cf4 <HAL_DMA_Abort_IT+0x3f8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00e      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1c      	ldr	r2, [pc, #112]	; (8005cf8 <HAL_DMA_Abort_IT+0x3fc>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d009      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1b      	ldr	r2, [pc, #108]	; (8005cfc <HAL_DMA_Abort_IT+0x400>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d004      	beq.n	8005c9e <HAL_DMA_Abort_IT+0x3a2>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a19      	ldr	r2, [pc, #100]	; (8005d00 <HAL_DMA_Abort_IT+0x404>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d132      	bne.n	8005d04 <HAL_DMA_Abort_IT+0x408>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e031      	b.n	8005d06 <HAL_DMA_Abort_IT+0x40a>
 8005ca2:	bf00      	nop
 8005ca4:	40020010 	.word	0x40020010
 8005ca8:	40020028 	.word	0x40020028
 8005cac:	40020040 	.word	0x40020040
 8005cb0:	40020058 	.word	0x40020058
 8005cb4:	40020070 	.word	0x40020070
 8005cb8:	40020088 	.word	0x40020088
 8005cbc:	400200a0 	.word	0x400200a0
 8005cc0:	400200b8 	.word	0x400200b8
 8005cc4:	40020410 	.word	0x40020410
 8005cc8:	40020428 	.word	0x40020428
 8005ccc:	40020440 	.word	0x40020440
 8005cd0:	40020458 	.word	0x40020458
 8005cd4:	40020470 	.word	0x40020470
 8005cd8:	40020488 	.word	0x40020488
 8005cdc:	400204a0 	.word	0x400204a0
 8005ce0:	400204b8 	.word	0x400204b8
 8005ce4:	58025408 	.word	0x58025408
 8005ce8:	5802541c 	.word	0x5802541c
 8005cec:	58025430 	.word	0x58025430
 8005cf0:	58025444 	.word	0x58025444
 8005cf4:	58025458 	.word	0x58025458
 8005cf8:	5802546c 	.word	0x5802546c
 8005cfc:	58025480 	.word	0x58025480
 8005d00:	58025494 	.word	0x58025494
 8005d04:	2300      	movs	r3, #0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d028      	beq.n	8005d5c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d18:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d24:	f003 031f 	and.w	r3, r3, #31
 8005d28:	2201      	movs	r2, #1
 8005d2a:	409a      	lsls	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d38:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00c      	beq.n	8005d5c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d50:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d5a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop

08005d88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08a      	sub	sp, #40	; 0x28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d94:	4b67      	ldr	r3, [pc, #412]	; (8005f34 <HAL_DMA_IRQHandler+0x1ac>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a67      	ldr	r2, [pc, #412]	; (8005f38 <HAL_DMA_IRQHandler+0x1b0>)
 8005d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9e:	0a9b      	lsrs	r3, r3, #10
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a5f      	ldr	r2, [pc, #380]	; (8005f3c <HAL_DMA_IRQHandler+0x1b4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d04a      	beq.n	8005e5a <HAL_DMA_IRQHandler+0xd2>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a5d      	ldr	r2, [pc, #372]	; (8005f40 <HAL_DMA_IRQHandler+0x1b8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d045      	beq.n	8005e5a <HAL_DMA_IRQHandler+0xd2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a5c      	ldr	r2, [pc, #368]	; (8005f44 <HAL_DMA_IRQHandler+0x1bc>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d040      	beq.n	8005e5a <HAL_DMA_IRQHandler+0xd2>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a5a      	ldr	r2, [pc, #360]	; (8005f48 <HAL_DMA_IRQHandler+0x1c0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d03b      	beq.n	8005e5a <HAL_DMA_IRQHandler+0xd2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a59      	ldr	r2, [pc, #356]	; (8005f4c <HAL_DMA_IRQHandler+0x1c4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d036      	beq.n	8005e5a <HAL_DMA_IRQHandler+0xd2>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a57      	ldr	r2, [pc, #348]	; (8005f50 <HAL_DMA_IRQHandler+0x1c8>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d031      	beq.n	8005e5a <HAL_DMA_IRQHandler+0xd2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a56      	ldr	r2, [pc, #344]	; (8005f54 <HAL_DMA_IRQHandler+0x1cc>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d02c      	beq.n	8005e5a <HAL_DMA_IRQHandler+0xd2>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a54      	ldr	r2, [pc, #336]	; (8005f58 <HAL_DMA_IRQHandler+0x1d0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d027      	beq.n	8005e5a <HAL_DMA_IRQHandler+0xd2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a53      	ldr	r2, [pc, #332]	; (8005f5c <HAL_DMA_IRQHandler+0x1d4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d022      	beq.n	8005e5a <HAL_DMA_IRQHandler+0xd2>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a51      	ldr	r2, [pc, #324]	; (8005f60 <HAL_DMA_IRQHandler+0x1d8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d01d      	beq.n	8005e5a <HAL_DMA_IRQHandler+0xd2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a50      	ldr	r2, [pc, #320]	; (8005f64 <HAL_DMA_IRQHandler+0x1dc>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d018      	beq.n	8005e5a <HAL_DMA_IRQHandler+0xd2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a4e      	ldr	r2, [pc, #312]	; (8005f68 <HAL_DMA_IRQHandler+0x1e0>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d013      	beq.n	8005e5a <HAL_DMA_IRQHandler+0xd2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a4d      	ldr	r2, [pc, #308]	; (8005f6c <HAL_DMA_IRQHandler+0x1e4>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d00e      	beq.n	8005e5a <HAL_DMA_IRQHandler+0xd2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a4b      	ldr	r2, [pc, #300]	; (8005f70 <HAL_DMA_IRQHandler+0x1e8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d009      	beq.n	8005e5a <HAL_DMA_IRQHandler+0xd2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a4a      	ldr	r2, [pc, #296]	; (8005f74 <HAL_DMA_IRQHandler+0x1ec>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d004      	beq.n	8005e5a <HAL_DMA_IRQHandler+0xd2>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a48      	ldr	r2, [pc, #288]	; (8005f78 <HAL_DMA_IRQHandler+0x1f0>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d101      	bne.n	8005e5e <HAL_DMA_IRQHandler+0xd6>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e000      	b.n	8005e60 <HAL_DMA_IRQHandler+0xd8>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 842b 	beq.w	80066bc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e6a:	f003 031f 	and.w	r3, r3, #31
 8005e6e:	2208      	movs	r2, #8
 8005e70:	409a      	lsls	r2, r3
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	4013      	ands	r3, r2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 80a2 	beq.w	8005fc0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a2e      	ldr	r2, [pc, #184]	; (8005f3c <HAL_DMA_IRQHandler+0x1b4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d04a      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x194>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a2d      	ldr	r2, [pc, #180]	; (8005f40 <HAL_DMA_IRQHandler+0x1b8>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d045      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x194>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a2b      	ldr	r2, [pc, #172]	; (8005f44 <HAL_DMA_IRQHandler+0x1bc>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d040      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x194>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a2a      	ldr	r2, [pc, #168]	; (8005f48 <HAL_DMA_IRQHandler+0x1c0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d03b      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x194>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a28      	ldr	r2, [pc, #160]	; (8005f4c <HAL_DMA_IRQHandler+0x1c4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d036      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x194>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a27      	ldr	r2, [pc, #156]	; (8005f50 <HAL_DMA_IRQHandler+0x1c8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d031      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x194>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a25      	ldr	r2, [pc, #148]	; (8005f54 <HAL_DMA_IRQHandler+0x1cc>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d02c      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x194>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a24      	ldr	r2, [pc, #144]	; (8005f58 <HAL_DMA_IRQHandler+0x1d0>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d027      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x194>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a22      	ldr	r2, [pc, #136]	; (8005f5c <HAL_DMA_IRQHandler+0x1d4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d022      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x194>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a21      	ldr	r2, [pc, #132]	; (8005f60 <HAL_DMA_IRQHandler+0x1d8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d01d      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x194>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a1f      	ldr	r2, [pc, #124]	; (8005f64 <HAL_DMA_IRQHandler+0x1dc>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d018      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x194>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a1e      	ldr	r2, [pc, #120]	; (8005f68 <HAL_DMA_IRQHandler+0x1e0>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d013      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x194>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a1c      	ldr	r2, [pc, #112]	; (8005f6c <HAL_DMA_IRQHandler+0x1e4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00e      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x194>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a1b      	ldr	r2, [pc, #108]	; (8005f70 <HAL_DMA_IRQHandler+0x1e8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d009      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x194>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a19      	ldr	r2, [pc, #100]	; (8005f74 <HAL_DMA_IRQHandler+0x1ec>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d004      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x194>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a18      	ldr	r2, [pc, #96]	; (8005f78 <HAL_DMA_IRQHandler+0x1f0>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d12f      	bne.n	8005f7c <HAL_DMA_IRQHandler+0x1f4>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0304 	and.w	r3, r3, #4
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	bf14      	ite	ne
 8005f2a:	2301      	movne	r3, #1
 8005f2c:	2300      	moveq	r3, #0
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	e02e      	b.n	8005f90 <HAL_DMA_IRQHandler+0x208>
 8005f32:	bf00      	nop
 8005f34:	24000000 	.word	0x24000000
 8005f38:	1b4e81b5 	.word	0x1b4e81b5
 8005f3c:	40020010 	.word	0x40020010
 8005f40:	40020028 	.word	0x40020028
 8005f44:	40020040 	.word	0x40020040
 8005f48:	40020058 	.word	0x40020058
 8005f4c:	40020070 	.word	0x40020070
 8005f50:	40020088 	.word	0x40020088
 8005f54:	400200a0 	.word	0x400200a0
 8005f58:	400200b8 	.word	0x400200b8
 8005f5c:	40020410 	.word	0x40020410
 8005f60:	40020428 	.word	0x40020428
 8005f64:	40020440 	.word	0x40020440
 8005f68:	40020458 	.word	0x40020458
 8005f6c:	40020470 	.word	0x40020470
 8005f70:	40020488 	.word	0x40020488
 8005f74:	400204a0 	.word	0x400204a0
 8005f78:	400204b8 	.word	0x400204b8
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	bf14      	ite	ne
 8005f8a:	2301      	movne	r3, #1
 8005f8c:	2300      	moveq	r3, #0
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d015      	beq.n	8005fc0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 0204 	bic.w	r2, r2, #4
 8005fa2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa8:	f003 031f 	and.w	r3, r3, #31
 8005fac:	2208      	movs	r2, #8
 8005fae:	409a      	lsls	r2, r3
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb8:	f043 0201 	orr.w	r2, r3, #1
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc4:	f003 031f 	and.w	r3, r3, #31
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	fa22 f303 	lsr.w	r3, r2, r3
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d06e      	beq.n	80060b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a69      	ldr	r2, [pc, #420]	; (8006180 <HAL_DMA_IRQHandler+0x3f8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d04a      	beq.n	8006076 <HAL_DMA_IRQHandler+0x2ee>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a67      	ldr	r2, [pc, #412]	; (8006184 <HAL_DMA_IRQHandler+0x3fc>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d045      	beq.n	8006076 <HAL_DMA_IRQHandler+0x2ee>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a66      	ldr	r2, [pc, #408]	; (8006188 <HAL_DMA_IRQHandler+0x400>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d040      	beq.n	8006076 <HAL_DMA_IRQHandler+0x2ee>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a64      	ldr	r2, [pc, #400]	; (800618c <HAL_DMA_IRQHandler+0x404>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d03b      	beq.n	8006076 <HAL_DMA_IRQHandler+0x2ee>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a63      	ldr	r2, [pc, #396]	; (8006190 <HAL_DMA_IRQHandler+0x408>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d036      	beq.n	8006076 <HAL_DMA_IRQHandler+0x2ee>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a61      	ldr	r2, [pc, #388]	; (8006194 <HAL_DMA_IRQHandler+0x40c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d031      	beq.n	8006076 <HAL_DMA_IRQHandler+0x2ee>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a60      	ldr	r2, [pc, #384]	; (8006198 <HAL_DMA_IRQHandler+0x410>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d02c      	beq.n	8006076 <HAL_DMA_IRQHandler+0x2ee>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a5e      	ldr	r2, [pc, #376]	; (800619c <HAL_DMA_IRQHandler+0x414>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d027      	beq.n	8006076 <HAL_DMA_IRQHandler+0x2ee>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a5d      	ldr	r2, [pc, #372]	; (80061a0 <HAL_DMA_IRQHandler+0x418>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d022      	beq.n	8006076 <HAL_DMA_IRQHandler+0x2ee>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a5b      	ldr	r2, [pc, #364]	; (80061a4 <HAL_DMA_IRQHandler+0x41c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d01d      	beq.n	8006076 <HAL_DMA_IRQHandler+0x2ee>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a5a      	ldr	r2, [pc, #360]	; (80061a8 <HAL_DMA_IRQHandler+0x420>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d018      	beq.n	8006076 <HAL_DMA_IRQHandler+0x2ee>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a58      	ldr	r2, [pc, #352]	; (80061ac <HAL_DMA_IRQHandler+0x424>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d013      	beq.n	8006076 <HAL_DMA_IRQHandler+0x2ee>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a57      	ldr	r2, [pc, #348]	; (80061b0 <HAL_DMA_IRQHandler+0x428>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d00e      	beq.n	8006076 <HAL_DMA_IRQHandler+0x2ee>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a55      	ldr	r2, [pc, #340]	; (80061b4 <HAL_DMA_IRQHandler+0x42c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d009      	beq.n	8006076 <HAL_DMA_IRQHandler+0x2ee>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a54      	ldr	r2, [pc, #336]	; (80061b8 <HAL_DMA_IRQHandler+0x430>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d004      	beq.n	8006076 <HAL_DMA_IRQHandler+0x2ee>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a52      	ldr	r2, [pc, #328]	; (80061bc <HAL_DMA_IRQHandler+0x434>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d10a      	bne.n	800608c <HAL_DMA_IRQHandler+0x304>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006080:	2b00      	cmp	r3, #0
 8006082:	bf14      	ite	ne
 8006084:	2301      	movne	r3, #1
 8006086:	2300      	moveq	r3, #0
 8006088:	b2db      	uxtb	r3, r3
 800608a:	e003      	b.n	8006094 <HAL_DMA_IRQHandler+0x30c>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2300      	movs	r3, #0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00d      	beq.n	80060b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800609c:	f003 031f 	and.w	r3, r3, #31
 80060a0:	2201      	movs	r2, #1
 80060a2:	409a      	lsls	r2, r3
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ac:	f043 0202 	orr.w	r2, r3, #2
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b8:	f003 031f 	and.w	r3, r3, #31
 80060bc:	2204      	movs	r2, #4
 80060be:	409a      	lsls	r2, r3
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	4013      	ands	r3, r2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 808f 	beq.w	80061e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a2c      	ldr	r2, [pc, #176]	; (8006180 <HAL_DMA_IRQHandler+0x3f8>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d04a      	beq.n	800616a <HAL_DMA_IRQHandler+0x3e2>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a2a      	ldr	r2, [pc, #168]	; (8006184 <HAL_DMA_IRQHandler+0x3fc>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d045      	beq.n	800616a <HAL_DMA_IRQHandler+0x3e2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a29      	ldr	r2, [pc, #164]	; (8006188 <HAL_DMA_IRQHandler+0x400>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d040      	beq.n	800616a <HAL_DMA_IRQHandler+0x3e2>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a27      	ldr	r2, [pc, #156]	; (800618c <HAL_DMA_IRQHandler+0x404>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d03b      	beq.n	800616a <HAL_DMA_IRQHandler+0x3e2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a26      	ldr	r2, [pc, #152]	; (8006190 <HAL_DMA_IRQHandler+0x408>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d036      	beq.n	800616a <HAL_DMA_IRQHandler+0x3e2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a24      	ldr	r2, [pc, #144]	; (8006194 <HAL_DMA_IRQHandler+0x40c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d031      	beq.n	800616a <HAL_DMA_IRQHandler+0x3e2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a23      	ldr	r2, [pc, #140]	; (8006198 <HAL_DMA_IRQHandler+0x410>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d02c      	beq.n	800616a <HAL_DMA_IRQHandler+0x3e2>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a21      	ldr	r2, [pc, #132]	; (800619c <HAL_DMA_IRQHandler+0x414>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d027      	beq.n	800616a <HAL_DMA_IRQHandler+0x3e2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a20      	ldr	r2, [pc, #128]	; (80061a0 <HAL_DMA_IRQHandler+0x418>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d022      	beq.n	800616a <HAL_DMA_IRQHandler+0x3e2>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a1e      	ldr	r2, [pc, #120]	; (80061a4 <HAL_DMA_IRQHandler+0x41c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d01d      	beq.n	800616a <HAL_DMA_IRQHandler+0x3e2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a1d      	ldr	r2, [pc, #116]	; (80061a8 <HAL_DMA_IRQHandler+0x420>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d018      	beq.n	800616a <HAL_DMA_IRQHandler+0x3e2>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a1b      	ldr	r2, [pc, #108]	; (80061ac <HAL_DMA_IRQHandler+0x424>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d013      	beq.n	800616a <HAL_DMA_IRQHandler+0x3e2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a1a      	ldr	r2, [pc, #104]	; (80061b0 <HAL_DMA_IRQHandler+0x428>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d00e      	beq.n	800616a <HAL_DMA_IRQHandler+0x3e2>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a18      	ldr	r2, [pc, #96]	; (80061b4 <HAL_DMA_IRQHandler+0x42c>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d009      	beq.n	800616a <HAL_DMA_IRQHandler+0x3e2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a17      	ldr	r2, [pc, #92]	; (80061b8 <HAL_DMA_IRQHandler+0x430>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d004      	beq.n	800616a <HAL_DMA_IRQHandler+0x3e2>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a15      	ldr	r2, [pc, #84]	; (80061bc <HAL_DMA_IRQHandler+0x434>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d12a      	bne.n	80061c0 <HAL_DMA_IRQHandler+0x438>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	bf14      	ite	ne
 8006178:	2301      	movne	r3, #1
 800617a:	2300      	moveq	r3, #0
 800617c:	b2db      	uxtb	r3, r3
 800617e:	e023      	b.n	80061c8 <HAL_DMA_IRQHandler+0x440>
 8006180:	40020010 	.word	0x40020010
 8006184:	40020028 	.word	0x40020028
 8006188:	40020040 	.word	0x40020040
 800618c:	40020058 	.word	0x40020058
 8006190:	40020070 	.word	0x40020070
 8006194:	40020088 	.word	0x40020088
 8006198:	400200a0 	.word	0x400200a0
 800619c:	400200b8 	.word	0x400200b8
 80061a0:	40020410 	.word	0x40020410
 80061a4:	40020428 	.word	0x40020428
 80061a8:	40020440 	.word	0x40020440
 80061ac:	40020458 	.word	0x40020458
 80061b0:	40020470 	.word	0x40020470
 80061b4:	40020488 	.word	0x40020488
 80061b8:	400204a0 	.word	0x400204a0
 80061bc:	400204b8 	.word	0x400204b8
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2300      	movs	r3, #0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00d      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d0:	f003 031f 	and.w	r3, r3, #31
 80061d4:	2204      	movs	r2, #4
 80061d6:	409a      	lsls	r2, r3
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e0:	f043 0204 	orr.w	r2, r3, #4
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ec:	f003 031f 	and.w	r3, r3, #31
 80061f0:	2210      	movs	r2, #16
 80061f2:	409a      	lsls	r2, r3
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	4013      	ands	r3, r2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 80a6 	beq.w	800634a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a85      	ldr	r2, [pc, #532]	; (8006418 <HAL_DMA_IRQHandler+0x690>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d04a      	beq.n	800629e <HAL_DMA_IRQHandler+0x516>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a83      	ldr	r2, [pc, #524]	; (800641c <HAL_DMA_IRQHandler+0x694>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d045      	beq.n	800629e <HAL_DMA_IRQHandler+0x516>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a82      	ldr	r2, [pc, #520]	; (8006420 <HAL_DMA_IRQHandler+0x698>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d040      	beq.n	800629e <HAL_DMA_IRQHandler+0x516>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a80      	ldr	r2, [pc, #512]	; (8006424 <HAL_DMA_IRQHandler+0x69c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d03b      	beq.n	800629e <HAL_DMA_IRQHandler+0x516>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a7f      	ldr	r2, [pc, #508]	; (8006428 <HAL_DMA_IRQHandler+0x6a0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d036      	beq.n	800629e <HAL_DMA_IRQHandler+0x516>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a7d      	ldr	r2, [pc, #500]	; (800642c <HAL_DMA_IRQHandler+0x6a4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d031      	beq.n	800629e <HAL_DMA_IRQHandler+0x516>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a7c      	ldr	r2, [pc, #496]	; (8006430 <HAL_DMA_IRQHandler+0x6a8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d02c      	beq.n	800629e <HAL_DMA_IRQHandler+0x516>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a7a      	ldr	r2, [pc, #488]	; (8006434 <HAL_DMA_IRQHandler+0x6ac>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d027      	beq.n	800629e <HAL_DMA_IRQHandler+0x516>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a79      	ldr	r2, [pc, #484]	; (8006438 <HAL_DMA_IRQHandler+0x6b0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d022      	beq.n	800629e <HAL_DMA_IRQHandler+0x516>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a77      	ldr	r2, [pc, #476]	; (800643c <HAL_DMA_IRQHandler+0x6b4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d01d      	beq.n	800629e <HAL_DMA_IRQHandler+0x516>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a76      	ldr	r2, [pc, #472]	; (8006440 <HAL_DMA_IRQHandler+0x6b8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d018      	beq.n	800629e <HAL_DMA_IRQHandler+0x516>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a74      	ldr	r2, [pc, #464]	; (8006444 <HAL_DMA_IRQHandler+0x6bc>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d013      	beq.n	800629e <HAL_DMA_IRQHandler+0x516>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a73      	ldr	r2, [pc, #460]	; (8006448 <HAL_DMA_IRQHandler+0x6c0>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d00e      	beq.n	800629e <HAL_DMA_IRQHandler+0x516>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a71      	ldr	r2, [pc, #452]	; (800644c <HAL_DMA_IRQHandler+0x6c4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d009      	beq.n	800629e <HAL_DMA_IRQHandler+0x516>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a70      	ldr	r2, [pc, #448]	; (8006450 <HAL_DMA_IRQHandler+0x6c8>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d004      	beq.n	800629e <HAL_DMA_IRQHandler+0x516>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a6e      	ldr	r2, [pc, #440]	; (8006454 <HAL_DMA_IRQHandler+0x6cc>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d10a      	bne.n	80062b4 <HAL_DMA_IRQHandler+0x52c>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0308 	and.w	r3, r3, #8
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	bf14      	ite	ne
 80062ac:	2301      	movne	r3, #1
 80062ae:	2300      	moveq	r3, #0
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	e009      	b.n	80062c8 <HAL_DMA_IRQHandler+0x540>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0304 	and.w	r3, r3, #4
 80062be:	2b00      	cmp	r3, #0
 80062c0:	bf14      	ite	ne
 80062c2:	2301      	movne	r3, #1
 80062c4:	2300      	moveq	r3, #0
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d03e      	beq.n	800634a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d0:	f003 031f 	and.w	r3, r3, #31
 80062d4:	2210      	movs	r2, #16
 80062d6:	409a      	lsls	r2, r3
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d018      	beq.n	800631c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d108      	bne.n	800630a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d024      	beq.n	800634a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	4798      	blx	r3
 8006308:	e01f      	b.n	800634a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800630e:	2b00      	cmp	r3, #0
 8006310:	d01b      	beq.n	800634a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	4798      	blx	r3
 800631a:	e016      	b.n	800634a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006326:	2b00      	cmp	r3, #0
 8006328:	d107      	bne.n	800633a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 0208 	bic.w	r2, r2, #8
 8006338:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800634e:	f003 031f 	and.w	r3, r3, #31
 8006352:	2220      	movs	r2, #32
 8006354:	409a      	lsls	r2, r3
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	4013      	ands	r3, r2
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 8110 	beq.w	8006580 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a2c      	ldr	r2, [pc, #176]	; (8006418 <HAL_DMA_IRQHandler+0x690>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d04a      	beq.n	8006400 <HAL_DMA_IRQHandler+0x678>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a2b      	ldr	r2, [pc, #172]	; (800641c <HAL_DMA_IRQHandler+0x694>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d045      	beq.n	8006400 <HAL_DMA_IRQHandler+0x678>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a29      	ldr	r2, [pc, #164]	; (8006420 <HAL_DMA_IRQHandler+0x698>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d040      	beq.n	8006400 <HAL_DMA_IRQHandler+0x678>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a28      	ldr	r2, [pc, #160]	; (8006424 <HAL_DMA_IRQHandler+0x69c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d03b      	beq.n	8006400 <HAL_DMA_IRQHandler+0x678>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a26      	ldr	r2, [pc, #152]	; (8006428 <HAL_DMA_IRQHandler+0x6a0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d036      	beq.n	8006400 <HAL_DMA_IRQHandler+0x678>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a25      	ldr	r2, [pc, #148]	; (800642c <HAL_DMA_IRQHandler+0x6a4>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d031      	beq.n	8006400 <HAL_DMA_IRQHandler+0x678>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a23      	ldr	r2, [pc, #140]	; (8006430 <HAL_DMA_IRQHandler+0x6a8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d02c      	beq.n	8006400 <HAL_DMA_IRQHandler+0x678>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a22      	ldr	r2, [pc, #136]	; (8006434 <HAL_DMA_IRQHandler+0x6ac>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d027      	beq.n	8006400 <HAL_DMA_IRQHandler+0x678>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a20      	ldr	r2, [pc, #128]	; (8006438 <HAL_DMA_IRQHandler+0x6b0>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d022      	beq.n	8006400 <HAL_DMA_IRQHandler+0x678>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a1f      	ldr	r2, [pc, #124]	; (800643c <HAL_DMA_IRQHandler+0x6b4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d01d      	beq.n	8006400 <HAL_DMA_IRQHandler+0x678>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a1d      	ldr	r2, [pc, #116]	; (8006440 <HAL_DMA_IRQHandler+0x6b8>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d018      	beq.n	8006400 <HAL_DMA_IRQHandler+0x678>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a1c      	ldr	r2, [pc, #112]	; (8006444 <HAL_DMA_IRQHandler+0x6bc>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d013      	beq.n	8006400 <HAL_DMA_IRQHandler+0x678>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a1a      	ldr	r2, [pc, #104]	; (8006448 <HAL_DMA_IRQHandler+0x6c0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00e      	beq.n	8006400 <HAL_DMA_IRQHandler+0x678>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a19      	ldr	r2, [pc, #100]	; (800644c <HAL_DMA_IRQHandler+0x6c4>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d009      	beq.n	8006400 <HAL_DMA_IRQHandler+0x678>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a17      	ldr	r2, [pc, #92]	; (8006450 <HAL_DMA_IRQHandler+0x6c8>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d004      	beq.n	8006400 <HAL_DMA_IRQHandler+0x678>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a16      	ldr	r2, [pc, #88]	; (8006454 <HAL_DMA_IRQHandler+0x6cc>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d12b      	bne.n	8006458 <HAL_DMA_IRQHandler+0x6d0>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0310 	and.w	r3, r3, #16
 800640a:	2b00      	cmp	r3, #0
 800640c:	bf14      	ite	ne
 800640e:	2301      	movne	r3, #1
 8006410:	2300      	moveq	r3, #0
 8006412:	b2db      	uxtb	r3, r3
 8006414:	e02a      	b.n	800646c <HAL_DMA_IRQHandler+0x6e4>
 8006416:	bf00      	nop
 8006418:	40020010 	.word	0x40020010
 800641c:	40020028 	.word	0x40020028
 8006420:	40020040 	.word	0x40020040
 8006424:	40020058 	.word	0x40020058
 8006428:	40020070 	.word	0x40020070
 800642c:	40020088 	.word	0x40020088
 8006430:	400200a0 	.word	0x400200a0
 8006434:	400200b8 	.word	0x400200b8
 8006438:	40020410 	.word	0x40020410
 800643c:	40020428 	.word	0x40020428
 8006440:	40020440 	.word	0x40020440
 8006444:	40020458 	.word	0x40020458
 8006448:	40020470 	.word	0x40020470
 800644c:	40020488 	.word	0x40020488
 8006450:	400204a0 	.word	0x400204a0
 8006454:	400204b8 	.word	0x400204b8
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	bf14      	ite	ne
 8006466:	2301      	movne	r3, #1
 8006468:	2300      	moveq	r3, #0
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 8087 	beq.w	8006580 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006476:	f003 031f 	and.w	r3, r3, #31
 800647a:	2220      	movs	r2, #32
 800647c:	409a      	lsls	r2, r3
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b04      	cmp	r3, #4
 800648c:	d139      	bne.n	8006502 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0216 	bic.w	r2, r2, #22
 800649c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	695a      	ldr	r2, [r3, #20]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064ac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d103      	bne.n	80064be <HAL_DMA_IRQHandler+0x736>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d007      	beq.n	80064ce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 0208 	bic.w	r2, r2, #8
 80064cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d2:	f003 031f 	and.w	r3, r3, #31
 80064d6:	223f      	movs	r2, #63	; 0x3f
 80064d8:	409a      	lsls	r2, r3
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 834a 	beq.w	8006b8c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	4798      	blx	r3
          }
          return;
 8006500:	e344      	b.n	8006b8c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d018      	beq.n	8006542 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d108      	bne.n	8006530 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006522:	2b00      	cmp	r3, #0
 8006524:	d02c      	beq.n	8006580 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	4798      	blx	r3
 800652e:	e027      	b.n	8006580 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006534:	2b00      	cmp	r3, #0
 8006536:	d023      	beq.n	8006580 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	4798      	blx	r3
 8006540:	e01e      	b.n	8006580 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10f      	bne.n	8006570 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0210 	bic.w	r2, r2, #16
 800655e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 8306 	beq.w	8006b96 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 8088 	beq.w	80066a8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2204      	movs	r2, #4
 800659c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a7a      	ldr	r2, [pc, #488]	; (8006790 <HAL_DMA_IRQHandler+0xa08>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d04a      	beq.n	8006640 <HAL_DMA_IRQHandler+0x8b8>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a79      	ldr	r2, [pc, #484]	; (8006794 <HAL_DMA_IRQHandler+0xa0c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d045      	beq.n	8006640 <HAL_DMA_IRQHandler+0x8b8>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a77      	ldr	r2, [pc, #476]	; (8006798 <HAL_DMA_IRQHandler+0xa10>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d040      	beq.n	8006640 <HAL_DMA_IRQHandler+0x8b8>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a76      	ldr	r2, [pc, #472]	; (800679c <HAL_DMA_IRQHandler+0xa14>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d03b      	beq.n	8006640 <HAL_DMA_IRQHandler+0x8b8>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a74      	ldr	r2, [pc, #464]	; (80067a0 <HAL_DMA_IRQHandler+0xa18>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d036      	beq.n	8006640 <HAL_DMA_IRQHandler+0x8b8>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a73      	ldr	r2, [pc, #460]	; (80067a4 <HAL_DMA_IRQHandler+0xa1c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d031      	beq.n	8006640 <HAL_DMA_IRQHandler+0x8b8>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a71      	ldr	r2, [pc, #452]	; (80067a8 <HAL_DMA_IRQHandler+0xa20>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d02c      	beq.n	8006640 <HAL_DMA_IRQHandler+0x8b8>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a70      	ldr	r2, [pc, #448]	; (80067ac <HAL_DMA_IRQHandler+0xa24>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d027      	beq.n	8006640 <HAL_DMA_IRQHandler+0x8b8>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a6e      	ldr	r2, [pc, #440]	; (80067b0 <HAL_DMA_IRQHandler+0xa28>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d022      	beq.n	8006640 <HAL_DMA_IRQHandler+0x8b8>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a6d      	ldr	r2, [pc, #436]	; (80067b4 <HAL_DMA_IRQHandler+0xa2c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d01d      	beq.n	8006640 <HAL_DMA_IRQHandler+0x8b8>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a6b      	ldr	r2, [pc, #428]	; (80067b8 <HAL_DMA_IRQHandler+0xa30>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d018      	beq.n	8006640 <HAL_DMA_IRQHandler+0x8b8>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a6a      	ldr	r2, [pc, #424]	; (80067bc <HAL_DMA_IRQHandler+0xa34>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d013      	beq.n	8006640 <HAL_DMA_IRQHandler+0x8b8>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a68      	ldr	r2, [pc, #416]	; (80067c0 <HAL_DMA_IRQHandler+0xa38>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d00e      	beq.n	8006640 <HAL_DMA_IRQHandler+0x8b8>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a67      	ldr	r2, [pc, #412]	; (80067c4 <HAL_DMA_IRQHandler+0xa3c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d009      	beq.n	8006640 <HAL_DMA_IRQHandler+0x8b8>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a65      	ldr	r2, [pc, #404]	; (80067c8 <HAL_DMA_IRQHandler+0xa40>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d004      	beq.n	8006640 <HAL_DMA_IRQHandler+0x8b8>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a64      	ldr	r2, [pc, #400]	; (80067cc <HAL_DMA_IRQHandler+0xa44>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d108      	bne.n	8006652 <HAL_DMA_IRQHandler+0x8ca>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0201 	bic.w	r2, r2, #1
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	e007      	b.n	8006662 <HAL_DMA_IRQHandler+0x8da>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0201 	bic.w	r2, r2, #1
 8006660:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3301      	adds	r3, #1
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666a:	429a      	cmp	r2, r3
 800666c:	d307      	bcc.n	800667e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1f2      	bne.n	8006662 <HAL_DMA_IRQHandler+0x8da>
 800667c:	e000      	b.n	8006680 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800667e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d004      	beq.n	8006698 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2203      	movs	r2, #3
 8006692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006696:	e003      	b.n	80066a0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 8272 	beq.w	8006b96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	4798      	blx	r3
 80066ba:	e26c      	b.n	8006b96 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a43      	ldr	r2, [pc, #268]	; (80067d0 <HAL_DMA_IRQHandler+0xa48>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d022      	beq.n	800670c <HAL_DMA_IRQHandler+0x984>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a42      	ldr	r2, [pc, #264]	; (80067d4 <HAL_DMA_IRQHandler+0xa4c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d01d      	beq.n	800670c <HAL_DMA_IRQHandler+0x984>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a40      	ldr	r2, [pc, #256]	; (80067d8 <HAL_DMA_IRQHandler+0xa50>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d018      	beq.n	800670c <HAL_DMA_IRQHandler+0x984>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a3f      	ldr	r2, [pc, #252]	; (80067dc <HAL_DMA_IRQHandler+0xa54>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d013      	beq.n	800670c <HAL_DMA_IRQHandler+0x984>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a3d      	ldr	r2, [pc, #244]	; (80067e0 <HAL_DMA_IRQHandler+0xa58>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d00e      	beq.n	800670c <HAL_DMA_IRQHandler+0x984>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a3c      	ldr	r2, [pc, #240]	; (80067e4 <HAL_DMA_IRQHandler+0xa5c>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d009      	beq.n	800670c <HAL_DMA_IRQHandler+0x984>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a3a      	ldr	r2, [pc, #232]	; (80067e8 <HAL_DMA_IRQHandler+0xa60>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d004      	beq.n	800670c <HAL_DMA_IRQHandler+0x984>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a39      	ldr	r2, [pc, #228]	; (80067ec <HAL_DMA_IRQHandler+0xa64>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d101      	bne.n	8006710 <HAL_DMA_IRQHandler+0x988>
 800670c:	2301      	movs	r3, #1
 800670e:	e000      	b.n	8006712 <HAL_DMA_IRQHandler+0x98a>
 8006710:	2300      	movs	r3, #0
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 823f 	beq.w	8006b96 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006724:	f003 031f 	and.w	r3, r3, #31
 8006728:	2204      	movs	r2, #4
 800672a:	409a      	lsls	r2, r3
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	4013      	ands	r3, r2
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 80cd 	beq.w	80068d0 <HAL_DMA_IRQHandler+0xb48>
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 80c7 	beq.w	80068d0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006746:	f003 031f 	and.w	r3, r3, #31
 800674a:	2204      	movs	r2, #4
 800674c:	409a      	lsls	r2, r3
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d049      	beq.n	80067f0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d109      	bne.n	800677a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 8210 	beq.w	8006b90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006778:	e20a      	b.n	8006b90 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 8206 	beq.w	8006b90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800678c:	e200      	b.n	8006b90 <HAL_DMA_IRQHandler+0xe08>
 800678e:	bf00      	nop
 8006790:	40020010 	.word	0x40020010
 8006794:	40020028 	.word	0x40020028
 8006798:	40020040 	.word	0x40020040
 800679c:	40020058 	.word	0x40020058
 80067a0:	40020070 	.word	0x40020070
 80067a4:	40020088 	.word	0x40020088
 80067a8:	400200a0 	.word	0x400200a0
 80067ac:	400200b8 	.word	0x400200b8
 80067b0:	40020410 	.word	0x40020410
 80067b4:	40020428 	.word	0x40020428
 80067b8:	40020440 	.word	0x40020440
 80067bc:	40020458 	.word	0x40020458
 80067c0:	40020470 	.word	0x40020470
 80067c4:	40020488 	.word	0x40020488
 80067c8:	400204a0 	.word	0x400204a0
 80067cc:	400204b8 	.word	0x400204b8
 80067d0:	58025408 	.word	0x58025408
 80067d4:	5802541c 	.word	0x5802541c
 80067d8:	58025430 	.word	0x58025430
 80067dc:	58025444 	.word	0x58025444
 80067e0:	58025458 	.word	0x58025458
 80067e4:	5802546c 	.word	0x5802546c
 80067e8:	58025480 	.word	0x58025480
 80067ec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d160      	bne.n	80068bc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a7f      	ldr	r2, [pc, #508]	; (80069fc <HAL_DMA_IRQHandler+0xc74>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d04a      	beq.n	800689a <HAL_DMA_IRQHandler+0xb12>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a7d      	ldr	r2, [pc, #500]	; (8006a00 <HAL_DMA_IRQHandler+0xc78>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d045      	beq.n	800689a <HAL_DMA_IRQHandler+0xb12>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a7c      	ldr	r2, [pc, #496]	; (8006a04 <HAL_DMA_IRQHandler+0xc7c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d040      	beq.n	800689a <HAL_DMA_IRQHandler+0xb12>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a7a      	ldr	r2, [pc, #488]	; (8006a08 <HAL_DMA_IRQHandler+0xc80>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d03b      	beq.n	800689a <HAL_DMA_IRQHandler+0xb12>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a79      	ldr	r2, [pc, #484]	; (8006a0c <HAL_DMA_IRQHandler+0xc84>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d036      	beq.n	800689a <HAL_DMA_IRQHandler+0xb12>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a77      	ldr	r2, [pc, #476]	; (8006a10 <HAL_DMA_IRQHandler+0xc88>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d031      	beq.n	800689a <HAL_DMA_IRQHandler+0xb12>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a76      	ldr	r2, [pc, #472]	; (8006a14 <HAL_DMA_IRQHandler+0xc8c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d02c      	beq.n	800689a <HAL_DMA_IRQHandler+0xb12>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a74      	ldr	r2, [pc, #464]	; (8006a18 <HAL_DMA_IRQHandler+0xc90>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d027      	beq.n	800689a <HAL_DMA_IRQHandler+0xb12>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a73      	ldr	r2, [pc, #460]	; (8006a1c <HAL_DMA_IRQHandler+0xc94>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d022      	beq.n	800689a <HAL_DMA_IRQHandler+0xb12>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a71      	ldr	r2, [pc, #452]	; (8006a20 <HAL_DMA_IRQHandler+0xc98>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d01d      	beq.n	800689a <HAL_DMA_IRQHandler+0xb12>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a70      	ldr	r2, [pc, #448]	; (8006a24 <HAL_DMA_IRQHandler+0xc9c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d018      	beq.n	800689a <HAL_DMA_IRQHandler+0xb12>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a6e      	ldr	r2, [pc, #440]	; (8006a28 <HAL_DMA_IRQHandler+0xca0>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d013      	beq.n	800689a <HAL_DMA_IRQHandler+0xb12>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a6d      	ldr	r2, [pc, #436]	; (8006a2c <HAL_DMA_IRQHandler+0xca4>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d00e      	beq.n	800689a <HAL_DMA_IRQHandler+0xb12>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a6b      	ldr	r2, [pc, #428]	; (8006a30 <HAL_DMA_IRQHandler+0xca8>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d009      	beq.n	800689a <HAL_DMA_IRQHandler+0xb12>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a6a      	ldr	r2, [pc, #424]	; (8006a34 <HAL_DMA_IRQHandler+0xcac>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d004      	beq.n	800689a <HAL_DMA_IRQHandler+0xb12>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a68      	ldr	r2, [pc, #416]	; (8006a38 <HAL_DMA_IRQHandler+0xcb0>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d108      	bne.n	80068ac <HAL_DMA_IRQHandler+0xb24>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0208 	bic.w	r2, r2, #8
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	e007      	b.n	80068bc <HAL_DMA_IRQHandler+0xb34>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0204 	bic.w	r2, r2, #4
 80068ba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 8165 	beq.w	8006b90 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068ce:	e15f      	b.n	8006b90 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d4:	f003 031f 	and.w	r3, r3, #31
 80068d8:	2202      	movs	r2, #2
 80068da:	409a      	lsls	r2, r3
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	4013      	ands	r3, r2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 80c5 	beq.w	8006a70 <HAL_DMA_IRQHandler+0xce8>
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 80bf 	beq.w	8006a70 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068f6:	f003 031f 	and.w	r3, r3, #31
 80068fa:	2202      	movs	r2, #2
 80068fc:	409a      	lsls	r2, r3
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d018      	beq.n	800693e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d109      	bne.n	800692a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 813a 	beq.w	8006b94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006928:	e134      	b.n	8006b94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 8130 	beq.w	8006b94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800693c:	e12a      	b.n	8006b94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	f003 0320 	and.w	r3, r3, #32
 8006944:	2b00      	cmp	r3, #0
 8006946:	f040 8089 	bne.w	8006a5c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a2b      	ldr	r2, [pc, #172]	; (80069fc <HAL_DMA_IRQHandler+0xc74>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d04a      	beq.n	80069ea <HAL_DMA_IRQHandler+0xc62>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a29      	ldr	r2, [pc, #164]	; (8006a00 <HAL_DMA_IRQHandler+0xc78>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d045      	beq.n	80069ea <HAL_DMA_IRQHandler+0xc62>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a28      	ldr	r2, [pc, #160]	; (8006a04 <HAL_DMA_IRQHandler+0xc7c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d040      	beq.n	80069ea <HAL_DMA_IRQHandler+0xc62>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a26      	ldr	r2, [pc, #152]	; (8006a08 <HAL_DMA_IRQHandler+0xc80>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d03b      	beq.n	80069ea <HAL_DMA_IRQHandler+0xc62>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a25      	ldr	r2, [pc, #148]	; (8006a0c <HAL_DMA_IRQHandler+0xc84>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d036      	beq.n	80069ea <HAL_DMA_IRQHandler+0xc62>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a23      	ldr	r2, [pc, #140]	; (8006a10 <HAL_DMA_IRQHandler+0xc88>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d031      	beq.n	80069ea <HAL_DMA_IRQHandler+0xc62>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a22      	ldr	r2, [pc, #136]	; (8006a14 <HAL_DMA_IRQHandler+0xc8c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d02c      	beq.n	80069ea <HAL_DMA_IRQHandler+0xc62>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a20      	ldr	r2, [pc, #128]	; (8006a18 <HAL_DMA_IRQHandler+0xc90>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d027      	beq.n	80069ea <HAL_DMA_IRQHandler+0xc62>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a1f      	ldr	r2, [pc, #124]	; (8006a1c <HAL_DMA_IRQHandler+0xc94>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d022      	beq.n	80069ea <HAL_DMA_IRQHandler+0xc62>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a1d      	ldr	r2, [pc, #116]	; (8006a20 <HAL_DMA_IRQHandler+0xc98>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d01d      	beq.n	80069ea <HAL_DMA_IRQHandler+0xc62>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a1c      	ldr	r2, [pc, #112]	; (8006a24 <HAL_DMA_IRQHandler+0xc9c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d018      	beq.n	80069ea <HAL_DMA_IRQHandler+0xc62>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a1a      	ldr	r2, [pc, #104]	; (8006a28 <HAL_DMA_IRQHandler+0xca0>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d013      	beq.n	80069ea <HAL_DMA_IRQHandler+0xc62>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a19      	ldr	r2, [pc, #100]	; (8006a2c <HAL_DMA_IRQHandler+0xca4>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d00e      	beq.n	80069ea <HAL_DMA_IRQHandler+0xc62>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a17      	ldr	r2, [pc, #92]	; (8006a30 <HAL_DMA_IRQHandler+0xca8>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d009      	beq.n	80069ea <HAL_DMA_IRQHandler+0xc62>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a16      	ldr	r2, [pc, #88]	; (8006a34 <HAL_DMA_IRQHandler+0xcac>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d004      	beq.n	80069ea <HAL_DMA_IRQHandler+0xc62>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a14      	ldr	r2, [pc, #80]	; (8006a38 <HAL_DMA_IRQHandler+0xcb0>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d128      	bne.n	8006a3c <HAL_DMA_IRQHandler+0xcb4>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0214 	bic.w	r2, r2, #20
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	e027      	b.n	8006a4c <HAL_DMA_IRQHandler+0xcc4>
 80069fc:	40020010 	.word	0x40020010
 8006a00:	40020028 	.word	0x40020028
 8006a04:	40020040 	.word	0x40020040
 8006a08:	40020058 	.word	0x40020058
 8006a0c:	40020070 	.word	0x40020070
 8006a10:	40020088 	.word	0x40020088
 8006a14:	400200a0 	.word	0x400200a0
 8006a18:	400200b8 	.word	0x400200b8
 8006a1c:	40020410 	.word	0x40020410
 8006a20:	40020428 	.word	0x40020428
 8006a24:	40020440 	.word	0x40020440
 8006a28:	40020458 	.word	0x40020458
 8006a2c:	40020470 	.word	0x40020470
 8006a30:	40020488 	.word	0x40020488
 8006a34:	400204a0 	.word	0x400204a0
 8006a38:	400204b8 	.word	0x400204b8
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 020a 	bic.w	r2, r2, #10
 8006a4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 8097 	beq.w	8006b94 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a6e:	e091      	b.n	8006b94 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a74:	f003 031f 	and.w	r3, r3, #31
 8006a78:	2208      	movs	r2, #8
 8006a7a:	409a      	lsls	r2, r3
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	4013      	ands	r3, r2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 8088 	beq.w	8006b96 <HAL_DMA_IRQHandler+0xe0e>
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f003 0308 	and.w	r3, r3, #8
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 8082 	beq.w	8006b96 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a41      	ldr	r2, [pc, #260]	; (8006b9c <HAL_DMA_IRQHandler+0xe14>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d04a      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xdaa>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a3f      	ldr	r2, [pc, #252]	; (8006ba0 <HAL_DMA_IRQHandler+0xe18>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d045      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xdaa>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a3e      	ldr	r2, [pc, #248]	; (8006ba4 <HAL_DMA_IRQHandler+0xe1c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d040      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xdaa>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a3c      	ldr	r2, [pc, #240]	; (8006ba8 <HAL_DMA_IRQHandler+0xe20>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d03b      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xdaa>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a3b      	ldr	r2, [pc, #236]	; (8006bac <HAL_DMA_IRQHandler+0xe24>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d036      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xdaa>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a39      	ldr	r2, [pc, #228]	; (8006bb0 <HAL_DMA_IRQHandler+0xe28>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d031      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xdaa>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a38      	ldr	r2, [pc, #224]	; (8006bb4 <HAL_DMA_IRQHandler+0xe2c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d02c      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xdaa>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a36      	ldr	r2, [pc, #216]	; (8006bb8 <HAL_DMA_IRQHandler+0xe30>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d027      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xdaa>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a35      	ldr	r2, [pc, #212]	; (8006bbc <HAL_DMA_IRQHandler+0xe34>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d022      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xdaa>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a33      	ldr	r2, [pc, #204]	; (8006bc0 <HAL_DMA_IRQHandler+0xe38>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d01d      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xdaa>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a32      	ldr	r2, [pc, #200]	; (8006bc4 <HAL_DMA_IRQHandler+0xe3c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d018      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xdaa>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a30      	ldr	r2, [pc, #192]	; (8006bc8 <HAL_DMA_IRQHandler+0xe40>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d013      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xdaa>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a2f      	ldr	r2, [pc, #188]	; (8006bcc <HAL_DMA_IRQHandler+0xe44>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00e      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xdaa>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a2d      	ldr	r2, [pc, #180]	; (8006bd0 <HAL_DMA_IRQHandler+0xe48>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d009      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xdaa>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a2c      	ldr	r2, [pc, #176]	; (8006bd4 <HAL_DMA_IRQHandler+0xe4c>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d004      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xdaa>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a2a      	ldr	r2, [pc, #168]	; (8006bd8 <HAL_DMA_IRQHandler+0xe50>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d108      	bne.n	8006b44 <HAL_DMA_IRQHandler+0xdbc>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 021c 	bic.w	r2, r2, #28
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	e007      	b.n	8006b54 <HAL_DMA_IRQHandler+0xdcc>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 020e 	bic.w	r2, r2, #14
 8006b52:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b58:	f003 031f 	and.w	r3, r3, #31
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	409a      	lsls	r2, r3
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d009      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	4798      	blx	r3
 8006b8a:	e004      	b.n	8006b96 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006b8c:	bf00      	nop
 8006b8e:	e002      	b.n	8006b96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b90:	bf00      	nop
 8006b92:	e000      	b.n	8006b96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b94:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006b96:	3728      	adds	r7, #40	; 0x28
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	40020010 	.word	0x40020010
 8006ba0:	40020028 	.word	0x40020028
 8006ba4:	40020040 	.word	0x40020040
 8006ba8:	40020058 	.word	0x40020058
 8006bac:	40020070 	.word	0x40020070
 8006bb0:	40020088 	.word	0x40020088
 8006bb4:	400200a0 	.word	0x400200a0
 8006bb8:	400200b8 	.word	0x400200b8
 8006bbc:	40020410 	.word	0x40020410
 8006bc0:	40020428 	.word	0x40020428
 8006bc4:	40020440 	.word	0x40020440
 8006bc8:	40020458 	.word	0x40020458
 8006bcc:	40020470 	.word	0x40020470
 8006bd0:	40020488 	.word	0x40020488
 8006bd4:	400204a0 	.word	0x400204a0
 8006bd8:	400204b8 	.word	0x400204b8

08006bdc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
 8006be8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bee:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a7f      	ldr	r2, [pc, #508]	; (8006df8 <DMA_SetConfig+0x21c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d072      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a7d      	ldr	r2, [pc, #500]	; (8006dfc <DMA_SetConfig+0x220>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d06d      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a7c      	ldr	r2, [pc, #496]	; (8006e00 <DMA_SetConfig+0x224>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d068      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a7a      	ldr	r2, [pc, #488]	; (8006e04 <DMA_SetConfig+0x228>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d063      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a79      	ldr	r2, [pc, #484]	; (8006e08 <DMA_SetConfig+0x22c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d05e      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a77      	ldr	r2, [pc, #476]	; (8006e0c <DMA_SetConfig+0x230>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d059      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a76      	ldr	r2, [pc, #472]	; (8006e10 <DMA_SetConfig+0x234>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d054      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a74      	ldr	r2, [pc, #464]	; (8006e14 <DMA_SetConfig+0x238>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d04f      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a73      	ldr	r2, [pc, #460]	; (8006e18 <DMA_SetConfig+0x23c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d04a      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a71      	ldr	r2, [pc, #452]	; (8006e1c <DMA_SetConfig+0x240>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d045      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a70      	ldr	r2, [pc, #448]	; (8006e20 <DMA_SetConfig+0x244>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d040      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a6e      	ldr	r2, [pc, #440]	; (8006e24 <DMA_SetConfig+0x248>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d03b      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a6d      	ldr	r2, [pc, #436]	; (8006e28 <DMA_SetConfig+0x24c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d036      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a6b      	ldr	r2, [pc, #428]	; (8006e2c <DMA_SetConfig+0x250>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d031      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a6a      	ldr	r2, [pc, #424]	; (8006e30 <DMA_SetConfig+0x254>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d02c      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a68      	ldr	r2, [pc, #416]	; (8006e34 <DMA_SetConfig+0x258>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d027      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a67      	ldr	r2, [pc, #412]	; (8006e38 <DMA_SetConfig+0x25c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d022      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a65      	ldr	r2, [pc, #404]	; (8006e3c <DMA_SetConfig+0x260>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d01d      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a64      	ldr	r2, [pc, #400]	; (8006e40 <DMA_SetConfig+0x264>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d018      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a62      	ldr	r2, [pc, #392]	; (8006e44 <DMA_SetConfig+0x268>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d013      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a61      	ldr	r2, [pc, #388]	; (8006e48 <DMA_SetConfig+0x26c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d00e      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a5f      	ldr	r2, [pc, #380]	; (8006e4c <DMA_SetConfig+0x270>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d009      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a5e      	ldr	r2, [pc, #376]	; (8006e50 <DMA_SetConfig+0x274>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d004      	beq.n	8006ce6 <DMA_SetConfig+0x10a>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a5c      	ldr	r2, [pc, #368]	; (8006e54 <DMA_SetConfig+0x278>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d101      	bne.n	8006cea <DMA_SetConfig+0x10e>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e000      	b.n	8006cec <DMA_SetConfig+0x110>
 8006cea:	2300      	movs	r3, #0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00d      	beq.n	8006d0c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006cf8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d004      	beq.n	8006d0c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d0a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a39      	ldr	r2, [pc, #228]	; (8006df8 <DMA_SetConfig+0x21c>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d04a      	beq.n	8006dac <DMA_SetConfig+0x1d0>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a38      	ldr	r2, [pc, #224]	; (8006dfc <DMA_SetConfig+0x220>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d045      	beq.n	8006dac <DMA_SetConfig+0x1d0>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a36      	ldr	r2, [pc, #216]	; (8006e00 <DMA_SetConfig+0x224>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d040      	beq.n	8006dac <DMA_SetConfig+0x1d0>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a35      	ldr	r2, [pc, #212]	; (8006e04 <DMA_SetConfig+0x228>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d03b      	beq.n	8006dac <DMA_SetConfig+0x1d0>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a33      	ldr	r2, [pc, #204]	; (8006e08 <DMA_SetConfig+0x22c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d036      	beq.n	8006dac <DMA_SetConfig+0x1d0>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a32      	ldr	r2, [pc, #200]	; (8006e0c <DMA_SetConfig+0x230>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d031      	beq.n	8006dac <DMA_SetConfig+0x1d0>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a30      	ldr	r2, [pc, #192]	; (8006e10 <DMA_SetConfig+0x234>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d02c      	beq.n	8006dac <DMA_SetConfig+0x1d0>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a2f      	ldr	r2, [pc, #188]	; (8006e14 <DMA_SetConfig+0x238>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d027      	beq.n	8006dac <DMA_SetConfig+0x1d0>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a2d      	ldr	r2, [pc, #180]	; (8006e18 <DMA_SetConfig+0x23c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d022      	beq.n	8006dac <DMA_SetConfig+0x1d0>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a2c      	ldr	r2, [pc, #176]	; (8006e1c <DMA_SetConfig+0x240>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d01d      	beq.n	8006dac <DMA_SetConfig+0x1d0>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a2a      	ldr	r2, [pc, #168]	; (8006e20 <DMA_SetConfig+0x244>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d018      	beq.n	8006dac <DMA_SetConfig+0x1d0>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a29      	ldr	r2, [pc, #164]	; (8006e24 <DMA_SetConfig+0x248>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d013      	beq.n	8006dac <DMA_SetConfig+0x1d0>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a27      	ldr	r2, [pc, #156]	; (8006e28 <DMA_SetConfig+0x24c>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d00e      	beq.n	8006dac <DMA_SetConfig+0x1d0>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a26      	ldr	r2, [pc, #152]	; (8006e2c <DMA_SetConfig+0x250>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d009      	beq.n	8006dac <DMA_SetConfig+0x1d0>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a24      	ldr	r2, [pc, #144]	; (8006e30 <DMA_SetConfig+0x254>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d004      	beq.n	8006dac <DMA_SetConfig+0x1d0>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a23      	ldr	r2, [pc, #140]	; (8006e34 <DMA_SetConfig+0x258>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d101      	bne.n	8006db0 <DMA_SetConfig+0x1d4>
 8006dac:	2301      	movs	r3, #1
 8006dae:	e000      	b.n	8006db2 <DMA_SetConfig+0x1d6>
 8006db0:	2300      	movs	r3, #0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d059      	beq.n	8006e6a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dba:	f003 031f 	and.w	r3, r3, #31
 8006dbe:	223f      	movs	r2, #63	; 0x3f
 8006dc0:	409a      	lsls	r2, r3
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006dd4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	2b40      	cmp	r3, #64	; 0x40
 8006de4:	d138      	bne.n	8006e58 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006df6:	e086      	b.n	8006f06 <DMA_SetConfig+0x32a>
 8006df8:	40020010 	.word	0x40020010
 8006dfc:	40020028 	.word	0x40020028
 8006e00:	40020040 	.word	0x40020040
 8006e04:	40020058 	.word	0x40020058
 8006e08:	40020070 	.word	0x40020070
 8006e0c:	40020088 	.word	0x40020088
 8006e10:	400200a0 	.word	0x400200a0
 8006e14:	400200b8 	.word	0x400200b8
 8006e18:	40020410 	.word	0x40020410
 8006e1c:	40020428 	.word	0x40020428
 8006e20:	40020440 	.word	0x40020440
 8006e24:	40020458 	.word	0x40020458
 8006e28:	40020470 	.word	0x40020470
 8006e2c:	40020488 	.word	0x40020488
 8006e30:	400204a0 	.word	0x400204a0
 8006e34:	400204b8 	.word	0x400204b8
 8006e38:	58025408 	.word	0x58025408
 8006e3c:	5802541c 	.word	0x5802541c
 8006e40:	58025430 	.word	0x58025430
 8006e44:	58025444 	.word	0x58025444
 8006e48:	58025458 	.word	0x58025458
 8006e4c:	5802546c 	.word	0x5802546c
 8006e50:	58025480 	.word	0x58025480
 8006e54:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	60da      	str	r2, [r3, #12]
}
 8006e68:	e04d      	b.n	8006f06 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a29      	ldr	r2, [pc, #164]	; (8006f14 <DMA_SetConfig+0x338>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d022      	beq.n	8006eba <DMA_SetConfig+0x2de>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a27      	ldr	r2, [pc, #156]	; (8006f18 <DMA_SetConfig+0x33c>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d01d      	beq.n	8006eba <DMA_SetConfig+0x2de>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a26      	ldr	r2, [pc, #152]	; (8006f1c <DMA_SetConfig+0x340>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d018      	beq.n	8006eba <DMA_SetConfig+0x2de>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a24      	ldr	r2, [pc, #144]	; (8006f20 <DMA_SetConfig+0x344>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d013      	beq.n	8006eba <DMA_SetConfig+0x2de>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a23      	ldr	r2, [pc, #140]	; (8006f24 <DMA_SetConfig+0x348>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d00e      	beq.n	8006eba <DMA_SetConfig+0x2de>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a21      	ldr	r2, [pc, #132]	; (8006f28 <DMA_SetConfig+0x34c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d009      	beq.n	8006eba <DMA_SetConfig+0x2de>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a20      	ldr	r2, [pc, #128]	; (8006f2c <DMA_SetConfig+0x350>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d004      	beq.n	8006eba <DMA_SetConfig+0x2de>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a1e      	ldr	r2, [pc, #120]	; (8006f30 <DMA_SetConfig+0x354>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d101      	bne.n	8006ebe <DMA_SetConfig+0x2e2>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e000      	b.n	8006ec0 <DMA_SetConfig+0x2e4>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d020      	beq.n	8006f06 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec8:	f003 031f 	and.w	r3, r3, #31
 8006ecc:	2201      	movs	r2, #1
 8006ece:	409a      	lsls	r2, r3
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	2b40      	cmp	r3, #64	; 0x40
 8006ee2:	d108      	bne.n	8006ef6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	60da      	str	r2, [r3, #12]
}
 8006ef4:	e007      	b.n	8006f06 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	60da      	str	r2, [r3, #12]
}
 8006f06:	bf00      	nop
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	58025408 	.word	0x58025408
 8006f18:	5802541c 	.word	0x5802541c
 8006f1c:	58025430 	.word	0x58025430
 8006f20:	58025444 	.word	0x58025444
 8006f24:	58025458 	.word	0x58025458
 8006f28:	5802546c 	.word	0x5802546c
 8006f2c:	58025480 	.word	0x58025480
 8006f30:	58025494 	.word	0x58025494

08006f34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a42      	ldr	r2, [pc, #264]	; (800704c <DMA_CalcBaseAndBitshift+0x118>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d04a      	beq.n	8006fdc <DMA_CalcBaseAndBitshift+0xa8>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a41      	ldr	r2, [pc, #260]	; (8007050 <DMA_CalcBaseAndBitshift+0x11c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d045      	beq.n	8006fdc <DMA_CalcBaseAndBitshift+0xa8>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a3f      	ldr	r2, [pc, #252]	; (8007054 <DMA_CalcBaseAndBitshift+0x120>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d040      	beq.n	8006fdc <DMA_CalcBaseAndBitshift+0xa8>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a3e      	ldr	r2, [pc, #248]	; (8007058 <DMA_CalcBaseAndBitshift+0x124>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d03b      	beq.n	8006fdc <DMA_CalcBaseAndBitshift+0xa8>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a3c      	ldr	r2, [pc, #240]	; (800705c <DMA_CalcBaseAndBitshift+0x128>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d036      	beq.n	8006fdc <DMA_CalcBaseAndBitshift+0xa8>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a3b      	ldr	r2, [pc, #236]	; (8007060 <DMA_CalcBaseAndBitshift+0x12c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d031      	beq.n	8006fdc <DMA_CalcBaseAndBitshift+0xa8>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a39      	ldr	r2, [pc, #228]	; (8007064 <DMA_CalcBaseAndBitshift+0x130>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d02c      	beq.n	8006fdc <DMA_CalcBaseAndBitshift+0xa8>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a38      	ldr	r2, [pc, #224]	; (8007068 <DMA_CalcBaseAndBitshift+0x134>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d027      	beq.n	8006fdc <DMA_CalcBaseAndBitshift+0xa8>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a36      	ldr	r2, [pc, #216]	; (800706c <DMA_CalcBaseAndBitshift+0x138>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d022      	beq.n	8006fdc <DMA_CalcBaseAndBitshift+0xa8>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a35      	ldr	r2, [pc, #212]	; (8007070 <DMA_CalcBaseAndBitshift+0x13c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d01d      	beq.n	8006fdc <DMA_CalcBaseAndBitshift+0xa8>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a33      	ldr	r2, [pc, #204]	; (8007074 <DMA_CalcBaseAndBitshift+0x140>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d018      	beq.n	8006fdc <DMA_CalcBaseAndBitshift+0xa8>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a32      	ldr	r2, [pc, #200]	; (8007078 <DMA_CalcBaseAndBitshift+0x144>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d013      	beq.n	8006fdc <DMA_CalcBaseAndBitshift+0xa8>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a30      	ldr	r2, [pc, #192]	; (800707c <DMA_CalcBaseAndBitshift+0x148>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d00e      	beq.n	8006fdc <DMA_CalcBaseAndBitshift+0xa8>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a2f      	ldr	r2, [pc, #188]	; (8007080 <DMA_CalcBaseAndBitshift+0x14c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d009      	beq.n	8006fdc <DMA_CalcBaseAndBitshift+0xa8>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a2d      	ldr	r2, [pc, #180]	; (8007084 <DMA_CalcBaseAndBitshift+0x150>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d004      	beq.n	8006fdc <DMA_CalcBaseAndBitshift+0xa8>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a2c      	ldr	r2, [pc, #176]	; (8007088 <DMA_CalcBaseAndBitshift+0x154>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d101      	bne.n	8006fe0 <DMA_CalcBaseAndBitshift+0xac>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e000      	b.n	8006fe2 <DMA_CalcBaseAndBitshift+0xae>
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d024      	beq.n	8007030 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	3b10      	subs	r3, #16
 8006fee:	4a27      	ldr	r2, [pc, #156]	; (800708c <DMA_CalcBaseAndBitshift+0x158>)
 8006ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff4:	091b      	lsrs	r3, r3, #4
 8006ff6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f003 0307 	and.w	r3, r3, #7
 8006ffe:	4a24      	ldr	r2, [pc, #144]	; (8007090 <DMA_CalcBaseAndBitshift+0x15c>)
 8007000:	5cd3      	ldrb	r3, [r2, r3]
 8007002:	461a      	mov	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b03      	cmp	r3, #3
 800700c:	d908      	bls.n	8007020 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	4b1f      	ldr	r3, [pc, #124]	; (8007094 <DMA_CalcBaseAndBitshift+0x160>)
 8007016:	4013      	ands	r3, r2
 8007018:	1d1a      	adds	r2, r3, #4
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	659a      	str	r2, [r3, #88]	; 0x58
 800701e:	e00d      	b.n	800703c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	461a      	mov	r2, r3
 8007026:	4b1b      	ldr	r3, [pc, #108]	; (8007094 <DMA_CalcBaseAndBitshift+0x160>)
 8007028:	4013      	ands	r3, r2
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	6593      	str	r3, [r2, #88]	; 0x58
 800702e:	e005      	b.n	800703c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007040:	4618      	mov	r0, r3
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	40020010 	.word	0x40020010
 8007050:	40020028 	.word	0x40020028
 8007054:	40020040 	.word	0x40020040
 8007058:	40020058 	.word	0x40020058
 800705c:	40020070 	.word	0x40020070
 8007060:	40020088 	.word	0x40020088
 8007064:	400200a0 	.word	0x400200a0
 8007068:	400200b8 	.word	0x400200b8
 800706c:	40020410 	.word	0x40020410
 8007070:	40020428 	.word	0x40020428
 8007074:	40020440 	.word	0x40020440
 8007078:	40020458 	.word	0x40020458
 800707c:	40020470 	.word	0x40020470
 8007080:	40020488 	.word	0x40020488
 8007084:	400204a0 	.word	0x400204a0
 8007088:	400204b8 	.word	0x400204b8
 800708c:	aaaaaaab 	.word	0xaaaaaaab
 8007090:	0800e624 	.word	0x0800e624
 8007094:	fffffc00 	.word	0xfffffc00

08007098 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070a0:	2300      	movs	r3, #0
 80070a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d120      	bne.n	80070ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d858      	bhi.n	8007166 <DMA_CheckFifoParam+0xce>
 80070b4:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <DMA_CheckFifoParam+0x24>)
 80070b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ba:	bf00      	nop
 80070bc:	080070cd 	.word	0x080070cd
 80070c0:	080070df 	.word	0x080070df
 80070c4:	080070cd 	.word	0x080070cd
 80070c8:	08007167 	.word	0x08007167
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d048      	beq.n	800716a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070dc:	e045      	b.n	800716a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80070e6:	d142      	bne.n	800716e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070ec:	e03f      	b.n	800716e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070f6:	d123      	bne.n	8007140 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fc:	2b03      	cmp	r3, #3
 80070fe:	d838      	bhi.n	8007172 <DMA_CheckFifoParam+0xda>
 8007100:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <DMA_CheckFifoParam+0x70>)
 8007102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007106:	bf00      	nop
 8007108:	08007119 	.word	0x08007119
 800710c:	0800711f 	.word	0x0800711f
 8007110:	08007119 	.word	0x08007119
 8007114:	08007131 	.word	0x08007131
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	73fb      	strb	r3, [r7, #15]
        break;
 800711c:	e030      	b.n	8007180 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007122:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d025      	beq.n	8007176 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800712e:	e022      	b.n	8007176 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007134:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007138:	d11f      	bne.n	800717a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800713e:	e01c      	b.n	800717a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007144:	2b02      	cmp	r3, #2
 8007146:	d902      	bls.n	800714e <DMA_CheckFifoParam+0xb6>
 8007148:	2b03      	cmp	r3, #3
 800714a:	d003      	beq.n	8007154 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800714c:	e018      	b.n	8007180 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	73fb      	strb	r3, [r7, #15]
        break;
 8007152:	e015      	b.n	8007180 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007158:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00e      	beq.n	800717e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	73fb      	strb	r3, [r7, #15]
    break;
 8007164:	e00b      	b.n	800717e <DMA_CheckFifoParam+0xe6>
        break;
 8007166:	bf00      	nop
 8007168:	e00a      	b.n	8007180 <DMA_CheckFifoParam+0xe8>
        break;
 800716a:	bf00      	nop
 800716c:	e008      	b.n	8007180 <DMA_CheckFifoParam+0xe8>
        break;
 800716e:	bf00      	nop
 8007170:	e006      	b.n	8007180 <DMA_CheckFifoParam+0xe8>
        break;
 8007172:	bf00      	nop
 8007174:	e004      	b.n	8007180 <DMA_CheckFifoParam+0xe8>
        break;
 8007176:	bf00      	nop
 8007178:	e002      	b.n	8007180 <DMA_CheckFifoParam+0xe8>
        break;
 800717a:	bf00      	nop
 800717c:	e000      	b.n	8007180 <DMA_CheckFifoParam+0xe8>
    break;
 800717e:	bf00      	nop
    }
  }

  return status;
 8007180:	7bfb      	ldrb	r3, [r7, #15]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop

08007190 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a38      	ldr	r2, [pc, #224]	; (8007284 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d022      	beq.n	80071ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a36      	ldr	r2, [pc, #216]	; (8007288 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d01d      	beq.n	80071ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a35      	ldr	r2, [pc, #212]	; (800728c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d018      	beq.n	80071ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a33      	ldr	r2, [pc, #204]	; (8007290 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d013      	beq.n	80071ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a32      	ldr	r2, [pc, #200]	; (8007294 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d00e      	beq.n	80071ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a30      	ldr	r2, [pc, #192]	; (8007298 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d009      	beq.n	80071ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a2f      	ldr	r2, [pc, #188]	; (800729c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d004      	beq.n	80071ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a2d      	ldr	r2, [pc, #180]	; (80072a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d101      	bne.n	80071f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80071ee:	2301      	movs	r3, #1
 80071f0:	e000      	b.n	80071f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80071f2:	2300      	movs	r3, #0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d01a      	beq.n	800722e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	3b08      	subs	r3, #8
 8007200:	4a28      	ldr	r2, [pc, #160]	; (80072a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007202:	fba2 2303 	umull	r2, r3, r2, r3
 8007206:	091b      	lsrs	r3, r3, #4
 8007208:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	4b26      	ldr	r3, [pc, #152]	; (80072a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800720e:	4413      	add	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	461a      	mov	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a24      	ldr	r2, [pc, #144]	; (80072ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800721c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f003 031f 	and.w	r3, r3, #31
 8007224:	2201      	movs	r2, #1
 8007226:	409a      	lsls	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800722c:	e024      	b.n	8007278 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	b2db      	uxtb	r3, r3
 8007234:	3b10      	subs	r3, #16
 8007236:	4a1e      	ldr	r2, [pc, #120]	; (80072b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007238:	fba2 2303 	umull	r2, r3, r2, r3
 800723c:	091b      	lsrs	r3, r3, #4
 800723e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	4a1c      	ldr	r2, [pc, #112]	; (80072b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d806      	bhi.n	8007256 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	4a1b      	ldr	r2, [pc, #108]	; (80072b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d902      	bls.n	8007256 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	3308      	adds	r3, #8
 8007254:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	4b18      	ldr	r3, [pc, #96]	; (80072bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800725a:	4413      	add	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	461a      	mov	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a16      	ldr	r2, [pc, #88]	; (80072c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007268:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f003 031f 	and.w	r3, r3, #31
 8007270:	2201      	movs	r2, #1
 8007272:	409a      	lsls	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007278:	bf00      	nop
 800727a:	3714      	adds	r7, #20
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	58025408 	.word	0x58025408
 8007288:	5802541c 	.word	0x5802541c
 800728c:	58025430 	.word	0x58025430
 8007290:	58025444 	.word	0x58025444
 8007294:	58025458 	.word	0x58025458
 8007298:	5802546c 	.word	0x5802546c
 800729c:	58025480 	.word	0x58025480
 80072a0:	58025494 	.word	0x58025494
 80072a4:	cccccccd 	.word	0xcccccccd
 80072a8:	16009600 	.word	0x16009600
 80072ac:	58025880 	.word	0x58025880
 80072b0:	aaaaaaab 	.word	0xaaaaaaab
 80072b4:	400204b8 	.word	0x400204b8
 80072b8:	4002040f 	.word	0x4002040f
 80072bc:	10008200 	.word	0x10008200
 80072c0:	40020880 	.word	0x40020880

080072c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d04a      	beq.n	8007370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2b08      	cmp	r3, #8
 80072de:	d847      	bhi.n	8007370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a25      	ldr	r2, [pc, #148]	; (800737c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d022      	beq.n	8007330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a24      	ldr	r2, [pc, #144]	; (8007380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d01d      	beq.n	8007330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a22      	ldr	r2, [pc, #136]	; (8007384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d018      	beq.n	8007330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a21      	ldr	r2, [pc, #132]	; (8007388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d013      	beq.n	8007330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a1f      	ldr	r2, [pc, #124]	; (800738c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d00e      	beq.n	8007330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a1e      	ldr	r2, [pc, #120]	; (8007390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d009      	beq.n	8007330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a1c      	ldr	r2, [pc, #112]	; (8007394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d004      	beq.n	8007330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a1b      	ldr	r2, [pc, #108]	; (8007398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d101      	bne.n	8007334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007330:	2301      	movs	r3, #1
 8007332:	e000      	b.n	8007336 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007334:	2300      	movs	r3, #0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	4b17      	ldr	r3, [pc, #92]	; (800739c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800733e:	4413      	add	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	461a      	mov	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a15      	ldr	r2, [pc, #84]	; (80073a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800734c:	671a      	str	r2, [r3, #112]	; 0x70
 800734e:	e009      	b.n	8007364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	4b14      	ldr	r3, [pc, #80]	; (80073a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007354:	4413      	add	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	461a      	mov	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a11      	ldr	r2, [pc, #68]	; (80073a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007362:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	3b01      	subs	r3, #1
 8007368:	2201      	movs	r2, #1
 800736a:	409a      	lsls	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007370:	bf00      	nop
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	58025408 	.word	0x58025408
 8007380:	5802541c 	.word	0x5802541c
 8007384:	58025430 	.word	0x58025430
 8007388:	58025444 	.word	0x58025444
 800738c:	58025458 	.word	0x58025458
 8007390:	5802546c 	.word	0x5802546c
 8007394:	58025480 	.word	0x58025480
 8007398:	58025494 	.word	0x58025494
 800739c:	1600963f 	.word	0x1600963f
 80073a0:	58025940 	.word	0x58025940
 80073a4:	1000823f 	.word	0x1000823f
 80073a8:	40020940 	.word	0x40020940

080073ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b089      	sub	sp, #36	; 0x24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80073b6:	2300      	movs	r3, #0
 80073b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80073ba:	4b86      	ldr	r3, [pc, #536]	; (80075d4 <HAL_GPIO_Init+0x228>)
 80073bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80073be:	e18c      	b.n	80076da <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	2101      	movs	r1, #1
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	fa01 f303 	lsl.w	r3, r1, r3
 80073cc:	4013      	ands	r3, r2
 80073ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f000 817e 	beq.w	80076d4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f003 0303 	and.w	r3, r3, #3
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d005      	beq.n	80073f0 <HAL_GPIO_Init+0x44>
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f003 0303 	and.w	r3, r3, #3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d130      	bne.n	8007452 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	2203      	movs	r2, #3
 80073fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007400:	43db      	mvns	r3, r3
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	4013      	ands	r3, r2
 8007406:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	68da      	ldr	r2, [r3, #12]
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	005b      	lsls	r3, r3, #1
 8007410:	fa02 f303 	lsl.w	r3, r2, r3
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	4313      	orrs	r3, r2
 8007418:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	69ba      	ldr	r2, [r7, #24]
 800741e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007426:	2201      	movs	r2, #1
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	fa02 f303 	lsl.w	r3, r2, r3
 800742e:	43db      	mvns	r3, r3
 8007430:	69ba      	ldr	r2, [r7, #24]
 8007432:	4013      	ands	r3, r2
 8007434:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	091b      	lsrs	r3, r3, #4
 800743c:	f003 0201 	and.w	r2, r3, #1
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	fa02 f303 	lsl.w	r3, r2, r3
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	4313      	orrs	r3, r2
 800744a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	69ba      	ldr	r2, [r7, #24]
 8007450:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f003 0303 	and.w	r3, r3, #3
 800745a:	2b03      	cmp	r3, #3
 800745c:	d017      	beq.n	800748e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	005b      	lsls	r3, r3, #1
 8007468:	2203      	movs	r2, #3
 800746a:	fa02 f303 	lsl.w	r3, r2, r3
 800746e:	43db      	mvns	r3, r3
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	4013      	ands	r3, r2
 8007474:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	689a      	ldr	r2, [r3, #8]
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	fa02 f303 	lsl.w	r3, r2, r3
 8007482:	69ba      	ldr	r2, [r7, #24]
 8007484:	4313      	orrs	r3, r2
 8007486:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	69ba      	ldr	r2, [r7, #24]
 800748c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f003 0303 	and.w	r3, r3, #3
 8007496:	2b02      	cmp	r3, #2
 8007498:	d123      	bne.n	80074e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	08da      	lsrs	r2, r3, #3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	3208      	adds	r2, #8
 80074a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	f003 0307 	and.w	r3, r3, #7
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	220f      	movs	r2, #15
 80074b2:	fa02 f303 	lsl.w	r3, r2, r3
 80074b6:	43db      	mvns	r3, r3
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	4013      	ands	r3, r2
 80074bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	691a      	ldr	r2, [r3, #16]
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	f003 0307 	and.w	r3, r3, #7
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	fa02 f303 	lsl.w	r3, r2, r3
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	08da      	lsrs	r2, r3, #3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3208      	adds	r2, #8
 80074dc:	69b9      	ldr	r1, [r7, #24]
 80074de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	2203      	movs	r2, #3
 80074ee:	fa02 f303 	lsl.w	r3, r2, r3
 80074f2:	43db      	mvns	r3, r3
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	4013      	ands	r3, r2
 80074f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f003 0203 	and.w	r2, r3, #3
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	fa02 f303 	lsl.w	r3, r2, r3
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	4313      	orrs	r3, r2
 800750e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	69ba      	ldr	r2, [r7, #24]
 8007514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800751e:	2b00      	cmp	r3, #0
 8007520:	f000 80d8 	beq.w	80076d4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007524:	4b2c      	ldr	r3, [pc, #176]	; (80075d8 <HAL_GPIO_Init+0x22c>)
 8007526:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800752a:	4a2b      	ldr	r2, [pc, #172]	; (80075d8 <HAL_GPIO_Init+0x22c>)
 800752c:	f043 0302 	orr.w	r3, r3, #2
 8007530:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007534:	4b28      	ldr	r3, [pc, #160]	; (80075d8 <HAL_GPIO_Init+0x22c>)
 8007536:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007542:	4a26      	ldr	r2, [pc, #152]	; (80075dc <HAL_GPIO_Init+0x230>)
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	089b      	lsrs	r3, r3, #2
 8007548:	3302      	adds	r3, #2
 800754a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800754e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	f003 0303 	and.w	r3, r3, #3
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	220f      	movs	r2, #15
 800755a:	fa02 f303 	lsl.w	r3, r2, r3
 800755e:	43db      	mvns	r3, r3
 8007560:	69ba      	ldr	r2, [r7, #24]
 8007562:	4013      	ands	r3, r2
 8007564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a1d      	ldr	r2, [pc, #116]	; (80075e0 <HAL_GPIO_Init+0x234>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d04a      	beq.n	8007604 <HAL_GPIO_Init+0x258>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a1c      	ldr	r2, [pc, #112]	; (80075e4 <HAL_GPIO_Init+0x238>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d02b      	beq.n	80075ce <HAL_GPIO_Init+0x222>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a1b      	ldr	r2, [pc, #108]	; (80075e8 <HAL_GPIO_Init+0x23c>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d025      	beq.n	80075ca <HAL_GPIO_Init+0x21e>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a1a      	ldr	r2, [pc, #104]	; (80075ec <HAL_GPIO_Init+0x240>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d01f      	beq.n	80075c6 <HAL_GPIO_Init+0x21a>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a19      	ldr	r2, [pc, #100]	; (80075f0 <HAL_GPIO_Init+0x244>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d019      	beq.n	80075c2 <HAL_GPIO_Init+0x216>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a18      	ldr	r2, [pc, #96]	; (80075f4 <HAL_GPIO_Init+0x248>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d013      	beq.n	80075be <HAL_GPIO_Init+0x212>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a17      	ldr	r2, [pc, #92]	; (80075f8 <HAL_GPIO_Init+0x24c>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d00d      	beq.n	80075ba <HAL_GPIO_Init+0x20e>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a16      	ldr	r2, [pc, #88]	; (80075fc <HAL_GPIO_Init+0x250>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d007      	beq.n	80075b6 <HAL_GPIO_Init+0x20a>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a15      	ldr	r2, [pc, #84]	; (8007600 <HAL_GPIO_Init+0x254>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d101      	bne.n	80075b2 <HAL_GPIO_Init+0x206>
 80075ae:	2309      	movs	r3, #9
 80075b0:	e029      	b.n	8007606 <HAL_GPIO_Init+0x25a>
 80075b2:	230a      	movs	r3, #10
 80075b4:	e027      	b.n	8007606 <HAL_GPIO_Init+0x25a>
 80075b6:	2307      	movs	r3, #7
 80075b8:	e025      	b.n	8007606 <HAL_GPIO_Init+0x25a>
 80075ba:	2306      	movs	r3, #6
 80075bc:	e023      	b.n	8007606 <HAL_GPIO_Init+0x25a>
 80075be:	2305      	movs	r3, #5
 80075c0:	e021      	b.n	8007606 <HAL_GPIO_Init+0x25a>
 80075c2:	2304      	movs	r3, #4
 80075c4:	e01f      	b.n	8007606 <HAL_GPIO_Init+0x25a>
 80075c6:	2303      	movs	r3, #3
 80075c8:	e01d      	b.n	8007606 <HAL_GPIO_Init+0x25a>
 80075ca:	2302      	movs	r3, #2
 80075cc:	e01b      	b.n	8007606 <HAL_GPIO_Init+0x25a>
 80075ce:	2301      	movs	r3, #1
 80075d0:	e019      	b.n	8007606 <HAL_GPIO_Init+0x25a>
 80075d2:	bf00      	nop
 80075d4:	58000080 	.word	0x58000080
 80075d8:	58024400 	.word	0x58024400
 80075dc:	58000400 	.word	0x58000400
 80075e0:	58020000 	.word	0x58020000
 80075e4:	58020400 	.word	0x58020400
 80075e8:	58020800 	.word	0x58020800
 80075ec:	58020c00 	.word	0x58020c00
 80075f0:	58021000 	.word	0x58021000
 80075f4:	58021400 	.word	0x58021400
 80075f8:	58021800 	.word	0x58021800
 80075fc:	58021c00 	.word	0x58021c00
 8007600:	58022400 	.word	0x58022400
 8007604:	2300      	movs	r3, #0
 8007606:	69fa      	ldr	r2, [r7, #28]
 8007608:	f002 0203 	and.w	r2, r2, #3
 800760c:	0092      	lsls	r2, r2, #2
 800760e:	4093      	lsls	r3, r2
 8007610:	69ba      	ldr	r2, [r7, #24]
 8007612:	4313      	orrs	r3, r2
 8007614:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007616:	4938      	ldr	r1, [pc, #224]	; (80076f8 <HAL_GPIO_Init+0x34c>)
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	089b      	lsrs	r3, r3, #2
 800761c:	3302      	adds	r3, #2
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	43db      	mvns	r3, r3
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	4013      	ands	r3, r2
 8007634:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d003      	beq.n	800764a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007642:	69ba      	ldr	r2, [r7, #24]
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	4313      	orrs	r3, r2
 8007648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800764a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	43db      	mvns	r3, r3
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	4013      	ands	r3, r2
 8007662:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d003      	beq.n	8007678 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	4313      	orrs	r3, r2
 8007676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007678:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	43db      	mvns	r3, r3
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	4013      	ands	r3, r2
 800768e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d003      	beq.n	80076a4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	69ba      	ldr	r2, [r7, #24]
 80076a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	43db      	mvns	r3, r3
 80076b4:	69ba      	ldr	r2, [r7, #24]
 80076b6:	4013      	ands	r3, r2
 80076b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d003      	beq.n	80076ce <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80076c6:	69ba      	ldr	r2, [r7, #24]
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	3301      	adds	r3, #1
 80076d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	fa22 f303 	lsr.w	r3, r2, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f47f ae6b 	bne.w	80073c0 <HAL_GPIO_Init+0x14>
  }
}
 80076ea:	bf00      	nop
 80076ec:	bf00      	nop
 80076ee:	3724      	adds	r7, #36	; 0x24
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr
 80076f8:	58000400 	.word	0x58000400

080076fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007706:	2300      	movs	r3, #0
 8007708:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800770a:	4b72      	ldr	r3, [pc, #456]	; (80078d4 <HAL_GPIO_DeInit+0x1d8>)
 800770c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800770e:	e0d3      	b.n	80078b8 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007710:	2201      	movs	r2, #1
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	fa02 f303 	lsl.w	r3, r2, r3
 8007718:	683a      	ldr	r2, [r7, #0]
 800771a:	4013      	ands	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	f000 80c6 	beq.w	80078b2 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007726:	4a6c      	ldr	r2, [pc, #432]	; (80078d8 <HAL_GPIO_DeInit+0x1dc>)
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	089b      	lsrs	r3, r3, #2
 800772c:	3302      	adds	r3, #2
 800772e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007732:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	f003 0303 	and.w	r3, r3, #3
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	220f      	movs	r2, #15
 800773e:	fa02 f303 	lsl.w	r3, r2, r3
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	4013      	ands	r3, r2
 8007746:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a64      	ldr	r2, [pc, #400]	; (80078dc <HAL_GPIO_DeInit+0x1e0>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d031      	beq.n	80077b4 <HAL_GPIO_DeInit+0xb8>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a63      	ldr	r2, [pc, #396]	; (80078e0 <HAL_GPIO_DeInit+0x1e4>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d02b      	beq.n	80077b0 <HAL_GPIO_DeInit+0xb4>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a62      	ldr	r2, [pc, #392]	; (80078e4 <HAL_GPIO_DeInit+0x1e8>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d025      	beq.n	80077ac <HAL_GPIO_DeInit+0xb0>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a61      	ldr	r2, [pc, #388]	; (80078e8 <HAL_GPIO_DeInit+0x1ec>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d01f      	beq.n	80077a8 <HAL_GPIO_DeInit+0xac>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a60      	ldr	r2, [pc, #384]	; (80078ec <HAL_GPIO_DeInit+0x1f0>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d019      	beq.n	80077a4 <HAL_GPIO_DeInit+0xa8>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a5f      	ldr	r2, [pc, #380]	; (80078f0 <HAL_GPIO_DeInit+0x1f4>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d013      	beq.n	80077a0 <HAL_GPIO_DeInit+0xa4>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a5e      	ldr	r2, [pc, #376]	; (80078f4 <HAL_GPIO_DeInit+0x1f8>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d00d      	beq.n	800779c <HAL_GPIO_DeInit+0xa0>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a5d      	ldr	r2, [pc, #372]	; (80078f8 <HAL_GPIO_DeInit+0x1fc>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d007      	beq.n	8007798 <HAL_GPIO_DeInit+0x9c>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a5c      	ldr	r2, [pc, #368]	; (80078fc <HAL_GPIO_DeInit+0x200>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d101      	bne.n	8007794 <HAL_GPIO_DeInit+0x98>
 8007790:	2309      	movs	r3, #9
 8007792:	e010      	b.n	80077b6 <HAL_GPIO_DeInit+0xba>
 8007794:	230a      	movs	r3, #10
 8007796:	e00e      	b.n	80077b6 <HAL_GPIO_DeInit+0xba>
 8007798:	2307      	movs	r3, #7
 800779a:	e00c      	b.n	80077b6 <HAL_GPIO_DeInit+0xba>
 800779c:	2306      	movs	r3, #6
 800779e:	e00a      	b.n	80077b6 <HAL_GPIO_DeInit+0xba>
 80077a0:	2305      	movs	r3, #5
 80077a2:	e008      	b.n	80077b6 <HAL_GPIO_DeInit+0xba>
 80077a4:	2304      	movs	r3, #4
 80077a6:	e006      	b.n	80077b6 <HAL_GPIO_DeInit+0xba>
 80077a8:	2303      	movs	r3, #3
 80077aa:	e004      	b.n	80077b6 <HAL_GPIO_DeInit+0xba>
 80077ac:	2302      	movs	r3, #2
 80077ae:	e002      	b.n	80077b6 <HAL_GPIO_DeInit+0xba>
 80077b0:	2301      	movs	r3, #1
 80077b2:	e000      	b.n	80077b6 <HAL_GPIO_DeInit+0xba>
 80077b4:	2300      	movs	r3, #0
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	f002 0203 	and.w	r2, r2, #3
 80077bc:	0092      	lsls	r2, r2, #2
 80077be:	4093      	lsls	r3, r2
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d136      	bne.n	8007834 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	43db      	mvns	r3, r3
 80077ce:	401a      	ands	r2, r3
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	43db      	mvns	r3, r3
 80077dc:	401a      	ands	r2, r3
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80077e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	43db      	mvns	r3, r3
 80077ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077f0:	4013      	ands	r3, r2
 80077f2:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80077f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	43db      	mvns	r3, r3
 80077fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007802:	4013      	ands	r3, r2
 8007804:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f003 0303 	and.w	r3, r3, #3
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	220f      	movs	r2, #15
 8007810:	fa02 f303 	lsl.w	r3, r2, r3
 8007814:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007816:	4a30      	ldr	r2, [pc, #192]	; (80078d8 <HAL_GPIO_DeInit+0x1dc>)
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	089b      	lsrs	r3, r3, #2
 800781c:	3302      	adds	r3, #2
 800781e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	43da      	mvns	r2, r3
 8007826:	482c      	ldr	r0, [pc, #176]	; (80078d8 <HAL_GPIO_DeInit+0x1dc>)
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	089b      	lsrs	r3, r3, #2
 800782c:	400a      	ands	r2, r1
 800782e:	3302      	adds	r3, #2
 8007830:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	2103      	movs	r1, #3
 800783e:	fa01 f303 	lsl.w	r3, r1, r3
 8007842:	431a      	orrs	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	08da      	lsrs	r2, r3, #3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	3208      	adds	r2, #8
 8007850:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f003 0307 	and.w	r3, r3, #7
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	220f      	movs	r2, #15
 800785e:	fa02 f303 	lsl.w	r3, r2, r3
 8007862:	43db      	mvns	r3, r3
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	08d2      	lsrs	r2, r2, #3
 8007868:	4019      	ands	r1, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	3208      	adds	r2, #8
 800786e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68da      	ldr	r2, [r3, #12]
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	005b      	lsls	r3, r3, #1
 800787a:	2103      	movs	r1, #3
 800787c:	fa01 f303 	lsl.w	r3, r1, r3
 8007880:	43db      	mvns	r3, r3
 8007882:	401a      	ands	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	2101      	movs	r1, #1
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	fa01 f303 	lsl.w	r3, r1, r3
 8007894:	43db      	mvns	r3, r3
 8007896:	401a      	ands	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	689a      	ldr	r2, [r3, #8]
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	2103      	movs	r1, #3
 80078a6:	fa01 f303 	lsl.w	r3, r1, r3
 80078aa:	43db      	mvns	r3, r3
 80078ac:	401a      	ands	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	3301      	adds	r3, #1
 80078b6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80078b8:	683a      	ldr	r2, [r7, #0]
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	fa22 f303 	lsr.w	r3, r2, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f47f af25 	bne.w	8007710 <HAL_GPIO_DeInit+0x14>
  }
}
 80078c6:	bf00      	nop
 80078c8:	bf00      	nop
 80078ca:	371c      	adds	r7, #28
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	58000080 	.word	0x58000080
 80078d8:	58000400 	.word	0x58000400
 80078dc:	58020000 	.word	0x58020000
 80078e0:	58020400 	.word	0x58020400
 80078e4:	58020800 	.word	0x58020800
 80078e8:	58020c00 	.word	0x58020c00
 80078ec:	58021000 	.word	0x58021000
 80078f0:	58021400 	.word	0x58021400
 80078f4:	58021800 	.word	0x58021800
 80078f8:	58021c00 	.word	0x58021c00
 80078fc:	58022400 	.word	0x58022400

08007900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	460b      	mov	r3, r1
 800790a:	807b      	strh	r3, [r7, #2]
 800790c:	4613      	mov	r3, r2
 800790e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007910:	787b      	ldrb	r3, [r7, #1]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d003      	beq.n	800791e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007916:	887a      	ldrh	r2, [r7, #2]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800791c:	e003      	b.n	8007926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800791e:	887b      	ldrh	r3, [r7, #2]
 8007920:	041a      	lsls	r2, r3, #16
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	619a      	str	r2, [r3, #24]
}
 8007926:	bf00      	nop
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
	...

08007934 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800793c:	4b19      	ldr	r3, [pc, #100]	; (80079a4 <HAL_PWREx_ConfigSupply+0x70>)
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	f003 0304 	and.w	r3, r3, #4
 8007944:	2b04      	cmp	r3, #4
 8007946:	d00a      	beq.n	800795e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007948:	4b16      	ldr	r3, [pc, #88]	; (80079a4 <HAL_PWREx_ConfigSupply+0x70>)
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f003 0307 	and.w	r3, r3, #7
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	429a      	cmp	r2, r3
 8007954:	d001      	beq.n	800795a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e01f      	b.n	800799a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	e01d      	b.n	800799a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800795e:	4b11      	ldr	r3, [pc, #68]	; (80079a4 <HAL_PWREx_ConfigSupply+0x70>)
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f023 0207 	bic.w	r2, r3, #7
 8007966:	490f      	ldr	r1, [pc, #60]	; (80079a4 <HAL_PWREx_ConfigSupply+0x70>)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4313      	orrs	r3, r2
 800796c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800796e:	f7fc fbdf 	bl	8004130 <HAL_GetTick>
 8007972:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007974:	e009      	b.n	800798a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007976:	f7fc fbdb 	bl	8004130 <HAL_GetTick>
 800797a:	4602      	mov	r2, r0
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007984:	d901      	bls.n	800798a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e007      	b.n	800799a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800798a:	4b06      	ldr	r3, [pc, #24]	; (80079a4 <HAL_PWREx_ConfigSupply+0x70>)
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007996:	d1ee      	bne.n	8007976 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	58024800 	.word	0x58024800

080079a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08c      	sub	sp, #48	; 0x30
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e3c8      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 8087 	beq.w	8007ad6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079c8:	4b88      	ldr	r3, [pc, #544]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80079d2:	4b86      	ldr	r3, [pc, #536]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 80079d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80079d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079da:	2b10      	cmp	r3, #16
 80079dc:	d007      	beq.n	80079ee <HAL_RCC_OscConfig+0x46>
 80079de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e0:	2b18      	cmp	r3, #24
 80079e2:	d110      	bne.n	8007a06 <HAL_RCC_OscConfig+0x5e>
 80079e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e6:	f003 0303 	and.w	r3, r3, #3
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d10b      	bne.n	8007a06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079ee:	4b7f      	ldr	r3, [pc, #508]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d06c      	beq.n	8007ad4 <HAL_RCC_OscConfig+0x12c>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d168      	bne.n	8007ad4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e3a2      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a0e:	d106      	bne.n	8007a1e <HAL_RCC_OscConfig+0x76>
 8007a10:	4b76      	ldr	r3, [pc, #472]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a75      	ldr	r2, [pc, #468]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a1a:	6013      	str	r3, [r2, #0]
 8007a1c:	e02e      	b.n	8007a7c <HAL_RCC_OscConfig+0xd4>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10c      	bne.n	8007a40 <HAL_RCC_OscConfig+0x98>
 8007a26:	4b71      	ldr	r3, [pc, #452]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a70      	ldr	r2, [pc, #448]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a30:	6013      	str	r3, [r2, #0]
 8007a32:	4b6e      	ldr	r3, [pc, #440]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a6d      	ldr	r2, [pc, #436]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a3c:	6013      	str	r3, [r2, #0]
 8007a3e:	e01d      	b.n	8007a7c <HAL_RCC_OscConfig+0xd4>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a48:	d10c      	bne.n	8007a64 <HAL_RCC_OscConfig+0xbc>
 8007a4a:	4b68      	ldr	r3, [pc, #416]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a67      	ldr	r2, [pc, #412]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a54:	6013      	str	r3, [r2, #0]
 8007a56:	4b65      	ldr	r3, [pc, #404]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a64      	ldr	r2, [pc, #400]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	e00b      	b.n	8007a7c <HAL_RCC_OscConfig+0xd4>
 8007a64:	4b61      	ldr	r3, [pc, #388]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a60      	ldr	r2, [pc, #384]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a6e:	6013      	str	r3, [r2, #0]
 8007a70:	4b5e      	ldr	r3, [pc, #376]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a5d      	ldr	r2, [pc, #372]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d013      	beq.n	8007aac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a84:	f7fc fb54 	bl	8004130 <HAL_GetTick>
 8007a88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a8a:	e008      	b.n	8007a9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a8c:	f7fc fb50 	bl	8004130 <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	2b64      	cmp	r3, #100	; 0x64
 8007a98:	d901      	bls.n	8007a9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e356      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a9e:	4b53      	ldr	r3, [pc, #332]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d0f0      	beq.n	8007a8c <HAL_RCC_OscConfig+0xe4>
 8007aaa:	e014      	b.n	8007ad6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aac:	f7fc fb40 	bl	8004130 <HAL_GetTick>
 8007ab0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ab2:	e008      	b.n	8007ac6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ab4:	f7fc fb3c 	bl	8004130 <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	2b64      	cmp	r3, #100	; 0x64
 8007ac0:	d901      	bls.n	8007ac6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e342      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ac6:	4b49      	ldr	r3, [pc, #292]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1f0      	bne.n	8007ab4 <HAL_RCC_OscConfig+0x10c>
 8007ad2:	e000      	b.n	8007ad6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0302 	and.w	r3, r3, #2
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 808c 	beq.w	8007bfc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ae4:	4b41      	ldr	r3, [pc, #260]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007aec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007aee:	4b3f      	ldr	r3, [pc, #252]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d007      	beq.n	8007b0a <HAL_RCC_OscConfig+0x162>
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	2b18      	cmp	r3, #24
 8007afe:	d137      	bne.n	8007b70 <HAL_RCC_OscConfig+0x1c8>
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	f003 0303 	and.w	r3, r3, #3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d132      	bne.n	8007b70 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b0a:	4b38      	ldr	r3, [pc, #224]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0304 	and.w	r3, r3, #4
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d005      	beq.n	8007b22 <HAL_RCC_OscConfig+0x17a>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d101      	bne.n	8007b22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e314      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007b22:	4b32      	ldr	r3, [pc, #200]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f023 0219 	bic.w	r2, r3, #25
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	492f      	ldr	r1, [pc, #188]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007b30:	4313      	orrs	r3, r2
 8007b32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b34:	f7fc fafc 	bl	8004130 <HAL_GetTick>
 8007b38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b3a:	e008      	b.n	8007b4e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b3c:	f7fc faf8 	bl	8004130 <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d901      	bls.n	8007b4e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e2fe      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b4e:	4b27      	ldr	r3, [pc, #156]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0304 	and.w	r3, r3, #4
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0f0      	beq.n	8007b3c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b5a:	4b24      	ldr	r3, [pc, #144]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	061b      	lsls	r3, r3, #24
 8007b68:	4920      	ldr	r1, [pc, #128]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b6e:	e045      	b.n	8007bfc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d026      	beq.n	8007bc6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007b78:	4b1c      	ldr	r3, [pc, #112]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f023 0219 	bic.w	r2, r3, #25
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	4919      	ldr	r1, [pc, #100]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b8a:	f7fc fad1 	bl	8004130 <HAL_GetTick>
 8007b8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b90:	e008      	b.n	8007ba4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b92:	f7fc facd 	bl	8004130 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d901      	bls.n	8007ba4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e2d3      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ba4:	4b11      	ldr	r3, [pc, #68]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0304 	and.w	r3, r3, #4
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d0f0      	beq.n	8007b92 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bb0:	4b0e      	ldr	r3, [pc, #56]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	061b      	lsls	r3, r3, #24
 8007bbe:	490b      	ldr	r1, [pc, #44]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	604b      	str	r3, [r1, #4]
 8007bc4:	e01a      	b.n	8007bfc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bc6:	4b09      	ldr	r3, [pc, #36]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a08      	ldr	r2, [pc, #32]	; (8007bec <HAL_RCC_OscConfig+0x244>)
 8007bcc:	f023 0301 	bic.w	r3, r3, #1
 8007bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd2:	f7fc faad 	bl	8004130 <HAL_GetTick>
 8007bd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007bd8:	e00a      	b.n	8007bf0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bda:	f7fc faa9 	bl	8004130 <HAL_GetTick>
 8007bde:	4602      	mov	r2, r0
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d903      	bls.n	8007bf0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e2af      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
 8007bec:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007bf0:	4b96      	ldr	r3, [pc, #600]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0304 	and.w	r3, r3, #4
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1ee      	bne.n	8007bda <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0310 	and.w	r3, r3, #16
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d06a      	beq.n	8007cde <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c08:	4b90      	ldr	r3, [pc, #576]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c10:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c12:	4b8e      	ldr	r3, [pc, #568]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c16:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	2b08      	cmp	r3, #8
 8007c1c:	d007      	beq.n	8007c2e <HAL_RCC_OscConfig+0x286>
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	2b18      	cmp	r3, #24
 8007c22:	d11b      	bne.n	8007c5c <HAL_RCC_OscConfig+0x2b4>
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	f003 0303 	and.w	r3, r3, #3
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d116      	bne.n	8007c5c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c2e:	4b87      	ldr	r3, [pc, #540]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d005      	beq.n	8007c46 <HAL_RCC_OscConfig+0x29e>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	2b80      	cmp	r3, #128	; 0x80
 8007c40:	d001      	beq.n	8007c46 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e282      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c46:	4b81      	ldr	r3, [pc, #516]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	061b      	lsls	r3, r3, #24
 8007c54:	497d      	ldr	r1, [pc, #500]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c5a:	e040      	b.n	8007cde <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d023      	beq.n	8007cac <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007c64:	4b79      	ldr	r3, [pc, #484]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a78      	ldr	r2, [pc, #480]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c70:	f7fc fa5e 	bl	8004130 <HAL_GetTick>
 8007c74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c76:	e008      	b.n	8007c8a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007c78:	f7fc fa5a 	bl	8004130 <HAL_GetTick>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d901      	bls.n	8007c8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007c86:	2303      	movs	r3, #3
 8007c88:	e260      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c8a:	4b70      	ldr	r3, [pc, #448]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d0f0      	beq.n	8007c78 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c96:	4b6d      	ldr	r3, [pc, #436]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	061b      	lsls	r3, r3, #24
 8007ca4:	4969      	ldr	r1, [pc, #420]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	60cb      	str	r3, [r1, #12]
 8007caa:	e018      	b.n	8007cde <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007cac:	4b67      	ldr	r3, [pc, #412]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a66      	ldr	r2, [pc, #408]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007cb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cb8:	f7fc fa3a 	bl	8004130 <HAL_GetTick>
 8007cbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007cbe:	e008      	b.n	8007cd2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007cc0:	f7fc fa36 	bl	8004130 <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d901      	bls.n	8007cd2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e23c      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007cd2:	4b5e      	ldr	r3, [pc, #376]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1f0      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0308 	and.w	r3, r3, #8
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d036      	beq.n	8007d58 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d019      	beq.n	8007d26 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007cf2:	4b56      	ldr	r3, [pc, #344]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cf6:	4a55      	ldr	r2, [pc, #340]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007cf8:	f043 0301 	orr.w	r3, r3, #1
 8007cfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cfe:	f7fc fa17 	bl	8004130 <HAL_GetTick>
 8007d02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d04:	e008      	b.n	8007d18 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d06:	f7fc fa13 	bl	8004130 <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d901      	bls.n	8007d18 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e219      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d18:	4b4c      	ldr	r3, [pc, #304]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d1c:	f003 0302 	and.w	r3, r3, #2
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d0f0      	beq.n	8007d06 <HAL_RCC_OscConfig+0x35e>
 8007d24:	e018      	b.n	8007d58 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d26:	4b49      	ldr	r3, [pc, #292]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d2a:	4a48      	ldr	r2, [pc, #288]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007d2c:	f023 0301 	bic.w	r3, r3, #1
 8007d30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d32:	f7fc f9fd 	bl	8004130 <HAL_GetTick>
 8007d36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d38:	e008      	b.n	8007d4c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d3a:	f7fc f9f9 	bl	8004130 <HAL_GetTick>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d901      	bls.n	8007d4c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e1ff      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d4c:	4b3f      	ldr	r3, [pc, #252]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d50:	f003 0302 	and.w	r3, r3, #2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1f0      	bne.n	8007d3a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0320 	and.w	r3, r3, #32
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d036      	beq.n	8007dd2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d019      	beq.n	8007da0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d6c:	4b37      	ldr	r3, [pc, #220]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a36      	ldr	r2, [pc, #216]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007d72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007d76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007d78:	f7fc f9da 	bl	8004130 <HAL_GetTick>
 8007d7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007d7e:	e008      	b.n	8007d92 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d80:	f7fc f9d6 	bl	8004130 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d901      	bls.n	8007d92 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e1dc      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007d92:	4b2e      	ldr	r3, [pc, #184]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d0f0      	beq.n	8007d80 <HAL_RCC_OscConfig+0x3d8>
 8007d9e:	e018      	b.n	8007dd2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007da0:	4b2a      	ldr	r3, [pc, #168]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a29      	ldr	r2, [pc, #164]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007da6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007daa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007dac:	f7fc f9c0 	bl	8004130 <HAL_GetTick>
 8007db0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007db2:	e008      	b.n	8007dc6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007db4:	f7fc f9bc 	bl	8004130 <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d901      	bls.n	8007dc6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e1c2      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007dc6:	4b21      	ldr	r3, [pc, #132]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1f0      	bne.n	8007db4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0304 	and.w	r3, r3, #4
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 8086 	beq.w	8007eec <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007de0:	4b1b      	ldr	r3, [pc, #108]	; (8007e50 <HAL_RCC_OscConfig+0x4a8>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a1a      	ldr	r2, [pc, #104]	; (8007e50 <HAL_RCC_OscConfig+0x4a8>)
 8007de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007dec:	f7fc f9a0 	bl	8004130 <HAL_GetTick>
 8007df0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007df2:	e008      	b.n	8007e06 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007df4:	f7fc f99c 	bl	8004130 <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	2b64      	cmp	r3, #100	; 0x64
 8007e00:	d901      	bls.n	8007e06 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e1a2      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e06:	4b12      	ldr	r3, [pc, #72]	; (8007e50 <HAL_RCC_OscConfig+0x4a8>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0f0      	beq.n	8007df4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d106      	bne.n	8007e28 <HAL_RCC_OscConfig+0x480>
 8007e1a:	4b0c      	ldr	r3, [pc, #48]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e1e:	4a0b      	ldr	r2, [pc, #44]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007e20:	f043 0301 	orr.w	r3, r3, #1
 8007e24:	6713      	str	r3, [r2, #112]	; 0x70
 8007e26:	e032      	b.n	8007e8e <HAL_RCC_OscConfig+0x4e6>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d111      	bne.n	8007e54 <HAL_RCC_OscConfig+0x4ac>
 8007e30:	4b06      	ldr	r3, [pc, #24]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e34:	4a05      	ldr	r2, [pc, #20]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007e36:	f023 0301 	bic.w	r3, r3, #1
 8007e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8007e3c:	4b03      	ldr	r3, [pc, #12]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e40:	4a02      	ldr	r2, [pc, #8]	; (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007e42:	f023 0304 	bic.w	r3, r3, #4
 8007e46:	6713      	str	r3, [r2, #112]	; 0x70
 8007e48:	e021      	b.n	8007e8e <HAL_RCC_OscConfig+0x4e6>
 8007e4a:	bf00      	nop
 8007e4c:	58024400 	.word	0x58024400
 8007e50:	58024800 	.word	0x58024800
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	2b05      	cmp	r3, #5
 8007e5a:	d10c      	bne.n	8007e76 <HAL_RCC_OscConfig+0x4ce>
 8007e5c:	4b83      	ldr	r3, [pc, #524]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e60:	4a82      	ldr	r2, [pc, #520]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007e62:	f043 0304 	orr.w	r3, r3, #4
 8007e66:	6713      	str	r3, [r2, #112]	; 0x70
 8007e68:	4b80      	ldr	r3, [pc, #512]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e6c:	4a7f      	ldr	r2, [pc, #508]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007e6e:	f043 0301 	orr.w	r3, r3, #1
 8007e72:	6713      	str	r3, [r2, #112]	; 0x70
 8007e74:	e00b      	b.n	8007e8e <HAL_RCC_OscConfig+0x4e6>
 8007e76:	4b7d      	ldr	r3, [pc, #500]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e7a:	4a7c      	ldr	r2, [pc, #496]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007e7c:	f023 0301 	bic.w	r3, r3, #1
 8007e80:	6713      	str	r3, [r2, #112]	; 0x70
 8007e82:	4b7a      	ldr	r3, [pc, #488]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e86:	4a79      	ldr	r2, [pc, #484]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007e88:	f023 0304 	bic.w	r3, r3, #4
 8007e8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d015      	beq.n	8007ec2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e96:	f7fc f94b 	bl	8004130 <HAL_GetTick>
 8007e9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e9c:	e00a      	b.n	8007eb4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e9e:	f7fc f947 	bl	8004130 <HAL_GetTick>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d901      	bls.n	8007eb4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e14b      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007eb4:	4b6d      	ldr	r3, [pc, #436]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb8:	f003 0302 	and.w	r3, r3, #2
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d0ee      	beq.n	8007e9e <HAL_RCC_OscConfig+0x4f6>
 8007ec0:	e014      	b.n	8007eec <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ec2:	f7fc f935 	bl	8004130 <HAL_GetTick>
 8007ec6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ec8:	e00a      	b.n	8007ee0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eca:	f7fc f931 	bl	8004130 <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d901      	bls.n	8007ee0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e135      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ee0:	4b62      	ldr	r3, [pc, #392]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee4:	f003 0302 	and.w	r3, r3, #2
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1ee      	bne.n	8007eca <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 812a 	beq.w	800814a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007ef6:	4b5d      	ldr	r3, [pc, #372]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007efe:	2b18      	cmp	r3, #24
 8007f00:	f000 80ba 	beq.w	8008078 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	f040 8095 	bne.w	8008038 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f0e:	4b57      	ldr	r3, [pc, #348]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a56      	ldr	r2, [pc, #344]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007f14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f1a:	f7fc f909 	bl	8004130 <HAL_GetTick>
 8007f1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f20:	e008      	b.n	8007f34 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f22:	f7fc f905 	bl	8004130 <HAL_GetTick>
 8007f26:	4602      	mov	r2, r0
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d901      	bls.n	8007f34 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007f30:	2303      	movs	r3, #3
 8007f32:	e10b      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f34:	4b4d      	ldr	r3, [pc, #308]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1f0      	bne.n	8007f22 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f40:	4b4a      	ldr	r3, [pc, #296]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007f42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f44:	4b4a      	ldr	r3, [pc, #296]	; (8008070 <HAL_RCC_OscConfig+0x6c8>)
 8007f46:	4013      	ands	r3, r2
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007f50:	0112      	lsls	r2, r2, #4
 8007f52:	430a      	orrs	r2, r1
 8007f54:	4945      	ldr	r1, [pc, #276]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	628b      	str	r3, [r1, #40]	; 0x28
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	025b      	lsls	r3, r3, #9
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	431a      	orrs	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f74:	3b01      	subs	r3, #1
 8007f76:	041b      	lsls	r3, r3, #16
 8007f78:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f82:	3b01      	subs	r3, #1
 8007f84:	061b      	lsls	r3, r3, #24
 8007f86:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f8a:	4938      	ldr	r1, [pc, #224]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007f90:	4b36      	ldr	r3, [pc, #216]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f94:	4a35      	ldr	r2, [pc, #212]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007f96:	f023 0301 	bic.w	r3, r3, #1
 8007f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007f9c:	4b33      	ldr	r3, [pc, #204]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fa0:	4b34      	ldr	r3, [pc, #208]	; (8008074 <HAL_RCC_OscConfig+0x6cc>)
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007fa8:	00d2      	lsls	r2, r2, #3
 8007faa:	4930      	ldr	r1, [pc, #192]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007fb0:	4b2e      	ldr	r3, [pc, #184]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb4:	f023 020c 	bic.w	r2, r3, #12
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbc:	492b      	ldr	r1, [pc, #172]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007fc2:	4b2a      	ldr	r3, [pc, #168]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc6:	f023 0202 	bic.w	r2, r3, #2
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fce:	4927      	ldr	r1, [pc, #156]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007fd4:	4b25      	ldr	r3, [pc, #148]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd8:	4a24      	ldr	r2, [pc, #144]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fe0:	4b22      	ldr	r3, [pc, #136]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe4:	4a21      	ldr	r2, [pc, #132]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007fec:	4b1f      	ldr	r3, [pc, #124]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff0:	4a1e      	ldr	r2, [pc, #120]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007ff2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007ff8:	4b1c      	ldr	r3, [pc, #112]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	4a1b      	ldr	r2, [pc, #108]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007ffe:	f043 0301 	orr.w	r3, r3, #1
 8008002:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008004:	4b19      	ldr	r3, [pc, #100]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a18      	ldr	r2, [pc, #96]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 800800a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800800e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008010:	f7fc f88e 	bl	8004130 <HAL_GetTick>
 8008014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008016:	e008      	b.n	800802a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008018:	f7fc f88a 	bl	8004130 <HAL_GetTick>
 800801c:	4602      	mov	r2, r0
 800801e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	2b02      	cmp	r3, #2
 8008024:	d901      	bls.n	800802a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	e090      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800802a:	4b10      	ldr	r3, [pc, #64]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008032:	2b00      	cmp	r3, #0
 8008034:	d0f0      	beq.n	8008018 <HAL_RCC_OscConfig+0x670>
 8008036:	e088      	b.n	800814a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008038:	4b0c      	ldr	r3, [pc, #48]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a0b      	ldr	r2, [pc, #44]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 800803e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008044:	f7fc f874 	bl	8004130 <HAL_GetTick>
 8008048:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800804a:	e008      	b.n	800805e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800804c:	f7fc f870 	bl	8004130 <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	2b02      	cmp	r3, #2
 8008058:	d901      	bls.n	800805e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e076      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800805e:	4b03      	ldr	r3, [pc, #12]	; (800806c <HAL_RCC_OscConfig+0x6c4>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1f0      	bne.n	800804c <HAL_RCC_OscConfig+0x6a4>
 800806a:	e06e      	b.n	800814a <HAL_RCC_OscConfig+0x7a2>
 800806c:	58024400 	.word	0x58024400
 8008070:	fffffc0c 	.word	0xfffffc0c
 8008074:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008078:	4b36      	ldr	r3, [pc, #216]	; (8008154 <HAL_RCC_OscConfig+0x7ac>)
 800807a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800807e:	4b35      	ldr	r3, [pc, #212]	; (8008154 <HAL_RCC_OscConfig+0x7ac>)
 8008080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008082:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	2b01      	cmp	r3, #1
 800808a:	d031      	beq.n	80080f0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	f003 0203 	and.w	r2, r3, #3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008096:	429a      	cmp	r2, r3
 8008098:	d12a      	bne.n	80080f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	091b      	lsrs	r3, r3, #4
 800809e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d122      	bne.n	80080f0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d11a      	bne.n	80080f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	0a5b      	lsrs	r3, r3, #9
 80080be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d111      	bne.n	80080f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	0c1b      	lsrs	r3, r3, #16
 80080d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80080da:	429a      	cmp	r2, r3
 80080dc:	d108      	bne.n	80080f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	0e1b      	lsrs	r3, r3, #24
 80080e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d001      	beq.n	80080f4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e02b      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80080f4:	4b17      	ldr	r3, [pc, #92]	; (8008154 <HAL_RCC_OscConfig+0x7ac>)
 80080f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f8:	08db      	lsrs	r3, r3, #3
 80080fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	429a      	cmp	r2, r3
 8008108:	d01f      	beq.n	800814a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800810a:	4b12      	ldr	r3, [pc, #72]	; (8008154 <HAL_RCC_OscConfig+0x7ac>)
 800810c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810e:	4a11      	ldr	r2, [pc, #68]	; (8008154 <HAL_RCC_OscConfig+0x7ac>)
 8008110:	f023 0301 	bic.w	r3, r3, #1
 8008114:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008116:	f7fc f80b 	bl	8004130 <HAL_GetTick>
 800811a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800811c:	bf00      	nop
 800811e:	f7fc f807 	bl	8004130 <HAL_GetTick>
 8008122:	4602      	mov	r2, r0
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	4293      	cmp	r3, r2
 8008128:	d0f9      	beq.n	800811e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800812a:	4b0a      	ldr	r3, [pc, #40]	; (8008154 <HAL_RCC_OscConfig+0x7ac>)
 800812c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800812e:	4b0a      	ldr	r3, [pc, #40]	; (8008158 <HAL_RCC_OscConfig+0x7b0>)
 8008130:	4013      	ands	r3, r2
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008136:	00d2      	lsls	r2, r2, #3
 8008138:	4906      	ldr	r1, [pc, #24]	; (8008154 <HAL_RCC_OscConfig+0x7ac>)
 800813a:	4313      	orrs	r3, r2
 800813c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800813e:	4b05      	ldr	r3, [pc, #20]	; (8008154 <HAL_RCC_OscConfig+0x7ac>)
 8008140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008142:	4a04      	ldr	r2, [pc, #16]	; (8008154 <HAL_RCC_OscConfig+0x7ac>)
 8008144:	f043 0301 	orr.w	r3, r3, #1
 8008148:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3730      	adds	r7, #48	; 0x30
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	58024400 	.word	0x58024400
 8008158:	ffff0007 	.word	0xffff0007

0800815c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e19c      	b.n	80084aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008170:	4b8a      	ldr	r3, [pc, #552]	; (800839c <HAL_RCC_ClockConfig+0x240>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 030f 	and.w	r3, r3, #15
 8008178:	683a      	ldr	r2, [r7, #0]
 800817a:	429a      	cmp	r2, r3
 800817c:	d910      	bls.n	80081a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800817e:	4b87      	ldr	r3, [pc, #540]	; (800839c <HAL_RCC_ClockConfig+0x240>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f023 020f 	bic.w	r2, r3, #15
 8008186:	4985      	ldr	r1, [pc, #532]	; (800839c <HAL_RCC_ClockConfig+0x240>)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	4313      	orrs	r3, r2
 800818c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800818e:	4b83      	ldr	r3, [pc, #524]	; (800839c <HAL_RCC_ClockConfig+0x240>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 030f 	and.w	r3, r3, #15
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	429a      	cmp	r2, r3
 800819a:	d001      	beq.n	80081a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e184      	b.n	80084aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0304 	and.w	r3, r3, #4
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d010      	beq.n	80081ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	691a      	ldr	r2, [r3, #16]
 80081b0:	4b7b      	ldr	r3, [pc, #492]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d908      	bls.n	80081ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80081bc:	4b78      	ldr	r3, [pc, #480]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	4975      	ldr	r1, [pc, #468]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80081ca:	4313      	orrs	r3, r2
 80081cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0308 	and.w	r3, r3, #8
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d010      	beq.n	80081fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	695a      	ldr	r2, [r3, #20]
 80081de:	4b70      	ldr	r3, [pc, #448]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d908      	bls.n	80081fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80081ea:	4b6d      	ldr	r3, [pc, #436]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80081ec:	69db      	ldr	r3, [r3, #28]
 80081ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	496a      	ldr	r1, [pc, #424]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0310 	and.w	r3, r3, #16
 8008204:	2b00      	cmp	r3, #0
 8008206:	d010      	beq.n	800822a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	699a      	ldr	r2, [r3, #24]
 800820c:	4b64      	ldr	r3, [pc, #400]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008214:	429a      	cmp	r2, r3
 8008216:	d908      	bls.n	800822a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008218:	4b61      	ldr	r3, [pc, #388]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 800821a:	69db      	ldr	r3, [r3, #28]
 800821c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	495e      	ldr	r1, [pc, #376]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 8008226:	4313      	orrs	r3, r2
 8008228:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0320 	and.w	r3, r3, #32
 8008232:	2b00      	cmp	r3, #0
 8008234:	d010      	beq.n	8008258 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	69da      	ldr	r2, [r3, #28]
 800823a:	4b59      	ldr	r3, [pc, #356]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008242:	429a      	cmp	r2, r3
 8008244:	d908      	bls.n	8008258 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008246:	4b56      	ldr	r3, [pc, #344]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	4953      	ldr	r1, [pc, #332]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 8008254:	4313      	orrs	r3, r2
 8008256:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0302 	and.w	r3, r3, #2
 8008260:	2b00      	cmp	r3, #0
 8008262:	d010      	beq.n	8008286 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68da      	ldr	r2, [r3, #12]
 8008268:	4b4d      	ldr	r3, [pc, #308]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	f003 030f 	and.w	r3, r3, #15
 8008270:	429a      	cmp	r2, r3
 8008272:	d908      	bls.n	8008286 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008274:	4b4a      	ldr	r3, [pc, #296]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	f023 020f 	bic.w	r2, r3, #15
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	4947      	ldr	r1, [pc, #284]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 8008282:	4313      	orrs	r3, r2
 8008284:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	d055      	beq.n	800833e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008292:	4b43      	ldr	r3, [pc, #268]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	4940      	ldr	r1, [pc, #256]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80082a0:	4313      	orrs	r3, r2
 80082a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d107      	bne.n	80082bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082ac:	4b3c      	ldr	r3, [pc, #240]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d121      	bne.n	80082fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e0f6      	b.n	80084aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	2b03      	cmp	r3, #3
 80082c2:	d107      	bne.n	80082d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80082c4:	4b36      	ldr	r3, [pc, #216]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d115      	bne.n	80082fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e0ea      	b.n	80084aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d107      	bne.n	80082ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80082dc:	4b30      	ldr	r3, [pc, #192]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d109      	bne.n	80082fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e0de      	b.n	80084aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082ec:	4b2c      	ldr	r3, [pc, #176]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d101      	bne.n	80082fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e0d6      	b.n	80084aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80082fc:	4b28      	ldr	r3, [pc, #160]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	f023 0207 	bic.w	r2, r3, #7
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	4925      	ldr	r1, [pc, #148]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 800830a:	4313      	orrs	r3, r2
 800830c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800830e:	f7fb ff0f 	bl	8004130 <HAL_GetTick>
 8008312:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008314:	e00a      	b.n	800832c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008316:	f7fb ff0b 	bl	8004130 <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	f241 3288 	movw	r2, #5000	; 0x1388
 8008324:	4293      	cmp	r3, r2
 8008326:	d901      	bls.n	800832c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008328:	2303      	movs	r3, #3
 800832a:	e0be      	b.n	80084aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800832c:	4b1c      	ldr	r3, [pc, #112]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	00db      	lsls	r3, r3, #3
 800833a:	429a      	cmp	r2, r3
 800833c:	d1eb      	bne.n	8008316 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0302 	and.w	r3, r3, #2
 8008346:	2b00      	cmp	r3, #0
 8008348:	d010      	beq.n	800836c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	68da      	ldr	r2, [r3, #12]
 800834e:	4b14      	ldr	r3, [pc, #80]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	f003 030f 	and.w	r3, r3, #15
 8008356:	429a      	cmp	r2, r3
 8008358:	d208      	bcs.n	800836c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800835a:	4b11      	ldr	r3, [pc, #68]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	f023 020f 	bic.w	r2, r3, #15
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	490e      	ldr	r1, [pc, #56]	; (80083a0 <HAL_RCC_ClockConfig+0x244>)
 8008368:	4313      	orrs	r3, r2
 800836a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800836c:	4b0b      	ldr	r3, [pc, #44]	; (800839c <HAL_RCC_ClockConfig+0x240>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 030f 	and.w	r3, r3, #15
 8008374:	683a      	ldr	r2, [r7, #0]
 8008376:	429a      	cmp	r2, r3
 8008378:	d214      	bcs.n	80083a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800837a:	4b08      	ldr	r3, [pc, #32]	; (800839c <HAL_RCC_ClockConfig+0x240>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f023 020f 	bic.w	r2, r3, #15
 8008382:	4906      	ldr	r1, [pc, #24]	; (800839c <HAL_RCC_ClockConfig+0x240>)
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	4313      	orrs	r3, r2
 8008388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800838a:	4b04      	ldr	r3, [pc, #16]	; (800839c <HAL_RCC_ClockConfig+0x240>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 030f 	and.w	r3, r3, #15
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	429a      	cmp	r2, r3
 8008396:	d005      	beq.n	80083a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e086      	b.n	80084aa <HAL_RCC_ClockConfig+0x34e>
 800839c:	52002000 	.word	0x52002000
 80083a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0304 	and.w	r3, r3, #4
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d010      	beq.n	80083d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	691a      	ldr	r2, [r3, #16]
 80083b4:	4b3f      	ldr	r3, [pc, #252]	; (80084b4 <HAL_RCC_ClockConfig+0x358>)
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083bc:	429a      	cmp	r2, r3
 80083be:	d208      	bcs.n	80083d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083c0:	4b3c      	ldr	r3, [pc, #240]	; (80084b4 <HAL_RCC_ClockConfig+0x358>)
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	4939      	ldr	r1, [pc, #228]	; (80084b4 <HAL_RCC_ClockConfig+0x358>)
 80083ce:	4313      	orrs	r3, r2
 80083d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 0308 	and.w	r3, r3, #8
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d010      	beq.n	8008400 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	695a      	ldr	r2, [r3, #20]
 80083e2:	4b34      	ldr	r3, [pc, #208]	; (80084b4 <HAL_RCC_ClockConfig+0x358>)
 80083e4:	69db      	ldr	r3, [r3, #28]
 80083e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d208      	bcs.n	8008400 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80083ee:	4b31      	ldr	r3, [pc, #196]	; (80084b4 <HAL_RCC_ClockConfig+0x358>)
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	492e      	ldr	r1, [pc, #184]	; (80084b4 <HAL_RCC_ClockConfig+0x358>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0310 	and.w	r3, r3, #16
 8008408:	2b00      	cmp	r3, #0
 800840a:	d010      	beq.n	800842e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	699a      	ldr	r2, [r3, #24]
 8008410:	4b28      	ldr	r3, [pc, #160]	; (80084b4 <HAL_RCC_ClockConfig+0x358>)
 8008412:	69db      	ldr	r3, [r3, #28]
 8008414:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008418:	429a      	cmp	r2, r3
 800841a:	d208      	bcs.n	800842e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800841c:	4b25      	ldr	r3, [pc, #148]	; (80084b4 <HAL_RCC_ClockConfig+0x358>)
 800841e:	69db      	ldr	r3, [r3, #28]
 8008420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	4922      	ldr	r1, [pc, #136]	; (80084b4 <HAL_RCC_ClockConfig+0x358>)
 800842a:	4313      	orrs	r3, r2
 800842c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0320 	and.w	r3, r3, #32
 8008436:	2b00      	cmp	r3, #0
 8008438:	d010      	beq.n	800845c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	69da      	ldr	r2, [r3, #28]
 800843e:	4b1d      	ldr	r3, [pc, #116]	; (80084b4 <HAL_RCC_ClockConfig+0x358>)
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008446:	429a      	cmp	r2, r3
 8008448:	d208      	bcs.n	800845c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800844a:	4b1a      	ldr	r3, [pc, #104]	; (80084b4 <HAL_RCC_ClockConfig+0x358>)
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	4917      	ldr	r1, [pc, #92]	; (80084b4 <HAL_RCC_ClockConfig+0x358>)
 8008458:	4313      	orrs	r3, r2
 800845a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800845c:	f000 f834 	bl	80084c8 <HAL_RCC_GetSysClockFreq>
 8008460:	4602      	mov	r2, r0
 8008462:	4b14      	ldr	r3, [pc, #80]	; (80084b4 <HAL_RCC_ClockConfig+0x358>)
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	0a1b      	lsrs	r3, r3, #8
 8008468:	f003 030f 	and.w	r3, r3, #15
 800846c:	4912      	ldr	r1, [pc, #72]	; (80084b8 <HAL_RCC_ClockConfig+0x35c>)
 800846e:	5ccb      	ldrb	r3, [r1, r3]
 8008470:	f003 031f 	and.w	r3, r3, #31
 8008474:	fa22 f303 	lsr.w	r3, r2, r3
 8008478:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800847a:	4b0e      	ldr	r3, [pc, #56]	; (80084b4 <HAL_RCC_ClockConfig+0x358>)
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	f003 030f 	and.w	r3, r3, #15
 8008482:	4a0d      	ldr	r2, [pc, #52]	; (80084b8 <HAL_RCC_ClockConfig+0x35c>)
 8008484:	5cd3      	ldrb	r3, [r2, r3]
 8008486:	f003 031f 	and.w	r3, r3, #31
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	fa22 f303 	lsr.w	r3, r2, r3
 8008490:	4a0a      	ldr	r2, [pc, #40]	; (80084bc <HAL_RCC_ClockConfig+0x360>)
 8008492:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008494:	4a0a      	ldr	r2, [pc, #40]	; (80084c0 <HAL_RCC_ClockConfig+0x364>)
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800849a:	4b0a      	ldr	r3, [pc, #40]	; (80084c4 <HAL_RCC_ClockConfig+0x368>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fb fdfc 	bl	800409c <HAL_InitTick>
 80084a4:	4603      	mov	r3, r0
 80084a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3718      	adds	r7, #24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	58024400 	.word	0x58024400
 80084b8:	0800e614 	.word	0x0800e614
 80084bc:	24000004 	.word	0x24000004
 80084c0:	24000000 	.word	0x24000000
 80084c4:	24000008 	.word	0x24000008

080084c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b089      	sub	sp, #36	; 0x24
 80084cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80084ce:	4bb3      	ldr	r3, [pc, #716]	; (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084d6:	2b18      	cmp	r3, #24
 80084d8:	f200 8155 	bhi.w	8008786 <HAL_RCC_GetSysClockFreq+0x2be>
 80084dc:	a201      	add	r2, pc, #4	; (adr r2, 80084e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80084de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e2:	bf00      	nop
 80084e4:	08008549 	.word	0x08008549
 80084e8:	08008787 	.word	0x08008787
 80084ec:	08008787 	.word	0x08008787
 80084f0:	08008787 	.word	0x08008787
 80084f4:	08008787 	.word	0x08008787
 80084f8:	08008787 	.word	0x08008787
 80084fc:	08008787 	.word	0x08008787
 8008500:	08008787 	.word	0x08008787
 8008504:	0800856f 	.word	0x0800856f
 8008508:	08008787 	.word	0x08008787
 800850c:	08008787 	.word	0x08008787
 8008510:	08008787 	.word	0x08008787
 8008514:	08008787 	.word	0x08008787
 8008518:	08008787 	.word	0x08008787
 800851c:	08008787 	.word	0x08008787
 8008520:	08008787 	.word	0x08008787
 8008524:	08008575 	.word	0x08008575
 8008528:	08008787 	.word	0x08008787
 800852c:	08008787 	.word	0x08008787
 8008530:	08008787 	.word	0x08008787
 8008534:	08008787 	.word	0x08008787
 8008538:	08008787 	.word	0x08008787
 800853c:	08008787 	.word	0x08008787
 8008540:	08008787 	.word	0x08008787
 8008544:	0800857b 	.word	0x0800857b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008548:	4b94      	ldr	r3, [pc, #592]	; (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0320 	and.w	r3, r3, #32
 8008550:	2b00      	cmp	r3, #0
 8008552:	d009      	beq.n	8008568 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008554:	4b91      	ldr	r3, [pc, #580]	; (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	08db      	lsrs	r3, r3, #3
 800855a:	f003 0303 	and.w	r3, r3, #3
 800855e:	4a90      	ldr	r2, [pc, #576]	; (80087a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008560:	fa22 f303 	lsr.w	r3, r2, r3
 8008564:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008566:	e111      	b.n	800878c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008568:	4b8d      	ldr	r3, [pc, #564]	; (80087a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800856a:	61bb      	str	r3, [r7, #24]
      break;
 800856c:	e10e      	b.n	800878c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800856e:	4b8d      	ldr	r3, [pc, #564]	; (80087a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008570:	61bb      	str	r3, [r7, #24]
      break;
 8008572:	e10b      	b.n	800878c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008574:	4b8c      	ldr	r3, [pc, #560]	; (80087a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008576:	61bb      	str	r3, [r7, #24]
      break;
 8008578:	e108      	b.n	800878c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800857a:	4b88      	ldr	r3, [pc, #544]	; (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800857c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857e:	f003 0303 	and.w	r3, r3, #3
 8008582:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008584:	4b85      	ldr	r3, [pc, #532]	; (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008588:	091b      	lsrs	r3, r3, #4
 800858a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800858e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008590:	4b82      	ldr	r3, [pc, #520]	; (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800859a:	4b80      	ldr	r3, [pc, #512]	; (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800859c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800859e:	08db      	lsrs	r3, r3, #3
 80085a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	fb02 f303 	mul.w	r3, r2, r3
 80085aa:	ee07 3a90 	vmov	s15, r3
 80085ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 80e1 	beq.w	8008780 <HAL_RCC_GetSysClockFreq+0x2b8>
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	f000 8083 	beq.w	80086cc <HAL_RCC_GetSysClockFreq+0x204>
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	f200 80a1 	bhi.w	8008710 <HAL_RCC_GetSysClockFreq+0x248>
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d003      	beq.n	80085dc <HAL_RCC_GetSysClockFreq+0x114>
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d056      	beq.n	8008688 <HAL_RCC_GetSysClockFreq+0x1c0>
 80085da:	e099      	b.n	8008710 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085dc:	4b6f      	ldr	r3, [pc, #444]	; (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0320 	and.w	r3, r3, #32
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d02d      	beq.n	8008644 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085e8:	4b6c      	ldr	r3, [pc, #432]	; (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	08db      	lsrs	r3, r3, #3
 80085ee:	f003 0303 	and.w	r3, r3, #3
 80085f2:	4a6b      	ldr	r2, [pc, #428]	; (80087a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80085f4:	fa22 f303 	lsr.w	r3, r2, r3
 80085f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	ee07 3a90 	vmov	s15, r3
 8008600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	ee07 3a90 	vmov	s15, r3
 800860a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800860e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008612:	4b62      	ldr	r3, [pc, #392]	; (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800861a:	ee07 3a90 	vmov	s15, r3
 800861e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008622:	ed97 6a02 	vldr	s12, [r7, #8]
 8008626:	eddf 5a61 	vldr	s11, [pc, #388]	; 80087ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800862a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800862e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800863a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800863e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008642:	e087      	b.n	8008754 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	ee07 3a90 	vmov	s15, r3
 800864a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80087b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008656:	4b51      	ldr	r3, [pc, #324]	; (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800865e:	ee07 3a90 	vmov	s15, r3
 8008662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008666:	ed97 6a02 	vldr	s12, [r7, #8]
 800866a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80087ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800866e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800867a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800867e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008682:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008686:	e065      	b.n	8008754 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	ee07 3a90 	vmov	s15, r3
 800868e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008692:	eddf 6a48 	vldr	s13, [pc, #288]	; 80087b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800869a:	4b40      	ldr	r3, [pc, #256]	; (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800869c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086a2:	ee07 3a90 	vmov	s15, r3
 80086a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80086ae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80087ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80086b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80086ca:	e043      	b.n	8008754 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	ee07 3a90 	vmov	s15, r3
 80086d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80087b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80086da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086de:	4b2f      	ldr	r3, [pc, #188]	; (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086e6:	ee07 3a90 	vmov	s15, r3
 80086ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80086f2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80087ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80086f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800870a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800870e:	e021      	b.n	8008754 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	ee07 3a90 	vmov	s15, r3
 8008716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800871a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80087b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800871e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008722:	4b1e      	ldr	r3, [pc, #120]	; (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800872a:	ee07 3a90 	vmov	s15, r3
 800872e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008732:	ed97 6a02 	vldr	s12, [r7, #8]
 8008736:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80087ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800873a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800873e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800874a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800874e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008752:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008754:	4b11      	ldr	r3, [pc, #68]	; (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008758:	0a5b      	lsrs	r3, r3, #9
 800875a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800875e:	3301      	adds	r3, #1
 8008760:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	ee07 3a90 	vmov	s15, r3
 8008768:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800876c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008778:	ee17 3a90 	vmov	r3, s15
 800877c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800877e:	e005      	b.n	800878c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008780:	2300      	movs	r3, #0
 8008782:	61bb      	str	r3, [r7, #24]
      break;
 8008784:	e002      	b.n	800878c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008786:	4b07      	ldr	r3, [pc, #28]	; (80087a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008788:	61bb      	str	r3, [r7, #24]
      break;
 800878a:	bf00      	nop
  }

  return sysclockfreq;
 800878c:	69bb      	ldr	r3, [r7, #24]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3724      	adds	r7, #36	; 0x24
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	58024400 	.word	0x58024400
 80087a0:	03d09000 	.word	0x03d09000
 80087a4:	003d0900 	.word	0x003d0900
 80087a8:	007a1200 	.word	0x007a1200
 80087ac:	46000000 	.word	0x46000000
 80087b0:	4c742400 	.word	0x4c742400
 80087b4:	4a742400 	.word	0x4a742400
 80087b8:	4af42400 	.word	0x4af42400

080087bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80087c2:	f7ff fe81 	bl	80084c8 <HAL_RCC_GetSysClockFreq>
 80087c6:	4602      	mov	r2, r0
 80087c8:	4b10      	ldr	r3, [pc, #64]	; (800880c <HAL_RCC_GetHCLKFreq+0x50>)
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	0a1b      	lsrs	r3, r3, #8
 80087ce:	f003 030f 	and.w	r3, r3, #15
 80087d2:	490f      	ldr	r1, [pc, #60]	; (8008810 <HAL_RCC_GetHCLKFreq+0x54>)
 80087d4:	5ccb      	ldrb	r3, [r1, r3]
 80087d6:	f003 031f 	and.w	r3, r3, #31
 80087da:	fa22 f303 	lsr.w	r3, r2, r3
 80087de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80087e0:	4b0a      	ldr	r3, [pc, #40]	; (800880c <HAL_RCC_GetHCLKFreq+0x50>)
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	f003 030f 	and.w	r3, r3, #15
 80087e8:	4a09      	ldr	r2, [pc, #36]	; (8008810 <HAL_RCC_GetHCLKFreq+0x54>)
 80087ea:	5cd3      	ldrb	r3, [r2, r3]
 80087ec:	f003 031f 	and.w	r3, r3, #31
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	fa22 f303 	lsr.w	r3, r2, r3
 80087f6:	4a07      	ldr	r2, [pc, #28]	; (8008814 <HAL_RCC_GetHCLKFreq+0x58>)
 80087f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80087fa:	4a07      	ldr	r2, [pc, #28]	; (8008818 <HAL_RCC_GetHCLKFreq+0x5c>)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008800:	4b04      	ldr	r3, [pc, #16]	; (8008814 <HAL_RCC_GetHCLKFreq+0x58>)
 8008802:	681b      	ldr	r3, [r3, #0]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	58024400 	.word	0x58024400
 8008810:	0800e614 	.word	0x0800e614
 8008814:	24000004 	.word	0x24000004
 8008818:	24000000 	.word	0x24000000

0800881c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008820:	f7ff ffcc 	bl	80087bc <HAL_RCC_GetHCLKFreq>
 8008824:	4602      	mov	r2, r0
 8008826:	4b06      	ldr	r3, [pc, #24]	; (8008840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	091b      	lsrs	r3, r3, #4
 800882c:	f003 0307 	and.w	r3, r3, #7
 8008830:	4904      	ldr	r1, [pc, #16]	; (8008844 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008832:	5ccb      	ldrb	r3, [r1, r3]
 8008834:	f003 031f 	and.w	r3, r3, #31
 8008838:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800883c:	4618      	mov	r0, r3
 800883e:	bd80      	pop	{r7, pc}
 8008840:	58024400 	.word	0x58024400
 8008844:	0800e614 	.word	0x0800e614

08008848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800884c:	f7ff ffb6 	bl	80087bc <HAL_RCC_GetHCLKFreq>
 8008850:	4602      	mov	r2, r0
 8008852:	4b06      	ldr	r3, [pc, #24]	; (800886c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	0a1b      	lsrs	r3, r3, #8
 8008858:	f003 0307 	and.w	r3, r3, #7
 800885c:	4904      	ldr	r1, [pc, #16]	; (8008870 <HAL_RCC_GetPCLK2Freq+0x28>)
 800885e:	5ccb      	ldrb	r3, [r1, r3]
 8008860:	f003 031f 	and.w	r3, r3, #31
 8008864:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008868:	4618      	mov	r0, r3
 800886a:	bd80      	pop	{r7, pc}
 800886c:	58024400 	.word	0x58024400
 8008870:	0800e614 	.word	0x0800e614

08008874 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008878:	b0c6      	sub	sp, #280	; 0x118
 800887a:	af00      	add	r7, sp, #0
 800887c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008880:	2300      	movs	r3, #0
 8008882:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008886:	2300      	movs	r3, #0
 8008888:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800888c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008894:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008898:	2500      	movs	r5, #0
 800889a:	ea54 0305 	orrs.w	r3, r4, r5
 800889e:	d049      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80088a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088aa:	d02f      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80088ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088b0:	d828      	bhi.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80088b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088b6:	d01a      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80088b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088bc:	d822      	bhi.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d003      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80088c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088c6:	d007      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80088c8:	e01c      	b.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088ca:	4bab      	ldr	r3, [pc, #684]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ce:	4aaa      	ldr	r2, [pc, #680]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80088d6:	e01a      	b.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088dc:	3308      	adds	r3, #8
 80088de:	2102      	movs	r1, #2
 80088e0:	4618      	mov	r0, r3
 80088e2:	f001 fc25 	bl	800a130 <RCCEx_PLL2_Config>
 80088e6:	4603      	mov	r3, r0
 80088e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80088ec:	e00f      	b.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088f2:	3328      	adds	r3, #40	; 0x28
 80088f4:	2102      	movs	r1, #2
 80088f6:	4618      	mov	r0, r3
 80088f8:	f001 fccc 	bl	800a294 <RCCEx_PLL3_Config>
 80088fc:	4603      	mov	r3, r0
 80088fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008902:	e004      	b.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800890a:	e000      	b.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800890c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800890e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10a      	bne.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008916:	4b98      	ldr	r3, [pc, #608]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800891a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800891e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008924:	4a94      	ldr	r2, [pc, #592]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008926:	430b      	orrs	r3, r1
 8008928:	6513      	str	r3, [r2, #80]	; 0x50
 800892a:	e003      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800892c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008930:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008940:	f04f 0900 	mov.w	r9, #0
 8008944:	ea58 0309 	orrs.w	r3, r8, r9
 8008948:	d047      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800894a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800894e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008950:	2b04      	cmp	r3, #4
 8008952:	d82a      	bhi.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008954:	a201      	add	r2, pc, #4	; (adr r2, 800895c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895a:	bf00      	nop
 800895c:	08008971 	.word	0x08008971
 8008960:	0800897f 	.word	0x0800897f
 8008964:	08008995 	.word	0x08008995
 8008968:	080089b3 	.word	0x080089b3
 800896c:	080089b3 	.word	0x080089b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008970:	4b81      	ldr	r3, [pc, #516]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008974:	4a80      	ldr	r2, [pc, #512]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800897a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800897c:	e01a      	b.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800897e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008982:	3308      	adds	r3, #8
 8008984:	2100      	movs	r1, #0
 8008986:	4618      	mov	r0, r3
 8008988:	f001 fbd2 	bl	800a130 <RCCEx_PLL2_Config>
 800898c:	4603      	mov	r3, r0
 800898e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008992:	e00f      	b.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008998:	3328      	adds	r3, #40	; 0x28
 800899a:	2100      	movs	r1, #0
 800899c:	4618      	mov	r0, r3
 800899e:	f001 fc79 	bl	800a294 <RCCEx_PLL3_Config>
 80089a2:	4603      	mov	r3, r0
 80089a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80089a8:	e004      	b.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80089b0:	e000      	b.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80089b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10a      	bne.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80089bc:	4b6e      	ldr	r3, [pc, #440]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089c0:	f023 0107 	bic.w	r1, r3, #7
 80089c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ca:	4a6b      	ldr	r2, [pc, #428]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089cc:	430b      	orrs	r3, r1
 80089ce:	6513      	str	r3, [r2, #80]	; 0x50
 80089d0:	e003      	b.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80089d6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80089da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80089e6:	f04f 0b00 	mov.w	fp, #0
 80089ea:	ea5a 030b 	orrs.w	r3, sl, fp
 80089ee:	d05b      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80089f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80089f8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80089fc:	d03b      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80089fe:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008a02:	d834      	bhi.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008a04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a08:	d037      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008a0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a0e:	d82e      	bhi.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008a10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a14:	d033      	beq.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008a16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a1a:	d828      	bhi.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a20:	d01a      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a26:	d822      	bhi.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d003      	beq.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008a2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a30:	d007      	beq.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008a32:	e01c      	b.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a34:	4b50      	ldr	r3, [pc, #320]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a38:	4a4f      	ldr	r2, [pc, #316]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a40:	e01e      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a46:	3308      	adds	r3, #8
 8008a48:	2100      	movs	r1, #0
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f001 fb70 	bl	800a130 <RCCEx_PLL2_Config>
 8008a50:	4603      	mov	r3, r0
 8008a52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008a56:	e013      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a5c:	3328      	adds	r3, #40	; 0x28
 8008a5e:	2100      	movs	r1, #0
 8008a60:	4618      	mov	r0, r3
 8008a62:	f001 fc17 	bl	800a294 <RCCEx_PLL3_Config>
 8008a66:	4603      	mov	r3, r0
 8008a68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a6c:	e008      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008a74:	e004      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008a76:	bf00      	nop
 8008a78:	e002      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008a7a:	bf00      	nop
 8008a7c:	e000      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10b      	bne.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008a88:	4b3b      	ldr	r3, [pc, #236]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a8c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008a98:	4a37      	ldr	r2, [pc, #220]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a9a:	430b      	orrs	r3, r1
 8008a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8008a9e:	e003      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008aa4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008ab4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008abe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	d05d      	beq.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008acc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008ad0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008ad4:	d03b      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008ad6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008ada:	d834      	bhi.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008adc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ae0:	d037      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008ae2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ae6:	d82e      	bhi.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008ae8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008aec:	d033      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008aee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008af2:	d828      	bhi.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008af4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008af8:	d01a      	beq.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008afa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008afe:	d822      	bhi.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d003      	beq.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b08:	d007      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008b0a:	e01c      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b0c:	4b1a      	ldr	r3, [pc, #104]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b10:	4a19      	ldr	r2, [pc, #100]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b18:	e01e      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b1e:	3308      	adds	r3, #8
 8008b20:	2100      	movs	r1, #0
 8008b22:	4618      	mov	r0, r3
 8008b24:	f001 fb04 	bl	800a130 <RCCEx_PLL2_Config>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008b2e:	e013      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b34:	3328      	adds	r3, #40	; 0x28
 8008b36:	2100      	movs	r1, #0
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f001 fbab 	bl	800a294 <RCCEx_PLL3_Config>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b44:	e008      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008b4c:	e004      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008b4e:	bf00      	nop
 8008b50:	e002      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008b52:	bf00      	nop
 8008b54:	e000      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10d      	bne.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008b60:	4b05      	ldr	r3, [pc, #20]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b64:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008b70:	4a01      	ldr	r2, [pc, #4]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b72:	430b      	orrs	r3, r1
 8008b74:	6593      	str	r3, [r2, #88]	; 0x58
 8008b76:	e005      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008b78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008b90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008b94:	2300      	movs	r3, #0
 8008b96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008b9a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	d03a      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008baa:	2b30      	cmp	r3, #48	; 0x30
 8008bac:	d01f      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008bae:	2b30      	cmp	r3, #48	; 0x30
 8008bb0:	d819      	bhi.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008bb2:	2b20      	cmp	r3, #32
 8008bb4:	d00c      	beq.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008bb6:	2b20      	cmp	r3, #32
 8008bb8:	d815      	bhi.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d019      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008bbe:	2b10      	cmp	r3, #16
 8008bc0:	d111      	bne.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bc2:	4baa      	ldr	r3, [pc, #680]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc6:	4aa9      	ldr	r2, [pc, #676]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008bce:	e011      	b.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bd4:	3308      	adds	r3, #8
 8008bd6:	2102      	movs	r1, #2
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f001 faa9 	bl	800a130 <RCCEx_PLL2_Config>
 8008bde:	4603      	mov	r3, r0
 8008be0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008be4:	e006      	b.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008bec:	e002      	b.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008bee:	bf00      	nop
 8008bf0:	e000      	b.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bf4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10a      	bne.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008bfc:	4b9b      	ldr	r3, [pc, #620]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c00:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c0a:	4a98      	ldr	r2, [pc, #608]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c0c:	430b      	orrs	r3, r1
 8008c0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008c10:	e003      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c16:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008c26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008c30:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008c34:	460b      	mov	r3, r1
 8008c36:	4313      	orrs	r3, r2
 8008c38:	d051      	beq.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c44:	d035      	beq.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8008c46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c4a:	d82e      	bhi.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008c4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c50:	d031      	beq.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8008c52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c56:	d828      	bhi.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c5c:	d01a      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c62:	d822      	bhi.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d003      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c6c:	d007      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008c6e:	e01c      	b.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c70:	4b7e      	ldr	r3, [pc, #504]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c74:	4a7d      	ldr	r2, [pc, #500]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008c7c:	e01c      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c82:	3308      	adds	r3, #8
 8008c84:	2100      	movs	r1, #0
 8008c86:	4618      	mov	r0, r3
 8008c88:	f001 fa52 	bl	800a130 <RCCEx_PLL2_Config>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008c92:	e011      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c98:	3328      	adds	r3, #40	; 0x28
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f001 faf9 	bl	800a294 <RCCEx_PLL3_Config>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008ca8:	e006      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008cb0:	e002      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008cb2:	bf00      	nop
 8008cb4:	e000      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008cb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10a      	bne.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008cc0:	4b6a      	ldr	r3, [pc, #424]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cce:	4a67      	ldr	r2, [pc, #412]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008cd0:	430b      	orrs	r3, r1
 8008cd2:	6513      	str	r3, [r2, #80]	; 0x50
 8008cd4:	e003      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008cda:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008cea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008cee:	2300      	movs	r3, #0
 8008cf0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008cf4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	d053      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d08:	d033      	beq.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8008d0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d0e:	d82c      	bhi.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008d10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d14:	d02f      	beq.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8008d16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d1a:	d826      	bhi.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008d1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d20:	d02b      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008d22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d26:	d820      	bhi.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008d28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d2c:	d012      	beq.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8008d2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d32:	d81a      	bhi.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d022      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d3c:	d115      	bne.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d42:	3308      	adds	r3, #8
 8008d44:	2101      	movs	r1, #1
 8008d46:	4618      	mov	r0, r3
 8008d48:	f001 f9f2 	bl	800a130 <RCCEx_PLL2_Config>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008d52:	e015      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d58:	3328      	adds	r3, #40	; 0x28
 8008d5a:	2101      	movs	r1, #1
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f001 fa99 	bl	800a294 <RCCEx_PLL3_Config>
 8008d62:	4603      	mov	r3, r0
 8008d64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008d68:	e00a      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008d70:	e006      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008d72:	bf00      	nop
 8008d74:	e004      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008d76:	bf00      	nop
 8008d78:	e002      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008d7a:	bf00      	nop
 8008d7c:	e000      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008d7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10a      	bne.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008d88:	4b38      	ldr	r3, [pc, #224]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d8c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d96:	4a35      	ldr	r2, [pc, #212]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d98:	430b      	orrs	r3, r1
 8008d9a:	6513      	str	r3, [r2, #80]	; 0x50
 8008d9c:	e003      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008da2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dae:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008db2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008db6:	2300      	movs	r3, #0
 8008db8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008dbc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	d058      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008dce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dd2:	d033      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dd8:	d82c      	bhi.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dde:	d02f      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008de4:	d826      	bhi.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008de6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008dea:	d02b      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008dec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008df0:	d820      	bhi.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008df6:	d012      	beq.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8008df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dfc:	d81a      	bhi.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d022      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008e02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e06:	d115      	bne.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e0c:	3308      	adds	r3, #8
 8008e0e:	2101      	movs	r1, #1
 8008e10:	4618      	mov	r0, r3
 8008e12:	f001 f98d 	bl	800a130 <RCCEx_PLL2_Config>
 8008e16:	4603      	mov	r3, r0
 8008e18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008e1c:	e015      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e22:	3328      	adds	r3, #40	; 0x28
 8008e24:	2101      	movs	r1, #1
 8008e26:	4618      	mov	r0, r3
 8008e28:	f001 fa34 	bl	800a294 <RCCEx_PLL3_Config>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008e32:	e00a      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008e3a:	e006      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008e3c:	bf00      	nop
 8008e3e:	e004      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008e40:	bf00      	nop
 8008e42:	e002      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008e44:	bf00      	nop
 8008e46:	e000      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10e      	bne.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008e52:	4b06      	ldr	r3, [pc, #24]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e56:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008e62:	4a02      	ldr	r2, [pc, #8]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e64:	430b      	orrs	r3, r1
 8008e66:	6593      	str	r3, [r2, #88]	; 0x58
 8008e68:	e006      	b.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008e6a:	bf00      	nop
 8008e6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e80:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008e84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008e8e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008e92:	460b      	mov	r3, r1
 8008e94:	4313      	orrs	r3, r2
 8008e96:	d037      	beq.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ea2:	d00e      	beq.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ea8:	d816      	bhi.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d018      	beq.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eb2:	d111      	bne.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eb4:	4bc4      	ldr	r3, [pc, #784]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb8:	4ac3      	ldr	r2, [pc, #780]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ebe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008ec0:	e00f      	b.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ec6:	3308      	adds	r3, #8
 8008ec8:	2101      	movs	r1, #1
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f001 f930 	bl	800a130 <RCCEx_PLL2_Config>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008ed6:	e004      	b.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008ede:	e000      	b.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008ee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ee2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d10a      	bne.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008eea:	4bb7      	ldr	r3, [pc, #732]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eee:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ef8:	4ab3      	ldr	r2, [pc, #716]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008efa:	430b      	orrs	r3, r1
 8008efc:	6513      	str	r3, [r2, #80]	; 0x50
 8008efe:	e003      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f10:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008f14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f18:	2300      	movs	r3, #0
 8008f1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f1e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008f22:	460b      	mov	r3, r1
 8008f24:	4313      	orrs	r3, r2
 8008f26:	d039      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d81c      	bhi.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008f32:	a201      	add	r2, pc, #4	; (adr r2, 8008f38 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f38:	08008f75 	.word	0x08008f75
 8008f3c:	08008f49 	.word	0x08008f49
 8008f40:	08008f57 	.word	0x08008f57
 8008f44:	08008f75 	.word	0x08008f75
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f48:	4b9f      	ldr	r3, [pc, #636]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4c:	4a9e      	ldr	r2, [pc, #632]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008f54:	e00f      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f5a:	3308      	adds	r3, #8
 8008f5c:	2102      	movs	r1, #2
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f001 f8e6 	bl	800a130 <RCCEx_PLL2_Config>
 8008f64:	4603      	mov	r3, r0
 8008f66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008f6a:	e004      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008f72:	e000      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f76:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10a      	bne.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008f7e:	4b92      	ldr	r3, [pc, #584]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f82:	f023 0103 	bic.w	r1, r3, #3
 8008f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f8c:	4a8e      	ldr	r2, [pc, #568]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f8e:	430b      	orrs	r3, r1
 8008f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f92:	e003      	b.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008fa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008fac:	2300      	movs	r3, #0
 8008fae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008fb2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	f000 8099 	beq.w	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008fbe:	4b83      	ldr	r3, [pc, #524]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a82      	ldr	r2, [pc, #520]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008fca:	f7fb f8b1 	bl	8004130 <HAL_GetTick>
 8008fce:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008fd2:	e00b      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fd4:	f7fb f8ac 	bl	8004130 <HAL_GetTick>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	2b64      	cmp	r3, #100	; 0x64
 8008fe2:	d903      	bls.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008fea:	e005      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008fec:	4b77      	ldr	r3, [pc, #476]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d0ed      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008ff8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d173      	bne.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009000:	4b71      	ldr	r3, [pc, #452]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009002:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009008:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800900c:	4053      	eors	r3, r2
 800900e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009012:	2b00      	cmp	r3, #0
 8009014:	d015      	beq.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009016:	4b6c      	ldr	r3, [pc, #432]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800901a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800901e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009022:	4b69      	ldr	r3, [pc, #420]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009026:	4a68      	ldr	r2, [pc, #416]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800902c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800902e:	4b66      	ldr	r3, [pc, #408]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009032:	4a65      	ldr	r2, [pc, #404]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009038:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800903a:	4a63      	ldr	r2, [pc, #396]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800903c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009040:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009046:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800904a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800904e:	d118      	bne.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009050:	f7fb f86e 	bl	8004130 <HAL_GetTick>
 8009054:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009058:	e00d      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800905a:	f7fb f869 	bl	8004130 <HAL_GetTick>
 800905e:	4602      	mov	r2, r0
 8009060:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009064:	1ad2      	subs	r2, r2, r3
 8009066:	f241 3388 	movw	r3, #5000	; 0x1388
 800906a:	429a      	cmp	r2, r3
 800906c:	d903      	bls.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8009074:	e005      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009076:	4b54      	ldr	r3, [pc, #336]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800907a:	f003 0302 	and.w	r3, r3, #2
 800907e:	2b00      	cmp	r3, #0
 8009080:	d0eb      	beq.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009082:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009086:	2b00      	cmp	r3, #0
 8009088:	d129      	bne.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800908a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800908e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009096:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800909a:	d10e      	bne.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x846>
 800909c:	4b4a      	ldr	r3, [pc, #296]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80090a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80090ac:	091a      	lsrs	r2, r3, #4
 80090ae:	4b48      	ldr	r3, [pc, #288]	; (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80090b0:	4013      	ands	r3, r2
 80090b2:	4a45      	ldr	r2, [pc, #276]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090b4:	430b      	orrs	r3, r1
 80090b6:	6113      	str	r3, [r2, #16]
 80090b8:	e005      	b.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80090ba:	4b43      	ldr	r3, [pc, #268]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	4a42      	ldr	r2, [pc, #264]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80090c4:	6113      	str	r3, [r2, #16]
 80090c6:	4b40      	ldr	r3, [pc, #256]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090c8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80090ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80090d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090d6:	4a3c      	ldr	r2, [pc, #240]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090d8:	430b      	orrs	r3, r1
 80090da:	6713      	str	r3, [r2, #112]	; 0x70
 80090dc:	e008      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80090de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80090e2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80090e6:	e003      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80090ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80090f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f8:	f002 0301 	and.w	r3, r2, #1
 80090fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009100:	2300      	movs	r3, #0
 8009102:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009106:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800910a:	460b      	mov	r3, r1
 800910c:	4313      	orrs	r3, r2
 800910e:	f000 808f 	beq.w	8009230 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009116:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009118:	2b28      	cmp	r3, #40	; 0x28
 800911a:	d871      	bhi.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800911c:	a201      	add	r2, pc, #4	; (adr r2, 8009124 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800911e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009122:	bf00      	nop
 8009124:	08009209 	.word	0x08009209
 8009128:	08009201 	.word	0x08009201
 800912c:	08009201 	.word	0x08009201
 8009130:	08009201 	.word	0x08009201
 8009134:	08009201 	.word	0x08009201
 8009138:	08009201 	.word	0x08009201
 800913c:	08009201 	.word	0x08009201
 8009140:	08009201 	.word	0x08009201
 8009144:	080091d5 	.word	0x080091d5
 8009148:	08009201 	.word	0x08009201
 800914c:	08009201 	.word	0x08009201
 8009150:	08009201 	.word	0x08009201
 8009154:	08009201 	.word	0x08009201
 8009158:	08009201 	.word	0x08009201
 800915c:	08009201 	.word	0x08009201
 8009160:	08009201 	.word	0x08009201
 8009164:	080091eb 	.word	0x080091eb
 8009168:	08009201 	.word	0x08009201
 800916c:	08009201 	.word	0x08009201
 8009170:	08009201 	.word	0x08009201
 8009174:	08009201 	.word	0x08009201
 8009178:	08009201 	.word	0x08009201
 800917c:	08009201 	.word	0x08009201
 8009180:	08009201 	.word	0x08009201
 8009184:	08009209 	.word	0x08009209
 8009188:	08009201 	.word	0x08009201
 800918c:	08009201 	.word	0x08009201
 8009190:	08009201 	.word	0x08009201
 8009194:	08009201 	.word	0x08009201
 8009198:	08009201 	.word	0x08009201
 800919c:	08009201 	.word	0x08009201
 80091a0:	08009201 	.word	0x08009201
 80091a4:	08009209 	.word	0x08009209
 80091a8:	08009201 	.word	0x08009201
 80091ac:	08009201 	.word	0x08009201
 80091b0:	08009201 	.word	0x08009201
 80091b4:	08009201 	.word	0x08009201
 80091b8:	08009201 	.word	0x08009201
 80091bc:	08009201 	.word	0x08009201
 80091c0:	08009201 	.word	0x08009201
 80091c4:	08009209 	.word	0x08009209
 80091c8:	58024400 	.word	0x58024400
 80091cc:	58024800 	.word	0x58024800
 80091d0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091d8:	3308      	adds	r3, #8
 80091da:	2101      	movs	r1, #1
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 ffa7 	bl	800a130 <RCCEx_PLL2_Config>
 80091e2:	4603      	mov	r3, r0
 80091e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80091e8:	e00f      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091ee:	3328      	adds	r3, #40	; 0x28
 80091f0:	2101      	movs	r1, #1
 80091f2:	4618      	mov	r0, r3
 80091f4:	f001 f84e 	bl	800a294 <RCCEx_PLL3_Config>
 80091f8:	4603      	mov	r3, r0
 80091fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80091fe:	e004      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009206:	e000      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800920a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800920e:	2b00      	cmp	r3, #0
 8009210:	d10a      	bne.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009212:	4bbf      	ldr	r3, [pc, #764]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009216:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800921a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800921e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009220:	4abb      	ldr	r2, [pc, #748]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009222:	430b      	orrs	r3, r1
 8009224:	6553      	str	r3, [r2, #84]	; 0x54
 8009226:	e003      	b.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009228:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800922c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009238:	f002 0302 	and.w	r3, r2, #2
 800923c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009240:	2300      	movs	r3, #0
 8009242:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009246:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800924a:	460b      	mov	r3, r1
 800924c:	4313      	orrs	r3, r2
 800924e:	d041      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009256:	2b05      	cmp	r3, #5
 8009258:	d824      	bhi.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800925a:	a201      	add	r2, pc, #4	; (adr r2, 8009260 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800925c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009260:	080092ad 	.word	0x080092ad
 8009264:	08009279 	.word	0x08009279
 8009268:	0800928f 	.word	0x0800928f
 800926c:	080092ad 	.word	0x080092ad
 8009270:	080092ad 	.word	0x080092ad
 8009274:	080092ad 	.word	0x080092ad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800927c:	3308      	adds	r3, #8
 800927e:	2101      	movs	r1, #1
 8009280:	4618      	mov	r0, r3
 8009282:	f000 ff55 	bl	800a130 <RCCEx_PLL2_Config>
 8009286:	4603      	mov	r3, r0
 8009288:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800928c:	e00f      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800928e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009292:	3328      	adds	r3, #40	; 0x28
 8009294:	2101      	movs	r1, #1
 8009296:	4618      	mov	r0, r3
 8009298:	f000 fffc 	bl	800a294 <RCCEx_PLL3_Config>
 800929c:	4603      	mov	r3, r0
 800929e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80092a2:	e004      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80092aa:	e000      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80092ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10a      	bne.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80092b6:	4b96      	ldr	r3, [pc, #600]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80092b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ba:	f023 0107 	bic.w	r1, r3, #7
 80092be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092c4:	4a92      	ldr	r2, [pc, #584]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80092c6:	430b      	orrs	r3, r1
 80092c8:	6553      	str	r3, [r2, #84]	; 0x54
 80092ca:	e003      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80092d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80092d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092dc:	f002 0304 	and.w	r3, r2, #4
 80092e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80092e4:	2300      	movs	r3, #0
 80092e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092ea:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80092ee:	460b      	mov	r3, r1
 80092f0:	4313      	orrs	r3, r2
 80092f2:	d044      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80092f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092fc:	2b05      	cmp	r3, #5
 80092fe:	d825      	bhi.n	800934c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009300:	a201      	add	r2, pc, #4	; (adr r2, 8009308 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009306:	bf00      	nop
 8009308:	08009355 	.word	0x08009355
 800930c:	08009321 	.word	0x08009321
 8009310:	08009337 	.word	0x08009337
 8009314:	08009355 	.word	0x08009355
 8009318:	08009355 	.word	0x08009355
 800931c:	08009355 	.word	0x08009355
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009324:	3308      	adds	r3, #8
 8009326:	2101      	movs	r1, #1
 8009328:	4618      	mov	r0, r3
 800932a:	f000 ff01 	bl	800a130 <RCCEx_PLL2_Config>
 800932e:	4603      	mov	r3, r0
 8009330:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009334:	e00f      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800933a:	3328      	adds	r3, #40	; 0x28
 800933c:	2101      	movs	r1, #1
 800933e:	4618      	mov	r0, r3
 8009340:	f000 ffa8 	bl	800a294 <RCCEx_PLL3_Config>
 8009344:	4603      	mov	r3, r0
 8009346:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800934a:	e004      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009352:	e000      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009356:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10b      	bne.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800935e:	4b6c      	ldr	r3, [pc, #432]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009362:	f023 0107 	bic.w	r1, r3, #7
 8009366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800936a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800936e:	4a68      	ldr	r2, [pc, #416]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009370:	430b      	orrs	r3, r1
 8009372:	6593      	str	r3, [r2, #88]	; 0x58
 8009374:	e003      	b.n	800937e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009376:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800937a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800937e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009386:	f002 0320 	and.w	r3, r2, #32
 800938a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800938e:	2300      	movs	r3, #0
 8009390:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009394:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009398:	460b      	mov	r3, r1
 800939a:	4313      	orrs	r3, r2
 800939c:	d055      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800939e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093aa:	d033      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80093ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093b0:	d82c      	bhi.n	800940c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80093b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093b6:	d02f      	beq.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80093b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093bc:	d826      	bhi.n	800940c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80093be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093c2:	d02b      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80093c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093c8:	d820      	bhi.n	800940c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80093ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093ce:	d012      	beq.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80093d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093d4:	d81a      	bhi.n	800940c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d022      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80093da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093de:	d115      	bne.n	800940c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093e4:	3308      	adds	r3, #8
 80093e6:	2100      	movs	r1, #0
 80093e8:	4618      	mov	r0, r3
 80093ea:	f000 fea1 	bl	800a130 <RCCEx_PLL2_Config>
 80093ee:	4603      	mov	r3, r0
 80093f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80093f4:	e015      	b.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80093f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093fa:	3328      	adds	r3, #40	; 0x28
 80093fc:	2102      	movs	r1, #2
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 ff48 	bl	800a294 <RCCEx_PLL3_Config>
 8009404:	4603      	mov	r3, r0
 8009406:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800940a:	e00a      	b.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009412:	e006      	b.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009414:	bf00      	nop
 8009416:	e004      	b.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009418:	bf00      	nop
 800941a:	e002      	b.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800941c:	bf00      	nop
 800941e:	e000      	b.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009422:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10b      	bne.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800942a:	4b39      	ldr	r3, [pc, #228]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800942c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800942e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009436:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800943a:	4a35      	ldr	r2, [pc, #212]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800943c:	430b      	orrs	r3, r1
 800943e:	6553      	str	r3, [r2, #84]	; 0x54
 8009440:	e003      	b.n	800944a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009442:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009446:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800944a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009452:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009456:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800945a:	2300      	movs	r3, #0
 800945c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009460:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009464:	460b      	mov	r3, r1
 8009466:	4313      	orrs	r3, r2
 8009468:	d058      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800946a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800946e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009472:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009476:	d033      	beq.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009478:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800947c:	d82c      	bhi.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800947e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009482:	d02f      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009488:	d826      	bhi.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800948a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800948e:	d02b      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009490:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009494:	d820      	bhi.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800949a:	d012      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800949c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094a0:	d81a      	bhi.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d022      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80094a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094aa:	d115      	bne.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094b0:	3308      	adds	r3, #8
 80094b2:	2100      	movs	r1, #0
 80094b4:	4618      	mov	r0, r3
 80094b6:	f000 fe3b 	bl	800a130 <RCCEx_PLL2_Config>
 80094ba:	4603      	mov	r3, r0
 80094bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80094c0:	e015      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80094c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094c6:	3328      	adds	r3, #40	; 0x28
 80094c8:	2102      	movs	r1, #2
 80094ca:	4618      	mov	r0, r3
 80094cc:	f000 fee2 	bl	800a294 <RCCEx_PLL3_Config>
 80094d0:	4603      	mov	r3, r0
 80094d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80094d6:	e00a      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80094de:	e006      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80094e0:	bf00      	nop
 80094e2:	e004      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80094e4:	bf00      	nop
 80094e6:	e002      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80094e8:	bf00      	nop
 80094ea:	e000      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80094ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10e      	bne.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80094f6:	4b06      	ldr	r3, [pc, #24]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80094f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094fa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80094fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009502:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009506:	4a02      	ldr	r2, [pc, #8]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009508:	430b      	orrs	r3, r1
 800950a:	6593      	str	r3, [r2, #88]	; 0x58
 800950c:	e006      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800950e:	bf00      	nop
 8009510:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009514:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009518:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800951c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009524:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009528:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800952c:	2300      	movs	r3, #0
 800952e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009532:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009536:	460b      	mov	r3, r1
 8009538:	4313      	orrs	r3, r2
 800953a:	d055      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800953c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009540:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009544:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009548:	d033      	beq.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800954a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800954e:	d82c      	bhi.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009554:	d02f      	beq.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800955a:	d826      	bhi.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800955c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009560:	d02b      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009562:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009566:	d820      	bhi.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800956c:	d012      	beq.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800956e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009572:	d81a      	bhi.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009574:	2b00      	cmp	r3, #0
 8009576:	d022      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800957c:	d115      	bne.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800957e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009582:	3308      	adds	r3, #8
 8009584:	2100      	movs	r1, #0
 8009586:	4618      	mov	r0, r3
 8009588:	f000 fdd2 	bl	800a130 <RCCEx_PLL2_Config>
 800958c:	4603      	mov	r3, r0
 800958e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009592:	e015      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009598:	3328      	adds	r3, #40	; 0x28
 800959a:	2102      	movs	r1, #2
 800959c:	4618      	mov	r0, r3
 800959e:	f000 fe79 	bl	800a294 <RCCEx_PLL3_Config>
 80095a2:	4603      	mov	r3, r0
 80095a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80095a8:	e00a      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80095b0:	e006      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80095b2:	bf00      	nop
 80095b4:	e004      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80095b6:	bf00      	nop
 80095b8:	e002      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80095ba:	bf00      	nop
 80095bc:	e000      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80095be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10b      	bne.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80095c8:	4ba0      	ldr	r3, [pc, #640]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80095ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095cc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80095d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095d8:	4a9c      	ldr	r2, [pc, #624]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80095da:	430b      	orrs	r3, r1
 80095dc:	6593      	str	r3, [r2, #88]	; 0x58
 80095de:	e003      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80095e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80095e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f0:	f002 0308 	and.w	r3, r2, #8
 80095f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80095f8:	2300      	movs	r3, #0
 80095fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80095fe:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009602:	460b      	mov	r3, r1
 8009604:	4313      	orrs	r3, r2
 8009606:	d01e      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800960c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009614:	d10c      	bne.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800961a:	3328      	adds	r3, #40	; 0x28
 800961c:	2102      	movs	r1, #2
 800961e:	4618      	mov	r0, r3
 8009620:	f000 fe38 	bl	800a294 <RCCEx_PLL3_Config>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d002      	beq.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009630:	4b86      	ldr	r3, [pc, #536]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009634:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800963c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009640:	4a82      	ldr	r2, [pc, #520]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009642:	430b      	orrs	r3, r1
 8009644:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964e:	f002 0310 	and.w	r3, r2, #16
 8009652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009656:	2300      	movs	r3, #0
 8009658:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800965c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009660:	460b      	mov	r3, r1
 8009662:	4313      	orrs	r3, r2
 8009664:	d01e      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800966a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800966e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009672:	d10c      	bne.n	800968e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009678:	3328      	adds	r3, #40	; 0x28
 800967a:	2102      	movs	r1, #2
 800967c:	4618      	mov	r0, r3
 800967e:	f000 fe09 	bl	800a294 <RCCEx_PLL3_Config>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800968e:	4b6f      	ldr	r3, [pc, #444]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009692:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800969a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800969e:	4a6b      	ldr	r2, [pc, #428]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096a0:	430b      	orrs	r3, r1
 80096a2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80096a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80096b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80096b2:	2300      	movs	r3, #0
 80096b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80096b6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80096ba:	460b      	mov	r3, r1
 80096bc:	4313      	orrs	r3, r2
 80096be:	d03e      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80096c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80096c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096cc:	d022      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80096ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096d2:	d81b      	bhi.n	800970c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d003      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80096d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096dc:	d00b      	beq.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80096de:	e015      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096e4:	3308      	adds	r3, #8
 80096e6:	2100      	movs	r1, #0
 80096e8:	4618      	mov	r0, r3
 80096ea:	f000 fd21 	bl	800a130 <RCCEx_PLL2_Config>
 80096ee:	4603      	mov	r3, r0
 80096f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80096f4:	e00f      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096fa:	3328      	adds	r3, #40	; 0x28
 80096fc:	2102      	movs	r1, #2
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 fdc8 	bl	800a294 <RCCEx_PLL3_Config>
 8009704:	4603      	mov	r3, r0
 8009706:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800970a:	e004      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009712:	e000      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009716:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10b      	bne.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800971e:	4b4b      	ldr	r3, [pc, #300]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009722:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800972a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800972e:	4a47      	ldr	r2, [pc, #284]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009730:	430b      	orrs	r3, r1
 8009732:	6593      	str	r3, [r2, #88]	; 0x58
 8009734:	e003      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009736:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800973a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800973e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800974a:	673b      	str	r3, [r7, #112]	; 0x70
 800974c:	2300      	movs	r3, #0
 800974e:	677b      	str	r3, [r7, #116]	; 0x74
 8009750:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009754:	460b      	mov	r3, r1
 8009756:	4313      	orrs	r3, r2
 8009758:	d03b      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800975a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800975e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009762:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009766:	d01f      	beq.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009768:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800976c:	d818      	bhi.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800976e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009772:	d003      	beq.n	800977c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009774:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009778:	d007      	beq.n	800978a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800977a:	e011      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800977c:	4b33      	ldr	r3, [pc, #204]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800977e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009780:	4a32      	ldr	r2, [pc, #200]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009786:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009788:	e00f      	b.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800978a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800978e:	3328      	adds	r3, #40	; 0x28
 8009790:	2101      	movs	r1, #1
 8009792:	4618      	mov	r0, r3
 8009794:	f000 fd7e 	bl	800a294 <RCCEx_PLL3_Config>
 8009798:	4603      	mov	r3, r0
 800979a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800979e:	e004      	b.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80097a6:	e000      	b.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80097a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10b      	bne.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80097b2:	4b26      	ldr	r3, [pc, #152]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80097b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80097ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097c2:	4a22      	ldr	r2, [pc, #136]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80097c4:	430b      	orrs	r3, r1
 80097c6:	6553      	str	r3, [r2, #84]	; 0x54
 80097c8:	e003      	b.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80097ce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80097d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097da:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80097de:	66bb      	str	r3, [r7, #104]	; 0x68
 80097e0:	2300      	movs	r3, #0
 80097e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80097e4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80097e8:	460b      	mov	r3, r1
 80097ea:	4313      	orrs	r3, r2
 80097ec:	d034      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80097ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d003      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80097f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097fc:	d007      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80097fe:	e011      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009800:	4b12      	ldr	r3, [pc, #72]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009804:	4a11      	ldr	r2, [pc, #68]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800980a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800980c:	e00e      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800980e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009812:	3308      	adds	r3, #8
 8009814:	2102      	movs	r1, #2
 8009816:	4618      	mov	r0, r3
 8009818:	f000 fc8a 	bl	800a130 <RCCEx_PLL2_Config>
 800981c:	4603      	mov	r3, r0
 800981e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009822:	e003      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800982a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800982c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10d      	bne.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009834:	4b05      	ldr	r3, [pc, #20]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009838:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800983c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009842:	4a02      	ldr	r2, [pc, #8]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009844:	430b      	orrs	r3, r1
 8009846:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009848:	e006      	b.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800984a:	bf00      	nop
 800984c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009850:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009854:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800985c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009860:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009864:	663b      	str	r3, [r7, #96]	; 0x60
 8009866:	2300      	movs	r3, #0
 8009868:	667b      	str	r3, [r7, #100]	; 0x64
 800986a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800986e:	460b      	mov	r3, r1
 8009870:	4313      	orrs	r3, r2
 8009872:	d00c      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009878:	3328      	adds	r3, #40	; 0x28
 800987a:	2102      	movs	r1, #2
 800987c:	4618      	mov	r0, r3
 800987e:	f000 fd09 	bl	800a294 <RCCEx_PLL3_Config>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d002      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800988e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009896:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800989a:	65bb      	str	r3, [r7, #88]	; 0x58
 800989c:	2300      	movs	r3, #0
 800989e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098a0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80098a4:	460b      	mov	r3, r1
 80098a6:	4313      	orrs	r3, r2
 80098a8:	d036      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80098aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098b4:	d018      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80098b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098ba:	d811      	bhi.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80098bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098c0:	d014      	beq.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80098c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098c6:	d80b      	bhi.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d011      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80098cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098d0:	d106      	bne.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098d2:	4bb7      	ldr	r3, [pc, #732]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d6:	4ab6      	ldr	r2, [pc, #728]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80098de:	e008      	b.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80098e6:	e004      	b.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80098e8:	bf00      	nop
 80098ea:	e002      	b.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80098ec:	bf00      	nop
 80098ee:	e000      	b.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80098f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d10a      	bne.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80098fa:	4bad      	ldr	r3, [pc, #692]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009908:	4aa9      	ldr	r2, [pc, #676]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800990a:	430b      	orrs	r3, r1
 800990c:	6553      	str	r3, [r2, #84]	; 0x54
 800990e:	e003      	b.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009910:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009914:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009924:	653b      	str	r3, [r7, #80]	; 0x50
 8009926:	2300      	movs	r3, #0
 8009928:	657b      	str	r3, [r7, #84]	; 0x54
 800992a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800992e:	460b      	mov	r3, r1
 8009930:	4313      	orrs	r3, r2
 8009932:	d009      	beq.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009934:	4b9e      	ldr	r3, [pc, #632]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009938:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800993c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009942:	4a9b      	ldr	r2, [pc, #620]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009944:	430b      	orrs	r3, r1
 8009946:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800994c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009950:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009954:	64bb      	str	r3, [r7, #72]	; 0x48
 8009956:	2300      	movs	r3, #0
 8009958:	64fb      	str	r3, [r7, #76]	; 0x4c
 800995a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800995e:	460b      	mov	r3, r1
 8009960:	4313      	orrs	r3, r2
 8009962:	d009      	beq.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009964:	4b92      	ldr	r3, [pc, #584]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009968:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800996c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009972:	4a8f      	ldr	r2, [pc, #572]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009974:	430b      	orrs	r3, r1
 8009976:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009980:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009984:	643b      	str	r3, [r7, #64]	; 0x40
 8009986:	2300      	movs	r3, #0
 8009988:	647b      	str	r3, [r7, #68]	; 0x44
 800998a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800998e:	460b      	mov	r3, r1
 8009990:	4313      	orrs	r3, r2
 8009992:	d00e      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009994:	4b86      	ldr	r3, [pc, #536]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009996:	691b      	ldr	r3, [r3, #16]
 8009998:	4a85      	ldr	r2, [pc, #532]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800999a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800999e:	6113      	str	r3, [r2, #16]
 80099a0:	4b83      	ldr	r3, [pc, #524]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80099a2:	6919      	ldr	r1, [r3, #16]
 80099a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80099ac:	4a80      	ldr	r2, [pc, #512]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80099ae:	430b      	orrs	r3, r1
 80099b0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80099b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ba:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80099be:	63bb      	str	r3, [r7, #56]	; 0x38
 80099c0:	2300      	movs	r3, #0
 80099c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099c4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80099c8:	460b      	mov	r3, r1
 80099ca:	4313      	orrs	r3, r2
 80099cc:	d009      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80099ce:	4b78      	ldr	r3, [pc, #480]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80099d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099d2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80099d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099dc:	4a74      	ldr	r2, [pc, #464]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80099de:	430b      	orrs	r3, r1
 80099e0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80099e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ea:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80099ee:	633b      	str	r3, [r7, #48]	; 0x30
 80099f0:	2300      	movs	r3, #0
 80099f2:	637b      	str	r3, [r7, #52]	; 0x34
 80099f4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80099f8:	460b      	mov	r3, r1
 80099fa:	4313      	orrs	r3, r2
 80099fc:	d00a      	beq.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80099fe:	4b6c      	ldr	r3, [pc, #432]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a02:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a0e:	4a68      	ldr	r2, [pc, #416]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a10:	430b      	orrs	r3, r1
 8009a12:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	62b9      	str	r1, [r7, #40]	; 0x28
 8009a20:	f003 0301 	and.w	r3, r3, #1
 8009a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a26:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	d011      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a34:	3308      	adds	r3, #8
 8009a36:	2100      	movs	r1, #0
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f000 fb79 	bl	800a130 <RCCEx_PLL2_Config>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009a44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d003      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	6239      	str	r1, [r7, #32]
 8009a60:	f003 0302 	and.w	r3, r3, #2
 8009a64:	627b      	str	r3, [r7, #36]	; 0x24
 8009a66:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	d011      	beq.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a74:	3308      	adds	r3, #8
 8009a76:	2101      	movs	r1, #1
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f000 fb59 	bl	800a130 <RCCEx_PLL2_Config>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009a84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d003      	beq.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a90:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	61b9      	str	r1, [r7, #24]
 8009aa0:	f003 0304 	and.w	r3, r3, #4
 8009aa4:	61fb      	str	r3, [r7, #28]
 8009aa6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009aaa:	460b      	mov	r3, r1
 8009aac:	4313      	orrs	r3, r2
 8009aae:	d011      	beq.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ab4:	3308      	adds	r3, #8
 8009ab6:	2102      	movs	r1, #2
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f000 fb39 	bl	800a130 <RCCEx_PLL2_Config>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009ac4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009acc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ad0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009adc:	2100      	movs	r1, #0
 8009ade:	6139      	str	r1, [r7, #16]
 8009ae0:	f003 0308 	and.w	r3, r3, #8
 8009ae4:	617b      	str	r3, [r7, #20]
 8009ae6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009aea:	460b      	mov	r3, r1
 8009aec:	4313      	orrs	r3, r2
 8009aee:	d011      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009af4:	3328      	adds	r3, #40	; 0x28
 8009af6:	2100      	movs	r1, #0
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 fbcb 	bl	800a294 <RCCEx_PLL3_Config>
 8009afe:	4603      	mov	r3, r0
 8009b00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8009b04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d003      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b10:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	60b9      	str	r1, [r7, #8]
 8009b20:	f003 0310 	and.w	r3, r3, #16
 8009b24:	60fb      	str	r3, [r7, #12]
 8009b26:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	d011      	beq.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b34:	3328      	adds	r3, #40	; 0x28
 8009b36:	2101      	movs	r1, #1
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f000 fbab 	bl	800a294 <RCCEx_PLL3_Config>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009b44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d003      	beq.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	6039      	str	r1, [r7, #0]
 8009b60:	f003 0320 	and.w	r3, r3, #32
 8009b64:	607b      	str	r3, [r7, #4]
 8009b66:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	d011      	beq.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b74:	3328      	adds	r3, #40	; 0x28
 8009b76:	2102      	movs	r1, #2
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 fb8b 	bl	800a294 <RCCEx_PLL3_Config>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009b84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d003      	beq.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b90:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8009b94:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d101      	bne.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	e000      	b.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009bae:	bf00      	nop
 8009bb0:	58024400 	.word	0x58024400

08009bb4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009bb8:	f7fe fe00 	bl	80087bc <HAL_RCC_GetHCLKFreq>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	4b06      	ldr	r3, [pc, #24]	; (8009bd8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009bc0:	6a1b      	ldr	r3, [r3, #32]
 8009bc2:	091b      	lsrs	r3, r3, #4
 8009bc4:	f003 0307 	and.w	r3, r3, #7
 8009bc8:	4904      	ldr	r1, [pc, #16]	; (8009bdc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009bca:	5ccb      	ldrb	r3, [r1, r3]
 8009bcc:	f003 031f 	and.w	r3, r3, #31
 8009bd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	58024400 	.word	0x58024400
 8009bdc:	0800e614 	.word	0x0800e614

08009be0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b089      	sub	sp, #36	; 0x24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009be8:	4ba1      	ldr	r3, [pc, #644]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bec:	f003 0303 	and.w	r3, r3, #3
 8009bf0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009bf2:	4b9f      	ldr	r3, [pc, #636]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf6:	0b1b      	lsrs	r3, r3, #12
 8009bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bfc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009bfe:	4b9c      	ldr	r3, [pc, #624]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c02:	091b      	lsrs	r3, r3, #4
 8009c04:	f003 0301 	and.w	r3, r3, #1
 8009c08:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009c0a:	4b99      	ldr	r3, [pc, #612]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c0e:	08db      	lsrs	r3, r3, #3
 8009c10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	fb02 f303 	mul.w	r3, r2, r3
 8009c1a:	ee07 3a90 	vmov	s15, r3
 8009c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f000 8111 	beq.w	8009e50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	f000 8083 	beq.w	8009d3c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	f200 80a1 	bhi.w	8009d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d003      	beq.n	8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d056      	beq.n	8009cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009c4a:	e099      	b.n	8009d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c4c:	4b88      	ldr	r3, [pc, #544]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 0320 	and.w	r3, r3, #32
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d02d      	beq.n	8009cb4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c58:	4b85      	ldr	r3, [pc, #532]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	08db      	lsrs	r3, r3, #3
 8009c5e:	f003 0303 	and.w	r3, r3, #3
 8009c62:	4a84      	ldr	r2, [pc, #528]	; (8009e74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009c64:	fa22 f303 	lsr.w	r3, r2, r3
 8009c68:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	ee07 3a90 	vmov	s15, r3
 8009c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	ee07 3a90 	vmov	s15, r3
 8009c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c82:	4b7b      	ldr	r3, [pc, #492]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c8a:	ee07 3a90 	vmov	s15, r3
 8009c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c96:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009cb2:	e087      	b.n	8009dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	ee07 3a90 	vmov	s15, r3
 8009cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cbe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cc6:	4b6a      	ldr	r3, [pc, #424]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cce:	ee07 3a90 	vmov	s15, r3
 8009cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cda:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cf6:	e065      	b.n	8009dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	ee07 3a90 	vmov	s15, r3
 8009cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d0a:	4b59      	ldr	r3, [pc, #356]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d12:	ee07 3a90 	vmov	s15, r3
 8009d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d3a:	e043      	b.n	8009dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	ee07 3a90 	vmov	s15, r3
 8009d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009e84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d4e:	4b48      	ldr	r3, [pc, #288]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d56:	ee07 3a90 	vmov	s15, r3
 8009d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d62:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d7e:	e021      	b.n	8009dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	ee07 3a90 	vmov	s15, r3
 8009d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d92:	4b37      	ldr	r3, [pc, #220]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d9a:	ee07 3a90 	vmov	s15, r3
 8009d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009da6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dc2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009dc4:	4b2a      	ldr	r3, [pc, #168]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc8:	0a5b      	lsrs	r3, r3, #9
 8009dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dce:	ee07 3a90 	vmov	s15, r3
 8009dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dde:	edd7 6a07 	vldr	s13, [r7, #28]
 8009de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dea:	ee17 2a90 	vmov	r2, s15
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009df2:	4b1f      	ldr	r3, [pc, #124]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df6:	0c1b      	lsrs	r3, r3, #16
 8009df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dfc:	ee07 3a90 	vmov	s15, r3
 8009e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e18:	ee17 2a90 	vmov	r2, s15
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009e20:	4b13      	ldr	r3, [pc, #76]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e24:	0e1b      	lsrs	r3, r3, #24
 8009e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e2a:	ee07 3a90 	vmov	s15, r3
 8009e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e46:	ee17 2a90 	vmov	r2, s15
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009e4e:	e008      	b.n	8009e62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	609a      	str	r2, [r3, #8]
}
 8009e62:	bf00      	nop
 8009e64:	3724      	adds	r7, #36	; 0x24
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	58024400 	.word	0x58024400
 8009e74:	03d09000 	.word	0x03d09000
 8009e78:	46000000 	.word	0x46000000
 8009e7c:	4c742400 	.word	0x4c742400
 8009e80:	4a742400 	.word	0x4a742400
 8009e84:	4af42400 	.word	0x4af42400

08009e88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b089      	sub	sp, #36	; 0x24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e90:	4ba1      	ldr	r3, [pc, #644]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e94:	f003 0303 	and.w	r3, r3, #3
 8009e98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009e9a:	4b9f      	ldr	r3, [pc, #636]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9e:	0d1b      	lsrs	r3, r3, #20
 8009ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ea4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009ea6:	4b9c      	ldr	r3, [pc, #624]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eaa:	0a1b      	lsrs	r3, r3, #8
 8009eac:	f003 0301 	and.w	r3, r3, #1
 8009eb0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009eb2:	4b99      	ldr	r3, [pc, #612]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eb6:	08db      	lsrs	r3, r3, #3
 8009eb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	fb02 f303 	mul.w	r3, r2, r3
 8009ec2:	ee07 3a90 	vmov	s15, r3
 8009ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f000 8111 	beq.w	800a0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	f000 8083 	beq.w	8009fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	f200 80a1 	bhi.w	800a028 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d003      	beq.n	8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d056      	beq.n	8009fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009ef2:	e099      	b.n	800a028 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ef4:	4b88      	ldr	r3, [pc, #544]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f003 0320 	and.w	r3, r3, #32
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d02d      	beq.n	8009f5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f00:	4b85      	ldr	r3, [pc, #532]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	08db      	lsrs	r3, r3, #3
 8009f06:	f003 0303 	and.w	r3, r3, #3
 8009f0a:	4a84      	ldr	r2, [pc, #528]	; (800a11c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f10:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	ee07 3a90 	vmov	s15, r3
 8009f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	ee07 3a90 	vmov	s15, r3
 8009f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f2a:	4b7b      	ldr	r3, [pc, #492]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f32:	ee07 3a90 	vmov	s15, r3
 8009f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009f5a:	e087      	b.n	800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	ee07 3a90 	vmov	s15, r3
 8009f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f6e:	4b6a      	ldr	r3, [pc, #424]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f76:	ee07 3a90 	vmov	s15, r3
 8009f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f82:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f9e:	e065      	b.n	800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	ee07 3a90 	vmov	s15, r3
 8009fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009faa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fb2:	4b59      	ldr	r3, [pc, #356]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fba:	ee07 3a90 	vmov	s15, r3
 8009fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fc6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fe2:	e043      	b.n	800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	ee07 3a90 	vmov	s15, r3
 8009fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a12c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ff6:	4b48      	ldr	r3, [pc, #288]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ffe:	ee07 3a90 	vmov	s15, r3
 800a002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a006:	ed97 6a03 	vldr	s12, [r7, #12]
 800a00a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a00e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a01a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a01e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a026:	e021      	b.n	800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	ee07 3a90 	vmov	s15, r3
 800a02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a032:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a03a:	4b37      	ldr	r3, [pc, #220]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a042:	ee07 3a90 	vmov	s15, r3
 800a046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a04a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a04e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a05a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a05e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a062:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a06a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a06c:	4b2a      	ldr	r3, [pc, #168]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a070:	0a5b      	lsrs	r3, r3, #9
 800a072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a076:	ee07 3a90 	vmov	s15, r3
 800a07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a07e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a082:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a086:	edd7 6a07 	vldr	s13, [r7, #28]
 800a08a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a08e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a092:	ee17 2a90 	vmov	r2, s15
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a09a:	4b1f      	ldr	r3, [pc, #124]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09e:	0c1b      	lsrs	r3, r3, #16
 800a0a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0a4:	ee07 3a90 	vmov	s15, r3
 800a0a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0c0:	ee17 2a90 	vmov	r2, s15
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a0c8:	4b13      	ldr	r3, [pc, #76]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0cc:	0e1b      	lsrs	r3, r3, #24
 800a0ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0d2:	ee07 3a90 	vmov	s15, r3
 800a0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0ee:	ee17 2a90 	vmov	r2, s15
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a0f6:	e008      	b.n	800a10a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	609a      	str	r2, [r3, #8]
}
 800a10a:	bf00      	nop
 800a10c:	3724      	adds	r7, #36	; 0x24
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	58024400 	.word	0x58024400
 800a11c:	03d09000 	.word	0x03d09000
 800a120:	46000000 	.word	0x46000000
 800a124:	4c742400 	.word	0x4c742400
 800a128:	4a742400 	.word	0x4a742400
 800a12c:	4af42400 	.word	0x4af42400

0800a130 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a13a:	2300      	movs	r3, #0
 800a13c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a13e:	4b53      	ldr	r3, [pc, #332]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a142:	f003 0303 	and.w	r3, r3, #3
 800a146:	2b03      	cmp	r3, #3
 800a148:	d101      	bne.n	800a14e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	e099      	b.n	800a282 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a14e:	4b4f      	ldr	r3, [pc, #316]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a4e      	ldr	r2, [pc, #312]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a154:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a15a:	f7f9 ffe9 	bl	8004130 <HAL_GetTick>
 800a15e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a160:	e008      	b.n	800a174 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a162:	f7f9 ffe5 	bl	8004130 <HAL_GetTick>
 800a166:	4602      	mov	r2, r0
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	1ad3      	subs	r3, r2, r3
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d901      	bls.n	800a174 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e086      	b.n	800a282 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a174:	4b45      	ldr	r3, [pc, #276]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1f0      	bne.n	800a162 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a180:	4b42      	ldr	r3, [pc, #264]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a184:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	031b      	lsls	r3, r3, #12
 800a18e:	493f      	ldr	r1, [pc, #252]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a190:	4313      	orrs	r3, r2
 800a192:	628b      	str	r3, [r1, #40]	; 0x28
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	3b01      	subs	r3, #1
 800a19a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	025b      	lsls	r3, r3, #9
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	431a      	orrs	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	041b      	lsls	r3, r3, #16
 800a1b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a1b6:	431a      	orrs	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	061b      	lsls	r3, r3, #24
 800a1c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a1c4:	4931      	ldr	r1, [pc, #196]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a1ca:	4b30      	ldr	r3, [pc, #192]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	695b      	ldr	r3, [r3, #20]
 800a1d6:	492d      	ldr	r1, [pc, #180]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a1dc:	4b2b      	ldr	r3, [pc, #172]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e0:	f023 0220 	bic.w	r2, r3, #32
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	699b      	ldr	r3, [r3, #24]
 800a1e8:	4928      	ldr	r1, [pc, #160]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a1ee:	4b27      	ldr	r3, [pc, #156]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f2:	4a26      	ldr	r2, [pc, #152]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a1f4:	f023 0310 	bic.w	r3, r3, #16
 800a1f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a1fa:	4b24      	ldr	r3, [pc, #144]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a1fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1fe:	4b24      	ldr	r3, [pc, #144]	; (800a290 <RCCEx_PLL2_Config+0x160>)
 800a200:	4013      	ands	r3, r2
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	69d2      	ldr	r2, [r2, #28]
 800a206:	00d2      	lsls	r2, r2, #3
 800a208:	4920      	ldr	r1, [pc, #128]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a20a:	4313      	orrs	r3, r2
 800a20c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a20e:	4b1f      	ldr	r3, [pc, #124]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a212:	4a1e      	ldr	r2, [pc, #120]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a214:	f043 0310 	orr.w	r3, r3, #16
 800a218:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d106      	bne.n	800a22e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a220:	4b1a      	ldr	r3, [pc, #104]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a224:	4a19      	ldr	r2, [pc, #100]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a22a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a22c:	e00f      	b.n	800a24e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d106      	bne.n	800a242 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a234:	4b15      	ldr	r3, [pc, #84]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a238:	4a14      	ldr	r2, [pc, #80]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a23a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a23e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a240:	e005      	b.n	800a24e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a242:	4b12      	ldr	r3, [pc, #72]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a246:	4a11      	ldr	r2, [pc, #68]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a24c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a24e:	4b0f      	ldr	r3, [pc, #60]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a0e      	ldr	r2, [pc, #56]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a254:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a25a:	f7f9 ff69 	bl	8004130 <HAL_GetTick>
 800a25e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a260:	e008      	b.n	800a274 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a262:	f7f9 ff65 	bl	8004130 <HAL_GetTick>
 800a266:	4602      	mov	r2, r0
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	1ad3      	subs	r3, r2, r3
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d901      	bls.n	800a274 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a270:	2303      	movs	r3, #3
 800a272:	e006      	b.n	800a282 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a274:	4b05      	ldr	r3, [pc, #20]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d0f0      	beq.n	800a262 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a280:	7bfb      	ldrb	r3, [r7, #15]
}
 800a282:	4618      	mov	r0, r3
 800a284:	3710      	adds	r7, #16
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	58024400 	.word	0x58024400
 800a290:	ffff0007 	.word	0xffff0007

0800a294 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a2a2:	4b53      	ldr	r3, [pc, #332]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a6:	f003 0303 	and.w	r3, r3, #3
 800a2aa:	2b03      	cmp	r3, #3
 800a2ac:	d101      	bne.n	800a2b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e099      	b.n	800a3e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a2b2:	4b4f      	ldr	r3, [pc, #316]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a4e      	ldr	r2, [pc, #312]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a2b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2be:	f7f9 ff37 	bl	8004130 <HAL_GetTick>
 800a2c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a2c4:	e008      	b.n	800a2d8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a2c6:	f7f9 ff33 	bl	8004130 <HAL_GetTick>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d901      	bls.n	800a2d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	e086      	b.n	800a3e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a2d8:	4b45      	ldr	r3, [pc, #276]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1f0      	bne.n	800a2c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a2e4:	4b42      	ldr	r3, [pc, #264]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	051b      	lsls	r3, r3, #20
 800a2f2:	493f      	ldr	r1, [pc, #252]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	628b      	str	r3, [r1, #40]	; 0x28
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	3b01      	subs	r3, #1
 800a308:	025b      	lsls	r3, r3, #9
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	431a      	orrs	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	3b01      	subs	r3, #1
 800a314:	041b      	lsls	r3, r3, #16
 800a316:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a31a:	431a      	orrs	r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	3b01      	subs	r3, #1
 800a322:	061b      	lsls	r3, r3, #24
 800a324:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a328:	4931      	ldr	r1, [pc, #196]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a32a:	4313      	orrs	r3, r2
 800a32c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a32e:	4b30      	ldr	r3, [pc, #192]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a332:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	695b      	ldr	r3, [r3, #20]
 800a33a:	492d      	ldr	r1, [pc, #180]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a33c:	4313      	orrs	r3, r2
 800a33e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a340:	4b2b      	ldr	r3, [pc, #172]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a344:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	699b      	ldr	r3, [r3, #24]
 800a34c:	4928      	ldr	r1, [pc, #160]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a34e:	4313      	orrs	r3, r2
 800a350:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a352:	4b27      	ldr	r3, [pc, #156]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a356:	4a26      	ldr	r2, [pc, #152]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a35c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a35e:	4b24      	ldr	r3, [pc, #144]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a362:	4b24      	ldr	r3, [pc, #144]	; (800a3f4 <RCCEx_PLL3_Config+0x160>)
 800a364:	4013      	ands	r3, r2
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	69d2      	ldr	r2, [r2, #28]
 800a36a:	00d2      	lsls	r2, r2, #3
 800a36c:	4920      	ldr	r1, [pc, #128]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a36e:	4313      	orrs	r3, r2
 800a370:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a372:	4b1f      	ldr	r3, [pc, #124]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a376:	4a1e      	ldr	r2, [pc, #120]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a37c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d106      	bne.n	800a392 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a384:	4b1a      	ldr	r3, [pc, #104]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a388:	4a19      	ldr	r2, [pc, #100]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a38a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a38e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a390:	e00f      	b.n	800a3b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	2b01      	cmp	r3, #1
 800a396:	d106      	bne.n	800a3a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a398:	4b15      	ldr	r3, [pc, #84]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39c:	4a14      	ldr	r2, [pc, #80]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a39e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a3a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3a4:	e005      	b.n	800a3b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a3a6:	4b12      	ldr	r3, [pc, #72]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3aa:	4a11      	ldr	r2, [pc, #68]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a3ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a3b2:	4b0f      	ldr	r3, [pc, #60]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a0e      	ldr	r2, [pc, #56]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a3b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3be:	f7f9 feb7 	bl	8004130 <HAL_GetTick>
 800a3c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a3c4:	e008      	b.n	800a3d8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a3c6:	f7f9 feb3 	bl	8004130 <HAL_GetTick>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d901      	bls.n	800a3d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e006      	b.n	800a3e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a3d8:	4b05      	ldr	r3, [pc, #20]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d0f0      	beq.n	800a3c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	58024400 	.word	0x58024400
 800a3f4:	ffff0007 	.word	0xffff0007

0800a3f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d101      	bne.n	800a40a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	e049      	b.n	800a49e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a410:	b2db      	uxtb	r3, r3
 800a412:	2b00      	cmp	r3, #0
 800a414:	d106      	bne.n	800a424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f7f9 fb24 	bl	8003a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2202      	movs	r2, #2
 800a428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	3304      	adds	r3, #4
 800a434:	4619      	mov	r1, r3
 800a436:	4610      	mov	r0, r2
 800a438:	f000 feb8 	bl	800b1ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2201      	movs	r2, #1
 800a448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
	...

0800a4a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b085      	sub	sp, #20
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d001      	beq.n	800a4c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e05e      	b.n	800a57e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2202      	movs	r2, #2
 800a4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68da      	ldr	r2, [r3, #12]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f042 0201 	orr.w	r2, r2, #1
 800a4d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a2b      	ldr	r2, [pc, #172]	; (800a58c <HAL_TIM_Base_Start_IT+0xe4>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d02c      	beq.n	800a53c <HAL_TIM_Base_Start_IT+0x94>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4ea:	d027      	beq.n	800a53c <HAL_TIM_Base_Start_IT+0x94>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a27      	ldr	r2, [pc, #156]	; (800a590 <HAL_TIM_Base_Start_IT+0xe8>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d022      	beq.n	800a53c <HAL_TIM_Base_Start_IT+0x94>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a26      	ldr	r2, [pc, #152]	; (800a594 <HAL_TIM_Base_Start_IT+0xec>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d01d      	beq.n	800a53c <HAL_TIM_Base_Start_IT+0x94>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a24      	ldr	r2, [pc, #144]	; (800a598 <HAL_TIM_Base_Start_IT+0xf0>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d018      	beq.n	800a53c <HAL_TIM_Base_Start_IT+0x94>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a23      	ldr	r2, [pc, #140]	; (800a59c <HAL_TIM_Base_Start_IT+0xf4>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d013      	beq.n	800a53c <HAL_TIM_Base_Start_IT+0x94>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a21      	ldr	r2, [pc, #132]	; (800a5a0 <HAL_TIM_Base_Start_IT+0xf8>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d00e      	beq.n	800a53c <HAL_TIM_Base_Start_IT+0x94>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a20      	ldr	r2, [pc, #128]	; (800a5a4 <HAL_TIM_Base_Start_IT+0xfc>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d009      	beq.n	800a53c <HAL_TIM_Base_Start_IT+0x94>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a1e      	ldr	r2, [pc, #120]	; (800a5a8 <HAL_TIM_Base_Start_IT+0x100>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d004      	beq.n	800a53c <HAL_TIM_Base_Start_IT+0x94>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a1d      	ldr	r2, [pc, #116]	; (800a5ac <HAL_TIM_Base_Start_IT+0x104>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d115      	bne.n	800a568 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	689a      	ldr	r2, [r3, #8]
 800a542:	4b1b      	ldr	r3, [pc, #108]	; (800a5b0 <HAL_TIM_Base_Start_IT+0x108>)
 800a544:	4013      	ands	r3, r2
 800a546:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2b06      	cmp	r3, #6
 800a54c:	d015      	beq.n	800a57a <HAL_TIM_Base_Start_IT+0xd2>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a554:	d011      	beq.n	800a57a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f042 0201 	orr.w	r2, r2, #1
 800a564:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a566:	e008      	b.n	800a57a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f042 0201 	orr.w	r2, r2, #1
 800a576:	601a      	str	r2, [r3, #0]
 800a578:	e000      	b.n	800a57c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a57a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3714      	adds	r7, #20
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	40010000 	.word	0x40010000
 800a590:	40000400 	.word	0x40000400
 800a594:	40000800 	.word	0x40000800
 800a598:	40000c00 	.word	0x40000c00
 800a59c:	40010400 	.word	0x40010400
 800a5a0:	40001800 	.word	0x40001800
 800a5a4:	40014000 	.word	0x40014000
 800a5a8:	4000e000 	.word	0x4000e000
 800a5ac:	4000e400 	.word	0x4000e400
 800a5b0:	00010007 	.word	0x00010007

0800a5b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d101      	bne.n	800a5c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e049      	b.n	800a65a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d106      	bne.n	800a5e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7f9 fa0e 	bl	80039fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	3304      	adds	r3, #4
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	4610      	mov	r0, r2
 800a5f4:	f000 fdda 	bl	800b1ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3708      	adds	r7, #8
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
	...

0800a664 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d109      	bne.n	800a688 <HAL_TIM_PWM_Start+0x24>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	bf14      	ite	ne
 800a680:	2301      	movne	r3, #1
 800a682:	2300      	moveq	r3, #0
 800a684:	b2db      	uxtb	r3, r3
 800a686:	e03c      	b.n	800a702 <HAL_TIM_PWM_Start+0x9e>
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	2b04      	cmp	r3, #4
 800a68c:	d109      	bne.n	800a6a2 <HAL_TIM_PWM_Start+0x3e>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a694:	b2db      	uxtb	r3, r3
 800a696:	2b01      	cmp	r3, #1
 800a698:	bf14      	ite	ne
 800a69a:	2301      	movne	r3, #1
 800a69c:	2300      	moveq	r3, #0
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	e02f      	b.n	800a702 <HAL_TIM_PWM_Start+0x9e>
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	2b08      	cmp	r3, #8
 800a6a6:	d109      	bne.n	800a6bc <HAL_TIM_PWM_Start+0x58>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	bf14      	ite	ne
 800a6b4:	2301      	movne	r3, #1
 800a6b6:	2300      	moveq	r3, #0
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	e022      	b.n	800a702 <HAL_TIM_PWM_Start+0x9e>
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	2b0c      	cmp	r3, #12
 800a6c0:	d109      	bne.n	800a6d6 <HAL_TIM_PWM_Start+0x72>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	bf14      	ite	ne
 800a6ce:	2301      	movne	r3, #1
 800a6d0:	2300      	moveq	r3, #0
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	e015      	b.n	800a702 <HAL_TIM_PWM_Start+0x9e>
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	2b10      	cmp	r3, #16
 800a6da:	d109      	bne.n	800a6f0 <HAL_TIM_PWM_Start+0x8c>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	bf14      	ite	ne
 800a6e8:	2301      	movne	r3, #1
 800a6ea:	2300      	moveq	r3, #0
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	e008      	b.n	800a702 <HAL_TIM_PWM_Start+0x9e>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	bf14      	ite	ne
 800a6fc:	2301      	movne	r3, #1
 800a6fe:	2300      	moveq	r3, #0
 800a700:	b2db      	uxtb	r3, r3
 800a702:	2b00      	cmp	r3, #0
 800a704:	d001      	beq.n	800a70a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	e0ab      	b.n	800a862 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d104      	bne.n	800a71a <HAL_TIM_PWM_Start+0xb6>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2202      	movs	r2, #2
 800a714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a718:	e023      	b.n	800a762 <HAL_TIM_PWM_Start+0xfe>
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	2b04      	cmp	r3, #4
 800a71e:	d104      	bne.n	800a72a <HAL_TIM_PWM_Start+0xc6>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2202      	movs	r2, #2
 800a724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a728:	e01b      	b.n	800a762 <HAL_TIM_PWM_Start+0xfe>
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	2b08      	cmp	r3, #8
 800a72e:	d104      	bne.n	800a73a <HAL_TIM_PWM_Start+0xd6>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2202      	movs	r2, #2
 800a734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a738:	e013      	b.n	800a762 <HAL_TIM_PWM_Start+0xfe>
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	2b0c      	cmp	r3, #12
 800a73e:	d104      	bne.n	800a74a <HAL_TIM_PWM_Start+0xe6>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2202      	movs	r2, #2
 800a744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a748:	e00b      	b.n	800a762 <HAL_TIM_PWM_Start+0xfe>
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	2b10      	cmp	r3, #16
 800a74e:	d104      	bne.n	800a75a <HAL_TIM_PWM_Start+0xf6>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2202      	movs	r2, #2
 800a754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a758:	e003      	b.n	800a762 <HAL_TIM_PWM_Start+0xfe>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2202      	movs	r2, #2
 800a75e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2201      	movs	r2, #1
 800a768:	6839      	ldr	r1, [r7, #0]
 800a76a:	4618      	mov	r0, r3
 800a76c:	f001 f938 	bl	800b9e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a3d      	ldr	r2, [pc, #244]	; (800a86c <HAL_TIM_PWM_Start+0x208>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d013      	beq.n	800a7a2 <HAL_TIM_PWM_Start+0x13e>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a3c      	ldr	r2, [pc, #240]	; (800a870 <HAL_TIM_PWM_Start+0x20c>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d00e      	beq.n	800a7a2 <HAL_TIM_PWM_Start+0x13e>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a3a      	ldr	r2, [pc, #232]	; (800a874 <HAL_TIM_PWM_Start+0x210>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d009      	beq.n	800a7a2 <HAL_TIM_PWM_Start+0x13e>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a39      	ldr	r2, [pc, #228]	; (800a878 <HAL_TIM_PWM_Start+0x214>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d004      	beq.n	800a7a2 <HAL_TIM_PWM_Start+0x13e>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a37      	ldr	r2, [pc, #220]	; (800a87c <HAL_TIM_PWM_Start+0x218>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d101      	bne.n	800a7a6 <HAL_TIM_PWM_Start+0x142>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e000      	b.n	800a7a8 <HAL_TIM_PWM_Start+0x144>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d007      	beq.n	800a7bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a7ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a2a      	ldr	r2, [pc, #168]	; (800a86c <HAL_TIM_PWM_Start+0x208>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d02c      	beq.n	800a820 <HAL_TIM_PWM_Start+0x1bc>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ce:	d027      	beq.n	800a820 <HAL_TIM_PWM_Start+0x1bc>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a2a      	ldr	r2, [pc, #168]	; (800a880 <HAL_TIM_PWM_Start+0x21c>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d022      	beq.n	800a820 <HAL_TIM_PWM_Start+0x1bc>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a29      	ldr	r2, [pc, #164]	; (800a884 <HAL_TIM_PWM_Start+0x220>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d01d      	beq.n	800a820 <HAL_TIM_PWM_Start+0x1bc>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a27      	ldr	r2, [pc, #156]	; (800a888 <HAL_TIM_PWM_Start+0x224>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d018      	beq.n	800a820 <HAL_TIM_PWM_Start+0x1bc>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a1f      	ldr	r2, [pc, #124]	; (800a870 <HAL_TIM_PWM_Start+0x20c>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d013      	beq.n	800a820 <HAL_TIM_PWM_Start+0x1bc>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a23      	ldr	r2, [pc, #140]	; (800a88c <HAL_TIM_PWM_Start+0x228>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d00e      	beq.n	800a820 <HAL_TIM_PWM_Start+0x1bc>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a1b      	ldr	r2, [pc, #108]	; (800a874 <HAL_TIM_PWM_Start+0x210>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d009      	beq.n	800a820 <HAL_TIM_PWM_Start+0x1bc>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a1f      	ldr	r2, [pc, #124]	; (800a890 <HAL_TIM_PWM_Start+0x22c>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d004      	beq.n	800a820 <HAL_TIM_PWM_Start+0x1bc>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a1e      	ldr	r2, [pc, #120]	; (800a894 <HAL_TIM_PWM_Start+0x230>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d115      	bne.n	800a84c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	689a      	ldr	r2, [r3, #8]
 800a826:	4b1c      	ldr	r3, [pc, #112]	; (800a898 <HAL_TIM_PWM_Start+0x234>)
 800a828:	4013      	ands	r3, r2
 800a82a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2b06      	cmp	r3, #6
 800a830:	d015      	beq.n	800a85e <HAL_TIM_PWM_Start+0x1fa>
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a838:	d011      	beq.n	800a85e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f042 0201 	orr.w	r2, r2, #1
 800a848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a84a:	e008      	b.n	800a85e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f042 0201 	orr.w	r2, r2, #1
 800a85a:	601a      	str	r2, [r3, #0]
 800a85c:	e000      	b.n	800a860 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a85e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	40010000 	.word	0x40010000
 800a870:	40010400 	.word	0x40010400
 800a874:	40014000 	.word	0x40014000
 800a878:	40014400 	.word	0x40014400
 800a87c:	40014800 	.word	0x40014800
 800a880:	40000400 	.word	0x40000400
 800a884:	40000800 	.word	0x40000800
 800a888:	40000c00 	.word	0x40000c00
 800a88c:	40001800 	.word	0x40001800
 800a890:	4000e000 	.word	0x4000e000
 800a894:	4000e400 	.word	0x4000e400
 800a898:	00010007 	.word	0x00010007

0800a89c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b086      	sub	sp, #24
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d101      	bne.n	800a8b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e08f      	b.n	800a9d0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d106      	bne.n	800a8ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f7f8 ffdd 	bl	8003884 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2202      	movs	r2, #2
 800a8ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	6899      	ldr	r1, [r3, #8]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	4b3e      	ldr	r3, [pc, #248]	; (800a9d8 <HAL_TIM_Encoder_Init+0x13c>)
 800a8de:	400b      	ands	r3, r1
 800a8e0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	3304      	adds	r3, #4
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	4610      	mov	r0, r2
 800a8ee:	f000 fc5d 	bl	800b1ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	699b      	ldr	r3, [r3, #24]
 800a900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	6a1b      	ldr	r3, [r3, #32]
 800a908:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	697a      	ldr	r2, [r7, #20]
 800a910:	4313      	orrs	r3, r2
 800a912:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a914:	693a      	ldr	r2, [r7, #16]
 800a916:	4b31      	ldr	r3, [pc, #196]	; (800a9dc <HAL_TIM_Encoder_Init+0x140>)
 800a918:	4013      	ands	r3, r2
 800a91a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	689a      	ldr	r2, [r3, #8]
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	699b      	ldr	r3, [r3, #24]
 800a924:	021b      	lsls	r3, r3, #8
 800a926:	4313      	orrs	r3, r2
 800a928:	693a      	ldr	r2, [r7, #16]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a92e:	693a      	ldr	r2, [r7, #16]
 800a930:	4b2b      	ldr	r3, [pc, #172]	; (800a9e0 <HAL_TIM_Encoder_Init+0x144>)
 800a932:	4013      	ands	r3, r2
 800a934:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a936:	693a      	ldr	r2, [r7, #16]
 800a938:	4b2a      	ldr	r3, [pc, #168]	; (800a9e4 <HAL_TIM_Encoder_Init+0x148>)
 800a93a:	4013      	ands	r3, r2
 800a93c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	68da      	ldr	r2, [r3, #12]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	69db      	ldr	r3, [r3, #28]
 800a946:	021b      	lsls	r3, r3, #8
 800a948:	4313      	orrs	r3, r2
 800a94a:	693a      	ldr	r2, [r7, #16]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	691b      	ldr	r3, [r3, #16]
 800a954:	011a      	lsls	r2, r3, #4
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	6a1b      	ldr	r3, [r3, #32]
 800a95a:	031b      	lsls	r3, r3, #12
 800a95c:	4313      	orrs	r3, r2
 800a95e:	693a      	ldr	r2, [r7, #16]
 800a960:	4313      	orrs	r3, r2
 800a962:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a96a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a972:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	685a      	ldr	r2, [r3, #4]
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	695b      	ldr	r3, [r3, #20]
 800a97c:	011b      	lsls	r3, r3, #4
 800a97e:	4313      	orrs	r3, r2
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	4313      	orrs	r3, r2
 800a984:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	697a      	ldr	r2, [r7, #20]
 800a98c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	693a      	ldr	r2, [r7, #16]
 800a994:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	68fa      	ldr	r2, [r7, #12]
 800a99c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3718      	adds	r7, #24
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	fffebff8 	.word	0xfffebff8
 800a9dc:	fffffcfc 	.word	0xfffffcfc
 800a9e0:	fffff3f3 	.word	0xfffff3f3
 800a9e4:	ffff0f0f 	.word	0xffff0f0f

0800a9e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a9f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aa00:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa08:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa10:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d110      	bne.n	800aa3a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d102      	bne.n	800aa24 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800aa1e:	7b7b      	ldrb	r3, [r7, #13]
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d001      	beq.n	800aa28 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	e069      	b.n	800aafc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2202      	movs	r2, #2
 800aa2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2202      	movs	r2, #2
 800aa34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa38:	e031      	b.n	800aa9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	2b04      	cmp	r3, #4
 800aa3e:	d110      	bne.n	800aa62 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa40:	7bbb      	ldrb	r3, [r7, #14]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d102      	bne.n	800aa4c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800aa46:	7b3b      	ldrb	r3, [r7, #12]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d001      	beq.n	800aa50 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e055      	b.n	800aafc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2202      	movs	r2, #2
 800aa54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2202      	movs	r2, #2
 800aa5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa60:	e01d      	b.n	800aa9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa62:	7bfb      	ldrb	r3, [r7, #15]
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d108      	bne.n	800aa7a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa68:	7bbb      	ldrb	r3, [r7, #14]
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d105      	bne.n	800aa7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa6e:	7b7b      	ldrb	r3, [r7, #13]
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d102      	bne.n	800aa7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800aa74:	7b3b      	ldrb	r3, [r7, #12]
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d001      	beq.n	800aa7e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e03e      	b.n	800aafc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2202      	movs	r2, #2
 800aa82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2202      	movs	r2, #2
 800aa8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2202      	movs	r2, #2
 800aa92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2202      	movs	r2, #2
 800aa9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d003      	beq.n	800aaac <HAL_TIM_Encoder_Start+0xc4>
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	2b04      	cmp	r3, #4
 800aaa8:	d008      	beq.n	800aabc <HAL_TIM_Encoder_Start+0xd4>
 800aaaa:	e00f      	b.n	800aacc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2201      	movs	r2, #1
 800aab2:	2100      	movs	r1, #0
 800aab4:	4618      	mov	r0, r3
 800aab6:	f000 ff93 	bl	800b9e0 <TIM_CCxChannelCmd>
      break;
 800aaba:	e016      	b.n	800aaea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2201      	movs	r2, #1
 800aac2:	2104      	movs	r1, #4
 800aac4:	4618      	mov	r0, r3
 800aac6:	f000 ff8b 	bl	800b9e0 <TIM_CCxChannelCmd>
      break;
 800aaca:	e00e      	b.n	800aaea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2201      	movs	r2, #1
 800aad2:	2100      	movs	r1, #0
 800aad4:	4618      	mov	r0, r3
 800aad6:	f000 ff83 	bl	800b9e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2201      	movs	r2, #1
 800aae0:	2104      	movs	r1, #4
 800aae2:	4618      	mov	r0, r3
 800aae4:	f000 ff7c 	bl	800b9e0 <TIM_CCxChannelCmd>
      break;
 800aae8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f042 0201 	orr.w	r2, r2, #1
 800aaf8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	f003 0302 	and.w	r3, r3, #2
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d122      	bne.n	800ab60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	f003 0302 	and.w	r3, r3, #2
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	d11b      	bne.n	800ab60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f06f 0202 	mvn.w	r2, #2
 800ab30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	699b      	ldr	r3, [r3, #24]
 800ab3e:	f003 0303 	and.w	r3, r3, #3
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d003      	beq.n	800ab4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fb12 	bl	800b170 <HAL_TIM_IC_CaptureCallback>
 800ab4c:	e005      	b.n	800ab5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 fb04 	bl	800b15c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 fb15 	bl	800b184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	f003 0304 	and.w	r3, r3, #4
 800ab6a:	2b04      	cmp	r3, #4
 800ab6c:	d122      	bne.n	800abb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	f003 0304 	and.w	r3, r3, #4
 800ab78:	2b04      	cmp	r3, #4
 800ab7a:	d11b      	bne.n	800abb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f06f 0204 	mvn.w	r2, #4
 800ab84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2202      	movs	r2, #2
 800ab8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	699b      	ldr	r3, [r3, #24]
 800ab92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d003      	beq.n	800aba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 fae8 	bl	800b170 <HAL_TIM_IC_CaptureCallback>
 800aba0:	e005      	b.n	800abae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 fada 	bl	800b15c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 faeb 	bl	800b184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	691b      	ldr	r3, [r3, #16]
 800abba:	f003 0308 	and.w	r3, r3, #8
 800abbe:	2b08      	cmp	r3, #8
 800abc0:	d122      	bne.n	800ac08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	f003 0308 	and.w	r3, r3, #8
 800abcc:	2b08      	cmp	r3, #8
 800abce:	d11b      	bne.n	800ac08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f06f 0208 	mvn.w	r2, #8
 800abd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2204      	movs	r2, #4
 800abde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	69db      	ldr	r3, [r3, #28]
 800abe6:	f003 0303 	and.w	r3, r3, #3
 800abea:	2b00      	cmp	r3, #0
 800abec:	d003      	beq.n	800abf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fabe 	bl	800b170 <HAL_TIM_IC_CaptureCallback>
 800abf4:	e005      	b.n	800ac02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 fab0 	bl	800b15c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 fac1 	bl	800b184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2200      	movs	r2, #0
 800ac06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	f003 0310 	and.w	r3, r3, #16
 800ac12:	2b10      	cmp	r3, #16
 800ac14:	d122      	bne.n	800ac5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	f003 0310 	and.w	r3, r3, #16
 800ac20:	2b10      	cmp	r3, #16
 800ac22:	d11b      	bne.n	800ac5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f06f 0210 	mvn.w	r2, #16
 800ac2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2208      	movs	r2, #8
 800ac32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	69db      	ldr	r3, [r3, #28]
 800ac3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d003      	beq.n	800ac4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 fa94 	bl	800b170 <HAL_TIM_IC_CaptureCallback>
 800ac48:	e005      	b.n	800ac56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fa86 	bl	800b15c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 fa97 	bl	800b184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	691b      	ldr	r3, [r3, #16]
 800ac62:	f003 0301 	and.w	r3, r3, #1
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d10e      	bne.n	800ac88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	f003 0301 	and.w	r3, r3, #1
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d107      	bne.n	800ac88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f06f 0201 	mvn.w	r2, #1
 800ac80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f7f6 f91e 	bl	8000ec4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	691b      	ldr	r3, [r3, #16]
 800ac8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac92:	2b80      	cmp	r3, #128	; 0x80
 800ac94:	d10e      	bne.n	800acb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aca0:	2b80      	cmp	r3, #128	; 0x80
 800aca2:	d107      	bne.n	800acb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800acac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f001 f802 	bl	800bcb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acc2:	d10e      	bne.n	800ace2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acce:	2b80      	cmp	r3, #128	; 0x80
 800acd0:	d107      	bne.n	800ace2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800acda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 fff5 	bl	800bccc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acec:	2b40      	cmp	r3, #64	; 0x40
 800acee:	d10e      	bne.n	800ad0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68db      	ldr	r3, [r3, #12]
 800acf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acfa:	2b40      	cmp	r3, #64	; 0x40
 800acfc:	d107      	bne.n	800ad0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ad06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fa45 	bl	800b198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	f003 0320 	and.w	r3, r3, #32
 800ad18:	2b20      	cmp	r3, #32
 800ad1a:	d10e      	bne.n	800ad3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	f003 0320 	and.w	r3, r3, #32
 800ad26:	2b20      	cmp	r3, #32
 800ad28:	d107      	bne.n	800ad3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f06f 0220 	mvn.w	r2, #32
 800ad32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 ffb5 	bl	800bca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad3a:	bf00      	nop
 800ad3c:	3708      	adds	r7, #8
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
	...

0800ad44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b086      	sub	sp, #24
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad50:	2300      	movs	r3, #0
 800ad52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d101      	bne.n	800ad62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ad5e:	2302      	movs	r3, #2
 800ad60:	e0ff      	b.n	800af62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2201      	movs	r2, #1
 800ad66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2b14      	cmp	r3, #20
 800ad6e:	f200 80f0 	bhi.w	800af52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ad72:	a201      	add	r2, pc, #4	; (adr r2, 800ad78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ad74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad78:	0800adcd 	.word	0x0800adcd
 800ad7c:	0800af53 	.word	0x0800af53
 800ad80:	0800af53 	.word	0x0800af53
 800ad84:	0800af53 	.word	0x0800af53
 800ad88:	0800ae0d 	.word	0x0800ae0d
 800ad8c:	0800af53 	.word	0x0800af53
 800ad90:	0800af53 	.word	0x0800af53
 800ad94:	0800af53 	.word	0x0800af53
 800ad98:	0800ae4f 	.word	0x0800ae4f
 800ad9c:	0800af53 	.word	0x0800af53
 800ada0:	0800af53 	.word	0x0800af53
 800ada4:	0800af53 	.word	0x0800af53
 800ada8:	0800ae8f 	.word	0x0800ae8f
 800adac:	0800af53 	.word	0x0800af53
 800adb0:	0800af53 	.word	0x0800af53
 800adb4:	0800af53 	.word	0x0800af53
 800adb8:	0800aed1 	.word	0x0800aed1
 800adbc:	0800af53 	.word	0x0800af53
 800adc0:	0800af53 	.word	0x0800af53
 800adc4:	0800af53 	.word	0x0800af53
 800adc8:	0800af11 	.word	0x0800af11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	68b9      	ldr	r1, [r7, #8]
 800add2:	4618      	mov	r0, r3
 800add4:	f000 fa90 	bl	800b2f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	699a      	ldr	r2, [r3, #24]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f042 0208 	orr.w	r2, r2, #8
 800ade6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	699a      	ldr	r2, [r3, #24]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f022 0204 	bic.w	r2, r2, #4
 800adf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	6999      	ldr	r1, [r3, #24]
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	691a      	ldr	r2, [r3, #16]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	430a      	orrs	r2, r1
 800ae08:	619a      	str	r2, [r3, #24]
      break;
 800ae0a:	e0a5      	b.n	800af58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	68b9      	ldr	r1, [r7, #8]
 800ae12:	4618      	mov	r0, r3
 800ae14:	f000 fb00 	bl	800b418 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	699a      	ldr	r2, [r3, #24]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	699a      	ldr	r2, [r3, #24]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	6999      	ldr	r1, [r3, #24]
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	021a      	lsls	r2, r3, #8
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	430a      	orrs	r2, r1
 800ae4a:	619a      	str	r2, [r3, #24]
      break;
 800ae4c:	e084      	b.n	800af58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	68b9      	ldr	r1, [r7, #8]
 800ae54:	4618      	mov	r0, r3
 800ae56:	f000 fb69 	bl	800b52c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	69da      	ldr	r2, [r3, #28]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f042 0208 	orr.w	r2, r2, #8
 800ae68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	69da      	ldr	r2, [r3, #28]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f022 0204 	bic.w	r2, r2, #4
 800ae78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	69d9      	ldr	r1, [r3, #28]
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	691a      	ldr	r2, [r3, #16]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	430a      	orrs	r2, r1
 800ae8a:	61da      	str	r2, [r3, #28]
      break;
 800ae8c:	e064      	b.n	800af58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	68b9      	ldr	r1, [r7, #8]
 800ae94:	4618      	mov	r0, r3
 800ae96:	f000 fbd1 	bl	800b63c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	69da      	ldr	r2, [r3, #28]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	69da      	ldr	r2, [r3, #28]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aeb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	69d9      	ldr	r1, [r3, #28]
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	691b      	ldr	r3, [r3, #16]
 800aec4:	021a      	lsls	r2, r3, #8
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	430a      	orrs	r2, r1
 800aecc:	61da      	str	r2, [r3, #28]
      break;
 800aece:	e043      	b.n	800af58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	68b9      	ldr	r1, [r7, #8]
 800aed6:	4618      	mov	r0, r3
 800aed8:	f000 fc1a 	bl	800b710 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f042 0208 	orr.w	r2, r2, #8
 800aeea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f022 0204 	bic.w	r2, r2, #4
 800aefa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	691a      	ldr	r2, [r3, #16]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	430a      	orrs	r2, r1
 800af0c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800af0e:	e023      	b.n	800af58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	68b9      	ldr	r1, [r7, #8]
 800af16:	4618      	mov	r0, r3
 800af18:	f000 fc5e 	bl	800b7d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	691b      	ldr	r3, [r3, #16]
 800af46:	021a      	lsls	r2, r3, #8
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	430a      	orrs	r2, r1
 800af4e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800af50:	e002      	b.n	800af58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	75fb      	strb	r3, [r7, #23]
      break;
 800af56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800af60:	7dfb      	ldrb	r3, [r7, #23]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3718      	adds	r7, #24
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop

0800af6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af76:	2300      	movs	r3, #0
 800af78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af80:	2b01      	cmp	r3, #1
 800af82:	d101      	bne.n	800af88 <HAL_TIM_ConfigClockSource+0x1c>
 800af84:	2302      	movs	r3, #2
 800af86:	e0dc      	b.n	800b142 <HAL_TIM_ConfigClockSource+0x1d6>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2202      	movs	r2, #2
 800af94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	4b6a      	ldr	r3, [pc, #424]	; (800b14c <HAL_TIM_ConfigClockSource+0x1e0>)
 800afa4:	4013      	ands	r3, r2
 800afa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	68ba      	ldr	r2, [r7, #8]
 800afb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a64      	ldr	r2, [pc, #400]	; (800b150 <HAL_TIM_ConfigClockSource+0x1e4>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	f000 80a9 	beq.w	800b116 <HAL_TIM_ConfigClockSource+0x1aa>
 800afc4:	4a62      	ldr	r2, [pc, #392]	; (800b150 <HAL_TIM_ConfigClockSource+0x1e4>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	f200 80ae 	bhi.w	800b128 <HAL_TIM_ConfigClockSource+0x1bc>
 800afcc:	4a61      	ldr	r2, [pc, #388]	; (800b154 <HAL_TIM_ConfigClockSource+0x1e8>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	f000 80a1 	beq.w	800b116 <HAL_TIM_ConfigClockSource+0x1aa>
 800afd4:	4a5f      	ldr	r2, [pc, #380]	; (800b154 <HAL_TIM_ConfigClockSource+0x1e8>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	f200 80a6 	bhi.w	800b128 <HAL_TIM_ConfigClockSource+0x1bc>
 800afdc:	4a5e      	ldr	r2, [pc, #376]	; (800b158 <HAL_TIM_ConfigClockSource+0x1ec>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	f000 8099 	beq.w	800b116 <HAL_TIM_ConfigClockSource+0x1aa>
 800afe4:	4a5c      	ldr	r2, [pc, #368]	; (800b158 <HAL_TIM_ConfigClockSource+0x1ec>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	f200 809e 	bhi.w	800b128 <HAL_TIM_ConfigClockSource+0x1bc>
 800afec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aff0:	f000 8091 	beq.w	800b116 <HAL_TIM_ConfigClockSource+0x1aa>
 800aff4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aff8:	f200 8096 	bhi.w	800b128 <HAL_TIM_ConfigClockSource+0x1bc>
 800affc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b000:	f000 8089 	beq.w	800b116 <HAL_TIM_ConfigClockSource+0x1aa>
 800b004:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b008:	f200 808e 	bhi.w	800b128 <HAL_TIM_ConfigClockSource+0x1bc>
 800b00c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b010:	d03e      	beq.n	800b090 <HAL_TIM_ConfigClockSource+0x124>
 800b012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b016:	f200 8087 	bhi.w	800b128 <HAL_TIM_ConfigClockSource+0x1bc>
 800b01a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b01e:	f000 8086 	beq.w	800b12e <HAL_TIM_ConfigClockSource+0x1c2>
 800b022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b026:	d87f      	bhi.n	800b128 <HAL_TIM_ConfigClockSource+0x1bc>
 800b028:	2b70      	cmp	r3, #112	; 0x70
 800b02a:	d01a      	beq.n	800b062 <HAL_TIM_ConfigClockSource+0xf6>
 800b02c:	2b70      	cmp	r3, #112	; 0x70
 800b02e:	d87b      	bhi.n	800b128 <HAL_TIM_ConfigClockSource+0x1bc>
 800b030:	2b60      	cmp	r3, #96	; 0x60
 800b032:	d050      	beq.n	800b0d6 <HAL_TIM_ConfigClockSource+0x16a>
 800b034:	2b60      	cmp	r3, #96	; 0x60
 800b036:	d877      	bhi.n	800b128 <HAL_TIM_ConfigClockSource+0x1bc>
 800b038:	2b50      	cmp	r3, #80	; 0x50
 800b03a:	d03c      	beq.n	800b0b6 <HAL_TIM_ConfigClockSource+0x14a>
 800b03c:	2b50      	cmp	r3, #80	; 0x50
 800b03e:	d873      	bhi.n	800b128 <HAL_TIM_ConfigClockSource+0x1bc>
 800b040:	2b40      	cmp	r3, #64	; 0x40
 800b042:	d058      	beq.n	800b0f6 <HAL_TIM_ConfigClockSource+0x18a>
 800b044:	2b40      	cmp	r3, #64	; 0x40
 800b046:	d86f      	bhi.n	800b128 <HAL_TIM_ConfigClockSource+0x1bc>
 800b048:	2b30      	cmp	r3, #48	; 0x30
 800b04a:	d064      	beq.n	800b116 <HAL_TIM_ConfigClockSource+0x1aa>
 800b04c:	2b30      	cmp	r3, #48	; 0x30
 800b04e:	d86b      	bhi.n	800b128 <HAL_TIM_ConfigClockSource+0x1bc>
 800b050:	2b20      	cmp	r3, #32
 800b052:	d060      	beq.n	800b116 <HAL_TIM_ConfigClockSource+0x1aa>
 800b054:	2b20      	cmp	r3, #32
 800b056:	d867      	bhi.n	800b128 <HAL_TIM_ConfigClockSource+0x1bc>
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d05c      	beq.n	800b116 <HAL_TIM_ConfigClockSource+0x1aa>
 800b05c:	2b10      	cmp	r3, #16
 800b05e:	d05a      	beq.n	800b116 <HAL_TIM_ConfigClockSource+0x1aa>
 800b060:	e062      	b.n	800b128 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6818      	ldr	r0, [r3, #0]
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	6899      	ldr	r1, [r3, #8]
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	685a      	ldr	r2, [r3, #4]
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	f000 fc95 	bl	800b9a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	689b      	ldr	r3, [r3, #8]
 800b07c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b084:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	68ba      	ldr	r2, [r7, #8]
 800b08c:	609a      	str	r2, [r3, #8]
      break;
 800b08e:	e04f      	b.n	800b130 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6818      	ldr	r0, [r3, #0]
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	6899      	ldr	r1, [r3, #8]
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	685a      	ldr	r2, [r3, #4]
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	f000 fc7e 	bl	800b9a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	689a      	ldr	r2, [r3, #8]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b0b2:	609a      	str	r2, [r3, #8]
      break;
 800b0b4:	e03c      	b.n	800b130 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6818      	ldr	r0, [r3, #0]
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	6859      	ldr	r1, [r3, #4]
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	f000 fbee 	bl	800b8a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	2150      	movs	r1, #80	; 0x50
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f000 fc48 	bl	800b964 <TIM_ITRx_SetConfig>
      break;
 800b0d4:	e02c      	b.n	800b130 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6818      	ldr	r0, [r3, #0]
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	6859      	ldr	r1, [r3, #4]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	f000 fc0d 	bl	800b902 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2160      	movs	r1, #96	; 0x60
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f000 fc38 	bl	800b964 <TIM_ITRx_SetConfig>
      break;
 800b0f4:	e01c      	b.n	800b130 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6818      	ldr	r0, [r3, #0]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	6859      	ldr	r1, [r3, #4]
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	461a      	mov	r2, r3
 800b104:	f000 fbce 	bl	800b8a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2140      	movs	r1, #64	; 0x40
 800b10e:	4618      	mov	r0, r3
 800b110:	f000 fc28 	bl	800b964 <TIM_ITRx_SetConfig>
      break;
 800b114:	e00c      	b.n	800b130 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4619      	mov	r1, r3
 800b120:	4610      	mov	r0, r2
 800b122:	f000 fc1f 	bl	800b964 <TIM_ITRx_SetConfig>
      break;
 800b126:	e003      	b.n	800b130 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b128:	2301      	movs	r3, #1
 800b12a:	73fb      	strb	r3, [r7, #15]
      break;
 800b12c:	e000      	b.n	800b130 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b12e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b140:	7bfb      	ldrb	r3, [r7, #15]
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	ffceff88 	.word	0xffceff88
 800b150:	00100040 	.word	0x00100040
 800b154:	00100030 	.word	0x00100030
 800b158:	00100020 	.word	0x00100020

0800b15c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b164:	bf00      	nop
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b178:	bf00      	nop
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b18c:	bf00      	nop
 800b18e:	370c      	adds	r7, #12
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a44      	ldr	r2, [pc, #272]	; (800b2d0 <TIM_Base_SetConfig+0x124>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d013      	beq.n	800b1ec <TIM_Base_SetConfig+0x40>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1ca:	d00f      	beq.n	800b1ec <TIM_Base_SetConfig+0x40>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4a41      	ldr	r2, [pc, #260]	; (800b2d4 <TIM_Base_SetConfig+0x128>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d00b      	beq.n	800b1ec <TIM_Base_SetConfig+0x40>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4a40      	ldr	r2, [pc, #256]	; (800b2d8 <TIM_Base_SetConfig+0x12c>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d007      	beq.n	800b1ec <TIM_Base_SetConfig+0x40>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4a3f      	ldr	r2, [pc, #252]	; (800b2dc <TIM_Base_SetConfig+0x130>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d003      	beq.n	800b1ec <TIM_Base_SetConfig+0x40>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	4a3e      	ldr	r2, [pc, #248]	; (800b2e0 <TIM_Base_SetConfig+0x134>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d108      	bne.n	800b1fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a33      	ldr	r2, [pc, #204]	; (800b2d0 <TIM_Base_SetConfig+0x124>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d027      	beq.n	800b256 <TIM_Base_SetConfig+0xaa>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b20c:	d023      	beq.n	800b256 <TIM_Base_SetConfig+0xaa>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	4a30      	ldr	r2, [pc, #192]	; (800b2d4 <TIM_Base_SetConfig+0x128>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d01f      	beq.n	800b256 <TIM_Base_SetConfig+0xaa>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a2f      	ldr	r2, [pc, #188]	; (800b2d8 <TIM_Base_SetConfig+0x12c>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d01b      	beq.n	800b256 <TIM_Base_SetConfig+0xaa>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4a2e      	ldr	r2, [pc, #184]	; (800b2dc <TIM_Base_SetConfig+0x130>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d017      	beq.n	800b256 <TIM_Base_SetConfig+0xaa>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4a2d      	ldr	r2, [pc, #180]	; (800b2e0 <TIM_Base_SetConfig+0x134>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d013      	beq.n	800b256 <TIM_Base_SetConfig+0xaa>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4a2c      	ldr	r2, [pc, #176]	; (800b2e4 <TIM_Base_SetConfig+0x138>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d00f      	beq.n	800b256 <TIM_Base_SetConfig+0xaa>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	4a2b      	ldr	r2, [pc, #172]	; (800b2e8 <TIM_Base_SetConfig+0x13c>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d00b      	beq.n	800b256 <TIM_Base_SetConfig+0xaa>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	4a2a      	ldr	r2, [pc, #168]	; (800b2ec <TIM_Base_SetConfig+0x140>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d007      	beq.n	800b256 <TIM_Base_SetConfig+0xaa>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	4a29      	ldr	r2, [pc, #164]	; (800b2f0 <TIM_Base_SetConfig+0x144>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d003      	beq.n	800b256 <TIM_Base_SetConfig+0xaa>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	4a28      	ldr	r2, [pc, #160]	; (800b2f4 <TIM_Base_SetConfig+0x148>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d108      	bne.n	800b268 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b25c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	68fa      	ldr	r2, [r7, #12]
 800b264:	4313      	orrs	r3, r2
 800b266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	695b      	ldr	r3, [r3, #20]
 800b272:	4313      	orrs	r3, r2
 800b274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	689a      	ldr	r2, [r3, #8]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a10      	ldr	r2, [pc, #64]	; (800b2d0 <TIM_Base_SetConfig+0x124>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d00f      	beq.n	800b2b4 <TIM_Base_SetConfig+0x108>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4a12      	ldr	r2, [pc, #72]	; (800b2e0 <TIM_Base_SetConfig+0x134>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d00b      	beq.n	800b2b4 <TIM_Base_SetConfig+0x108>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	4a11      	ldr	r2, [pc, #68]	; (800b2e4 <TIM_Base_SetConfig+0x138>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d007      	beq.n	800b2b4 <TIM_Base_SetConfig+0x108>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	4a10      	ldr	r2, [pc, #64]	; (800b2e8 <TIM_Base_SetConfig+0x13c>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d003      	beq.n	800b2b4 <TIM_Base_SetConfig+0x108>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	4a0f      	ldr	r2, [pc, #60]	; (800b2ec <TIM_Base_SetConfig+0x140>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d103      	bne.n	800b2bc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	691a      	ldr	r2, [r3, #16]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	615a      	str	r2, [r3, #20]
}
 800b2c2:	bf00      	nop
 800b2c4:	3714      	adds	r7, #20
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr
 800b2ce:	bf00      	nop
 800b2d0:	40010000 	.word	0x40010000
 800b2d4:	40000400 	.word	0x40000400
 800b2d8:	40000800 	.word	0x40000800
 800b2dc:	40000c00 	.word	0x40000c00
 800b2e0:	40010400 	.word	0x40010400
 800b2e4:	40014000 	.word	0x40014000
 800b2e8:	40014400 	.word	0x40014400
 800b2ec:	40014800 	.word	0x40014800
 800b2f0:	4000e000 	.word	0x4000e000
 800b2f4:	4000e400 	.word	0x4000e400

0800b2f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b087      	sub	sp, #28
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a1b      	ldr	r3, [r3, #32]
 800b306:	f023 0201 	bic.w	r2, r3, #1
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6a1b      	ldr	r3, [r3, #32]
 800b312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	699b      	ldr	r3, [r3, #24]
 800b31e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	4b37      	ldr	r3, [pc, #220]	; (800b400 <TIM_OC1_SetConfig+0x108>)
 800b324:	4013      	ands	r3, r2
 800b326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f023 0303 	bic.w	r3, r3, #3
 800b32e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	68fa      	ldr	r2, [r7, #12]
 800b336:	4313      	orrs	r3, r2
 800b338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	f023 0302 	bic.w	r3, r3, #2
 800b340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	689b      	ldr	r3, [r3, #8]
 800b346:	697a      	ldr	r2, [r7, #20]
 800b348:	4313      	orrs	r3, r2
 800b34a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4a2d      	ldr	r2, [pc, #180]	; (800b404 <TIM_OC1_SetConfig+0x10c>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d00f      	beq.n	800b374 <TIM_OC1_SetConfig+0x7c>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a2c      	ldr	r2, [pc, #176]	; (800b408 <TIM_OC1_SetConfig+0x110>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d00b      	beq.n	800b374 <TIM_OC1_SetConfig+0x7c>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4a2b      	ldr	r2, [pc, #172]	; (800b40c <TIM_OC1_SetConfig+0x114>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d007      	beq.n	800b374 <TIM_OC1_SetConfig+0x7c>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a2a      	ldr	r2, [pc, #168]	; (800b410 <TIM_OC1_SetConfig+0x118>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d003      	beq.n	800b374 <TIM_OC1_SetConfig+0x7c>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a29      	ldr	r2, [pc, #164]	; (800b414 <TIM_OC1_SetConfig+0x11c>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d10c      	bne.n	800b38e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	f023 0308 	bic.w	r3, r3, #8
 800b37a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	697a      	ldr	r2, [r7, #20]
 800b382:	4313      	orrs	r3, r2
 800b384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	f023 0304 	bic.w	r3, r3, #4
 800b38c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4a1c      	ldr	r2, [pc, #112]	; (800b404 <TIM_OC1_SetConfig+0x10c>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d00f      	beq.n	800b3b6 <TIM_OC1_SetConfig+0xbe>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4a1b      	ldr	r2, [pc, #108]	; (800b408 <TIM_OC1_SetConfig+0x110>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d00b      	beq.n	800b3b6 <TIM_OC1_SetConfig+0xbe>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a1a      	ldr	r2, [pc, #104]	; (800b40c <TIM_OC1_SetConfig+0x114>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d007      	beq.n	800b3b6 <TIM_OC1_SetConfig+0xbe>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4a19      	ldr	r2, [pc, #100]	; (800b410 <TIM_OC1_SetConfig+0x118>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d003      	beq.n	800b3b6 <TIM_OC1_SetConfig+0xbe>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4a18      	ldr	r2, [pc, #96]	; (800b414 <TIM_OC1_SetConfig+0x11c>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d111      	bne.n	800b3da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b3c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	695b      	ldr	r3, [r3, #20]
 800b3ca:	693a      	ldr	r2, [r7, #16]
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	699b      	ldr	r3, [r3, #24]
 800b3d4:	693a      	ldr	r2, [r7, #16]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	693a      	ldr	r2, [r7, #16]
 800b3de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	685a      	ldr	r2, [r3, #4]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	697a      	ldr	r2, [r7, #20]
 800b3f2:	621a      	str	r2, [r3, #32]
}
 800b3f4:	bf00      	nop
 800b3f6:	371c      	adds	r7, #28
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr
 800b400:	fffeff8f 	.word	0xfffeff8f
 800b404:	40010000 	.word	0x40010000
 800b408:	40010400 	.word	0x40010400
 800b40c:	40014000 	.word	0x40014000
 800b410:	40014400 	.word	0x40014400
 800b414:	40014800 	.word	0x40014800

0800b418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b418:	b480      	push	{r7}
 800b41a:	b087      	sub	sp, #28
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6a1b      	ldr	r3, [r3, #32]
 800b426:	f023 0210 	bic.w	r2, r3, #16
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6a1b      	ldr	r3, [r3, #32]
 800b432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	699b      	ldr	r3, [r3, #24]
 800b43e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b440:	68fa      	ldr	r2, [r7, #12]
 800b442:	4b34      	ldr	r3, [pc, #208]	; (800b514 <TIM_OC2_SetConfig+0xfc>)
 800b444:	4013      	ands	r3, r2
 800b446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b44e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	021b      	lsls	r3, r3, #8
 800b456:	68fa      	ldr	r2, [r7, #12]
 800b458:	4313      	orrs	r3, r2
 800b45a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	f023 0320 	bic.w	r3, r3, #32
 800b462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	011b      	lsls	r3, r3, #4
 800b46a:	697a      	ldr	r2, [r7, #20]
 800b46c:	4313      	orrs	r3, r2
 800b46e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4a29      	ldr	r2, [pc, #164]	; (800b518 <TIM_OC2_SetConfig+0x100>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d003      	beq.n	800b480 <TIM_OC2_SetConfig+0x68>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4a28      	ldr	r2, [pc, #160]	; (800b51c <TIM_OC2_SetConfig+0x104>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d10d      	bne.n	800b49c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	011b      	lsls	r3, r3, #4
 800b48e:	697a      	ldr	r2, [r7, #20]
 800b490:	4313      	orrs	r3, r2
 800b492:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b49a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a1e      	ldr	r2, [pc, #120]	; (800b518 <TIM_OC2_SetConfig+0x100>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d00f      	beq.n	800b4c4 <TIM_OC2_SetConfig+0xac>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4a1d      	ldr	r2, [pc, #116]	; (800b51c <TIM_OC2_SetConfig+0x104>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d00b      	beq.n	800b4c4 <TIM_OC2_SetConfig+0xac>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4a1c      	ldr	r2, [pc, #112]	; (800b520 <TIM_OC2_SetConfig+0x108>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d007      	beq.n	800b4c4 <TIM_OC2_SetConfig+0xac>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4a1b      	ldr	r2, [pc, #108]	; (800b524 <TIM_OC2_SetConfig+0x10c>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d003      	beq.n	800b4c4 <TIM_OC2_SetConfig+0xac>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4a1a      	ldr	r2, [pc, #104]	; (800b528 <TIM_OC2_SetConfig+0x110>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d113      	bne.n	800b4ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b4ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	695b      	ldr	r3, [r3, #20]
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	693a      	ldr	r2, [r7, #16]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	699b      	ldr	r3, [r3, #24]
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	693a      	ldr	r2, [r7, #16]
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	693a      	ldr	r2, [r7, #16]
 800b4f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	685a      	ldr	r2, [r3, #4]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	697a      	ldr	r2, [r7, #20]
 800b504:	621a      	str	r2, [r3, #32]
}
 800b506:	bf00      	nop
 800b508:	371c      	adds	r7, #28
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	feff8fff 	.word	0xfeff8fff
 800b518:	40010000 	.word	0x40010000
 800b51c:	40010400 	.word	0x40010400
 800b520:	40014000 	.word	0x40014000
 800b524:	40014400 	.word	0x40014400
 800b528:	40014800 	.word	0x40014800

0800b52c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b087      	sub	sp, #28
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a1b      	ldr	r3, [r3, #32]
 800b53a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a1b      	ldr	r3, [r3, #32]
 800b546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	69db      	ldr	r3, [r3, #28]
 800b552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	4b33      	ldr	r3, [pc, #204]	; (800b624 <TIM_OC3_SetConfig+0xf8>)
 800b558:	4013      	ands	r3, r2
 800b55a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f023 0303 	bic.w	r3, r3, #3
 800b562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	68fa      	ldr	r2, [r7, #12]
 800b56a:	4313      	orrs	r3, r2
 800b56c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	021b      	lsls	r3, r3, #8
 800b57c:	697a      	ldr	r2, [r7, #20]
 800b57e:	4313      	orrs	r3, r2
 800b580:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	4a28      	ldr	r2, [pc, #160]	; (800b628 <TIM_OC3_SetConfig+0xfc>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d003      	beq.n	800b592 <TIM_OC3_SetConfig+0x66>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4a27      	ldr	r2, [pc, #156]	; (800b62c <TIM_OC3_SetConfig+0x100>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d10d      	bne.n	800b5ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b598:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	68db      	ldr	r3, [r3, #12]
 800b59e:	021b      	lsls	r3, r3, #8
 800b5a0:	697a      	ldr	r2, [r7, #20]
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b5ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4a1d      	ldr	r2, [pc, #116]	; (800b628 <TIM_OC3_SetConfig+0xfc>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d00f      	beq.n	800b5d6 <TIM_OC3_SetConfig+0xaa>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	4a1c      	ldr	r2, [pc, #112]	; (800b62c <TIM_OC3_SetConfig+0x100>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d00b      	beq.n	800b5d6 <TIM_OC3_SetConfig+0xaa>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4a1b      	ldr	r2, [pc, #108]	; (800b630 <TIM_OC3_SetConfig+0x104>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d007      	beq.n	800b5d6 <TIM_OC3_SetConfig+0xaa>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4a1a      	ldr	r2, [pc, #104]	; (800b634 <TIM_OC3_SetConfig+0x108>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d003      	beq.n	800b5d6 <TIM_OC3_SetConfig+0xaa>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a19      	ldr	r2, [pc, #100]	; (800b638 <TIM_OC3_SetConfig+0x10c>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d113      	bne.n	800b5fe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b5e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	695b      	ldr	r3, [r3, #20]
 800b5ea:	011b      	lsls	r3, r3, #4
 800b5ec:	693a      	ldr	r2, [r7, #16]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	699b      	ldr	r3, [r3, #24]
 800b5f6:	011b      	lsls	r3, r3, #4
 800b5f8:	693a      	ldr	r2, [r7, #16]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	693a      	ldr	r2, [r7, #16]
 800b602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	68fa      	ldr	r2, [r7, #12]
 800b608:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	685a      	ldr	r2, [r3, #4]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	697a      	ldr	r2, [r7, #20]
 800b616:	621a      	str	r2, [r3, #32]
}
 800b618:	bf00      	nop
 800b61a:	371c      	adds	r7, #28
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr
 800b624:	fffeff8f 	.word	0xfffeff8f
 800b628:	40010000 	.word	0x40010000
 800b62c:	40010400 	.word	0x40010400
 800b630:	40014000 	.word	0x40014000
 800b634:	40014400 	.word	0x40014400
 800b638:	40014800 	.word	0x40014800

0800b63c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b087      	sub	sp, #28
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a1b      	ldr	r3, [r3, #32]
 800b64a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6a1b      	ldr	r3, [r3, #32]
 800b656:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	69db      	ldr	r3, [r3, #28]
 800b662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	4b24      	ldr	r3, [pc, #144]	; (800b6f8 <TIM_OC4_SetConfig+0xbc>)
 800b668:	4013      	ands	r3, r2
 800b66a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	021b      	lsls	r3, r3, #8
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	4313      	orrs	r3, r2
 800b67e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b686:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	031b      	lsls	r3, r3, #12
 800b68e:	693a      	ldr	r2, [r7, #16]
 800b690:	4313      	orrs	r3, r2
 800b692:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	4a19      	ldr	r2, [pc, #100]	; (800b6fc <TIM_OC4_SetConfig+0xc0>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d00f      	beq.n	800b6bc <TIM_OC4_SetConfig+0x80>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	4a18      	ldr	r2, [pc, #96]	; (800b700 <TIM_OC4_SetConfig+0xc4>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d00b      	beq.n	800b6bc <TIM_OC4_SetConfig+0x80>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	4a17      	ldr	r2, [pc, #92]	; (800b704 <TIM_OC4_SetConfig+0xc8>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d007      	beq.n	800b6bc <TIM_OC4_SetConfig+0x80>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4a16      	ldr	r2, [pc, #88]	; (800b708 <TIM_OC4_SetConfig+0xcc>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d003      	beq.n	800b6bc <TIM_OC4_SetConfig+0x80>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	4a15      	ldr	r2, [pc, #84]	; (800b70c <TIM_OC4_SetConfig+0xd0>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d109      	bne.n	800b6d0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	695b      	ldr	r3, [r3, #20]
 800b6c8:	019b      	lsls	r3, r3, #6
 800b6ca:	697a      	ldr	r2, [r7, #20]
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	697a      	ldr	r2, [r7, #20]
 800b6d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	68fa      	ldr	r2, [r7, #12]
 800b6da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	685a      	ldr	r2, [r3, #4]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	693a      	ldr	r2, [r7, #16]
 800b6e8:	621a      	str	r2, [r3, #32]
}
 800b6ea:	bf00      	nop
 800b6ec:	371c      	adds	r7, #28
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr
 800b6f6:	bf00      	nop
 800b6f8:	feff8fff 	.word	0xfeff8fff
 800b6fc:	40010000 	.word	0x40010000
 800b700:	40010400 	.word	0x40010400
 800b704:	40014000 	.word	0x40014000
 800b708:	40014400 	.word	0x40014400
 800b70c:	40014800 	.word	0x40014800

0800b710 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b710:	b480      	push	{r7}
 800b712:	b087      	sub	sp, #28
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6a1b      	ldr	r3, [r3, #32]
 800b71e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6a1b      	ldr	r3, [r3, #32]
 800b72a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b738:	68fa      	ldr	r2, [r7, #12]
 800b73a:	4b21      	ldr	r3, [pc, #132]	; (800b7c0 <TIM_OC5_SetConfig+0xb0>)
 800b73c:	4013      	ands	r3, r2
 800b73e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	4313      	orrs	r3, r2
 800b748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b750:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	041b      	lsls	r3, r3, #16
 800b758:	693a      	ldr	r2, [r7, #16]
 800b75a:	4313      	orrs	r3, r2
 800b75c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	4a18      	ldr	r2, [pc, #96]	; (800b7c4 <TIM_OC5_SetConfig+0xb4>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d00f      	beq.n	800b786 <TIM_OC5_SetConfig+0x76>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	4a17      	ldr	r2, [pc, #92]	; (800b7c8 <TIM_OC5_SetConfig+0xb8>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d00b      	beq.n	800b786 <TIM_OC5_SetConfig+0x76>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4a16      	ldr	r2, [pc, #88]	; (800b7cc <TIM_OC5_SetConfig+0xbc>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d007      	beq.n	800b786 <TIM_OC5_SetConfig+0x76>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	4a15      	ldr	r2, [pc, #84]	; (800b7d0 <TIM_OC5_SetConfig+0xc0>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d003      	beq.n	800b786 <TIM_OC5_SetConfig+0x76>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	4a14      	ldr	r2, [pc, #80]	; (800b7d4 <TIM_OC5_SetConfig+0xc4>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d109      	bne.n	800b79a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b78c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	695b      	ldr	r3, [r3, #20]
 800b792:	021b      	lsls	r3, r3, #8
 800b794:	697a      	ldr	r2, [r7, #20]
 800b796:	4313      	orrs	r3, r2
 800b798:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	697a      	ldr	r2, [r7, #20]
 800b79e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	68fa      	ldr	r2, [r7, #12]
 800b7a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	685a      	ldr	r2, [r3, #4]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	693a      	ldr	r2, [r7, #16]
 800b7b2:	621a      	str	r2, [r3, #32]
}
 800b7b4:	bf00      	nop
 800b7b6:	371c      	adds	r7, #28
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr
 800b7c0:	fffeff8f 	.word	0xfffeff8f
 800b7c4:	40010000 	.word	0x40010000
 800b7c8:	40010400 	.word	0x40010400
 800b7cc:	40014000 	.word	0x40014000
 800b7d0:	40014400 	.word	0x40014400
 800b7d4:	40014800 	.word	0x40014800

0800b7d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b087      	sub	sp, #28
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6a1b      	ldr	r3, [r3, #32]
 800b7e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6a1b      	ldr	r3, [r3, #32]
 800b7f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b800:	68fa      	ldr	r2, [r7, #12]
 800b802:	4b22      	ldr	r3, [pc, #136]	; (800b88c <TIM_OC6_SetConfig+0xb4>)
 800b804:	4013      	ands	r3, r2
 800b806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	021b      	lsls	r3, r3, #8
 800b80e:	68fa      	ldr	r2, [r7, #12]
 800b810:	4313      	orrs	r3, r2
 800b812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b81a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	051b      	lsls	r3, r3, #20
 800b822:	693a      	ldr	r2, [r7, #16]
 800b824:	4313      	orrs	r3, r2
 800b826:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	4a19      	ldr	r2, [pc, #100]	; (800b890 <TIM_OC6_SetConfig+0xb8>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d00f      	beq.n	800b850 <TIM_OC6_SetConfig+0x78>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4a18      	ldr	r2, [pc, #96]	; (800b894 <TIM_OC6_SetConfig+0xbc>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d00b      	beq.n	800b850 <TIM_OC6_SetConfig+0x78>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4a17      	ldr	r2, [pc, #92]	; (800b898 <TIM_OC6_SetConfig+0xc0>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d007      	beq.n	800b850 <TIM_OC6_SetConfig+0x78>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4a16      	ldr	r2, [pc, #88]	; (800b89c <TIM_OC6_SetConfig+0xc4>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d003      	beq.n	800b850 <TIM_OC6_SetConfig+0x78>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4a15      	ldr	r2, [pc, #84]	; (800b8a0 <TIM_OC6_SetConfig+0xc8>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d109      	bne.n	800b864 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b856:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	695b      	ldr	r3, [r3, #20]
 800b85c:	029b      	lsls	r3, r3, #10
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	4313      	orrs	r3, r2
 800b862:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	697a      	ldr	r2, [r7, #20]
 800b868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	685a      	ldr	r2, [r3, #4]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	693a      	ldr	r2, [r7, #16]
 800b87c:	621a      	str	r2, [r3, #32]
}
 800b87e:	bf00      	nop
 800b880:	371c      	adds	r7, #28
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr
 800b88a:	bf00      	nop
 800b88c:	feff8fff 	.word	0xfeff8fff
 800b890:	40010000 	.word	0x40010000
 800b894:	40010400 	.word	0x40010400
 800b898:	40014000 	.word	0x40014000
 800b89c:	40014400 	.word	0x40014400
 800b8a0:	40014800 	.word	0x40014800

0800b8a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b087      	sub	sp, #28
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6a1b      	ldr	r3, [r3, #32]
 800b8b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6a1b      	ldr	r3, [r3, #32]
 800b8ba:	f023 0201 	bic.w	r2, r3, #1
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	699b      	ldr	r3, [r3, #24]
 800b8c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b8ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	011b      	lsls	r3, r3, #4
 800b8d4:	693a      	ldr	r2, [r7, #16]
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	f023 030a 	bic.w	r3, r3, #10
 800b8e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b8e2:	697a      	ldr	r2, [r7, #20]
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	693a      	ldr	r2, [r7, #16]
 800b8ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	697a      	ldr	r2, [r7, #20]
 800b8f4:	621a      	str	r2, [r3, #32]
}
 800b8f6:	bf00      	nop
 800b8f8:	371c      	adds	r7, #28
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr

0800b902 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b902:	b480      	push	{r7}
 800b904:	b087      	sub	sp, #28
 800b906:	af00      	add	r7, sp, #0
 800b908:	60f8      	str	r0, [r7, #12]
 800b90a:	60b9      	str	r1, [r7, #8]
 800b90c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	6a1b      	ldr	r3, [r3, #32]
 800b912:	f023 0210 	bic.w	r2, r3, #16
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	699b      	ldr	r3, [r3, #24]
 800b91e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6a1b      	ldr	r3, [r3, #32]
 800b924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b92c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	031b      	lsls	r3, r3, #12
 800b932:	697a      	ldr	r2, [r7, #20]
 800b934:	4313      	orrs	r3, r2
 800b936:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b93e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	011b      	lsls	r3, r3, #4
 800b944:	693a      	ldr	r2, [r7, #16]
 800b946:	4313      	orrs	r3, r2
 800b948:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	697a      	ldr	r2, [r7, #20]
 800b94e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	693a      	ldr	r2, [r7, #16]
 800b954:	621a      	str	r2, [r3, #32]
}
 800b956:	bf00      	nop
 800b958:	371c      	adds	r7, #28
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr
	...

0800b964 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b964:	b480      	push	{r7}
 800b966:	b085      	sub	sp, #20
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	689b      	ldr	r3, [r3, #8]
 800b972:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b974:	68fa      	ldr	r2, [r7, #12]
 800b976:	4b09      	ldr	r3, [pc, #36]	; (800b99c <TIM_ITRx_SetConfig+0x38>)
 800b978:	4013      	ands	r3, r2
 800b97a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b97c:	683a      	ldr	r2, [r7, #0]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	4313      	orrs	r3, r2
 800b982:	f043 0307 	orr.w	r3, r3, #7
 800b986:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	68fa      	ldr	r2, [r7, #12]
 800b98c:	609a      	str	r2, [r3, #8]
}
 800b98e:	bf00      	nop
 800b990:	3714      	adds	r7, #20
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop
 800b99c:	ffcfff8f 	.word	0xffcfff8f

0800b9a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b087      	sub	sp, #28
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	607a      	str	r2, [r7, #4]
 800b9ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b9ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	021a      	lsls	r2, r3, #8
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	431a      	orrs	r2, r3
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	697a      	ldr	r2, [r7, #20]
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	697a      	ldr	r2, [r7, #20]
 800b9d2:	609a      	str	r2, [r3, #8]
}
 800b9d4:	bf00      	nop
 800b9d6:	371c      	adds	r7, #28
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr

0800b9e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b087      	sub	sp, #28
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	f003 031f 	and.w	r3, r3, #31
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b9f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	6a1a      	ldr	r2, [r3, #32]
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	43db      	mvns	r3, r3
 800ba02:	401a      	ands	r2, r3
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6a1a      	ldr	r2, [r3, #32]
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	f003 031f 	and.w	r3, r3, #31
 800ba12:	6879      	ldr	r1, [r7, #4]
 800ba14:	fa01 f303 	lsl.w	r3, r1, r3
 800ba18:	431a      	orrs	r2, r3
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	621a      	str	r2, [r3, #32]
}
 800ba1e:	bf00      	nop
 800ba20:	371c      	adds	r7, #28
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
	...

0800ba2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b085      	sub	sp, #20
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d101      	bne.n	800ba44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba40:	2302      	movs	r3, #2
 800ba42:	e077      	b.n	800bb34 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2201      	movs	r2, #1
 800ba48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2202      	movs	r2, #2
 800ba50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a35      	ldr	r2, [pc, #212]	; (800bb40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d004      	beq.n	800ba78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a34      	ldr	r2, [pc, #208]	; (800bb44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d108      	bne.n	800ba8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ba7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	68fa      	ldr	r2, [r7, #12]
 800ba86:	4313      	orrs	r3, r2
 800ba88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68fa      	ldr	r2, [r7, #12]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a25      	ldr	r2, [pc, #148]	; (800bb40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d02c      	beq.n	800bb08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bab6:	d027      	beq.n	800bb08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a22      	ldr	r2, [pc, #136]	; (800bb48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d022      	beq.n	800bb08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a21      	ldr	r2, [pc, #132]	; (800bb4c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d01d      	beq.n	800bb08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a1f      	ldr	r2, [pc, #124]	; (800bb50 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d018      	beq.n	800bb08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a1a      	ldr	r2, [pc, #104]	; (800bb44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d013      	beq.n	800bb08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a1b      	ldr	r2, [pc, #108]	; (800bb54 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d00e      	beq.n	800bb08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a1a      	ldr	r2, [pc, #104]	; (800bb58 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d009      	beq.n	800bb08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4a18      	ldr	r2, [pc, #96]	; (800bb5c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d004      	beq.n	800bb08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a17      	ldr	r2, [pc, #92]	; (800bb60 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d10c      	bne.n	800bb22 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	68ba      	ldr	r2, [r7, #8]
 800bb16:	4313      	orrs	r3, r2
 800bb18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	68ba      	ldr	r2, [r7, #8]
 800bb20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2201      	movs	r2, #1
 800bb26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr
 800bb40:	40010000 	.word	0x40010000
 800bb44:	40010400 	.word	0x40010400
 800bb48:	40000400 	.word	0x40000400
 800bb4c:	40000800 	.word	0x40000800
 800bb50:	40000c00 	.word	0x40000c00
 800bb54:	40001800 	.word	0x40001800
 800bb58:	40014000 	.word	0x40014000
 800bb5c:	4000e000 	.word	0x4000e000
 800bb60:	4000e400 	.word	0x4000e400

0800bb64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d101      	bne.n	800bb80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bb7c:	2302      	movs	r3, #2
 800bb7e:	e087      	b.n	800bc90 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	691b      	ldr	r3, [r3, #16]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	695b      	ldr	r3, [r3, #20]
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	699b      	ldr	r3, [r3, #24]
 800bbf4:	041b      	lsls	r3, r3, #16
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4a27      	ldr	r2, [pc, #156]	; (800bc9c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d004      	beq.n	800bc0e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4a25      	ldr	r2, [pc, #148]	; (800bca0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d106      	bne.n	800bc1c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	69db      	ldr	r3, [r3, #28]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a1e      	ldr	r2, [pc, #120]	; (800bc9c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d004      	beq.n	800bc30 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a1d      	ldr	r2, [pc, #116]	; (800bca0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d126      	bne.n	800bc7e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc3a:	051b      	lsls	r3, r3, #20
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	6a1b      	ldr	r3, [r3, #32]
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4a0e      	ldr	r2, [pc, #56]	; (800bc9c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d004      	beq.n	800bc70 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a0d      	ldr	r2, [pc, #52]	; (800bca0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d106      	bne.n	800bc7e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	68fa      	ldr	r2, [r7, #12]
 800bc84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc8e:	2300      	movs	r3, #0
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3714      	adds	r7, #20
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr
 800bc9c:	40010000 	.word	0x40010000
 800bca0:	40010400 	.word	0x40010400

0800bca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bcac:	bf00      	nop
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b083      	sub	sp, #12
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bcc0:	bf00      	nop
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bcd4:	bf00      	nop
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d101      	bne.n	800bcf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	e042      	b.n	800bd78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d106      	bne.n	800bd0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f7f7 ff3b 	bl	8003b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2224      	movs	r2, #36	; 0x24
 800bd0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f022 0201 	bic.w	r2, r2, #1
 800bd20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 fd12 	bl	800c74c <UART_SetConfig>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d101      	bne.n	800bd32 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e022      	b.n	800bd78 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d002      	beq.n	800bd40 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f001 fb72 	bl	800d424 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	685a      	ldr	r2, [r3, #4]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bd4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	689a      	ldr	r2, [r3, #8]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f042 0201 	orr.w	r2, r2, #1
 800bd6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f001 fbf9 	bl	800d568 <UART_CheckIdleState>
 800bd76:	4603      	mov	r3, r0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3708      	adds	r7, #8
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d101      	bne.n	800bd92 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e031      	b.n	800bdf6 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2224      	movs	r2, #36	; 0x24
 800bd96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f022 0201 	bic.w	r2, r2, #1
 800bda8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f7f7 ffb4 	bl	8003d30 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2200      	movs	r2, #0
 800bdea:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3708      	adds	r7, #8
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
	...

0800be00 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b08a      	sub	sp, #40	; 0x28
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	4613      	mov	r3, r2
 800be0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be14:	2b20      	cmp	r3, #32
 800be16:	d167      	bne.n	800bee8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d002      	beq.n	800be24 <HAL_UART_Transmit_DMA+0x24>
 800be1e:	88fb      	ldrh	r3, [r7, #6]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d101      	bne.n	800be28 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800be24:	2301      	movs	r3, #1
 800be26:	e060      	b.n	800beea <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	68ba      	ldr	r2, [r7, #8]
 800be2c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	88fa      	ldrh	r2, [r7, #6]
 800be32:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	88fa      	ldrh	r2, [r7, #6]
 800be3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2200      	movs	r2, #0
 800be42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2221      	movs	r2, #33	; 0x21
 800be4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be52:	2b00      	cmp	r3, #0
 800be54:	d028      	beq.n	800bea8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be5a:	4a26      	ldr	r2, [pc, #152]	; (800bef4 <HAL_UART_Transmit_DMA+0xf4>)
 800be5c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be62:	4a25      	ldr	r2, [pc, #148]	; (800bef8 <HAL_UART_Transmit_DMA+0xf8>)
 800be64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be6a:	4a24      	ldr	r2, [pc, #144]	; (800befc <HAL_UART_Transmit_DMA+0xfc>)
 800be6c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be72:	2200      	movs	r2, #0
 800be74:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be7e:	4619      	mov	r1, r3
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	3328      	adds	r3, #40	; 0x28
 800be86:	461a      	mov	r2, r3
 800be88:	88fb      	ldrh	r3, [r7, #6]
 800be8a:	f7f8 ffaf 	bl	8004dec <HAL_DMA_Start_IT>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d009      	beq.n	800bea8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2210      	movs	r2, #16
 800be98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2220      	movs	r2, #32
 800bea0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800bea4:	2301      	movs	r3, #1
 800bea6:	e020      	b.n	800beea <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2240      	movs	r2, #64	; 0x40
 800beae:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	3308      	adds	r3, #8
 800beb6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	e853 3f00 	ldrex	r3, [r3]
 800bebe:	613b      	str	r3, [r7, #16]
   return(result);
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bec6:	627b      	str	r3, [r7, #36]	; 0x24
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	3308      	adds	r3, #8
 800bece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bed0:	623a      	str	r2, [r7, #32]
 800bed2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed4:	69f9      	ldr	r1, [r7, #28]
 800bed6:	6a3a      	ldr	r2, [r7, #32]
 800bed8:	e841 2300 	strex	r3, r2, [r1]
 800bedc:	61bb      	str	r3, [r7, #24]
   return(result);
 800bede:	69bb      	ldr	r3, [r7, #24]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d1e5      	bne.n	800beb0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800bee4:	2300      	movs	r3, #0
 800bee6:	e000      	b.n	800beea <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800bee8:	2302      	movs	r3, #2
  }
}
 800beea:	4618      	mov	r0, r3
 800beec:	3728      	adds	r7, #40	; 0x28
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	0800da29 	.word	0x0800da29
 800bef8:	0800dabf 	.word	0x0800dabf
 800befc:	0800dc41 	.word	0x0800dc41

0800bf00 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b08a      	sub	sp, #40	; 0x28
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf14:	2b20      	cmp	r3, #32
 800bf16:	d137      	bne.n	800bf88 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d002      	beq.n	800bf24 <HAL_UART_Receive_DMA+0x24>
 800bf1e:	88fb      	ldrh	r3, [r7, #6]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d101      	bne.n	800bf28 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bf24:	2301      	movs	r3, #1
 800bf26:	e030      	b.n	800bf8a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4a18      	ldr	r2, [pc, #96]	; (800bf94 <HAL_UART_Receive_DMA+0x94>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d01f      	beq.n	800bf78 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d018      	beq.n	800bf78 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	e853 3f00 	ldrex	r3, [r3]
 800bf52:	613b      	str	r3, [r7, #16]
   return(result);
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bf5a:	627b      	str	r3, [r7, #36]	; 0x24
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	461a      	mov	r2, r3
 800bf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf64:	623b      	str	r3, [r7, #32]
 800bf66:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf68:	69f9      	ldr	r1, [r7, #28]
 800bf6a:	6a3a      	ldr	r2, [r7, #32]
 800bf6c:	e841 2300 	strex	r3, r2, [r1]
 800bf70:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf72:	69bb      	ldr	r3, [r7, #24]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d1e6      	bne.n	800bf46 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bf78:	88fb      	ldrh	r3, [r7, #6]
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	68b9      	ldr	r1, [r7, #8]
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	f001 fc04 	bl	800d78c <UART_Start_Receive_DMA>
 800bf84:	4603      	mov	r3, r0
 800bf86:	e000      	b.n	800bf8a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bf88:	2302      	movs	r3, #2
  }
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3728      	adds	r7, #40	; 0x28
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	bf00      	nop
 800bf94:	58000c00 	.word	0x58000c00

0800bf98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b0ba      	sub	sp, #232	; 0xe8
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	69db      	ldr	r3, [r3, #28]
 800bfa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bfbe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bfc2:	f640 030f 	movw	r3, #2063	; 0x80f
 800bfc6:	4013      	ands	r3, r2
 800bfc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bfcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d11b      	bne.n	800c00c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bfd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfd8:	f003 0320 	and.w	r3, r3, #32
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d015      	beq.n	800c00c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bfe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfe4:	f003 0320 	and.w	r3, r3, #32
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d105      	bne.n	800bff8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bfec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d009      	beq.n	800c00c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	f000 8377 	beq.w	800c6f0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	4798      	blx	r3
      }
      return;
 800c00a:	e371      	b.n	800c6f0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c00c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c010:	2b00      	cmp	r3, #0
 800c012:	f000 8123 	beq.w	800c25c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c016:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c01a:	4b8d      	ldr	r3, [pc, #564]	; (800c250 <HAL_UART_IRQHandler+0x2b8>)
 800c01c:	4013      	ands	r3, r2
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d106      	bne.n	800c030 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c022:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c026:	4b8b      	ldr	r3, [pc, #556]	; (800c254 <HAL_UART_IRQHandler+0x2bc>)
 800c028:	4013      	ands	r3, r2
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	f000 8116 	beq.w	800c25c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c034:	f003 0301 	and.w	r3, r3, #1
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d011      	beq.n	800c060 <HAL_UART_IRQHandler+0xc8>
 800c03c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00b      	beq.n	800c060 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2201      	movs	r2, #1
 800c04e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c056:	f043 0201 	orr.w	r2, r3, #1
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c064:	f003 0302 	and.w	r3, r3, #2
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d011      	beq.n	800c090 <HAL_UART_IRQHandler+0xf8>
 800c06c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c070:	f003 0301 	and.w	r3, r3, #1
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00b      	beq.n	800c090 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2202      	movs	r2, #2
 800c07e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c086:	f043 0204 	orr.w	r2, r3, #4
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c094:	f003 0304 	and.w	r3, r3, #4
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d011      	beq.n	800c0c0 <HAL_UART_IRQHandler+0x128>
 800c09c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0a0:	f003 0301 	and.w	r3, r3, #1
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d00b      	beq.n	800c0c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2204      	movs	r2, #4
 800c0ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0b6:	f043 0202 	orr.w	r2, r3, #2
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c0c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0c4:	f003 0308 	and.w	r3, r3, #8
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d017      	beq.n	800c0fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c0cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0d0:	f003 0320 	and.w	r3, r3, #32
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d105      	bne.n	800c0e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c0d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c0dc:	4b5c      	ldr	r3, [pc, #368]	; (800c250 <HAL_UART_IRQHandler+0x2b8>)
 800c0de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00b      	beq.n	800c0fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2208      	movs	r2, #8
 800c0ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0f2:	f043 0208 	orr.w	r2, r3, #8
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c0fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c104:	2b00      	cmp	r3, #0
 800c106:	d012      	beq.n	800c12e <HAL_UART_IRQHandler+0x196>
 800c108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c10c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c110:	2b00      	cmp	r3, #0
 800c112:	d00c      	beq.n	800c12e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c11c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c124:	f043 0220 	orr.w	r2, r3, #32
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c134:	2b00      	cmp	r3, #0
 800c136:	f000 82dd 	beq.w	800c6f4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c13a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c13e:	f003 0320 	and.w	r3, r3, #32
 800c142:	2b00      	cmp	r3, #0
 800c144:	d013      	beq.n	800c16e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c14a:	f003 0320 	and.w	r3, r3, #32
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d105      	bne.n	800c15e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d007      	beq.n	800c16e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c162:	2b00      	cmp	r3, #0
 800c164:	d003      	beq.n	800c16e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c174:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	689b      	ldr	r3, [r3, #8]
 800c17e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c182:	2b40      	cmp	r3, #64	; 0x40
 800c184:	d005      	beq.n	800c192 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c18a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d054      	beq.n	800c23c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f001 fbe2 	bl	800d95c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1a2:	2b40      	cmp	r3, #64	; 0x40
 800c1a4:	d146      	bne.n	800c234 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	3308      	adds	r3, #8
 800c1ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c1b4:	e853 3f00 	ldrex	r3, [r3]
 800c1b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c1bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c1c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	3308      	adds	r3, #8
 800c1ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c1d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c1d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c1de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c1e2:	e841 2300 	strex	r3, r2, [r1]
 800c1e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c1ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d1d9      	bne.n	800c1a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d017      	beq.n	800c22c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c202:	4a15      	ldr	r2, [pc, #84]	; (800c258 <HAL_UART_IRQHandler+0x2c0>)
 800c204:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7f9 fb75 	bl	80058fc <HAL_DMA_Abort_IT>
 800c212:	4603      	mov	r3, r0
 800c214:	2b00      	cmp	r3, #0
 800c216:	d019      	beq.n	800c24c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c21e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800c226:	4610      	mov	r0, r2
 800c228:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c22a:	e00f      	b.n	800c24c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7f4 fe21 	bl	8000e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c232:	e00b      	b.n	800c24c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f7f4 fe1d 	bl	8000e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c23a:	e007      	b.n	800c24c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f7f4 fe19 	bl	8000e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800c24a:	e253      	b.n	800c6f4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c24c:	bf00      	nop
    return;
 800c24e:	e251      	b.n	800c6f4 <HAL_UART_IRQHandler+0x75c>
 800c250:	10000001 	.word	0x10000001
 800c254:	04000120 	.word	0x04000120
 800c258:	0800dcc1 	.word	0x0800dcc1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c260:	2b01      	cmp	r3, #1
 800c262:	f040 81e7 	bne.w	800c634 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c26a:	f003 0310 	and.w	r3, r3, #16
 800c26e:	2b00      	cmp	r3, #0
 800c270:	f000 81e0 	beq.w	800c634 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c278:	f003 0310 	and.w	r3, r3, #16
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	f000 81d9 	beq.w	800c634 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	2210      	movs	r2, #16
 800c288:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c294:	2b40      	cmp	r3, #64	; 0x40
 800c296:	f040 8151 	bne.w	800c53c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4a96      	ldr	r2, [pc, #600]	; (800c4fc <HAL_UART_IRQHandler+0x564>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d068      	beq.n	800c37a <HAL_UART_IRQHandler+0x3e2>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a93      	ldr	r2, [pc, #588]	; (800c500 <HAL_UART_IRQHandler+0x568>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d061      	beq.n	800c37a <HAL_UART_IRQHandler+0x3e2>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a91      	ldr	r2, [pc, #580]	; (800c504 <HAL_UART_IRQHandler+0x56c>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d05a      	beq.n	800c37a <HAL_UART_IRQHandler+0x3e2>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a8e      	ldr	r2, [pc, #568]	; (800c508 <HAL_UART_IRQHandler+0x570>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d053      	beq.n	800c37a <HAL_UART_IRQHandler+0x3e2>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a8c      	ldr	r2, [pc, #560]	; (800c50c <HAL_UART_IRQHandler+0x574>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d04c      	beq.n	800c37a <HAL_UART_IRQHandler+0x3e2>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a89      	ldr	r2, [pc, #548]	; (800c510 <HAL_UART_IRQHandler+0x578>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d045      	beq.n	800c37a <HAL_UART_IRQHandler+0x3e2>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4a87      	ldr	r2, [pc, #540]	; (800c514 <HAL_UART_IRQHandler+0x57c>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d03e      	beq.n	800c37a <HAL_UART_IRQHandler+0x3e2>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a84      	ldr	r2, [pc, #528]	; (800c518 <HAL_UART_IRQHandler+0x580>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d037      	beq.n	800c37a <HAL_UART_IRQHandler+0x3e2>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a82      	ldr	r2, [pc, #520]	; (800c51c <HAL_UART_IRQHandler+0x584>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d030      	beq.n	800c37a <HAL_UART_IRQHandler+0x3e2>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a7f      	ldr	r2, [pc, #508]	; (800c520 <HAL_UART_IRQHandler+0x588>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d029      	beq.n	800c37a <HAL_UART_IRQHandler+0x3e2>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4a7d      	ldr	r2, [pc, #500]	; (800c524 <HAL_UART_IRQHandler+0x58c>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d022      	beq.n	800c37a <HAL_UART_IRQHandler+0x3e2>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a7a      	ldr	r2, [pc, #488]	; (800c528 <HAL_UART_IRQHandler+0x590>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d01b      	beq.n	800c37a <HAL_UART_IRQHandler+0x3e2>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a78      	ldr	r2, [pc, #480]	; (800c52c <HAL_UART_IRQHandler+0x594>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d014      	beq.n	800c37a <HAL_UART_IRQHandler+0x3e2>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a75      	ldr	r2, [pc, #468]	; (800c530 <HAL_UART_IRQHandler+0x598>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d00d      	beq.n	800c37a <HAL_UART_IRQHandler+0x3e2>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4a73      	ldr	r2, [pc, #460]	; (800c534 <HAL_UART_IRQHandler+0x59c>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d006      	beq.n	800c37a <HAL_UART_IRQHandler+0x3e2>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a70      	ldr	r2, [pc, #448]	; (800c538 <HAL_UART_IRQHandler+0x5a0>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d106      	bne.n	800c388 <HAL_UART_IRQHandler+0x3f0>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	b29b      	uxth	r3, r3
 800c386:	e005      	b.n	800c394 <HAL_UART_IRQHandler+0x3fc>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	b29b      	uxth	r3, r3
 800c394:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c398:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	f000 81ab 	beq.w	800c6f8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c3a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	f080 81a3 	bcs.w	800c6f8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c3b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3c2:	69db      	ldr	r3, [r3, #28]
 800c3c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3c8:	f000 8087 	beq.w	800c4da <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c3d8:	e853 3f00 	ldrex	r3, [r3]
 800c3dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c3e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c3f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c3fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c402:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c406:	e841 2300 	strex	r3, r2, [r1]
 800c40a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c40e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c412:	2b00      	cmp	r3, #0
 800c414:	d1da      	bne.n	800c3cc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	3308      	adds	r3, #8
 800c41c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c41e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c420:	e853 3f00 	ldrex	r3, [r3]
 800c424:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c426:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c428:	f023 0301 	bic.w	r3, r3, #1
 800c42c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	3308      	adds	r3, #8
 800c436:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c43a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c43e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c440:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c442:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c446:	e841 2300 	strex	r3, r2, [r1]
 800c44a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c44c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d1e1      	bne.n	800c416 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	3308      	adds	r3, #8
 800c458:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c45c:	e853 3f00 	ldrex	r3, [r3]
 800c460:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c468:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	3308      	adds	r3, #8
 800c472:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c476:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c478:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c47c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c47e:	e841 2300 	strex	r3, r2, [r1]
 800c482:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c486:	2b00      	cmp	r3, #0
 800c488:	d1e3      	bne.n	800c452 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2220      	movs	r2, #32
 800c48e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2200      	movs	r2, #0
 800c496:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c49e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4a0:	e853 3f00 	ldrex	r3, [r3]
 800c4a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c4a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4a8:	f023 0310 	bic.w	r3, r3, #16
 800c4ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c4ba:	65bb      	str	r3, [r7, #88]	; 0x58
 800c4bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c4c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c4c2:	e841 2300 	strex	r3, r2, [r1]
 800c4c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c4c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d1e4      	bne.n	800c498 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7f8 fef3 	bl	80052c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2202      	movs	r2, #2
 800c4de:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	1ad3      	subs	r3, r2, r3
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 f91d 	bl	800c734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c4fa:	e0fd      	b.n	800c6f8 <HAL_UART_IRQHandler+0x760>
 800c4fc:	40020010 	.word	0x40020010
 800c500:	40020028 	.word	0x40020028
 800c504:	40020040 	.word	0x40020040
 800c508:	40020058 	.word	0x40020058
 800c50c:	40020070 	.word	0x40020070
 800c510:	40020088 	.word	0x40020088
 800c514:	400200a0 	.word	0x400200a0
 800c518:	400200b8 	.word	0x400200b8
 800c51c:	40020410 	.word	0x40020410
 800c520:	40020428 	.word	0x40020428
 800c524:	40020440 	.word	0x40020440
 800c528:	40020458 	.word	0x40020458
 800c52c:	40020470 	.word	0x40020470
 800c530:	40020488 	.word	0x40020488
 800c534:	400204a0 	.word	0x400204a0
 800c538:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c548:	b29b      	uxth	r3, r3
 800c54a:	1ad3      	subs	r3, r2, r3
 800c54c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c556:	b29b      	uxth	r3, r3
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f000 80cf 	beq.w	800c6fc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c55e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c562:	2b00      	cmp	r3, #0
 800c564:	f000 80ca 	beq.w	800c6fc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c570:	e853 3f00 	ldrex	r3, [r3]
 800c574:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c578:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c57c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	461a      	mov	r2, r3
 800c586:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c58a:	647b      	str	r3, [r7, #68]	; 0x44
 800c58c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c58e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c590:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c592:	e841 2300 	strex	r3, r2, [r1]
 800c596:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d1e4      	bne.n	800c568 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	3308      	adds	r3, #8
 800c5a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a8:	e853 3f00 	ldrex	r3, [r3]
 800c5ac:	623b      	str	r3, [r7, #32]
   return(result);
 800c5ae:	6a3a      	ldr	r2, [r7, #32]
 800c5b0:	4b55      	ldr	r3, [pc, #340]	; (800c708 <HAL_UART_IRQHandler+0x770>)
 800c5b2:	4013      	ands	r3, r2
 800c5b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	3308      	adds	r3, #8
 800c5be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c5c2:	633a      	str	r2, [r7, #48]	; 0x30
 800c5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5ca:	e841 2300 	strex	r3, r2, [r1]
 800c5ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d1e3      	bne.n	800c59e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2220      	movs	r2, #32
 800c5da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	e853 3f00 	ldrex	r3, [r3]
 800c5f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f023 0310 	bic.w	r3, r3, #16
 800c5fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	461a      	mov	r2, r3
 800c608:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c60c:	61fb      	str	r3, [r7, #28]
 800c60e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c610:	69b9      	ldr	r1, [r7, #24]
 800c612:	69fa      	ldr	r2, [r7, #28]
 800c614:	e841 2300 	strex	r3, r2, [r1]
 800c618:	617b      	str	r3, [r7, #20]
   return(result);
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1e4      	bne.n	800c5ea <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2202      	movs	r2, #2
 800c624:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c626:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c62a:	4619      	mov	r1, r3
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 f881 	bl	800c734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c632:	e063      	b.n	800c6fc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d00e      	beq.n	800c65e <HAL_UART_IRQHandler+0x6c6>
 800c640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d008      	beq.n	800c65e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c654:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f001 fb73 	bl	800dd42 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c65c:	e051      	b.n	800c702 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c65e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c666:	2b00      	cmp	r3, #0
 800c668:	d014      	beq.n	800c694 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c66a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c66e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c672:	2b00      	cmp	r3, #0
 800c674:	d105      	bne.n	800c682 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c67a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d008      	beq.n	800c694 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c686:	2b00      	cmp	r3, #0
 800c688:	d03a      	beq.n	800c700 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	4798      	blx	r3
    }
    return;
 800c692:	e035      	b.n	800c700 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d009      	beq.n	800c6b4 <HAL_UART_IRQHandler+0x71c>
 800c6a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d003      	beq.n	800c6b4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f001 fb1d 	bl	800dcec <UART_EndTransmit_IT>
    return;
 800c6b2:	e026      	b.n	800c702 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c6b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d009      	beq.n	800c6d4 <HAL_UART_IRQHandler+0x73c>
 800c6c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d003      	beq.n	800c6d4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f001 fb4c 	bl	800dd6a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c6d2:	e016      	b.n	800c702 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c6d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d010      	beq.n	800c702 <HAL_UART_IRQHandler+0x76a>
 800c6e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	da0c      	bge.n	800c702 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f001 fb34 	bl	800dd56 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c6ee:	e008      	b.n	800c702 <HAL_UART_IRQHandler+0x76a>
      return;
 800c6f0:	bf00      	nop
 800c6f2:	e006      	b.n	800c702 <HAL_UART_IRQHandler+0x76a>
    return;
 800c6f4:	bf00      	nop
 800c6f6:	e004      	b.n	800c702 <HAL_UART_IRQHandler+0x76a>
      return;
 800c6f8:	bf00      	nop
 800c6fa:	e002      	b.n	800c702 <HAL_UART_IRQHandler+0x76a>
      return;
 800c6fc:	bf00      	nop
 800c6fe:	e000      	b.n	800c702 <HAL_UART_IRQHandler+0x76a>
    return;
 800c700:	bf00      	nop
  }
}
 800c702:	37e8      	adds	r7, #232	; 0xe8
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}
 800c708:	effffffe 	.word	0xeffffffe

0800c70c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c714:	bf00      	nop
 800c716:	370c      	adds	r7, #12
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr

0800c720 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c720:	b480      	push	{r7}
 800c722:	b083      	sub	sp, #12
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c728:	bf00      	nop
 800c72a:	370c      	adds	r7, #12
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	460b      	mov	r3, r1
 800c73e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c740:	bf00      	nop
 800c742:	370c      	adds	r7, #12
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr

0800c74c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c74c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c750:	b092      	sub	sp, #72	; 0x48
 800c752:	af00      	add	r7, sp, #0
 800c754:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c756:	2300      	movs	r3, #0
 800c758:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	689a      	ldr	r2, [r3, #8]
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	691b      	ldr	r3, [r3, #16]
 800c764:	431a      	orrs	r2, r3
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	695b      	ldr	r3, [r3, #20]
 800c76a:	431a      	orrs	r2, r3
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	69db      	ldr	r3, [r3, #28]
 800c770:	4313      	orrs	r3, r2
 800c772:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	4bbe      	ldr	r3, [pc, #760]	; (800ca74 <UART_SetConfig+0x328>)
 800c77c:	4013      	ands	r3, r2
 800c77e:	697a      	ldr	r2, [r7, #20]
 800c780:	6812      	ldr	r2, [r2, #0]
 800c782:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c784:	430b      	orrs	r3, r1
 800c786:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	68da      	ldr	r2, [r3, #12]
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	430a      	orrs	r2, r1
 800c79c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	699b      	ldr	r3, [r3, #24]
 800c7a2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4ab3      	ldr	r2, [pc, #716]	; (800ca78 <UART_SetConfig+0x32c>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d004      	beq.n	800c7b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	6a1b      	ldr	r3, [r3, #32]
 800c7b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	689a      	ldr	r2, [r3, #8]
 800c7be:	4baf      	ldr	r3, [pc, #700]	; (800ca7c <UART_SetConfig+0x330>)
 800c7c0:	4013      	ands	r3, r2
 800c7c2:	697a      	ldr	r2, [r7, #20]
 800c7c4:	6812      	ldr	r2, [r2, #0]
 800c7c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c7c8:	430b      	orrs	r3, r1
 800c7ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d2:	f023 010f 	bic.w	r1, r3, #15
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	430a      	orrs	r2, r1
 800c7e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4aa6      	ldr	r2, [pc, #664]	; (800ca80 <UART_SetConfig+0x334>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d177      	bne.n	800c8dc <UART_SetConfig+0x190>
 800c7ec:	4ba5      	ldr	r3, [pc, #660]	; (800ca84 <UART_SetConfig+0x338>)
 800c7ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c7f4:	2b28      	cmp	r3, #40	; 0x28
 800c7f6:	d86d      	bhi.n	800c8d4 <UART_SetConfig+0x188>
 800c7f8:	a201      	add	r2, pc, #4	; (adr r2, 800c800 <UART_SetConfig+0xb4>)
 800c7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7fe:	bf00      	nop
 800c800:	0800c8a5 	.word	0x0800c8a5
 800c804:	0800c8d5 	.word	0x0800c8d5
 800c808:	0800c8d5 	.word	0x0800c8d5
 800c80c:	0800c8d5 	.word	0x0800c8d5
 800c810:	0800c8d5 	.word	0x0800c8d5
 800c814:	0800c8d5 	.word	0x0800c8d5
 800c818:	0800c8d5 	.word	0x0800c8d5
 800c81c:	0800c8d5 	.word	0x0800c8d5
 800c820:	0800c8ad 	.word	0x0800c8ad
 800c824:	0800c8d5 	.word	0x0800c8d5
 800c828:	0800c8d5 	.word	0x0800c8d5
 800c82c:	0800c8d5 	.word	0x0800c8d5
 800c830:	0800c8d5 	.word	0x0800c8d5
 800c834:	0800c8d5 	.word	0x0800c8d5
 800c838:	0800c8d5 	.word	0x0800c8d5
 800c83c:	0800c8d5 	.word	0x0800c8d5
 800c840:	0800c8b5 	.word	0x0800c8b5
 800c844:	0800c8d5 	.word	0x0800c8d5
 800c848:	0800c8d5 	.word	0x0800c8d5
 800c84c:	0800c8d5 	.word	0x0800c8d5
 800c850:	0800c8d5 	.word	0x0800c8d5
 800c854:	0800c8d5 	.word	0x0800c8d5
 800c858:	0800c8d5 	.word	0x0800c8d5
 800c85c:	0800c8d5 	.word	0x0800c8d5
 800c860:	0800c8bd 	.word	0x0800c8bd
 800c864:	0800c8d5 	.word	0x0800c8d5
 800c868:	0800c8d5 	.word	0x0800c8d5
 800c86c:	0800c8d5 	.word	0x0800c8d5
 800c870:	0800c8d5 	.word	0x0800c8d5
 800c874:	0800c8d5 	.word	0x0800c8d5
 800c878:	0800c8d5 	.word	0x0800c8d5
 800c87c:	0800c8d5 	.word	0x0800c8d5
 800c880:	0800c8c5 	.word	0x0800c8c5
 800c884:	0800c8d5 	.word	0x0800c8d5
 800c888:	0800c8d5 	.word	0x0800c8d5
 800c88c:	0800c8d5 	.word	0x0800c8d5
 800c890:	0800c8d5 	.word	0x0800c8d5
 800c894:	0800c8d5 	.word	0x0800c8d5
 800c898:	0800c8d5 	.word	0x0800c8d5
 800c89c:	0800c8d5 	.word	0x0800c8d5
 800c8a0:	0800c8cd 	.word	0x0800c8cd
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8aa:	e326      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c8ac:	2304      	movs	r3, #4
 800c8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8b2:	e322      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c8b4:	2308      	movs	r3, #8
 800c8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ba:	e31e      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c8bc:	2310      	movs	r3, #16
 800c8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8c2:	e31a      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c8c4:	2320      	movs	r3, #32
 800c8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ca:	e316      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c8cc:	2340      	movs	r3, #64	; 0x40
 800c8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8d2:	e312      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c8d4:	2380      	movs	r3, #128	; 0x80
 800c8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8da:	e30e      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a69      	ldr	r2, [pc, #420]	; (800ca88 <UART_SetConfig+0x33c>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d130      	bne.n	800c948 <UART_SetConfig+0x1fc>
 800c8e6:	4b67      	ldr	r3, [pc, #412]	; (800ca84 <UART_SetConfig+0x338>)
 800c8e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8ea:	f003 0307 	and.w	r3, r3, #7
 800c8ee:	2b05      	cmp	r3, #5
 800c8f0:	d826      	bhi.n	800c940 <UART_SetConfig+0x1f4>
 800c8f2:	a201      	add	r2, pc, #4	; (adr r2, 800c8f8 <UART_SetConfig+0x1ac>)
 800c8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f8:	0800c911 	.word	0x0800c911
 800c8fc:	0800c919 	.word	0x0800c919
 800c900:	0800c921 	.word	0x0800c921
 800c904:	0800c929 	.word	0x0800c929
 800c908:	0800c931 	.word	0x0800c931
 800c90c:	0800c939 	.word	0x0800c939
 800c910:	2300      	movs	r3, #0
 800c912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c916:	e2f0      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c918:	2304      	movs	r3, #4
 800c91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c91e:	e2ec      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c920:	2308      	movs	r3, #8
 800c922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c926:	e2e8      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c928:	2310      	movs	r3, #16
 800c92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c92e:	e2e4      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c930:	2320      	movs	r3, #32
 800c932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c936:	e2e0      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c938:	2340      	movs	r3, #64	; 0x40
 800c93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c93e:	e2dc      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c940:	2380      	movs	r3, #128	; 0x80
 800c942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c946:	e2d8      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a4f      	ldr	r2, [pc, #316]	; (800ca8c <UART_SetConfig+0x340>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d130      	bne.n	800c9b4 <UART_SetConfig+0x268>
 800c952:	4b4c      	ldr	r3, [pc, #304]	; (800ca84 <UART_SetConfig+0x338>)
 800c954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c956:	f003 0307 	and.w	r3, r3, #7
 800c95a:	2b05      	cmp	r3, #5
 800c95c:	d826      	bhi.n	800c9ac <UART_SetConfig+0x260>
 800c95e:	a201      	add	r2, pc, #4	; (adr r2, 800c964 <UART_SetConfig+0x218>)
 800c960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c964:	0800c97d 	.word	0x0800c97d
 800c968:	0800c985 	.word	0x0800c985
 800c96c:	0800c98d 	.word	0x0800c98d
 800c970:	0800c995 	.word	0x0800c995
 800c974:	0800c99d 	.word	0x0800c99d
 800c978:	0800c9a5 	.word	0x0800c9a5
 800c97c:	2300      	movs	r3, #0
 800c97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c982:	e2ba      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c984:	2304      	movs	r3, #4
 800c986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c98a:	e2b6      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c98c:	2308      	movs	r3, #8
 800c98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c992:	e2b2      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c994:	2310      	movs	r3, #16
 800c996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c99a:	e2ae      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c99c:	2320      	movs	r3, #32
 800c99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9a2:	e2aa      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c9a4:	2340      	movs	r3, #64	; 0x40
 800c9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9aa:	e2a6      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c9ac:	2380      	movs	r3, #128	; 0x80
 800c9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9b2:	e2a2      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a35      	ldr	r2, [pc, #212]	; (800ca90 <UART_SetConfig+0x344>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d130      	bne.n	800ca20 <UART_SetConfig+0x2d4>
 800c9be:	4b31      	ldr	r3, [pc, #196]	; (800ca84 <UART_SetConfig+0x338>)
 800c9c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9c2:	f003 0307 	and.w	r3, r3, #7
 800c9c6:	2b05      	cmp	r3, #5
 800c9c8:	d826      	bhi.n	800ca18 <UART_SetConfig+0x2cc>
 800c9ca:	a201      	add	r2, pc, #4	; (adr r2, 800c9d0 <UART_SetConfig+0x284>)
 800c9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d0:	0800c9e9 	.word	0x0800c9e9
 800c9d4:	0800c9f1 	.word	0x0800c9f1
 800c9d8:	0800c9f9 	.word	0x0800c9f9
 800c9dc:	0800ca01 	.word	0x0800ca01
 800c9e0:	0800ca09 	.word	0x0800ca09
 800c9e4:	0800ca11 	.word	0x0800ca11
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ee:	e284      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c9f0:	2304      	movs	r3, #4
 800c9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9f6:	e280      	b.n	800cefa <UART_SetConfig+0x7ae>
 800c9f8:	2308      	movs	r3, #8
 800c9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9fe:	e27c      	b.n	800cefa <UART_SetConfig+0x7ae>
 800ca00:	2310      	movs	r3, #16
 800ca02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca06:	e278      	b.n	800cefa <UART_SetConfig+0x7ae>
 800ca08:	2320      	movs	r3, #32
 800ca0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca0e:	e274      	b.n	800cefa <UART_SetConfig+0x7ae>
 800ca10:	2340      	movs	r3, #64	; 0x40
 800ca12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca16:	e270      	b.n	800cefa <UART_SetConfig+0x7ae>
 800ca18:	2380      	movs	r3, #128	; 0x80
 800ca1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca1e:	e26c      	b.n	800cefa <UART_SetConfig+0x7ae>
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a1b      	ldr	r2, [pc, #108]	; (800ca94 <UART_SetConfig+0x348>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d142      	bne.n	800cab0 <UART_SetConfig+0x364>
 800ca2a:	4b16      	ldr	r3, [pc, #88]	; (800ca84 <UART_SetConfig+0x338>)
 800ca2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca2e:	f003 0307 	and.w	r3, r3, #7
 800ca32:	2b05      	cmp	r3, #5
 800ca34:	d838      	bhi.n	800caa8 <UART_SetConfig+0x35c>
 800ca36:	a201      	add	r2, pc, #4	; (adr r2, 800ca3c <UART_SetConfig+0x2f0>)
 800ca38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca3c:	0800ca55 	.word	0x0800ca55
 800ca40:	0800ca5d 	.word	0x0800ca5d
 800ca44:	0800ca65 	.word	0x0800ca65
 800ca48:	0800ca6d 	.word	0x0800ca6d
 800ca4c:	0800ca99 	.word	0x0800ca99
 800ca50:	0800caa1 	.word	0x0800caa1
 800ca54:	2300      	movs	r3, #0
 800ca56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca5a:	e24e      	b.n	800cefa <UART_SetConfig+0x7ae>
 800ca5c:	2304      	movs	r3, #4
 800ca5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca62:	e24a      	b.n	800cefa <UART_SetConfig+0x7ae>
 800ca64:	2308      	movs	r3, #8
 800ca66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca6a:	e246      	b.n	800cefa <UART_SetConfig+0x7ae>
 800ca6c:	2310      	movs	r3, #16
 800ca6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca72:	e242      	b.n	800cefa <UART_SetConfig+0x7ae>
 800ca74:	cfff69f3 	.word	0xcfff69f3
 800ca78:	58000c00 	.word	0x58000c00
 800ca7c:	11fff4ff 	.word	0x11fff4ff
 800ca80:	40011000 	.word	0x40011000
 800ca84:	58024400 	.word	0x58024400
 800ca88:	40004400 	.word	0x40004400
 800ca8c:	40004800 	.word	0x40004800
 800ca90:	40004c00 	.word	0x40004c00
 800ca94:	40005000 	.word	0x40005000
 800ca98:	2320      	movs	r3, #32
 800ca9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca9e:	e22c      	b.n	800cefa <UART_SetConfig+0x7ae>
 800caa0:	2340      	movs	r3, #64	; 0x40
 800caa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caa6:	e228      	b.n	800cefa <UART_SetConfig+0x7ae>
 800caa8:	2380      	movs	r3, #128	; 0x80
 800caaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caae:	e224      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4ab1      	ldr	r2, [pc, #708]	; (800cd7c <UART_SetConfig+0x630>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d176      	bne.n	800cba8 <UART_SetConfig+0x45c>
 800caba:	4bb1      	ldr	r3, [pc, #708]	; (800cd80 <UART_SetConfig+0x634>)
 800cabc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cabe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cac2:	2b28      	cmp	r3, #40	; 0x28
 800cac4:	d86c      	bhi.n	800cba0 <UART_SetConfig+0x454>
 800cac6:	a201      	add	r2, pc, #4	; (adr r2, 800cacc <UART_SetConfig+0x380>)
 800cac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cacc:	0800cb71 	.word	0x0800cb71
 800cad0:	0800cba1 	.word	0x0800cba1
 800cad4:	0800cba1 	.word	0x0800cba1
 800cad8:	0800cba1 	.word	0x0800cba1
 800cadc:	0800cba1 	.word	0x0800cba1
 800cae0:	0800cba1 	.word	0x0800cba1
 800cae4:	0800cba1 	.word	0x0800cba1
 800cae8:	0800cba1 	.word	0x0800cba1
 800caec:	0800cb79 	.word	0x0800cb79
 800caf0:	0800cba1 	.word	0x0800cba1
 800caf4:	0800cba1 	.word	0x0800cba1
 800caf8:	0800cba1 	.word	0x0800cba1
 800cafc:	0800cba1 	.word	0x0800cba1
 800cb00:	0800cba1 	.word	0x0800cba1
 800cb04:	0800cba1 	.word	0x0800cba1
 800cb08:	0800cba1 	.word	0x0800cba1
 800cb0c:	0800cb81 	.word	0x0800cb81
 800cb10:	0800cba1 	.word	0x0800cba1
 800cb14:	0800cba1 	.word	0x0800cba1
 800cb18:	0800cba1 	.word	0x0800cba1
 800cb1c:	0800cba1 	.word	0x0800cba1
 800cb20:	0800cba1 	.word	0x0800cba1
 800cb24:	0800cba1 	.word	0x0800cba1
 800cb28:	0800cba1 	.word	0x0800cba1
 800cb2c:	0800cb89 	.word	0x0800cb89
 800cb30:	0800cba1 	.word	0x0800cba1
 800cb34:	0800cba1 	.word	0x0800cba1
 800cb38:	0800cba1 	.word	0x0800cba1
 800cb3c:	0800cba1 	.word	0x0800cba1
 800cb40:	0800cba1 	.word	0x0800cba1
 800cb44:	0800cba1 	.word	0x0800cba1
 800cb48:	0800cba1 	.word	0x0800cba1
 800cb4c:	0800cb91 	.word	0x0800cb91
 800cb50:	0800cba1 	.word	0x0800cba1
 800cb54:	0800cba1 	.word	0x0800cba1
 800cb58:	0800cba1 	.word	0x0800cba1
 800cb5c:	0800cba1 	.word	0x0800cba1
 800cb60:	0800cba1 	.word	0x0800cba1
 800cb64:	0800cba1 	.word	0x0800cba1
 800cb68:	0800cba1 	.word	0x0800cba1
 800cb6c:	0800cb99 	.word	0x0800cb99
 800cb70:	2301      	movs	r3, #1
 800cb72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb76:	e1c0      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cb78:	2304      	movs	r3, #4
 800cb7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb7e:	e1bc      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cb80:	2308      	movs	r3, #8
 800cb82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb86:	e1b8      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cb88:	2310      	movs	r3, #16
 800cb8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb8e:	e1b4      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cb90:	2320      	movs	r3, #32
 800cb92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb96:	e1b0      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cb98:	2340      	movs	r3, #64	; 0x40
 800cb9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb9e:	e1ac      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cba0:	2380      	movs	r3, #128	; 0x80
 800cba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cba6:	e1a8      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a75      	ldr	r2, [pc, #468]	; (800cd84 <UART_SetConfig+0x638>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d130      	bne.n	800cc14 <UART_SetConfig+0x4c8>
 800cbb2:	4b73      	ldr	r3, [pc, #460]	; (800cd80 <UART_SetConfig+0x634>)
 800cbb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbb6:	f003 0307 	and.w	r3, r3, #7
 800cbba:	2b05      	cmp	r3, #5
 800cbbc:	d826      	bhi.n	800cc0c <UART_SetConfig+0x4c0>
 800cbbe:	a201      	add	r2, pc, #4	; (adr r2, 800cbc4 <UART_SetConfig+0x478>)
 800cbc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc4:	0800cbdd 	.word	0x0800cbdd
 800cbc8:	0800cbe5 	.word	0x0800cbe5
 800cbcc:	0800cbed 	.word	0x0800cbed
 800cbd0:	0800cbf5 	.word	0x0800cbf5
 800cbd4:	0800cbfd 	.word	0x0800cbfd
 800cbd8:	0800cc05 	.word	0x0800cc05
 800cbdc:	2300      	movs	r3, #0
 800cbde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbe2:	e18a      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cbe4:	2304      	movs	r3, #4
 800cbe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbea:	e186      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cbec:	2308      	movs	r3, #8
 800cbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbf2:	e182      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cbf4:	2310      	movs	r3, #16
 800cbf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbfa:	e17e      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cbfc:	2320      	movs	r3, #32
 800cbfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc02:	e17a      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cc04:	2340      	movs	r3, #64	; 0x40
 800cc06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc0a:	e176      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cc0c:	2380      	movs	r3, #128	; 0x80
 800cc0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc12:	e172      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a5b      	ldr	r2, [pc, #364]	; (800cd88 <UART_SetConfig+0x63c>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d130      	bne.n	800cc80 <UART_SetConfig+0x534>
 800cc1e:	4b58      	ldr	r3, [pc, #352]	; (800cd80 <UART_SetConfig+0x634>)
 800cc20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc22:	f003 0307 	and.w	r3, r3, #7
 800cc26:	2b05      	cmp	r3, #5
 800cc28:	d826      	bhi.n	800cc78 <UART_SetConfig+0x52c>
 800cc2a:	a201      	add	r2, pc, #4	; (adr r2, 800cc30 <UART_SetConfig+0x4e4>)
 800cc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc30:	0800cc49 	.word	0x0800cc49
 800cc34:	0800cc51 	.word	0x0800cc51
 800cc38:	0800cc59 	.word	0x0800cc59
 800cc3c:	0800cc61 	.word	0x0800cc61
 800cc40:	0800cc69 	.word	0x0800cc69
 800cc44:	0800cc71 	.word	0x0800cc71
 800cc48:	2300      	movs	r3, #0
 800cc4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc4e:	e154      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cc50:	2304      	movs	r3, #4
 800cc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc56:	e150      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cc58:	2308      	movs	r3, #8
 800cc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc5e:	e14c      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cc60:	2310      	movs	r3, #16
 800cc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc66:	e148      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cc68:	2320      	movs	r3, #32
 800cc6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc6e:	e144      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cc70:	2340      	movs	r3, #64	; 0x40
 800cc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc76:	e140      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cc78:	2380      	movs	r3, #128	; 0x80
 800cc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc7e:	e13c      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a41      	ldr	r2, [pc, #260]	; (800cd8c <UART_SetConfig+0x640>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	f040 8082 	bne.w	800cd90 <UART_SetConfig+0x644>
 800cc8c:	4b3c      	ldr	r3, [pc, #240]	; (800cd80 <UART_SetConfig+0x634>)
 800cc8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cc94:	2b28      	cmp	r3, #40	; 0x28
 800cc96:	d86d      	bhi.n	800cd74 <UART_SetConfig+0x628>
 800cc98:	a201      	add	r2, pc, #4	; (adr r2, 800cca0 <UART_SetConfig+0x554>)
 800cc9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc9e:	bf00      	nop
 800cca0:	0800cd45 	.word	0x0800cd45
 800cca4:	0800cd75 	.word	0x0800cd75
 800cca8:	0800cd75 	.word	0x0800cd75
 800ccac:	0800cd75 	.word	0x0800cd75
 800ccb0:	0800cd75 	.word	0x0800cd75
 800ccb4:	0800cd75 	.word	0x0800cd75
 800ccb8:	0800cd75 	.word	0x0800cd75
 800ccbc:	0800cd75 	.word	0x0800cd75
 800ccc0:	0800cd4d 	.word	0x0800cd4d
 800ccc4:	0800cd75 	.word	0x0800cd75
 800ccc8:	0800cd75 	.word	0x0800cd75
 800cccc:	0800cd75 	.word	0x0800cd75
 800ccd0:	0800cd75 	.word	0x0800cd75
 800ccd4:	0800cd75 	.word	0x0800cd75
 800ccd8:	0800cd75 	.word	0x0800cd75
 800ccdc:	0800cd75 	.word	0x0800cd75
 800cce0:	0800cd55 	.word	0x0800cd55
 800cce4:	0800cd75 	.word	0x0800cd75
 800cce8:	0800cd75 	.word	0x0800cd75
 800ccec:	0800cd75 	.word	0x0800cd75
 800ccf0:	0800cd75 	.word	0x0800cd75
 800ccf4:	0800cd75 	.word	0x0800cd75
 800ccf8:	0800cd75 	.word	0x0800cd75
 800ccfc:	0800cd75 	.word	0x0800cd75
 800cd00:	0800cd5d 	.word	0x0800cd5d
 800cd04:	0800cd75 	.word	0x0800cd75
 800cd08:	0800cd75 	.word	0x0800cd75
 800cd0c:	0800cd75 	.word	0x0800cd75
 800cd10:	0800cd75 	.word	0x0800cd75
 800cd14:	0800cd75 	.word	0x0800cd75
 800cd18:	0800cd75 	.word	0x0800cd75
 800cd1c:	0800cd75 	.word	0x0800cd75
 800cd20:	0800cd65 	.word	0x0800cd65
 800cd24:	0800cd75 	.word	0x0800cd75
 800cd28:	0800cd75 	.word	0x0800cd75
 800cd2c:	0800cd75 	.word	0x0800cd75
 800cd30:	0800cd75 	.word	0x0800cd75
 800cd34:	0800cd75 	.word	0x0800cd75
 800cd38:	0800cd75 	.word	0x0800cd75
 800cd3c:	0800cd75 	.word	0x0800cd75
 800cd40:	0800cd6d 	.word	0x0800cd6d
 800cd44:	2301      	movs	r3, #1
 800cd46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd4a:	e0d6      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cd4c:	2304      	movs	r3, #4
 800cd4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd52:	e0d2      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cd54:	2308      	movs	r3, #8
 800cd56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd5a:	e0ce      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cd5c:	2310      	movs	r3, #16
 800cd5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd62:	e0ca      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cd64:	2320      	movs	r3, #32
 800cd66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd6a:	e0c6      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cd6c:	2340      	movs	r3, #64	; 0x40
 800cd6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd72:	e0c2      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cd74:	2380      	movs	r3, #128	; 0x80
 800cd76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd7a:	e0be      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cd7c:	40011400 	.word	0x40011400
 800cd80:	58024400 	.word	0x58024400
 800cd84:	40007800 	.word	0x40007800
 800cd88:	40007c00 	.word	0x40007c00
 800cd8c:	40011800 	.word	0x40011800
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4aad      	ldr	r2, [pc, #692]	; (800d04c <UART_SetConfig+0x900>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d176      	bne.n	800ce88 <UART_SetConfig+0x73c>
 800cd9a:	4bad      	ldr	r3, [pc, #692]	; (800d050 <UART_SetConfig+0x904>)
 800cd9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cda2:	2b28      	cmp	r3, #40	; 0x28
 800cda4:	d86c      	bhi.n	800ce80 <UART_SetConfig+0x734>
 800cda6:	a201      	add	r2, pc, #4	; (adr r2, 800cdac <UART_SetConfig+0x660>)
 800cda8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdac:	0800ce51 	.word	0x0800ce51
 800cdb0:	0800ce81 	.word	0x0800ce81
 800cdb4:	0800ce81 	.word	0x0800ce81
 800cdb8:	0800ce81 	.word	0x0800ce81
 800cdbc:	0800ce81 	.word	0x0800ce81
 800cdc0:	0800ce81 	.word	0x0800ce81
 800cdc4:	0800ce81 	.word	0x0800ce81
 800cdc8:	0800ce81 	.word	0x0800ce81
 800cdcc:	0800ce59 	.word	0x0800ce59
 800cdd0:	0800ce81 	.word	0x0800ce81
 800cdd4:	0800ce81 	.word	0x0800ce81
 800cdd8:	0800ce81 	.word	0x0800ce81
 800cddc:	0800ce81 	.word	0x0800ce81
 800cde0:	0800ce81 	.word	0x0800ce81
 800cde4:	0800ce81 	.word	0x0800ce81
 800cde8:	0800ce81 	.word	0x0800ce81
 800cdec:	0800ce61 	.word	0x0800ce61
 800cdf0:	0800ce81 	.word	0x0800ce81
 800cdf4:	0800ce81 	.word	0x0800ce81
 800cdf8:	0800ce81 	.word	0x0800ce81
 800cdfc:	0800ce81 	.word	0x0800ce81
 800ce00:	0800ce81 	.word	0x0800ce81
 800ce04:	0800ce81 	.word	0x0800ce81
 800ce08:	0800ce81 	.word	0x0800ce81
 800ce0c:	0800ce69 	.word	0x0800ce69
 800ce10:	0800ce81 	.word	0x0800ce81
 800ce14:	0800ce81 	.word	0x0800ce81
 800ce18:	0800ce81 	.word	0x0800ce81
 800ce1c:	0800ce81 	.word	0x0800ce81
 800ce20:	0800ce81 	.word	0x0800ce81
 800ce24:	0800ce81 	.word	0x0800ce81
 800ce28:	0800ce81 	.word	0x0800ce81
 800ce2c:	0800ce71 	.word	0x0800ce71
 800ce30:	0800ce81 	.word	0x0800ce81
 800ce34:	0800ce81 	.word	0x0800ce81
 800ce38:	0800ce81 	.word	0x0800ce81
 800ce3c:	0800ce81 	.word	0x0800ce81
 800ce40:	0800ce81 	.word	0x0800ce81
 800ce44:	0800ce81 	.word	0x0800ce81
 800ce48:	0800ce81 	.word	0x0800ce81
 800ce4c:	0800ce79 	.word	0x0800ce79
 800ce50:	2301      	movs	r3, #1
 800ce52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce56:	e050      	b.n	800cefa <UART_SetConfig+0x7ae>
 800ce58:	2304      	movs	r3, #4
 800ce5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce5e:	e04c      	b.n	800cefa <UART_SetConfig+0x7ae>
 800ce60:	2308      	movs	r3, #8
 800ce62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce66:	e048      	b.n	800cefa <UART_SetConfig+0x7ae>
 800ce68:	2310      	movs	r3, #16
 800ce6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce6e:	e044      	b.n	800cefa <UART_SetConfig+0x7ae>
 800ce70:	2320      	movs	r3, #32
 800ce72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce76:	e040      	b.n	800cefa <UART_SetConfig+0x7ae>
 800ce78:	2340      	movs	r3, #64	; 0x40
 800ce7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce7e:	e03c      	b.n	800cefa <UART_SetConfig+0x7ae>
 800ce80:	2380      	movs	r3, #128	; 0x80
 800ce82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce86:	e038      	b.n	800cefa <UART_SetConfig+0x7ae>
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a71      	ldr	r2, [pc, #452]	; (800d054 <UART_SetConfig+0x908>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d130      	bne.n	800cef4 <UART_SetConfig+0x7a8>
 800ce92:	4b6f      	ldr	r3, [pc, #444]	; (800d050 <UART_SetConfig+0x904>)
 800ce94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce96:	f003 0307 	and.w	r3, r3, #7
 800ce9a:	2b05      	cmp	r3, #5
 800ce9c:	d826      	bhi.n	800ceec <UART_SetConfig+0x7a0>
 800ce9e:	a201      	add	r2, pc, #4	; (adr r2, 800cea4 <UART_SetConfig+0x758>)
 800cea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cea4:	0800cebd 	.word	0x0800cebd
 800cea8:	0800cec5 	.word	0x0800cec5
 800ceac:	0800cecd 	.word	0x0800cecd
 800ceb0:	0800ced5 	.word	0x0800ced5
 800ceb4:	0800cedd 	.word	0x0800cedd
 800ceb8:	0800cee5 	.word	0x0800cee5
 800cebc:	2302      	movs	r3, #2
 800cebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cec2:	e01a      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cec4:	2304      	movs	r3, #4
 800cec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceca:	e016      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cecc:	2308      	movs	r3, #8
 800cece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ced2:	e012      	b.n	800cefa <UART_SetConfig+0x7ae>
 800ced4:	2310      	movs	r3, #16
 800ced6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceda:	e00e      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cedc:	2320      	movs	r3, #32
 800cede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cee2:	e00a      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cee4:	2340      	movs	r3, #64	; 0x40
 800cee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceea:	e006      	b.n	800cefa <UART_SetConfig+0x7ae>
 800ceec:	2380      	movs	r3, #128	; 0x80
 800ceee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cef2:	e002      	b.n	800cefa <UART_SetConfig+0x7ae>
 800cef4:	2380      	movs	r3, #128	; 0x80
 800cef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	4a55      	ldr	r2, [pc, #340]	; (800d054 <UART_SetConfig+0x908>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	f040 80f8 	bne.w	800d0f6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cf06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cf0a:	2b20      	cmp	r3, #32
 800cf0c:	dc46      	bgt.n	800cf9c <UART_SetConfig+0x850>
 800cf0e:	2b02      	cmp	r3, #2
 800cf10:	db75      	blt.n	800cffe <UART_SetConfig+0x8b2>
 800cf12:	3b02      	subs	r3, #2
 800cf14:	2b1e      	cmp	r3, #30
 800cf16:	d872      	bhi.n	800cffe <UART_SetConfig+0x8b2>
 800cf18:	a201      	add	r2, pc, #4	; (adr r2, 800cf20 <UART_SetConfig+0x7d4>)
 800cf1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf1e:	bf00      	nop
 800cf20:	0800cfa3 	.word	0x0800cfa3
 800cf24:	0800cfff 	.word	0x0800cfff
 800cf28:	0800cfab 	.word	0x0800cfab
 800cf2c:	0800cfff 	.word	0x0800cfff
 800cf30:	0800cfff 	.word	0x0800cfff
 800cf34:	0800cfff 	.word	0x0800cfff
 800cf38:	0800cfbb 	.word	0x0800cfbb
 800cf3c:	0800cfff 	.word	0x0800cfff
 800cf40:	0800cfff 	.word	0x0800cfff
 800cf44:	0800cfff 	.word	0x0800cfff
 800cf48:	0800cfff 	.word	0x0800cfff
 800cf4c:	0800cfff 	.word	0x0800cfff
 800cf50:	0800cfff 	.word	0x0800cfff
 800cf54:	0800cfff 	.word	0x0800cfff
 800cf58:	0800cfcb 	.word	0x0800cfcb
 800cf5c:	0800cfff 	.word	0x0800cfff
 800cf60:	0800cfff 	.word	0x0800cfff
 800cf64:	0800cfff 	.word	0x0800cfff
 800cf68:	0800cfff 	.word	0x0800cfff
 800cf6c:	0800cfff 	.word	0x0800cfff
 800cf70:	0800cfff 	.word	0x0800cfff
 800cf74:	0800cfff 	.word	0x0800cfff
 800cf78:	0800cfff 	.word	0x0800cfff
 800cf7c:	0800cfff 	.word	0x0800cfff
 800cf80:	0800cfff 	.word	0x0800cfff
 800cf84:	0800cfff 	.word	0x0800cfff
 800cf88:	0800cfff 	.word	0x0800cfff
 800cf8c:	0800cfff 	.word	0x0800cfff
 800cf90:	0800cfff 	.word	0x0800cfff
 800cf94:	0800cfff 	.word	0x0800cfff
 800cf98:	0800cff1 	.word	0x0800cff1
 800cf9c:	2b40      	cmp	r3, #64	; 0x40
 800cf9e:	d02a      	beq.n	800cff6 <UART_SetConfig+0x8aa>
 800cfa0:	e02d      	b.n	800cffe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cfa2:	f7fc fe07 	bl	8009bb4 <HAL_RCCEx_GetD3PCLK1Freq>
 800cfa6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cfa8:	e02f      	b.n	800d00a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7fc fe16 	bl	8009be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfb8:	e027      	b.n	800d00a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfba:	f107 0318 	add.w	r3, r7, #24
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7fc ff62 	bl	8009e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfc8:	e01f      	b.n	800d00a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfca:	4b21      	ldr	r3, [pc, #132]	; (800d050 <UART_SetConfig+0x904>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f003 0320 	and.w	r3, r3, #32
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d009      	beq.n	800cfea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cfd6:	4b1e      	ldr	r3, [pc, #120]	; (800d050 <UART_SetConfig+0x904>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	08db      	lsrs	r3, r3, #3
 800cfdc:	f003 0303 	and.w	r3, r3, #3
 800cfe0:	4a1d      	ldr	r2, [pc, #116]	; (800d058 <UART_SetConfig+0x90c>)
 800cfe2:	fa22 f303 	lsr.w	r3, r2, r3
 800cfe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cfe8:	e00f      	b.n	800d00a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cfea:	4b1b      	ldr	r3, [pc, #108]	; (800d058 <UART_SetConfig+0x90c>)
 800cfec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfee:	e00c      	b.n	800d00a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cff0:	4b1a      	ldr	r3, [pc, #104]	; (800d05c <UART_SetConfig+0x910>)
 800cff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cff4:	e009      	b.n	800d00a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cffc:	e005      	b.n	800d00a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cffe:	2300      	movs	r3, #0
 800d000:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d002:	2301      	movs	r3, #1
 800d004:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d008:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	f000 81ee 	beq.w	800d3ee <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d016:	4a12      	ldr	r2, [pc, #72]	; (800d060 <UART_SetConfig+0x914>)
 800d018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d01c:	461a      	mov	r2, r3
 800d01e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d020:	fbb3 f3f2 	udiv	r3, r3, r2
 800d024:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	685a      	ldr	r2, [r3, #4]
 800d02a:	4613      	mov	r3, r2
 800d02c:	005b      	lsls	r3, r3, #1
 800d02e:	4413      	add	r3, r2
 800d030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d032:	429a      	cmp	r2, r3
 800d034:	d305      	bcc.n	800d042 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d03c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d03e:	429a      	cmp	r2, r3
 800d040:	d910      	bls.n	800d064 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d042:	2301      	movs	r3, #1
 800d044:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d048:	e1d1      	b.n	800d3ee <UART_SetConfig+0xca2>
 800d04a:	bf00      	nop
 800d04c:	40011c00 	.word	0x40011c00
 800d050:	58024400 	.word	0x58024400
 800d054:	58000c00 	.word	0x58000c00
 800d058:	03d09000 	.word	0x03d09000
 800d05c:	003d0900 	.word	0x003d0900
 800d060:	0800e62c 	.word	0x0800e62c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d066:	2200      	movs	r2, #0
 800d068:	60bb      	str	r3, [r7, #8]
 800d06a:	60fa      	str	r2, [r7, #12]
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d070:	4ac0      	ldr	r2, [pc, #768]	; (800d374 <UART_SetConfig+0xc28>)
 800d072:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d076:	b29b      	uxth	r3, r3
 800d078:	2200      	movs	r2, #0
 800d07a:	603b      	str	r3, [r7, #0]
 800d07c:	607a      	str	r2, [r7, #4]
 800d07e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d082:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d086:	f7f3 f949 	bl	800031c <__aeabi_uldivmod>
 800d08a:	4602      	mov	r2, r0
 800d08c:	460b      	mov	r3, r1
 800d08e:	4610      	mov	r0, r2
 800d090:	4619      	mov	r1, r3
 800d092:	f04f 0200 	mov.w	r2, #0
 800d096:	f04f 0300 	mov.w	r3, #0
 800d09a:	020b      	lsls	r3, r1, #8
 800d09c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d0a0:	0202      	lsls	r2, r0, #8
 800d0a2:	6979      	ldr	r1, [r7, #20]
 800d0a4:	6849      	ldr	r1, [r1, #4]
 800d0a6:	0849      	lsrs	r1, r1, #1
 800d0a8:	2000      	movs	r0, #0
 800d0aa:	460c      	mov	r4, r1
 800d0ac:	4605      	mov	r5, r0
 800d0ae:	eb12 0804 	adds.w	r8, r2, r4
 800d0b2:	eb43 0905 	adc.w	r9, r3, r5
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	469a      	mov	sl, r3
 800d0be:	4693      	mov	fp, r2
 800d0c0:	4652      	mov	r2, sl
 800d0c2:	465b      	mov	r3, fp
 800d0c4:	4640      	mov	r0, r8
 800d0c6:	4649      	mov	r1, r9
 800d0c8:	f7f3 f928 	bl	800031c <__aeabi_uldivmod>
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	460b      	mov	r3, r1
 800d0d0:	4613      	mov	r3, r2
 800d0d2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d0da:	d308      	bcc.n	800d0ee <UART_SetConfig+0x9a2>
 800d0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d0e2:	d204      	bcs.n	800d0ee <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0ea:	60da      	str	r2, [r3, #12]
 800d0ec:	e17f      	b.n	800d3ee <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d0f4:	e17b      	b.n	800d3ee <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	69db      	ldr	r3, [r3, #28]
 800d0fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0fe:	f040 80bd 	bne.w	800d27c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d102:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d106:	2b20      	cmp	r3, #32
 800d108:	dc48      	bgt.n	800d19c <UART_SetConfig+0xa50>
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	db7b      	blt.n	800d206 <UART_SetConfig+0xaba>
 800d10e:	2b20      	cmp	r3, #32
 800d110:	d879      	bhi.n	800d206 <UART_SetConfig+0xaba>
 800d112:	a201      	add	r2, pc, #4	; (adr r2, 800d118 <UART_SetConfig+0x9cc>)
 800d114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d118:	0800d1a3 	.word	0x0800d1a3
 800d11c:	0800d1ab 	.word	0x0800d1ab
 800d120:	0800d207 	.word	0x0800d207
 800d124:	0800d207 	.word	0x0800d207
 800d128:	0800d1b3 	.word	0x0800d1b3
 800d12c:	0800d207 	.word	0x0800d207
 800d130:	0800d207 	.word	0x0800d207
 800d134:	0800d207 	.word	0x0800d207
 800d138:	0800d1c3 	.word	0x0800d1c3
 800d13c:	0800d207 	.word	0x0800d207
 800d140:	0800d207 	.word	0x0800d207
 800d144:	0800d207 	.word	0x0800d207
 800d148:	0800d207 	.word	0x0800d207
 800d14c:	0800d207 	.word	0x0800d207
 800d150:	0800d207 	.word	0x0800d207
 800d154:	0800d207 	.word	0x0800d207
 800d158:	0800d1d3 	.word	0x0800d1d3
 800d15c:	0800d207 	.word	0x0800d207
 800d160:	0800d207 	.word	0x0800d207
 800d164:	0800d207 	.word	0x0800d207
 800d168:	0800d207 	.word	0x0800d207
 800d16c:	0800d207 	.word	0x0800d207
 800d170:	0800d207 	.word	0x0800d207
 800d174:	0800d207 	.word	0x0800d207
 800d178:	0800d207 	.word	0x0800d207
 800d17c:	0800d207 	.word	0x0800d207
 800d180:	0800d207 	.word	0x0800d207
 800d184:	0800d207 	.word	0x0800d207
 800d188:	0800d207 	.word	0x0800d207
 800d18c:	0800d207 	.word	0x0800d207
 800d190:	0800d207 	.word	0x0800d207
 800d194:	0800d207 	.word	0x0800d207
 800d198:	0800d1f9 	.word	0x0800d1f9
 800d19c:	2b40      	cmp	r3, #64	; 0x40
 800d19e:	d02e      	beq.n	800d1fe <UART_SetConfig+0xab2>
 800d1a0:	e031      	b.n	800d206 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d1a2:	f7fb fb3b 	bl	800881c <HAL_RCC_GetPCLK1Freq>
 800d1a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d1a8:	e033      	b.n	800d212 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d1aa:	f7fb fb4d 	bl	8008848 <HAL_RCC_GetPCLK2Freq>
 800d1ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d1b0:	e02f      	b.n	800d212 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7fc fd12 	bl	8009be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1c0:	e027      	b.n	800d212 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1c2:	f107 0318 	add.w	r3, r7, #24
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7fc fe5e 	bl	8009e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1d0:	e01f      	b.n	800d212 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1d2:	4b69      	ldr	r3, [pc, #420]	; (800d378 <UART_SetConfig+0xc2c>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f003 0320 	and.w	r3, r3, #32
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d009      	beq.n	800d1f2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d1de:	4b66      	ldr	r3, [pc, #408]	; (800d378 <UART_SetConfig+0xc2c>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	08db      	lsrs	r3, r3, #3
 800d1e4:	f003 0303 	and.w	r3, r3, #3
 800d1e8:	4a64      	ldr	r2, [pc, #400]	; (800d37c <UART_SetConfig+0xc30>)
 800d1ea:	fa22 f303 	lsr.w	r3, r2, r3
 800d1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d1f0:	e00f      	b.n	800d212 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d1f2:	4b62      	ldr	r3, [pc, #392]	; (800d37c <UART_SetConfig+0xc30>)
 800d1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1f6:	e00c      	b.n	800d212 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d1f8:	4b61      	ldr	r3, [pc, #388]	; (800d380 <UART_SetConfig+0xc34>)
 800d1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1fc:	e009      	b.n	800d212 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d204:	e005      	b.n	800d212 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d206:	2300      	movs	r3, #0
 800d208:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d20a:	2301      	movs	r3, #1
 800d20c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d210:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d214:	2b00      	cmp	r3, #0
 800d216:	f000 80ea 	beq.w	800d3ee <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d21e:	4a55      	ldr	r2, [pc, #340]	; (800d374 <UART_SetConfig+0xc28>)
 800d220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d224:	461a      	mov	r2, r3
 800d226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d228:	fbb3 f3f2 	udiv	r3, r3, r2
 800d22c:	005a      	lsls	r2, r3, #1
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	085b      	lsrs	r3, r3, #1
 800d234:	441a      	add	r2, r3
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d23e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d242:	2b0f      	cmp	r3, #15
 800d244:	d916      	bls.n	800d274 <UART_SetConfig+0xb28>
 800d246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d24c:	d212      	bcs.n	800d274 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d250:	b29b      	uxth	r3, r3
 800d252:	f023 030f 	bic.w	r3, r3, #15
 800d256:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25a:	085b      	lsrs	r3, r3, #1
 800d25c:	b29b      	uxth	r3, r3
 800d25e:	f003 0307 	and.w	r3, r3, #7
 800d262:	b29a      	uxth	r2, r3
 800d264:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d266:	4313      	orrs	r3, r2
 800d268:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d270:	60da      	str	r2, [r3, #12]
 800d272:	e0bc      	b.n	800d3ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d274:	2301      	movs	r3, #1
 800d276:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d27a:	e0b8      	b.n	800d3ee <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d27c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d280:	2b20      	cmp	r3, #32
 800d282:	dc4b      	bgt.n	800d31c <UART_SetConfig+0xbd0>
 800d284:	2b00      	cmp	r3, #0
 800d286:	f2c0 8087 	blt.w	800d398 <UART_SetConfig+0xc4c>
 800d28a:	2b20      	cmp	r3, #32
 800d28c:	f200 8084 	bhi.w	800d398 <UART_SetConfig+0xc4c>
 800d290:	a201      	add	r2, pc, #4	; (adr r2, 800d298 <UART_SetConfig+0xb4c>)
 800d292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d296:	bf00      	nop
 800d298:	0800d323 	.word	0x0800d323
 800d29c:	0800d32b 	.word	0x0800d32b
 800d2a0:	0800d399 	.word	0x0800d399
 800d2a4:	0800d399 	.word	0x0800d399
 800d2a8:	0800d333 	.word	0x0800d333
 800d2ac:	0800d399 	.word	0x0800d399
 800d2b0:	0800d399 	.word	0x0800d399
 800d2b4:	0800d399 	.word	0x0800d399
 800d2b8:	0800d343 	.word	0x0800d343
 800d2bc:	0800d399 	.word	0x0800d399
 800d2c0:	0800d399 	.word	0x0800d399
 800d2c4:	0800d399 	.word	0x0800d399
 800d2c8:	0800d399 	.word	0x0800d399
 800d2cc:	0800d399 	.word	0x0800d399
 800d2d0:	0800d399 	.word	0x0800d399
 800d2d4:	0800d399 	.word	0x0800d399
 800d2d8:	0800d353 	.word	0x0800d353
 800d2dc:	0800d399 	.word	0x0800d399
 800d2e0:	0800d399 	.word	0x0800d399
 800d2e4:	0800d399 	.word	0x0800d399
 800d2e8:	0800d399 	.word	0x0800d399
 800d2ec:	0800d399 	.word	0x0800d399
 800d2f0:	0800d399 	.word	0x0800d399
 800d2f4:	0800d399 	.word	0x0800d399
 800d2f8:	0800d399 	.word	0x0800d399
 800d2fc:	0800d399 	.word	0x0800d399
 800d300:	0800d399 	.word	0x0800d399
 800d304:	0800d399 	.word	0x0800d399
 800d308:	0800d399 	.word	0x0800d399
 800d30c:	0800d399 	.word	0x0800d399
 800d310:	0800d399 	.word	0x0800d399
 800d314:	0800d399 	.word	0x0800d399
 800d318:	0800d38b 	.word	0x0800d38b
 800d31c:	2b40      	cmp	r3, #64	; 0x40
 800d31e:	d037      	beq.n	800d390 <UART_SetConfig+0xc44>
 800d320:	e03a      	b.n	800d398 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d322:	f7fb fa7b 	bl	800881c <HAL_RCC_GetPCLK1Freq>
 800d326:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d328:	e03c      	b.n	800d3a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d32a:	f7fb fa8d 	bl	8008848 <HAL_RCC_GetPCLK2Freq>
 800d32e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d330:	e038      	b.n	800d3a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d336:	4618      	mov	r0, r3
 800d338:	f7fc fc52 	bl	8009be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d340:	e030      	b.n	800d3a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d342:	f107 0318 	add.w	r3, r7, #24
 800d346:	4618      	mov	r0, r3
 800d348:	f7fc fd9e 	bl	8009e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d350:	e028      	b.n	800d3a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d352:	4b09      	ldr	r3, [pc, #36]	; (800d378 <UART_SetConfig+0xc2c>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f003 0320 	and.w	r3, r3, #32
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d012      	beq.n	800d384 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d35e:	4b06      	ldr	r3, [pc, #24]	; (800d378 <UART_SetConfig+0xc2c>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	08db      	lsrs	r3, r3, #3
 800d364:	f003 0303 	and.w	r3, r3, #3
 800d368:	4a04      	ldr	r2, [pc, #16]	; (800d37c <UART_SetConfig+0xc30>)
 800d36a:	fa22 f303 	lsr.w	r3, r2, r3
 800d36e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d370:	e018      	b.n	800d3a4 <UART_SetConfig+0xc58>
 800d372:	bf00      	nop
 800d374:	0800e62c 	.word	0x0800e62c
 800d378:	58024400 	.word	0x58024400
 800d37c:	03d09000 	.word	0x03d09000
 800d380:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d384:	4b24      	ldr	r3, [pc, #144]	; (800d418 <UART_SetConfig+0xccc>)
 800d386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d388:	e00c      	b.n	800d3a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d38a:	4b24      	ldr	r3, [pc, #144]	; (800d41c <UART_SetConfig+0xcd0>)
 800d38c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d38e:	e009      	b.n	800d3a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d394:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d396:	e005      	b.n	800d3a4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d398:	2300      	movs	r3, #0
 800d39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d39c:	2301      	movs	r3, #1
 800d39e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d3a2:	bf00      	nop
    }

    if (pclk != 0U)
 800d3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d021      	beq.n	800d3ee <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ae:	4a1c      	ldr	r2, [pc, #112]	; (800d420 <UART_SetConfig+0xcd4>)
 800d3b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3b8:	fbb3 f2f2 	udiv	r2, r3, r2
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	085b      	lsrs	r3, r3, #1
 800d3c2:	441a      	add	r2, r3
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3cc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d0:	2b0f      	cmp	r3, #15
 800d3d2:	d909      	bls.n	800d3e8 <UART_SetConfig+0xc9c>
 800d3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3da:	d205      	bcs.n	800d3e8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3de:	b29a      	uxth	r2, r3
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	60da      	str	r2, [r3, #12]
 800d3e6:	e002      	b.n	800d3ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	2200      	movs	r2, #0
 800d402:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	2200      	movs	r2, #0
 800d408:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d40a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3748      	adds	r7, #72	; 0x48
 800d412:	46bd      	mov	sp, r7
 800d414:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d418:	03d09000 	.word	0x03d09000
 800d41c:	003d0900 	.word	0x003d0900
 800d420:	0800e62c 	.word	0x0800e62c

0800d424 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d424:	b480      	push	{r7}
 800d426:	b083      	sub	sp, #12
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d430:	f003 0301 	and.w	r3, r3, #1
 800d434:	2b00      	cmp	r3, #0
 800d436:	d00a      	beq.n	800d44e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	430a      	orrs	r2, r1
 800d44c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d452:	f003 0302 	and.w	r3, r3, #2
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00a      	beq.n	800d470 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	430a      	orrs	r2, r1
 800d46e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d474:	f003 0304 	and.w	r3, r3, #4
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d00a      	beq.n	800d492 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	430a      	orrs	r2, r1
 800d490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d496:	f003 0308 	and.w	r3, r3, #8
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d00a      	beq.n	800d4b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	430a      	orrs	r2, r1
 800d4b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4b8:	f003 0310 	and.w	r3, r3, #16
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d00a      	beq.n	800d4d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	689b      	ldr	r3, [r3, #8]
 800d4c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	430a      	orrs	r2, r1
 800d4d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4da:	f003 0320 	and.w	r3, r3, #32
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d00a      	beq.n	800d4f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	689b      	ldr	r3, [r3, #8]
 800d4e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	430a      	orrs	r2, r1
 800d4f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d500:	2b00      	cmp	r3, #0
 800d502:	d01a      	beq.n	800d53a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	430a      	orrs	r2, r1
 800d518:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d51e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d522:	d10a      	bne.n	800d53a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	685b      	ldr	r3, [r3, #4]
 800d52a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	430a      	orrs	r2, r1
 800d538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d53e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00a      	beq.n	800d55c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	685b      	ldr	r3, [r3, #4]
 800d54c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	430a      	orrs	r2, r1
 800d55a:	605a      	str	r2, [r3, #4]
  }
}
 800d55c:	bf00      	nop
 800d55e:	370c      	adds	r7, #12
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr

0800d568 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b098      	sub	sp, #96	; 0x60
 800d56c:	af02      	add	r7, sp, #8
 800d56e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2200      	movs	r2, #0
 800d574:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d578:	f7f6 fdda 	bl	8004130 <HAL_GetTick>
 800d57c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f003 0308 	and.w	r3, r3, #8
 800d588:	2b08      	cmp	r3, #8
 800d58a:	d12f      	bne.n	800d5ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d58c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d590:	9300      	str	r3, [sp, #0]
 800d592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d594:	2200      	movs	r2, #0
 800d596:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f000 f88e 	bl	800d6bc <UART_WaitOnFlagUntilTimeout>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d022      	beq.n	800d5ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ae:	e853 3f00 	ldrex	r3, [r3]
 800d5b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d5b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5ba:	653b      	str	r3, [r7, #80]	; 0x50
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5c4:	647b      	str	r3, [r7, #68]	; 0x44
 800d5c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d5ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5cc:	e841 2300 	strex	r3, r2, [r1]
 800d5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d5d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d1e6      	bne.n	800d5a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2220      	movs	r2, #32
 800d5dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d5e8:	2303      	movs	r3, #3
 800d5ea:	e063      	b.n	800d6b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f003 0304 	and.w	r3, r3, #4
 800d5f6:	2b04      	cmp	r3, #4
 800d5f8:	d149      	bne.n	800d68e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d5fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d5fe:	9300      	str	r3, [sp, #0]
 800d600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d602:	2200      	movs	r2, #0
 800d604:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 f857 	bl	800d6bc <UART_WaitOnFlagUntilTimeout>
 800d60e:	4603      	mov	r3, r0
 800d610:	2b00      	cmp	r3, #0
 800d612:	d03c      	beq.n	800d68e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61c:	e853 3f00 	ldrex	r3, [r3]
 800d620:	623b      	str	r3, [r7, #32]
   return(result);
 800d622:	6a3b      	ldr	r3, [r7, #32]
 800d624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d628:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	461a      	mov	r2, r3
 800d630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d632:	633b      	str	r3, [r7, #48]	; 0x30
 800d634:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d63a:	e841 2300 	strex	r3, r2, [r1]
 800d63e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d642:	2b00      	cmp	r3, #0
 800d644:	d1e6      	bne.n	800d614 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	3308      	adds	r3, #8
 800d64c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	e853 3f00 	ldrex	r3, [r3]
 800d654:	60fb      	str	r3, [r7, #12]
   return(result);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	f023 0301 	bic.w	r3, r3, #1
 800d65c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	3308      	adds	r3, #8
 800d664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d666:	61fa      	str	r2, [r7, #28]
 800d668:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d66a:	69b9      	ldr	r1, [r7, #24]
 800d66c:	69fa      	ldr	r2, [r7, #28]
 800d66e:	e841 2300 	strex	r3, r2, [r1]
 800d672:	617b      	str	r3, [r7, #20]
   return(result);
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1e5      	bne.n	800d646 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2220      	movs	r2, #32
 800d67e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d68a:	2303      	movs	r3, #3
 800d68c:	e012      	b.n	800d6b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2220      	movs	r2, #32
 800d692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2220      	movs	r2, #32
 800d69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d6b2:	2300      	movs	r3, #0
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3758      	adds	r7, #88	; 0x58
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	60b9      	str	r1, [r7, #8]
 800d6c6:	603b      	str	r3, [r7, #0]
 800d6c8:	4613      	mov	r3, r2
 800d6ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6cc:	e049      	b.n	800d762 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6ce:	69bb      	ldr	r3, [r7, #24]
 800d6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6d4:	d045      	beq.n	800d762 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6d6:	f7f6 fd2b 	bl	8004130 <HAL_GetTick>
 800d6da:	4602      	mov	r2, r0
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	1ad3      	subs	r3, r2, r3
 800d6e0:	69ba      	ldr	r2, [r7, #24]
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d302      	bcc.n	800d6ec <UART_WaitOnFlagUntilTimeout+0x30>
 800d6e6:	69bb      	ldr	r3, [r7, #24]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d101      	bne.n	800d6f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d6ec:	2303      	movs	r3, #3
 800d6ee:	e048      	b.n	800d782 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f003 0304 	and.w	r3, r3, #4
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d031      	beq.n	800d762 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	69db      	ldr	r3, [r3, #28]
 800d704:	f003 0308 	and.w	r3, r3, #8
 800d708:	2b08      	cmp	r3, #8
 800d70a:	d110      	bne.n	800d72e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	2208      	movs	r2, #8
 800d712:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d714:	68f8      	ldr	r0, [r7, #12]
 800d716:	f000 f921 	bl	800d95c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2208      	movs	r2, #8
 800d71e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2200      	movs	r2, #0
 800d726:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800d72a:	2301      	movs	r3, #1
 800d72c:	e029      	b.n	800d782 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	69db      	ldr	r3, [r3, #28]
 800d734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d73c:	d111      	bne.n	800d762 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d746:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d748:	68f8      	ldr	r0, [r7, #12]
 800d74a:	f000 f907 	bl	800d95c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2220      	movs	r2, #32
 800d752:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2200      	movs	r2, #0
 800d75a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d75e:	2303      	movs	r3, #3
 800d760:	e00f      	b.n	800d782 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	69da      	ldr	r2, [r3, #28]
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	4013      	ands	r3, r2
 800d76c:	68ba      	ldr	r2, [r7, #8]
 800d76e:	429a      	cmp	r2, r3
 800d770:	bf0c      	ite	eq
 800d772:	2301      	moveq	r3, #1
 800d774:	2300      	movne	r3, #0
 800d776:	b2db      	uxtb	r3, r3
 800d778:	461a      	mov	r2, r3
 800d77a:	79fb      	ldrb	r3, [r7, #7]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d0a6      	beq.n	800d6ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d780:	2300      	movs	r3, #0
}
 800d782:	4618      	mov	r0, r3
 800d784:	3710      	adds	r7, #16
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
	...

0800d78c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b096      	sub	sp, #88	; 0x58
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	4613      	mov	r3, r2
 800d798:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	68ba      	ldr	r2, [r7, #8]
 800d79e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	88fa      	ldrh	r2, [r7, #6]
 800d7a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2222      	movs	r2, #34	; 0x22
 800d7b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d02d      	beq.n	800d81e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7c8:	4a40      	ldr	r2, [pc, #256]	; (800d8cc <UART_Start_Receive_DMA+0x140>)
 800d7ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7d2:	4a3f      	ldr	r2, [pc, #252]	; (800d8d0 <UART_Start_Receive_DMA+0x144>)
 800d7d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7dc:	4a3d      	ldr	r2, [pc, #244]	; (800d8d4 <UART_Start_Receive_DMA+0x148>)
 800d7de:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	3324      	adds	r3, #36	; 0x24
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	88fb      	ldrh	r3, [r7, #6]
 800d800:	f7f7 faf4 	bl	8004dec <HAL_DMA_Start_IT>
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	d009      	beq.n	800d81e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2210      	movs	r2, #16
 800d80e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2220      	movs	r2, #32
 800d816:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800d81a:	2301      	movs	r3, #1
 800d81c:	e051      	b.n	800d8c2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	691b      	ldr	r3, [r3, #16]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d018      	beq.n	800d858 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d82c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d82e:	e853 3f00 	ldrex	r3, [r3]
 800d832:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d83a:	657b      	str	r3, [r7, #84]	; 0x54
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	461a      	mov	r2, r3
 800d842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d844:	64bb      	str	r3, [r7, #72]	; 0x48
 800d846:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d848:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d84a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d84c:	e841 2300 	strex	r3, r2, [r1]
 800d850:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d854:	2b00      	cmp	r3, #0
 800d856:	d1e6      	bne.n	800d826 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	3308      	adds	r3, #8
 800d85e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d862:	e853 3f00 	ldrex	r3, [r3]
 800d866:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86a:	f043 0301 	orr.w	r3, r3, #1
 800d86e:	653b      	str	r3, [r7, #80]	; 0x50
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	3308      	adds	r3, #8
 800d876:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d878:	637a      	str	r2, [r7, #52]	; 0x34
 800d87a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d87c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d87e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d880:	e841 2300 	strex	r3, r2, [r1]
 800d884:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1e5      	bne.n	800d858 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	3308      	adds	r3, #8
 800d892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	e853 3f00 	ldrex	r3, [r3]
 800d89a:	613b      	str	r3, [r7, #16]
   return(result);
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	3308      	adds	r3, #8
 800d8aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d8ac:	623a      	str	r2, [r7, #32]
 800d8ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8b0:	69f9      	ldr	r1, [r7, #28]
 800d8b2:	6a3a      	ldr	r2, [r7, #32]
 800d8b4:	e841 2300 	strex	r3, r2, [r1]
 800d8b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d8ba:	69bb      	ldr	r3, [r7, #24]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d1e5      	bne.n	800d88c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d8c0:	2300      	movs	r3, #0
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3758      	adds	r7, #88	; 0x58
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	0800dadb 	.word	0x0800dadb
 800d8d0:	0800dc03 	.word	0x0800dc03
 800d8d4:	0800dc41 	.word	0x0800dc41

0800d8d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b08f      	sub	sp, #60	; 0x3c
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8e6:	6a3b      	ldr	r3, [r7, #32]
 800d8e8:	e853 3f00 	ldrex	r3, [r3]
 800d8ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8ee:	69fb      	ldr	r3, [r7, #28]
 800d8f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d8f4:	637b      	str	r3, [r7, #52]	; 0x34
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d900:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d902:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d906:	e841 2300 	strex	r3, r2, [r1]
 800d90a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d1e6      	bne.n	800d8e0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	3308      	adds	r3, #8
 800d918:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	e853 3f00 	ldrex	r3, [r3]
 800d920:	60bb      	str	r3, [r7, #8]
   return(result);
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d928:	633b      	str	r3, [r7, #48]	; 0x30
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	3308      	adds	r3, #8
 800d930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d932:	61ba      	str	r2, [r7, #24]
 800d934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d936:	6979      	ldr	r1, [r7, #20]
 800d938:	69ba      	ldr	r2, [r7, #24]
 800d93a:	e841 2300 	strex	r3, r2, [r1]
 800d93e:	613b      	str	r3, [r7, #16]
   return(result);
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d1e5      	bne.n	800d912 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2220      	movs	r2, #32
 800d94a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800d94e:	bf00      	nop
 800d950:	373c      	adds	r7, #60	; 0x3c
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr
	...

0800d95c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b095      	sub	sp, #84	; 0x54
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d96c:	e853 3f00 	ldrex	r3, [r3]
 800d970:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d974:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d978:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	461a      	mov	r2, r3
 800d980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d982:	643b      	str	r3, [r7, #64]	; 0x40
 800d984:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d986:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d988:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d98a:	e841 2300 	strex	r3, r2, [r1]
 800d98e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d992:	2b00      	cmp	r3, #0
 800d994:	d1e6      	bne.n	800d964 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	3308      	adds	r3, #8
 800d99c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d99e:	6a3b      	ldr	r3, [r7, #32]
 800d9a0:	e853 3f00 	ldrex	r3, [r3]
 800d9a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800d9a6:	69fa      	ldr	r2, [r7, #28]
 800d9a8:	4b1e      	ldr	r3, [pc, #120]	; (800da24 <UART_EndRxTransfer+0xc8>)
 800d9aa:	4013      	ands	r3, r2
 800d9ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	3308      	adds	r3, #8
 800d9b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d9b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d9b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9be:	e841 2300 	strex	r3, r2, [r1]
 800d9c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d1e5      	bne.n	800d996 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9ce:	2b01      	cmp	r3, #1
 800d9d0:	d118      	bne.n	800da04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	e853 3f00 	ldrex	r3, [r3]
 800d9de:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	f023 0310 	bic.w	r3, r3, #16
 800d9e6:	647b      	str	r3, [r7, #68]	; 0x44
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9f0:	61bb      	str	r3, [r7, #24]
 800d9f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9f4:	6979      	ldr	r1, [r7, #20]
 800d9f6:	69ba      	ldr	r2, [r7, #24]
 800d9f8:	e841 2300 	strex	r3, r2, [r1]
 800d9fc:	613b      	str	r3, [r7, #16]
   return(result);
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d1e6      	bne.n	800d9d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2220      	movs	r2, #32
 800da08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2200      	movs	r2, #0
 800da10:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2200      	movs	r2, #0
 800da16:	675a      	str	r2, [r3, #116]	; 0x74
}
 800da18:	bf00      	nop
 800da1a:	3754      	adds	r7, #84	; 0x54
 800da1c:	46bd      	mov	sp, r7
 800da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da22:	4770      	bx	lr
 800da24:	effffffe 	.word	0xeffffffe

0800da28 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b090      	sub	sp, #64	; 0x40
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da34:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	69db      	ldr	r3, [r3, #28]
 800da3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da3e:	d037      	beq.n	800dab0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800da40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da42:	2200      	movs	r2, #0
 800da44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800da48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	3308      	adds	r3, #8
 800da4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da52:	e853 3f00 	ldrex	r3, [r3]
 800da56:	623b      	str	r3, [r7, #32]
   return(result);
 800da58:	6a3b      	ldr	r3, [r7, #32]
 800da5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da5e:	63bb      	str	r3, [r7, #56]	; 0x38
 800da60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	3308      	adds	r3, #8
 800da66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da68:	633a      	str	r2, [r7, #48]	; 0x30
 800da6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da70:	e841 2300 	strex	r3, r2, [r1]
 800da74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800da76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d1e5      	bne.n	800da48 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800da7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	e853 3f00 	ldrex	r3, [r3]
 800da88:	60fb      	str	r3, [r7, #12]
   return(result);
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da90:	637b      	str	r3, [r7, #52]	; 0x34
 800da92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	461a      	mov	r2, r3
 800da98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da9a:	61fb      	str	r3, [r7, #28]
 800da9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da9e:	69b9      	ldr	r1, [r7, #24]
 800daa0:	69fa      	ldr	r2, [r7, #28]
 800daa2:	e841 2300 	strex	r3, r2, [r1]
 800daa6:	617b      	str	r3, [r7, #20]
   return(result);
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d1e6      	bne.n	800da7c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800daae:	e002      	b.n	800dab6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800dab0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dab2:	f7f5 f857 	bl	8002b64 <HAL_UART_TxCpltCallback>
}
 800dab6:	bf00      	nop
 800dab8:	3740      	adds	r7, #64	; 0x40
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}

0800dabe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dabe:	b580      	push	{r7, lr}
 800dac0:	b084      	sub	sp, #16
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800dacc:	68f8      	ldr	r0, [r7, #12]
 800dace:	f7fe fe1d 	bl	800c70c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dad2:	bf00      	nop
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dada:	b580      	push	{r7, lr}
 800dadc:	b09c      	sub	sp, #112	; 0x70
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dae6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	69db      	ldr	r3, [r3, #28]
 800daec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800daf0:	d071      	beq.n	800dbd6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800daf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daf4:	2200      	movs	r2, #0
 800daf6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dafa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db02:	e853 3f00 	ldrex	r3, [r3]
 800db06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800db08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db0e:	66bb      	str	r3, [r7, #104]	; 0x68
 800db10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	461a      	mov	r2, r3
 800db16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db18:	65bb      	str	r3, [r7, #88]	; 0x58
 800db1a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db20:	e841 2300 	strex	r3, r2, [r1]
 800db24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800db26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d1e6      	bne.n	800dafa <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	3308      	adds	r3, #8
 800db32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db36:	e853 3f00 	ldrex	r3, [r3]
 800db3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800db3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db3e:	f023 0301 	bic.w	r3, r3, #1
 800db42:	667b      	str	r3, [r7, #100]	; 0x64
 800db44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	3308      	adds	r3, #8
 800db4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800db4c:	647a      	str	r2, [r7, #68]	; 0x44
 800db4e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800db52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db54:	e841 2300 	strex	r3, r2, [r1]
 800db58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800db5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d1e5      	bne.n	800db2c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	3308      	adds	r3, #8
 800db66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6a:	e853 3f00 	ldrex	r3, [r3]
 800db6e:	623b      	str	r3, [r7, #32]
   return(result);
 800db70:	6a3b      	ldr	r3, [r7, #32]
 800db72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db76:	663b      	str	r3, [r7, #96]	; 0x60
 800db78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	3308      	adds	r3, #8
 800db7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800db80:	633a      	str	r2, [r7, #48]	; 0x30
 800db82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db88:	e841 2300 	strex	r3, r2, [r1]
 800db8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800db8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db90:	2b00      	cmp	r3, #0
 800db92:	d1e5      	bne.n	800db60 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800db94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db96:	2220      	movs	r2, #32
 800db98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dba0:	2b01      	cmp	r3, #1
 800dba2:	d118      	bne.n	800dbd6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	e853 3f00 	ldrex	r3, [r3]
 800dbb0:	60fb      	str	r3, [r7, #12]
   return(result);
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	f023 0310 	bic.w	r3, r3, #16
 800dbb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dbba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbc2:	61fb      	str	r3, [r7, #28]
 800dbc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbc6:	69b9      	ldr	r1, [r7, #24]
 800dbc8:	69fa      	ldr	r2, [r7, #28]
 800dbca:	e841 2300 	strex	r3, r2, [r1]
 800dbce:	617b      	str	r3, [r7, #20]
   return(result);
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d1e6      	bne.n	800dba4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dbd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbd8:	2200      	movs	r2, #0
 800dbda:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d107      	bne.n	800dbf4 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dbe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbe6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dbea:	4619      	mov	r1, r3
 800dbec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dbee:	f7fe fda1 	bl	800c734 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dbf2:	e002      	b.n	800dbfa <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800dbf4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dbf6:	f7f4 ffc7 	bl	8002b88 <HAL_UART_RxCpltCallback>
}
 800dbfa:	bf00      	nop
 800dbfc:	3770      	adds	r7, #112	; 0x70
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b084      	sub	sp, #16
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc0e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	2201      	movs	r2, #1
 800dc14:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d109      	bne.n	800dc32 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dc24:	085b      	lsrs	r3, r3, #1
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	4619      	mov	r1, r3
 800dc2a:	68f8      	ldr	r0, [r7, #12]
 800dc2c:	f7fe fd82 	bl	800c734 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dc30:	e002      	b.n	800dc38 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800dc32:	68f8      	ldr	r0, [r7, #12]
 800dc34:	f7fe fd74 	bl	800c720 <HAL_UART_RxHalfCpltCallback>
}
 800dc38:	bf00      	nop
 800dc3a:	3710      	adds	r7, #16
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b086      	sub	sp, #24
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc4c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc54:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc5c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	689b      	ldr	r3, [r3, #8]
 800dc64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc68:	2b80      	cmp	r3, #128	; 0x80
 800dc6a:	d109      	bne.n	800dc80 <UART_DMAError+0x40>
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	2b21      	cmp	r3, #33	; 0x21
 800dc70:	d106      	bne.n	800dc80 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	2200      	movs	r2, #0
 800dc76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800dc7a:	6978      	ldr	r0, [r7, #20]
 800dc7c:	f7ff fe2c 	bl	800d8d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	689b      	ldr	r3, [r3, #8]
 800dc86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc8a:	2b40      	cmp	r3, #64	; 0x40
 800dc8c:	d109      	bne.n	800dca2 <UART_DMAError+0x62>
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2b22      	cmp	r3, #34	; 0x22
 800dc92:	d106      	bne.n	800dca2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	2200      	movs	r2, #0
 800dc98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800dc9c:	6978      	ldr	r0, [r7, #20]
 800dc9e:	f7ff fe5d 	bl	800d95c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dca8:	f043 0210 	orr.w	r2, r3, #16
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dcb2:	6978      	ldr	r0, [r7, #20]
 800dcb4:	f7f3 f8de 	bl	8000e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcb8:	bf00      	nop
 800dcba:	3718      	adds	r7, #24
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b084      	sub	sp, #16
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dccc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dcde:	68f8      	ldr	r0, [r7, #12]
 800dce0:	f7f3 f8c8 	bl	8000e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dce4:	bf00      	nop
 800dce6:	3710      	adds	r7, #16
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b088      	sub	sp, #32
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	e853 3f00 	ldrex	r3, [r3]
 800dd00:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd08:	61fb      	str	r3, [r7, #28]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	461a      	mov	r2, r3
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	61bb      	str	r3, [r7, #24]
 800dd14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd16:	6979      	ldr	r1, [r7, #20]
 800dd18:	69ba      	ldr	r2, [r7, #24]
 800dd1a:	e841 2300 	strex	r3, r2, [r1]
 800dd1e:	613b      	str	r3, [r7, #16]
   return(result);
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d1e6      	bne.n	800dcf4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2220      	movs	r2, #32
 800dd2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2200      	movs	r2, #0
 800dd32:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f7f4 ff15 	bl	8002b64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd3a:	bf00      	nop
 800dd3c:	3720      	adds	r7, #32
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}

0800dd42 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dd42:	b480      	push	{r7}
 800dd44:	b083      	sub	sp, #12
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dd4a:	bf00      	nop
 800dd4c:	370c      	adds	r7, #12
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr

0800dd56 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dd56:	b480      	push	{r7}
 800dd58:	b083      	sub	sp, #12
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dd5e:	bf00      	nop
 800dd60:	370c      	adds	r7, #12
 800dd62:	46bd      	mov	sp, r7
 800dd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd68:	4770      	bx	lr

0800dd6a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dd6a:	b480      	push	{r7}
 800dd6c:	b083      	sub	sp, #12
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dd72:	bf00      	nop
 800dd74:	370c      	adds	r7, #12
 800dd76:	46bd      	mov	sp, r7
 800dd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7c:	4770      	bx	lr

0800dd7e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dd7e:	b480      	push	{r7}
 800dd80:	b085      	sub	sp, #20
 800dd82:	af00      	add	r7, sp, #0
 800dd84:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d101      	bne.n	800dd94 <HAL_UARTEx_DisableFifoMode+0x16>
 800dd90:	2302      	movs	r3, #2
 800dd92:	e027      	b.n	800dde4 <HAL_UARTEx_DisableFifoMode+0x66>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2201      	movs	r2, #1
 800dd98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2224      	movs	r2, #36	; 0x24
 800dda0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	681a      	ldr	r2, [r3, #0]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f022 0201 	bic.w	r2, r2, #1
 800ddba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ddc2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	68fa      	ldr	r2, [r7, #12]
 800ddd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2220      	movs	r2, #32
 800ddd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2200      	movs	r2, #0
 800ddde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dde2:	2300      	movs	r3, #0
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3714      	adds	r7, #20
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr

0800ddf0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800de00:	2b01      	cmp	r3, #1
 800de02:	d101      	bne.n	800de08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800de04:	2302      	movs	r3, #2
 800de06:	e02d      	b.n	800de64 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2201      	movs	r2, #1
 800de0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2224      	movs	r2, #36	; 0x24
 800de14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f022 0201 	bic.w	r2, r2, #1
 800de2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	689b      	ldr	r3, [r3, #8]
 800de36:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	683a      	ldr	r2, [r7, #0]
 800de40:	430a      	orrs	r2, r1
 800de42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f000 f84f 	bl	800dee8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	68fa      	ldr	r2, [r7, #12]
 800de50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2220      	movs	r2, #32
 800de56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2200      	movs	r2, #0
 800de5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800de62:	2300      	movs	r3, #0
}
 800de64:	4618      	mov	r0, r3
 800de66:	3710      	adds	r7, #16
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b084      	sub	sp, #16
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800de7c:	2b01      	cmp	r3, #1
 800de7e:	d101      	bne.n	800de84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800de80:	2302      	movs	r3, #2
 800de82:	e02d      	b.n	800dee0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2201      	movs	r2, #1
 800de88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2224      	movs	r2, #36	; 0x24
 800de90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f022 0201 	bic.w	r2, r2, #1
 800deaa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	689b      	ldr	r3, [r3, #8]
 800deb2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	683a      	ldr	r2, [r7, #0]
 800debc:	430a      	orrs	r2, r1
 800debe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f000 f811 	bl	800dee8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2220      	movs	r2, #32
 800ded2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2200      	movs	r2, #0
 800deda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dede:	2300      	movs	r3, #0
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3710      	adds	r7, #16
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dee8:	b480      	push	{r7}
 800deea:	b085      	sub	sp, #20
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800def4:	2b00      	cmp	r3, #0
 800def6:	d108      	bne.n	800df0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2201      	movs	r2, #1
 800defc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2201      	movs	r2, #1
 800df04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800df08:	e031      	b.n	800df6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800df0a:	2310      	movs	r3, #16
 800df0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800df0e:	2310      	movs	r3, #16
 800df10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	689b      	ldr	r3, [r3, #8]
 800df18:	0e5b      	lsrs	r3, r3, #25
 800df1a:	b2db      	uxtb	r3, r3
 800df1c:	f003 0307 	and.w	r3, r3, #7
 800df20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	689b      	ldr	r3, [r3, #8]
 800df28:	0f5b      	lsrs	r3, r3, #29
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	f003 0307 	and.w	r3, r3, #7
 800df30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df32:	7bbb      	ldrb	r3, [r7, #14]
 800df34:	7b3a      	ldrb	r2, [r7, #12]
 800df36:	4911      	ldr	r1, [pc, #68]	; (800df7c <UARTEx_SetNbDataToProcess+0x94>)
 800df38:	5c8a      	ldrb	r2, [r1, r2]
 800df3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800df3e:	7b3a      	ldrb	r2, [r7, #12]
 800df40:	490f      	ldr	r1, [pc, #60]	; (800df80 <UARTEx_SetNbDataToProcess+0x98>)
 800df42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df44:	fb93 f3f2 	sdiv	r3, r3, r2
 800df48:	b29a      	uxth	r2, r3
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df50:	7bfb      	ldrb	r3, [r7, #15]
 800df52:	7b7a      	ldrb	r2, [r7, #13]
 800df54:	4909      	ldr	r1, [pc, #36]	; (800df7c <UARTEx_SetNbDataToProcess+0x94>)
 800df56:	5c8a      	ldrb	r2, [r1, r2]
 800df58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800df5c:	7b7a      	ldrb	r2, [r7, #13]
 800df5e:	4908      	ldr	r1, [pc, #32]	; (800df80 <UARTEx_SetNbDataToProcess+0x98>)
 800df60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df62:	fb93 f3f2 	sdiv	r3, r3, r2
 800df66:	b29a      	uxth	r2, r3
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800df6e:	bf00      	nop
 800df70:	3714      	adds	r7, #20
 800df72:	46bd      	mov	sp, r7
 800df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df78:	4770      	bx	lr
 800df7a:	bf00      	nop
 800df7c:	0800e644 	.word	0x0800e644
 800df80:	0800e64c 	.word	0x0800e64c

0800df84 <__cxa_pure_virtual>:
 800df84:	b508      	push	{r3, lr}
 800df86:	f000 f80d 	bl	800dfa4 <_ZSt9terminatev>

0800df8a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800df8a:	b508      	push	{r3, lr}
 800df8c:	4780      	blx	r0
 800df8e:	f000 f80e 	bl	800dfae <abort>
	...

0800df94 <_ZSt13get_terminatev>:
 800df94:	4b02      	ldr	r3, [pc, #8]	; (800dfa0 <_ZSt13get_terminatev+0xc>)
 800df96:	6818      	ldr	r0, [r3, #0]
 800df98:	f3bf 8f5b 	dmb	ish
 800df9c:	4770      	bx	lr
 800df9e:	bf00      	nop
 800dfa0:	24000010 	.word	0x24000010

0800dfa4 <_ZSt9terminatev>:
 800dfa4:	b508      	push	{r3, lr}
 800dfa6:	f7ff fff5 	bl	800df94 <_ZSt13get_terminatev>
 800dfaa:	f7ff ffee 	bl	800df8a <_ZN10__cxxabiv111__terminateEPFvvE>

0800dfae <abort>:
 800dfae:	b508      	push	{r3, lr}
 800dfb0:	2006      	movs	r0, #6
 800dfb2:	f000 f873 	bl	800e09c <raise>
 800dfb6:	2001      	movs	r0, #1
 800dfb8:	f7f5 ff52 	bl	8003e60 <_exit>

0800dfbc <__errno>:
 800dfbc:	4b01      	ldr	r3, [pc, #4]	; (800dfc4 <__errno+0x8>)
 800dfbe:	6818      	ldr	r0, [r3, #0]
 800dfc0:	4770      	bx	lr
 800dfc2:	bf00      	nop
 800dfc4:	24000014 	.word	0x24000014

0800dfc8 <__libc_init_array>:
 800dfc8:	b570      	push	{r4, r5, r6, lr}
 800dfca:	4d0d      	ldr	r5, [pc, #52]	; (800e000 <__libc_init_array+0x38>)
 800dfcc:	4c0d      	ldr	r4, [pc, #52]	; (800e004 <__libc_init_array+0x3c>)
 800dfce:	1b64      	subs	r4, r4, r5
 800dfd0:	10a4      	asrs	r4, r4, #2
 800dfd2:	2600      	movs	r6, #0
 800dfd4:	42a6      	cmp	r6, r4
 800dfd6:	d109      	bne.n	800dfec <__libc_init_array+0x24>
 800dfd8:	4d0b      	ldr	r5, [pc, #44]	; (800e008 <__libc_init_array+0x40>)
 800dfda:	4c0c      	ldr	r4, [pc, #48]	; (800e00c <__libc_init_array+0x44>)
 800dfdc:	f000 f9b0 	bl	800e340 <_init>
 800dfe0:	1b64      	subs	r4, r4, r5
 800dfe2:	10a4      	asrs	r4, r4, #2
 800dfe4:	2600      	movs	r6, #0
 800dfe6:	42a6      	cmp	r6, r4
 800dfe8:	d105      	bne.n	800dff6 <__libc_init_array+0x2e>
 800dfea:	bd70      	pop	{r4, r5, r6, pc}
 800dfec:	f855 3b04 	ldr.w	r3, [r5], #4
 800dff0:	4798      	blx	r3
 800dff2:	3601      	adds	r6, #1
 800dff4:	e7ee      	b.n	800dfd4 <__libc_init_array+0xc>
 800dff6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dffa:	4798      	blx	r3
 800dffc:	3601      	adds	r6, #1
 800dffe:	e7f2      	b.n	800dfe6 <__libc_init_array+0x1e>
 800e000:	0800e65c 	.word	0x0800e65c
 800e004:	0800e65c 	.word	0x0800e65c
 800e008:	0800e65c 	.word	0x0800e65c
 800e00c:	0800e664 	.word	0x0800e664

0800e010 <memcpy>:
 800e010:	440a      	add	r2, r1
 800e012:	4291      	cmp	r1, r2
 800e014:	f100 33ff 	add.w	r3, r0, #4294967295
 800e018:	d100      	bne.n	800e01c <memcpy+0xc>
 800e01a:	4770      	bx	lr
 800e01c:	b510      	push	{r4, lr}
 800e01e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e022:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e026:	4291      	cmp	r1, r2
 800e028:	d1f9      	bne.n	800e01e <memcpy+0xe>
 800e02a:	bd10      	pop	{r4, pc}

0800e02c <memset>:
 800e02c:	4402      	add	r2, r0
 800e02e:	4603      	mov	r3, r0
 800e030:	4293      	cmp	r3, r2
 800e032:	d100      	bne.n	800e036 <memset+0xa>
 800e034:	4770      	bx	lr
 800e036:	f803 1b01 	strb.w	r1, [r3], #1
 800e03a:	e7f9      	b.n	800e030 <memset+0x4>

0800e03c <realloc>:
 800e03c:	4b02      	ldr	r3, [pc, #8]	; (800e048 <realloc+0xc>)
 800e03e:	460a      	mov	r2, r1
 800e040:	4601      	mov	r1, r0
 800e042:	6818      	ldr	r0, [r3, #0]
 800e044:	f000 b8da 	b.w	800e1fc <_realloc_r>
 800e048:	24000014 	.word	0x24000014

0800e04c <_raise_r>:
 800e04c:	291f      	cmp	r1, #31
 800e04e:	b538      	push	{r3, r4, r5, lr}
 800e050:	4604      	mov	r4, r0
 800e052:	460d      	mov	r5, r1
 800e054:	d904      	bls.n	800e060 <_raise_r+0x14>
 800e056:	2316      	movs	r3, #22
 800e058:	6003      	str	r3, [r0, #0]
 800e05a:	f04f 30ff 	mov.w	r0, #4294967295
 800e05e:	bd38      	pop	{r3, r4, r5, pc}
 800e060:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e062:	b112      	cbz	r2, 800e06a <_raise_r+0x1e>
 800e064:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e068:	b94b      	cbnz	r3, 800e07e <_raise_r+0x32>
 800e06a:	4620      	mov	r0, r4
 800e06c:	f000 f830 	bl	800e0d0 <_getpid_r>
 800e070:	462a      	mov	r2, r5
 800e072:	4601      	mov	r1, r0
 800e074:	4620      	mov	r0, r4
 800e076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e07a:	f000 b817 	b.w	800e0ac <_kill_r>
 800e07e:	2b01      	cmp	r3, #1
 800e080:	d00a      	beq.n	800e098 <_raise_r+0x4c>
 800e082:	1c59      	adds	r1, r3, #1
 800e084:	d103      	bne.n	800e08e <_raise_r+0x42>
 800e086:	2316      	movs	r3, #22
 800e088:	6003      	str	r3, [r0, #0]
 800e08a:	2001      	movs	r0, #1
 800e08c:	e7e7      	b.n	800e05e <_raise_r+0x12>
 800e08e:	2400      	movs	r4, #0
 800e090:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e094:	4628      	mov	r0, r5
 800e096:	4798      	blx	r3
 800e098:	2000      	movs	r0, #0
 800e09a:	e7e0      	b.n	800e05e <_raise_r+0x12>

0800e09c <raise>:
 800e09c:	4b02      	ldr	r3, [pc, #8]	; (800e0a8 <raise+0xc>)
 800e09e:	4601      	mov	r1, r0
 800e0a0:	6818      	ldr	r0, [r3, #0]
 800e0a2:	f7ff bfd3 	b.w	800e04c <_raise_r>
 800e0a6:	bf00      	nop
 800e0a8:	24000014 	.word	0x24000014

0800e0ac <_kill_r>:
 800e0ac:	b538      	push	{r3, r4, r5, lr}
 800e0ae:	4d07      	ldr	r5, [pc, #28]	; (800e0cc <_kill_r+0x20>)
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	4604      	mov	r4, r0
 800e0b4:	4608      	mov	r0, r1
 800e0b6:	4611      	mov	r1, r2
 800e0b8:	602b      	str	r3, [r5, #0]
 800e0ba:	f7f5 fec1 	bl	8003e40 <_kill>
 800e0be:	1c43      	adds	r3, r0, #1
 800e0c0:	d102      	bne.n	800e0c8 <_kill_r+0x1c>
 800e0c2:	682b      	ldr	r3, [r5, #0]
 800e0c4:	b103      	cbz	r3, 800e0c8 <_kill_r+0x1c>
 800e0c6:	6023      	str	r3, [r4, #0]
 800e0c8:	bd38      	pop	{r3, r4, r5, pc}
 800e0ca:	bf00      	nop
 800e0cc:	24000e04 	.word	0x24000e04

0800e0d0 <_getpid_r>:
 800e0d0:	f7f5 beae 	b.w	8003e30 <_getpid>

0800e0d4 <sbrk_aligned>:
 800e0d4:	b570      	push	{r4, r5, r6, lr}
 800e0d6:	4e0e      	ldr	r6, [pc, #56]	; (800e110 <sbrk_aligned+0x3c>)
 800e0d8:	460c      	mov	r4, r1
 800e0da:	6831      	ldr	r1, [r6, #0]
 800e0dc:	4605      	mov	r5, r0
 800e0de:	b911      	cbnz	r1, 800e0e6 <sbrk_aligned+0x12>
 800e0e0:	f000 f8bc 	bl	800e25c <_sbrk_r>
 800e0e4:	6030      	str	r0, [r6, #0]
 800e0e6:	4621      	mov	r1, r4
 800e0e8:	4628      	mov	r0, r5
 800e0ea:	f000 f8b7 	bl	800e25c <_sbrk_r>
 800e0ee:	1c43      	adds	r3, r0, #1
 800e0f0:	d00a      	beq.n	800e108 <sbrk_aligned+0x34>
 800e0f2:	1cc4      	adds	r4, r0, #3
 800e0f4:	f024 0403 	bic.w	r4, r4, #3
 800e0f8:	42a0      	cmp	r0, r4
 800e0fa:	d007      	beq.n	800e10c <sbrk_aligned+0x38>
 800e0fc:	1a21      	subs	r1, r4, r0
 800e0fe:	4628      	mov	r0, r5
 800e100:	f000 f8ac 	bl	800e25c <_sbrk_r>
 800e104:	3001      	adds	r0, #1
 800e106:	d101      	bne.n	800e10c <sbrk_aligned+0x38>
 800e108:	f04f 34ff 	mov.w	r4, #4294967295
 800e10c:	4620      	mov	r0, r4
 800e10e:	bd70      	pop	{r4, r5, r6, pc}
 800e110:	24000e00 	.word	0x24000e00

0800e114 <_malloc_r>:
 800e114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e118:	1ccd      	adds	r5, r1, #3
 800e11a:	f025 0503 	bic.w	r5, r5, #3
 800e11e:	3508      	adds	r5, #8
 800e120:	2d0c      	cmp	r5, #12
 800e122:	bf38      	it	cc
 800e124:	250c      	movcc	r5, #12
 800e126:	2d00      	cmp	r5, #0
 800e128:	4607      	mov	r7, r0
 800e12a:	db01      	blt.n	800e130 <_malloc_r+0x1c>
 800e12c:	42a9      	cmp	r1, r5
 800e12e:	d905      	bls.n	800e13c <_malloc_r+0x28>
 800e130:	230c      	movs	r3, #12
 800e132:	603b      	str	r3, [r7, #0]
 800e134:	2600      	movs	r6, #0
 800e136:	4630      	mov	r0, r6
 800e138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e13c:	4e2e      	ldr	r6, [pc, #184]	; (800e1f8 <_malloc_r+0xe4>)
 800e13e:	f000 f89d 	bl	800e27c <__malloc_lock>
 800e142:	6833      	ldr	r3, [r6, #0]
 800e144:	461c      	mov	r4, r3
 800e146:	bb34      	cbnz	r4, 800e196 <_malloc_r+0x82>
 800e148:	4629      	mov	r1, r5
 800e14a:	4638      	mov	r0, r7
 800e14c:	f7ff ffc2 	bl	800e0d4 <sbrk_aligned>
 800e150:	1c43      	adds	r3, r0, #1
 800e152:	4604      	mov	r4, r0
 800e154:	d14d      	bne.n	800e1f2 <_malloc_r+0xde>
 800e156:	6834      	ldr	r4, [r6, #0]
 800e158:	4626      	mov	r6, r4
 800e15a:	2e00      	cmp	r6, #0
 800e15c:	d140      	bne.n	800e1e0 <_malloc_r+0xcc>
 800e15e:	6823      	ldr	r3, [r4, #0]
 800e160:	4631      	mov	r1, r6
 800e162:	4638      	mov	r0, r7
 800e164:	eb04 0803 	add.w	r8, r4, r3
 800e168:	f000 f878 	bl	800e25c <_sbrk_r>
 800e16c:	4580      	cmp	r8, r0
 800e16e:	d13a      	bne.n	800e1e6 <_malloc_r+0xd2>
 800e170:	6821      	ldr	r1, [r4, #0]
 800e172:	3503      	adds	r5, #3
 800e174:	1a6d      	subs	r5, r5, r1
 800e176:	f025 0503 	bic.w	r5, r5, #3
 800e17a:	3508      	adds	r5, #8
 800e17c:	2d0c      	cmp	r5, #12
 800e17e:	bf38      	it	cc
 800e180:	250c      	movcc	r5, #12
 800e182:	4629      	mov	r1, r5
 800e184:	4638      	mov	r0, r7
 800e186:	f7ff ffa5 	bl	800e0d4 <sbrk_aligned>
 800e18a:	3001      	adds	r0, #1
 800e18c:	d02b      	beq.n	800e1e6 <_malloc_r+0xd2>
 800e18e:	6823      	ldr	r3, [r4, #0]
 800e190:	442b      	add	r3, r5
 800e192:	6023      	str	r3, [r4, #0]
 800e194:	e00e      	b.n	800e1b4 <_malloc_r+0xa0>
 800e196:	6822      	ldr	r2, [r4, #0]
 800e198:	1b52      	subs	r2, r2, r5
 800e19a:	d41e      	bmi.n	800e1da <_malloc_r+0xc6>
 800e19c:	2a0b      	cmp	r2, #11
 800e19e:	d916      	bls.n	800e1ce <_malloc_r+0xba>
 800e1a0:	1961      	adds	r1, r4, r5
 800e1a2:	42a3      	cmp	r3, r4
 800e1a4:	6025      	str	r5, [r4, #0]
 800e1a6:	bf18      	it	ne
 800e1a8:	6059      	strne	r1, [r3, #4]
 800e1aa:	6863      	ldr	r3, [r4, #4]
 800e1ac:	bf08      	it	eq
 800e1ae:	6031      	streq	r1, [r6, #0]
 800e1b0:	5162      	str	r2, [r4, r5]
 800e1b2:	604b      	str	r3, [r1, #4]
 800e1b4:	4638      	mov	r0, r7
 800e1b6:	f104 060b 	add.w	r6, r4, #11
 800e1ba:	f000 f865 	bl	800e288 <__malloc_unlock>
 800e1be:	f026 0607 	bic.w	r6, r6, #7
 800e1c2:	1d23      	adds	r3, r4, #4
 800e1c4:	1af2      	subs	r2, r6, r3
 800e1c6:	d0b6      	beq.n	800e136 <_malloc_r+0x22>
 800e1c8:	1b9b      	subs	r3, r3, r6
 800e1ca:	50a3      	str	r3, [r4, r2]
 800e1cc:	e7b3      	b.n	800e136 <_malloc_r+0x22>
 800e1ce:	6862      	ldr	r2, [r4, #4]
 800e1d0:	42a3      	cmp	r3, r4
 800e1d2:	bf0c      	ite	eq
 800e1d4:	6032      	streq	r2, [r6, #0]
 800e1d6:	605a      	strne	r2, [r3, #4]
 800e1d8:	e7ec      	b.n	800e1b4 <_malloc_r+0xa0>
 800e1da:	4623      	mov	r3, r4
 800e1dc:	6864      	ldr	r4, [r4, #4]
 800e1de:	e7b2      	b.n	800e146 <_malloc_r+0x32>
 800e1e0:	4634      	mov	r4, r6
 800e1e2:	6876      	ldr	r6, [r6, #4]
 800e1e4:	e7b9      	b.n	800e15a <_malloc_r+0x46>
 800e1e6:	230c      	movs	r3, #12
 800e1e8:	603b      	str	r3, [r7, #0]
 800e1ea:	4638      	mov	r0, r7
 800e1ec:	f000 f84c 	bl	800e288 <__malloc_unlock>
 800e1f0:	e7a1      	b.n	800e136 <_malloc_r+0x22>
 800e1f2:	6025      	str	r5, [r4, #0]
 800e1f4:	e7de      	b.n	800e1b4 <_malloc_r+0xa0>
 800e1f6:	bf00      	nop
 800e1f8:	24000dfc 	.word	0x24000dfc

0800e1fc <_realloc_r>:
 800e1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e200:	4680      	mov	r8, r0
 800e202:	4614      	mov	r4, r2
 800e204:	460e      	mov	r6, r1
 800e206:	b921      	cbnz	r1, 800e212 <_realloc_r+0x16>
 800e208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e20c:	4611      	mov	r1, r2
 800e20e:	f7ff bf81 	b.w	800e114 <_malloc_r>
 800e212:	b92a      	cbnz	r2, 800e220 <_realloc_r+0x24>
 800e214:	f000 f83e 	bl	800e294 <_free_r>
 800e218:	4625      	mov	r5, r4
 800e21a:	4628      	mov	r0, r5
 800e21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e220:	f000 f884 	bl	800e32c <_malloc_usable_size_r>
 800e224:	4284      	cmp	r4, r0
 800e226:	4607      	mov	r7, r0
 800e228:	d802      	bhi.n	800e230 <_realloc_r+0x34>
 800e22a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e22e:	d812      	bhi.n	800e256 <_realloc_r+0x5a>
 800e230:	4621      	mov	r1, r4
 800e232:	4640      	mov	r0, r8
 800e234:	f7ff ff6e 	bl	800e114 <_malloc_r>
 800e238:	4605      	mov	r5, r0
 800e23a:	2800      	cmp	r0, #0
 800e23c:	d0ed      	beq.n	800e21a <_realloc_r+0x1e>
 800e23e:	42bc      	cmp	r4, r7
 800e240:	4622      	mov	r2, r4
 800e242:	4631      	mov	r1, r6
 800e244:	bf28      	it	cs
 800e246:	463a      	movcs	r2, r7
 800e248:	f7ff fee2 	bl	800e010 <memcpy>
 800e24c:	4631      	mov	r1, r6
 800e24e:	4640      	mov	r0, r8
 800e250:	f000 f820 	bl	800e294 <_free_r>
 800e254:	e7e1      	b.n	800e21a <_realloc_r+0x1e>
 800e256:	4635      	mov	r5, r6
 800e258:	e7df      	b.n	800e21a <_realloc_r+0x1e>
	...

0800e25c <_sbrk_r>:
 800e25c:	b538      	push	{r3, r4, r5, lr}
 800e25e:	4d06      	ldr	r5, [pc, #24]	; (800e278 <_sbrk_r+0x1c>)
 800e260:	2300      	movs	r3, #0
 800e262:	4604      	mov	r4, r0
 800e264:	4608      	mov	r0, r1
 800e266:	602b      	str	r3, [r5, #0]
 800e268:	f7f5 fe04 	bl	8003e74 <_sbrk>
 800e26c:	1c43      	adds	r3, r0, #1
 800e26e:	d102      	bne.n	800e276 <_sbrk_r+0x1a>
 800e270:	682b      	ldr	r3, [r5, #0]
 800e272:	b103      	cbz	r3, 800e276 <_sbrk_r+0x1a>
 800e274:	6023      	str	r3, [r4, #0]
 800e276:	bd38      	pop	{r3, r4, r5, pc}
 800e278:	24000e04 	.word	0x24000e04

0800e27c <__malloc_lock>:
 800e27c:	4801      	ldr	r0, [pc, #4]	; (800e284 <__malloc_lock+0x8>)
 800e27e:	f000 b85d 	b.w	800e33c <__retarget_lock_acquire_recursive>
 800e282:	bf00      	nop
 800e284:	24000e08 	.word	0x24000e08

0800e288 <__malloc_unlock>:
 800e288:	4801      	ldr	r0, [pc, #4]	; (800e290 <__malloc_unlock+0x8>)
 800e28a:	f000 b858 	b.w	800e33e <__retarget_lock_release_recursive>
 800e28e:	bf00      	nop
 800e290:	24000e08 	.word	0x24000e08

0800e294 <_free_r>:
 800e294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e296:	2900      	cmp	r1, #0
 800e298:	d044      	beq.n	800e324 <_free_r+0x90>
 800e29a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e29e:	9001      	str	r0, [sp, #4]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f1a1 0404 	sub.w	r4, r1, #4
 800e2a6:	bfb8      	it	lt
 800e2a8:	18e4      	addlt	r4, r4, r3
 800e2aa:	f7ff ffe7 	bl	800e27c <__malloc_lock>
 800e2ae:	4a1e      	ldr	r2, [pc, #120]	; (800e328 <_free_r+0x94>)
 800e2b0:	9801      	ldr	r0, [sp, #4]
 800e2b2:	6813      	ldr	r3, [r2, #0]
 800e2b4:	b933      	cbnz	r3, 800e2c4 <_free_r+0x30>
 800e2b6:	6063      	str	r3, [r4, #4]
 800e2b8:	6014      	str	r4, [r2, #0]
 800e2ba:	b003      	add	sp, #12
 800e2bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e2c0:	f7ff bfe2 	b.w	800e288 <__malloc_unlock>
 800e2c4:	42a3      	cmp	r3, r4
 800e2c6:	d908      	bls.n	800e2da <_free_r+0x46>
 800e2c8:	6825      	ldr	r5, [r4, #0]
 800e2ca:	1961      	adds	r1, r4, r5
 800e2cc:	428b      	cmp	r3, r1
 800e2ce:	bf01      	itttt	eq
 800e2d0:	6819      	ldreq	r1, [r3, #0]
 800e2d2:	685b      	ldreq	r3, [r3, #4]
 800e2d4:	1949      	addeq	r1, r1, r5
 800e2d6:	6021      	streq	r1, [r4, #0]
 800e2d8:	e7ed      	b.n	800e2b6 <_free_r+0x22>
 800e2da:	461a      	mov	r2, r3
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	b10b      	cbz	r3, 800e2e4 <_free_r+0x50>
 800e2e0:	42a3      	cmp	r3, r4
 800e2e2:	d9fa      	bls.n	800e2da <_free_r+0x46>
 800e2e4:	6811      	ldr	r1, [r2, #0]
 800e2e6:	1855      	adds	r5, r2, r1
 800e2e8:	42a5      	cmp	r5, r4
 800e2ea:	d10b      	bne.n	800e304 <_free_r+0x70>
 800e2ec:	6824      	ldr	r4, [r4, #0]
 800e2ee:	4421      	add	r1, r4
 800e2f0:	1854      	adds	r4, r2, r1
 800e2f2:	42a3      	cmp	r3, r4
 800e2f4:	6011      	str	r1, [r2, #0]
 800e2f6:	d1e0      	bne.n	800e2ba <_free_r+0x26>
 800e2f8:	681c      	ldr	r4, [r3, #0]
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	6053      	str	r3, [r2, #4]
 800e2fe:	4421      	add	r1, r4
 800e300:	6011      	str	r1, [r2, #0]
 800e302:	e7da      	b.n	800e2ba <_free_r+0x26>
 800e304:	d902      	bls.n	800e30c <_free_r+0x78>
 800e306:	230c      	movs	r3, #12
 800e308:	6003      	str	r3, [r0, #0]
 800e30a:	e7d6      	b.n	800e2ba <_free_r+0x26>
 800e30c:	6825      	ldr	r5, [r4, #0]
 800e30e:	1961      	adds	r1, r4, r5
 800e310:	428b      	cmp	r3, r1
 800e312:	bf04      	itt	eq
 800e314:	6819      	ldreq	r1, [r3, #0]
 800e316:	685b      	ldreq	r3, [r3, #4]
 800e318:	6063      	str	r3, [r4, #4]
 800e31a:	bf04      	itt	eq
 800e31c:	1949      	addeq	r1, r1, r5
 800e31e:	6021      	streq	r1, [r4, #0]
 800e320:	6054      	str	r4, [r2, #4]
 800e322:	e7ca      	b.n	800e2ba <_free_r+0x26>
 800e324:	b003      	add	sp, #12
 800e326:	bd30      	pop	{r4, r5, pc}
 800e328:	24000dfc 	.word	0x24000dfc

0800e32c <_malloc_usable_size_r>:
 800e32c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e330:	1f18      	subs	r0, r3, #4
 800e332:	2b00      	cmp	r3, #0
 800e334:	bfbc      	itt	lt
 800e336:	580b      	ldrlt	r3, [r1, r0]
 800e338:	18c0      	addlt	r0, r0, r3
 800e33a:	4770      	bx	lr

0800e33c <__retarget_lock_acquire_recursive>:
 800e33c:	4770      	bx	lr

0800e33e <__retarget_lock_release_recursive>:
 800e33e:	4770      	bx	lr

0800e340 <_init>:
 800e340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e342:	bf00      	nop
 800e344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e346:	bc08      	pop	{r3}
 800e348:	469e      	mov	lr, r3
 800e34a:	4770      	bx	lr

0800e34c <_fini>:
 800e34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e34e:	bf00      	nop
 800e350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e352:	bc08      	pop	{r3}
 800e354:	469e      	mov	lr, r3
 800e356:	4770      	bx	lr
