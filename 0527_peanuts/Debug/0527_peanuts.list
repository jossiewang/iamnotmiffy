
0527_peanuts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6fc  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  0800e9cc  0800e9cc  0001e9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ecd8  0800ecd8  0001ecd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800ece0  0800ece0  0001ece0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ece8  0800ece8  0001ece8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  24000000  0800ecec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000f30  24000080  0800ed6c  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000fb0  0800ed6c  00020fb0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f6cb  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000337c  00000000  00000000  0003f779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001478  00000000  00000000  00042af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001388  00000000  00000000  00043f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034eee  00000000  00000000  000452f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a955  00000000  00000000  0007a1e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001534e3  00000000  00000000  00094b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e801e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c50  00000000  00000000  001e8070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000080 	.word	0x24000080
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800e9b4 	.word	0x0800e9b4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000084 	.word	0x24000084
 800030c:	0800e9b4 	.word	0x0800e9b4

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f004 fb28 	bl	8004cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f896 	bl	80007b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 fc0c 	bl	8000ea8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000690:	f000 fbe2 	bl	8000e58 <MX_DMA_Init>
  MX_TIM3_Init();
 8000694:	f000 f9be 	bl	8000a14 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000698:	f000 fa0a 	bl	8000ab0 <MX_TIM4_Init>
  MX_TIM8_Init();
 800069c:	f000 faac 	bl	8000bf8 <MX_TIM8_Init>
  MX_TIM23_Init();
 80006a0:	f000 fb38 	bl	8000d14 <MX_TIM23_Init>
  MX_TIM1_Init();
 80006a4:	f000 f8f8 	bl	8000898 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80006a8:	f000 fb8a 	bl	8000dc0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80006ac:	f000 f94e 	bl	800094c <MX_TIM2_Init>
  MX_TIM5_Init();
 80006b0:	f000 fa54 	bl	8000b5c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80006b4:	4832      	ldr	r0, [pc, #200]	; (8000780 <main+0x100>)
 80006b6:	f00a fa67 	bl	800ab88 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80006ba:	4832      	ldr	r0, [pc, #200]	; (8000784 <main+0x104>)
 80006bc:	f00a fa64 	bl	800ab88 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(TIM_ENC_MF, TIM_CHANNEL_1);
 80006c0:	2100      	movs	r1, #0
 80006c2:	4831      	ldr	r0, [pc, #196]	; (8000788 <main+0x108>)
 80006c4:	f00a fd00 	bl	800b0c8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(TIM_ENC_MF, TIM_CHANNEL_2);
 80006c8:	2104      	movs	r1, #4
 80006ca:	482f      	ldr	r0, [pc, #188]	; (8000788 <main+0x108>)
 80006cc:	f00a fcfc 	bl	800b0c8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_ML, TIM_CHANNEL_1);
 80006d0:	2100      	movs	r1, #0
 80006d2:	482e      	ldr	r0, [pc, #184]	; (800078c <main+0x10c>)
 80006d4:	f00a fcf8 	bl	800b0c8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_ML, TIM_CHANNEL_2);
 80006d8:	2104      	movs	r1, #4
 80006da:	482c      	ldr	r0, [pc, #176]	; (800078c <main+0x10c>)
 80006dc:	f00a fcf4 	bl	800b0c8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_MR, TIM_CHANNEL_1);
 80006e0:	2100      	movs	r1, #0
 80006e2:	482b      	ldr	r0, [pc, #172]	; (8000790 <main+0x110>)
 80006e4:	f00a fcf0 	bl	800b0c8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_MR, TIM_CHANNEL_2);
 80006e8:	2104      	movs	r1, #4
 80006ea:	4829      	ldr	r0, [pc, #164]	; (8000790 <main+0x110>)
 80006ec:	f00a fcec 	bl	800b0c8 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(TIM_PWM_MF, CH_PWM_MF);
 80006f0:	2100      	movs	r1, #0
 80006f2:	4828      	ldr	r0, [pc, #160]	; (8000794 <main+0x114>)
 80006f4:	f00a fb26 	bl	800ad44 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(TIM_PWM_ML, CH_PWM_ML);
 80006f8:	210c      	movs	r1, #12
 80006fa:	4826      	ldr	r0, [pc, #152]	; (8000794 <main+0x114>)
 80006fc:	f00a fb22 	bl	800ad44 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(TIM_PWM_MR, CH_PWM_MR);
 8000700:	2108      	movs	r1, #8
 8000702:	4825      	ldr	r0, [pc, #148]	; (8000798 <main+0x118>)
 8000704:	f00a fb1e 	bl	800ad44 <HAL_TIM_PWM_Start>
  	setup();
 8000708:	f003 f85a 	bl	80037c0 <setup>
  	adjVx = 1.885714;
 800070c:	4923      	ldr	r1, [pc, #140]	; (800079c <main+0x11c>)
 800070e:	a314      	add	r3, pc, #80	; (adr r3, 8000760 <main+0xe0>)
 8000710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000714:	e9c1 2300 	strd	r2, r3, [r1]
  	adjVy = 0.9637056234718826;
 8000718:	4921      	ldr	r1, [pc, #132]	; (80007a0 <main+0x120>)
 800071a:	a313      	add	r3, pc, #76	; (adr r3, 8000768 <main+0xe8>)
 800071c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000720:	e9c1 2300 	strd	r2, r3, [r1]
  	adjW = 3.922374063966527;
 8000724:	491f      	ldr	r1, [pc, #124]	; (80007a4 <main+0x124>)
 8000726:	a312      	add	r3, pc, #72	; (adr r3, 8000770 <main+0xf0>)
 8000728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800072c:	e9c1 2300 	strd	r2, r3, [r1]
  	cmnMF = 1;
 8000730:	491d      	ldr	r1, [pc, #116]	; (80007a8 <main+0x128>)
 8000732:	f04f 0200 	mov.w	r2, #0
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <main+0x12c>)
 8000738:	e9c1 2300 	strd	r2, r3, [r1]
  	cmnML = 1;
 800073c:	491c      	ldr	r1, [pc, #112]	; (80007b0 <main+0x130>)
 800073e:	f04f 0200 	mov.w	r2, #0
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <main+0x12c>)
 8000744:	e9c1 2300 	strd	r2, r3, [r1]
  	cmnMR = 1.003;
 8000748:	491a      	ldr	r1, [pc, #104]	; (80007b4 <main+0x134>)
 800074a:	a30b      	add	r3, pc, #44	; (adr r3, 8000778 <main+0xf8>)
 800074c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000750:	e9c1 2300 	strd	r2, r3, [r1]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000754:	f003 f850 	bl	80037f8 <loop>
 8000758:	e7fc      	b.n	8000754 <main+0xd4>
 800075a:	bf00      	nop
 800075c:	f3af 8000 	nop.w
 8000760:	7179bfdf 	.word	0x7179bfdf
 8000764:	3ffe2be2 	.word	0x3ffe2be2
 8000768:	2cf90e8c 	.word	0x2cf90e8c
 800076c:	3feed6ad 	.word	0x3feed6ad
 8000770:	a73b519b 	.word	0xa73b519b
 8000774:	400f6105 	.word	0x400f6105
 8000778:	ba5e353f 	.word	0xba5e353f
 800077c:	3ff00c49 	.word	0x3ff00c49
 8000780:	24000134 	.word	0x24000134
 8000784:	240001cc 	.word	0x240001cc
 8000788:	2400009c 	.word	0x2400009c
 800078c:	24000180 	.word	0x24000180
 8000790:	24000264 	.word	0x24000264
 8000794:	240000e8 	.word	0x240000e8
 8000798:	24000218 	.word	0x24000218
 800079c:	24000500 	.word	0x24000500
 80007a0:	24000508 	.word	0x24000508
 80007a4:	24000510 	.word	0x24000510
 80007a8:	24000518 	.word	0x24000518
 80007ac:	3ff00000 	.word	0x3ff00000
 80007b0:	24000520 	.word	0x24000520
 80007b4:	24000528 	.word	0x24000528

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b09c      	sub	sp, #112	; 0x70
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	224c      	movs	r2, #76	; 0x4c
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f00d ff6a 	bl	800e6a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2220      	movs	r2, #32
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f00d ff64 	bl	800e6a0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007d8:	2002      	movs	r0, #2
 80007da:	f007 fc1b 	bl	8008014 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b2c      	ldr	r3, [pc, #176]	; (8000894 <SystemClock_Config+0xdc>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007ea:	4a2a      	ldr	r2, [pc, #168]	; (8000894 <SystemClock_Config+0xdc>)
 80007ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f0:	6193      	str	r3, [r2, #24]
 80007f2:	4b28      	ldr	r3, [pc, #160]	; (8000894 <SystemClock_Config+0xdc>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007fe:	bf00      	nop
 8000800:	4b24      	ldr	r3, [pc, #144]	; (8000894 <SystemClock_Config+0xdc>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800080c:	d1f8      	bne.n	8000800 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080e:	2301      	movs	r3, #1
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000812:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000818:	2302      	movs	r3, #2
 800081a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081c:	2302      	movs	r3, #2
 800081e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000820:	2304      	movs	r3, #4
 8000822:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000824:	23a8      	movs	r3, #168	; 0xa8
 8000826:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000828:	2301      	movs	r3, #1
 800082a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800082c:	2302      	movs	r3, #2
 800082e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000830:	2302      	movs	r3, #2
 8000832:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000834:	2304      	movs	r3, #4
 8000836:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000838:	2300      	movs	r3, #0
 800083a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000844:	4618      	mov	r0, r3
 8000846:	f007 fc1f 	bl	8008088 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000850:	f001 f944 	bl	8001adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	233f      	movs	r3, #63	; 0x3f
 8000856:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000858:	2303      	movs	r3, #3
 800085a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 800085c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000860:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000862:	2308      	movs	r3, #8
 8000864:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000866:	2340      	movs	r3, #64	; 0x40
 8000868:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800086a:	2340      	movs	r3, #64	; 0x40
 800086c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800086e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000872:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000874:	2340      	movs	r3, #64	; 0x40
 8000876:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2102      	movs	r1, #2
 800087c:	4618      	mov	r0, r3
 800087e:	f007 ffdd 	bl	800883c <HAL_RCC_ClockConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000888:	f001 f928 	bl	8001adc <Error_Handler>
  }
}
 800088c:	bf00      	nop
 800088e:	3770      	adds	r7, #112	; 0x70
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	58024800 	.word	0x58024800

08000898 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	; 0x30
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	2224      	movs	r2, #36	; 0x24
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f00d fefa 	bl	800e6a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ac:	463b      	mov	r3, r7
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008b6:	4b23      	ldr	r3, [pc, #140]	; (8000944 <MX_TIM1_Init+0xac>)
 80008b8:	4a23      	ldr	r2, [pc, #140]	; (8000948 <MX_TIM1_Init+0xb0>)
 80008ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008bc:	4b21      	ldr	r3, [pc, #132]	; (8000944 <MX_TIM1_Init+0xac>)
 80008be:	2200      	movs	r2, #0
 80008c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <MX_TIM1_Init+0xac>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008c8:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <MX_TIM1_Init+0xac>)
 80008ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <MX_TIM1_Init+0xac>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_TIM1_Init+0xac>)
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008dc:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_TIM1_Init+0xac>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008e2:	2303      	movs	r3, #3
 80008e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008ea:	2301      	movs	r3, #1
 80008ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008fa:	2301      	movs	r3, #1
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	4619      	mov	r1, r3
 800090c:	480d      	ldr	r0, [pc, #52]	; (8000944 <MX_TIM1_Init+0xac>)
 800090e:	f00a fb35 	bl	800af7c <HAL_TIM_Encoder_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000918:	f001 f8e0 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091c:	2300      	movs	r3, #0
 800091e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000928:	463b      	mov	r3, r7
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_TIM1_Init+0xac>)
 800092e:	f00b fbed 	bl	800c10c <HAL_TIMEx_MasterConfigSynchronization>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000938:	f001 f8d0 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	3730      	adds	r7, #48	; 0x30
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2400009c 	.word	0x2400009c
 8000948:	40010000 	.word	0x40010000

0800094c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800095e:	463b      	mov	r3, r7
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
 800096c:	615a      	str	r2, [r3, #20]
 800096e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000970:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <MX_TIM2_Init+0xc4>)
 8000972:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000976:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000978:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <MX_TIM2_Init+0xc4>)
 800097a:	2253      	movs	r2, #83	; 0x53
 800097c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097e:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <MX_TIM2_Init+0xc4>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 8000984:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <MX_TIM2_Init+0xc4>)
 8000986:	2231      	movs	r2, #49	; 0x31
 8000988:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <MX_TIM2_Init+0xc4>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <MX_TIM2_Init+0xc4>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000996:	481e      	ldr	r0, [pc, #120]	; (8000a10 <MX_TIM2_Init+0xc4>)
 8000998:	f00a f97c 	bl	800ac94 <HAL_TIM_PWM_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80009a2:	f001 f89b 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4816      	ldr	r0, [pc, #88]	; (8000a10 <MX_TIM2_Init+0xc4>)
 80009b6:	f00b fba9 	bl	800c10c <HAL_TIMEx_MasterConfigSynchronization>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80009c0:	f001 f88c 	bl	8001adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c4:	2360      	movs	r3, #96	; 0x60
 80009c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d4:	463b      	mov	r3, r7
 80009d6:	2200      	movs	r2, #0
 80009d8:	4619      	mov	r1, r3
 80009da:	480d      	ldr	r0, [pc, #52]	; (8000a10 <MX_TIM2_Init+0xc4>)
 80009dc:	f00a fd22 	bl	800b424 <HAL_TIM_PWM_ConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80009e6:	f001 f879 	bl	8001adc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009ea:	463b      	mov	r3, r7
 80009ec:	220c      	movs	r2, #12
 80009ee:	4619      	mov	r1, r3
 80009f0:	4807      	ldr	r0, [pc, #28]	; (8000a10 <MX_TIM2_Init+0xc4>)
 80009f2:	f00a fd17 	bl	800b424 <HAL_TIM_PWM_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80009fc:	f001 f86e 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a00:	4803      	ldr	r0, [pc, #12]	; (8000a10 <MX_TIM2_Init+0xc4>)
 8000a02:	f003 fed1 	bl	80047a8 <HAL_TIM_MspPostInit>

}
 8000a06:	bf00      	nop
 8000a08:	3728      	adds	r7, #40	; 0x28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	240000e8 	.word	0x240000e8

08000a14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a32:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <MX_TIM3_Init+0x94>)
 8000a34:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <MX_TIM3_Init+0x98>)
 8000a36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_TIM3_Init+0x94>)
 8000a3a:	f240 3247 	movw	r2, #839	; 0x347
 8000a3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a40:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_TIM3_Init+0x94>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_TIM3_Init+0x94>)
 8000a48:	2263      	movs	r2, #99	; 0x63
 8000a4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_TIM3_Init+0x94>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_TIM3_Init+0x94>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a58:	4813      	ldr	r0, [pc, #76]	; (8000aa8 <MX_TIM3_Init+0x94>)
 8000a5a:	f00a f83d 	bl	800aad8 <HAL_TIM_Base_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000a64:	f001 f83a 	bl	8001adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4619      	mov	r1, r3
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <MX_TIM3_Init+0x94>)
 8000a76:	f00a fde9 	bl	800b64c <HAL_TIM_ConfigClockSource>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a80:	f001 f82c 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_TIM3_Init+0x94>)
 8000a92:	f00b fb3b 	bl	800c10c <HAL_TIMEx_MasterConfigSynchronization>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a9c:	f001 f81e 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	3720      	adds	r7, #32
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	24000134 	.word	0x24000134
 8000aac:	40000400 	.word	0x40000400

08000ab0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08c      	sub	sp, #48	; 0x30
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	2224      	movs	r2, #36	; 0x24
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f00d fdee 	bl	800e6a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <MX_TIM4_Init+0xa4>)
 8000ad0:	4a21      	ldr	r2, [pc, #132]	; (8000b58 <MX_TIM4_Init+0xa8>)
 8000ad2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <MX_TIM4_Init+0xa4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <MX_TIM4_Init+0xa4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <MX_TIM4_Init+0xa4>)
 8000ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_TIM4_Init+0xa4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <MX_TIM4_Init+0xa4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000af4:	2303      	movs	r3, #3
 8000af6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000afc:	2301      	movs	r3, #1
 8000afe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <MX_TIM4_Init+0xa4>)
 8000b20:	f00a fa2c 	bl	800af7c <HAL_TIM_Encoder_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000b2a:	f000 ffd7 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b36:	463b      	mov	r3, r7
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <MX_TIM4_Init+0xa4>)
 8000b3c:	f00b fae6 	bl	800c10c <HAL_TIMEx_MasterConfigSynchronization>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000b46:	f000 ffc9 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	3730      	adds	r7, #48	; 0x30
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	24000180 	.word	0x24000180
 8000b58:	40000800 	.word	0x40000800

08000b5c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <MX_TIM5_Init+0x94>)
 8000b7c:	4a1d      	ldr	r2, [pc, #116]	; (8000bf4 <MX_TIM5_Init+0x98>)
 8000b7e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <MX_TIM5_Init+0x94>)
 8000b82:	2253      	movs	r2, #83	; 0x53
 8000b84:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b86:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <MX_TIM5_Init+0x94>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 8000b8c:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <MX_TIM5_Init+0x94>)
 8000b8e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b92:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MX_TIM5_Init+0x94>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_TIM5_Init+0x94>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ba0:	4813      	ldr	r0, [pc, #76]	; (8000bf0 <MX_TIM5_Init+0x94>)
 8000ba2:	f009 ff99 	bl	800aad8 <HAL_TIM_Base_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000bac:	f000 ff96 	bl	8001adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <MX_TIM5_Init+0x94>)
 8000bbe:	f00a fd45 	bl	800b64c <HAL_TIM_ConfigClockSource>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000bc8:	f000 ff88 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_TIM5_Init+0x94>)
 8000bda:	f00b fa97 	bl	800c10c <HAL_TIMEx_MasterConfigSynchronization>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000be4:	f000 ff7a 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	3720      	adds	r7, #32
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	240001cc 	.word	0x240001cc
 8000bf4:	40000c00 	.word	0x40000c00

08000bf8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b098      	sub	sp, #96	; 0x60
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]
 8000c1a:	615a      	str	r2, [r3, #20]
 8000c1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2234      	movs	r2, #52	; 0x34
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f00d fd3b 	bl	800e6a0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c2a:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <MX_TIM8_Init+0x114>)
 8000c2c:	4a38      	ldr	r2, [pc, #224]	; (8000d10 <MX_TIM8_Init+0x118>)
 8000c2e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8000c30:	4b36      	ldr	r3, [pc, #216]	; (8000d0c <MX_TIM8_Init+0x114>)
 8000c32:	2253      	movs	r2, #83	; 0x53
 8000c34:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c36:	4b35      	ldr	r3, [pc, #212]	; (8000d0c <MX_TIM8_Init+0x114>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8000c3c:	4b33      	ldr	r3, [pc, #204]	; (8000d0c <MX_TIM8_Init+0x114>)
 8000c3e:	2231      	movs	r2, #49	; 0x31
 8000c40:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c42:	4b32      	ldr	r3, [pc, #200]	; (8000d0c <MX_TIM8_Init+0x114>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c48:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <MX_TIM8_Init+0x114>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <MX_TIM8_Init+0x114>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000c54:	482d      	ldr	r0, [pc, #180]	; (8000d0c <MX_TIM8_Init+0x114>)
 8000c56:	f00a f81d 	bl	800ac94 <HAL_TIM_PWM_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000c60:	f000 ff3c 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000c70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c74:	4619      	mov	r1, r3
 8000c76:	4825      	ldr	r0, [pc, #148]	; (8000d0c <MX_TIM8_Init+0x114>)
 8000c78:	f00b fa48 	bl	800c10c <HAL_TIMEx_MasterConfigSynchronization>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8000c82:	f000 ff2b 	bl	8001adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c86:	2360      	movs	r3, #96	; 0x60
 8000c88:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c92:	2300      	movs	r3, #0
 8000c94:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ca2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4818      	ldr	r0, [pc, #96]	; (8000d0c <MX_TIM8_Init+0x114>)
 8000cac:	f00a fbba 	bl	800b424 <HAL_TIM_PWM_ConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8000cb6:	f000 ff11 	bl	8001adc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000cdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	4619      	mov	r1, r3
 8000cee:	4807      	ldr	r0, [pc, #28]	; (8000d0c <MX_TIM8_Init+0x114>)
 8000cf0:	f00b faa8 	bl	800c244 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8000cfa:	f000 feef 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000cfe:	4803      	ldr	r0, [pc, #12]	; (8000d0c <MX_TIM8_Init+0x114>)
 8000d00:	f003 fd52 	bl	80047a8 <HAL_TIM_MspPostInit>

}
 8000d04:	bf00      	nop
 8000d06:	3760      	adds	r7, #96	; 0x60
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	24000218 	.word	0x24000218
 8000d10:	40010400 	.word	0x40010400

08000d14 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08c      	sub	sp, #48	; 0x30
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	2224      	movs	r2, #36	; 0x24
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f00d fcbc 	bl	800e6a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000d32:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <MX_TIM23_Init+0xa4>)
 8000d34:	4a21      	ldr	r2, [pc, #132]	; (8000dbc <MX_TIM23_Init+0xa8>)
 8000d36:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8000d38:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <MX_TIM23_Init+0xa4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3e:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <MX_TIM23_Init+0xa4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8000d44:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <MX_TIM23_Init+0xa4>)
 8000d46:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4a:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <MX_TIM23_Init+0xa4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MX_TIM23_Init+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d60:	2301      	movs	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d70:	2301      	movs	r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	4619      	mov	r1, r3
 8000d82:	480d      	ldr	r0, [pc, #52]	; (8000db8 <MX_TIM23_Init+0xa4>)
 8000d84:	f00a f8fa 	bl	800af7c <HAL_TIM_Encoder_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 8000d8e:	f000 fea5 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d92:	2300      	movs	r3, #0
 8000d94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4806      	ldr	r0, [pc, #24]	; (8000db8 <MX_TIM23_Init+0xa4>)
 8000da0:	f00b f9b4 	bl	800c10c <HAL_TIMEx_MasterConfigSynchronization>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 8000daa:	f000 fe97 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	3730      	adds	r7, #48	; 0x30
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	24000264 	.word	0x24000264
 8000dbc:	4000e000 	.word	0x4000e000

08000dc0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dc4:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000dc6:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <MX_USART3_UART_Init+0x94>)
 8000dc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dca:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000dcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dde:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000de6:	220c      	movs	r2, #12
 8000de8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df0:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df6:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e08:	4811      	ldr	r0, [pc, #68]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000e0a:	f00b fad9 	bl	800c3c0 <HAL_UART_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e14:	f000 fe62 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e18:	2100      	movs	r1, #0
 8000e1a:	480d      	ldr	r0, [pc, #52]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000e1c:	f00d fb22 	bl	800e464 <HAL_UARTEx_SetTxFifoThreshold>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e26:	f000 fe59 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4808      	ldr	r0, [pc, #32]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000e2e:	f00d fb57 	bl	800e4e0 <HAL_UARTEx_SetRxFifoThreshold>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e38:	f000 fe50 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e3c:	4804      	ldr	r0, [pc, #16]	; (8000e50 <MX_USART3_UART_Init+0x90>)
 8000e3e:	f00d fad8 	bl	800e3f2 <HAL_UARTEx_DisableFifoMode>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e48:	f000 fe48 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	240002b0 	.word	0x240002b0
 8000e54:	40004800 	.word	0x40004800

08000e58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_DMA_Init+0x4c>)
 8000e60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e64:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <MX_DMA_Init+0x4c>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <MX_DMA_Init+0x4c>)
 8000e70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	200b      	movs	r0, #11
 8000e82:	f004 f896 	bl	8004fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e86:	200b      	movs	r0, #11
 8000e88:	f004 f8ad 	bl	8004fe6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	200c      	movs	r0, #12
 8000e92:	f004 f88e 	bl	8004fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e96:	200c      	movs	r0, #12
 8000e98:	f004 f8a5 	bl	8004fe6 <HAL_NVIC_EnableIRQ>

}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	58024400 	.word	0x58024400

08000ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08c      	sub	sp, #48	; 0x30
 8000eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ebe:	4b39      	ldr	r3, [pc, #228]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec4:	4a37      	ldr	r2, [pc, #220]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000ec6:	f043 0310 	orr.w	r3, r3, #16
 8000eca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ece:	4b35      	ldr	r3, [pc, #212]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed4:	f003 0310 	and.w	r3, r3, #16
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000edc:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee2:	4a30      	ldr	r2, [pc, #192]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eec:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000efa:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f00:	4a28      	ldr	r2, [pc, #160]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000f02:	f043 0320 	orr.w	r3, r3, #32
 8000f06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f0a:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f10:	f003 0320 	and.w	r3, r3, #32
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1e:	4a21      	ldr	r2, [pc, #132]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3c:	4a19      	ldr	r2, [pc, #100]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000f5c:	f043 0308 	orr.w	r3, r3, #8
 8000f60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_GPIO_Init+0xfc>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8000f72:	2200      	movs	r2, #0
 8000f74:	f249 51c0 	movw	r1, #38336	; 0x95c0
 8000f78:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <MX_GPIO_Init+0x100>)
 8000f7a:	f007 f831 	bl	8007fe0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8000f7e:	f249 53c0 	movw	r3, #38336	; 0x95c0
 8000f82:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4619      	mov	r1, r3
 8000f96:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <MX_GPIO_Init+0x100>)
 8000f98:	f006 fe7a 	bl	8007c90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f9c:	bf00      	nop
 8000f9e:	3730      	adds	r7, #48	; 0x30
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	58024400 	.word	0x58024400
 8000fa8:	58021000 	.word	0x58021000

08000fac <HAL_TIM_PeriodElapsedCallback>:
double WF, WR, WL;
int into_tim3=0;
int into_tim5=0;
int into_PID=0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a42      	ldr	r2, [pc, #264]	; (80010c4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d172      	bne.n	80010a4 <HAL_TIM_PeriodElapsedCallback+0xf8>

		if (straight_test_cnt > 20000 && run == 1) {
 8000fbe:	4b42      	ldr	r3, [pc, #264]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	dd1e      	ble.n	8001008 <HAL_TIM_PeriodElapsedCallback+0x5c>
 8000fca:	4b40      	ldr	r3, [pc, #256]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d11a      	bne.n	8001008 <HAL_TIM_PeriodElapsedCallback+0x5c>
			Vx = 0;
 8000fd2:	493f      	ldr	r1, [pc, #252]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	f04f 0300 	mov.w	r3, #0
 8000fdc:	e9c1 2300 	strd	r2, r3, [r1]
			Vy = 0;
 8000fe0:	493c      	ldr	r1, [pc, #240]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	e9c1 2300 	strd	r2, r3, [r1]
			W = 0;
 8000fee:	493a      	ldr	r1, [pc, #232]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	e9c1 2300 	strd	r2, r3, [r1]
			straight_test_cnt--;
 8000ffc:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	3b01      	subs	r3, #1
 8001002:	4a31      	ldr	r2, [pc, #196]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	e03f      	b.n	8001088 <HAL_TIM_PeriodElapsedCallback+0xdc>
		} else if (straight_test_cnt > 0 && run == 1) {
 8001008:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	dd1b      	ble.n	8001048 <HAL_TIM_PeriodElapsedCallback+0x9c>
 8001010:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d117      	bne.n	8001048 <HAL_TIM_PeriodElapsedCallback+0x9c>
			Vx = Vx_cmd;
 8001018:	4b30      	ldr	r3, [pc, #192]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x130>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	492c      	ldr	r1, [pc, #176]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001020:	e9c1 2300 	strd	r2, r3, [r1]
			Vy = Vy_cmd;
 8001024:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102a:	492a      	ldr	r1, [pc, #168]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800102c:	e9c1 2300 	strd	r2, r3, [r1]
			W = W_cmd;
 8001030:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001036:	4928      	ldr	r1, [pc, #160]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001038:	e9c1 2300 	strd	r2, r3, [r1]
			straight_test_cnt--;
 800103c:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3b01      	subs	r3, #1
 8001042:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	e01f      	b.n	8001088 <HAL_TIM_PeriodElapsedCallback+0xdc>
//			inte_w = inte_w + rW*motor_span;
		} else if (straight_test_cnt == 0) {
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d11b      	bne.n	8001088 <HAL_TIM_PeriodElapsedCallback+0xdc>
			Vx = 0;
 8001050:	491f      	ldr	r1, [pc, #124]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	e9c1 2300 	strd	r2, r3, [r1]
			Vy = 0;
 800105e:	491d      	ldr	r1, [pc, #116]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	e9c1 2300 	strd	r2, r3, [r1]
			W = 0;
 800106c:	491a      	ldr	r1, [pc, #104]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	e9c1 2300 	strd	r2, r3, [r1]
			run = 0;
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x120>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
			straight_test_cnt = 10000;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001082:	f242 7210 	movw	r2, #10000	; 0x2710
 8001086:	601a      	str	r2, [r3, #0]
//			MF = 0;
//			run = 0;
//			straight_test_cnt = 10000;
//		}

		inverse_kinematics_model();
 8001088:	f000 f836 	bl	80010f8 <inverse_kinematics_model>
		Encoder();
 800108c:	f000 f93c 	bl	8001308 <Encoder>
		PID_PWM();
 8001090:	f000 f9ce 	bl	8001430 <PID_PWM>
		kinematics_model();
 8001094:	f000 fc5c 	bl	8001950 <kinematics_model>
		into_tim3++;
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80010a0:	6013      	str	r3, [r2, #0]
		//rVy = 1;
		//rW = 1;
		realspeed();
		into_tim5++;
	}
}
 80010a2:	e00b      	b.n	80010bc <HAL_TIM_PeriodElapsedCallback+0x110>
	else if(htim->Instance == TIM5){
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a10      	ldr	r2, [pc, #64]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x140>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d106      	bne.n	80010bc <HAL_TIM_PeriodElapsedCallback+0x110>
		realspeed();
 80010ae:	f002 fbad 	bl	800380c <realspeed>
		into_tim5++;
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	3301      	adds	r3, #1
 80010b8:	4a0d      	ldr	r2, [pc, #52]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80010ba:	6013      	str	r3, [r2, #0]
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40000400 	.word	0x40000400
 80010c8:	240004a4 	.word	0x240004a4
 80010cc:	240004a0 	.word	0x240004a0
 80010d0:	240004e8 	.word	0x240004e8
 80010d4:	240004f0 	.word	0x240004f0
 80010d8:	240004f8 	.word	0x240004f8
 80010dc:	24000488 	.word	0x24000488
 80010e0:	24000490 	.word	0x24000490
 80010e4:	24000498 	.word	0x24000498
 80010e8:	240004c0 	.word	0x240004c0
 80010ec:	40000c00 	.word	0x40000c00
 80010f0:	240004c4 	.word	0x240004c4
 80010f4:	00000000 	.word	0x00000000

080010f8 <inverse_kinematics_model>:
////	MF = 0;
////	MR = 0.5;
////	ML = -0.5;
//	}

void inverse_kinematics_model(){
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

	WR = -0.536*adjVx*Vx -0.027*adjW*W;
 80010fc:	4b72      	ldr	r3, [pc, #456]	; (80012c8 <inverse_kinematics_model+0x1d0>)
 80010fe:	ed93 7b00 	vldr	d7, [r3]
 8001102:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8001298 <inverse_kinematics_model+0x1a0>
 8001106:	ee27 6b06 	vmul.f64	d6, d7, d6
 800110a:	4b70      	ldr	r3, [pc, #448]	; (80012cc <inverse_kinematics_model+0x1d4>)
 800110c:	ed93 7b00 	vldr	d7, [r3]
 8001110:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001114:	4b6e      	ldr	r3, [pc, #440]	; (80012d0 <inverse_kinematics_model+0x1d8>)
 8001116:	ed93 7b00 	vldr	d7, [r3]
 800111a:	ed9f 5b61 	vldr	d5, [pc, #388]	; 80012a0 <inverse_kinematics_model+0x1a8>
 800111e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001122:	4b6c      	ldr	r3, [pc, #432]	; (80012d4 <inverse_kinematics_model+0x1dc>)
 8001124:	ed93 7b00 	vldr	d7, [r3]
 8001128:	ee25 7b07 	vmul.f64	d7, d5, d7
 800112c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001130:	4b69      	ldr	r3, [pc, #420]	; (80012d8 <inverse_kinematics_model+0x1e0>)
 8001132:	ed83 7b00 	vstr	d7, [r3]
	WF = 0.268*adjVx*Vx -0.926*adjVy*Vy -0.027*adjW*W;
 8001136:	4b64      	ldr	r3, [pc, #400]	; (80012c8 <inverse_kinematics_model+0x1d0>)
 8001138:	ed93 7b00 	vldr	d7, [r3]
 800113c:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 80012a8 <inverse_kinematics_model+0x1b0>
 8001140:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001144:	4b61      	ldr	r3, [pc, #388]	; (80012cc <inverse_kinematics_model+0x1d4>)
 8001146:	ed93 7b00 	vldr	d7, [r3]
 800114a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800114e:	4b63      	ldr	r3, [pc, #396]	; (80012dc <inverse_kinematics_model+0x1e4>)
 8001150:	ed93 7b00 	vldr	d7, [r3]
 8001154:	ed9f 5b56 	vldr	d5, [pc, #344]	; 80012b0 <inverse_kinematics_model+0x1b8>
 8001158:	ee27 5b05 	vmul.f64	d5, d7, d5
 800115c:	4b60      	ldr	r3, [pc, #384]	; (80012e0 <inverse_kinematics_model+0x1e8>)
 800115e:	ed93 7b00 	vldr	d7, [r3]
 8001162:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001166:	ee36 6b47 	vsub.f64	d6, d6, d7
 800116a:	4b59      	ldr	r3, [pc, #356]	; (80012d0 <inverse_kinematics_model+0x1d8>)
 800116c:	ed93 7b00 	vldr	d7, [r3]
 8001170:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 80012a0 <inverse_kinematics_model+0x1a8>
 8001174:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001178:	4b56      	ldr	r3, [pc, #344]	; (80012d4 <inverse_kinematics_model+0x1dc>)
 800117a:	ed93 7b00 	vldr	d7, [r3]
 800117e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001182:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001186:	4b57      	ldr	r3, [pc, #348]	; (80012e4 <inverse_kinematics_model+0x1ec>)
 8001188:	ed83 7b00 	vstr	d7, [r3]
	WL = 0.268*adjVx*Vx +0.926*adjVy*Vy -0.027*adjW*W;
 800118c:	4b4e      	ldr	r3, [pc, #312]	; (80012c8 <inverse_kinematics_model+0x1d0>)
 800118e:	ed93 7b00 	vldr	d7, [r3]
 8001192:	ed9f 6b45 	vldr	d6, [pc, #276]	; 80012a8 <inverse_kinematics_model+0x1b0>
 8001196:	ee27 6b06 	vmul.f64	d6, d7, d6
 800119a:	4b4c      	ldr	r3, [pc, #304]	; (80012cc <inverse_kinematics_model+0x1d4>)
 800119c:	ed93 7b00 	vldr	d7, [r3]
 80011a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80011a4:	4b4d      	ldr	r3, [pc, #308]	; (80012dc <inverse_kinematics_model+0x1e4>)
 80011a6:	ed93 7b00 	vldr	d7, [r3]
 80011aa:	ed9f 5b41 	vldr	d5, [pc, #260]	; 80012b0 <inverse_kinematics_model+0x1b8>
 80011ae:	ee27 5b05 	vmul.f64	d5, d7, d5
 80011b2:	4b4b      	ldr	r3, [pc, #300]	; (80012e0 <inverse_kinematics_model+0x1e8>)
 80011b4:	ed93 7b00 	vldr	d7, [r3]
 80011b8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011bc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80011c0:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <inverse_kinematics_model+0x1d8>)
 80011c2:	ed93 7b00 	vldr	d7, [r3]
 80011c6:	ed9f 5b36 	vldr	d5, [pc, #216]	; 80012a0 <inverse_kinematics_model+0x1a8>
 80011ca:	ee27 5b05 	vmul.f64	d5, d7, d5
 80011ce:	4b41      	ldr	r3, [pc, #260]	; (80012d4 <inverse_kinematics_model+0x1dc>)
 80011d0:	ed93 7b00 	vldr	d7, [r3]
 80011d4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80011dc:	4b42      	ldr	r3, [pc, #264]	; (80012e8 <inverse_kinematics_model+0x1f0>)
 80011de:	ed83 7b00 	vstr	d7, [r3]

	MF = (WF/wheel_radius)/ratio_motor2wheel/(2*pi)*cmnspeed*cmnMF;
 80011e2:	4b40      	ldr	r3, [pc, #256]	; (80012e4 <inverse_kinematics_model+0x1ec>)
 80011e4:	ed93 7b00 	vldr	d7, [r3]
 80011e8:	ed9f 5b33 	vldr	d5, [pc, #204]	; 80012b8 <inverse_kinematics_model+0x1c0>
 80011ec:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80011f0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80011f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011f8:	ed9f 5b31 	vldr	d5, [pc, #196]	; 80012c0 <inverse_kinematics_model+0x1c8>
 80011fc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001200:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <inverse_kinematics_model+0x1f4>)
 8001202:	ed93 7b00 	vldr	d7, [r3]
 8001206:	ee26 6b07 	vmul.f64	d6, d6, d7
 800120a:	4b39      	ldr	r3, [pc, #228]	; (80012f0 <inverse_kinematics_model+0x1f8>)
 800120c:	ed93 7b00 	vldr	d7, [r3]
 8001210:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001214:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <inverse_kinematics_model+0x1fc>)
 8001216:	ed83 7b00 	vstr	d7, [r3]
	MR = (WR/wheel_radius)/ratio_motor2wheel/(2*pi)*cmnMR*cmnspeed;
 800121a:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <inverse_kinematics_model+0x1e0>)
 800121c:	ed93 7b00 	vldr	d7, [r3]
 8001220:	ed9f 5b25 	vldr	d5, [pc, #148]	; 80012b8 <inverse_kinematics_model+0x1c0>
 8001224:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001228:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800122c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001230:	ed9f 5b23 	vldr	d5, [pc, #140]	; 80012c0 <inverse_kinematics_model+0x1c8>
 8001234:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001238:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <inverse_kinematics_model+0x200>)
 800123a:	ed93 7b00 	vldr	d7, [r3]
 800123e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001242:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <inverse_kinematics_model+0x1f4>)
 8001244:	ed93 7b00 	vldr	d7, [r3]
 8001248:	ee26 7b07 	vmul.f64	d7, d6, d7
 800124c:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <inverse_kinematics_model+0x204>)
 800124e:	ed83 7b00 	vstr	d7, [r3]
	ML = (WL/wheel_radius)/ratio_motor2wheel/(2*pi)*cmnML*cmnspeed;
 8001252:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <inverse_kinematics_model+0x1f0>)
 8001254:	ed93 7b00 	vldr	d7, [r3]
 8001258:	ed9f 5b17 	vldr	d5, [pc, #92]	; 80012b8 <inverse_kinematics_model+0x1c0>
 800125c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001260:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8001264:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001268:	ed9f 5b15 	vldr	d5, [pc, #84]	; 80012c0 <inverse_kinematics_model+0x1c8>
 800126c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001270:	4b23      	ldr	r3, [pc, #140]	; (8001300 <inverse_kinematics_model+0x208>)
 8001272:	ed93 7b00 	vldr	d7, [r3]
 8001276:	ee26 6b07 	vmul.f64	d6, d6, d7
 800127a:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <inverse_kinematics_model+0x1f4>)
 800127c:	ed93 7b00 	vldr	d7, [r3]
 8001280:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <inverse_kinematics_model+0x20c>)
 8001286:	ed83 7b00 	vstr	d7, [r3]

	}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	f3af 8000 	nop.w
 8001298:	78d4fdf4 	.word	0x78d4fdf4
 800129c:	bfe126e9 	.word	0xbfe126e9
 80012a0:	53f7ced9 	.word	0x53f7ced9
 80012a4:	3f9ba5e3 	.word	0x3f9ba5e3
 80012a8:	78d4fdf4 	.word	0x78d4fdf4
 80012ac:	3fd126e9 	.word	0x3fd126e9
 80012b0:	c083126f 	.word	0xc083126f
 80012b4:	3feda1ca 	.word	0x3feda1ca
 80012b8:	eb851eb8 	.word	0xeb851eb8
 80012bc:	3f9eb851 	.word	0x3f9eb851
 80012c0:	54442eea 	.word	0x54442eea
 80012c4:	401921fb 	.word	0x401921fb
 80012c8:	24000500 	.word	0x24000500
 80012cc:	240004e8 	.word	0x240004e8
 80012d0:	24000510 	.word	0x24000510
 80012d4:	240004f8 	.word	0x240004f8
 80012d8:	240004b0 	.word	0x240004b0
 80012dc:	24000508 	.word	0x24000508
 80012e0:	240004f0 	.word	0x240004f0
 80012e4:	240004a8 	.word	0x240004a8
 80012e8:	240004b8 	.word	0x240004b8
 80012ec:	24000000 	.word	0x24000000
 80012f0:	24000518 	.word	0x24000518
 80012f4:	24000438 	.word	0x24000438
 80012f8:	24000528 	.word	0x24000528
 80012fc:	24000440 	.word	0x24000440
 8001300:	24000520 	.word	0x24000520
 8001304:	24000448 	.word	0x24000448

08001308 <Encoder>:

float inte_rMF = 0;
void Encoder() {
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
	//front wheel motor
	enc_MF = __HAL_TIM_GetCounter(TIM_ENC_MF);
 800130c:	4b3e      	ldr	r3, [pc, #248]	; (8001408 <Encoder+0x100>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	b21a      	sxth	r2, r3
 8001314:	4b3d      	ldr	r3, [pc, #244]	; (800140c <Encoder+0x104>)
 8001316:	801a      	strh	r2, [r3, #0]
	rMF = (double) enc_MF / (4 * resolution_MF * reductionratio_MF) / motor_span;//(2*pi);//rev/s = 2Pi/s
 8001318:	4b3c      	ldr	r3, [pc, #240]	; (800140c <Encoder+0x104>)
 800131a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001326:	ed9f 5b30 	vldr	d5, [pc, #192]	; 80013e8 <Encoder+0xe0>
 800132a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800132e:	ed9f 5b30 	vldr	d5, [pc, #192]	; 80013f0 <Encoder+0xe8>
 8001332:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001336:	4b36      	ldr	r3, [pc, #216]	; (8001410 <Encoder+0x108>)
 8001338:	ed83 7b00 	vstr	d7, [r3]
	__HAL_TIM_SetCounter(TIM_ENC_MF, 0);
 800133c:	4b32      	ldr	r3, [pc, #200]	; (8001408 <Encoder+0x100>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2200      	movs	r2, #0
 8001342:	625a      	str	r2, [r3, #36]	; 0x24

	//right wheel motor
	enc_MR = __HAL_TIM_GetCounter(TIM_ENC_MR);
 8001344:	4b33      	ldr	r3, [pc, #204]	; (8001414 <Encoder+0x10c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	b21a      	sxth	r2, r3
 800134c:	4b32      	ldr	r3, [pc, #200]	; (8001418 <Encoder+0x110>)
 800134e:	801a      	strh	r2, [r3, #0]
	rMR = (double) enc_MR / (4 * resolution_MR * reductionratio_MR) / motor_span;//(2*pi);
 8001350:	4b31      	ldr	r3, [pc, #196]	; (8001418 <Encoder+0x110>)
 8001352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800135e:	ed9f 5b26 	vldr	d5, [pc, #152]	; 80013f8 <Encoder+0xf0>
 8001362:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001366:	ed9f 5b22 	vldr	d5, [pc, #136]	; 80013f0 <Encoder+0xe8>
 800136a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800136e:	4b2b      	ldr	r3, [pc, #172]	; (800141c <Encoder+0x114>)
 8001370:	ed83 7b00 	vstr	d7, [r3]
	__HAL_TIM_SetCounter(TIM_ENC_MR, 0);
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <Encoder+0x10c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2200      	movs	r2, #0
 800137a:	625a      	str	r2, [r3, #36]	; 0x24
	inte_rMF += rMF*motor_span;
 800137c:	4b28      	ldr	r3, [pc, #160]	; (8001420 <Encoder+0x118>)
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001386:	4b22      	ldr	r3, [pc, #136]	; (8001410 <Encoder+0x108>)
 8001388:	ed93 7b00 	vldr	d7, [r3]
 800138c:	ed9f 5b18 	vldr	d5, [pc, #96]	; 80013f0 <Encoder+0xe8>
 8001390:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001394:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001398:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <Encoder+0x118>)
 800139e:	edc3 7a00 	vstr	s15, [r3]

	//left wheel motor
	enc_ML = __HAL_TIM_GetCounter(TIM_ENC_ML);
 80013a2:	4b20      	ldr	r3, [pc, #128]	; (8001424 <Encoder+0x11c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <Encoder+0x120>)
 80013ac:	801a      	strh	r2, [r3, #0]
	rML = (-1)*(double) enc_ML / (4 * resolution_ML * reductionratio_ML) / motor_span;//(2*pi);
 80013ae:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <Encoder+0x120>)
 80013b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80013bc:	eeb1 7b47 	vneg.f64	d7, d7
 80013c0:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8001400 <Encoder+0xf8>
 80013c4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80013c8:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80013f0 <Encoder+0xe8>
 80013cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <Encoder+0x124>)
 80013d2:	ed83 7b00 	vstr	d7, [r3]
	__HAL_TIM_SetCounter(TIM_ENC_ML, 0);
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <Encoder+0x11c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2200      	movs	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	33333333 	.word	0x33333333
 80013ec:	40da1733 	.word	0x40da1733
 80013f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013f4:	3f50624d 	.word	0x3f50624d
 80013f8:	cccccccd 	.word	0xcccccccd
 80013fc:	40e4cccc 	.word	0x40e4cccc
 8001400:	99999999 	.word	0x99999999
 8001404:	40dab599 	.word	0x40dab599
 8001408:	2400009c 	.word	0x2400009c
 800140c:	24000450 	.word	0x24000450
 8001410:	24000458 	.word	0x24000458
 8001414:	24000264 	.word	0x24000264
 8001418:	24000452 	.word	0x24000452
 800141c:	24000460 	.word	0x24000460
 8001420:	240004cc 	.word	0x240004cc
 8001424:	24000180 	.word	0x24000180
 8001428:	24000454 	.word	0x24000454
 800142c:	24000468 	.word	0x24000468

08001430 <PID_PWM>:
int pulse_MF;
int pulse_ML;
int pulse_MR;
float u_MF;
void PID_PWM(){
 8001430:	b580      	push	{r7, lr}
 8001432:	b08e      	sub	sp, #56	; 0x38
 8001434:	af00      	add	r7, sp, #0

	//PID_MF
	double err_MF = MF - rMF;
 8001436:	4bb2      	ldr	r3, [pc, #712]	; (8001700 <PID_PWM+0x2d0>)
 8001438:	ed93 6b00 	vldr	d6, [r3]
 800143c:	4bb1      	ldr	r3, [pc, #708]	; (8001704 <PID_PWM+0x2d4>)
 800143e:	ed93 7b00 	vldr	d7, [r3]
 8001442:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001446:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	inte_MF += err_MF * motor_span;
 800144a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800144e:	ed9f 6baa 	vldr	d6, [pc, #680]	; 80016f8 <PID_PWM+0x2c8>
 8001452:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001456:	4bac      	ldr	r3, [pc, #688]	; (8001708 <PID_PWM+0x2d8>)
 8001458:	ed93 7b00 	vldr	d7, [r3]
 800145c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001460:	4ba9      	ldr	r3, [pc, #676]	; (8001708 <PID_PWM+0x2d8>)
 8001462:	ed83 7b00 	vstr	d7, [r3]
	double bound_MF = 1/ki_MF;
 8001466:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800170c <PID_PWM+0x2dc>
 800146a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800146e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001472:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001476:	ed87 7b08 	vstr	d7, [r7, #32]
	if (ki_MF * inte_MF > 1) inte_MF = bound_MF;
 800147a:	eddf 7aa4 	vldr	s15, [pc, #656]	; 800170c <PID_PWM+0x2dc>
 800147e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001482:	4ba1      	ldr	r3, [pc, #644]	; (8001708 <PID_PWM+0x2d8>)
 8001484:	ed93 7b00 	vldr	d7, [r3]
 8001488:	ee26 7b07 	vmul.f64	d7, d6, d7
 800148c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001490:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001498:	dd05      	ble.n	80014a6 <PID_PWM+0x76>
 800149a:	499b      	ldr	r1, [pc, #620]	; (8001708 <PID_PWM+0x2d8>)
 800149c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014a0:	e9c1 2300 	strd	r2, r3, [r1]
 80014a4:	e016      	b.n	80014d4 <PID_PWM+0xa4>
	else if (ki_MF * inte_MF < -1) inte_MF = -bound_MF;
 80014a6:	eddf 7a99 	vldr	s15, [pc, #612]	; 800170c <PID_PWM+0x2dc>
 80014aa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80014ae:	4b96      	ldr	r3, [pc, #600]	; (8001708 <PID_PWM+0x2d8>)
 80014b0:	ed93 7b00 	vldr	d7, [r3]
 80014b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014b8:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80014bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80014c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c4:	d506      	bpl.n	80014d4 <PID_PWM+0xa4>
 80014c6:	ed97 7b08 	vldr	d7, [r7, #32]
 80014ca:	eeb1 7b47 	vneg.f64	d7, d7
 80014ce:	4b8e      	ldr	r3, [pc, #568]	; (8001708 <PID_PWM+0x2d8>)
 80014d0:	ed83 7b00 	vstr	d7, [r3]
	u_MF = kp_MF * err_MF + ki_MF * inte_MF;
 80014d4:	eddf 7a8e 	vldr	s15, [pc, #568]	; 8001710 <PID_PWM+0x2e0>
 80014d8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80014dc:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80014e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80014e4:	eddf 7a89 	vldr	s15, [pc, #548]	; 800170c <PID_PWM+0x2dc>
 80014e8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80014ec:	4b86      	ldr	r3, [pc, #536]	; (8001708 <PID_PWM+0x2d8>)
 80014ee:	ed93 7b00 	vldr	d7, [r3]
 80014f2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80014f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014fe:	4b85      	ldr	r3, [pc, #532]	; (8001714 <PID_PWM+0x2e4>)
 8001500:	edc3 7a00 	vstr	s15, [r3]
	if (u_MF > 1) u_MF = 1;
 8001504:	4b83      	ldr	r3, [pc, #524]	; (8001714 <PID_PWM+0x2e4>)
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800150e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001516:	dd04      	ble.n	8001522 <PID_PWM+0xf2>
 8001518:	4b7e      	ldr	r3, [pc, #504]	; (8001714 <PID_PWM+0x2e4>)
 800151a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e00c      	b.n	800153c <PID_PWM+0x10c>
	else if (u_MF < -1) u_MF = -1;
 8001522:	4b7c      	ldr	r3, [pc, #496]	; (8001714 <PID_PWM+0x2e4>)
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800152c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001534:	d502      	bpl.n	800153c <PID_PWM+0x10c>
 8001536:	4b77      	ldr	r3, [pc, #476]	; (8001714 <PID_PWM+0x2e4>)
 8001538:	4a77      	ldr	r2, [pc, #476]	; (8001718 <PID_PWM+0x2e8>)
 800153a:	601a      	str	r2, [r3, #0]

	//PWM_MF
	//int pulse_MF;
	if (u_MF > 0) {
 800153c:	4b75      	ldr	r3, [pc, #468]	; (8001714 <PID_PWM+0x2e4>)
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154a:	dd18      	ble.n	800157e <PID_PWM+0x14e>
		pulse_MF = (int) (u_MF * (motorARR + 1));
 800154c:	4b71      	ldr	r3, [pc, #452]	; (8001714 <PID_PWM+0x2e4>)
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8001740 <PID_PWM+0x310>
 8001556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800155a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800155e:	ee17 2a90 	vmov	r2, s15
 8001562:	4b6e      	ldr	r3, [pc, #440]	; (800171c <PID_PWM+0x2ec>)
 8001564:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(INA_MF_PORT, INA_MF_PIN, GPIO_PIN_SET); // INA
 8001566:	2201      	movs	r2, #1
 8001568:	2140      	movs	r1, #64	; 0x40
 800156a:	486d      	ldr	r0, [pc, #436]	; (8001720 <PID_PWM+0x2f0>)
 800156c:	f006 fd38 	bl	8007fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_MF_PORT, INB_MF_PIN, GPIO_PIN_RESET); // INB
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001576:	486a      	ldr	r0, [pc, #424]	; (8001720 <PID_PWM+0x2f0>)
 8001578:	f006 fd32 	bl	8007fe0 <HAL_GPIO_WritePin>
 800157c:	e019      	b.n	80015b2 <PID_PWM+0x182>
	} else {
		pulse_MF = (int) (-u_MF * (motorARR + 1));
 800157e:	4b65      	ldr	r3, [pc, #404]	; (8001714 <PID_PWM+0x2e4>)
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	eef1 7a67 	vneg.f32	s15, s15
 8001588:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001740 <PID_PWM+0x310>
 800158c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001594:	ee17 2a90 	vmov	r2, s15
 8001598:	4b60      	ldr	r3, [pc, #384]	; (800171c <PID_PWM+0x2ec>)
 800159a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(INA_MF_PORT, INA_MF_PIN, GPIO_PIN_RESET); // INA
 800159c:	2200      	movs	r2, #0
 800159e:	2140      	movs	r1, #64	; 0x40
 80015a0:	485f      	ldr	r0, [pc, #380]	; (8001720 <PID_PWM+0x2f0>)
 80015a2:	f006 fd1d 	bl	8007fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_MF_PORT, INB_MF_PIN, GPIO_PIN_SET); // INB
 80015a6:	2201      	movs	r2, #1
 80015a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ac:	485c      	ldr	r0, [pc, #368]	; (8001720 <PID_PWM+0x2f0>)
 80015ae:	f006 fd17 	bl	8007fe0 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(TIM_PWM_MF, CH_PWM_MF, pulse_MF); // PWM
 80015b2:	4b5a      	ldr	r3, [pc, #360]	; (800171c <PID_PWM+0x2ec>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4b5b      	ldr	r3, [pc, #364]	; (8001724 <PID_PWM+0x2f4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	635a      	str	r2, [r3, #52]	; 0x34

	//PID_MR
	double err_MR = MR - rMR;
 80015bc:	4b5a      	ldr	r3, [pc, #360]	; (8001728 <PID_PWM+0x2f8>)
 80015be:	ed93 6b00 	vldr	d6, [r3]
 80015c2:	4b5a      	ldr	r3, [pc, #360]	; (800172c <PID_PWM+0x2fc>)
 80015c4:	ed93 7b00 	vldr	d7, [r3]
 80015c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80015cc:	ed87 7b06 	vstr	d7, [r7, #24]
	inte_MR += err_MR * motor_span;
 80015d0:	ed97 7b06 	vldr	d7, [r7, #24]
 80015d4:	ed9f 6b48 	vldr	d6, [pc, #288]	; 80016f8 <PID_PWM+0x2c8>
 80015d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015dc:	4b54      	ldr	r3, [pc, #336]	; (8001730 <PID_PWM+0x300>)
 80015de:	ed93 7b00 	vldr	d7, [r3]
 80015e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015e6:	4b52      	ldr	r3, [pc, #328]	; (8001730 <PID_PWM+0x300>)
 80015e8:	ed83 7b00 	vstr	d7, [r3]
	double bound_MR = 1/ki_MR;
 80015ec:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001734 <PID_PWM+0x304>
 80015f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015fc:	ed87 7b04 	vstr	d7, [r7, #16]
	if (ki_MR * inte_MR > 1) inte_MR = bound_MR;
 8001600:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8001734 <PID_PWM+0x304>
 8001604:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001608:	4b49      	ldr	r3, [pc, #292]	; (8001730 <PID_PWM+0x300>)
 800160a:	ed93 7b00 	vldr	d7, [r3]
 800160e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001612:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001616:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800161a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161e:	dd05      	ble.n	800162c <PID_PWM+0x1fc>
 8001620:	4943      	ldr	r1, [pc, #268]	; (8001730 <PID_PWM+0x300>)
 8001622:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001626:	e9c1 2300 	strd	r2, r3, [r1]
 800162a:	e016      	b.n	800165a <PID_PWM+0x22a>
	else if (ki_MR * inte_MR < -1) inte_MR = -bound_MR;
 800162c:	eddf 7a41 	vldr	s15, [pc, #260]	; 8001734 <PID_PWM+0x304>
 8001630:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001634:	4b3e      	ldr	r3, [pc, #248]	; (8001730 <PID_PWM+0x300>)
 8001636:	ed93 7b00 	vldr	d7, [r3]
 800163a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800163e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001642:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164a:	d506      	bpl.n	800165a <PID_PWM+0x22a>
 800164c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001650:	eeb1 7b47 	vneg.f64	d7, d7
 8001654:	4b36      	ldr	r3, [pc, #216]	; (8001730 <PID_PWM+0x300>)
 8001656:	ed83 7b00 	vstr	d7, [r3]
	float u_MR = kp_MR * err_MR + ki_MR * inte_MR;
 800165a:	eddf 7a37 	vldr	s15, [pc, #220]	; 8001738 <PID_PWM+0x308>
 800165e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001662:	ed97 7b06 	vldr	d7, [r7, #24]
 8001666:	ee26 6b07 	vmul.f64	d6, d6, d7
 800166a:	eddf 7a32 	vldr	s15, [pc, #200]	; 8001734 <PID_PWM+0x304>
 800166e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001672:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <PID_PWM+0x300>)
 8001674:	ed93 7b00 	vldr	d7, [r3]
 8001678:	ee25 7b07 	vmul.f64	d7, d5, d7
 800167c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001680:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001684:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	if (u_MR > 1) u_MR = 1;
 8001688:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800168c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001698:	dd03      	ble.n	80016a2 <PID_PWM+0x272>
 800169a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800169e:	637b      	str	r3, [r7, #52]	; 0x34
 80016a0:	e00a      	b.n	80016b8 <PID_PWM+0x288>
	else if (u_MR < -1) u_MR = -1;
 80016a2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80016a6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80016aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b2:	d501      	bpl.n	80016b8 <PID_PWM+0x288>
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <PID_PWM+0x2e8>)
 80016b6:	637b      	str	r3, [r7, #52]	; 0x34
	//PWM_MR
	//int pulse_MR;
	if (u_MR > 0) {
 80016b8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80016bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c4:	dd3e      	ble.n	8001744 <PID_PWM+0x314>
		pulse_MR = (int) (u_MR * (motorARR + 1));
 80016c6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80016ca:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001740 <PID_PWM+0x310>
 80016ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d6:	ee17 2a90 	vmov	r2, s15
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <PID_PWM+0x30c>)
 80016dc:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(INA_MR_PORT, INA_MR_PIN, GPIO_PIN_RESET); // INA
 80016de:	2200      	movs	r2, #0
 80016e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e4:	480e      	ldr	r0, [pc, #56]	; (8001720 <PID_PWM+0x2f0>)
 80016e6:	f006 fc7b 	bl	8007fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_MR_PORT, INB_MR_PIN, GPIO_PIN_SET); // INB
 80016ea:	2201      	movs	r2, #1
 80016ec:	2180      	movs	r1, #128	; 0x80
 80016ee:	480c      	ldr	r0, [pc, #48]	; (8001720 <PID_PWM+0x2f0>)
 80016f0:	f006 fc76 	bl	8007fe0 <HAL_GPIO_WritePin>
 80016f4:	e03f      	b.n	8001776 <PID_PWM+0x346>
 80016f6:	bf00      	nop
 80016f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80016fc:	3f50624d 	.word	0x3f50624d
 8001700:	24000438 	.word	0x24000438
 8001704:	24000458 	.word	0x24000458
 8001708:	24000470 	.word	0x24000470
 800170c:	4240d581 	.word	0x4240d581
 8001710:	3f1edbb6 	.word	0x3f1edbb6
 8001714:	240004dc 	.word	0x240004dc
 8001718:	bf800000 	.word	0xbf800000
 800171c:	240004d0 	.word	0x240004d0
 8001720:	58021000 	.word	0x58021000
 8001724:	240000e8 	.word	0x240000e8
 8001728:	24000440 	.word	0x24000440
 800172c:	24000460 	.word	0x24000460
 8001730:	24000478 	.word	0x24000478
 8001734:	42296dac 	.word	0x42296dac
 8001738:	3f2280f1 	.word	0x3f2280f1
 800173c:	240004d8 	.word	0x240004d8
 8001740:	42480000 	.word	0x42480000
	} else {
		pulse_MR = (int) (-u_MR * (motorARR + 1));
 8001744:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001748:	eef1 7a67 	vneg.f32	s15, s15
 800174c:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8001740 <PID_PWM+0x310>
 8001750:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001758:	ee17 2a90 	vmov	r2, s15
 800175c:	4b6e      	ldr	r3, [pc, #440]	; (8001918 <PID_PWM+0x4e8>)
 800175e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(INA_MR_PORT, INA_MR_PIN, GPIO_PIN_SET); // INA
 8001760:	2201      	movs	r2, #1
 8001762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001766:	486d      	ldr	r0, [pc, #436]	; (800191c <PID_PWM+0x4ec>)
 8001768:	f006 fc3a 	bl	8007fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_MR_PORT, INB_MR_PIN, GPIO_PIN_RESET); // INB
 800176c:	2200      	movs	r2, #0
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	486a      	ldr	r0, [pc, #424]	; (800191c <PID_PWM+0x4ec>)
 8001772:	f006 fc35 	bl	8007fe0 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(TIM_PWM_MR, CH_PWM_MR, pulse_MR); // PWM
 8001776:	4b68      	ldr	r3, [pc, #416]	; (8001918 <PID_PWM+0x4e8>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4b69      	ldr	r3, [pc, #420]	; (8001920 <PID_PWM+0x4f0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	63da      	str	r2, [r3, #60]	; 0x3c

	//PID_ML
	double err_ML = ML - rML;
 8001780:	4b68      	ldr	r3, [pc, #416]	; (8001924 <PID_PWM+0x4f4>)
 8001782:	ed93 6b00 	vldr	d6, [r3]
 8001786:	4b68      	ldr	r3, [pc, #416]	; (8001928 <PID_PWM+0x4f8>)
 8001788:	ed93 7b00 	vldr	d7, [r3]
 800178c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001790:	ed87 7b02 	vstr	d7, [r7, #8]
	inte_ML += err_ML * motor_span;
 8001794:	ed97 7b02 	vldr	d7, [r7, #8]
 8001798:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8001910 <PID_PWM+0x4e0>
 800179c:	ee27 6b06 	vmul.f64	d6, d7, d6
 80017a0:	4b62      	ldr	r3, [pc, #392]	; (800192c <PID_PWM+0x4fc>)
 80017a2:	ed93 7b00 	vldr	d7, [r3]
 80017a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017aa:	4b60      	ldr	r3, [pc, #384]	; (800192c <PID_PWM+0x4fc>)
 80017ac:	ed83 7b00 	vstr	d7, [r3]
	double bound_ML = 1/ki_ML;
 80017b0:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001930 <PID_PWM+0x500>
 80017b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017c0:	ed87 7b00 	vstr	d7, [r7]
	if (ki_ML * inte_ML > 1) inte_ML = bound_ML;
 80017c4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8001930 <PID_PWM+0x500>
 80017c8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80017cc:	4b57      	ldr	r3, [pc, #348]	; (800192c <PID_PWM+0x4fc>)
 80017ce:	ed93 7b00 	vldr	d7, [r3]
 80017d2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017d6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80017da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	dd05      	ble.n	80017f0 <PID_PWM+0x3c0>
 80017e4:	4951      	ldr	r1, [pc, #324]	; (800192c <PID_PWM+0x4fc>)
 80017e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017ea:	e9c1 2300 	strd	r2, r3, [r1]
 80017ee:	e016      	b.n	800181e <PID_PWM+0x3ee>
	else if (ki_ML * inte_ML < -1) inte_ML = -bound_ML;
 80017f0:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8001930 <PID_PWM+0x500>
 80017f4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80017f8:	4b4c      	ldr	r3, [pc, #304]	; (800192c <PID_PWM+0x4fc>)
 80017fa:	ed93 7b00 	vldr	d7, [r3]
 80017fe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001802:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001806:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800180a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180e:	d506      	bpl.n	800181e <PID_PWM+0x3ee>
 8001810:	ed97 7b00 	vldr	d7, [r7]
 8001814:	eeb1 7b47 	vneg.f64	d7, d7
 8001818:	4b44      	ldr	r3, [pc, #272]	; (800192c <PID_PWM+0x4fc>)
 800181a:	ed83 7b00 	vstr	d7, [r3]
	float u_ML = kp_ML * err_ML + ki_ML * inte_ML;
 800181e:	eddf 7a45 	vldr	s15, [pc, #276]	; 8001934 <PID_PWM+0x504>
 8001822:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001826:	ed97 7b02 	vldr	d7, [r7, #8]
 800182a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800182e:	eddf 7a40 	vldr	s15, [pc, #256]	; 8001930 <PID_PWM+0x500>
 8001832:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001836:	4b3d      	ldr	r3, [pc, #244]	; (800192c <PID_PWM+0x4fc>)
 8001838:	ed93 7b00 	vldr	d7, [r3]
 800183c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001840:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001844:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001848:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	if (u_ML > 1) u_ML = 1;
 800184c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001850:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185c:	dd03      	ble.n	8001866 <PID_PWM+0x436>
 800185e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
 8001864:	e00a      	b.n	800187c <PID_PWM+0x44c>
	else if (u_ML < -1) u_ML = -1;
 8001866:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800186a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800186e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001876:	d501      	bpl.n	800187c <PID_PWM+0x44c>
 8001878:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <PID_PWM+0x508>)
 800187a:	633b      	str	r3, [r7, #48]	; 0x30
	//PWM_ML
	//int pulse_ML;
	if (u_ML > 0) {
 800187c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001880:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001888:	dd18      	ble.n	80018bc <PID_PWM+0x48c>
		pulse_ML = (int) (u_ML * (motorARR + 1));
 800188a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800188e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800193c <PID_PWM+0x50c>
 8001892:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001896:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800189a:	ee17 2a90 	vmov	r2, s15
 800189e:	4b28      	ldr	r3, [pc, #160]	; (8001940 <PID_PWM+0x510>)
 80018a0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(INA_ML_PORT, INA_ML_PIN, GPIO_PIN_SET); // INA
 80018a2:	2201      	movs	r2, #1
 80018a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018a8:	481c      	ldr	r0, [pc, #112]	; (800191c <PID_PWM+0x4ec>)
 80018aa:	f006 fb99 	bl	8007fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_ML_PORT, INB_ML_PIN, GPIO_PIN_RESET); // INB
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b4:	4819      	ldr	r0, [pc, #100]	; (800191c <PID_PWM+0x4ec>)
 80018b6:	f006 fb93 	bl	8007fe0 <HAL_GPIO_WritePin>
 80018ba:	e019      	b.n	80018f0 <PID_PWM+0x4c0>
	} else {
		pulse_ML = (int) (-u_ML * (motorARR + 1));
 80018bc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80018c0:	eef1 7a67 	vneg.f32	s15, s15
 80018c4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800193c <PID_PWM+0x50c>
 80018c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018d0:	ee17 2a90 	vmov	r2, s15
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <PID_PWM+0x510>)
 80018d6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(INA_ML_PORT, INA_ML_PIN, GPIO_PIN_RESET); // INA
 80018d8:	2200      	movs	r2, #0
 80018da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018de:	480f      	ldr	r0, [pc, #60]	; (800191c <PID_PWM+0x4ec>)
 80018e0:	f006 fb7e 	bl	8007fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_ML_PORT, INB_ML_PIN, GPIO_PIN_SET); // INB
 80018e4:	2201      	movs	r2, #1
 80018e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ea:	480c      	ldr	r0, [pc, #48]	; (800191c <PID_PWM+0x4ec>)
 80018ec:	f006 fb78 	bl	8007fe0 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(TIM_PWM_ML, CH_PWM_ML, pulse_ML); // PWM
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <PID_PWM+0x510>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <PID_PWM+0x514>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40
	into_PID++;
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <PID_PWM+0x518>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	4a11      	ldr	r2, [pc, #68]	; (8001948 <PID_PWM+0x518>)
 8001902:	6013      	str	r3, [r2, #0]

}
 8001904:	bf00      	nop
 8001906:	3738      	adds	r7, #56	; 0x38
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	f3af 8000 	nop.w
 8001910:	d2f1a9fc 	.word	0xd2f1a9fc
 8001914:	3f50624d 	.word	0x3f50624d
 8001918:	240004d8 	.word	0x240004d8
 800191c:	58021000 	.word	0x58021000
 8001920:	24000218 	.word	0x24000218
 8001924:	24000448 	.word	0x24000448
 8001928:	24000468 	.word	0x24000468
 800192c:	24000480 	.word	0x24000480
 8001930:	425adc0f 	.word	0x425adc0f
 8001934:	3f2e3001 	.word	0x3f2e3001
 8001938:	bf800000 	.word	0xbf800000
 800193c:	42480000 	.word	0x42480000
 8001940:	240004d4 	.word	0x240004d4
 8001944:	240000e8 	.word	0x240000e8
 8001948:	240004c8 	.word	0x240004c8
 800194c:	00000000 	.word	0x00000000

08001950 <kinematics_model>:

void kinematics_model(){
 8001950:	b480      	push	{r7}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
	double rWL = rMF*ratio_motor2wheel*wheel_radius*(2*pi),
 8001956:	4b58      	ldr	r3, [pc, #352]	; (8001ab8 <kinematics_model+0x168>)
 8001958:	ed93 7b00 	vldr	d7, [r3]
 800195c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001960:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001964:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8001a78 <kinematics_model+0x128>
 8001968:	ee27 7b06 	vmul.f64	d7, d7, d6
 800196c:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8001a80 <kinematics_model+0x130>
 8001970:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001974:	ed87 7b04 	vstr	d7, [r7, #16]
		   rWF = rMR*ratio_motor2wheel*wheel_radius*(2*pi),
 8001978:	4b50      	ldr	r3, [pc, #320]	; (8001abc <kinematics_model+0x16c>)
 800197a:	ed93 7b00 	vldr	d7, [r3]
 800197e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001982:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001986:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8001a78 <kinematics_model+0x128>
 800198a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800198e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8001a80 <kinematics_model+0x130>
 8001992:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001996:	ed87 7b02 	vstr	d7, [r7, #8]
		   rWR = rML*ratio_motor2wheel*wheel_radius*(2*pi);
 800199a:	4b49      	ldr	r3, [pc, #292]	; (8001ac0 <kinematics_model+0x170>)
 800199c:	ed93 7b00 	vldr	d7, [r3]
 80019a0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80019a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019a8:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8001a78 <kinematics_model+0x128>
 80019ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019b0:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8001a80 <kinematics_model+0x130>
 80019b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019b8:	ed87 7b00 	vstr	d7, [r7]

	rVx = (-1.244*rWF + 0.622*rWL + 0.622*rWR)/adjVx;
 80019bc:	ed97 7b02 	vldr	d7, [r7, #8]
 80019c0:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8001a88 <kinematics_model+0x138>
 80019c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80019c8:	ed97 7b04 	vldr	d7, [r7, #16]
 80019cc:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8001a90 <kinematics_model+0x140>
 80019d0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80019d4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80019d8:	ed97 7b00 	vldr	d7, [r7]
 80019dc:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8001a90 <kinematics_model+0x140>
 80019e0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80019e4:	ee36 5b07 	vadd.f64	d5, d6, d7
 80019e8:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <kinematics_model+0x174>)
 80019ea:	ed93 6b00 	vldr	d6, [r3]
 80019ee:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80019f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019f6:	4b34      	ldr	r3, [pc, #208]	; (8001ac8 <kinematics_model+0x178>)
 80019f8:	edc3 7a00 	vstr	s15, [r3]
	rVy = (-0.54*rWL + 0.54*rWR)/adjVy;
 80019fc:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a00:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8001a98 <kinematics_model+0x148>
 8001a04:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a08:	ed97 7b00 	vldr	d7, [r7]
 8001a0c:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8001aa0 <kinematics_model+0x150>
 8001a10:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a14:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001a18:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <kinematics_model+0x17c>)
 8001a1a:	ed93 6b00 	vldr	d6, [r3]
 8001a1e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a22:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a26:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <kinematics_model+0x180>)
 8001a28:	edc3 7a00 	vstr	s15, [r3]
	rW = (-12.346*rWF -12.346*rWL -12.346*rWR)/adjW;
 8001a2c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a30:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8001aa8 <kinematics_model+0x158>
 8001a34:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a38:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a3c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8001ab0 <kinematics_model+0x160>
 8001a40:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a44:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001a48:	ed97 7b00 	vldr	d7, [r7]
 8001a4c:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8001ab0 <kinematics_model+0x160>
 8001a50:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a54:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001a58:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <kinematics_model+0x184>)
 8001a5a:	ed93 6b00 	vldr	d6, [r3]
 8001a5e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a62:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <kinematics_model+0x188>)
 8001a68:	edc3 7a00 	vstr	s15, [r3]
}
 8001a6c:	bf00      	nop
 8001a6e:	371c      	adds	r7, #28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	eb851eb8 	.word	0xeb851eb8
 8001a7c:	3f9eb851 	.word	0x3f9eb851
 8001a80:	54442eea 	.word	0x54442eea
 8001a84:	401921fb 	.word	0x401921fb
 8001a88:	8b439581 	.word	0x8b439581
 8001a8c:	bff3e76c 	.word	0xbff3e76c
 8001a90:	8b439581 	.word	0x8b439581
 8001a94:	3fe3e76c 	.word	0x3fe3e76c
 8001a98:	147ae148 	.word	0x147ae148
 8001a9c:	bfe147ae 	.word	0xbfe147ae
 8001aa0:	147ae148 	.word	0x147ae148
 8001aa4:	3fe147ae 	.word	0x3fe147ae
 8001aa8:	e978d4fe 	.word	0xe978d4fe
 8001aac:	c028b126 	.word	0xc028b126
 8001ab0:	e978d4fe 	.word	0xe978d4fe
 8001ab4:	4028b126 	.word	0x4028b126
 8001ab8:	24000458 	.word	0x24000458
 8001abc:	24000460 	.word	0x24000460
 8001ac0:	24000468 	.word	0x24000468
 8001ac4:	24000500 	.word	0x24000500
 8001ac8:	24000530 	.word	0x24000530
 8001acc:	24000508 	.word	0x24000508
 8001ad0:	24000534 	.word	0x24000534
 8001ad4:	24000510 	.word	0x24000510
 8001ad8:	24000538 	.word	0x24000538

08001adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae0:	b672      	cpsid	i
}
 8001ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <Error_Handler+0x8>

08001ae6 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <_ZN3ros3MsgC1Ev+0x1c>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	0800ec88 	.word	0x0800ec88

08001b28 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
      data()
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff ffe8 	bl	8001b08 <_ZN3ros3MsgC1Ev>
 8001b38:	4a06      	ldr	r2, [pc, #24]	; (8001b54 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3304      	adds	r3, #4
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ffcf 	bl	8001ae6 <_ZN3ros4TimeC1Ev>
    {
    }
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	0800ec70 	.word	0x0800ec70

08001b58 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6859      	ldr	r1, [r3, #4]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	b2ca      	uxtb	r2, r1
 8001b72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	0a19      	lsrs	r1, r3, #8
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	4413      	add	r3, r2
 8001b82:	b2ca      	uxtb	r2, r1
 8001b84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	0c19      	lsrs	r1, r3, #16
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3302      	adds	r3, #2
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	b2ca      	uxtb	r2, r1
 8001b96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	0e19      	lsrs	r1, r3, #24
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3303      	adds	r3, #3
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	b2ca      	uxtb	r2, r1
 8001ba8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	3304      	adds	r3, #4
 8001bae:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6899      	ldr	r1, [r3, #8]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	4413      	add	r3, r2
 8001bba:	b2ca      	uxtb	r2, r1
 8001bbc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	0a19      	lsrs	r1, r3, #8
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	b2ca      	uxtb	r2, r1
 8001bce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	0c19      	lsrs	r1, r3, #16
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	3302      	adds	r3, #2
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	4413      	add	r3, r2
 8001bde:	b2ca      	uxtb	r2, r1
 8001be0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	0e19      	lsrs	r1, r3, #24
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	3303      	adds	r3, #3
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	4413      	add	r3, r2
 8001bf0:	b2ca      	uxtb	r2, r1
 8001bf2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	60fb      	str	r3, [r7, #12]
      return offset;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
    }
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	6839      	ldr	r1, [r7, #0]
 8001c2e:	440b      	add	r3, r1
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	431a      	orrs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	3302      	adds	r3, #2
 8001c42:	6839      	ldr	r1, [r7, #0]
 8001c44:	440b      	add	r3, r1
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	041b      	lsls	r3, r3, #16
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	3303      	adds	r3, #3
 8001c58:	6839      	ldr	r1, [r7, #0]
 8001c5a:	440b      	add	r3, r1
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	061b      	lsls	r3, r3, #24
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	4413      	add	r3, r2
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3301      	adds	r3, #1
 8001c82:	6839      	ldr	r1, [r7, #0]
 8001c84:	440b      	add	r3, r1
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	3302      	adds	r3, #2
 8001c98:	6839      	ldr	r1, [r7, #0]
 8001c9a:	440b      	add	r3, r1
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	041b      	lsls	r3, r3, #16
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3303      	adds	r3, #3
 8001cae:	6839      	ldr	r1, [r7, #0]
 8001cb0:	440b      	add	r3, r1
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	061b      	lsls	r3, r3, #24
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	60fb      	str	r3, [r7, #12]
     return offset;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
    }
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	0800e9cc 	.word	0x0800e9cc

08001cec <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	0800e9dc 	.word	0x0800e9dc

08001d08 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fef8 	bl	8001b08 <_ZN3ros3MsgC1Ev>
 8001d18:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	809a      	strh	r2, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d2e:	60da      	str	r2, [r3, #12]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d34:	611a      	str	r2, [r3, #16]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	615a      	str	r2, [r3, #20]
    {
    }
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	0800ec58 	.word	0x0800ec58
 8001d4c:	0800ea00 	.word	0x0800ea00

08001d50 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	8899      	ldrh	r1, [r3, #4]
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	b2ca      	uxtb	r2, r1
 8001d6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	889b      	ldrh	r3, [r3, #4]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	b299      	uxth	r1, r3
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	3301      	adds	r3, #1
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	b2ca      	uxtb	r2, r1
 8001d7e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	3302      	adds	r3, #2
 8001d84:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fac0 	bl	8000310 <strlen>
 8001d90:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	69b9      	ldr	r1, [r7, #24]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f001 fd6c 	bl	8003878 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	3304      	adds	r3, #4
 8001da4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	18d0      	adds	r0, r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4619      	mov	r1, r3
 8001db4:	f00c fc66 	bl	800e684 <memcpy>
      offset += length_topic_name;
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe faa3 	bl	8000310 <strlen>
 8001dca:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	6979      	ldr	r1, [r7, #20]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f001 fd4f 	bl	8003878 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	18d0      	adds	r0, r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4619      	mov	r1, r3
 8001dee:	f00c fc49 	bl	800e684 <memcpy>
      offset += length_message_type;
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	4413      	add	r3, r2
 8001df8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fa86 	bl	8000310 <strlen>
 8001e04:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	6939      	ldr	r1, [r7, #16]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f001 fd32 	bl	8003878 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	3304      	adds	r3, #4
 8001e18:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	18d0      	adds	r0, r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4619      	mov	r1, r3
 8001e28:	f00c fc2c 	bl	800e684 <memcpy>
      offset += length_md5sum;
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4413      	add	r3, r2
 8001e32:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001e3a:	68f9      	ldr	r1, [r7, #12]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	4413      	add	r3, r2
 8001e42:	b2ca      	uxtb	r2, r1
 8001e44:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	0a19      	lsrs	r1, r3, #8
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	4413      	add	r3, r2
 8001e52:	b2ca      	uxtb	r2, r1
 8001e54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	0c19      	lsrs	r1, r3, #16
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	4413      	add	r3, r2
 8001e62:	b2ca      	uxtb	r2, r1
 8001e64:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	0e19      	lsrs	r1, r3, #24
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3303      	adds	r3, #3
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	4413      	add	r3, r2
 8001e72:	b2ca      	uxtb	r2, r1
 8001e74:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	61fb      	str	r3, [r7, #28]
      return offset;
 8001e7c:	69fb      	ldr	r3, [r7, #28]
    }
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3720      	adds	r7, #32
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b08a      	sub	sp, #40	; 0x28
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	4413      	add	r3, r2
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	889b      	ldrh	r3, [r3, #4]
 8001ea6:	b21a      	sxth	r2, r3
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	6839      	ldr	r1, [r7, #0]
 8001eae:	440b      	add	r3, r1
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	b21b      	sxth	r3, r3
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	441a      	add	r2, r3
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f001 fcee 	bl	80038b4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	3304      	adds	r3, #4
 8001edc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d20c      	bcs.n	8001f08 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	441a      	add	r2, r3
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	6839      	ldr	r1, [r7, #0]
 8001efa:	440b      	add	r3, r1
 8001efc:	7812      	ldrb	r2, [r2, #0]
 8001efe:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	3301      	adds	r3, #1
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
 8001f06:	e7ec      	b.n	8001ee2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	441a      	add	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	4413      	add	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	441a      	add	r2, r3
 8001f32:	f107 0310 	add.w	r3, r7, #16
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f001 fcbb 	bl	80038b4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	3304      	adds	r3, #4
 8001f42:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	623b      	str	r3, [r7, #32]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	6a3a      	ldr	r2, [r7, #32]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d20c      	bcs.n	8001f6e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	441a      	add	r2, r3
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	6839      	ldr	r1, [r7, #0]
 8001f60:	440b      	add	r3, r1
 8001f62:	7812      	ldrb	r2, [r2, #0]
 8001f64:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	623b      	str	r3, [r7, #32]
 8001f6c:	e7ec      	b.n	8001f48 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4413      	add	r3, r2
 8001f74:	3b01      	subs	r3, #1
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	4413      	add	r3, r2
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	441a      	add	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	441a      	add	r2, r3
 8001f98:	f107 030c 	add.w	r3, r7, #12
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f001 fc88 	bl	80038b4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	61fb      	str	r3, [r7, #28]
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	69fa      	ldr	r2, [r7, #28]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d20c      	bcs.n	8001fd4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	441a      	add	r2, r3
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	6839      	ldr	r1, [r7, #0]
 8001fc6:	440b      	add	r3, r1
 8001fc8:	7812      	ldrb	r2, [r2, #0]
 8001fca:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	e7ec      	b.n	8001fae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	4413      	add	r3, r2
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	441a      	add	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	6839      	ldr	r1, [r7, #0]
 8002002:	440a      	add	r2, r1
 8002004:	7812      	ldrb	r2, [r2, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	3301      	adds	r3, #1
 8002010:	6839      	ldr	r1, [r7, #0]
 8002012:	440b      	add	r3, r1
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	4313      	orrs	r3, r2
 800201a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	3302      	adds	r3, #2
 8002022:	6839      	ldr	r1, [r7, #0]
 8002024:	440b      	add	r3, r1
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	041b      	lsls	r3, r3, #16
 800202a:	4313      	orrs	r3, r2
 800202c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	3303      	adds	r3, #3
 8002034:	6839      	ldr	r1, [r7, #0]
 8002036:	440b      	add	r3, r1
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	061b      	lsls	r3, r3, #24
 800203c:	4313      	orrs	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	3304      	adds	r3, #4
 800204a:	61bb      	str	r3, [r7, #24]
     return offset;
 800204c:	69bb      	ldr	r3, [r7, #24]
    }
 800204e:	4618      	mov	r0, r3
 8002050:	3728      	adds	r7, #40	; 0x28
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	0800ea04 	.word	0x0800ea04

08002074 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	0800ea20 	.word	0x0800ea20

08002090 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fd34 	bl	8001b08 <_ZN3ros3MsgC1Ev>
 80020a0:	4a06      	ldr	r2, [pc, #24]	; (80020bc <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	711a      	strb	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80020b0:	609a      	str	r2, [r3, #8]
    {
    }
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	0800ec40 	.word	0x0800ec40
 80020c0:	0800ea00 	.word	0x0800ea00

080020c4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	7912      	ldrb	r2, [r2, #4]
 80020dc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	3301      	adds	r3, #1
 80020e2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe f911 	bl	8000310 <strlen>
 80020ee:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	4413      	add	r3, r2
 80020f6:	68b9      	ldr	r1, [r7, #8]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f001 fbbd 	bl	8003878 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	3304      	adds	r3, #4
 8002102:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	18d0      	adds	r0, r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	4619      	mov	r1, r3
 8002112:	f00c fab7 	bl	800e684 <memcpy>
      offset += length_msg;
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4413      	add	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
      return offset;
 800211e:	68fb      	ldr	r3, [r7, #12]
    }
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	4413      	add	r3, r2
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	3301      	adds	r3, #1
 8002146:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	441a      	add	r2, r3
 800214e:	f107 030c 	add.w	r3, r7, #12
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f001 fbad 	bl	80038b4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	3304      	adds	r3, #4
 800215e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4413      	add	r3, r2
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	429a      	cmp	r2, r3
 800216e:	d20c      	bcs.n	800218a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	441a      	add	r2, r3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3b01      	subs	r3, #1
 800217a:	6839      	ldr	r1, [r7, #0]
 800217c:	440b      	add	r3, r1
 800217e:	7812      	ldrb	r2, [r2, #0]
 8002180:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	3301      	adds	r3, #1
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	e7ec      	b.n	8002164 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	3b01      	subs	r3, #1
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	4413      	add	r3, r2
 8002196:	2200      	movs	r2, #0
 8002198:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	3b01      	subs	r3, #1
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	441a      	add	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4413      	add	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
     return offset;
 80021ae:	693b      	ldr	r3, [r7, #16]
    }
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	0800ea44 	.word	0x0800ea44

080021d4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	0800ea58 	.word	0x0800ea58

080021f0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fc84 	bl	8001b08 <_ZN3ros3MsgC1Ev>
 8002200:	4a0c      	ldr	r2, [pc, #48]	; (8002234 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	619a      	str	r2, [r3, #24]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	61da      	str	r2, [r3, #28]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	0800ec28 	.word	0x0800ec28

08002238 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	; 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6859      	ldr	r1, [r3, #4]
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	4413      	add	r3, r2
 8002250:	b2ca      	uxtb	r2, r1
 8002252:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	0a19      	lsrs	r1, r3, #8
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	3301      	adds	r3, #1
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	4413      	add	r3, r2
 8002262:	b2ca      	uxtb	r2, r1
 8002264:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	0c19      	lsrs	r1, r3, #16
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	3302      	adds	r3, #2
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	4413      	add	r3, r2
 8002274:	b2ca      	uxtb	r2, r1
 8002276:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	0e19      	lsrs	r1, r3, #24
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	3303      	adds	r3, #3
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	4413      	add	r3, r2
 8002286:	b2ca      	uxtb	r2, r1
 8002288:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	3304      	adds	r3, #4
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	6a3a      	ldr	r2, [r7, #32]
 800229a:	429a      	cmp	r2, r3
 800229c:	d22b      	bcs.n	80022f6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	6a3b      	ldr	r3, [r7, #32]
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80022ac:	6939      	ldr	r1, [r7, #16]
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	b2ca      	uxtb	r2, r1
 80022b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	0a19      	lsrs	r1, r3, #8
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	3301      	adds	r3, #1
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	b2ca      	uxtb	r2, r1
 80022c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	0c19      	lsrs	r1, r3, #16
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	3302      	adds	r3, #2
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	b2ca      	uxtb	r2, r1
 80022d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	0e19      	lsrs	r1, r3, #24
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	3303      	adds	r3, #3
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	b2ca      	uxtb	r2, r1
 80022e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	3304      	adds	r3, #4
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	3301      	adds	r3, #1
 80022f2:	623b      	str	r3, [r7, #32]
 80022f4:	e7ce      	b.n	8002294 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6919      	ldr	r1, [r3, #16]
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	b2ca      	uxtb	r2, r1
 8002302:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	0a19      	lsrs	r1, r3, #8
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	3301      	adds	r3, #1
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	4413      	add	r3, r2
 8002312:	b2ca      	uxtb	r2, r1
 8002314:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	0c19      	lsrs	r1, r3, #16
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	3302      	adds	r3, #2
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	4413      	add	r3, r2
 8002324:	b2ca      	uxtb	r2, r1
 8002326:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	0e19      	lsrs	r1, r3, #24
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	3303      	adds	r3, #3
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	4413      	add	r3, r2
 8002336:	b2ca      	uxtb	r2, r1
 8002338:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	3304      	adds	r3, #4
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	69fa      	ldr	r2, [r7, #28]
 800234a:	429a      	cmp	r2, r3
 800234c:	d22b      	bcs.n	80023a6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800235c:	68f9      	ldr	r1, [r7, #12]
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	4413      	add	r3, r2
 8002364:	b2ca      	uxtb	r2, r1
 8002366:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	0a19      	lsrs	r1, r3, #8
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	3301      	adds	r3, #1
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	4413      	add	r3, r2
 8002374:	b2ca      	uxtb	r2, r1
 8002376:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	0c19      	lsrs	r1, r3, #16
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	3302      	adds	r3, #2
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	4413      	add	r3, r2
 8002384:	b2ca      	uxtb	r2, r1
 8002386:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	0e19      	lsrs	r1, r3, #24
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	3303      	adds	r3, #3
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	4413      	add	r3, r2
 8002394:	b2ca      	uxtb	r2, r1
 8002396:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	3304      	adds	r3, #4
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3301      	adds	r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
 80023a4:	e7ce      	b.n	8002344 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69d9      	ldr	r1, [r3, #28]
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	b2ca      	uxtb	r2, r1
 80023b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	0a19      	lsrs	r1, r3, #8
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	3301      	adds	r3, #1
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	4413      	add	r3, r2
 80023c2:	b2ca      	uxtb	r2, r1
 80023c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	0c19      	lsrs	r1, r3, #16
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	3302      	adds	r3, #2
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	b2ca      	uxtb	r2, r1
 80023d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	0e19      	lsrs	r1, r3, #24
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	3303      	adds	r3, #3
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	4413      	add	r3, r2
 80023e6:	b2ca      	uxtb	r2, r1
 80023e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	3304      	adds	r3, #4
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80023f0:	2300      	movs	r3, #0
 80023f2:	61bb      	str	r3, [r7, #24]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d228      	bcs.n	8002450 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7fd ff80 	bl	8000310 <strlen>
 8002410:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	4413      	add	r3, r2
 8002418:	6979      	ldr	r1, [r7, #20]
 800241a:	4618      	mov	r0, r3
 800241c:	f001 fa2c 	bl	8003878 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	3304      	adds	r3, #4
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	18d0      	adds	r0, r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	4619      	mov	r1, r3
 800243c:	f00c f922 	bl	800e684 <memcpy>
      offset += length_stringsi;
 8002440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	4413      	add	r3, r2
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	3301      	adds	r3, #1
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	e7d1      	b.n	80023f4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002452:	4618      	mov	r0, r3
 8002454:	3728      	adds	r7, #40	; 0x28
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800245a:	b580      	push	{r7, lr}
 800245c:	b08e      	sub	sp, #56	; 0x38
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	4413      	add	r3, r2
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002474:	3301      	adds	r3, #1
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	4413      	add	r3, r2
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	6a3a      	ldr	r2, [r7, #32]
 8002480:	4313      	orrs	r3, r2
 8002482:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002486:	3302      	adds	r3, #2
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	4413      	add	r3, r2
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	6a3a      	ldr	r2, [r7, #32]
 8002492:	4313      	orrs	r3, r2
 8002494:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002498:	3303      	adds	r3, #3
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	4413      	add	r3, r2
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	061b      	lsls	r3, r3, #24
 80024a2:	6a3a      	ldr	r2, [r7, #32]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80024a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024aa:	3304      	adds	r3, #4
 80024ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	6a3a      	ldr	r2, [r7, #32]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d90a      	bls.n	80024ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4619      	mov	r1, r3
 80024c2:	4610      	mov	r0, r2
 80024c4:	f00c f8f4 	bl	800e6b0 <realloc>
 80024c8:	4602      	mov	r2, r0
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a3a      	ldr	r2, [r7, #32]
 80024d2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80024d4:	2300      	movs	r3, #0
 80024d6:	633b      	str	r3, [r7, #48]	; 0x30
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024de:	429a      	cmp	r2, r3
 80024e0:	d236      	bcs.n	8002550 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ea:	6839      	ldr	r1, [r7, #0]
 80024ec:	440a      	add	r2, r1
 80024ee:	7812      	ldrb	r2, [r2, #0]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f8:	3301      	adds	r3, #1
 80024fa:	6839      	ldr	r1, [r7, #0]
 80024fc:	440b      	add	r3, r1
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	4313      	orrs	r3, r2
 8002504:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250a:	3302      	adds	r3, #2
 800250c:	6839      	ldr	r1, [r7, #0]
 800250e:	440b      	add	r3, r1
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	041b      	lsls	r3, r3, #16
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251c:	3303      	adds	r3, #3
 800251e:	6839      	ldr	r1, [r7, #0]
 8002520:	440b      	add	r3, r1
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	061b      	lsls	r3, r3, #24
 8002526:	4313      	orrs	r3, r2
 8002528:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002532:	3304      	adds	r3, #4
 8002534:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	3208      	adds	r2, #8
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254a:	3301      	adds	r3, #1
 800254c:	633b      	str	r3, [r7, #48]	; 0x30
 800254e:	e7c3      	b.n	80024d8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	4413      	add	r3, r2
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800255a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255c:	3301      	adds	r3, #1
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	4413      	add	r3, r2
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	4313      	orrs	r3, r2
 800256a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800256c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256e:	3302      	adds	r3, #2
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	4413      	add	r3, r2
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	041b      	lsls	r3, r3, #16
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	4313      	orrs	r3, r2
 800257c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800257e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002580:	3303      	adds	r3, #3
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	4413      	add	r3, r2
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	061b      	lsls	r3, r3, #24
 800258a:	69fa      	ldr	r2, [r7, #28]
 800258c:	4313      	orrs	r3, r2
 800258e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002592:	3304      	adds	r3, #4
 8002594:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	429a      	cmp	r2, r3
 800259e:	d90a      	bls.n	80025b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	699a      	ldr	r2, [r3, #24]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4619      	mov	r1, r3
 80025aa:	4610      	mov	r0, r2
 80025ac:	f00c f880 	bl	800e6b0 <realloc>
 80025b0:	4602      	mov	r2, r0
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69fa      	ldr	r2, [r7, #28]
 80025ba:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80025bc:	2300      	movs	r3, #0
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d236      	bcs.n	8002638 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025d2:	6839      	ldr	r1, [r7, #0]
 80025d4:	440a      	add	r2, r1
 80025d6:	7812      	ldrb	r2, [r2, #0]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e0:	3301      	adds	r3, #1
 80025e2:	6839      	ldr	r1, [r7, #0]
 80025e4:	440b      	add	r3, r1
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f2:	3302      	adds	r3, #2
 80025f4:	6839      	ldr	r1, [r7, #0]
 80025f6:	440b      	add	r3, r1
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	041b      	lsls	r3, r3, #16
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002604:	3303      	adds	r3, #3
 8002606:	6839      	ldr	r1, [r7, #0]
 8002608:	440b      	add	r3, r1
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	061b      	lsls	r3, r3, #24
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261a:	3304      	adds	r3, #4
 800261c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	3214      	adds	r2, #20
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002632:	3301      	adds	r3, #1
 8002634:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002636:	e7c3      	b.n	80025c0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	4413      	add	r3, r2
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002644:	3301      	adds	r3, #1
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	4413      	add	r3, r2
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002656:	3302      	adds	r3, #2
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	4413      	add	r3, r2
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	041b      	lsls	r3, r3, #16
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002668:	3303      	adds	r3, #3
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	4413      	add	r3, r2
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	061b      	lsls	r3, r3, #24
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267a:	3304      	adds	r3, #4
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	429a      	cmp	r2, r3
 8002686:	d90a      	bls.n	800269e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4619      	mov	r1, r3
 8002692:	4610      	mov	r0, r2
 8002694:	f00c f80c 	bl	800e6b0 <realloc>
 8002698:	4602      	mov	r2, r0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80026a4:	2300      	movs	r3, #0
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d23f      	bcs.n	8002732 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80026b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	441a      	add	r2, r3
 80026b8:	f107 030c 	add.w	r3, r7, #12
 80026bc:	4611      	mov	r1, r2
 80026be:	4618      	mov	r0, r3
 80026c0:	f001 f8f8 	bl	80038b4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80026c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c6:	3304      	adds	r3, #4
 80026c8:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80026ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
 80026ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4413      	add	r3, r2
 80026d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d20c      	bcs.n	80026f4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	441a      	add	r2, r3
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	3b01      	subs	r3, #1
 80026e4:	6839      	ldr	r1, [r7, #0]
 80026e6:	440b      	add	r3, r1
 80026e8:	7812      	ldrb	r2, [r2, #0]
 80026ea:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	3301      	adds	r3, #1
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
 80026f2:	e7ec      	b.n	80026ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80026f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4413      	add	r3, r2
 80026fa:	3b01      	subs	r3, #1
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	4413      	add	r3, r2
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002706:	3b01      	subs	r3, #1
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	441a      	add	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4413      	add	r3, r2
 8002716:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	3220      	adds	r2, #32
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	3301      	adds	r3, #1
 800272e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002730:	e7ba      	b.n	80026a8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002734:	4618      	mov	r0, r3
 8002736:	3738      	adds	r7, #56	; 0x38
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	4b03      	ldr	r3, [pc, #12]	; (8002754 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	0800eb7c 	.word	0x0800eb7c

08002758 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	0800ea7c 	.word	0x0800ea7c

08002774 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	611a      	str	r2, [r3, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4618      	mov	r0, r3
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68d8      	ldr	r0, [r3, #12]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6891      	ldr	r1, [r2, #8]
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	4798      	blx	r3
 80027c0:	4603      	mov	r3, r0
  };
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
  }
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a4b      	ldr	r2, [pc, #300]	; (8002924 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d077      	beq.n	80028ec <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a48      	ldr	r2, [pc, #288]	; (8002928 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d06f      	beq.n	80028ec <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a45      	ldr	r2, [pc, #276]	; (800292c <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d067      	beq.n	80028ec <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a42      	ldr	r2, [pc, #264]	; (8002930 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d05f      	beq.n	80028ec <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a3f      	ldr	r2, [pc, #252]	; (8002934 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d057      	beq.n	80028ec <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a3c      	ldr	r2, [pc, #240]	; (8002938 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d04f      	beq.n	80028ec <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a39      	ldr	r2, [pc, #228]	; (800293c <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d047      	beq.n	80028ec <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a36      	ldr	r2, [pc, #216]	; (8002940 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d03f      	beq.n	80028ec <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a33      	ldr	r2, [pc, #204]	; (8002944 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d037      	beq.n	80028ec <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a30      	ldr	r2, [pc, #192]	; (8002948 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d02f      	beq.n	80028ec <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a2d      	ldr	r2, [pc, #180]	; (800294c <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d027      	beq.n	80028ec <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a2a      	ldr	r2, [pc, #168]	; (8002950 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d01f      	beq.n	80028ec <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a27      	ldr	r2, [pc, #156]	; (8002954 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d017      	beq.n	80028ec <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a24      	ldr	r2, [pc, #144]	; (8002958 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d00f      	beq.n	80028ec <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a21      	ldr	r2, [pc, #132]	; (800295c <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d007      	beq.n	80028ec <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1e      	ldr	r2, [pc, #120]	; (8002960 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d10a      	bne.n	8002902 <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80028fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002900:	e009      	b.n	8002916 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40020010 	.word	0x40020010
 8002928:	40020028 	.word	0x40020028
 800292c:	40020040 	.word	0x40020040
 8002930:	40020058 	.word	0x40020058
 8002934:	40020070 	.word	0x40020070
 8002938:	40020088 	.word	0x40020088
 800293c:	400200a0 	.word	0x400200a0
 8002940:	400200b8 	.word	0x400200b8
 8002944:	40020410 	.word	0x40020410
 8002948:	40020428 	.word	0x40020428
 800294c:	40020440 	.word	0x40020440
 8002950:	40020458 	.word	0x40020458
 8002954:	40020470 	.word	0x40020470
 8002958:	40020488 	.word	0x40020488
 800295c:	400204a0 	.word	0x400204a0
 8002960:	400204b8 	.word	0x400204b8

08002964 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <_ZN13STM32HardwareC1Ev+0x34>)
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	240002b0 	.word	0x240002b0

0800299c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f804 	bl	80029b2 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3304      	adds	r3, #4
 80029c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c6:	4619      	mov	r1, r3
 80029c8:	f009 fdca 	bl	800c560 <HAL_UART_Receive_DMA>
    }
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_ZN13STM32Hardware4readEv>:

    int read(){
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
      int c = -1;
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295
 80029e0:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff fefb 	bl	80027e4 <_ZN13STM32Hardware10getRdmaIndEv>
 80029ee:	4603      	mov	r3, r0
 80029f0:	429c      	cmp	r4, r3
 80029f2:	bf14      	ite	ne
 80029f4:	2301      	movne	r3, #1
 80029f6:	2300      	moveq	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d012      	beq.n	8002a24 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a04:	1c59      	adds	r1, r3, #1
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	4413      	add	r3, r2
 8002a10:	791b      	ldrb	r3, [r3, #4]
 8002a12:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002a24:	68fb      	ldr	r3, [r7, #12]
    }
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd90      	pop	{r4, r7, pc}
	...

08002a30 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a40:	2b20      	cmp	r3, #32
 8002a42:	d108      	bne.n	8002a56 <_ZN13STM32Hardware5flushEv+0x26>
 8002a44:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	f083 0301 	eor.w	r3, r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <_ZN13STM32Hardware5flushEv+0x26>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <_ZN13STM32Hardware5flushEv+0x28>
 8002a56:	2300      	movs	r3, #0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d03f      	beq.n	8002adc <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002a5c:	4b21      	ldr	r3, [pc, #132]	; (8002ae4 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d031      	beq.n	8002ad6 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d20a      	bcs.n	8002a98 <_ZN13STM32Hardware5flushEv+0x68>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	e006      	b.n	8002aa6 <_ZN13STM32Hardware5flushEv+0x76>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002ab2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	89fa      	ldrh	r2, [r7, #14]
 8002abc:	4619      	mov	r1, r3
 8002abe:	f009 fccf 	bl	800c460 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002ac8:	89fb      	ldrh	r3, [r7, #14]
 8002aca:	4413      	add	r3, r2
 8002acc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002ad6:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
      }
    }
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	240004e0 	.word	0x240004e0

08002ae8 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
      int n = length;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002afe:	bfa8      	it	ge
 8002b00:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002b04:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b0c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	4293      	cmp	r3, r2
 8002b14:	bf28      	it	cs
 8002b16:	4613      	movcs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b20:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4413      	add	r3, r2
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f00b fda9 	bl	800e684 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d00b      	beq.n	8002b66 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	18d1      	adds	r1, r2, r3
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	f00b fd8f 	bl	800e684 <memcpy>
      }

      flush();
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f7ff ff62 	bl	8002a30 <_ZN13STM32Hardware5flushEv>
    }
 8002b6c:	bf00      	nop
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	f002 f932 	bl	8004de4 <HAL_GetTick>
 8002b80:	4603      	mov	r3, r0
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe ffb6 	bl	8001b08 <_ZN3ros3MsgC1Ev>
 8002b9c:	4a0e      	ldr	r2, [pc, #56]	; (8002bd8 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	0800ebe4 	.word	0x0800ebe4

08002bdc <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002bdc:	b480      	push	{r7}
 8002bde:	b08b      	sub	sp, #44	; 0x2c
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002bf0:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bfa:	6838      	ldr	r0, [r7, #0]
 8002bfc:	4401      	add	r1, r0
 8002bfe:	b2d3      	uxtb	r3, r2
 8002c00:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002c02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	0a02      	lsrs	r2, r0, #8
 8002c10:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002c14:	0a0b      	lsrs	r3, r1, #8
 8002c16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c18:	3101      	adds	r1, #1
 8002c1a:	6838      	ldr	r0, [r7, #0]
 8002c1c:	4401      	add	r1, r0
 8002c1e:	b2d3      	uxtb	r3, r2
 8002c20:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002c22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	0c02      	lsrs	r2, r0, #16
 8002c30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002c34:	0c0b      	lsrs	r3, r1, #16
 8002c36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c38:	3102      	adds	r1, #2
 8002c3a:	6838      	ldr	r0, [r7, #0]
 8002c3c:	4401      	add	r1, r0
 8002c3e:	b2d3      	uxtb	r3, r2
 8002c40:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002c42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	0e02      	lsrs	r2, r0, #24
 8002c50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c54:	0e0b      	lsrs	r3, r1, #24
 8002c56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c58:	3103      	adds	r1, #3
 8002c5a:	6838      	ldr	r0, [r7, #0]
 8002c5c:	4401      	add	r1, r0
 8002c5e:	b2d3      	uxtb	r3, r2
 8002c60:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002c62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	000a      	movs	r2, r1
 8002c70:	2300      	movs	r3, #0
 8002c72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c74:	3104      	adds	r1, #4
 8002c76:	6838      	ldr	r0, [r7, #0]
 8002c78:	4401      	add	r1, r0
 8002c7a:	b2d3      	uxtb	r3, r2
 8002c7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002c7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	0a0a      	lsrs	r2, r1, #8
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c90:	3105      	adds	r1, #5
 8002c92:	6838      	ldr	r0, [r7, #0]
 8002c94:	4401      	add	r1, r0
 8002c96:	b2d3      	uxtb	r3, r2
 8002c98:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002c9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	0c0a      	lsrs	r2, r1, #16
 8002ca8:	2300      	movs	r3, #0
 8002caa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cac:	3106      	adds	r1, #6
 8002cae:	6838      	ldr	r0, [r7, #0]
 8002cb0:	4401      	add	r1, r0
 8002cb2:	b2d3      	uxtb	r3, r2
 8002cb4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002cb6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	0e0a      	lsrs	r2, r1, #24
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cc8:	3107      	adds	r1, #7
 8002cca:	6838      	ldr	r0, [r7, #0]
 8002ccc:	4401      	add	r1, r0
 8002cce:	b2d3      	uxtb	r3, r2
 8002cd0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	3308      	adds	r3, #8
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002cde:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002ce2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ce6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ce8:	6838      	ldr	r0, [r7, #0]
 8002cea:	4401      	add	r1, r0
 8002cec:	b2d3      	uxtb	r3, r2
 8002cee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002cf0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	0a02      	lsrs	r2, r0, #8
 8002cfe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002d02:	0a0b      	lsrs	r3, r1, #8
 8002d04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d06:	3101      	adds	r1, #1
 8002d08:	6838      	ldr	r0, [r7, #0]
 8002d0a:	4401      	add	r1, r0
 8002d0c:	b2d3      	uxtb	r3, r2
 8002d0e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002d10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	0c02      	lsrs	r2, r0, #16
 8002d1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002d22:	0c0b      	lsrs	r3, r1, #16
 8002d24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d26:	3102      	adds	r1, #2
 8002d28:	6838      	ldr	r0, [r7, #0]
 8002d2a:	4401      	add	r1, r0
 8002d2c:	b2d3      	uxtb	r3, r2
 8002d2e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002d30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	0e02      	lsrs	r2, r0, #24
 8002d3e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d42:	0e0b      	lsrs	r3, r1, #24
 8002d44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d46:	3103      	adds	r1, #3
 8002d48:	6838      	ldr	r0, [r7, #0]
 8002d4a:	4401      	add	r1, r0
 8002d4c:	b2d3      	uxtb	r3, r2
 8002d4e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002d50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	000a      	movs	r2, r1
 8002d5e:	2300      	movs	r3, #0
 8002d60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d62:	3104      	adds	r1, #4
 8002d64:	6838      	ldr	r0, [r7, #0]
 8002d66:	4401      	add	r1, r0
 8002d68:	b2d3      	uxtb	r3, r2
 8002d6a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002d6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	0a0a      	lsrs	r2, r1, #8
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d7e:	3105      	adds	r1, #5
 8002d80:	6838      	ldr	r0, [r7, #0]
 8002d82:	4401      	add	r1, r0
 8002d84:	b2d3      	uxtb	r3, r2
 8002d86:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002d88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	0c0a      	lsrs	r2, r1, #16
 8002d96:	2300      	movs	r3, #0
 8002d98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d9a:	3106      	adds	r1, #6
 8002d9c:	6838      	ldr	r0, [r7, #0]
 8002d9e:	4401      	add	r1, r0
 8002da0:	b2d3      	uxtb	r3, r2
 8002da2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002da4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	0e0a      	lsrs	r2, r1, #24
 8002db2:	2300      	movs	r3, #0
 8002db4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002db6:	3107      	adds	r1, #7
 8002db8:	6838      	ldr	r0, [r7, #0]
 8002dba:	4401      	add	r1, r0
 8002dbc:	b2d3      	uxtb	r3, r2
 8002dbe:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	3308      	adds	r3, #8
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002dcc:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002dd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dd6:	6838      	ldr	r0, [r7, #0]
 8002dd8:	4401      	add	r1, r0
 8002dda:	b2d3      	uxtb	r3, r2
 8002ddc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002dde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	0a02      	lsrs	r2, r0, #8
 8002dec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002df0:	0a0b      	lsrs	r3, r1, #8
 8002df2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df4:	3101      	adds	r1, #1
 8002df6:	6838      	ldr	r0, [r7, #0]
 8002df8:	4401      	add	r1, r0
 8002dfa:	b2d3      	uxtb	r3, r2
 8002dfc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002dfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	0c02      	lsrs	r2, r0, #16
 8002e0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002e10:	0c0b      	lsrs	r3, r1, #16
 8002e12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e14:	3102      	adds	r1, #2
 8002e16:	6838      	ldr	r0, [r7, #0]
 8002e18:	4401      	add	r1, r0
 8002e1a:	b2d3      	uxtb	r3, r2
 8002e1c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002e1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	0e02      	lsrs	r2, r0, #24
 8002e2c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e30:	0e0b      	lsrs	r3, r1, #24
 8002e32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e34:	3103      	adds	r1, #3
 8002e36:	6838      	ldr	r0, [r7, #0]
 8002e38:	4401      	add	r1, r0
 8002e3a:	b2d3      	uxtb	r3, r2
 8002e3c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002e3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	000a      	movs	r2, r1
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e50:	3104      	adds	r1, #4
 8002e52:	6838      	ldr	r0, [r7, #0]
 8002e54:	4401      	add	r1, r0
 8002e56:	b2d3      	uxtb	r3, r2
 8002e58:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002e5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	0a0a      	lsrs	r2, r1, #8
 8002e68:	2300      	movs	r3, #0
 8002e6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e6c:	3105      	adds	r1, #5
 8002e6e:	6838      	ldr	r0, [r7, #0]
 8002e70:	4401      	add	r1, r0
 8002e72:	b2d3      	uxtb	r3, r2
 8002e74:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002e76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	0c0a      	lsrs	r2, r1, #16
 8002e84:	2300      	movs	r3, #0
 8002e86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e88:	3106      	adds	r1, #6
 8002e8a:	6838      	ldr	r0, [r7, #0]
 8002e8c:	4401      	add	r1, r0
 8002e8e:	b2d3      	uxtb	r3, r2
 8002e90:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002e92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	0e0a      	lsrs	r2, r1, #24
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ea4:	3107      	adds	r1, #7
 8002ea6:	6838      	ldr	r0, [r7, #0]
 8002ea8:	4401      	add	r1, r0
 8002eaa:	b2d3      	uxtb	r3, r2
 8002eac:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	3308      	adds	r3, #8
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	372c      	adds	r7, #44	; 0x2c
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002ec2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ec6:	b0eb      	sub	sp, #428	; 0x1ac
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002ece:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ee4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ee8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002eec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ef0:	4413      	add	r3, r2
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	461c      	mov	r4, r3
 8002efa:	4615      	mov	r5, r2
 8002efc:	ea40 0804 	orr.w	r8, r0, r4
 8002f00:	ea41 0905 	orr.w	r9, r1, r5
 8002f04:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f08:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002f0c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f16:	4413      	add	r3, r2
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	469a      	mov	sl, r3
 8002f20:	4693      	mov	fp, r2
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002f2e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002f32:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002f36:	ea40 0402 	orr.w	r4, r0, r2
 8002f3a:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002f3e:	430b      	orrs	r3, r1
 8002f40:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002f44:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002f48:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f4c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002f50:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f54:	1c9a      	adds	r2, r3, #2
 8002f56:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f5a:	4413      	add	r3, r2
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2200      	movs	r2, #0
 8002f62:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002f66:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002f76:	464c      	mov	r4, r9
 8002f78:	0423      	lsls	r3, r4, #16
 8002f7a:	4644      	mov	r4, r8
 8002f7c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002f80:	4644      	mov	r4, r8
 8002f82:	0422      	lsls	r2, r4, #16
 8002f84:	ea40 0402 	orr.w	r4, r0, r2
 8002f88:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002f92:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002f96:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f9a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002f9e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fa2:	1cda      	adds	r2, r3, #3
 8002fa4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fa8:	4413      	add	r3, r2
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002fb4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002fb8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002fbc:	4623      	mov	r3, r4
 8002fbe:	0a1b      	lsrs	r3, r3, #8
 8002fc0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002fc4:	4623      	mov	r3, r4
 8002fc6:	061b      	lsls	r3, r3, #24
 8002fc8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002fcc:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002fd0:	4623      	mov	r3, r4
 8002fd2:	4303      	orrs	r3, r0
 8002fd4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002fd8:	462b      	mov	r3, r5
 8002fda:	430b      	orrs	r3, r1
 8002fdc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002fe0:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002fe4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002fe8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002fec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ff0:	1d1a      	adds	r2, r3, #4
 8002ff2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ff6:	4413      	add	r3, r2
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003002:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8003012:	0023      	movs	r3, r4
 8003014:	2200      	movs	r2, #0
 8003016:	ea40 0402 	orr.w	r4, r0, r2
 800301a:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800301e:	430b      	orrs	r3, r1
 8003020:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003024:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003028:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800302c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003030:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003034:	1d5a      	adds	r2, r3, #5
 8003036:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800303a:	4413      	add	r3, r2
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2200      	movs	r2, #0
 8003042:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003046:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8003056:	0223      	lsls	r3, r4, #8
 8003058:	2200      	movs	r2, #0
 800305a:	ea40 0402 	orr.w	r4, r0, r2
 800305e:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8003062:	430b      	orrs	r3, r1
 8003064:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003068:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800306c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003070:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003074:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003078:	1d9a      	adds	r2, r3, #6
 800307a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800307e:	4413      	add	r3, r2
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2200      	movs	r2, #0
 8003086:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800308a:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800309a:	0423      	lsls	r3, r4, #16
 800309c:	2200      	movs	r2, #0
 800309e:	ea40 0402 	orr.w	r4, r0, r2
 80030a2:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80030a6:	430b      	orrs	r3, r1
 80030a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80030ac:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80030b0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80030b4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80030b8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030bc:	1dda      	adds	r2, r3, #7
 80030be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030c2:	4413      	add	r3, r2
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2200      	movs	r2, #0
 80030ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80030ce:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80030de:	0623      	lsls	r3, r4, #24
 80030e0:	2200      	movs	r2, #0
 80030e2:	ea40 0402 	orr.w	r4, r0, r2
 80030e6:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80030ea:	430b      	orrs	r3, r1
 80030ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80030f0:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80030f4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80030f8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80030fc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003100:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003104:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003108:	3308      	adds	r3, #8
 800310a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800311a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800311e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003122:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003126:	4413      	add	r3, r2
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2200      	movs	r2, #0
 800312e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003132:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003136:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800313a:	4623      	mov	r3, r4
 800313c:	4303      	orrs	r3, r0
 800313e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003142:	462b      	mov	r3, r5
 8003144:	430b      	orrs	r3, r1
 8003146:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800314a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800314e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003152:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003156:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003160:	4413      	add	r3, r2
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2200      	movs	r2, #0
 8003168:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800316c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800317c:	464c      	mov	r4, r9
 800317e:	0223      	lsls	r3, r4, #8
 8003180:	4644      	mov	r4, r8
 8003182:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003186:	4644      	mov	r4, r8
 8003188:	0222      	lsls	r2, r4, #8
 800318a:	ea40 0402 	orr.w	r4, r0, r2
 800318e:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003192:	430b      	orrs	r3, r1
 8003194:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003198:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800319c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80031a0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80031a4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031ae:	4413      	add	r3, r2
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2200      	movs	r2, #0
 80031b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80031ca:	464c      	mov	r4, r9
 80031cc:	0423      	lsls	r3, r4, #16
 80031ce:	4644      	mov	r4, r8
 80031d0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80031d4:	4644      	mov	r4, r8
 80031d6:	0422      	lsls	r2, r4, #16
 80031d8:	ea40 0402 	orr.w	r4, r0, r2
 80031dc:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80031e0:	430b      	orrs	r3, r1
 80031e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031e6:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80031ea:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80031ee:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80031f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031f6:	1cda      	adds	r2, r3, #3
 80031f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031fc:	4413      	add	r3, r2
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2200      	movs	r2, #0
 8003204:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003208:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800320c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003210:	4623      	mov	r3, r4
 8003212:	0a1b      	lsrs	r3, r3, #8
 8003214:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003218:	4623      	mov	r3, r4
 800321a:	061b      	lsls	r3, r3, #24
 800321c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003220:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003224:	4623      	mov	r3, r4
 8003226:	4303      	orrs	r3, r0
 8003228:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800322c:	462b      	mov	r3, r5
 800322e:	430b      	orrs	r3, r1
 8003230:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003234:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003238:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800323c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003240:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003244:	1d1a      	adds	r2, r3, #4
 8003246:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800324a:	4413      	add	r3, r2
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2200      	movs	r2, #0
 8003252:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003256:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003266:	0023      	movs	r3, r4
 8003268:	2200      	movs	r2, #0
 800326a:	ea40 0402 	orr.w	r4, r0, r2
 800326e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003272:	430b      	orrs	r3, r1
 8003274:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003278:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800327c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003280:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003284:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003288:	1d5a      	adds	r2, r3, #5
 800328a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800328e:	4413      	add	r3, r2
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2200      	movs	r2, #0
 8003296:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800329a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80032aa:	0223      	lsls	r3, r4, #8
 80032ac:	2200      	movs	r2, #0
 80032ae:	ea40 0402 	orr.w	r4, r0, r2
 80032b2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80032b6:	430b      	orrs	r3, r1
 80032b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032bc:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80032c0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80032c4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80032c8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032cc:	1d9a      	adds	r2, r3, #6
 80032ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032d2:	4413      	add	r3, r2
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2200      	movs	r2, #0
 80032da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80032ee:	0423      	lsls	r3, r4, #16
 80032f0:	2200      	movs	r2, #0
 80032f2:	ea40 0402 	orr.w	r4, r0, r2
 80032f6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80032fa:	430b      	orrs	r3, r1
 80032fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003300:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003304:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003308:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800330c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003310:	1dda      	adds	r2, r3, #7
 8003312:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003316:	4413      	add	r3, r2
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2200      	movs	r2, #0
 800331e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003322:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003332:	0623      	lsls	r3, r4, #24
 8003334:	2200      	movs	r2, #0
 8003336:	ea40 0402 	orr.w	r4, r0, r2
 800333a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800333e:	430b      	orrs	r3, r1
 8003340:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003344:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003348:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 800334c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003350:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003354:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003358:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800335c:	3308      	adds	r3, #8
 800335e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800336e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003372:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003376:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800337a:	4413      	add	r3, r2
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2200      	movs	r2, #0
 8003382:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003386:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800338a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800338e:	4623      	mov	r3, r4
 8003390:	4303      	orrs	r3, r0
 8003392:	67bb      	str	r3, [r7, #120]	; 0x78
 8003394:	462b      	mov	r3, r5
 8003396:	430b      	orrs	r3, r1
 8003398:	67fb      	str	r3, [r7, #124]	; 0x7c
 800339a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800339e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80033a2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80033a6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033b0:	4413      	add	r3, r2
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2200      	movs	r2, #0
 80033b8:	673b      	str	r3, [r7, #112]	; 0x70
 80033ba:	677a      	str	r2, [r7, #116]	; 0x74
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033c8:	464c      	mov	r4, r9
 80033ca:	0223      	lsls	r3, r4, #8
 80033cc:	4644      	mov	r4, r8
 80033ce:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033d2:	4644      	mov	r4, r8
 80033d4:	0222      	lsls	r2, r4, #8
 80033d6:	ea40 0402 	orr.w	r4, r0, r2
 80033da:	66bc      	str	r4, [r7, #104]	; 0x68
 80033dc:	430b      	orrs	r3, r1
 80033de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033e0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80033e4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80033e8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80033ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033f0:	1c9a      	adds	r2, r3, #2
 80033f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033f6:	4413      	add	r3, r2
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2200      	movs	r2, #0
 80033fe:	663b      	str	r3, [r7, #96]	; 0x60
 8003400:	667a      	str	r2, [r7, #100]	; 0x64
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800340e:	464c      	mov	r4, r9
 8003410:	0423      	lsls	r3, r4, #16
 8003412:	4644      	mov	r4, r8
 8003414:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003418:	4644      	mov	r4, r8
 800341a:	0422      	lsls	r2, r4, #16
 800341c:	ea40 0402 	orr.w	r4, r0, r2
 8003420:	65bc      	str	r4, [r7, #88]	; 0x58
 8003422:	430b      	orrs	r3, r1
 8003424:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003426:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800342a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800342e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003432:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003436:	1cda      	adds	r2, r3, #3
 8003438:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800343c:	4413      	add	r3, r2
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2200      	movs	r2, #0
 8003444:	653b      	str	r3, [r7, #80]	; 0x50
 8003446:	657a      	str	r2, [r7, #84]	; 0x54
 8003448:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800344c:	4623      	mov	r3, r4
 800344e:	0a1b      	lsrs	r3, r3, #8
 8003450:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003452:	4623      	mov	r3, r4
 8003454:	061b      	lsls	r3, r3, #24
 8003456:	64bb      	str	r3, [r7, #72]	; 0x48
 8003458:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800345c:	4623      	mov	r3, r4
 800345e:	4303      	orrs	r3, r0
 8003460:	643b      	str	r3, [r7, #64]	; 0x40
 8003462:	462b      	mov	r3, r5
 8003464:	430b      	orrs	r3, r1
 8003466:	647b      	str	r3, [r7, #68]	; 0x44
 8003468:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800346c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003470:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003474:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003478:	1d1a      	adds	r2, r3, #4
 800347a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800347e:	4413      	add	r3, r2
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2200      	movs	r2, #0
 8003486:	63bb      	str	r3, [r7, #56]	; 0x38
 8003488:	63fa      	str	r2, [r7, #60]	; 0x3c
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003494:	0023      	movs	r3, r4
 8003496:	2200      	movs	r2, #0
 8003498:	ea40 0402 	orr.w	r4, r0, r2
 800349c:	633c      	str	r4, [r7, #48]	; 0x30
 800349e:	430b      	orrs	r3, r1
 80034a0:	637b      	str	r3, [r7, #52]	; 0x34
 80034a2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80034a6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80034aa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80034ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034b2:	1d5a      	adds	r2, r3, #5
 80034b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80034b8:	4413      	add	r3, r2
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2200      	movs	r2, #0
 80034c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80034ce:	0223      	lsls	r3, r4, #8
 80034d0:	2200      	movs	r2, #0
 80034d2:	ea40 0402 	orr.w	r4, r0, r2
 80034d6:	623c      	str	r4, [r7, #32]
 80034d8:	430b      	orrs	r3, r1
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
 80034dc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80034e0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80034e4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80034e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034ec:	3306      	adds	r3, #6
 80034ee:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80034f2:	4413      	add	r3, r2
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2200      	movs	r2, #0
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	61fa      	str	r2, [r7, #28]
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	69bc      	ldr	r4, [r7, #24]
 8003508:	0423      	lsls	r3, r4, #16
 800350a:	2200      	movs	r2, #0
 800350c:	ea40 0402 	orr.w	r4, r0, r2
 8003510:	613c      	str	r4, [r7, #16]
 8003512:	430b      	orrs	r3, r1
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800351a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800351e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003522:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003526:	3307      	adds	r3, #7
 8003528:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800352c:	4413      	add	r3, r2
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2200      	movs	r2, #0
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	60fa      	str	r2, [r7, #12]
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	68bc      	ldr	r4, [r7, #8]
 8003542:	0623      	lsls	r3, r4, #24
 8003544:	2200      	movs	r2, #0
 8003546:	ea40 0402 	orr.w	r4, r0, r2
 800354a:	603c      	str	r4, [r7, #0]
 800354c:	430b      	orrs	r3, r1
 800354e:	607b      	str	r3, [r7, #4]
 8003550:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003554:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003558:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800355c:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003560:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003564:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003568:	3308      	adds	r3, #8
 800356a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 800356e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003572:	4618      	mov	r0, r3
 8003574:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003578:	46bd      	mov	sp, r7
 800357a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800357e:	4770      	bx	lr

08003580 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	4b03      	ldr	r3, [pc, #12]	; (8003598 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	0800eaa0 	.word	0x0800eaa0

0800359c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	4b03      	ldr	r3, [pc, #12]	; (80035b4 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	0800eab8 	.word	0x0800eab8

080035b8 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fe faa0 	bl	8001b08 <_ZN3ros3MsgC1Ev>
 80035c8:	4a08      	ldr	r2, [pc, #32]	; (80035ec <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3308      	adds	r3, #8
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff fada 	bl	8002b8c <_ZN13geometry_msgs7Vector3C1Ev>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3328      	adds	r3, #40	; 0x28
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fad5 	bl	8002b8c <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	0800ebcc 	.word	0x0800ebcc

080035f0 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f103 0008 	add.w	r0, r3, #8
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	4413      	add	r3, r2
 800360a:	4619      	mov	r1, r3
 800360c:	f7ff fae6 	bl	8002bdc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003610:	4602      	mov	r2, r0
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4413      	add	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	4413      	add	r3, r2
 8003624:	4619      	mov	r1, r3
 8003626:	f7ff fad9 	bl	8002bdc <_ZNK13geometry_msgs7Vector39serializeEPh>
 800362a:	4602      	mov	r2, r0
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4413      	add	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
      return offset;
 8003632:	68fb      	ldr	r3, [r7, #12]
    }
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f103 0008 	add.w	r0, r3, #8
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	4413      	add	r3, r2
 8003656:	4619      	mov	r1, r3
 8003658:	f7ff fc33 	bl	8002ec2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800365c:	4602      	mov	r2, r0
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4413      	add	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	4413      	add	r3, r2
 8003670:	4619      	mov	r1, r3
 8003672:	f7ff fc26 	bl	8002ec2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003676:	4602      	mov	r2, r0
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4413      	add	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]
     return offset;
 800367e:	68fb      	ldr	r3, [r7, #12]
    }
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	4b03      	ldr	r3, [pc, #12]	; (80036a0 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	0800eadc 	.word	0x0800eadc

080036a4 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 80036ae:	4618      	mov	r0, r3
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	0800eaf0 	.word	0x0800eaf0

080036c0 <_Z12vel_callbackRKN13geometry_msgs5TwistE>:
#include "geometry_msgs/Twist.h"
#include "std_msgs/Float64.h"
double Vx, Vy, W, adjVx, adjVy, adjW,cmnMF, cmnML, cmnMR;
float rVx, rVy, rW;
void vel_callback(const geometry_msgs::Twist &msg)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80036ce:	490a      	ldr	r1, [pc, #40]	; (80036f8 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 80036d0:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80036da:	4908      	ldr	r1, [pc, #32]	; (80036fc <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x3c>)
 80036dc:	e9c1 2300 	strd	r2, r3, [r1]
	W=msg.angular.z;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80036e6:	4906      	ldr	r1, [pc, #24]	; (8003700 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x40>)
 80036e8:	e9c1 2300 	strd	r2, r3, [r1]
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	240004e8 	.word	0x240004e8
 80036fc:	240004f0 	.word	0x240004f0
 8003700:	240004f8 	.word	0x240004f8

08003704 <_Z14const_callbackRKN13geometry_msgs5TwistE>:
void const_callback(const geometry_msgs::Twist &msg)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	adjVx = msg.linear.x;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003712:	4913      	ldr	r1, [pc, #76]	; (8003760 <_Z14const_callbackRKN13geometry_msgs5TwistE+0x5c>)
 8003714:	e9c1 2300 	strd	r2, r3, [r1]
	adjVy = msg.linear.y;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800371e:	4911      	ldr	r1, [pc, #68]	; (8003764 <_Z14const_callbackRKN13geometry_msgs5TwistE+0x60>)
 8003720:	e9c1 2300 	strd	r2, r3, [r1]
	adjW = msg.linear.z;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800372a:	490f      	ldr	r1, [pc, #60]	; (8003768 <_Z14const_callbackRKN13geometry_msgs5TwistE+0x64>)
 800372c:	e9c1 2300 	strd	r2, r3, [r1]
	cmnMF = msg.angular.x;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003736:	490d      	ldr	r1, [pc, #52]	; (800376c <_Z14const_callbackRKN13geometry_msgs5TwistE+0x68>)
 8003738:	e9c1 2300 	strd	r2, r3, [r1]
	cmnMR = msg.angular.y;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003742:	490b      	ldr	r1, [pc, #44]	; (8003770 <_Z14const_callbackRKN13geometry_msgs5TwistE+0x6c>)
 8003744:	e9c1 2300 	strd	r2, r3, [r1]
	cmnML = msg.angular.z;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800374e:	4909      	ldr	r1, [pc, #36]	; (8003774 <_Z14const_callbackRKN13geometry_msgs5TwistE+0x70>)
 8003750:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	24000500 	.word	0x24000500
 8003764:	24000508 	.word	0x24000508
 8003768:	24000510 	.word	0x24000510
 800376c:	24000518 	.word	0x24000518
 8003770:	24000528 	.word	0x24000528
 8003774:	24000520 	.word	0x24000520

08003778 <HAL_UART_TxCpltCallback>:

geometry_msgs::Twist speed;
ros::Publisher pub("speed_fromSTM",&speed);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003780:	4805      	ldr	r0, [pc, #20]	; (8003798 <HAL_UART_TxCpltCallback+0x20>)
 8003782:	f000 f981 	bl	8003a88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003786:	4603      	mov	r3, r0
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff f951 	bl	8002a30 <_ZN13STM32Hardware5flushEv>
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	2400053c 	.word	0x2400053c

0800379c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 80037a4:	4805      	ldr	r0, [pc, #20]	; (80037bc <HAL_UART_RxCpltCallback+0x20>)
 80037a6:	f000 f96f 	bl	8003a88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80037aa:	4603      	mov	r3, r0
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff f900 	bl	80029b2 <_ZN13STM32Hardware10reset_rbufEv>
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	2400053c 	.word	0x2400053c

080037c0 <setup>:
void setup(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
    nh.initNode();
 80037c4:	4808      	ldr	r0, [pc, #32]	; (80037e8 <setup+0x28>)
 80037c6:	f000 f96b 	bl	8003aa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 80037ca:	4908      	ldr	r1, [pc, #32]	; (80037ec <setup+0x2c>)
 80037cc:	4806      	ldr	r0, [pc, #24]	; (80037e8 <setup+0x28>)
 80037ce:	f000 f984 	bl	8003ada <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.subscribe(sub1);
 80037d2:	4907      	ldr	r1, [pc, #28]	; (80037f0 <setup+0x30>)
 80037d4:	4804      	ldr	r0, [pc, #16]	; (80037e8 <setup+0x28>)
 80037d6:	f000 f980 	bl	8003ada <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.advertise(pub);
 80037da:	4906      	ldr	r1, [pc, #24]	; (80037f4 <setup+0x34>)
 80037dc:	4802      	ldr	r0, [pc, #8]	; (80037e8 <setup+0x28>)
 80037de:	f000 f9a7 	bl	8003b30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	2400053c 	.word	0x2400053c
 80037ec:	24000e78 	.word	0x24000e78
 80037f0:	24000ed8 	.word	0x24000ed8
 80037f4:	24000f80 	.word	0x24000f80

080037f8 <loop>:
void loop(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
    nh.spinOnce();
 80037fc:	4802      	ldr	r0, [pc, #8]	; (8003808 <loop+0x10>)
 80037fe:	f000 f9c7 	bl	8003b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	2400053c 	.word	0x2400053c

0800380c <realspeed>:
void errcallback(void) {
	nh.getHardware()->init();
}

void realspeed(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b092      	sub	sp, #72	; 0x48
 8003810:	af00      	add	r7, sp, #0
	geometry_msgs::Twist speed_;
 8003812:	463b      	mov	r3, r7
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff fecf 	bl	80035b8 <_ZN13geometry_msgs5TwistC1Ev>
	speed_.linear.x=rVx;
 800381a:	4b12      	ldr	r3, [pc, #72]	; (8003864 <realspeed+0x58>)
 800381c:	edd3 7a00 	vldr	s15, [r3]
 8003820:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003824:	ed87 7b04 	vstr	d7, [r7, #16]
	speed_.linear.y=rVy;
 8003828:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <realspeed+0x5c>)
 800382a:	edd3 7a00 	vldr	s15, [r3]
 800382e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003832:	ed87 7b06 	vstr	d7, [r7, #24]
	speed_.angular.z=rW;
 8003836:	4b0d      	ldr	r3, [pc, #52]	; (800386c <realspeed+0x60>)
 8003838:	edd3 7a00 	vldr	s15, [r3]
 800383c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003840:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	static bool flag = false;
	if(flag) pub.publish(&speed_);
 8003844:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <realspeed+0x64>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d004      	beq.n	8003856 <realspeed+0x4a>
 800384c:	463b      	mov	r3, r7
 800384e:	4619      	mov	r1, r3
 8003850:	4808      	ldr	r0, [pc, #32]	; (8003874 <realspeed+0x68>)
 8003852:	f7fe ffa6 	bl	80027a2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	flag = true;
 8003856:	4b06      	ldr	r3, [pc, #24]	; (8003870 <realspeed+0x64>)
 8003858:	2201      	movs	r2, #1
 800385a:	701a      	strb	r2, [r3, #0]
}
 800385c:	bf00      	nop
 800385e:	3748      	adds	r7, #72	; 0x48
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	24000530 	.word	0x24000530
 8003868:	24000534 	.word	0x24000534
 800386c:	24000538 	.word	0x24000538
 8003870:	24000f94 	.word	0x24000f94
 8003874:	24000f80 	.word	0x24000f80

08003878 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b03      	cmp	r3, #3
 800388a:	d80d      	bhi.n	80038a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	fa22 f103 	lsr.w	r1, r2, r3
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	b2ca      	uxtb	r2, r1
 800389e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3301      	adds	r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	e7ee      	b.n	8003886 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80038a8:	bf00      	nop
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d811      	bhi.n	80038f2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6839      	ldr	r1, [r7, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	440a      	add	r2, r1
 80038d8:	7812      	ldrb	r2, [r2, #0]
 80038da:	4611      	mov	r1, r2
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	00d2      	lsls	r2, r2, #3
 80038e0:	fa01 f202 	lsl.w	r2, r1, r2
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	3301      	adds	r3, #1
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	e7ea      	b.n	80038c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	4a04      	ldr	r2, [pc, #16]	; (800391c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	0800ec14 	.word	0x0800ec14

08003920 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff ffe8 	bl	8003900 <_ZN3ros15NodeHandleBase_C1Ev>
 8003930:	4a3a      	ldr	r2, [pc, #232]	; (8003a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3304      	adds	r3, #4
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff f812 	bl	8002964 <_ZN13STM32HardwareC1Ev>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe fc4e 	bl	80021f0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	2b18      	cmp	r3, #24
 800395c:	d80b      	bhi.n	8003976 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	2200      	movs	r2, #0
 800396c:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	3301      	adds	r3, #1
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	e7f0      	b.n	8003958 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003976:	2300      	movs	r3, #0
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b18      	cmp	r3, #24
 800397e:	d80a      	bhi.n	8003996 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003988:	2100      	movs	r1, #0
 800398a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	3301      	adds	r3, #1
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	e7f1      	b.n	800397a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039a0:	d20a      	bcs.n	80039b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80039ac:	2200      	movs	r2, #0
 80039ae:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3301      	adds	r3, #1
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	e7f0      	b.n	800399a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80039b8:	2300      	movs	r3, #0
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c2:	d20a      	bcs.n	80039da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	4413      	add	r3, r2
 80039ca:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80039ce:	2200      	movs	r2, #0
 80039d0:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	3301      	adds	r3, #1
 80039d6:	60bb      	str	r3, [r7, #8]
 80039d8:	e7f0      	b.n	80039bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	0800ebb8 	.word	0x0800ebb8

08003a20 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	4a04      	ldr	r2, [pc, #16]	; (8003a3c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	0800ebfc 	.word	0x0800ebfc

08003a40 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff ffe5 	bl	8003a20 <_ZN3ros11Subscriber_C1Ev>
 8003a56:	4a0b      	ldr	r2, [pc, #44]	; (8003a84 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3310      	adds	r3, #16
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff fda9 	bl	80035b8 <_ZN13geometry_msgs5TwistC1Ev>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	659a      	str	r2, [r3, #88]	; 0x58
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	609a      	str	r2, [r3, #8]
  };
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	0800eba0 	.word	0x0800eba0

08003a88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3304      	adds	r3, #4
  }
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe ff75 	bl	800299c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003ada:	b480      	push	{r7}
 8003adc:	b085      	sub	sp, #20
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b18      	cmp	r3, #24
 8003aec:	dc19      	bgt.n	8003b22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10d      	bne.n	8003b1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003afe:	6839      	ldr	r1, [r7, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	605a      	str	r2, [r3, #4]
        return true;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e004      	b.n	8003b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	e7e2      	b.n	8003ae8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8003b22:	2300      	movs	r3, #0
  }
 8003b24:	4618      	mov	r0, r3
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b18      	cmp	r3, #24
 8003b42:	dc1e      	bgt.n	8003b82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d111      	bne.n	8003b7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	60da      	str	r2, [r3, #12]
        return true;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e004      	b.n	8003b84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	e7dd      	b.n	8003b3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8003b82:	2300      	movs	r3, #0
  }
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fe ffe9 	bl	8002b74 <_ZN13STM32Hardware4timeEv>
 8003ba2:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d903      	bls.n	8003bbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d009      	beq.n	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d903      	bls.n	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d014      	beq.n	8003c10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3304      	adds	r3, #4
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe ffc2 	bl	8002b74 <_ZN13STM32Hardware4timeEv>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1ad2      	subs	r2, r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	bf8c      	ite	hi
 8003c00:	2301      	movhi	r3, #1
 8003c02:	2300      	movls	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8003c0a:	f06f 0301 	mvn.w	r3, #1
 8003c0e:	e194      	b.n	8003f3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3304      	adds	r3, #4
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fe fedd 	bl	80029d4 <_ZN13STM32Hardware4readEv>
 8003c1a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f2c0 8174 	blt.w	8003f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	441a      	add	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003c3a:	2b07      	cmp	r3, #7
 8003c3c:	d11e      	bne.n	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003c44:	1c59      	adds	r1, r3, #1
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	b2d1      	uxtb	r1, r2
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	4413      	add	r3, r2
 8003c54:	460a      	mov	r2, r1
 8003c56:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003c60:	1e5a      	subs	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1b4      	bne.n	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2208      	movs	r2, #8
 8003c76:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003c7a:	e7af      	b.n	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d128      	bne.n	8003cd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2bff      	cmp	r3, #255	; 0xff
 8003c8a:	d10d      	bne.n	8003ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f103 0214 	add.w	r2, r3, #20
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003ca6:	e799      	b.n	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3304      	adds	r3, #4
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fe ff61 	bl	8002b74 <_ZN13STM32Hardware4timeEv>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	bf8c      	ite	hi
 8003cc0:	2301      	movhi	r3, #1
 8003cc2:	2300      	movls	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d088      	beq.n	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003cd2:	f06f 0301 	mvn.w	r3, #1
 8003cd6:	e130      	b.n	8003f3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d118      	bne.n	8003d14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2bfe      	cmp	r3, #254	; 0xfe
 8003ce6:	d107      	bne.n	8003cf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003cf6:	e771      	b.n	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f47f af68 	bne.w	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f918 	bl	8003f42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003d12:	e763      	b.n	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d113      	bne.n	8003d46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003d44:	e74a      	b.n	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d110      	bne.n	8003d72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	021b      	lsls	r3, r3, #8
 8003d5a:	441a      	add	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003d70:	e734      	b.n	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d116      	bne.n	8003daa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003d82:	425a      	negs	r2, r3
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	bf58      	it	pl
 8003d8a:	4253      	negpl	r3, r2
 8003d8c:	2bff      	cmp	r3, #255	; 0xff
 8003d8e:	d107      	bne.n	8003da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003d9e:	e71d      	b.n	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003da8:	e718      	b.n	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003db0:	2b05      	cmp	r3, #5
 8003db2:	d10f      	bne.n	8003dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003dd2:	e703      	b.n	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003dda:	2b06      	cmp	r3, #6
 8003ddc:	d117      	bne.n	8003e0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	441a      	add	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2207      	movs	r2, #7
 8003df4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f47f aeec 	bne.w	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2208      	movs	r2, #8
 8003e08:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003e0c:	e6e6      	b.n	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	f47f aee1 	bne.w	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003e28:	425a      	negs	r2, r3
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	bf58      	it	pl
 8003e30:	4253      	negpl	r3, r2
 8003e32:	2bff      	cmp	r3, #255	; 0xff
 8003e34:	f47f aed2 	bne.w	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d110      	bne.n	8003e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f87d 	bl	8003f42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f898 	bl	8003f7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8003e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e62:	e06a      	b.n	8003f3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003e6a:	2b0a      	cmp	r3, #10
 8003e6c:	d107      	bne.n	8003e7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003e74:	4619      	mov	r1, r3
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f960 	bl	800413c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003e7c:	e6ae      	b.n	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003e84:	2b06      	cmp	r3, #6
 8003e86:	d10e      	bne.n	8003ea6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003e94:	4619      	mov	r1, r3
 8003e96:	4610      	mov	r0, r2
 8003e98:	f7fe fadf 	bl	800245a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003ea4:	e69a      	b.n	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003eac:	2b0b      	cmp	r3, #11
 8003eae:	d104      	bne.n	8003eba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003eb8:	e690      	b.n	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003ec0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f43f ae84 	beq.w	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003eda:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003ee4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003eee:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003f06:	4611      	mov	r1, r2
 8003f08:	4798      	blx	r3
    while (true)
 8003f0a:	e667      	b.n	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003f0c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00f      	beq.n	8003f38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d906      	bls.n	8003f38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f809 	bl	8003f42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8003f38:	2300      	movs	r3, #0
  }
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b086      	sub	sp, #24
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003f4a:	f107 030c 	add.w	r3, r7, #12
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fd fdea 	bl	8001b28 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f107 020c 	add.w	r2, r7, #12
 8003f5e:	210a      	movs	r1, #10
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	4798      	blx	r3
    rt_time = hardware_.time();
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3304      	adds	r3, #4
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fe fe03 	bl	8002b74 <_ZN13STM32Hardware4timeEv>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003f76:	bf00      	nop
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003f7e:	b590      	push	{r4, r7, lr}
 8003f80:	b08b      	sub	sp, #44	; 0x2c
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003f86:	f107 030c 	add.w	r3, r7, #12
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fd febc 	bl	8001d08 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003f90:	2300      	movs	r3, #0
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	2b18      	cmp	r3, #24
 8003f98:	dc63      	bgt.n	8004062 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d056      	beq.n	800405a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	6859      	ldr	r1, [r3, #4]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4608      	mov	r0, r1
 8003ffa:	4798      	blx	r3
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	6859      	ldr	r1, [r3, #4]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	330c      	adds	r3, #12
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4608      	mov	r0, r1
 8004028:	4798      	blx	r3
 800402a:	4603      	mov	r3, r0
 800402c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800402e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004032:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681c      	ldr	r4, [r3, #0]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	4618      	mov	r0, r3
 800404a:	f7fe fbbe 	bl	80027ca <_ZN3ros9Publisher15getEndpointTypeEv>
 800404e:	4601      	mov	r1, r0
 8004050:	f107 030c 	add.w	r3, r7, #12
 8004054:	461a      	mov	r2, r3
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	3301      	adds	r3, #1
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
 8004060:	e798      	b.n	8003f94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004062:	2300      	movs	r3, #0
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	2b18      	cmp	r3, #24
 800406a:	dc5f      	bgt.n	800412c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004070:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d053      	beq.n	8004124 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004080:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	b29b      	uxth	r3, r3
 800408c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004092:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80040a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ae:	f202 2222 	addw	r2, r2, #546	; 0x222
 80040b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3308      	adds	r3, #8
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4608      	mov	r0, r1
 80040be:	4798      	blx	r3
 80040c0:	4603      	mov	r3, r0
 80040c2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80040cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80040d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	330c      	adds	r3, #12
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4608      	mov	r0, r1
 80040e4:	4798      	blx	r3
 80040e6:	4603      	mov	r3, r0
 80040e8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80040ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040ee:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681c      	ldr	r4, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fa:	f202 2222 	addw	r2, r2, #546	; 0x222
 80040fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004106:	f202 2222 	addw	r2, r2, #546	; 0x222
 800410a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3304      	adds	r3, #4
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4608      	mov	r0, r1
 8004116:	4798      	blx	r3
 8004118:	4601      	mov	r1, r0
 800411a:	f107 030c 	add.w	r3, r7, #12
 800411e:	461a      	mov	r2, r3
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	3301      	adds	r3, #1
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
 800412a:	e79c      	b.n	8004066 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8004134:	bf00      	nop
 8004136:	372c      	adds	r7, #44	; 0x2c
 8004138:	46bd      	mov	sp, r7
 800413a:	bd90      	pop	{r4, r7, pc}

0800413c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004146:	f107 0308 	add.w	r3, r7, #8
 800414a:	4618      	mov	r0, r3
 800414c:	f7fd fcec 	bl	8001b28 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3304      	adds	r3, #4
 8004154:	4618      	mov	r0, r3
 8004156:	f7fe fd0d 	bl	8002b74 <_ZN13STM32Hardware4timeEv>
 800415a:	4602      	mov	r2, r0
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004166:	f107 0308 	add.w	r3, r7, #8
 800416a:	6839      	ldr	r1, [r7, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f7fd fd4b 	bl	8001c08 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	4915      	ldr	r1, [pc, #84]	; (80041cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004178:	fba1 1303 	umull	r1, r3, r1, r3
 800417c:	099b      	lsrs	r3, r3, #6
 800417e:	4413      	add	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004182:	6939      	ldr	r1, [r7, #16]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	4b11      	ldr	r3, [pc, #68]	; (80041cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004188:	fba3 0302 	umull	r0, r3, r3, r2
 800418c:	099b      	lsrs	r3, r3, #6
 800418e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004192:	fb00 f303 	mul.w	r3, r0, r3
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	4a0d      	ldr	r2, [pc, #52]	; (80041d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800419a:	fb02 f303 	mul.w	r3, r2, r3
 800419e:	440b      	add	r3, r1
 80041a0:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80041a2:	f107 0308 	add.w	r3, r7, #8
 80041a6:	3304      	adds	r3, #4
 80041a8:	4619      	mov	r1, r3
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f8a6 	bl	80042fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3304      	adds	r3, #4
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fe fcdd 	bl	8002b74 <_ZN13STM32Hardware4timeEv>
 80041ba:	4602      	mov	r2, r0
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 80041c2:	bf00      	nop
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	10624dd3 	.word	0x10624dd3
 80041d0:	000f4240 	.word	0x000f4240

080041d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b63      	cmp	r3, #99	; 0x63
 80041e4:	dd09      	ble.n	80041fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80041ec:	f083 0301 	eor.w	r3, r3, #1
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	e079      	b.n	80042ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8004206:	3207      	adds	r2, #7
 8004208:	4611      	mov	r1, r2
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	4798      	blx	r3
 800420e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	22ff      	movs	r2, #255	; 0xff
 8004214:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	22fe      	movs	r2, #254	; 0xfe
 800421c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	b2da      	uxtb	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	b29b      	uxth	r3, r3
 800422e:	0a1b      	lsrs	r3, r3, #8
 8004230:	b29b      	uxth	r3, r3
 8004232:	b2da      	uxtb	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8004246:	4413      	add	r3, r2
 8004248:	b2db      	uxtb	r3, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	b2da      	uxtb	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	b2da      	uxtb	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	b21b      	sxth	r3, r3
 8004262:	121b      	asrs	r3, r3, #8
 8004264:	b21b      	sxth	r3, r3
 8004266:	b2da      	uxtb	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 800426e:	2300      	movs	r3, #0
 8004270:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004272:	2305      	movs	r3, #5
 8004274:	61bb      	str	r3, [r7, #24]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	3306      	adds	r3, #6
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	429a      	cmp	r2, r3
 800427e:	dc0d      	bgt.n	800429c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	4413      	add	r3, r2
 8004286:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	4413      	add	r3, r2
 8004292:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	3301      	adds	r3, #1
 8004298:	61bb      	str	r3, [r7, #24]
 800429a:	e7ec      	b.n	8004276 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	3307      	adds	r3, #7
 80042a0:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	425a      	negs	r2, r3
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	bf58      	it	pl
 80042ac:	4253      	negpl	r3, r2
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	1c59      	adds	r1, r3, #1
 80042b4:	6179      	str	r1, [r7, #20]
 80042b6:	43d2      	mvns	r2, r2
 80042b8:	b2d1      	uxtb	r1, r2
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4413      	add	r3, r2
 80042be:	460a      	mov	r2, r1
 80042c0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ca:	dc0a      	bgt.n	80042e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	1d18      	adds	r0, r3, #4
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4619      	mov	r1, r3
 80042da:	f7fe fc05 	bl	8002ae8 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	e005      	b.n	80042ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80042e2:	4905      	ldr	r1, [pc, #20]	; (80042f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 f849 	bl	800437c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80042ea:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80042ee:	4618      	mov	r0, r3
 80042f0:	3720      	adds	r7, #32
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	0800eb14 	.word	0x0800eb14

080042fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3304      	adds	r3, #4
 800430a:	4618      	mov	r0, r3
 800430c:	f7fe fc32 	bl	8002b74 <_ZN13STM32Hardware4timeEv>
 8004310:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4915      	ldr	r1, [pc, #84]	; (8004370 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800431a:	fba1 1303 	umull	r1, r3, r1, r3
 800431e:	099b      	lsrs	r3, r3, #6
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	1e5a      	subs	r2, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6859      	ldr	r1, [r3, #4]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8004332:	fba3 0302 	umull	r0, r3, r3, r2
 8004336:	099b      	lsrs	r3, r3, #6
 8004338:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800433c:	fb00 f303 	mul.w	r3, r0, r3
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	4a0c      	ldr	r2, [pc, #48]	; (8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8004344:	fb02 f303 	mul.w	r3, r2, r3
 8004348:	1aca      	subs	r2, r1, r3
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 800434c:	4413      	add	r3, r2
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004360:	4619      	mov	r1, r3
 8004362:	4610      	mov	r0, r2
 8004364:	f7fc f95e 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004368:	bf00      	nop
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	10624dd3 	.word	0x10624dd3
 8004374:	000f4240 	.word	0x000f4240
 8004378:	3b9aca00 	.word	0x3b9aca00

0800437c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	2103      	movs	r1, #3
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f804 	bl	8004398 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	460b      	mov	r3, r1
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80043a6:	f107 0314 	add.w	r3, r7, #20
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fd fe70 	bl	8002090 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80043b0:	7afb      	ldrb	r3, [r7, #11]
 80043b2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f107 0214 	add.w	r2, r7, #20
 80043c2:	2107      	movs	r1, #7
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	4798      	blx	r3
  }
 80043c8:	bf00      	nop
 80043ca:	3720      	adds	r7, #32
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <_Z41__static_initialization_and_destruction_0ii>:
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d11c      	bne.n	800441a <_Z41__static_initialization_and_destruction_0ii+0x4a>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d117      	bne.n	800441a <_Z41__static_initialization_and_destruction_0ii+0x4a>
ros::NodeHandle nh;
 80043ea:	480e      	ldr	r0, [pc, #56]	; (8004424 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80043ec:	f7ff fa98 	bl	8003920 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub("cmdvel_toSTM", vel_callback);
 80043f0:	2301      	movs	r3, #1
 80043f2:	4a0d      	ldr	r2, [pc, #52]	; (8004428 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80043f4:	490d      	ldr	r1, [pc, #52]	; (800442c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80043f6:	480e      	ldr	r0, [pc, #56]	; (8004430 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80043f8:	f7ff fb22 	bl	8003a40 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<geometry_msgs::Twist> sub1("cmdconst", const_callback);
 80043fc:	2301      	movs	r3, #1
 80043fe:	4a0d      	ldr	r2, [pc, #52]	; (8004434 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004400:	490d      	ldr	r1, [pc, #52]	; (8004438 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004402:	480e      	ldr	r0, [pc, #56]	; (800443c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004404:	f7ff fb1c 	bl	8003a40 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
geometry_msgs::Twist speed;
 8004408:	480d      	ldr	r0, [pc, #52]	; (8004440 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800440a:	f7ff f8d5 	bl	80035b8 <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher pub("speed_fromSTM",&speed);
 800440e:	2300      	movs	r3, #0
 8004410:	4a0b      	ldr	r2, [pc, #44]	; (8004440 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004412:	490c      	ldr	r1, [pc, #48]	; (8004444 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004414:	480c      	ldr	r0, [pc, #48]	; (8004448 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004416:	f7fe f9ad 	bl	8002774 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	2400053c 	.word	0x2400053c
 8004428:	080036c1 	.word	0x080036c1
 800442c:	0800eb50 	.word	0x0800eb50
 8004430:	24000e78 	.word	0x24000e78
 8004434:	08003705 	.word	0x08003705
 8004438:	0800eb60 	.word	0x0800eb60
 800443c:	24000ed8 	.word	0x24000ed8
 8004440:	24000f38 	.word	0x24000f38
 8004444:	0800eb6c 	.word	0x0800eb6c
 8004448:	24000f80 	.word	0x24000f80

0800444c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3310      	adds	r3, #16
 800445a:	6839      	ldr	r1, [r7, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff f8ed 	bl	800363c <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	3210      	adds	r2, #16
 800446a:	4610      	mov	r0, r2
 800446c:	4798      	blx	r3
  }
 800446e:	bf00      	nop
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8004482:	4618      	mov	r0, r3
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3310      	adds	r3, #16
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff f8f4 	bl	8003688 <_ZN13geometry_msgs5Twist7getTypeEv>
 80044a0:	4603      	mov	r3, r0
  }
 80044a2:	4618      	mov	r0, r3
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b082      	sub	sp, #8
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3310      	adds	r3, #16
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff f8f4 	bl	80036a4 <_ZN13geometry_msgs5Twist6getMD5Ev>
 80044bc:	4603      	mov	r3, r0
  }
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
    return configured_;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <_GLOBAL__sub_I_Vx>:
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80044e8:	2001      	movs	r0, #1
 80044ea:	f7ff ff71 	bl	80043d0 <_Z41__static_initialization_and_destruction_0ii>
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044f6:	4b0d      	ldr	r3, [pc, #52]	; (800452c <HAL_MspInit+0x3c>)
 80044f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044fc:	4a0b      	ldr	r2, [pc, #44]	; (800452c <HAL_MspInit+0x3c>)
 80044fe:	f043 0302 	orr.w	r3, r3, #2
 8004502:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004506:	4b09      	ldr	r3, [pc, #36]	; (800452c <HAL_MspInit+0x3c>)
 8004508:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	607b      	str	r3, [r7, #4]
 8004512:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004514:	2200      	movs	r2, #0
 8004516:	2100      	movs	r1, #0
 8004518:	2005      	movs	r0, #5
 800451a:	f000 fd4a 	bl	8004fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800451e:	2005      	movs	r0, #5
 8004520:	f000 fd61 	bl	8004fe6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	58024400 	.word	0x58024400

08004530 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08e      	sub	sp, #56	; 0x38
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	609a      	str	r2, [r3, #8]
 8004544:	60da      	str	r2, [r3, #12]
 8004546:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a4f      	ldr	r2, [pc, #316]	; (800468c <HAL_TIM_Encoder_MspInit+0x15c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d12f      	bne.n	80045b2 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004552:	4b4f      	ldr	r3, [pc, #316]	; (8004690 <HAL_TIM_Encoder_MspInit+0x160>)
 8004554:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004558:	4a4d      	ldr	r2, [pc, #308]	; (8004690 <HAL_TIM_Encoder_MspInit+0x160>)
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004562:	4b4b      	ldr	r3, [pc, #300]	; (8004690 <HAL_TIM_Encoder_MspInit+0x160>)
 8004564:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	623b      	str	r3, [r7, #32]
 800456e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004570:	4b47      	ldr	r3, [pc, #284]	; (8004690 <HAL_TIM_Encoder_MspInit+0x160>)
 8004572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004576:	4a46      	ldr	r2, [pc, #280]	; (8004690 <HAL_TIM_Encoder_MspInit+0x160>)
 8004578:	f043 0310 	orr.w	r3, r3, #16
 800457c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004580:	4b43      	ldr	r3, [pc, #268]	; (8004690 <HAL_TIM_Encoder_MspInit+0x160>)
 8004582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	61fb      	str	r3, [r7, #28]
 800458c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800458e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004592:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004594:	2302      	movs	r3, #2
 8004596:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004598:	2300      	movs	r3, #0
 800459a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800459c:	2300      	movs	r3, #0
 800459e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80045a0:	2301      	movs	r3, #1
 80045a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045a8:	4619      	mov	r1, r3
 80045aa:	483a      	ldr	r0, [pc, #232]	; (8004694 <HAL_TIM_Encoder_MspInit+0x164>)
 80045ac:	f003 fb70 	bl	8007c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 80045b0:	e067      	b.n	8004682 <HAL_TIM_Encoder_MspInit+0x152>
  else if(htim_encoder->Instance==TIM4)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a38      	ldr	r2, [pc, #224]	; (8004698 <HAL_TIM_Encoder_MspInit+0x168>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d12f      	bne.n	800461c <HAL_TIM_Encoder_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80045bc:	4b34      	ldr	r3, [pc, #208]	; (8004690 <HAL_TIM_Encoder_MspInit+0x160>)
 80045be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045c2:	4a33      	ldr	r2, [pc, #204]	; (8004690 <HAL_TIM_Encoder_MspInit+0x160>)
 80045c4:	f043 0304 	orr.w	r3, r3, #4
 80045c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045cc:	4b30      	ldr	r3, [pc, #192]	; (8004690 <HAL_TIM_Encoder_MspInit+0x160>)
 80045ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045da:	4b2d      	ldr	r3, [pc, #180]	; (8004690 <HAL_TIM_Encoder_MspInit+0x160>)
 80045dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045e0:	4a2b      	ldr	r2, [pc, #172]	; (8004690 <HAL_TIM_Encoder_MspInit+0x160>)
 80045e2:	f043 0308 	orr.w	r3, r3, #8
 80045e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045ea:	4b29      	ldr	r3, [pc, #164]	; (8004690 <HAL_TIM_Encoder_MspInit+0x160>)
 80045ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80045f8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045fe:	2302      	movs	r3, #2
 8004600:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004602:	2300      	movs	r3, #0
 8004604:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004606:	2300      	movs	r3, #0
 8004608:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800460a:	2302      	movs	r3, #2
 800460c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800460e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004612:	4619      	mov	r1, r3
 8004614:	4821      	ldr	r0, [pc, #132]	; (800469c <HAL_TIM_Encoder_MspInit+0x16c>)
 8004616:	f003 fb3b 	bl	8007c90 <HAL_GPIO_Init>
}
 800461a:	e032      	b.n	8004682 <HAL_TIM_Encoder_MspInit+0x152>
  else if(htim_encoder->Instance==TIM23)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a1f      	ldr	r2, [pc, #124]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x170>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d12d      	bne.n	8004682 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8004626:	4b1a      	ldr	r3, [pc, #104]	; (8004690 <HAL_TIM_Encoder_MspInit+0x160>)
 8004628:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800462c:	4a18      	ldr	r2, [pc, #96]	; (8004690 <HAL_TIM_Encoder_MspInit+0x160>)
 800462e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004632:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004636:	4b16      	ldr	r3, [pc, #88]	; (8004690 <HAL_TIM_Encoder_MspInit+0x160>)
 8004638:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800463c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004644:	4b12      	ldr	r3, [pc, #72]	; (8004690 <HAL_TIM_Encoder_MspInit+0x160>)
 8004646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800464a:	4a11      	ldr	r2, [pc, #68]	; (8004690 <HAL_TIM_Encoder_MspInit+0x160>)
 800464c:	f043 0320 	orr.w	r3, r3, #32
 8004650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004654:	4b0e      	ldr	r3, [pc, #56]	; (8004690 <HAL_TIM_Encoder_MspInit+0x160>)
 8004656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004662:	2303      	movs	r3, #3
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004666:	2302      	movs	r3, #2
 8004668:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466a:	2300      	movs	r3, #0
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800466e:	2300      	movs	r3, #0
 8004670:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8004672:	230d      	movs	r3, #13
 8004674:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800467a:	4619      	mov	r1, r3
 800467c:	4809      	ldr	r0, [pc, #36]	; (80046a4 <HAL_TIM_Encoder_MspInit+0x174>)
 800467e:	f003 fb07 	bl	8007c90 <HAL_GPIO_Init>
}
 8004682:	bf00      	nop
 8004684:	3738      	adds	r7, #56	; 0x38
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40010000 	.word	0x40010000
 8004690:	58024400 	.word	0x58024400
 8004694:	58021000 	.word	0x58021000
 8004698:	40000800 	.word	0x40000800
 800469c:	58020c00 	.word	0x58020c00
 80046a0:	4000e000 	.word	0x4000e000
 80046a4:	58021400 	.word	0x58021400

080046a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b8:	d10f      	bne.n	80046da <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80046ba:	4b15      	ldr	r3, [pc, #84]	; (8004710 <HAL_TIM_PWM_MspInit+0x68>)
 80046bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046c0:	4a13      	ldr	r2, [pc, #76]	; (8004710 <HAL_TIM_PWM_MspInit+0x68>)
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80046ca:	4b11      	ldr	r3, [pc, #68]	; (8004710 <HAL_TIM_PWM_MspInit+0x68>)
 80046cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80046d8:	e013      	b.n	8004702 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM8)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a0d      	ldr	r2, [pc, #52]	; (8004714 <HAL_TIM_PWM_MspInit+0x6c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d10e      	bne.n	8004702 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80046e4:	4b0a      	ldr	r3, [pc, #40]	; (8004710 <HAL_TIM_PWM_MspInit+0x68>)
 80046e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046ea:	4a09      	ldr	r2, [pc, #36]	; (8004710 <HAL_TIM_PWM_MspInit+0x68>)
 80046ec:	f043 0302 	orr.w	r3, r3, #2
 80046f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80046f4:	4b06      	ldr	r3, [pc, #24]	; (8004710 <HAL_TIM_PWM_MspInit+0x68>)
 80046f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	60bb      	str	r3, [r7, #8]
 8004700:	68bb      	ldr	r3, [r7, #8]
}
 8004702:	bf00      	nop
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	58024400 	.word	0x58024400
 8004714:	40010400 	.word	0x40010400

08004718 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1d      	ldr	r2, [pc, #116]	; (800479c <HAL_TIM_Base_MspInit+0x84>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d117      	bne.n	800475a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800472a:	4b1d      	ldr	r3, [pc, #116]	; (80047a0 <HAL_TIM_Base_MspInit+0x88>)
 800472c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004730:	4a1b      	ldr	r2, [pc, #108]	; (80047a0 <HAL_TIM_Base_MspInit+0x88>)
 8004732:	f043 0302 	orr.w	r3, r3, #2
 8004736:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800473a:	4b19      	ldr	r3, [pc, #100]	; (80047a0 <HAL_TIM_Base_MspInit+0x88>)
 800473c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004748:	2200      	movs	r2, #0
 800474a:	2100      	movs	r1, #0
 800474c:	201d      	movs	r0, #29
 800474e:	f000 fc30 	bl	8004fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004752:	201d      	movs	r0, #29
 8004754:	f000 fc47 	bl	8004fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004758:	e01b      	b.n	8004792 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a11      	ldr	r2, [pc, #68]	; (80047a4 <HAL_TIM_Base_MspInit+0x8c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d116      	bne.n	8004792 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004764:	4b0e      	ldr	r3, [pc, #56]	; (80047a0 <HAL_TIM_Base_MspInit+0x88>)
 8004766:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800476a:	4a0d      	ldr	r2, [pc, #52]	; (80047a0 <HAL_TIM_Base_MspInit+0x88>)
 800476c:	f043 0308 	orr.w	r3, r3, #8
 8004770:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004774:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <HAL_TIM_Base_MspInit+0x88>)
 8004776:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	60bb      	str	r3, [r7, #8]
 8004780:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004782:	2200      	movs	r2, #0
 8004784:	2100      	movs	r1, #0
 8004786:	2032      	movs	r0, #50	; 0x32
 8004788:	f000 fc13 	bl	8004fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800478c:	2032      	movs	r0, #50	; 0x32
 800478e:	f000 fc2a 	bl	8004fe6 <HAL_NVIC_EnableIRQ>
}
 8004792:	bf00      	nop
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40000400 	.word	0x40000400
 80047a0:	58024400 	.word	0x58024400
 80047a4:	40000c00 	.word	0x40000c00

080047a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08a      	sub	sp, #40	; 0x28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b0:	f107 0314 	add.w	r3, r7, #20
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	605a      	str	r2, [r3, #4]
 80047ba:	609a      	str	r2, [r3, #8]
 80047bc:	60da      	str	r2, [r3, #12]
 80047be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c8:	d11f      	bne.n	800480a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ca:	4b24      	ldr	r3, [pc, #144]	; (800485c <HAL_TIM_MspPostInit+0xb4>)
 80047cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047d0:	4a22      	ldr	r2, [pc, #136]	; (800485c <HAL_TIM_MspPostInit+0xb4>)
 80047d2:	f043 0301 	orr.w	r3, r3, #1
 80047d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047da:	4b20      	ldr	r3, [pc, #128]	; (800485c <HAL_TIM_MspPostInit+0xb4>)
 80047dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80047e8:	2309      	movs	r3, #9
 80047ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ec:	2302      	movs	r3, #2
 80047ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f0:	2300      	movs	r3, #0
 80047f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047f4:	2300      	movs	r3, #0
 80047f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80047f8:	2301      	movs	r3, #1
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047fc:	f107 0314 	add.w	r3, r7, #20
 8004800:	4619      	mov	r1, r3
 8004802:	4817      	ldr	r0, [pc, #92]	; (8004860 <HAL_TIM_MspPostInit+0xb8>)
 8004804:	f003 fa44 	bl	8007c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004808:	e024      	b.n	8004854 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM8)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a15      	ldr	r2, [pc, #84]	; (8004864 <HAL_TIM_MspPostInit+0xbc>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d11f      	bne.n	8004854 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004814:	4b11      	ldr	r3, [pc, #68]	; (800485c <HAL_TIM_MspPostInit+0xb4>)
 8004816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800481a:	4a10      	ldr	r2, [pc, #64]	; (800485c <HAL_TIM_MspPostInit+0xb4>)
 800481c:	f043 0304 	orr.w	r3, r3, #4
 8004820:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004824:	4b0d      	ldr	r3, [pc, #52]	; (800485c <HAL_TIM_MspPostInit+0xb4>)
 8004826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004832:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004838:	2302      	movs	r3, #2
 800483a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483c:	2300      	movs	r3, #0
 800483e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004840:	2300      	movs	r3, #0
 8004842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004844:	2303      	movs	r3, #3
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004848:	f107 0314 	add.w	r3, r7, #20
 800484c:	4619      	mov	r1, r3
 800484e:	4806      	ldr	r0, [pc, #24]	; (8004868 <HAL_TIM_MspPostInit+0xc0>)
 8004850:	f003 fa1e 	bl	8007c90 <HAL_GPIO_Init>
}
 8004854:	bf00      	nop
 8004856:	3728      	adds	r7, #40	; 0x28
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	58024400 	.word	0x58024400
 8004860:	58020000 	.word	0x58020000
 8004864:	40010400 	.word	0x40010400
 8004868:	58020800 	.word	0x58020800

0800486c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b0b8      	sub	sp, #224	; 0xe0
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004874:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	605a      	str	r2, [r3, #4]
 800487e:	609a      	str	r2, [r3, #8]
 8004880:	60da      	str	r2, [r3, #12]
 8004882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004884:	f107 0310 	add.w	r3, r7, #16
 8004888:	22b8      	movs	r2, #184	; 0xb8
 800488a:	2100      	movs	r1, #0
 800488c:	4618      	mov	r0, r3
 800488e:	f009 ff07 	bl	800e6a0 <memset>
  if(huart->Instance==USART3)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a5a      	ldr	r2, [pc, #360]	; (8004a00 <HAL_UART_MspInit+0x194>)
 8004898:	4293      	cmp	r3, r2
 800489a:	f040 80ac 	bne.w	80049f6 <HAL_UART_MspInit+0x18a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800489e:	f04f 0202 	mov.w	r2, #2
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80048aa:	2300      	movs	r3, #0
 80048ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048b0:	f107 0310 	add.w	r3, r7, #16
 80048b4:	4618      	mov	r0, r3
 80048b6:	f004 fb4d 	bl	8008f54 <HAL_RCCEx_PeriphCLKConfig>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80048c0:	f7fd f90c 	bl	8001adc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80048c4:	4b4f      	ldr	r3, [pc, #316]	; (8004a04 <HAL_UART_MspInit+0x198>)
 80048c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048ca:	4a4e      	ldr	r2, [pc, #312]	; (8004a04 <HAL_UART_MspInit+0x198>)
 80048cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80048d4:	4b4b      	ldr	r3, [pc, #300]	; (8004a04 <HAL_UART_MspInit+0x198>)
 80048d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048e2:	4b48      	ldr	r3, [pc, #288]	; (8004a04 <HAL_UART_MspInit+0x198>)
 80048e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048e8:	4a46      	ldr	r2, [pc, #280]	; (8004a04 <HAL_UART_MspInit+0x198>)
 80048ea:	f043 0304 	orr.w	r3, r3, #4
 80048ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80048f2:	4b44      	ldr	r3, [pc, #272]	; (8004a04 <HAL_UART_MspInit+0x198>)
 80048f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	60bb      	str	r3, [r7, #8]
 80048fe:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004900:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004904:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004908:	2302      	movs	r3, #2
 800490a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490e:	2300      	movs	r3, #0
 8004910:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004914:	2300      	movs	r3, #0
 8004916:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800491a:	2307      	movs	r3, #7
 800491c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004920:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004924:	4619      	mov	r1, r3
 8004926:	4838      	ldr	r0, [pc, #224]	; (8004a08 <HAL_UART_MspInit+0x19c>)
 8004928:	f003 f9b2 	bl	8007c90 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800492c:	4b37      	ldr	r3, [pc, #220]	; (8004a0c <HAL_UART_MspInit+0x1a0>)
 800492e:	4a38      	ldr	r2, [pc, #224]	; (8004a10 <HAL_UART_MspInit+0x1a4>)
 8004930:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004932:	4b36      	ldr	r3, [pc, #216]	; (8004a0c <HAL_UART_MspInit+0x1a0>)
 8004934:	222d      	movs	r2, #45	; 0x2d
 8004936:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004938:	4b34      	ldr	r3, [pc, #208]	; (8004a0c <HAL_UART_MspInit+0x1a0>)
 800493a:	2200      	movs	r2, #0
 800493c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800493e:	4b33      	ldr	r3, [pc, #204]	; (8004a0c <HAL_UART_MspInit+0x1a0>)
 8004940:	2200      	movs	r2, #0
 8004942:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004944:	4b31      	ldr	r3, [pc, #196]	; (8004a0c <HAL_UART_MspInit+0x1a0>)
 8004946:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800494a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800494c:	4b2f      	ldr	r3, [pc, #188]	; (8004a0c <HAL_UART_MspInit+0x1a0>)
 800494e:	2200      	movs	r2, #0
 8004950:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004952:	4b2e      	ldr	r3, [pc, #184]	; (8004a0c <HAL_UART_MspInit+0x1a0>)
 8004954:	2200      	movs	r2, #0
 8004956:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004958:	4b2c      	ldr	r3, [pc, #176]	; (8004a0c <HAL_UART_MspInit+0x1a0>)
 800495a:	2200      	movs	r2, #0
 800495c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800495e:	4b2b      	ldr	r3, [pc, #172]	; (8004a0c <HAL_UART_MspInit+0x1a0>)
 8004960:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004964:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004966:	4b29      	ldr	r3, [pc, #164]	; (8004a0c <HAL_UART_MspInit+0x1a0>)
 8004968:	2200      	movs	r2, #0
 800496a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800496c:	4827      	ldr	r0, [pc, #156]	; (8004a0c <HAL_UART_MspInit+0x1a0>)
 800496e:	f000 fb55 	bl	800501c <HAL_DMA_Init>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8004978:	f7fd f8b0 	bl	8001adc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a23      	ldr	r2, [pc, #140]	; (8004a0c <HAL_UART_MspInit+0x1a0>)
 8004980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004984:	4a21      	ldr	r2, [pc, #132]	; (8004a0c <HAL_UART_MspInit+0x1a0>)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 800498a:	4b22      	ldr	r3, [pc, #136]	; (8004a14 <HAL_UART_MspInit+0x1a8>)
 800498c:	4a22      	ldr	r2, [pc, #136]	; (8004a18 <HAL_UART_MspInit+0x1ac>)
 800498e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8004990:	4b20      	ldr	r3, [pc, #128]	; (8004a14 <HAL_UART_MspInit+0x1a8>)
 8004992:	222e      	movs	r2, #46	; 0x2e
 8004994:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004996:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <HAL_UART_MspInit+0x1a8>)
 8004998:	2240      	movs	r2, #64	; 0x40
 800499a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800499c:	4b1d      	ldr	r3, [pc, #116]	; (8004a14 <HAL_UART_MspInit+0x1a8>)
 800499e:	2200      	movs	r2, #0
 80049a0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049a2:	4b1c      	ldr	r3, [pc, #112]	; (8004a14 <HAL_UART_MspInit+0x1a8>)
 80049a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049a8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049aa:	4b1a      	ldr	r3, [pc, #104]	; (8004a14 <HAL_UART_MspInit+0x1a8>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049b0:	4b18      	ldr	r3, [pc, #96]	; (8004a14 <HAL_UART_MspInit+0x1a8>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80049b6:	4b17      	ldr	r3, [pc, #92]	; (8004a14 <HAL_UART_MspInit+0x1a8>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80049bc:	4b15      	ldr	r3, [pc, #84]	; (8004a14 <HAL_UART_MspInit+0x1a8>)
 80049be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049c2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049c4:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <HAL_UART_MspInit+0x1a8>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80049ca:	4812      	ldr	r0, [pc, #72]	; (8004a14 <HAL_UART_MspInit+0x1a8>)
 80049cc:	f000 fb26 	bl	800501c <HAL_DMA_Init>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 80049d6:	f7fd f881 	bl	8001adc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a0d      	ldr	r2, [pc, #52]	; (8004a14 <HAL_UART_MspInit+0x1a8>)
 80049de:	67da      	str	r2, [r3, #124]	; 0x7c
 80049e0:	4a0c      	ldr	r2, [pc, #48]	; (8004a14 <HAL_UART_MspInit+0x1a8>)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80049e6:	2200      	movs	r2, #0
 80049e8:	2100      	movs	r1, #0
 80049ea:	2027      	movs	r0, #39	; 0x27
 80049ec:	f000 fae1 	bl	8004fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80049f0:	2027      	movs	r0, #39	; 0x27
 80049f2:	f000 faf8 	bl	8004fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80049f6:	bf00      	nop
 80049f8:	37e0      	adds	r7, #224	; 0xe0
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40004800 	.word	0x40004800
 8004a04:	58024400 	.word	0x58024400
 8004a08:	58020800 	.word	0x58020800
 8004a0c:	24000344 	.word	0x24000344
 8004a10:	40020010 	.word	0x40020010
 8004a14:	240003bc 	.word	0x240003bc
 8004a18:	40020028 	.word	0x40020028

08004a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a20:	e7fe      	b.n	8004a20 <NMI_Handler+0x4>

08004a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a22:	b480      	push	{r7}
 8004a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a26:	e7fe      	b.n	8004a26 <HardFault_Handler+0x4>

08004a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a2c:	e7fe      	b.n	8004a2c <MemManage_Handler+0x4>

08004a2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a32:	e7fe      	b.n	8004a32 <BusFault_Handler+0x4>

08004a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a38:	e7fe      	b.n	8004a38 <UsageFault_Handler+0x4>

08004a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a3e:	bf00      	nop
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a4c:	bf00      	nop
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a56:	b480      	push	{r7}
 8004a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a5a:	bf00      	nop
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a68:	f000 f9a8 	bl	8004dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a6c:	bf00      	nop
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004a84:	4802      	ldr	r0, [pc, #8]	; (8004a90 <DMA1_Stream0_IRQHandler+0x10>)
 8004a86:	f001 fdf1 	bl	800666c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004a8a:	bf00      	nop
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	24000344 	.word	0x24000344

08004a94 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004a98:	4802      	ldr	r0, [pc, #8]	; (8004aa4 <DMA1_Stream1_IRQHandler+0x10>)
 8004a9a:	f001 fde7 	bl	800666c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004a9e:	bf00      	nop
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	240003bc 	.word	0x240003bc

08004aa8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004aac:	4802      	ldr	r0, [pc, #8]	; (8004ab8 <TIM3_IRQHandler+0x10>)
 8004aae:	f006 fb99 	bl	800b1e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	24000134 	.word	0x24000134

08004abc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004ac0:	4802      	ldr	r0, [pc, #8]	; (8004acc <USART3_IRQHandler+0x10>)
 8004ac2:	f007 fd99 	bl	800c5f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004ac6:	bf00      	nop
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	240002b0 	.word	0x240002b0

08004ad0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004ad4:	4802      	ldr	r0, [pc, #8]	; (8004ae0 <TIM5_IRQHandler+0x10>)
 8004ad6:	f006 fb85 	bl	800b1e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004ada:	bf00      	nop
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	240001cc 	.word	0x240001cc

08004ae4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  return 1;
 8004ae8:	2301      	movs	r3, #1
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <_kill>:

int _kill(int pid, int sig)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004afe:	f009 fd97 	bl	800e630 <__errno>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2216      	movs	r2, #22
 8004b06:	601a      	str	r2, [r3, #0]
  return -1;
 8004b08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <_exit>:

void _exit (int status)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7ff ffe7 	bl	8004af4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b26:	e7fe      	b.n	8004b26 <_exit+0x12>

08004b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b30:	4a14      	ldr	r2, [pc, #80]	; (8004b84 <_sbrk+0x5c>)
 8004b32:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <_sbrk+0x60>)
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b3c:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <_sbrk+0x64>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d102      	bne.n	8004b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b44:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <_sbrk+0x64>)
 8004b46:	4a12      	ldr	r2, [pc, #72]	; (8004b90 <_sbrk+0x68>)
 8004b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b4a:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <_sbrk+0x64>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4413      	add	r3, r2
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d207      	bcs.n	8004b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b58:	f009 fd6a 	bl	800e630 <__errno>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	220c      	movs	r2, #12
 8004b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b62:	f04f 33ff 	mov.w	r3, #4294967295
 8004b66:	e009      	b.n	8004b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b68:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <_sbrk+0x64>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b6e:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <_sbrk+0x64>)
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4413      	add	r3, r2
 8004b76:	4a05      	ldr	r2, [pc, #20]	; (8004b8c <_sbrk+0x64>)
 8004b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	24050000 	.word	0x24050000
 8004b88:	00000400 	.word	0x00000400
 8004b8c:	24000f98 	.word	0x24000f98
 8004b90:	24000fb0 	.word	0x24000fb0

08004b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004b98:	4b32      	ldr	r3, [pc, #200]	; (8004c64 <SystemInit+0xd0>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	4a31      	ldr	r2, [pc, #196]	; (8004c64 <SystemInit+0xd0>)
 8004ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004ba8:	4b2f      	ldr	r3, [pc, #188]	; (8004c68 <SystemInit+0xd4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 030f 	and.w	r3, r3, #15
 8004bb0:	2b06      	cmp	r3, #6
 8004bb2:	d807      	bhi.n	8004bc4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004bb4:	4b2c      	ldr	r3, [pc, #176]	; (8004c68 <SystemInit+0xd4>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f023 030f 	bic.w	r3, r3, #15
 8004bbc:	4a2a      	ldr	r2, [pc, #168]	; (8004c68 <SystemInit+0xd4>)
 8004bbe:	f043 0307 	orr.w	r3, r3, #7
 8004bc2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004bc4:	4b29      	ldr	r3, [pc, #164]	; (8004c6c <SystemInit+0xd8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a28      	ldr	r2, [pc, #160]	; (8004c6c <SystemInit+0xd8>)
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004bd0:	4b26      	ldr	r3, [pc, #152]	; (8004c6c <SystemInit+0xd8>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004bd6:	4b25      	ldr	r3, [pc, #148]	; (8004c6c <SystemInit+0xd8>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	4924      	ldr	r1, [pc, #144]	; (8004c6c <SystemInit+0xd8>)
 8004bdc:	4b24      	ldr	r3, [pc, #144]	; (8004c70 <SystemInit+0xdc>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004be2:	4b21      	ldr	r3, [pc, #132]	; (8004c68 <SystemInit+0xd4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d007      	beq.n	8004bfe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004bee:	4b1e      	ldr	r3, [pc, #120]	; (8004c68 <SystemInit+0xd4>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f023 030f 	bic.w	r3, r3, #15
 8004bf6:	4a1c      	ldr	r2, [pc, #112]	; (8004c68 <SystemInit+0xd4>)
 8004bf8:	f043 0307 	orr.w	r3, r3, #7
 8004bfc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004bfe:	4b1b      	ldr	r3, [pc, #108]	; (8004c6c <SystemInit+0xd8>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004c04:	4b19      	ldr	r3, [pc, #100]	; (8004c6c <SystemInit+0xd8>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004c0a:	4b18      	ldr	r3, [pc, #96]	; (8004c6c <SystemInit+0xd8>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004c10:	4b16      	ldr	r3, [pc, #88]	; (8004c6c <SystemInit+0xd8>)
 8004c12:	4a18      	ldr	r2, [pc, #96]	; (8004c74 <SystemInit+0xe0>)
 8004c14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004c16:	4b15      	ldr	r3, [pc, #84]	; (8004c6c <SystemInit+0xd8>)
 8004c18:	4a17      	ldr	r2, [pc, #92]	; (8004c78 <SystemInit+0xe4>)
 8004c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004c1c:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <SystemInit+0xd8>)
 8004c1e:	4a17      	ldr	r2, [pc, #92]	; (8004c7c <SystemInit+0xe8>)
 8004c20:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004c22:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <SystemInit+0xd8>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004c28:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <SystemInit+0xd8>)
 8004c2a:	4a14      	ldr	r2, [pc, #80]	; (8004c7c <SystemInit+0xe8>)
 8004c2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004c2e:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <SystemInit+0xd8>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004c34:	4b0d      	ldr	r3, [pc, #52]	; (8004c6c <SystemInit+0xd8>)
 8004c36:	4a11      	ldr	r2, [pc, #68]	; (8004c7c <SystemInit+0xe8>)
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004c3a:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <SystemInit+0xd8>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004c40:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <SystemInit+0xd8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a09      	ldr	r2, [pc, #36]	; (8004c6c <SystemInit+0xd8>)
 8004c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004c4c:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <SystemInit+0xd8>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004c52:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <SystemInit+0xec>)
 8004c54:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004c58:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004c5a:	bf00      	nop
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	e000ed00 	.word	0xe000ed00
 8004c68:	52002000 	.word	0x52002000
 8004c6c:	58024400 	.word	0x58024400
 8004c70:	eaf6ed7f 	.word	0xeaf6ed7f
 8004c74:	02020200 	.word	0x02020200
 8004c78:	01ff0000 	.word	0x01ff0000
 8004c7c:	01010280 	.word	0x01010280
 8004c80:	52004000 	.word	0x52004000

08004c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004c88:	f7ff ff84 	bl	8004b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c8c:	480c      	ldr	r0, [pc, #48]	; (8004cc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004c8e:	490d      	ldr	r1, [pc, #52]	; (8004cc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004c90:	4a0d      	ldr	r2, [pc, #52]	; (8004cc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c94:	e002      	b.n	8004c9c <LoopCopyDataInit>

08004c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c9a:	3304      	adds	r3, #4

08004c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ca0:	d3f9      	bcc.n	8004c96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ca2:	4a0a      	ldr	r2, [pc, #40]	; (8004ccc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004ca4:	4c0a      	ldr	r4, [pc, #40]	; (8004cd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ca8:	e001      	b.n	8004cae <LoopFillZerobss>

08004caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cac:	3204      	adds	r2, #4

08004cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cb0:	d3fb      	bcc.n	8004caa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004cb2:	f009 fcc3 	bl	800e63c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cb6:	f7fb fce3 	bl	8000680 <main>
  bx  lr
 8004cba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004cbc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004cc0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004cc4:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 8004cc8:	0800ecec 	.word	0x0800ecec
  ldr r2, =_sbss
 8004ccc:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8004cd0:	24000fb0 	.word	0x24000fb0

08004cd4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004cd4:	e7fe      	b.n	8004cd4 <ADC3_IRQHandler>
	...

08004cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cde:	2003      	movs	r0, #3
 8004ce0:	f000 f95c 	bl	8004f9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ce4:	f003 ff60 	bl	8008ba8 <HAL_RCC_GetSysClockFreq>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	4b15      	ldr	r3, [pc, #84]	; (8004d40 <HAL_Init+0x68>)
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	0a1b      	lsrs	r3, r3, #8
 8004cf0:	f003 030f 	and.w	r3, r3, #15
 8004cf4:	4913      	ldr	r1, [pc, #76]	; (8004d44 <HAL_Init+0x6c>)
 8004cf6:	5ccb      	ldrb	r3, [r1, r3]
 8004cf8:	f003 031f 	and.w	r3, r3, #31
 8004cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004d00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d02:	4b0f      	ldr	r3, [pc, #60]	; (8004d40 <HAL_Init+0x68>)
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f003 030f 	and.w	r3, r3, #15
 8004d0a:	4a0e      	ldr	r2, [pc, #56]	; (8004d44 <HAL_Init+0x6c>)
 8004d0c:	5cd3      	ldrb	r3, [r2, r3]
 8004d0e:	f003 031f 	and.w	r3, r3, #31
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	fa22 f303 	lsr.w	r3, r2, r3
 8004d18:	4a0b      	ldr	r2, [pc, #44]	; (8004d48 <HAL_Init+0x70>)
 8004d1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d1c:	4a0b      	ldr	r2, [pc, #44]	; (8004d4c <HAL_Init+0x74>)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d22:	200f      	movs	r0, #15
 8004d24:	f000 f814 	bl	8004d50 <HAL_InitTick>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e002      	b.n	8004d38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004d32:	f7ff fbdd 	bl	80044f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	58024400 	.word	0x58024400
 8004d44:	0800ec98 	.word	0x0800ec98
 8004d48:	2400000c 	.word	0x2400000c
 8004d4c:	24000008 	.word	0x24000008

08004d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004d58:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <HAL_InitTick+0x60>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e021      	b.n	8004da8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004d64:	4b13      	ldr	r3, [pc, #76]	; (8004db4 <HAL_InitTick+0x64>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	4b11      	ldr	r3, [pc, #68]	; (8004db0 <HAL_InitTick+0x60>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 f941 	bl	8005002 <HAL_SYSTICK_Config>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e00e      	b.n	8004da8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b0f      	cmp	r3, #15
 8004d8e:	d80a      	bhi.n	8004da6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d90:	2200      	movs	r2, #0
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295
 8004d98:	f000 f90b 	bl	8004fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d9c:	4a06      	ldr	r2, [pc, #24]	; (8004db8 <HAL_InitTick+0x68>)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	e000      	b.n	8004da8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	24000014 	.word	0x24000014
 8004db4:	24000008 	.word	0x24000008
 8004db8:	24000010 	.word	0x24000010

08004dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <HAL_IncTick+0x20>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <HAL_IncTick+0x24>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4413      	add	r3, r2
 8004dcc:	4a04      	ldr	r2, [pc, #16]	; (8004de0 <HAL_IncTick+0x24>)
 8004dce:	6013      	str	r3, [r2, #0]
}
 8004dd0:	bf00      	nop
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	24000014 	.word	0x24000014
 8004de0:	24000f9c 	.word	0x24000f9c

08004de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
  return uwTick;
 8004de8:	4b03      	ldr	r3, [pc, #12]	; (8004df8 <HAL_GetTick+0x14>)
 8004dea:	681b      	ldr	r3, [r3, #0]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	24000f9c 	.word	0x24000f9c

08004dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <__NVIC_SetPriorityGrouping+0x40>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e18:	4013      	ands	r3, r2
 8004e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e24:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <__NVIC_SetPriorityGrouping+0x44>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e2a:	4a04      	ldr	r2, [pc, #16]	; (8004e3c <__NVIC_SetPriorityGrouping+0x40>)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	60d3      	str	r3, [r2, #12]
}
 8004e30:	bf00      	nop
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	e000ed00 	.word	0xe000ed00
 8004e40:	05fa0000 	.word	0x05fa0000

08004e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e48:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <__NVIC_GetPriorityGrouping+0x18>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	0a1b      	lsrs	r3, r3, #8
 8004e4e:	f003 0307 	and.w	r3, r3, #7
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	e000ed00 	.word	0xe000ed00

08004e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4603      	mov	r3, r0
 8004e68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	db0b      	blt.n	8004e8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e72:	88fb      	ldrh	r3, [r7, #6]
 8004e74:	f003 021f 	and.w	r2, r3, #31
 8004e78:	4907      	ldr	r1, [pc, #28]	; (8004e98 <__NVIC_EnableIRQ+0x38>)
 8004e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	2001      	movs	r0, #1
 8004e82:	fa00 f202 	lsl.w	r2, r0, r2
 8004e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	e000e100 	.word	0xe000e100

08004e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	6039      	str	r1, [r7, #0]
 8004ea6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ea8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	db0a      	blt.n	8004ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	490c      	ldr	r1, [pc, #48]	; (8004ee8 <__NVIC_SetPriority+0x4c>)
 8004eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eba:	0112      	lsls	r2, r2, #4
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ec4:	e00a      	b.n	8004edc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	4908      	ldr	r1, [pc, #32]	; (8004eec <__NVIC_SetPriority+0x50>)
 8004ecc:	88fb      	ldrh	r3, [r7, #6]
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	3b04      	subs	r3, #4
 8004ed4:	0112      	lsls	r2, r2, #4
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	440b      	add	r3, r1
 8004eda:	761a      	strb	r2, [r3, #24]
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	e000e100 	.word	0xe000e100
 8004eec:	e000ed00 	.word	0xe000ed00

08004ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b089      	sub	sp, #36	; 0x24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f1c3 0307 	rsb	r3, r3, #7
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	bf28      	it	cs
 8004f0e:	2304      	movcs	r3, #4
 8004f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	3304      	adds	r3, #4
 8004f16:	2b06      	cmp	r3, #6
 8004f18:	d902      	bls.n	8004f20 <NVIC_EncodePriority+0x30>
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	3b03      	subs	r3, #3
 8004f1e:	e000      	b.n	8004f22 <NVIC_EncodePriority+0x32>
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f24:	f04f 32ff 	mov.w	r2, #4294967295
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	43da      	mvns	r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	401a      	ands	r2, r3
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f38:	f04f 31ff 	mov.w	r1, #4294967295
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f42:	43d9      	mvns	r1, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f48:	4313      	orrs	r3, r2
         );
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3724      	adds	r7, #36	; 0x24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
	...

08004f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f68:	d301      	bcc.n	8004f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e00f      	b.n	8004f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f6e:	4a0a      	ldr	r2, [pc, #40]	; (8004f98 <SysTick_Config+0x40>)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f76:	210f      	movs	r1, #15
 8004f78:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7c:	f7ff ff8e 	bl	8004e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f80:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <SysTick_Config+0x40>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f86:	4b04      	ldr	r3, [pc, #16]	; (8004f98 <SysTick_Config+0x40>)
 8004f88:	2207      	movs	r2, #7
 8004f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	e000e010 	.word	0xe000e010

08004f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7ff ff29 	bl	8004dfc <__NVIC_SetPriorityGrouping>
}
 8004faa:	bf00      	nop
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b086      	sub	sp, #24
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	4603      	mov	r3, r0
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	607a      	str	r2, [r7, #4]
 8004fbe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004fc0:	f7ff ff40 	bl	8004e44 <__NVIC_GetPriorityGrouping>
 8004fc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	6978      	ldr	r0, [r7, #20]
 8004fcc:	f7ff ff90 	bl	8004ef0 <NVIC_EncodePriority>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff ff5f 	bl	8004e9c <__NVIC_SetPriority>
}
 8004fde:	bf00      	nop
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b082      	sub	sp, #8
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	4603      	mov	r3, r0
 8004fee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ff0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff ff33 	bl	8004e60 <__NVIC_EnableIRQ>
}
 8004ffa:	bf00      	nop
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b082      	sub	sp, #8
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7ff ffa4 	bl	8004f58 <SysTick_Config>
 8005010:	4603      	mov	r3, r0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005024:	f7ff fede 	bl	8004de4 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e314      	b.n	800565e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a66      	ldr	r2, [pc, #408]	; (80051d4 <HAL_DMA_Init+0x1b8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d04a      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a65      	ldr	r2, [pc, #404]	; (80051d8 <HAL_DMA_Init+0x1bc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d045      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a63      	ldr	r2, [pc, #396]	; (80051dc <HAL_DMA_Init+0x1c0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d040      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a62      	ldr	r2, [pc, #392]	; (80051e0 <HAL_DMA_Init+0x1c4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d03b      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a60      	ldr	r2, [pc, #384]	; (80051e4 <HAL_DMA_Init+0x1c8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d036      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a5f      	ldr	r2, [pc, #380]	; (80051e8 <HAL_DMA_Init+0x1cc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d031      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a5d      	ldr	r2, [pc, #372]	; (80051ec <HAL_DMA_Init+0x1d0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d02c      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a5c      	ldr	r2, [pc, #368]	; (80051f0 <HAL_DMA_Init+0x1d4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d027      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a5a      	ldr	r2, [pc, #360]	; (80051f4 <HAL_DMA_Init+0x1d8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d022      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a59      	ldr	r2, [pc, #356]	; (80051f8 <HAL_DMA_Init+0x1dc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d01d      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a57      	ldr	r2, [pc, #348]	; (80051fc <HAL_DMA_Init+0x1e0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d018      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a56      	ldr	r2, [pc, #344]	; (8005200 <HAL_DMA_Init+0x1e4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d013      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a54      	ldr	r2, [pc, #336]	; (8005204 <HAL_DMA_Init+0x1e8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d00e      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a53      	ldr	r2, [pc, #332]	; (8005208 <HAL_DMA_Init+0x1ec>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d009      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a51      	ldr	r2, [pc, #324]	; (800520c <HAL_DMA_Init+0x1f0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d004      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a50      	ldr	r2, [pc, #320]	; (8005210 <HAL_DMA_Init+0x1f4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d101      	bne.n	80050d8 <HAL_DMA_Init+0xbc>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e000      	b.n	80050da <HAL_DMA_Init+0xbe>
 80050d8:	2300      	movs	r3, #0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 813c 	beq.w	8005358 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a37      	ldr	r2, [pc, #220]	; (80051d4 <HAL_DMA_Init+0x1b8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d04a      	beq.n	8005190 <HAL_DMA_Init+0x174>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a36      	ldr	r2, [pc, #216]	; (80051d8 <HAL_DMA_Init+0x1bc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d045      	beq.n	8005190 <HAL_DMA_Init+0x174>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a34      	ldr	r2, [pc, #208]	; (80051dc <HAL_DMA_Init+0x1c0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d040      	beq.n	8005190 <HAL_DMA_Init+0x174>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a33      	ldr	r2, [pc, #204]	; (80051e0 <HAL_DMA_Init+0x1c4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d03b      	beq.n	8005190 <HAL_DMA_Init+0x174>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a31      	ldr	r2, [pc, #196]	; (80051e4 <HAL_DMA_Init+0x1c8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d036      	beq.n	8005190 <HAL_DMA_Init+0x174>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a30      	ldr	r2, [pc, #192]	; (80051e8 <HAL_DMA_Init+0x1cc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d031      	beq.n	8005190 <HAL_DMA_Init+0x174>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a2e      	ldr	r2, [pc, #184]	; (80051ec <HAL_DMA_Init+0x1d0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d02c      	beq.n	8005190 <HAL_DMA_Init+0x174>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a2d      	ldr	r2, [pc, #180]	; (80051f0 <HAL_DMA_Init+0x1d4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d027      	beq.n	8005190 <HAL_DMA_Init+0x174>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a2b      	ldr	r2, [pc, #172]	; (80051f4 <HAL_DMA_Init+0x1d8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d022      	beq.n	8005190 <HAL_DMA_Init+0x174>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2a      	ldr	r2, [pc, #168]	; (80051f8 <HAL_DMA_Init+0x1dc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d01d      	beq.n	8005190 <HAL_DMA_Init+0x174>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a28      	ldr	r2, [pc, #160]	; (80051fc <HAL_DMA_Init+0x1e0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d018      	beq.n	8005190 <HAL_DMA_Init+0x174>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a27      	ldr	r2, [pc, #156]	; (8005200 <HAL_DMA_Init+0x1e4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d013      	beq.n	8005190 <HAL_DMA_Init+0x174>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a25      	ldr	r2, [pc, #148]	; (8005204 <HAL_DMA_Init+0x1e8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00e      	beq.n	8005190 <HAL_DMA_Init+0x174>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a24      	ldr	r2, [pc, #144]	; (8005208 <HAL_DMA_Init+0x1ec>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d009      	beq.n	8005190 <HAL_DMA_Init+0x174>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a22      	ldr	r2, [pc, #136]	; (800520c <HAL_DMA_Init+0x1f0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d004      	beq.n	8005190 <HAL_DMA_Init+0x174>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a21      	ldr	r2, [pc, #132]	; (8005210 <HAL_DMA_Init+0x1f4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d108      	bne.n	80051a2 <HAL_DMA_Init+0x186>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0201 	bic.w	r2, r2, #1
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	e007      	b.n	80051b2 <HAL_DMA_Init+0x196>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0201 	bic.w	r2, r2, #1
 80051b0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051b2:	e02f      	b.n	8005214 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051b4:	f7ff fe16 	bl	8004de4 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b05      	cmp	r3, #5
 80051c0:	d928      	bls.n	8005214 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2220      	movs	r2, #32
 80051c6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2203      	movs	r2, #3
 80051cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e244      	b.n	800565e <HAL_DMA_Init+0x642>
 80051d4:	40020010 	.word	0x40020010
 80051d8:	40020028 	.word	0x40020028
 80051dc:	40020040 	.word	0x40020040
 80051e0:	40020058 	.word	0x40020058
 80051e4:	40020070 	.word	0x40020070
 80051e8:	40020088 	.word	0x40020088
 80051ec:	400200a0 	.word	0x400200a0
 80051f0:	400200b8 	.word	0x400200b8
 80051f4:	40020410 	.word	0x40020410
 80051f8:	40020428 	.word	0x40020428
 80051fc:	40020440 	.word	0x40020440
 8005200:	40020458 	.word	0x40020458
 8005204:	40020470 	.word	0x40020470
 8005208:	40020488 	.word	0x40020488
 800520c:	400204a0 	.word	0x400204a0
 8005210:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1c8      	bne.n	80051b4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4b84      	ldr	r3, [pc, #528]	; (8005440 <HAL_DMA_Init+0x424>)
 800522e:	4013      	ands	r3, r2
 8005230:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800523a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005246:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005252:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	4313      	orrs	r3, r2
 800525e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	2b04      	cmp	r3, #4
 8005266:	d107      	bne.n	8005278 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005270:	4313      	orrs	r3, r2
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2b28      	cmp	r3, #40	; 0x28
 800527e:	d903      	bls.n	8005288 <HAL_DMA_Init+0x26c>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2b2e      	cmp	r3, #46	; 0x2e
 8005286:	d91f      	bls.n	80052c8 <HAL_DMA_Init+0x2ac>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2b3e      	cmp	r3, #62	; 0x3e
 800528e:	d903      	bls.n	8005298 <HAL_DMA_Init+0x27c>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	2b42      	cmp	r3, #66	; 0x42
 8005296:	d917      	bls.n	80052c8 <HAL_DMA_Init+0x2ac>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2b46      	cmp	r3, #70	; 0x46
 800529e:	d903      	bls.n	80052a8 <HAL_DMA_Init+0x28c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b48      	cmp	r3, #72	; 0x48
 80052a6:	d90f      	bls.n	80052c8 <HAL_DMA_Init+0x2ac>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	2b4e      	cmp	r3, #78	; 0x4e
 80052ae:	d903      	bls.n	80052b8 <HAL_DMA_Init+0x29c>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b52      	cmp	r3, #82	; 0x52
 80052b6:	d907      	bls.n	80052c8 <HAL_DMA_Init+0x2ac>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b73      	cmp	r3, #115	; 0x73
 80052be:	d905      	bls.n	80052cc <HAL_DMA_Init+0x2b0>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b77      	cmp	r3, #119	; 0x77
 80052c6:	d801      	bhi.n	80052cc <HAL_DMA_Init+0x2b0>
 80052c8:	2301      	movs	r3, #1
 80052ca:	e000      	b.n	80052ce <HAL_DMA_Init+0x2b2>
 80052cc:	2300      	movs	r3, #0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052d8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f023 0307 	bic.w	r3, r3, #7
 80052f0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	2b04      	cmp	r3, #4
 8005302:	d117      	bne.n	8005334 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00e      	beq.n	8005334 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f002 fb30 	bl	800797c <DMA_CheckFifoParam>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d008      	beq.n	8005334 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2240      	movs	r2, #64	; 0x40
 8005326:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e194      	b.n	800565e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f002 fa6b 	bl	8007818 <DMA_CalcBaseAndBitshift>
 8005342:	4603      	mov	r3, r0
 8005344:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800534a:	f003 031f 	and.w	r3, r3, #31
 800534e:	223f      	movs	r2, #63	; 0x3f
 8005350:	409a      	lsls	r2, r3
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	609a      	str	r2, [r3, #8]
 8005356:	e0ca      	b.n	80054ee <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a39      	ldr	r2, [pc, #228]	; (8005444 <HAL_DMA_Init+0x428>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d022      	beq.n	80053a8 <HAL_DMA_Init+0x38c>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a38      	ldr	r2, [pc, #224]	; (8005448 <HAL_DMA_Init+0x42c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d01d      	beq.n	80053a8 <HAL_DMA_Init+0x38c>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a36      	ldr	r2, [pc, #216]	; (800544c <HAL_DMA_Init+0x430>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d018      	beq.n	80053a8 <HAL_DMA_Init+0x38c>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a35      	ldr	r2, [pc, #212]	; (8005450 <HAL_DMA_Init+0x434>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d013      	beq.n	80053a8 <HAL_DMA_Init+0x38c>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a33      	ldr	r2, [pc, #204]	; (8005454 <HAL_DMA_Init+0x438>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00e      	beq.n	80053a8 <HAL_DMA_Init+0x38c>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a32      	ldr	r2, [pc, #200]	; (8005458 <HAL_DMA_Init+0x43c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d009      	beq.n	80053a8 <HAL_DMA_Init+0x38c>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a30      	ldr	r2, [pc, #192]	; (800545c <HAL_DMA_Init+0x440>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d004      	beq.n	80053a8 <HAL_DMA_Init+0x38c>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a2f      	ldr	r2, [pc, #188]	; (8005460 <HAL_DMA_Init+0x444>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d101      	bne.n	80053ac <HAL_DMA_Init+0x390>
 80053a8:	2301      	movs	r3, #1
 80053aa:	e000      	b.n	80053ae <HAL_DMA_Init+0x392>
 80053ac:	2300      	movs	r3, #0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 8094 	beq.w	80054dc <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a22      	ldr	r2, [pc, #136]	; (8005444 <HAL_DMA_Init+0x428>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d021      	beq.n	8005402 <HAL_DMA_Init+0x3e6>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a21      	ldr	r2, [pc, #132]	; (8005448 <HAL_DMA_Init+0x42c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d01c      	beq.n	8005402 <HAL_DMA_Init+0x3e6>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1f      	ldr	r2, [pc, #124]	; (800544c <HAL_DMA_Init+0x430>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d017      	beq.n	8005402 <HAL_DMA_Init+0x3e6>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a1e      	ldr	r2, [pc, #120]	; (8005450 <HAL_DMA_Init+0x434>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d012      	beq.n	8005402 <HAL_DMA_Init+0x3e6>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1c      	ldr	r2, [pc, #112]	; (8005454 <HAL_DMA_Init+0x438>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00d      	beq.n	8005402 <HAL_DMA_Init+0x3e6>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a1b      	ldr	r2, [pc, #108]	; (8005458 <HAL_DMA_Init+0x43c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d008      	beq.n	8005402 <HAL_DMA_Init+0x3e6>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a19      	ldr	r2, [pc, #100]	; (800545c <HAL_DMA_Init+0x440>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <HAL_DMA_Init+0x3e6>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a18      	ldr	r2, [pc, #96]	; (8005460 <HAL_DMA_Init+0x444>)
 8005400:	4293      	cmp	r3, r2
 8005402:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	4b11      	ldr	r3, [pc, #68]	; (8005464 <HAL_DMA_Init+0x448>)
 8005420:	4013      	ands	r3, r2
 8005422:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	2b40      	cmp	r3, #64	; 0x40
 800542a:	d01d      	beq.n	8005468 <HAL_DMA_Init+0x44c>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	2b80      	cmp	r3, #128	; 0x80
 8005432:	d102      	bne.n	800543a <HAL_DMA_Init+0x41e>
 8005434:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005438:	e017      	b.n	800546a <HAL_DMA_Init+0x44e>
 800543a:	2300      	movs	r3, #0
 800543c:	e015      	b.n	800546a <HAL_DMA_Init+0x44e>
 800543e:	bf00      	nop
 8005440:	fe10803f 	.word	0xfe10803f
 8005444:	58025408 	.word	0x58025408
 8005448:	5802541c 	.word	0x5802541c
 800544c:	58025430 	.word	0x58025430
 8005450:	58025444 	.word	0x58025444
 8005454:	58025458 	.word	0x58025458
 8005458:	5802546c 	.word	0x5802546c
 800545c:	58025480 	.word	0x58025480
 8005460:	58025494 	.word	0x58025494
 8005464:	fffe000f 	.word	0xfffe000f
 8005468:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	68d2      	ldr	r2, [r2, #12]
 800546e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005470:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005478:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005480:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005488:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005490:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005498:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	461a      	mov	r2, r3
 80054ae:	4b6e      	ldr	r3, [pc, #440]	; (8005668 <HAL_DMA_Init+0x64c>)
 80054b0:	4413      	add	r3, r2
 80054b2:	4a6e      	ldr	r2, [pc, #440]	; (800566c <HAL_DMA_Init+0x650>)
 80054b4:	fba2 2303 	umull	r2, r3, r2, r3
 80054b8:	091b      	lsrs	r3, r3, #4
 80054ba:	009a      	lsls	r2, r3, #2
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f002 f9a9 	bl	8007818 <DMA_CalcBaseAndBitshift>
 80054c6:	4603      	mov	r3, r0
 80054c8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ce:	f003 031f 	and.w	r3, r3, #31
 80054d2:	2201      	movs	r2, #1
 80054d4:	409a      	lsls	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	605a      	str	r2, [r3, #4]
 80054da:	e008      	b.n	80054ee <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2240      	movs	r2, #64	; 0x40
 80054e0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2203      	movs	r2, #3
 80054e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e0b7      	b.n	800565e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a5f      	ldr	r2, [pc, #380]	; (8005670 <HAL_DMA_Init+0x654>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d072      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a5d      	ldr	r2, [pc, #372]	; (8005674 <HAL_DMA_Init+0x658>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d06d      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a5c      	ldr	r2, [pc, #368]	; (8005678 <HAL_DMA_Init+0x65c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d068      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a5a      	ldr	r2, [pc, #360]	; (800567c <HAL_DMA_Init+0x660>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d063      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a59      	ldr	r2, [pc, #356]	; (8005680 <HAL_DMA_Init+0x664>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d05e      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a57      	ldr	r2, [pc, #348]	; (8005684 <HAL_DMA_Init+0x668>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d059      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a56      	ldr	r2, [pc, #344]	; (8005688 <HAL_DMA_Init+0x66c>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d054      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a54      	ldr	r2, [pc, #336]	; (800568c <HAL_DMA_Init+0x670>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d04f      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a53      	ldr	r2, [pc, #332]	; (8005690 <HAL_DMA_Init+0x674>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d04a      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a51      	ldr	r2, [pc, #324]	; (8005694 <HAL_DMA_Init+0x678>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d045      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a50      	ldr	r2, [pc, #320]	; (8005698 <HAL_DMA_Init+0x67c>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d040      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a4e      	ldr	r2, [pc, #312]	; (800569c <HAL_DMA_Init+0x680>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d03b      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a4d      	ldr	r2, [pc, #308]	; (80056a0 <HAL_DMA_Init+0x684>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d036      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a4b      	ldr	r2, [pc, #300]	; (80056a4 <HAL_DMA_Init+0x688>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d031      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a4a      	ldr	r2, [pc, #296]	; (80056a8 <HAL_DMA_Init+0x68c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d02c      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a48      	ldr	r2, [pc, #288]	; (80056ac <HAL_DMA_Init+0x690>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d027      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a47      	ldr	r2, [pc, #284]	; (80056b0 <HAL_DMA_Init+0x694>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d022      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a45      	ldr	r2, [pc, #276]	; (80056b4 <HAL_DMA_Init+0x698>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d01d      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a44      	ldr	r2, [pc, #272]	; (80056b8 <HAL_DMA_Init+0x69c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d018      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a42      	ldr	r2, [pc, #264]	; (80056bc <HAL_DMA_Init+0x6a0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d013      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a41      	ldr	r2, [pc, #260]	; (80056c0 <HAL_DMA_Init+0x6a4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d00e      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a3f      	ldr	r2, [pc, #252]	; (80056c4 <HAL_DMA_Init+0x6a8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d009      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a3e      	ldr	r2, [pc, #248]	; (80056c8 <HAL_DMA_Init+0x6ac>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d004      	beq.n	80055de <HAL_DMA_Init+0x5c2>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a3c      	ldr	r2, [pc, #240]	; (80056cc <HAL_DMA_Init+0x6b0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d101      	bne.n	80055e2 <HAL_DMA_Init+0x5c6>
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <HAL_DMA_Init+0x5c8>
 80055e2:	2300      	movs	r3, #0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d032      	beq.n	800564e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f002 fa43 	bl	8007a74 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	2b80      	cmp	r3, #128	; 0x80
 80055f4:	d102      	bne.n	80055fc <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005610:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d010      	beq.n	800563c <HAL_DMA_Init+0x620>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2b08      	cmp	r3, #8
 8005620:	d80c      	bhi.n	800563c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f002 fac0 	bl	8007ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005638:	605a      	str	r2, [r3, #4]
 800563a:	e008      	b.n	800564e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	a7fdabf8 	.word	0xa7fdabf8
 800566c:	cccccccd 	.word	0xcccccccd
 8005670:	40020010 	.word	0x40020010
 8005674:	40020028 	.word	0x40020028
 8005678:	40020040 	.word	0x40020040
 800567c:	40020058 	.word	0x40020058
 8005680:	40020070 	.word	0x40020070
 8005684:	40020088 	.word	0x40020088
 8005688:	400200a0 	.word	0x400200a0
 800568c:	400200b8 	.word	0x400200b8
 8005690:	40020410 	.word	0x40020410
 8005694:	40020428 	.word	0x40020428
 8005698:	40020440 	.word	0x40020440
 800569c:	40020458 	.word	0x40020458
 80056a0:	40020470 	.word	0x40020470
 80056a4:	40020488 	.word	0x40020488
 80056a8:	400204a0 	.word	0x400204a0
 80056ac:	400204b8 	.word	0x400204b8
 80056b0:	58025408 	.word	0x58025408
 80056b4:	5802541c 	.word	0x5802541c
 80056b8:	58025430 	.word	0x58025430
 80056bc:	58025444 	.word	0x58025444
 80056c0:	58025458 	.word	0x58025458
 80056c4:	5802546c 	.word	0x5802546c
 80056c8:	58025480 	.word	0x58025480
 80056cc:	58025494 	.word	0x58025494

080056d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e226      	b.n	8005b3a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d101      	bne.n	80056fa <HAL_DMA_Start_IT+0x2a>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e21f      	b.n	8005b3a <HAL_DMA_Start_IT+0x46a>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b01      	cmp	r3, #1
 800570c:	f040 820a 	bne.w	8005b24 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2202      	movs	r2, #2
 8005714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a68      	ldr	r2, [pc, #416]	; (80058c4 <HAL_DMA_Start_IT+0x1f4>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d04a      	beq.n	80057be <HAL_DMA_Start_IT+0xee>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a66      	ldr	r2, [pc, #408]	; (80058c8 <HAL_DMA_Start_IT+0x1f8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d045      	beq.n	80057be <HAL_DMA_Start_IT+0xee>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a65      	ldr	r2, [pc, #404]	; (80058cc <HAL_DMA_Start_IT+0x1fc>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d040      	beq.n	80057be <HAL_DMA_Start_IT+0xee>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a63      	ldr	r2, [pc, #396]	; (80058d0 <HAL_DMA_Start_IT+0x200>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d03b      	beq.n	80057be <HAL_DMA_Start_IT+0xee>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a62      	ldr	r2, [pc, #392]	; (80058d4 <HAL_DMA_Start_IT+0x204>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d036      	beq.n	80057be <HAL_DMA_Start_IT+0xee>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a60      	ldr	r2, [pc, #384]	; (80058d8 <HAL_DMA_Start_IT+0x208>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d031      	beq.n	80057be <HAL_DMA_Start_IT+0xee>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a5f      	ldr	r2, [pc, #380]	; (80058dc <HAL_DMA_Start_IT+0x20c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d02c      	beq.n	80057be <HAL_DMA_Start_IT+0xee>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a5d      	ldr	r2, [pc, #372]	; (80058e0 <HAL_DMA_Start_IT+0x210>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d027      	beq.n	80057be <HAL_DMA_Start_IT+0xee>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a5c      	ldr	r2, [pc, #368]	; (80058e4 <HAL_DMA_Start_IT+0x214>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d022      	beq.n	80057be <HAL_DMA_Start_IT+0xee>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a5a      	ldr	r2, [pc, #360]	; (80058e8 <HAL_DMA_Start_IT+0x218>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d01d      	beq.n	80057be <HAL_DMA_Start_IT+0xee>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a59      	ldr	r2, [pc, #356]	; (80058ec <HAL_DMA_Start_IT+0x21c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d018      	beq.n	80057be <HAL_DMA_Start_IT+0xee>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a57      	ldr	r2, [pc, #348]	; (80058f0 <HAL_DMA_Start_IT+0x220>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d013      	beq.n	80057be <HAL_DMA_Start_IT+0xee>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a56      	ldr	r2, [pc, #344]	; (80058f4 <HAL_DMA_Start_IT+0x224>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00e      	beq.n	80057be <HAL_DMA_Start_IT+0xee>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a54      	ldr	r2, [pc, #336]	; (80058f8 <HAL_DMA_Start_IT+0x228>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d009      	beq.n	80057be <HAL_DMA_Start_IT+0xee>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a53      	ldr	r2, [pc, #332]	; (80058fc <HAL_DMA_Start_IT+0x22c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d004      	beq.n	80057be <HAL_DMA_Start_IT+0xee>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a51      	ldr	r2, [pc, #324]	; (8005900 <HAL_DMA_Start_IT+0x230>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d108      	bne.n	80057d0 <HAL_DMA_Start_IT+0x100>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 0201 	bic.w	r2, r2, #1
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	e007      	b.n	80057e0 <HAL_DMA_Start_IT+0x110>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0201 	bic.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f001 fe6a 	bl	80074c0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a34      	ldr	r2, [pc, #208]	; (80058c4 <HAL_DMA_Start_IT+0x1f4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d04a      	beq.n	800588c <HAL_DMA_Start_IT+0x1bc>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a33      	ldr	r2, [pc, #204]	; (80058c8 <HAL_DMA_Start_IT+0x1f8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d045      	beq.n	800588c <HAL_DMA_Start_IT+0x1bc>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a31      	ldr	r2, [pc, #196]	; (80058cc <HAL_DMA_Start_IT+0x1fc>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d040      	beq.n	800588c <HAL_DMA_Start_IT+0x1bc>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a30      	ldr	r2, [pc, #192]	; (80058d0 <HAL_DMA_Start_IT+0x200>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d03b      	beq.n	800588c <HAL_DMA_Start_IT+0x1bc>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a2e      	ldr	r2, [pc, #184]	; (80058d4 <HAL_DMA_Start_IT+0x204>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d036      	beq.n	800588c <HAL_DMA_Start_IT+0x1bc>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a2d      	ldr	r2, [pc, #180]	; (80058d8 <HAL_DMA_Start_IT+0x208>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d031      	beq.n	800588c <HAL_DMA_Start_IT+0x1bc>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a2b      	ldr	r2, [pc, #172]	; (80058dc <HAL_DMA_Start_IT+0x20c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d02c      	beq.n	800588c <HAL_DMA_Start_IT+0x1bc>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a2a      	ldr	r2, [pc, #168]	; (80058e0 <HAL_DMA_Start_IT+0x210>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d027      	beq.n	800588c <HAL_DMA_Start_IT+0x1bc>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a28      	ldr	r2, [pc, #160]	; (80058e4 <HAL_DMA_Start_IT+0x214>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d022      	beq.n	800588c <HAL_DMA_Start_IT+0x1bc>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a27      	ldr	r2, [pc, #156]	; (80058e8 <HAL_DMA_Start_IT+0x218>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d01d      	beq.n	800588c <HAL_DMA_Start_IT+0x1bc>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a25      	ldr	r2, [pc, #148]	; (80058ec <HAL_DMA_Start_IT+0x21c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d018      	beq.n	800588c <HAL_DMA_Start_IT+0x1bc>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a24      	ldr	r2, [pc, #144]	; (80058f0 <HAL_DMA_Start_IT+0x220>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d013      	beq.n	800588c <HAL_DMA_Start_IT+0x1bc>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a22      	ldr	r2, [pc, #136]	; (80058f4 <HAL_DMA_Start_IT+0x224>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00e      	beq.n	800588c <HAL_DMA_Start_IT+0x1bc>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a21      	ldr	r2, [pc, #132]	; (80058f8 <HAL_DMA_Start_IT+0x228>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d009      	beq.n	800588c <HAL_DMA_Start_IT+0x1bc>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a1f      	ldr	r2, [pc, #124]	; (80058fc <HAL_DMA_Start_IT+0x22c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d004      	beq.n	800588c <HAL_DMA_Start_IT+0x1bc>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a1e      	ldr	r2, [pc, #120]	; (8005900 <HAL_DMA_Start_IT+0x230>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d101      	bne.n	8005890 <HAL_DMA_Start_IT+0x1c0>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <HAL_DMA_Start_IT+0x1c2>
 8005890:	2300      	movs	r3, #0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d036      	beq.n	8005904 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f023 021e 	bic.w	r2, r3, #30
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0216 	orr.w	r2, r2, #22
 80058a8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d03e      	beq.n	8005930 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f042 0208 	orr.w	r2, r2, #8
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	e035      	b.n	8005930 <HAL_DMA_Start_IT+0x260>
 80058c4:	40020010 	.word	0x40020010
 80058c8:	40020028 	.word	0x40020028
 80058cc:	40020040 	.word	0x40020040
 80058d0:	40020058 	.word	0x40020058
 80058d4:	40020070 	.word	0x40020070
 80058d8:	40020088 	.word	0x40020088
 80058dc:	400200a0 	.word	0x400200a0
 80058e0:	400200b8 	.word	0x400200b8
 80058e4:	40020410 	.word	0x40020410
 80058e8:	40020428 	.word	0x40020428
 80058ec:	40020440 	.word	0x40020440
 80058f0:	40020458 	.word	0x40020458
 80058f4:	40020470 	.word	0x40020470
 80058f8:	40020488 	.word	0x40020488
 80058fc:	400204a0 	.word	0x400204a0
 8005900:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f023 020e 	bic.w	r2, r3, #14
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 020a 	orr.w	r2, r2, #10
 8005916:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d007      	beq.n	8005930 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0204 	orr.w	r2, r2, #4
 800592e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a83      	ldr	r2, [pc, #524]	; (8005b44 <HAL_DMA_Start_IT+0x474>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d072      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a82      	ldr	r2, [pc, #520]	; (8005b48 <HAL_DMA_Start_IT+0x478>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d06d      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a80      	ldr	r2, [pc, #512]	; (8005b4c <HAL_DMA_Start_IT+0x47c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d068      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a7f      	ldr	r2, [pc, #508]	; (8005b50 <HAL_DMA_Start_IT+0x480>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d063      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a7d      	ldr	r2, [pc, #500]	; (8005b54 <HAL_DMA_Start_IT+0x484>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d05e      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a7c      	ldr	r2, [pc, #496]	; (8005b58 <HAL_DMA_Start_IT+0x488>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d059      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a7a      	ldr	r2, [pc, #488]	; (8005b5c <HAL_DMA_Start_IT+0x48c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d054      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a79      	ldr	r2, [pc, #484]	; (8005b60 <HAL_DMA_Start_IT+0x490>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d04f      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a77      	ldr	r2, [pc, #476]	; (8005b64 <HAL_DMA_Start_IT+0x494>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d04a      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a76      	ldr	r2, [pc, #472]	; (8005b68 <HAL_DMA_Start_IT+0x498>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d045      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a74      	ldr	r2, [pc, #464]	; (8005b6c <HAL_DMA_Start_IT+0x49c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d040      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a73      	ldr	r2, [pc, #460]	; (8005b70 <HAL_DMA_Start_IT+0x4a0>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d03b      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a71      	ldr	r2, [pc, #452]	; (8005b74 <HAL_DMA_Start_IT+0x4a4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d036      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a70      	ldr	r2, [pc, #448]	; (8005b78 <HAL_DMA_Start_IT+0x4a8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d031      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a6e      	ldr	r2, [pc, #440]	; (8005b7c <HAL_DMA_Start_IT+0x4ac>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d02c      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a6d      	ldr	r2, [pc, #436]	; (8005b80 <HAL_DMA_Start_IT+0x4b0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d027      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a6b      	ldr	r2, [pc, #428]	; (8005b84 <HAL_DMA_Start_IT+0x4b4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d022      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a6a      	ldr	r2, [pc, #424]	; (8005b88 <HAL_DMA_Start_IT+0x4b8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d01d      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a68      	ldr	r2, [pc, #416]	; (8005b8c <HAL_DMA_Start_IT+0x4bc>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d018      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a67      	ldr	r2, [pc, #412]	; (8005b90 <HAL_DMA_Start_IT+0x4c0>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d013      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a65      	ldr	r2, [pc, #404]	; (8005b94 <HAL_DMA_Start_IT+0x4c4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00e      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a64      	ldr	r2, [pc, #400]	; (8005b98 <HAL_DMA_Start_IT+0x4c8>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d009      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a62      	ldr	r2, [pc, #392]	; (8005b9c <HAL_DMA_Start_IT+0x4cc>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d004      	beq.n	8005a20 <HAL_DMA_Start_IT+0x350>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a61      	ldr	r2, [pc, #388]	; (8005ba0 <HAL_DMA_Start_IT+0x4d0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d101      	bne.n	8005a24 <HAL_DMA_Start_IT+0x354>
 8005a20:	2301      	movs	r3, #1
 8005a22:	e000      	b.n	8005a26 <HAL_DMA_Start_IT+0x356>
 8005a24:	2300      	movs	r3, #0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d01a      	beq.n	8005a60 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d007      	beq.n	8005a48 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a46:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d007      	beq.n	8005a60 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a5e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a37      	ldr	r2, [pc, #220]	; (8005b44 <HAL_DMA_Start_IT+0x474>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d04a      	beq.n	8005b00 <HAL_DMA_Start_IT+0x430>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a36      	ldr	r2, [pc, #216]	; (8005b48 <HAL_DMA_Start_IT+0x478>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d045      	beq.n	8005b00 <HAL_DMA_Start_IT+0x430>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a34      	ldr	r2, [pc, #208]	; (8005b4c <HAL_DMA_Start_IT+0x47c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d040      	beq.n	8005b00 <HAL_DMA_Start_IT+0x430>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a33      	ldr	r2, [pc, #204]	; (8005b50 <HAL_DMA_Start_IT+0x480>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d03b      	beq.n	8005b00 <HAL_DMA_Start_IT+0x430>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a31      	ldr	r2, [pc, #196]	; (8005b54 <HAL_DMA_Start_IT+0x484>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d036      	beq.n	8005b00 <HAL_DMA_Start_IT+0x430>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a30      	ldr	r2, [pc, #192]	; (8005b58 <HAL_DMA_Start_IT+0x488>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d031      	beq.n	8005b00 <HAL_DMA_Start_IT+0x430>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a2e      	ldr	r2, [pc, #184]	; (8005b5c <HAL_DMA_Start_IT+0x48c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d02c      	beq.n	8005b00 <HAL_DMA_Start_IT+0x430>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a2d      	ldr	r2, [pc, #180]	; (8005b60 <HAL_DMA_Start_IT+0x490>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d027      	beq.n	8005b00 <HAL_DMA_Start_IT+0x430>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a2b      	ldr	r2, [pc, #172]	; (8005b64 <HAL_DMA_Start_IT+0x494>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d022      	beq.n	8005b00 <HAL_DMA_Start_IT+0x430>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a2a      	ldr	r2, [pc, #168]	; (8005b68 <HAL_DMA_Start_IT+0x498>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d01d      	beq.n	8005b00 <HAL_DMA_Start_IT+0x430>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a28      	ldr	r2, [pc, #160]	; (8005b6c <HAL_DMA_Start_IT+0x49c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d018      	beq.n	8005b00 <HAL_DMA_Start_IT+0x430>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a27      	ldr	r2, [pc, #156]	; (8005b70 <HAL_DMA_Start_IT+0x4a0>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d013      	beq.n	8005b00 <HAL_DMA_Start_IT+0x430>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a25      	ldr	r2, [pc, #148]	; (8005b74 <HAL_DMA_Start_IT+0x4a4>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d00e      	beq.n	8005b00 <HAL_DMA_Start_IT+0x430>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a24      	ldr	r2, [pc, #144]	; (8005b78 <HAL_DMA_Start_IT+0x4a8>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d009      	beq.n	8005b00 <HAL_DMA_Start_IT+0x430>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a22      	ldr	r2, [pc, #136]	; (8005b7c <HAL_DMA_Start_IT+0x4ac>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d004      	beq.n	8005b00 <HAL_DMA_Start_IT+0x430>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a21      	ldr	r2, [pc, #132]	; (8005b80 <HAL_DMA_Start_IT+0x4b0>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d108      	bne.n	8005b12 <HAL_DMA_Start_IT+0x442>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f042 0201 	orr.w	r2, r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	e012      	b.n	8005b38 <HAL_DMA_Start_IT+0x468>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f042 0201 	orr.w	r2, r2, #1
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	e009      	b.n	8005b38 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	40020010 	.word	0x40020010
 8005b48:	40020028 	.word	0x40020028
 8005b4c:	40020040 	.word	0x40020040
 8005b50:	40020058 	.word	0x40020058
 8005b54:	40020070 	.word	0x40020070
 8005b58:	40020088 	.word	0x40020088
 8005b5c:	400200a0 	.word	0x400200a0
 8005b60:	400200b8 	.word	0x400200b8
 8005b64:	40020410 	.word	0x40020410
 8005b68:	40020428 	.word	0x40020428
 8005b6c:	40020440 	.word	0x40020440
 8005b70:	40020458 	.word	0x40020458
 8005b74:	40020470 	.word	0x40020470
 8005b78:	40020488 	.word	0x40020488
 8005b7c:	400204a0 	.word	0x400204a0
 8005b80:	400204b8 	.word	0x400204b8
 8005b84:	58025408 	.word	0x58025408
 8005b88:	5802541c 	.word	0x5802541c
 8005b8c:	58025430 	.word	0x58025430
 8005b90:	58025444 	.word	0x58025444
 8005b94:	58025458 	.word	0x58025458
 8005b98:	5802546c 	.word	0x5802546c
 8005b9c:	58025480 	.word	0x58025480
 8005ba0:	58025494 	.word	0x58025494

08005ba4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005bac:	f7ff f91a 	bl	8004de4 <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e2dc      	b.n	8006176 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d008      	beq.n	8005bda <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2280      	movs	r2, #128	; 0x80
 8005bcc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e2cd      	b.n	8006176 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a76      	ldr	r2, [pc, #472]	; (8005db8 <HAL_DMA_Abort+0x214>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d04a      	beq.n	8005c7a <HAL_DMA_Abort+0xd6>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a74      	ldr	r2, [pc, #464]	; (8005dbc <HAL_DMA_Abort+0x218>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d045      	beq.n	8005c7a <HAL_DMA_Abort+0xd6>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a73      	ldr	r2, [pc, #460]	; (8005dc0 <HAL_DMA_Abort+0x21c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d040      	beq.n	8005c7a <HAL_DMA_Abort+0xd6>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a71      	ldr	r2, [pc, #452]	; (8005dc4 <HAL_DMA_Abort+0x220>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d03b      	beq.n	8005c7a <HAL_DMA_Abort+0xd6>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a70      	ldr	r2, [pc, #448]	; (8005dc8 <HAL_DMA_Abort+0x224>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d036      	beq.n	8005c7a <HAL_DMA_Abort+0xd6>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a6e      	ldr	r2, [pc, #440]	; (8005dcc <HAL_DMA_Abort+0x228>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d031      	beq.n	8005c7a <HAL_DMA_Abort+0xd6>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a6d      	ldr	r2, [pc, #436]	; (8005dd0 <HAL_DMA_Abort+0x22c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d02c      	beq.n	8005c7a <HAL_DMA_Abort+0xd6>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a6b      	ldr	r2, [pc, #428]	; (8005dd4 <HAL_DMA_Abort+0x230>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d027      	beq.n	8005c7a <HAL_DMA_Abort+0xd6>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a6a      	ldr	r2, [pc, #424]	; (8005dd8 <HAL_DMA_Abort+0x234>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d022      	beq.n	8005c7a <HAL_DMA_Abort+0xd6>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a68      	ldr	r2, [pc, #416]	; (8005ddc <HAL_DMA_Abort+0x238>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d01d      	beq.n	8005c7a <HAL_DMA_Abort+0xd6>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a67      	ldr	r2, [pc, #412]	; (8005de0 <HAL_DMA_Abort+0x23c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d018      	beq.n	8005c7a <HAL_DMA_Abort+0xd6>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a65      	ldr	r2, [pc, #404]	; (8005de4 <HAL_DMA_Abort+0x240>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d013      	beq.n	8005c7a <HAL_DMA_Abort+0xd6>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a64      	ldr	r2, [pc, #400]	; (8005de8 <HAL_DMA_Abort+0x244>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d00e      	beq.n	8005c7a <HAL_DMA_Abort+0xd6>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a62      	ldr	r2, [pc, #392]	; (8005dec <HAL_DMA_Abort+0x248>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d009      	beq.n	8005c7a <HAL_DMA_Abort+0xd6>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a61      	ldr	r2, [pc, #388]	; (8005df0 <HAL_DMA_Abort+0x24c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d004      	beq.n	8005c7a <HAL_DMA_Abort+0xd6>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a5f      	ldr	r2, [pc, #380]	; (8005df4 <HAL_DMA_Abort+0x250>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d101      	bne.n	8005c7e <HAL_DMA_Abort+0xda>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e000      	b.n	8005c80 <HAL_DMA_Abort+0xdc>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d013      	beq.n	8005cac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 021e 	bic.w	r2, r2, #30
 8005c92:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695a      	ldr	r2, [r3, #20]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ca2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	e00a      	b.n	8005cc2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 020e 	bic.w	r2, r2, #14
 8005cba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a3c      	ldr	r2, [pc, #240]	; (8005db8 <HAL_DMA_Abort+0x214>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d072      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a3a      	ldr	r2, [pc, #232]	; (8005dbc <HAL_DMA_Abort+0x218>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d06d      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a39      	ldr	r2, [pc, #228]	; (8005dc0 <HAL_DMA_Abort+0x21c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d068      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a37      	ldr	r2, [pc, #220]	; (8005dc4 <HAL_DMA_Abort+0x220>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d063      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a36      	ldr	r2, [pc, #216]	; (8005dc8 <HAL_DMA_Abort+0x224>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d05e      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a34      	ldr	r2, [pc, #208]	; (8005dcc <HAL_DMA_Abort+0x228>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d059      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a33      	ldr	r2, [pc, #204]	; (8005dd0 <HAL_DMA_Abort+0x22c>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d054      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a31      	ldr	r2, [pc, #196]	; (8005dd4 <HAL_DMA_Abort+0x230>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d04f      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a30      	ldr	r2, [pc, #192]	; (8005dd8 <HAL_DMA_Abort+0x234>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d04a      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a2e      	ldr	r2, [pc, #184]	; (8005ddc <HAL_DMA_Abort+0x238>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d045      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a2d      	ldr	r2, [pc, #180]	; (8005de0 <HAL_DMA_Abort+0x23c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d040      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a2b      	ldr	r2, [pc, #172]	; (8005de4 <HAL_DMA_Abort+0x240>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d03b      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a2a      	ldr	r2, [pc, #168]	; (8005de8 <HAL_DMA_Abort+0x244>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d036      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a28      	ldr	r2, [pc, #160]	; (8005dec <HAL_DMA_Abort+0x248>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d031      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a27      	ldr	r2, [pc, #156]	; (8005df0 <HAL_DMA_Abort+0x24c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d02c      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a25      	ldr	r2, [pc, #148]	; (8005df4 <HAL_DMA_Abort+0x250>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d027      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a24      	ldr	r2, [pc, #144]	; (8005df8 <HAL_DMA_Abort+0x254>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d022      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a22      	ldr	r2, [pc, #136]	; (8005dfc <HAL_DMA_Abort+0x258>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d01d      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a21      	ldr	r2, [pc, #132]	; (8005e00 <HAL_DMA_Abort+0x25c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d018      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a1f      	ldr	r2, [pc, #124]	; (8005e04 <HAL_DMA_Abort+0x260>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d013      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a1e      	ldr	r2, [pc, #120]	; (8005e08 <HAL_DMA_Abort+0x264>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00e      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a1c      	ldr	r2, [pc, #112]	; (8005e0c <HAL_DMA_Abort+0x268>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d009      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a1b      	ldr	r2, [pc, #108]	; (8005e10 <HAL_DMA_Abort+0x26c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d004      	beq.n	8005db2 <HAL_DMA_Abort+0x20e>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a19      	ldr	r2, [pc, #100]	; (8005e14 <HAL_DMA_Abort+0x270>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d132      	bne.n	8005e18 <HAL_DMA_Abort+0x274>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e031      	b.n	8005e1a <HAL_DMA_Abort+0x276>
 8005db6:	bf00      	nop
 8005db8:	40020010 	.word	0x40020010
 8005dbc:	40020028 	.word	0x40020028
 8005dc0:	40020040 	.word	0x40020040
 8005dc4:	40020058 	.word	0x40020058
 8005dc8:	40020070 	.word	0x40020070
 8005dcc:	40020088 	.word	0x40020088
 8005dd0:	400200a0 	.word	0x400200a0
 8005dd4:	400200b8 	.word	0x400200b8
 8005dd8:	40020410 	.word	0x40020410
 8005ddc:	40020428 	.word	0x40020428
 8005de0:	40020440 	.word	0x40020440
 8005de4:	40020458 	.word	0x40020458
 8005de8:	40020470 	.word	0x40020470
 8005dec:	40020488 	.word	0x40020488
 8005df0:	400204a0 	.word	0x400204a0
 8005df4:	400204b8 	.word	0x400204b8
 8005df8:	58025408 	.word	0x58025408
 8005dfc:	5802541c 	.word	0x5802541c
 8005e00:	58025430 	.word	0x58025430
 8005e04:	58025444 	.word	0x58025444
 8005e08:	58025458 	.word	0x58025458
 8005e0c:	5802546c 	.word	0x5802546c
 8005e10:	58025480 	.word	0x58025480
 8005e14:	58025494 	.word	0x58025494
 8005e18:	2300      	movs	r3, #0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d007      	beq.n	8005e2e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a6d      	ldr	r2, [pc, #436]	; (8005fe8 <HAL_DMA_Abort+0x444>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d04a      	beq.n	8005ece <HAL_DMA_Abort+0x32a>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a6b      	ldr	r2, [pc, #428]	; (8005fec <HAL_DMA_Abort+0x448>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d045      	beq.n	8005ece <HAL_DMA_Abort+0x32a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a6a      	ldr	r2, [pc, #424]	; (8005ff0 <HAL_DMA_Abort+0x44c>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d040      	beq.n	8005ece <HAL_DMA_Abort+0x32a>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a68      	ldr	r2, [pc, #416]	; (8005ff4 <HAL_DMA_Abort+0x450>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d03b      	beq.n	8005ece <HAL_DMA_Abort+0x32a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a67      	ldr	r2, [pc, #412]	; (8005ff8 <HAL_DMA_Abort+0x454>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d036      	beq.n	8005ece <HAL_DMA_Abort+0x32a>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a65      	ldr	r2, [pc, #404]	; (8005ffc <HAL_DMA_Abort+0x458>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d031      	beq.n	8005ece <HAL_DMA_Abort+0x32a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a64      	ldr	r2, [pc, #400]	; (8006000 <HAL_DMA_Abort+0x45c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d02c      	beq.n	8005ece <HAL_DMA_Abort+0x32a>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a62      	ldr	r2, [pc, #392]	; (8006004 <HAL_DMA_Abort+0x460>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d027      	beq.n	8005ece <HAL_DMA_Abort+0x32a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a61      	ldr	r2, [pc, #388]	; (8006008 <HAL_DMA_Abort+0x464>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d022      	beq.n	8005ece <HAL_DMA_Abort+0x32a>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a5f      	ldr	r2, [pc, #380]	; (800600c <HAL_DMA_Abort+0x468>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d01d      	beq.n	8005ece <HAL_DMA_Abort+0x32a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a5e      	ldr	r2, [pc, #376]	; (8006010 <HAL_DMA_Abort+0x46c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d018      	beq.n	8005ece <HAL_DMA_Abort+0x32a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a5c      	ldr	r2, [pc, #368]	; (8006014 <HAL_DMA_Abort+0x470>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d013      	beq.n	8005ece <HAL_DMA_Abort+0x32a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a5b      	ldr	r2, [pc, #364]	; (8006018 <HAL_DMA_Abort+0x474>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d00e      	beq.n	8005ece <HAL_DMA_Abort+0x32a>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a59      	ldr	r2, [pc, #356]	; (800601c <HAL_DMA_Abort+0x478>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d009      	beq.n	8005ece <HAL_DMA_Abort+0x32a>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a58      	ldr	r2, [pc, #352]	; (8006020 <HAL_DMA_Abort+0x47c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d004      	beq.n	8005ece <HAL_DMA_Abort+0x32a>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a56      	ldr	r2, [pc, #344]	; (8006024 <HAL_DMA_Abort+0x480>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d108      	bne.n	8005ee0 <HAL_DMA_Abort+0x33c>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0201 	bic.w	r2, r2, #1
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	e007      	b.n	8005ef0 <HAL_DMA_Abort+0x34c>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0201 	bic.w	r2, r2, #1
 8005eee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005ef0:	e013      	b.n	8005f1a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ef2:	f7fe ff77 	bl	8004de4 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b05      	cmp	r3, #5
 8005efe:	d90c      	bls.n	8005f1a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2220      	movs	r2, #32
 8005f04:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2203      	movs	r2, #3
 8005f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e12d      	b.n	8006176 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1e5      	bne.n	8005ef2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a2f      	ldr	r2, [pc, #188]	; (8005fe8 <HAL_DMA_Abort+0x444>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d04a      	beq.n	8005fc6 <HAL_DMA_Abort+0x422>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a2d      	ldr	r2, [pc, #180]	; (8005fec <HAL_DMA_Abort+0x448>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d045      	beq.n	8005fc6 <HAL_DMA_Abort+0x422>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a2c      	ldr	r2, [pc, #176]	; (8005ff0 <HAL_DMA_Abort+0x44c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d040      	beq.n	8005fc6 <HAL_DMA_Abort+0x422>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a2a      	ldr	r2, [pc, #168]	; (8005ff4 <HAL_DMA_Abort+0x450>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d03b      	beq.n	8005fc6 <HAL_DMA_Abort+0x422>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a29      	ldr	r2, [pc, #164]	; (8005ff8 <HAL_DMA_Abort+0x454>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d036      	beq.n	8005fc6 <HAL_DMA_Abort+0x422>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a27      	ldr	r2, [pc, #156]	; (8005ffc <HAL_DMA_Abort+0x458>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d031      	beq.n	8005fc6 <HAL_DMA_Abort+0x422>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a26      	ldr	r2, [pc, #152]	; (8006000 <HAL_DMA_Abort+0x45c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d02c      	beq.n	8005fc6 <HAL_DMA_Abort+0x422>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a24      	ldr	r2, [pc, #144]	; (8006004 <HAL_DMA_Abort+0x460>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d027      	beq.n	8005fc6 <HAL_DMA_Abort+0x422>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a23      	ldr	r2, [pc, #140]	; (8006008 <HAL_DMA_Abort+0x464>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d022      	beq.n	8005fc6 <HAL_DMA_Abort+0x422>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a21      	ldr	r2, [pc, #132]	; (800600c <HAL_DMA_Abort+0x468>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d01d      	beq.n	8005fc6 <HAL_DMA_Abort+0x422>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a20      	ldr	r2, [pc, #128]	; (8006010 <HAL_DMA_Abort+0x46c>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d018      	beq.n	8005fc6 <HAL_DMA_Abort+0x422>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a1e      	ldr	r2, [pc, #120]	; (8006014 <HAL_DMA_Abort+0x470>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d013      	beq.n	8005fc6 <HAL_DMA_Abort+0x422>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a1d      	ldr	r2, [pc, #116]	; (8006018 <HAL_DMA_Abort+0x474>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d00e      	beq.n	8005fc6 <HAL_DMA_Abort+0x422>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1b      	ldr	r2, [pc, #108]	; (800601c <HAL_DMA_Abort+0x478>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d009      	beq.n	8005fc6 <HAL_DMA_Abort+0x422>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a1a      	ldr	r2, [pc, #104]	; (8006020 <HAL_DMA_Abort+0x47c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d004      	beq.n	8005fc6 <HAL_DMA_Abort+0x422>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a18      	ldr	r2, [pc, #96]	; (8006024 <HAL_DMA_Abort+0x480>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d101      	bne.n	8005fca <HAL_DMA_Abort+0x426>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e000      	b.n	8005fcc <HAL_DMA_Abort+0x428>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d02b      	beq.n	8006028 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fda:	f003 031f 	and.w	r3, r3, #31
 8005fde:	223f      	movs	r2, #63	; 0x3f
 8005fe0:	409a      	lsls	r2, r3
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	609a      	str	r2, [r3, #8]
 8005fe6:	e02a      	b.n	800603e <HAL_DMA_Abort+0x49a>
 8005fe8:	40020010 	.word	0x40020010
 8005fec:	40020028 	.word	0x40020028
 8005ff0:	40020040 	.word	0x40020040
 8005ff4:	40020058 	.word	0x40020058
 8005ff8:	40020070 	.word	0x40020070
 8005ffc:	40020088 	.word	0x40020088
 8006000:	400200a0 	.word	0x400200a0
 8006004:	400200b8 	.word	0x400200b8
 8006008:	40020410 	.word	0x40020410
 800600c:	40020428 	.word	0x40020428
 8006010:	40020440 	.word	0x40020440
 8006014:	40020458 	.word	0x40020458
 8006018:	40020470 	.word	0x40020470
 800601c:	40020488 	.word	0x40020488
 8006020:	400204a0 	.word	0x400204a0
 8006024:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006032:	f003 031f 	and.w	r3, r3, #31
 8006036:	2201      	movs	r2, #1
 8006038:	409a      	lsls	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a4f      	ldr	r2, [pc, #316]	; (8006180 <HAL_DMA_Abort+0x5dc>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d072      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a4d      	ldr	r2, [pc, #308]	; (8006184 <HAL_DMA_Abort+0x5e0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d06d      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a4c      	ldr	r2, [pc, #304]	; (8006188 <HAL_DMA_Abort+0x5e4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d068      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a4a      	ldr	r2, [pc, #296]	; (800618c <HAL_DMA_Abort+0x5e8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d063      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a49      	ldr	r2, [pc, #292]	; (8006190 <HAL_DMA_Abort+0x5ec>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d05e      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a47      	ldr	r2, [pc, #284]	; (8006194 <HAL_DMA_Abort+0x5f0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d059      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a46      	ldr	r2, [pc, #280]	; (8006198 <HAL_DMA_Abort+0x5f4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d054      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a44      	ldr	r2, [pc, #272]	; (800619c <HAL_DMA_Abort+0x5f8>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d04f      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a43      	ldr	r2, [pc, #268]	; (80061a0 <HAL_DMA_Abort+0x5fc>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d04a      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a41      	ldr	r2, [pc, #260]	; (80061a4 <HAL_DMA_Abort+0x600>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d045      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a40      	ldr	r2, [pc, #256]	; (80061a8 <HAL_DMA_Abort+0x604>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d040      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a3e      	ldr	r2, [pc, #248]	; (80061ac <HAL_DMA_Abort+0x608>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d03b      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a3d      	ldr	r2, [pc, #244]	; (80061b0 <HAL_DMA_Abort+0x60c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d036      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a3b      	ldr	r2, [pc, #236]	; (80061b4 <HAL_DMA_Abort+0x610>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d031      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a3a      	ldr	r2, [pc, #232]	; (80061b8 <HAL_DMA_Abort+0x614>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d02c      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a38      	ldr	r2, [pc, #224]	; (80061bc <HAL_DMA_Abort+0x618>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d027      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a37      	ldr	r2, [pc, #220]	; (80061c0 <HAL_DMA_Abort+0x61c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d022      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a35      	ldr	r2, [pc, #212]	; (80061c4 <HAL_DMA_Abort+0x620>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d01d      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a34      	ldr	r2, [pc, #208]	; (80061c8 <HAL_DMA_Abort+0x624>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d018      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a32      	ldr	r2, [pc, #200]	; (80061cc <HAL_DMA_Abort+0x628>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d013      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a31      	ldr	r2, [pc, #196]	; (80061d0 <HAL_DMA_Abort+0x62c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00e      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a2f      	ldr	r2, [pc, #188]	; (80061d4 <HAL_DMA_Abort+0x630>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d009      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a2e      	ldr	r2, [pc, #184]	; (80061d8 <HAL_DMA_Abort+0x634>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d004      	beq.n	800612e <HAL_DMA_Abort+0x58a>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a2c      	ldr	r2, [pc, #176]	; (80061dc <HAL_DMA_Abort+0x638>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d101      	bne.n	8006132 <HAL_DMA_Abort+0x58e>
 800612e:	2301      	movs	r3, #1
 8006130:	e000      	b.n	8006134 <HAL_DMA_Abort+0x590>
 8006132:	2300      	movs	r3, #0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d015      	beq.n	8006164 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006140:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00c      	beq.n	8006164 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006154:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006158:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006162:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	40020010 	.word	0x40020010
 8006184:	40020028 	.word	0x40020028
 8006188:	40020040 	.word	0x40020040
 800618c:	40020058 	.word	0x40020058
 8006190:	40020070 	.word	0x40020070
 8006194:	40020088 	.word	0x40020088
 8006198:	400200a0 	.word	0x400200a0
 800619c:	400200b8 	.word	0x400200b8
 80061a0:	40020410 	.word	0x40020410
 80061a4:	40020428 	.word	0x40020428
 80061a8:	40020440 	.word	0x40020440
 80061ac:	40020458 	.word	0x40020458
 80061b0:	40020470 	.word	0x40020470
 80061b4:	40020488 	.word	0x40020488
 80061b8:	400204a0 	.word	0x400204a0
 80061bc:	400204b8 	.word	0x400204b8
 80061c0:	58025408 	.word	0x58025408
 80061c4:	5802541c 	.word	0x5802541c
 80061c8:	58025430 	.word	0x58025430
 80061cc:	58025444 	.word	0x58025444
 80061d0:	58025458 	.word	0x58025458
 80061d4:	5802546c 	.word	0x5802546c
 80061d8:	58025480 	.word	0x58025480
 80061dc:	58025494 	.word	0x58025494

080061e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e237      	b.n	8006662 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d004      	beq.n	8006208 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2280      	movs	r2, #128	; 0x80
 8006202:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e22c      	b.n	8006662 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a5c      	ldr	r2, [pc, #368]	; (8006380 <HAL_DMA_Abort_IT+0x1a0>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d04a      	beq.n	80062a8 <HAL_DMA_Abort_IT+0xc8>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a5b      	ldr	r2, [pc, #364]	; (8006384 <HAL_DMA_Abort_IT+0x1a4>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d045      	beq.n	80062a8 <HAL_DMA_Abort_IT+0xc8>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a59      	ldr	r2, [pc, #356]	; (8006388 <HAL_DMA_Abort_IT+0x1a8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d040      	beq.n	80062a8 <HAL_DMA_Abort_IT+0xc8>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a58      	ldr	r2, [pc, #352]	; (800638c <HAL_DMA_Abort_IT+0x1ac>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d03b      	beq.n	80062a8 <HAL_DMA_Abort_IT+0xc8>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a56      	ldr	r2, [pc, #344]	; (8006390 <HAL_DMA_Abort_IT+0x1b0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d036      	beq.n	80062a8 <HAL_DMA_Abort_IT+0xc8>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a55      	ldr	r2, [pc, #340]	; (8006394 <HAL_DMA_Abort_IT+0x1b4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d031      	beq.n	80062a8 <HAL_DMA_Abort_IT+0xc8>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a53      	ldr	r2, [pc, #332]	; (8006398 <HAL_DMA_Abort_IT+0x1b8>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d02c      	beq.n	80062a8 <HAL_DMA_Abort_IT+0xc8>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a52      	ldr	r2, [pc, #328]	; (800639c <HAL_DMA_Abort_IT+0x1bc>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d027      	beq.n	80062a8 <HAL_DMA_Abort_IT+0xc8>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a50      	ldr	r2, [pc, #320]	; (80063a0 <HAL_DMA_Abort_IT+0x1c0>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d022      	beq.n	80062a8 <HAL_DMA_Abort_IT+0xc8>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a4f      	ldr	r2, [pc, #316]	; (80063a4 <HAL_DMA_Abort_IT+0x1c4>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d01d      	beq.n	80062a8 <HAL_DMA_Abort_IT+0xc8>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a4d      	ldr	r2, [pc, #308]	; (80063a8 <HAL_DMA_Abort_IT+0x1c8>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d018      	beq.n	80062a8 <HAL_DMA_Abort_IT+0xc8>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a4c      	ldr	r2, [pc, #304]	; (80063ac <HAL_DMA_Abort_IT+0x1cc>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d013      	beq.n	80062a8 <HAL_DMA_Abort_IT+0xc8>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a4a      	ldr	r2, [pc, #296]	; (80063b0 <HAL_DMA_Abort_IT+0x1d0>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00e      	beq.n	80062a8 <HAL_DMA_Abort_IT+0xc8>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a49      	ldr	r2, [pc, #292]	; (80063b4 <HAL_DMA_Abort_IT+0x1d4>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d009      	beq.n	80062a8 <HAL_DMA_Abort_IT+0xc8>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a47      	ldr	r2, [pc, #284]	; (80063b8 <HAL_DMA_Abort_IT+0x1d8>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d004      	beq.n	80062a8 <HAL_DMA_Abort_IT+0xc8>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a46      	ldr	r2, [pc, #280]	; (80063bc <HAL_DMA_Abort_IT+0x1dc>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d101      	bne.n	80062ac <HAL_DMA_Abort_IT+0xcc>
 80062a8:	2301      	movs	r3, #1
 80062aa:	e000      	b.n	80062ae <HAL_DMA_Abort_IT+0xce>
 80062ac:	2300      	movs	r3, #0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 8086 	beq.w	80063c0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2204      	movs	r2, #4
 80062b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a2f      	ldr	r2, [pc, #188]	; (8006380 <HAL_DMA_Abort_IT+0x1a0>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d04a      	beq.n	800635c <HAL_DMA_Abort_IT+0x17c>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a2e      	ldr	r2, [pc, #184]	; (8006384 <HAL_DMA_Abort_IT+0x1a4>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d045      	beq.n	800635c <HAL_DMA_Abort_IT+0x17c>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a2c      	ldr	r2, [pc, #176]	; (8006388 <HAL_DMA_Abort_IT+0x1a8>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d040      	beq.n	800635c <HAL_DMA_Abort_IT+0x17c>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a2b      	ldr	r2, [pc, #172]	; (800638c <HAL_DMA_Abort_IT+0x1ac>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d03b      	beq.n	800635c <HAL_DMA_Abort_IT+0x17c>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a29      	ldr	r2, [pc, #164]	; (8006390 <HAL_DMA_Abort_IT+0x1b0>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d036      	beq.n	800635c <HAL_DMA_Abort_IT+0x17c>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a28      	ldr	r2, [pc, #160]	; (8006394 <HAL_DMA_Abort_IT+0x1b4>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d031      	beq.n	800635c <HAL_DMA_Abort_IT+0x17c>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a26      	ldr	r2, [pc, #152]	; (8006398 <HAL_DMA_Abort_IT+0x1b8>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d02c      	beq.n	800635c <HAL_DMA_Abort_IT+0x17c>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a25      	ldr	r2, [pc, #148]	; (800639c <HAL_DMA_Abort_IT+0x1bc>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d027      	beq.n	800635c <HAL_DMA_Abort_IT+0x17c>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a23      	ldr	r2, [pc, #140]	; (80063a0 <HAL_DMA_Abort_IT+0x1c0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d022      	beq.n	800635c <HAL_DMA_Abort_IT+0x17c>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a22      	ldr	r2, [pc, #136]	; (80063a4 <HAL_DMA_Abort_IT+0x1c4>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d01d      	beq.n	800635c <HAL_DMA_Abort_IT+0x17c>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a20      	ldr	r2, [pc, #128]	; (80063a8 <HAL_DMA_Abort_IT+0x1c8>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d018      	beq.n	800635c <HAL_DMA_Abort_IT+0x17c>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a1f      	ldr	r2, [pc, #124]	; (80063ac <HAL_DMA_Abort_IT+0x1cc>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d013      	beq.n	800635c <HAL_DMA_Abort_IT+0x17c>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a1d      	ldr	r2, [pc, #116]	; (80063b0 <HAL_DMA_Abort_IT+0x1d0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d00e      	beq.n	800635c <HAL_DMA_Abort_IT+0x17c>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a1c      	ldr	r2, [pc, #112]	; (80063b4 <HAL_DMA_Abort_IT+0x1d4>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d009      	beq.n	800635c <HAL_DMA_Abort_IT+0x17c>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1a      	ldr	r2, [pc, #104]	; (80063b8 <HAL_DMA_Abort_IT+0x1d8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d004      	beq.n	800635c <HAL_DMA_Abort_IT+0x17c>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a19      	ldr	r2, [pc, #100]	; (80063bc <HAL_DMA_Abort_IT+0x1dc>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d108      	bne.n	800636e <HAL_DMA_Abort_IT+0x18e>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 0201 	bic.w	r2, r2, #1
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	e178      	b.n	8006660 <HAL_DMA_Abort_IT+0x480>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0201 	bic.w	r2, r2, #1
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	e16f      	b.n	8006660 <HAL_DMA_Abort_IT+0x480>
 8006380:	40020010 	.word	0x40020010
 8006384:	40020028 	.word	0x40020028
 8006388:	40020040 	.word	0x40020040
 800638c:	40020058 	.word	0x40020058
 8006390:	40020070 	.word	0x40020070
 8006394:	40020088 	.word	0x40020088
 8006398:	400200a0 	.word	0x400200a0
 800639c:	400200b8 	.word	0x400200b8
 80063a0:	40020410 	.word	0x40020410
 80063a4:	40020428 	.word	0x40020428
 80063a8:	40020440 	.word	0x40020440
 80063ac:	40020458 	.word	0x40020458
 80063b0:	40020470 	.word	0x40020470
 80063b4:	40020488 	.word	0x40020488
 80063b8:	400204a0 	.word	0x400204a0
 80063bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f022 020e 	bic.w	r2, r2, #14
 80063ce:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a6c      	ldr	r2, [pc, #432]	; (8006588 <HAL_DMA_Abort_IT+0x3a8>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d04a      	beq.n	8006470 <HAL_DMA_Abort_IT+0x290>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a6b      	ldr	r2, [pc, #428]	; (800658c <HAL_DMA_Abort_IT+0x3ac>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d045      	beq.n	8006470 <HAL_DMA_Abort_IT+0x290>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a69      	ldr	r2, [pc, #420]	; (8006590 <HAL_DMA_Abort_IT+0x3b0>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d040      	beq.n	8006470 <HAL_DMA_Abort_IT+0x290>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a68      	ldr	r2, [pc, #416]	; (8006594 <HAL_DMA_Abort_IT+0x3b4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d03b      	beq.n	8006470 <HAL_DMA_Abort_IT+0x290>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a66      	ldr	r2, [pc, #408]	; (8006598 <HAL_DMA_Abort_IT+0x3b8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d036      	beq.n	8006470 <HAL_DMA_Abort_IT+0x290>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a65      	ldr	r2, [pc, #404]	; (800659c <HAL_DMA_Abort_IT+0x3bc>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d031      	beq.n	8006470 <HAL_DMA_Abort_IT+0x290>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a63      	ldr	r2, [pc, #396]	; (80065a0 <HAL_DMA_Abort_IT+0x3c0>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d02c      	beq.n	8006470 <HAL_DMA_Abort_IT+0x290>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a62      	ldr	r2, [pc, #392]	; (80065a4 <HAL_DMA_Abort_IT+0x3c4>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d027      	beq.n	8006470 <HAL_DMA_Abort_IT+0x290>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a60      	ldr	r2, [pc, #384]	; (80065a8 <HAL_DMA_Abort_IT+0x3c8>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d022      	beq.n	8006470 <HAL_DMA_Abort_IT+0x290>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a5f      	ldr	r2, [pc, #380]	; (80065ac <HAL_DMA_Abort_IT+0x3cc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d01d      	beq.n	8006470 <HAL_DMA_Abort_IT+0x290>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a5d      	ldr	r2, [pc, #372]	; (80065b0 <HAL_DMA_Abort_IT+0x3d0>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d018      	beq.n	8006470 <HAL_DMA_Abort_IT+0x290>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a5c      	ldr	r2, [pc, #368]	; (80065b4 <HAL_DMA_Abort_IT+0x3d4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d013      	beq.n	8006470 <HAL_DMA_Abort_IT+0x290>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a5a      	ldr	r2, [pc, #360]	; (80065b8 <HAL_DMA_Abort_IT+0x3d8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d00e      	beq.n	8006470 <HAL_DMA_Abort_IT+0x290>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a59      	ldr	r2, [pc, #356]	; (80065bc <HAL_DMA_Abort_IT+0x3dc>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d009      	beq.n	8006470 <HAL_DMA_Abort_IT+0x290>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a57      	ldr	r2, [pc, #348]	; (80065c0 <HAL_DMA_Abort_IT+0x3e0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d004      	beq.n	8006470 <HAL_DMA_Abort_IT+0x290>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a56      	ldr	r2, [pc, #344]	; (80065c4 <HAL_DMA_Abort_IT+0x3e4>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d108      	bne.n	8006482 <HAL_DMA_Abort_IT+0x2a2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0201 	bic.w	r2, r2, #1
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	e007      	b.n	8006492 <HAL_DMA_Abort_IT+0x2b2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0201 	bic.w	r2, r2, #1
 8006490:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a3c      	ldr	r2, [pc, #240]	; (8006588 <HAL_DMA_Abort_IT+0x3a8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d072      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a3a      	ldr	r2, [pc, #232]	; (800658c <HAL_DMA_Abort_IT+0x3ac>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d06d      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a39      	ldr	r2, [pc, #228]	; (8006590 <HAL_DMA_Abort_IT+0x3b0>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d068      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a37      	ldr	r2, [pc, #220]	; (8006594 <HAL_DMA_Abort_IT+0x3b4>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d063      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a36      	ldr	r2, [pc, #216]	; (8006598 <HAL_DMA_Abort_IT+0x3b8>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d05e      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a34      	ldr	r2, [pc, #208]	; (800659c <HAL_DMA_Abort_IT+0x3bc>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d059      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a33      	ldr	r2, [pc, #204]	; (80065a0 <HAL_DMA_Abort_IT+0x3c0>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d054      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a31      	ldr	r2, [pc, #196]	; (80065a4 <HAL_DMA_Abort_IT+0x3c4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d04f      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a30      	ldr	r2, [pc, #192]	; (80065a8 <HAL_DMA_Abort_IT+0x3c8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d04a      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a2e      	ldr	r2, [pc, #184]	; (80065ac <HAL_DMA_Abort_IT+0x3cc>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d045      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a2d      	ldr	r2, [pc, #180]	; (80065b0 <HAL_DMA_Abort_IT+0x3d0>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d040      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a2b      	ldr	r2, [pc, #172]	; (80065b4 <HAL_DMA_Abort_IT+0x3d4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d03b      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a2a      	ldr	r2, [pc, #168]	; (80065b8 <HAL_DMA_Abort_IT+0x3d8>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d036      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a28      	ldr	r2, [pc, #160]	; (80065bc <HAL_DMA_Abort_IT+0x3dc>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d031      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a27      	ldr	r2, [pc, #156]	; (80065c0 <HAL_DMA_Abort_IT+0x3e0>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d02c      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a25      	ldr	r2, [pc, #148]	; (80065c4 <HAL_DMA_Abort_IT+0x3e4>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d027      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a24      	ldr	r2, [pc, #144]	; (80065c8 <HAL_DMA_Abort_IT+0x3e8>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d022      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a22      	ldr	r2, [pc, #136]	; (80065cc <HAL_DMA_Abort_IT+0x3ec>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d01d      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a21      	ldr	r2, [pc, #132]	; (80065d0 <HAL_DMA_Abort_IT+0x3f0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d018      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a1f      	ldr	r2, [pc, #124]	; (80065d4 <HAL_DMA_Abort_IT+0x3f4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d013      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a1e      	ldr	r2, [pc, #120]	; (80065d8 <HAL_DMA_Abort_IT+0x3f8>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00e      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a1c      	ldr	r2, [pc, #112]	; (80065dc <HAL_DMA_Abort_IT+0x3fc>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d009      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a1b      	ldr	r2, [pc, #108]	; (80065e0 <HAL_DMA_Abort_IT+0x400>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d004      	beq.n	8006582 <HAL_DMA_Abort_IT+0x3a2>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a19      	ldr	r2, [pc, #100]	; (80065e4 <HAL_DMA_Abort_IT+0x404>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d132      	bne.n	80065e8 <HAL_DMA_Abort_IT+0x408>
 8006582:	2301      	movs	r3, #1
 8006584:	e031      	b.n	80065ea <HAL_DMA_Abort_IT+0x40a>
 8006586:	bf00      	nop
 8006588:	40020010 	.word	0x40020010
 800658c:	40020028 	.word	0x40020028
 8006590:	40020040 	.word	0x40020040
 8006594:	40020058 	.word	0x40020058
 8006598:	40020070 	.word	0x40020070
 800659c:	40020088 	.word	0x40020088
 80065a0:	400200a0 	.word	0x400200a0
 80065a4:	400200b8 	.word	0x400200b8
 80065a8:	40020410 	.word	0x40020410
 80065ac:	40020428 	.word	0x40020428
 80065b0:	40020440 	.word	0x40020440
 80065b4:	40020458 	.word	0x40020458
 80065b8:	40020470 	.word	0x40020470
 80065bc:	40020488 	.word	0x40020488
 80065c0:	400204a0 	.word	0x400204a0
 80065c4:	400204b8 	.word	0x400204b8
 80065c8:	58025408 	.word	0x58025408
 80065cc:	5802541c 	.word	0x5802541c
 80065d0:	58025430 	.word	0x58025430
 80065d4:	58025444 	.word	0x58025444
 80065d8:	58025458 	.word	0x58025458
 80065dc:	5802546c 	.word	0x5802546c
 80065e0:	58025480 	.word	0x58025480
 80065e4:	58025494 	.word	0x58025494
 80065e8:	2300      	movs	r3, #0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d028      	beq.n	8006640 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065fc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006602:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006608:	f003 031f 	and.w	r3, r3, #31
 800660c:	2201      	movs	r2, #1
 800660e:	409a      	lsls	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800661c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00c      	beq.n	8006640 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006630:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006634:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800663e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop

0800666c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b08a      	sub	sp, #40	; 0x28
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006678:	4b67      	ldr	r3, [pc, #412]	; (8006818 <HAL_DMA_IRQHandler+0x1ac>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a67      	ldr	r2, [pc, #412]	; (800681c <HAL_DMA_IRQHandler+0x1b0>)
 800667e:	fba2 2303 	umull	r2, r3, r2, r3
 8006682:	0a9b      	lsrs	r3, r3, #10
 8006684:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800668a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006690:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a5f      	ldr	r2, [pc, #380]	; (8006820 <HAL_DMA_IRQHandler+0x1b4>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d04a      	beq.n	800673e <HAL_DMA_IRQHandler+0xd2>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a5d      	ldr	r2, [pc, #372]	; (8006824 <HAL_DMA_IRQHandler+0x1b8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d045      	beq.n	800673e <HAL_DMA_IRQHandler+0xd2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a5c      	ldr	r2, [pc, #368]	; (8006828 <HAL_DMA_IRQHandler+0x1bc>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d040      	beq.n	800673e <HAL_DMA_IRQHandler+0xd2>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a5a      	ldr	r2, [pc, #360]	; (800682c <HAL_DMA_IRQHandler+0x1c0>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d03b      	beq.n	800673e <HAL_DMA_IRQHandler+0xd2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a59      	ldr	r2, [pc, #356]	; (8006830 <HAL_DMA_IRQHandler+0x1c4>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d036      	beq.n	800673e <HAL_DMA_IRQHandler+0xd2>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a57      	ldr	r2, [pc, #348]	; (8006834 <HAL_DMA_IRQHandler+0x1c8>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d031      	beq.n	800673e <HAL_DMA_IRQHandler+0xd2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a56      	ldr	r2, [pc, #344]	; (8006838 <HAL_DMA_IRQHandler+0x1cc>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d02c      	beq.n	800673e <HAL_DMA_IRQHandler+0xd2>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a54      	ldr	r2, [pc, #336]	; (800683c <HAL_DMA_IRQHandler+0x1d0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d027      	beq.n	800673e <HAL_DMA_IRQHandler+0xd2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a53      	ldr	r2, [pc, #332]	; (8006840 <HAL_DMA_IRQHandler+0x1d4>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d022      	beq.n	800673e <HAL_DMA_IRQHandler+0xd2>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a51      	ldr	r2, [pc, #324]	; (8006844 <HAL_DMA_IRQHandler+0x1d8>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d01d      	beq.n	800673e <HAL_DMA_IRQHandler+0xd2>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a50      	ldr	r2, [pc, #320]	; (8006848 <HAL_DMA_IRQHandler+0x1dc>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d018      	beq.n	800673e <HAL_DMA_IRQHandler+0xd2>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a4e      	ldr	r2, [pc, #312]	; (800684c <HAL_DMA_IRQHandler+0x1e0>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d013      	beq.n	800673e <HAL_DMA_IRQHandler+0xd2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a4d      	ldr	r2, [pc, #308]	; (8006850 <HAL_DMA_IRQHandler+0x1e4>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d00e      	beq.n	800673e <HAL_DMA_IRQHandler+0xd2>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a4b      	ldr	r2, [pc, #300]	; (8006854 <HAL_DMA_IRQHandler+0x1e8>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d009      	beq.n	800673e <HAL_DMA_IRQHandler+0xd2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a4a      	ldr	r2, [pc, #296]	; (8006858 <HAL_DMA_IRQHandler+0x1ec>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d004      	beq.n	800673e <HAL_DMA_IRQHandler+0xd2>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a48      	ldr	r2, [pc, #288]	; (800685c <HAL_DMA_IRQHandler+0x1f0>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d101      	bne.n	8006742 <HAL_DMA_IRQHandler+0xd6>
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <HAL_DMA_IRQHandler+0xd8>
 8006742:	2300      	movs	r3, #0
 8006744:	2b00      	cmp	r3, #0
 8006746:	f000 842b 	beq.w	8006fa0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674e:	f003 031f 	and.w	r3, r3, #31
 8006752:	2208      	movs	r2, #8
 8006754:	409a      	lsls	r2, r3
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	4013      	ands	r3, r2
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 80a2 	beq.w	80068a4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a2e      	ldr	r2, [pc, #184]	; (8006820 <HAL_DMA_IRQHandler+0x1b4>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d04a      	beq.n	8006800 <HAL_DMA_IRQHandler+0x194>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a2d      	ldr	r2, [pc, #180]	; (8006824 <HAL_DMA_IRQHandler+0x1b8>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d045      	beq.n	8006800 <HAL_DMA_IRQHandler+0x194>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a2b      	ldr	r2, [pc, #172]	; (8006828 <HAL_DMA_IRQHandler+0x1bc>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d040      	beq.n	8006800 <HAL_DMA_IRQHandler+0x194>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a2a      	ldr	r2, [pc, #168]	; (800682c <HAL_DMA_IRQHandler+0x1c0>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d03b      	beq.n	8006800 <HAL_DMA_IRQHandler+0x194>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a28      	ldr	r2, [pc, #160]	; (8006830 <HAL_DMA_IRQHandler+0x1c4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d036      	beq.n	8006800 <HAL_DMA_IRQHandler+0x194>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a27      	ldr	r2, [pc, #156]	; (8006834 <HAL_DMA_IRQHandler+0x1c8>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d031      	beq.n	8006800 <HAL_DMA_IRQHandler+0x194>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a25      	ldr	r2, [pc, #148]	; (8006838 <HAL_DMA_IRQHandler+0x1cc>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d02c      	beq.n	8006800 <HAL_DMA_IRQHandler+0x194>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a24      	ldr	r2, [pc, #144]	; (800683c <HAL_DMA_IRQHandler+0x1d0>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d027      	beq.n	8006800 <HAL_DMA_IRQHandler+0x194>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a22      	ldr	r2, [pc, #136]	; (8006840 <HAL_DMA_IRQHandler+0x1d4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d022      	beq.n	8006800 <HAL_DMA_IRQHandler+0x194>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a21      	ldr	r2, [pc, #132]	; (8006844 <HAL_DMA_IRQHandler+0x1d8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d01d      	beq.n	8006800 <HAL_DMA_IRQHandler+0x194>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a1f      	ldr	r2, [pc, #124]	; (8006848 <HAL_DMA_IRQHandler+0x1dc>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d018      	beq.n	8006800 <HAL_DMA_IRQHandler+0x194>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a1e      	ldr	r2, [pc, #120]	; (800684c <HAL_DMA_IRQHandler+0x1e0>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d013      	beq.n	8006800 <HAL_DMA_IRQHandler+0x194>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a1c      	ldr	r2, [pc, #112]	; (8006850 <HAL_DMA_IRQHandler+0x1e4>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d00e      	beq.n	8006800 <HAL_DMA_IRQHandler+0x194>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a1b      	ldr	r2, [pc, #108]	; (8006854 <HAL_DMA_IRQHandler+0x1e8>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d009      	beq.n	8006800 <HAL_DMA_IRQHandler+0x194>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a19      	ldr	r2, [pc, #100]	; (8006858 <HAL_DMA_IRQHandler+0x1ec>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d004      	beq.n	8006800 <HAL_DMA_IRQHandler+0x194>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a18      	ldr	r2, [pc, #96]	; (800685c <HAL_DMA_IRQHandler+0x1f0>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d12f      	bne.n	8006860 <HAL_DMA_IRQHandler+0x1f4>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0304 	and.w	r3, r3, #4
 800680a:	2b00      	cmp	r3, #0
 800680c:	bf14      	ite	ne
 800680e:	2301      	movne	r3, #1
 8006810:	2300      	moveq	r3, #0
 8006812:	b2db      	uxtb	r3, r3
 8006814:	e02e      	b.n	8006874 <HAL_DMA_IRQHandler+0x208>
 8006816:	bf00      	nop
 8006818:	24000008 	.word	0x24000008
 800681c:	1b4e81b5 	.word	0x1b4e81b5
 8006820:	40020010 	.word	0x40020010
 8006824:	40020028 	.word	0x40020028
 8006828:	40020040 	.word	0x40020040
 800682c:	40020058 	.word	0x40020058
 8006830:	40020070 	.word	0x40020070
 8006834:	40020088 	.word	0x40020088
 8006838:	400200a0 	.word	0x400200a0
 800683c:	400200b8 	.word	0x400200b8
 8006840:	40020410 	.word	0x40020410
 8006844:	40020428 	.word	0x40020428
 8006848:	40020440 	.word	0x40020440
 800684c:	40020458 	.word	0x40020458
 8006850:	40020470 	.word	0x40020470
 8006854:	40020488 	.word	0x40020488
 8006858:	400204a0 	.word	0x400204a0
 800685c:	400204b8 	.word	0x400204b8
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0308 	and.w	r3, r3, #8
 800686a:	2b00      	cmp	r3, #0
 800686c:	bf14      	ite	ne
 800686e:	2301      	movne	r3, #1
 8006870:	2300      	moveq	r3, #0
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	d015      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 0204 	bic.w	r2, r2, #4
 8006886:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800688c:	f003 031f 	and.w	r3, r3, #31
 8006890:	2208      	movs	r2, #8
 8006892:	409a      	lsls	r2, r3
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689c:	f043 0201 	orr.w	r2, r3, #1
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a8:	f003 031f 	and.w	r3, r3, #31
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	fa22 f303 	lsr.w	r3, r2, r3
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d06e      	beq.n	8006998 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a69      	ldr	r2, [pc, #420]	; (8006a64 <HAL_DMA_IRQHandler+0x3f8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d04a      	beq.n	800695a <HAL_DMA_IRQHandler+0x2ee>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a67      	ldr	r2, [pc, #412]	; (8006a68 <HAL_DMA_IRQHandler+0x3fc>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d045      	beq.n	800695a <HAL_DMA_IRQHandler+0x2ee>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a66      	ldr	r2, [pc, #408]	; (8006a6c <HAL_DMA_IRQHandler+0x400>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d040      	beq.n	800695a <HAL_DMA_IRQHandler+0x2ee>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a64      	ldr	r2, [pc, #400]	; (8006a70 <HAL_DMA_IRQHandler+0x404>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d03b      	beq.n	800695a <HAL_DMA_IRQHandler+0x2ee>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a63      	ldr	r2, [pc, #396]	; (8006a74 <HAL_DMA_IRQHandler+0x408>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d036      	beq.n	800695a <HAL_DMA_IRQHandler+0x2ee>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a61      	ldr	r2, [pc, #388]	; (8006a78 <HAL_DMA_IRQHandler+0x40c>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d031      	beq.n	800695a <HAL_DMA_IRQHandler+0x2ee>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a60      	ldr	r2, [pc, #384]	; (8006a7c <HAL_DMA_IRQHandler+0x410>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d02c      	beq.n	800695a <HAL_DMA_IRQHandler+0x2ee>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a5e      	ldr	r2, [pc, #376]	; (8006a80 <HAL_DMA_IRQHandler+0x414>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d027      	beq.n	800695a <HAL_DMA_IRQHandler+0x2ee>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a5d      	ldr	r2, [pc, #372]	; (8006a84 <HAL_DMA_IRQHandler+0x418>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d022      	beq.n	800695a <HAL_DMA_IRQHandler+0x2ee>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a5b      	ldr	r2, [pc, #364]	; (8006a88 <HAL_DMA_IRQHandler+0x41c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d01d      	beq.n	800695a <HAL_DMA_IRQHandler+0x2ee>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a5a      	ldr	r2, [pc, #360]	; (8006a8c <HAL_DMA_IRQHandler+0x420>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d018      	beq.n	800695a <HAL_DMA_IRQHandler+0x2ee>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a58      	ldr	r2, [pc, #352]	; (8006a90 <HAL_DMA_IRQHandler+0x424>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d013      	beq.n	800695a <HAL_DMA_IRQHandler+0x2ee>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a57      	ldr	r2, [pc, #348]	; (8006a94 <HAL_DMA_IRQHandler+0x428>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d00e      	beq.n	800695a <HAL_DMA_IRQHandler+0x2ee>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a55      	ldr	r2, [pc, #340]	; (8006a98 <HAL_DMA_IRQHandler+0x42c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d009      	beq.n	800695a <HAL_DMA_IRQHandler+0x2ee>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a54      	ldr	r2, [pc, #336]	; (8006a9c <HAL_DMA_IRQHandler+0x430>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d004      	beq.n	800695a <HAL_DMA_IRQHandler+0x2ee>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a52      	ldr	r2, [pc, #328]	; (8006aa0 <HAL_DMA_IRQHandler+0x434>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d10a      	bne.n	8006970 <HAL_DMA_IRQHandler+0x304>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006964:	2b00      	cmp	r3, #0
 8006966:	bf14      	ite	ne
 8006968:	2301      	movne	r3, #1
 800696a:	2300      	moveq	r3, #0
 800696c:	b2db      	uxtb	r3, r3
 800696e:	e003      	b.n	8006978 <HAL_DMA_IRQHandler+0x30c>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2300      	movs	r3, #0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00d      	beq.n	8006998 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006980:	f003 031f 	and.w	r3, r3, #31
 8006984:	2201      	movs	r2, #1
 8006986:	409a      	lsls	r2, r3
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006990:	f043 0202 	orr.w	r2, r3, #2
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800699c:	f003 031f 	and.w	r3, r3, #31
 80069a0:	2204      	movs	r2, #4
 80069a2:	409a      	lsls	r2, r3
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	4013      	ands	r3, r2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 808f 	beq.w	8006acc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a2c      	ldr	r2, [pc, #176]	; (8006a64 <HAL_DMA_IRQHandler+0x3f8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d04a      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x3e2>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a2a      	ldr	r2, [pc, #168]	; (8006a68 <HAL_DMA_IRQHandler+0x3fc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d045      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x3e2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a29      	ldr	r2, [pc, #164]	; (8006a6c <HAL_DMA_IRQHandler+0x400>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d040      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x3e2>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a27      	ldr	r2, [pc, #156]	; (8006a70 <HAL_DMA_IRQHandler+0x404>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d03b      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x3e2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a26      	ldr	r2, [pc, #152]	; (8006a74 <HAL_DMA_IRQHandler+0x408>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d036      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x3e2>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a24      	ldr	r2, [pc, #144]	; (8006a78 <HAL_DMA_IRQHandler+0x40c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d031      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x3e2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a23      	ldr	r2, [pc, #140]	; (8006a7c <HAL_DMA_IRQHandler+0x410>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d02c      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x3e2>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a21      	ldr	r2, [pc, #132]	; (8006a80 <HAL_DMA_IRQHandler+0x414>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d027      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x3e2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a20      	ldr	r2, [pc, #128]	; (8006a84 <HAL_DMA_IRQHandler+0x418>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d022      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x3e2>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a1e      	ldr	r2, [pc, #120]	; (8006a88 <HAL_DMA_IRQHandler+0x41c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d01d      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x3e2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a1d      	ldr	r2, [pc, #116]	; (8006a8c <HAL_DMA_IRQHandler+0x420>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d018      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x3e2>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a1b      	ldr	r2, [pc, #108]	; (8006a90 <HAL_DMA_IRQHandler+0x424>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d013      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x3e2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a1a      	ldr	r2, [pc, #104]	; (8006a94 <HAL_DMA_IRQHandler+0x428>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d00e      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x3e2>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a18      	ldr	r2, [pc, #96]	; (8006a98 <HAL_DMA_IRQHandler+0x42c>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d009      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x3e2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a17      	ldr	r2, [pc, #92]	; (8006a9c <HAL_DMA_IRQHandler+0x430>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d004      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x3e2>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a15      	ldr	r2, [pc, #84]	; (8006aa0 <HAL_DMA_IRQHandler+0x434>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d12a      	bne.n	8006aa4 <HAL_DMA_IRQHandler+0x438>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	bf14      	ite	ne
 8006a5c:	2301      	movne	r3, #1
 8006a5e:	2300      	moveq	r3, #0
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	e023      	b.n	8006aac <HAL_DMA_IRQHandler+0x440>
 8006a64:	40020010 	.word	0x40020010
 8006a68:	40020028 	.word	0x40020028
 8006a6c:	40020040 	.word	0x40020040
 8006a70:	40020058 	.word	0x40020058
 8006a74:	40020070 	.word	0x40020070
 8006a78:	40020088 	.word	0x40020088
 8006a7c:	400200a0 	.word	0x400200a0
 8006a80:	400200b8 	.word	0x400200b8
 8006a84:	40020410 	.word	0x40020410
 8006a88:	40020428 	.word	0x40020428
 8006a8c:	40020440 	.word	0x40020440
 8006a90:	40020458 	.word	0x40020458
 8006a94:	40020470 	.word	0x40020470
 8006a98:	40020488 	.word	0x40020488
 8006a9c:	400204a0 	.word	0x400204a0
 8006aa0:	400204b8 	.word	0x400204b8
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00d      	beq.n	8006acc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab4:	f003 031f 	and.w	r3, r3, #31
 8006ab8:	2204      	movs	r2, #4
 8006aba:	409a      	lsls	r2, r3
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac4:	f043 0204 	orr.w	r2, r3, #4
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad0:	f003 031f 	and.w	r3, r3, #31
 8006ad4:	2210      	movs	r2, #16
 8006ad6:	409a      	lsls	r2, r3
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	4013      	ands	r3, r2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 80a6 	beq.w	8006c2e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a85      	ldr	r2, [pc, #532]	; (8006cfc <HAL_DMA_IRQHandler+0x690>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d04a      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x516>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a83      	ldr	r2, [pc, #524]	; (8006d00 <HAL_DMA_IRQHandler+0x694>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d045      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x516>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a82      	ldr	r2, [pc, #520]	; (8006d04 <HAL_DMA_IRQHandler+0x698>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d040      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x516>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a80      	ldr	r2, [pc, #512]	; (8006d08 <HAL_DMA_IRQHandler+0x69c>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d03b      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x516>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a7f      	ldr	r2, [pc, #508]	; (8006d0c <HAL_DMA_IRQHandler+0x6a0>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d036      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x516>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a7d      	ldr	r2, [pc, #500]	; (8006d10 <HAL_DMA_IRQHandler+0x6a4>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d031      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x516>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a7c      	ldr	r2, [pc, #496]	; (8006d14 <HAL_DMA_IRQHandler+0x6a8>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d02c      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x516>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a7a      	ldr	r2, [pc, #488]	; (8006d18 <HAL_DMA_IRQHandler+0x6ac>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d027      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x516>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a79      	ldr	r2, [pc, #484]	; (8006d1c <HAL_DMA_IRQHandler+0x6b0>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d022      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x516>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a77      	ldr	r2, [pc, #476]	; (8006d20 <HAL_DMA_IRQHandler+0x6b4>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d01d      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x516>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a76      	ldr	r2, [pc, #472]	; (8006d24 <HAL_DMA_IRQHandler+0x6b8>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d018      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x516>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a74      	ldr	r2, [pc, #464]	; (8006d28 <HAL_DMA_IRQHandler+0x6bc>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d013      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x516>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a73      	ldr	r2, [pc, #460]	; (8006d2c <HAL_DMA_IRQHandler+0x6c0>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d00e      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x516>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a71      	ldr	r2, [pc, #452]	; (8006d30 <HAL_DMA_IRQHandler+0x6c4>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d009      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x516>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a70      	ldr	r2, [pc, #448]	; (8006d34 <HAL_DMA_IRQHandler+0x6c8>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d004      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x516>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a6e      	ldr	r2, [pc, #440]	; (8006d38 <HAL_DMA_IRQHandler+0x6cc>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d10a      	bne.n	8006b98 <HAL_DMA_IRQHandler+0x52c>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0308 	and.w	r3, r3, #8
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	bf14      	ite	ne
 8006b90:	2301      	movne	r3, #1
 8006b92:	2300      	moveq	r3, #0
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	e009      	b.n	8006bac <HAL_DMA_IRQHandler+0x540>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0304 	and.w	r3, r3, #4
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	bf14      	ite	ne
 8006ba6:	2301      	movne	r3, #1
 8006ba8:	2300      	moveq	r3, #0
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d03e      	beq.n	8006c2e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb4:	f003 031f 	and.w	r3, r3, #31
 8006bb8:	2210      	movs	r2, #16
 8006bba:	409a      	lsls	r2, r3
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d018      	beq.n	8006c00 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d108      	bne.n	8006bee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d024      	beq.n	8006c2e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	4798      	blx	r3
 8006bec:	e01f      	b.n	8006c2e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d01b      	beq.n	8006c2e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
 8006bfe:	e016      	b.n	8006c2e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d107      	bne.n	8006c1e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0208 	bic.w	r2, r2, #8
 8006c1c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c32:	f003 031f 	and.w	r3, r3, #31
 8006c36:	2220      	movs	r2, #32
 8006c38:	409a      	lsls	r2, r3
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f000 8110 	beq.w	8006e64 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a2c      	ldr	r2, [pc, #176]	; (8006cfc <HAL_DMA_IRQHandler+0x690>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d04a      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x678>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a2b      	ldr	r2, [pc, #172]	; (8006d00 <HAL_DMA_IRQHandler+0x694>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d045      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x678>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a29      	ldr	r2, [pc, #164]	; (8006d04 <HAL_DMA_IRQHandler+0x698>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d040      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x678>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a28      	ldr	r2, [pc, #160]	; (8006d08 <HAL_DMA_IRQHandler+0x69c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d03b      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x678>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a26      	ldr	r2, [pc, #152]	; (8006d0c <HAL_DMA_IRQHandler+0x6a0>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d036      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x678>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a25      	ldr	r2, [pc, #148]	; (8006d10 <HAL_DMA_IRQHandler+0x6a4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d031      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x678>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a23      	ldr	r2, [pc, #140]	; (8006d14 <HAL_DMA_IRQHandler+0x6a8>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d02c      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x678>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a22      	ldr	r2, [pc, #136]	; (8006d18 <HAL_DMA_IRQHandler+0x6ac>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d027      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x678>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a20      	ldr	r2, [pc, #128]	; (8006d1c <HAL_DMA_IRQHandler+0x6b0>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d022      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x678>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a1f      	ldr	r2, [pc, #124]	; (8006d20 <HAL_DMA_IRQHandler+0x6b4>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d01d      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x678>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a1d      	ldr	r2, [pc, #116]	; (8006d24 <HAL_DMA_IRQHandler+0x6b8>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d018      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x678>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a1c      	ldr	r2, [pc, #112]	; (8006d28 <HAL_DMA_IRQHandler+0x6bc>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d013      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x678>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a1a      	ldr	r2, [pc, #104]	; (8006d2c <HAL_DMA_IRQHandler+0x6c0>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d00e      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x678>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a19      	ldr	r2, [pc, #100]	; (8006d30 <HAL_DMA_IRQHandler+0x6c4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d009      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x678>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a17      	ldr	r2, [pc, #92]	; (8006d34 <HAL_DMA_IRQHandler+0x6c8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d004      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x678>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a16      	ldr	r2, [pc, #88]	; (8006d38 <HAL_DMA_IRQHandler+0x6cc>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d12b      	bne.n	8006d3c <HAL_DMA_IRQHandler+0x6d0>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0310 	and.w	r3, r3, #16
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	bf14      	ite	ne
 8006cf2:	2301      	movne	r3, #1
 8006cf4:	2300      	moveq	r3, #0
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	e02a      	b.n	8006d50 <HAL_DMA_IRQHandler+0x6e4>
 8006cfa:	bf00      	nop
 8006cfc:	40020010 	.word	0x40020010
 8006d00:	40020028 	.word	0x40020028
 8006d04:	40020040 	.word	0x40020040
 8006d08:	40020058 	.word	0x40020058
 8006d0c:	40020070 	.word	0x40020070
 8006d10:	40020088 	.word	0x40020088
 8006d14:	400200a0 	.word	0x400200a0
 8006d18:	400200b8 	.word	0x400200b8
 8006d1c:	40020410 	.word	0x40020410
 8006d20:	40020428 	.word	0x40020428
 8006d24:	40020440 	.word	0x40020440
 8006d28:	40020458 	.word	0x40020458
 8006d2c:	40020470 	.word	0x40020470
 8006d30:	40020488 	.word	0x40020488
 8006d34:	400204a0 	.word	0x400204a0
 8006d38:	400204b8 	.word	0x400204b8
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	bf14      	ite	ne
 8006d4a:	2301      	movne	r3, #1
 8006d4c:	2300      	moveq	r3, #0
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 8087 	beq.w	8006e64 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d5a:	f003 031f 	and.w	r3, r3, #31
 8006d5e:	2220      	movs	r2, #32
 8006d60:	409a      	lsls	r2, r3
 8006d62:	6a3b      	ldr	r3, [r7, #32]
 8006d64:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	d139      	bne.n	8006de6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f022 0216 	bic.w	r2, r2, #22
 8006d80:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	695a      	ldr	r2, [r3, #20]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d90:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d103      	bne.n	8006da2 <HAL_DMA_IRQHandler+0x736>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d007      	beq.n	8006db2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 0208 	bic.w	r2, r2, #8
 8006db0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db6:	f003 031f 	and.w	r3, r3, #31
 8006dba:	223f      	movs	r2, #63	; 0x3f
 8006dbc:	409a      	lsls	r2, r3
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 834a 	beq.w	8007470 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	4798      	blx	r3
          }
          return;
 8006de4:	e344      	b.n	8007470 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d018      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d108      	bne.n	8006e14 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d02c      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	4798      	blx	r3
 8006e12:	e027      	b.n	8006e64 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d023      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	4798      	blx	r3
 8006e24:	e01e      	b.n	8006e64 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10f      	bne.n	8006e54 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f022 0210 	bic.w	r2, r2, #16
 8006e42:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d003      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 8306 	beq.w	800747a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f000 8088 	beq.w	8006f8c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2204      	movs	r2, #4
 8006e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a7a      	ldr	r2, [pc, #488]	; (8007074 <HAL_DMA_IRQHandler+0xa08>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d04a      	beq.n	8006f24 <HAL_DMA_IRQHandler+0x8b8>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a79      	ldr	r2, [pc, #484]	; (8007078 <HAL_DMA_IRQHandler+0xa0c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d045      	beq.n	8006f24 <HAL_DMA_IRQHandler+0x8b8>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a77      	ldr	r2, [pc, #476]	; (800707c <HAL_DMA_IRQHandler+0xa10>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d040      	beq.n	8006f24 <HAL_DMA_IRQHandler+0x8b8>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a76      	ldr	r2, [pc, #472]	; (8007080 <HAL_DMA_IRQHandler+0xa14>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d03b      	beq.n	8006f24 <HAL_DMA_IRQHandler+0x8b8>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a74      	ldr	r2, [pc, #464]	; (8007084 <HAL_DMA_IRQHandler+0xa18>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d036      	beq.n	8006f24 <HAL_DMA_IRQHandler+0x8b8>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a73      	ldr	r2, [pc, #460]	; (8007088 <HAL_DMA_IRQHandler+0xa1c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d031      	beq.n	8006f24 <HAL_DMA_IRQHandler+0x8b8>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a71      	ldr	r2, [pc, #452]	; (800708c <HAL_DMA_IRQHandler+0xa20>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d02c      	beq.n	8006f24 <HAL_DMA_IRQHandler+0x8b8>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a70      	ldr	r2, [pc, #448]	; (8007090 <HAL_DMA_IRQHandler+0xa24>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d027      	beq.n	8006f24 <HAL_DMA_IRQHandler+0x8b8>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a6e      	ldr	r2, [pc, #440]	; (8007094 <HAL_DMA_IRQHandler+0xa28>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d022      	beq.n	8006f24 <HAL_DMA_IRQHandler+0x8b8>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a6d      	ldr	r2, [pc, #436]	; (8007098 <HAL_DMA_IRQHandler+0xa2c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d01d      	beq.n	8006f24 <HAL_DMA_IRQHandler+0x8b8>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a6b      	ldr	r2, [pc, #428]	; (800709c <HAL_DMA_IRQHandler+0xa30>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d018      	beq.n	8006f24 <HAL_DMA_IRQHandler+0x8b8>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a6a      	ldr	r2, [pc, #424]	; (80070a0 <HAL_DMA_IRQHandler+0xa34>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d013      	beq.n	8006f24 <HAL_DMA_IRQHandler+0x8b8>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a68      	ldr	r2, [pc, #416]	; (80070a4 <HAL_DMA_IRQHandler+0xa38>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00e      	beq.n	8006f24 <HAL_DMA_IRQHandler+0x8b8>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a67      	ldr	r2, [pc, #412]	; (80070a8 <HAL_DMA_IRQHandler+0xa3c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d009      	beq.n	8006f24 <HAL_DMA_IRQHandler+0x8b8>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a65      	ldr	r2, [pc, #404]	; (80070ac <HAL_DMA_IRQHandler+0xa40>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d004      	beq.n	8006f24 <HAL_DMA_IRQHandler+0x8b8>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a64      	ldr	r2, [pc, #400]	; (80070b0 <HAL_DMA_IRQHandler+0xa44>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d108      	bne.n	8006f36 <HAL_DMA_IRQHandler+0x8ca>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0201 	bic.w	r2, r2, #1
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	e007      	b.n	8006f46 <HAL_DMA_IRQHandler+0x8da>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0201 	bic.w	r2, r2, #1
 8006f44:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d307      	bcc.n	8006f62 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1f2      	bne.n	8006f46 <HAL_DMA_IRQHandler+0x8da>
 8006f60:	e000      	b.n	8006f64 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006f62:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d004      	beq.n	8006f7c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2203      	movs	r2, #3
 8006f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006f7a:	e003      	b.n	8006f84 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f000 8272 	beq.w	800747a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	4798      	blx	r3
 8006f9e:	e26c      	b.n	800747a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a43      	ldr	r2, [pc, #268]	; (80070b4 <HAL_DMA_IRQHandler+0xa48>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d022      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x984>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a42      	ldr	r2, [pc, #264]	; (80070b8 <HAL_DMA_IRQHandler+0xa4c>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d01d      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x984>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a40      	ldr	r2, [pc, #256]	; (80070bc <HAL_DMA_IRQHandler+0xa50>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d018      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x984>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a3f      	ldr	r2, [pc, #252]	; (80070c0 <HAL_DMA_IRQHandler+0xa54>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d013      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x984>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a3d      	ldr	r2, [pc, #244]	; (80070c4 <HAL_DMA_IRQHandler+0xa58>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00e      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x984>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a3c      	ldr	r2, [pc, #240]	; (80070c8 <HAL_DMA_IRQHandler+0xa5c>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d009      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x984>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a3a      	ldr	r2, [pc, #232]	; (80070cc <HAL_DMA_IRQHandler+0xa60>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d004      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x984>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a39      	ldr	r2, [pc, #228]	; (80070d0 <HAL_DMA_IRQHandler+0xa64>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d101      	bne.n	8006ff4 <HAL_DMA_IRQHandler+0x988>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e000      	b.n	8006ff6 <HAL_DMA_IRQHandler+0x98a>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 823f 	beq.w	800747a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007008:	f003 031f 	and.w	r3, r3, #31
 800700c:	2204      	movs	r2, #4
 800700e:	409a      	lsls	r2, r3
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	4013      	ands	r3, r2
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 80cd 	beq.w	80071b4 <HAL_DMA_IRQHandler+0xb48>
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 80c7 	beq.w	80071b4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800702a:	f003 031f 	and.w	r3, r3, #31
 800702e:	2204      	movs	r2, #4
 8007030:	409a      	lsls	r2, r3
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d049      	beq.n	80070d4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d109      	bne.n	800705e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 8210 	beq.w	8007474 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800705c:	e20a      	b.n	8007474 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 8206 	beq.w	8007474 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007070:	e200      	b.n	8007474 <HAL_DMA_IRQHandler+0xe08>
 8007072:	bf00      	nop
 8007074:	40020010 	.word	0x40020010
 8007078:	40020028 	.word	0x40020028
 800707c:	40020040 	.word	0x40020040
 8007080:	40020058 	.word	0x40020058
 8007084:	40020070 	.word	0x40020070
 8007088:	40020088 	.word	0x40020088
 800708c:	400200a0 	.word	0x400200a0
 8007090:	400200b8 	.word	0x400200b8
 8007094:	40020410 	.word	0x40020410
 8007098:	40020428 	.word	0x40020428
 800709c:	40020440 	.word	0x40020440
 80070a0:	40020458 	.word	0x40020458
 80070a4:	40020470 	.word	0x40020470
 80070a8:	40020488 	.word	0x40020488
 80070ac:	400204a0 	.word	0x400204a0
 80070b0:	400204b8 	.word	0x400204b8
 80070b4:	58025408 	.word	0x58025408
 80070b8:	5802541c 	.word	0x5802541c
 80070bc:	58025430 	.word	0x58025430
 80070c0:	58025444 	.word	0x58025444
 80070c4:	58025458 	.word	0x58025458
 80070c8:	5802546c 	.word	0x5802546c
 80070cc:	58025480 	.word	0x58025480
 80070d0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	f003 0320 	and.w	r3, r3, #32
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d160      	bne.n	80071a0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a7f      	ldr	r2, [pc, #508]	; (80072e0 <HAL_DMA_IRQHandler+0xc74>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d04a      	beq.n	800717e <HAL_DMA_IRQHandler+0xb12>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a7d      	ldr	r2, [pc, #500]	; (80072e4 <HAL_DMA_IRQHandler+0xc78>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d045      	beq.n	800717e <HAL_DMA_IRQHandler+0xb12>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a7c      	ldr	r2, [pc, #496]	; (80072e8 <HAL_DMA_IRQHandler+0xc7c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d040      	beq.n	800717e <HAL_DMA_IRQHandler+0xb12>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a7a      	ldr	r2, [pc, #488]	; (80072ec <HAL_DMA_IRQHandler+0xc80>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d03b      	beq.n	800717e <HAL_DMA_IRQHandler+0xb12>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a79      	ldr	r2, [pc, #484]	; (80072f0 <HAL_DMA_IRQHandler+0xc84>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d036      	beq.n	800717e <HAL_DMA_IRQHandler+0xb12>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a77      	ldr	r2, [pc, #476]	; (80072f4 <HAL_DMA_IRQHandler+0xc88>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d031      	beq.n	800717e <HAL_DMA_IRQHandler+0xb12>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a76      	ldr	r2, [pc, #472]	; (80072f8 <HAL_DMA_IRQHandler+0xc8c>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d02c      	beq.n	800717e <HAL_DMA_IRQHandler+0xb12>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a74      	ldr	r2, [pc, #464]	; (80072fc <HAL_DMA_IRQHandler+0xc90>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d027      	beq.n	800717e <HAL_DMA_IRQHandler+0xb12>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a73      	ldr	r2, [pc, #460]	; (8007300 <HAL_DMA_IRQHandler+0xc94>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d022      	beq.n	800717e <HAL_DMA_IRQHandler+0xb12>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a71      	ldr	r2, [pc, #452]	; (8007304 <HAL_DMA_IRQHandler+0xc98>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d01d      	beq.n	800717e <HAL_DMA_IRQHandler+0xb12>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a70      	ldr	r2, [pc, #448]	; (8007308 <HAL_DMA_IRQHandler+0xc9c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d018      	beq.n	800717e <HAL_DMA_IRQHandler+0xb12>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a6e      	ldr	r2, [pc, #440]	; (800730c <HAL_DMA_IRQHandler+0xca0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d013      	beq.n	800717e <HAL_DMA_IRQHandler+0xb12>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a6d      	ldr	r2, [pc, #436]	; (8007310 <HAL_DMA_IRQHandler+0xca4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d00e      	beq.n	800717e <HAL_DMA_IRQHandler+0xb12>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a6b      	ldr	r2, [pc, #428]	; (8007314 <HAL_DMA_IRQHandler+0xca8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d009      	beq.n	800717e <HAL_DMA_IRQHandler+0xb12>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a6a      	ldr	r2, [pc, #424]	; (8007318 <HAL_DMA_IRQHandler+0xcac>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d004      	beq.n	800717e <HAL_DMA_IRQHandler+0xb12>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a68      	ldr	r2, [pc, #416]	; (800731c <HAL_DMA_IRQHandler+0xcb0>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d108      	bne.n	8007190 <HAL_DMA_IRQHandler+0xb24>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 0208 	bic.w	r2, r2, #8
 800718c:	601a      	str	r2, [r3, #0]
 800718e:	e007      	b.n	80071a0 <HAL_DMA_IRQHandler+0xb34>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0204 	bic.w	r2, r2, #4
 800719e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 8165 	beq.w	8007474 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071b2:	e15f      	b.n	8007474 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b8:	f003 031f 	and.w	r3, r3, #31
 80071bc:	2202      	movs	r2, #2
 80071be:	409a      	lsls	r2, r3
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	4013      	ands	r3, r2
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 80c5 	beq.w	8007354 <HAL_DMA_IRQHandler+0xce8>
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 80bf 	beq.w	8007354 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071da:	f003 031f 	and.w	r3, r3, #31
 80071de:	2202      	movs	r2, #2
 80071e0:	409a      	lsls	r2, r3
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d018      	beq.n	8007222 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d109      	bne.n	800720e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 813a 	beq.w	8007478 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800720c:	e134      	b.n	8007478 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 8130 	beq.w	8007478 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007220:	e12a      	b.n	8007478 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f003 0320 	and.w	r3, r3, #32
 8007228:	2b00      	cmp	r3, #0
 800722a:	f040 8089 	bne.w	8007340 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a2b      	ldr	r2, [pc, #172]	; (80072e0 <HAL_DMA_IRQHandler+0xc74>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d04a      	beq.n	80072ce <HAL_DMA_IRQHandler+0xc62>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a29      	ldr	r2, [pc, #164]	; (80072e4 <HAL_DMA_IRQHandler+0xc78>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d045      	beq.n	80072ce <HAL_DMA_IRQHandler+0xc62>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a28      	ldr	r2, [pc, #160]	; (80072e8 <HAL_DMA_IRQHandler+0xc7c>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d040      	beq.n	80072ce <HAL_DMA_IRQHandler+0xc62>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a26      	ldr	r2, [pc, #152]	; (80072ec <HAL_DMA_IRQHandler+0xc80>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d03b      	beq.n	80072ce <HAL_DMA_IRQHandler+0xc62>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a25      	ldr	r2, [pc, #148]	; (80072f0 <HAL_DMA_IRQHandler+0xc84>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d036      	beq.n	80072ce <HAL_DMA_IRQHandler+0xc62>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a23      	ldr	r2, [pc, #140]	; (80072f4 <HAL_DMA_IRQHandler+0xc88>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d031      	beq.n	80072ce <HAL_DMA_IRQHandler+0xc62>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a22      	ldr	r2, [pc, #136]	; (80072f8 <HAL_DMA_IRQHandler+0xc8c>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d02c      	beq.n	80072ce <HAL_DMA_IRQHandler+0xc62>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a20      	ldr	r2, [pc, #128]	; (80072fc <HAL_DMA_IRQHandler+0xc90>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d027      	beq.n	80072ce <HAL_DMA_IRQHandler+0xc62>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a1f      	ldr	r2, [pc, #124]	; (8007300 <HAL_DMA_IRQHandler+0xc94>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d022      	beq.n	80072ce <HAL_DMA_IRQHandler+0xc62>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a1d      	ldr	r2, [pc, #116]	; (8007304 <HAL_DMA_IRQHandler+0xc98>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d01d      	beq.n	80072ce <HAL_DMA_IRQHandler+0xc62>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a1c      	ldr	r2, [pc, #112]	; (8007308 <HAL_DMA_IRQHandler+0xc9c>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d018      	beq.n	80072ce <HAL_DMA_IRQHandler+0xc62>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a1a      	ldr	r2, [pc, #104]	; (800730c <HAL_DMA_IRQHandler+0xca0>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d013      	beq.n	80072ce <HAL_DMA_IRQHandler+0xc62>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a19      	ldr	r2, [pc, #100]	; (8007310 <HAL_DMA_IRQHandler+0xca4>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d00e      	beq.n	80072ce <HAL_DMA_IRQHandler+0xc62>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a17      	ldr	r2, [pc, #92]	; (8007314 <HAL_DMA_IRQHandler+0xca8>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d009      	beq.n	80072ce <HAL_DMA_IRQHandler+0xc62>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a16      	ldr	r2, [pc, #88]	; (8007318 <HAL_DMA_IRQHandler+0xcac>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d004      	beq.n	80072ce <HAL_DMA_IRQHandler+0xc62>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a14      	ldr	r2, [pc, #80]	; (800731c <HAL_DMA_IRQHandler+0xcb0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d128      	bne.n	8007320 <HAL_DMA_IRQHandler+0xcb4>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f022 0214 	bic.w	r2, r2, #20
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	e027      	b.n	8007330 <HAL_DMA_IRQHandler+0xcc4>
 80072e0:	40020010 	.word	0x40020010
 80072e4:	40020028 	.word	0x40020028
 80072e8:	40020040 	.word	0x40020040
 80072ec:	40020058 	.word	0x40020058
 80072f0:	40020070 	.word	0x40020070
 80072f4:	40020088 	.word	0x40020088
 80072f8:	400200a0 	.word	0x400200a0
 80072fc:	400200b8 	.word	0x400200b8
 8007300:	40020410 	.word	0x40020410
 8007304:	40020428 	.word	0x40020428
 8007308:	40020440 	.word	0x40020440
 800730c:	40020458 	.word	0x40020458
 8007310:	40020470 	.word	0x40020470
 8007314:	40020488 	.word	0x40020488
 8007318:	400204a0 	.word	0x400204a0
 800731c:	400204b8 	.word	0x400204b8
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 020a 	bic.w	r2, r2, #10
 800732e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 8097 	beq.w	8007478 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007352:	e091      	b.n	8007478 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007358:	f003 031f 	and.w	r3, r3, #31
 800735c:	2208      	movs	r2, #8
 800735e:	409a      	lsls	r2, r3
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	4013      	ands	r3, r2
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 8088 	beq.w	800747a <HAL_DMA_IRQHandler+0xe0e>
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	f003 0308 	and.w	r3, r3, #8
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 8082 	beq.w	800747a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a41      	ldr	r2, [pc, #260]	; (8007480 <HAL_DMA_IRQHandler+0xe14>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d04a      	beq.n	8007416 <HAL_DMA_IRQHandler+0xdaa>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a3f      	ldr	r2, [pc, #252]	; (8007484 <HAL_DMA_IRQHandler+0xe18>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d045      	beq.n	8007416 <HAL_DMA_IRQHandler+0xdaa>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a3e      	ldr	r2, [pc, #248]	; (8007488 <HAL_DMA_IRQHandler+0xe1c>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d040      	beq.n	8007416 <HAL_DMA_IRQHandler+0xdaa>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a3c      	ldr	r2, [pc, #240]	; (800748c <HAL_DMA_IRQHandler+0xe20>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d03b      	beq.n	8007416 <HAL_DMA_IRQHandler+0xdaa>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a3b      	ldr	r2, [pc, #236]	; (8007490 <HAL_DMA_IRQHandler+0xe24>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d036      	beq.n	8007416 <HAL_DMA_IRQHandler+0xdaa>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a39      	ldr	r2, [pc, #228]	; (8007494 <HAL_DMA_IRQHandler+0xe28>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d031      	beq.n	8007416 <HAL_DMA_IRQHandler+0xdaa>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a38      	ldr	r2, [pc, #224]	; (8007498 <HAL_DMA_IRQHandler+0xe2c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d02c      	beq.n	8007416 <HAL_DMA_IRQHandler+0xdaa>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a36      	ldr	r2, [pc, #216]	; (800749c <HAL_DMA_IRQHandler+0xe30>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d027      	beq.n	8007416 <HAL_DMA_IRQHandler+0xdaa>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a35      	ldr	r2, [pc, #212]	; (80074a0 <HAL_DMA_IRQHandler+0xe34>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d022      	beq.n	8007416 <HAL_DMA_IRQHandler+0xdaa>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a33      	ldr	r2, [pc, #204]	; (80074a4 <HAL_DMA_IRQHandler+0xe38>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d01d      	beq.n	8007416 <HAL_DMA_IRQHandler+0xdaa>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a32      	ldr	r2, [pc, #200]	; (80074a8 <HAL_DMA_IRQHandler+0xe3c>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d018      	beq.n	8007416 <HAL_DMA_IRQHandler+0xdaa>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a30      	ldr	r2, [pc, #192]	; (80074ac <HAL_DMA_IRQHandler+0xe40>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d013      	beq.n	8007416 <HAL_DMA_IRQHandler+0xdaa>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a2f      	ldr	r2, [pc, #188]	; (80074b0 <HAL_DMA_IRQHandler+0xe44>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d00e      	beq.n	8007416 <HAL_DMA_IRQHandler+0xdaa>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a2d      	ldr	r2, [pc, #180]	; (80074b4 <HAL_DMA_IRQHandler+0xe48>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d009      	beq.n	8007416 <HAL_DMA_IRQHandler+0xdaa>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a2c      	ldr	r2, [pc, #176]	; (80074b8 <HAL_DMA_IRQHandler+0xe4c>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d004      	beq.n	8007416 <HAL_DMA_IRQHandler+0xdaa>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a2a      	ldr	r2, [pc, #168]	; (80074bc <HAL_DMA_IRQHandler+0xe50>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d108      	bne.n	8007428 <HAL_DMA_IRQHandler+0xdbc>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 021c 	bic.w	r2, r2, #28
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	e007      	b.n	8007438 <HAL_DMA_IRQHandler+0xdcc>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f022 020e 	bic.w	r2, r2, #14
 8007436:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800743c:	f003 031f 	and.w	r3, r3, #31
 8007440:	2201      	movs	r2, #1
 8007442:	409a      	lsls	r2, r3
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007462:	2b00      	cmp	r3, #0
 8007464:	d009      	beq.n	800747a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	4798      	blx	r3
 800746e:	e004      	b.n	800747a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007470:	bf00      	nop
 8007472:	e002      	b.n	800747a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007474:	bf00      	nop
 8007476:	e000      	b.n	800747a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007478:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800747a:	3728      	adds	r7, #40	; 0x28
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	40020010 	.word	0x40020010
 8007484:	40020028 	.word	0x40020028
 8007488:	40020040 	.word	0x40020040
 800748c:	40020058 	.word	0x40020058
 8007490:	40020070 	.word	0x40020070
 8007494:	40020088 	.word	0x40020088
 8007498:	400200a0 	.word	0x400200a0
 800749c:	400200b8 	.word	0x400200b8
 80074a0:	40020410 	.word	0x40020410
 80074a4:	40020428 	.word	0x40020428
 80074a8:	40020440 	.word	0x40020440
 80074ac:	40020458 	.word	0x40020458
 80074b0:	40020470 	.word	0x40020470
 80074b4:	40020488 	.word	0x40020488
 80074b8:	400204a0 	.word	0x400204a0
 80074bc:	400204b8 	.word	0x400204b8

080074c0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
 80074cc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a7f      	ldr	r2, [pc, #508]	; (80076dc <DMA_SetConfig+0x21c>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d072      	beq.n	80075ca <DMA_SetConfig+0x10a>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a7d      	ldr	r2, [pc, #500]	; (80076e0 <DMA_SetConfig+0x220>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d06d      	beq.n	80075ca <DMA_SetConfig+0x10a>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a7c      	ldr	r2, [pc, #496]	; (80076e4 <DMA_SetConfig+0x224>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d068      	beq.n	80075ca <DMA_SetConfig+0x10a>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a7a      	ldr	r2, [pc, #488]	; (80076e8 <DMA_SetConfig+0x228>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d063      	beq.n	80075ca <DMA_SetConfig+0x10a>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a79      	ldr	r2, [pc, #484]	; (80076ec <DMA_SetConfig+0x22c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d05e      	beq.n	80075ca <DMA_SetConfig+0x10a>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a77      	ldr	r2, [pc, #476]	; (80076f0 <DMA_SetConfig+0x230>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d059      	beq.n	80075ca <DMA_SetConfig+0x10a>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a76      	ldr	r2, [pc, #472]	; (80076f4 <DMA_SetConfig+0x234>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d054      	beq.n	80075ca <DMA_SetConfig+0x10a>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a74      	ldr	r2, [pc, #464]	; (80076f8 <DMA_SetConfig+0x238>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d04f      	beq.n	80075ca <DMA_SetConfig+0x10a>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a73      	ldr	r2, [pc, #460]	; (80076fc <DMA_SetConfig+0x23c>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d04a      	beq.n	80075ca <DMA_SetConfig+0x10a>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a71      	ldr	r2, [pc, #452]	; (8007700 <DMA_SetConfig+0x240>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d045      	beq.n	80075ca <DMA_SetConfig+0x10a>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a70      	ldr	r2, [pc, #448]	; (8007704 <DMA_SetConfig+0x244>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d040      	beq.n	80075ca <DMA_SetConfig+0x10a>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a6e      	ldr	r2, [pc, #440]	; (8007708 <DMA_SetConfig+0x248>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d03b      	beq.n	80075ca <DMA_SetConfig+0x10a>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a6d      	ldr	r2, [pc, #436]	; (800770c <DMA_SetConfig+0x24c>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d036      	beq.n	80075ca <DMA_SetConfig+0x10a>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a6b      	ldr	r2, [pc, #428]	; (8007710 <DMA_SetConfig+0x250>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d031      	beq.n	80075ca <DMA_SetConfig+0x10a>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a6a      	ldr	r2, [pc, #424]	; (8007714 <DMA_SetConfig+0x254>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d02c      	beq.n	80075ca <DMA_SetConfig+0x10a>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a68      	ldr	r2, [pc, #416]	; (8007718 <DMA_SetConfig+0x258>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d027      	beq.n	80075ca <DMA_SetConfig+0x10a>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a67      	ldr	r2, [pc, #412]	; (800771c <DMA_SetConfig+0x25c>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d022      	beq.n	80075ca <DMA_SetConfig+0x10a>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a65      	ldr	r2, [pc, #404]	; (8007720 <DMA_SetConfig+0x260>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d01d      	beq.n	80075ca <DMA_SetConfig+0x10a>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a64      	ldr	r2, [pc, #400]	; (8007724 <DMA_SetConfig+0x264>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d018      	beq.n	80075ca <DMA_SetConfig+0x10a>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a62      	ldr	r2, [pc, #392]	; (8007728 <DMA_SetConfig+0x268>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d013      	beq.n	80075ca <DMA_SetConfig+0x10a>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a61      	ldr	r2, [pc, #388]	; (800772c <DMA_SetConfig+0x26c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d00e      	beq.n	80075ca <DMA_SetConfig+0x10a>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a5f      	ldr	r2, [pc, #380]	; (8007730 <DMA_SetConfig+0x270>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d009      	beq.n	80075ca <DMA_SetConfig+0x10a>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a5e      	ldr	r2, [pc, #376]	; (8007734 <DMA_SetConfig+0x274>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d004      	beq.n	80075ca <DMA_SetConfig+0x10a>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a5c      	ldr	r2, [pc, #368]	; (8007738 <DMA_SetConfig+0x278>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d101      	bne.n	80075ce <DMA_SetConfig+0x10e>
 80075ca:	2301      	movs	r3, #1
 80075cc:	e000      	b.n	80075d0 <DMA_SetConfig+0x110>
 80075ce:	2300      	movs	r3, #0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00d      	beq.n	80075f0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80075dc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d004      	beq.n	80075f0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80075ee:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a39      	ldr	r2, [pc, #228]	; (80076dc <DMA_SetConfig+0x21c>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d04a      	beq.n	8007690 <DMA_SetConfig+0x1d0>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a38      	ldr	r2, [pc, #224]	; (80076e0 <DMA_SetConfig+0x220>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d045      	beq.n	8007690 <DMA_SetConfig+0x1d0>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a36      	ldr	r2, [pc, #216]	; (80076e4 <DMA_SetConfig+0x224>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d040      	beq.n	8007690 <DMA_SetConfig+0x1d0>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a35      	ldr	r2, [pc, #212]	; (80076e8 <DMA_SetConfig+0x228>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d03b      	beq.n	8007690 <DMA_SetConfig+0x1d0>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a33      	ldr	r2, [pc, #204]	; (80076ec <DMA_SetConfig+0x22c>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d036      	beq.n	8007690 <DMA_SetConfig+0x1d0>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a32      	ldr	r2, [pc, #200]	; (80076f0 <DMA_SetConfig+0x230>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d031      	beq.n	8007690 <DMA_SetConfig+0x1d0>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a30      	ldr	r2, [pc, #192]	; (80076f4 <DMA_SetConfig+0x234>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d02c      	beq.n	8007690 <DMA_SetConfig+0x1d0>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a2f      	ldr	r2, [pc, #188]	; (80076f8 <DMA_SetConfig+0x238>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d027      	beq.n	8007690 <DMA_SetConfig+0x1d0>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a2d      	ldr	r2, [pc, #180]	; (80076fc <DMA_SetConfig+0x23c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d022      	beq.n	8007690 <DMA_SetConfig+0x1d0>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a2c      	ldr	r2, [pc, #176]	; (8007700 <DMA_SetConfig+0x240>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d01d      	beq.n	8007690 <DMA_SetConfig+0x1d0>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a2a      	ldr	r2, [pc, #168]	; (8007704 <DMA_SetConfig+0x244>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d018      	beq.n	8007690 <DMA_SetConfig+0x1d0>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a29      	ldr	r2, [pc, #164]	; (8007708 <DMA_SetConfig+0x248>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d013      	beq.n	8007690 <DMA_SetConfig+0x1d0>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a27      	ldr	r2, [pc, #156]	; (800770c <DMA_SetConfig+0x24c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d00e      	beq.n	8007690 <DMA_SetConfig+0x1d0>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a26      	ldr	r2, [pc, #152]	; (8007710 <DMA_SetConfig+0x250>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d009      	beq.n	8007690 <DMA_SetConfig+0x1d0>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a24      	ldr	r2, [pc, #144]	; (8007714 <DMA_SetConfig+0x254>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d004      	beq.n	8007690 <DMA_SetConfig+0x1d0>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a23      	ldr	r2, [pc, #140]	; (8007718 <DMA_SetConfig+0x258>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d101      	bne.n	8007694 <DMA_SetConfig+0x1d4>
 8007690:	2301      	movs	r3, #1
 8007692:	e000      	b.n	8007696 <DMA_SetConfig+0x1d6>
 8007694:	2300      	movs	r3, #0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d059      	beq.n	800774e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800769e:	f003 031f 	and.w	r3, r3, #31
 80076a2:	223f      	movs	r2, #63	; 0x3f
 80076a4:	409a      	lsls	r2, r3
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80076b8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	2b40      	cmp	r3, #64	; 0x40
 80076c8:	d138      	bne.n	800773c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80076da:	e086      	b.n	80077ea <DMA_SetConfig+0x32a>
 80076dc:	40020010 	.word	0x40020010
 80076e0:	40020028 	.word	0x40020028
 80076e4:	40020040 	.word	0x40020040
 80076e8:	40020058 	.word	0x40020058
 80076ec:	40020070 	.word	0x40020070
 80076f0:	40020088 	.word	0x40020088
 80076f4:	400200a0 	.word	0x400200a0
 80076f8:	400200b8 	.word	0x400200b8
 80076fc:	40020410 	.word	0x40020410
 8007700:	40020428 	.word	0x40020428
 8007704:	40020440 	.word	0x40020440
 8007708:	40020458 	.word	0x40020458
 800770c:	40020470 	.word	0x40020470
 8007710:	40020488 	.word	0x40020488
 8007714:	400204a0 	.word	0x400204a0
 8007718:	400204b8 	.word	0x400204b8
 800771c:	58025408 	.word	0x58025408
 8007720:	5802541c 	.word	0x5802541c
 8007724:	58025430 	.word	0x58025430
 8007728:	58025444 	.word	0x58025444
 800772c:	58025458 	.word	0x58025458
 8007730:	5802546c 	.word	0x5802546c
 8007734:	58025480 	.word	0x58025480
 8007738:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	60da      	str	r2, [r3, #12]
}
 800774c:	e04d      	b.n	80077ea <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a29      	ldr	r2, [pc, #164]	; (80077f8 <DMA_SetConfig+0x338>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d022      	beq.n	800779e <DMA_SetConfig+0x2de>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a27      	ldr	r2, [pc, #156]	; (80077fc <DMA_SetConfig+0x33c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d01d      	beq.n	800779e <DMA_SetConfig+0x2de>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a26      	ldr	r2, [pc, #152]	; (8007800 <DMA_SetConfig+0x340>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d018      	beq.n	800779e <DMA_SetConfig+0x2de>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a24      	ldr	r2, [pc, #144]	; (8007804 <DMA_SetConfig+0x344>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d013      	beq.n	800779e <DMA_SetConfig+0x2de>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a23      	ldr	r2, [pc, #140]	; (8007808 <DMA_SetConfig+0x348>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d00e      	beq.n	800779e <DMA_SetConfig+0x2de>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a21      	ldr	r2, [pc, #132]	; (800780c <DMA_SetConfig+0x34c>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d009      	beq.n	800779e <DMA_SetConfig+0x2de>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a20      	ldr	r2, [pc, #128]	; (8007810 <DMA_SetConfig+0x350>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d004      	beq.n	800779e <DMA_SetConfig+0x2de>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a1e      	ldr	r2, [pc, #120]	; (8007814 <DMA_SetConfig+0x354>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d101      	bne.n	80077a2 <DMA_SetConfig+0x2e2>
 800779e:	2301      	movs	r3, #1
 80077a0:	e000      	b.n	80077a4 <DMA_SetConfig+0x2e4>
 80077a2:	2300      	movs	r3, #0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d020      	beq.n	80077ea <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ac:	f003 031f 	and.w	r3, r3, #31
 80077b0:	2201      	movs	r2, #1
 80077b2:	409a      	lsls	r2, r3
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	2b40      	cmp	r3, #64	; 0x40
 80077c6:	d108      	bne.n	80077da <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	60da      	str	r2, [r3, #12]
}
 80077d8:	e007      	b.n	80077ea <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	60da      	str	r2, [r3, #12]
}
 80077ea:	bf00      	nop
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	58025408 	.word	0x58025408
 80077fc:	5802541c 	.word	0x5802541c
 8007800:	58025430 	.word	0x58025430
 8007804:	58025444 	.word	0x58025444
 8007808:	58025458 	.word	0x58025458
 800780c:	5802546c 	.word	0x5802546c
 8007810:	58025480 	.word	0x58025480
 8007814:	58025494 	.word	0x58025494

08007818 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a42      	ldr	r2, [pc, #264]	; (8007930 <DMA_CalcBaseAndBitshift+0x118>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d04a      	beq.n	80078c0 <DMA_CalcBaseAndBitshift+0xa8>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a41      	ldr	r2, [pc, #260]	; (8007934 <DMA_CalcBaseAndBitshift+0x11c>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d045      	beq.n	80078c0 <DMA_CalcBaseAndBitshift+0xa8>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a3f      	ldr	r2, [pc, #252]	; (8007938 <DMA_CalcBaseAndBitshift+0x120>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d040      	beq.n	80078c0 <DMA_CalcBaseAndBitshift+0xa8>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a3e      	ldr	r2, [pc, #248]	; (800793c <DMA_CalcBaseAndBitshift+0x124>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d03b      	beq.n	80078c0 <DMA_CalcBaseAndBitshift+0xa8>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a3c      	ldr	r2, [pc, #240]	; (8007940 <DMA_CalcBaseAndBitshift+0x128>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d036      	beq.n	80078c0 <DMA_CalcBaseAndBitshift+0xa8>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a3b      	ldr	r2, [pc, #236]	; (8007944 <DMA_CalcBaseAndBitshift+0x12c>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d031      	beq.n	80078c0 <DMA_CalcBaseAndBitshift+0xa8>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a39      	ldr	r2, [pc, #228]	; (8007948 <DMA_CalcBaseAndBitshift+0x130>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d02c      	beq.n	80078c0 <DMA_CalcBaseAndBitshift+0xa8>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a38      	ldr	r2, [pc, #224]	; (800794c <DMA_CalcBaseAndBitshift+0x134>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d027      	beq.n	80078c0 <DMA_CalcBaseAndBitshift+0xa8>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a36      	ldr	r2, [pc, #216]	; (8007950 <DMA_CalcBaseAndBitshift+0x138>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d022      	beq.n	80078c0 <DMA_CalcBaseAndBitshift+0xa8>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a35      	ldr	r2, [pc, #212]	; (8007954 <DMA_CalcBaseAndBitshift+0x13c>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d01d      	beq.n	80078c0 <DMA_CalcBaseAndBitshift+0xa8>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a33      	ldr	r2, [pc, #204]	; (8007958 <DMA_CalcBaseAndBitshift+0x140>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d018      	beq.n	80078c0 <DMA_CalcBaseAndBitshift+0xa8>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a32      	ldr	r2, [pc, #200]	; (800795c <DMA_CalcBaseAndBitshift+0x144>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d013      	beq.n	80078c0 <DMA_CalcBaseAndBitshift+0xa8>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a30      	ldr	r2, [pc, #192]	; (8007960 <DMA_CalcBaseAndBitshift+0x148>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d00e      	beq.n	80078c0 <DMA_CalcBaseAndBitshift+0xa8>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a2f      	ldr	r2, [pc, #188]	; (8007964 <DMA_CalcBaseAndBitshift+0x14c>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d009      	beq.n	80078c0 <DMA_CalcBaseAndBitshift+0xa8>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a2d      	ldr	r2, [pc, #180]	; (8007968 <DMA_CalcBaseAndBitshift+0x150>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d004      	beq.n	80078c0 <DMA_CalcBaseAndBitshift+0xa8>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a2c      	ldr	r2, [pc, #176]	; (800796c <DMA_CalcBaseAndBitshift+0x154>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d101      	bne.n	80078c4 <DMA_CalcBaseAndBitshift+0xac>
 80078c0:	2301      	movs	r3, #1
 80078c2:	e000      	b.n	80078c6 <DMA_CalcBaseAndBitshift+0xae>
 80078c4:	2300      	movs	r3, #0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d024      	beq.n	8007914 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	3b10      	subs	r3, #16
 80078d2:	4a27      	ldr	r2, [pc, #156]	; (8007970 <DMA_CalcBaseAndBitshift+0x158>)
 80078d4:	fba2 2303 	umull	r2, r3, r2, r3
 80078d8:	091b      	lsrs	r3, r3, #4
 80078da:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	4a24      	ldr	r2, [pc, #144]	; (8007974 <DMA_CalcBaseAndBitshift+0x15c>)
 80078e4:	5cd3      	ldrb	r3, [r2, r3]
 80078e6:	461a      	mov	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d908      	bls.n	8007904 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	461a      	mov	r2, r3
 80078f8:	4b1f      	ldr	r3, [pc, #124]	; (8007978 <DMA_CalcBaseAndBitshift+0x160>)
 80078fa:	4013      	ands	r3, r2
 80078fc:	1d1a      	adds	r2, r3, #4
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	659a      	str	r2, [r3, #88]	; 0x58
 8007902:	e00d      	b.n	8007920 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	461a      	mov	r2, r3
 800790a:	4b1b      	ldr	r3, [pc, #108]	; (8007978 <DMA_CalcBaseAndBitshift+0x160>)
 800790c:	4013      	ands	r3, r2
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	6593      	str	r3, [r2, #88]	; 0x58
 8007912:	e005      	b.n	8007920 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007924:	4618      	mov	r0, r3
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	40020010 	.word	0x40020010
 8007934:	40020028 	.word	0x40020028
 8007938:	40020040 	.word	0x40020040
 800793c:	40020058 	.word	0x40020058
 8007940:	40020070 	.word	0x40020070
 8007944:	40020088 	.word	0x40020088
 8007948:	400200a0 	.word	0x400200a0
 800794c:	400200b8 	.word	0x400200b8
 8007950:	40020410 	.word	0x40020410
 8007954:	40020428 	.word	0x40020428
 8007958:	40020440 	.word	0x40020440
 800795c:	40020458 	.word	0x40020458
 8007960:	40020470 	.word	0x40020470
 8007964:	40020488 	.word	0x40020488
 8007968:	400204a0 	.word	0x400204a0
 800796c:	400204b8 	.word	0x400204b8
 8007970:	aaaaaaab 	.word	0xaaaaaaab
 8007974:	0800eca8 	.word	0x0800eca8
 8007978:	fffffc00 	.word	0xfffffc00

0800797c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d120      	bne.n	80079d2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007994:	2b03      	cmp	r3, #3
 8007996:	d858      	bhi.n	8007a4a <DMA_CheckFifoParam+0xce>
 8007998:	a201      	add	r2, pc, #4	; (adr r2, 80079a0 <DMA_CheckFifoParam+0x24>)
 800799a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799e:	bf00      	nop
 80079a0:	080079b1 	.word	0x080079b1
 80079a4:	080079c3 	.word	0x080079c3
 80079a8:	080079b1 	.word	0x080079b1
 80079ac:	08007a4b 	.word	0x08007a4b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d048      	beq.n	8007a4e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079c0:	e045      	b.n	8007a4e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80079ca:	d142      	bne.n	8007a52 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079d0:	e03f      	b.n	8007a52 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079da:	d123      	bne.n	8007a24 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d838      	bhi.n	8007a56 <DMA_CheckFifoParam+0xda>
 80079e4:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <DMA_CheckFifoParam+0x70>)
 80079e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ea:	bf00      	nop
 80079ec:	080079fd 	.word	0x080079fd
 80079f0:	08007a03 	.word	0x08007a03
 80079f4:	080079fd 	.word	0x080079fd
 80079f8:	08007a15 	.word	0x08007a15
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	73fb      	strb	r3, [r7, #15]
        break;
 8007a00:	e030      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d025      	beq.n	8007a5a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a12:	e022      	b.n	8007a5a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a1c:	d11f      	bne.n	8007a5e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a22:	e01c      	b.n	8007a5e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d902      	bls.n	8007a32 <DMA_CheckFifoParam+0xb6>
 8007a2c:	2b03      	cmp	r3, #3
 8007a2e:	d003      	beq.n	8007a38 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007a30:	e018      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	73fb      	strb	r3, [r7, #15]
        break;
 8007a36:	e015      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00e      	beq.n	8007a62 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	73fb      	strb	r3, [r7, #15]
    break;
 8007a48:	e00b      	b.n	8007a62 <DMA_CheckFifoParam+0xe6>
        break;
 8007a4a:	bf00      	nop
 8007a4c:	e00a      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
        break;
 8007a4e:	bf00      	nop
 8007a50:	e008      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
        break;
 8007a52:	bf00      	nop
 8007a54:	e006      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
        break;
 8007a56:	bf00      	nop
 8007a58:	e004      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
        break;
 8007a5a:	bf00      	nop
 8007a5c:	e002      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
        break;
 8007a5e:	bf00      	nop
 8007a60:	e000      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
    break;
 8007a62:	bf00      	nop
    }
  }

  return status;
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop

08007a74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a38      	ldr	r2, [pc, #224]	; (8007b68 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d022      	beq.n	8007ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a36      	ldr	r2, [pc, #216]	; (8007b6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d01d      	beq.n	8007ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a35      	ldr	r2, [pc, #212]	; (8007b70 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d018      	beq.n	8007ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a33      	ldr	r2, [pc, #204]	; (8007b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d013      	beq.n	8007ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a32      	ldr	r2, [pc, #200]	; (8007b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d00e      	beq.n	8007ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a30      	ldr	r2, [pc, #192]	; (8007b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d009      	beq.n	8007ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a2f      	ldr	r2, [pc, #188]	; (8007b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d004      	beq.n	8007ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a2d      	ldr	r2, [pc, #180]	; (8007b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d101      	bne.n	8007ad6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e000      	b.n	8007ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d01a      	beq.n	8007b12 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	3b08      	subs	r3, #8
 8007ae4:	4a28      	ldr	r2, [pc, #160]	; (8007b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aea:	091b      	lsrs	r3, r3, #4
 8007aec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	4b26      	ldr	r3, [pc, #152]	; (8007b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007af2:	4413      	add	r3, r2
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	461a      	mov	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a24      	ldr	r2, [pc, #144]	; (8007b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007b00:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f003 031f 	and.w	r3, r3, #31
 8007b08:	2201      	movs	r2, #1
 8007b0a:	409a      	lsls	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007b10:	e024      	b.n	8007b5c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	3b10      	subs	r3, #16
 8007b1a:	4a1e      	ldr	r2, [pc, #120]	; (8007b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b20:	091b      	lsrs	r3, r3, #4
 8007b22:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	4a1c      	ldr	r2, [pc, #112]	; (8007b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d806      	bhi.n	8007b3a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	4a1b      	ldr	r2, [pc, #108]	; (8007b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d902      	bls.n	8007b3a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3308      	adds	r3, #8
 8007b38:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	4b18      	ldr	r3, [pc, #96]	; (8007ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	461a      	mov	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a16      	ldr	r2, [pc, #88]	; (8007ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007b4c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f003 031f 	and.w	r3, r3, #31
 8007b54:	2201      	movs	r2, #1
 8007b56:	409a      	lsls	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007b5c:	bf00      	nop
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr
 8007b68:	58025408 	.word	0x58025408
 8007b6c:	5802541c 	.word	0x5802541c
 8007b70:	58025430 	.word	0x58025430
 8007b74:	58025444 	.word	0x58025444
 8007b78:	58025458 	.word	0x58025458
 8007b7c:	5802546c 	.word	0x5802546c
 8007b80:	58025480 	.word	0x58025480
 8007b84:	58025494 	.word	0x58025494
 8007b88:	cccccccd 	.word	0xcccccccd
 8007b8c:	16009600 	.word	0x16009600
 8007b90:	58025880 	.word	0x58025880
 8007b94:	aaaaaaab 	.word	0xaaaaaaab
 8007b98:	400204b8 	.word	0x400204b8
 8007b9c:	4002040f 	.word	0x4002040f
 8007ba0:	10008200 	.word	0x10008200
 8007ba4:	40020880 	.word	0x40020880

08007ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d04a      	beq.n	8007c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b08      	cmp	r3, #8
 8007bc2:	d847      	bhi.n	8007c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a25      	ldr	r2, [pc, #148]	; (8007c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d022      	beq.n	8007c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a24      	ldr	r2, [pc, #144]	; (8007c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d01d      	beq.n	8007c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a22      	ldr	r2, [pc, #136]	; (8007c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d018      	beq.n	8007c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a21      	ldr	r2, [pc, #132]	; (8007c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d013      	beq.n	8007c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a1f      	ldr	r2, [pc, #124]	; (8007c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d00e      	beq.n	8007c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a1e      	ldr	r2, [pc, #120]	; (8007c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d009      	beq.n	8007c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a1c      	ldr	r2, [pc, #112]	; (8007c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d004      	beq.n	8007c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a1b      	ldr	r2, [pc, #108]	; (8007c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d101      	bne.n	8007c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007c14:	2301      	movs	r3, #1
 8007c16:	e000      	b.n	8007c1a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00a      	beq.n	8007c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	4b17      	ldr	r3, [pc, #92]	; (8007c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007c22:	4413      	add	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	461a      	mov	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a15      	ldr	r2, [pc, #84]	; (8007c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007c30:	671a      	str	r2, [r3, #112]	; 0x70
 8007c32:	e009      	b.n	8007c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	4b14      	ldr	r3, [pc, #80]	; (8007c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007c38:	4413      	add	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a11      	ldr	r2, [pc, #68]	; (8007c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007c46:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	409a      	lsls	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007c54:	bf00      	nop
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	58025408 	.word	0x58025408
 8007c64:	5802541c 	.word	0x5802541c
 8007c68:	58025430 	.word	0x58025430
 8007c6c:	58025444 	.word	0x58025444
 8007c70:	58025458 	.word	0x58025458
 8007c74:	5802546c 	.word	0x5802546c
 8007c78:	58025480 	.word	0x58025480
 8007c7c:	58025494 	.word	0x58025494
 8007c80:	1600963f 	.word	0x1600963f
 8007c84:	58025940 	.word	0x58025940
 8007c88:	1000823f 	.word	0x1000823f
 8007c8c:	40020940 	.word	0x40020940

08007c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b089      	sub	sp, #36	; 0x24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007c9e:	4b86      	ldr	r3, [pc, #536]	; (8007eb8 <HAL_GPIO_Init+0x228>)
 8007ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ca2:	e18c      	b.n	8007fbe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	2101      	movs	r1, #1
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	fa01 f303 	lsl.w	r3, r1, r3
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 817e 	beq.w	8007fb8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f003 0303 	and.w	r3, r3, #3
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d005      	beq.n	8007cd4 <HAL_GPIO_Init+0x44>
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f003 0303 	and.w	r3, r3, #3
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d130      	bne.n	8007d36 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	005b      	lsls	r3, r3, #1
 8007cde:	2203      	movs	r2, #3
 8007ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce4:	43db      	mvns	r3, r3
 8007ce6:	69ba      	ldr	r2, [r7, #24]
 8007ce8:	4013      	ands	r3, r2
 8007cea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	68da      	ldr	r2, [r3, #12]
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	005b      	lsls	r3, r3, #1
 8007cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d12:	43db      	mvns	r3, r3
 8007d14:	69ba      	ldr	r2, [r7, #24]
 8007d16:	4013      	ands	r3, r2
 8007d18:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	091b      	lsrs	r3, r3, #4
 8007d20:	f003 0201 	and.w	r2, r3, #1
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2a:	69ba      	ldr	r2, [r7, #24]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f003 0303 	and.w	r3, r3, #3
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	d017      	beq.n	8007d72 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	005b      	lsls	r3, r3, #1
 8007d4c:	2203      	movs	r2, #3
 8007d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d52:	43db      	mvns	r3, r3
 8007d54:	69ba      	ldr	r2, [r7, #24]
 8007d56:	4013      	ands	r3, r2
 8007d58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	689a      	ldr	r2, [r3, #8]
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	005b      	lsls	r3, r3, #1
 8007d62:	fa02 f303 	lsl.w	r3, r2, r3
 8007d66:	69ba      	ldr	r2, [r7, #24]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	69ba      	ldr	r2, [r7, #24]
 8007d70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f003 0303 	and.w	r3, r3, #3
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d123      	bne.n	8007dc6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	08da      	lsrs	r2, r3, #3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	3208      	adds	r2, #8
 8007d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	f003 0307 	and.w	r3, r3, #7
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	220f      	movs	r2, #15
 8007d96:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9a:	43db      	mvns	r3, r3
 8007d9c:	69ba      	ldr	r2, [r7, #24]
 8007d9e:	4013      	ands	r3, r2
 8007da0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	691a      	ldr	r2, [r3, #16]
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	f003 0307 	and.w	r3, r3, #7
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	fa02 f303 	lsl.w	r3, r2, r3
 8007db2:	69ba      	ldr	r2, [r7, #24]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	08da      	lsrs	r2, r3, #3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	3208      	adds	r2, #8
 8007dc0:	69b9      	ldr	r1, [r7, #24]
 8007dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	2203      	movs	r2, #3
 8007dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd6:	43db      	mvns	r3, r3
 8007dd8:	69ba      	ldr	r2, [r7, #24]
 8007dda:	4013      	ands	r3, r2
 8007ddc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f003 0203 	and.w	r2, r3, #3
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	005b      	lsls	r3, r3, #1
 8007dea:	fa02 f303 	lsl.w	r3, r2, r3
 8007dee:	69ba      	ldr	r2, [r7, #24]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 80d8 	beq.w	8007fb8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e08:	4b2c      	ldr	r3, [pc, #176]	; (8007ebc <HAL_GPIO_Init+0x22c>)
 8007e0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e0e:	4a2b      	ldr	r2, [pc, #172]	; (8007ebc <HAL_GPIO_Init+0x22c>)
 8007e10:	f043 0302 	orr.w	r3, r3, #2
 8007e14:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007e18:	4b28      	ldr	r3, [pc, #160]	; (8007ebc <HAL_GPIO_Init+0x22c>)
 8007e1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	60fb      	str	r3, [r7, #12]
 8007e24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e26:	4a26      	ldr	r2, [pc, #152]	; (8007ec0 <HAL_GPIO_Init+0x230>)
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	089b      	lsrs	r3, r3, #2
 8007e2c:	3302      	adds	r3, #2
 8007e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	f003 0303 	and.w	r3, r3, #3
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	220f      	movs	r2, #15
 8007e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e42:	43db      	mvns	r3, r3
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	4013      	ands	r3, r2
 8007e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a1d      	ldr	r2, [pc, #116]	; (8007ec4 <HAL_GPIO_Init+0x234>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d04a      	beq.n	8007ee8 <HAL_GPIO_Init+0x258>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a1c      	ldr	r2, [pc, #112]	; (8007ec8 <HAL_GPIO_Init+0x238>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d02b      	beq.n	8007eb2 <HAL_GPIO_Init+0x222>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a1b      	ldr	r2, [pc, #108]	; (8007ecc <HAL_GPIO_Init+0x23c>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d025      	beq.n	8007eae <HAL_GPIO_Init+0x21e>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a1a      	ldr	r2, [pc, #104]	; (8007ed0 <HAL_GPIO_Init+0x240>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d01f      	beq.n	8007eaa <HAL_GPIO_Init+0x21a>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a19      	ldr	r2, [pc, #100]	; (8007ed4 <HAL_GPIO_Init+0x244>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d019      	beq.n	8007ea6 <HAL_GPIO_Init+0x216>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a18      	ldr	r2, [pc, #96]	; (8007ed8 <HAL_GPIO_Init+0x248>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d013      	beq.n	8007ea2 <HAL_GPIO_Init+0x212>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a17      	ldr	r2, [pc, #92]	; (8007edc <HAL_GPIO_Init+0x24c>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d00d      	beq.n	8007e9e <HAL_GPIO_Init+0x20e>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a16      	ldr	r2, [pc, #88]	; (8007ee0 <HAL_GPIO_Init+0x250>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d007      	beq.n	8007e9a <HAL_GPIO_Init+0x20a>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a15      	ldr	r2, [pc, #84]	; (8007ee4 <HAL_GPIO_Init+0x254>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d101      	bne.n	8007e96 <HAL_GPIO_Init+0x206>
 8007e92:	2309      	movs	r3, #9
 8007e94:	e029      	b.n	8007eea <HAL_GPIO_Init+0x25a>
 8007e96:	230a      	movs	r3, #10
 8007e98:	e027      	b.n	8007eea <HAL_GPIO_Init+0x25a>
 8007e9a:	2307      	movs	r3, #7
 8007e9c:	e025      	b.n	8007eea <HAL_GPIO_Init+0x25a>
 8007e9e:	2306      	movs	r3, #6
 8007ea0:	e023      	b.n	8007eea <HAL_GPIO_Init+0x25a>
 8007ea2:	2305      	movs	r3, #5
 8007ea4:	e021      	b.n	8007eea <HAL_GPIO_Init+0x25a>
 8007ea6:	2304      	movs	r3, #4
 8007ea8:	e01f      	b.n	8007eea <HAL_GPIO_Init+0x25a>
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e01d      	b.n	8007eea <HAL_GPIO_Init+0x25a>
 8007eae:	2302      	movs	r3, #2
 8007eb0:	e01b      	b.n	8007eea <HAL_GPIO_Init+0x25a>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e019      	b.n	8007eea <HAL_GPIO_Init+0x25a>
 8007eb6:	bf00      	nop
 8007eb8:	58000080 	.word	0x58000080
 8007ebc:	58024400 	.word	0x58024400
 8007ec0:	58000400 	.word	0x58000400
 8007ec4:	58020000 	.word	0x58020000
 8007ec8:	58020400 	.word	0x58020400
 8007ecc:	58020800 	.word	0x58020800
 8007ed0:	58020c00 	.word	0x58020c00
 8007ed4:	58021000 	.word	0x58021000
 8007ed8:	58021400 	.word	0x58021400
 8007edc:	58021800 	.word	0x58021800
 8007ee0:	58021c00 	.word	0x58021c00
 8007ee4:	58022400 	.word	0x58022400
 8007ee8:	2300      	movs	r3, #0
 8007eea:	69fa      	ldr	r2, [r7, #28]
 8007eec:	f002 0203 	and.w	r2, r2, #3
 8007ef0:	0092      	lsls	r2, r2, #2
 8007ef2:	4093      	lsls	r3, r2
 8007ef4:	69ba      	ldr	r2, [r7, #24]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007efa:	4938      	ldr	r1, [pc, #224]	; (8007fdc <HAL_GPIO_Init+0x34c>)
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	089b      	lsrs	r3, r3, #2
 8007f00:	3302      	adds	r3, #2
 8007f02:	69ba      	ldr	r2, [r7, #24]
 8007f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	43db      	mvns	r3, r3
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	4013      	ands	r3, r2
 8007f18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	43db      	mvns	r3, r3
 8007f42:	69ba      	ldr	r2, [r7, #24]
 8007f44:	4013      	ands	r3, r2
 8007f46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d003      	beq.n	8007f5c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007f54:	69ba      	ldr	r2, [r7, #24]
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007f5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	43db      	mvns	r3, r3
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	4013      	ands	r3, r2
 8007f72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d003      	beq.n	8007f88 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	43db      	mvns	r3, r3
 8007f98:	69ba      	ldr	r2, [r7, #24]
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007faa:	69ba      	ldr	r2, [r7, #24]
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	69ba      	ldr	r2, [r7, #24]
 8007fb6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f47f ae6b 	bne.w	8007ca4 <HAL_GPIO_Init+0x14>
  }
}
 8007fce:	bf00      	nop
 8007fd0:	bf00      	nop
 8007fd2:	3724      	adds	r7, #36	; 0x24
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	58000400 	.word	0x58000400

08007fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	807b      	strh	r3, [r7, #2]
 8007fec:	4613      	mov	r3, r2
 8007fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ff0:	787b      	ldrb	r3, [r7, #1]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d003      	beq.n	8007ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ff6:	887a      	ldrh	r2, [r7, #2]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007ffc:	e003      	b.n	8008006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007ffe:	887b      	ldrh	r3, [r7, #2]
 8008000:	041a      	lsls	r2, r3, #16
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	619a      	str	r2, [r3, #24]
}
 8008006:	bf00      	nop
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
	...

08008014 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800801c:	4b19      	ldr	r3, [pc, #100]	; (8008084 <HAL_PWREx_ConfigSupply+0x70>)
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	f003 0304 	and.w	r3, r3, #4
 8008024:	2b04      	cmp	r3, #4
 8008026:	d00a      	beq.n	800803e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008028:	4b16      	ldr	r3, [pc, #88]	; (8008084 <HAL_PWREx_ConfigSupply+0x70>)
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f003 0307 	and.w	r3, r3, #7
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	429a      	cmp	r2, r3
 8008034:	d001      	beq.n	800803a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e01f      	b.n	800807a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	e01d      	b.n	800807a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800803e:	4b11      	ldr	r3, [pc, #68]	; (8008084 <HAL_PWREx_ConfigSupply+0x70>)
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	f023 0207 	bic.w	r2, r3, #7
 8008046:	490f      	ldr	r1, [pc, #60]	; (8008084 <HAL_PWREx_ConfigSupply+0x70>)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4313      	orrs	r3, r2
 800804c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800804e:	f7fc fec9 	bl	8004de4 <HAL_GetTick>
 8008052:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008054:	e009      	b.n	800806a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008056:	f7fc fec5 	bl	8004de4 <HAL_GetTick>
 800805a:	4602      	mov	r2, r0
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008064:	d901      	bls.n	800806a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e007      	b.n	800807a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800806a:	4b06      	ldr	r3, [pc, #24]	; (8008084 <HAL_PWREx_ConfigSupply+0x70>)
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008076:	d1ee      	bne.n	8008056 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	58024800 	.word	0x58024800

08008088 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08c      	sub	sp, #48	; 0x30
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e3c8      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 8087 	beq.w	80081b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080a8:	4b88      	ldr	r3, [pc, #544]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080b2:	4b86      	ldr	r3, [pc, #536]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 80080b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80080b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ba:	2b10      	cmp	r3, #16
 80080bc:	d007      	beq.n	80080ce <HAL_RCC_OscConfig+0x46>
 80080be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c0:	2b18      	cmp	r3, #24
 80080c2:	d110      	bne.n	80080e6 <HAL_RCC_OscConfig+0x5e>
 80080c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c6:	f003 0303 	and.w	r3, r3, #3
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d10b      	bne.n	80080e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080ce:	4b7f      	ldr	r3, [pc, #508]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d06c      	beq.n	80081b4 <HAL_RCC_OscConfig+0x12c>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d168      	bne.n	80081b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e3a2      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ee:	d106      	bne.n	80080fe <HAL_RCC_OscConfig+0x76>
 80080f0:	4b76      	ldr	r3, [pc, #472]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a75      	ldr	r2, [pc, #468]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 80080f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080fa:	6013      	str	r3, [r2, #0]
 80080fc:	e02e      	b.n	800815c <HAL_RCC_OscConfig+0xd4>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10c      	bne.n	8008120 <HAL_RCC_OscConfig+0x98>
 8008106:	4b71      	ldr	r3, [pc, #452]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a70      	ldr	r2, [pc, #448]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 800810c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008110:	6013      	str	r3, [r2, #0]
 8008112:	4b6e      	ldr	r3, [pc, #440]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a6d      	ldr	r2, [pc, #436]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 8008118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	e01d      	b.n	800815c <HAL_RCC_OscConfig+0xd4>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008128:	d10c      	bne.n	8008144 <HAL_RCC_OscConfig+0xbc>
 800812a:	4b68      	ldr	r3, [pc, #416]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a67      	ldr	r2, [pc, #412]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 8008130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008134:	6013      	str	r3, [r2, #0]
 8008136:	4b65      	ldr	r3, [pc, #404]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a64      	ldr	r2, [pc, #400]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 800813c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008140:	6013      	str	r3, [r2, #0]
 8008142:	e00b      	b.n	800815c <HAL_RCC_OscConfig+0xd4>
 8008144:	4b61      	ldr	r3, [pc, #388]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a60      	ldr	r2, [pc, #384]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 800814a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	4b5e      	ldr	r3, [pc, #376]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a5d      	ldr	r2, [pc, #372]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 8008156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800815a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d013      	beq.n	800818c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008164:	f7fc fe3e 	bl	8004de4 <HAL_GetTick>
 8008168:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800816a:	e008      	b.n	800817e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800816c:	f7fc fe3a 	bl	8004de4 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	2b64      	cmp	r3, #100	; 0x64
 8008178:	d901      	bls.n	800817e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e356      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800817e:	4b53      	ldr	r3, [pc, #332]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0f0      	beq.n	800816c <HAL_RCC_OscConfig+0xe4>
 800818a:	e014      	b.n	80081b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800818c:	f7fc fe2a 	bl	8004de4 <HAL_GetTick>
 8008190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008192:	e008      	b.n	80081a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008194:	f7fc fe26 	bl	8004de4 <HAL_GetTick>
 8008198:	4602      	mov	r2, r0
 800819a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	2b64      	cmp	r3, #100	; 0x64
 80081a0:	d901      	bls.n	80081a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e342      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081a6:	4b49      	ldr	r3, [pc, #292]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1f0      	bne.n	8008194 <HAL_RCC_OscConfig+0x10c>
 80081b2:	e000      	b.n	80081b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f000 808c 	beq.w	80082dc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081c4:	4b41      	ldr	r3, [pc, #260]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081ce:	4b3f      	ldr	r3, [pc, #252]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 80081d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80081d4:	6a3b      	ldr	r3, [r7, #32]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d007      	beq.n	80081ea <HAL_RCC_OscConfig+0x162>
 80081da:	6a3b      	ldr	r3, [r7, #32]
 80081dc:	2b18      	cmp	r3, #24
 80081de:	d137      	bne.n	8008250 <HAL_RCC_OscConfig+0x1c8>
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	f003 0303 	and.w	r3, r3, #3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d132      	bne.n	8008250 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081ea:	4b38      	ldr	r3, [pc, #224]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 0304 	and.w	r3, r3, #4
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d005      	beq.n	8008202 <HAL_RCC_OscConfig+0x17a>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d101      	bne.n	8008202 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e314      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008202:	4b32      	ldr	r3, [pc, #200]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f023 0219 	bic.w	r2, r3, #25
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	492f      	ldr	r1, [pc, #188]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 8008210:	4313      	orrs	r3, r2
 8008212:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008214:	f7fc fde6 	bl	8004de4 <HAL_GetTick>
 8008218:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800821a:	e008      	b.n	800822e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800821c:	f7fc fde2 	bl	8004de4 <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2b02      	cmp	r3, #2
 8008228:	d901      	bls.n	800822e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e2fe      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800822e:	4b27      	ldr	r3, [pc, #156]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 0304 	and.w	r3, r3, #4
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0f0      	beq.n	800821c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800823a:	4b24      	ldr	r3, [pc, #144]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	061b      	lsls	r3, r3, #24
 8008248:	4920      	ldr	r1, [pc, #128]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 800824a:	4313      	orrs	r3, r2
 800824c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800824e:	e045      	b.n	80082dc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d026      	beq.n	80082a6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008258:	4b1c      	ldr	r3, [pc, #112]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f023 0219 	bic.w	r2, r3, #25
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	4919      	ldr	r1, [pc, #100]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 8008266:	4313      	orrs	r3, r2
 8008268:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800826a:	f7fc fdbb 	bl	8004de4 <HAL_GetTick>
 800826e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008270:	e008      	b.n	8008284 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008272:	f7fc fdb7 	bl	8004de4 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	2b02      	cmp	r3, #2
 800827e:	d901      	bls.n	8008284 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e2d3      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008284:	4b11      	ldr	r3, [pc, #68]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0304 	and.w	r3, r3, #4
 800828c:	2b00      	cmp	r3, #0
 800828e:	d0f0      	beq.n	8008272 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008290:	4b0e      	ldr	r3, [pc, #56]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	061b      	lsls	r3, r3, #24
 800829e:	490b      	ldr	r1, [pc, #44]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 80082a0:	4313      	orrs	r3, r2
 80082a2:	604b      	str	r3, [r1, #4]
 80082a4:	e01a      	b.n	80082dc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082a6:	4b09      	ldr	r3, [pc, #36]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a08      	ldr	r2, [pc, #32]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 80082ac:	f023 0301 	bic.w	r3, r3, #1
 80082b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082b2:	f7fc fd97 	bl	8004de4 <HAL_GetTick>
 80082b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082b8:	e00a      	b.n	80082d0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082ba:	f7fc fd93 	bl	8004de4 <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d903      	bls.n	80082d0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e2af      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
 80082cc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082d0:	4b96      	ldr	r3, [pc, #600]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1ee      	bne.n	80082ba <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0310 	and.w	r3, r3, #16
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d06a      	beq.n	80083be <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082e8:	4b90      	ldr	r3, [pc, #576]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082f0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80082f2:	4b8e      	ldr	r3, [pc, #568]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 80082f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	2b08      	cmp	r3, #8
 80082fc:	d007      	beq.n	800830e <HAL_RCC_OscConfig+0x286>
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	2b18      	cmp	r3, #24
 8008302:	d11b      	bne.n	800833c <HAL_RCC_OscConfig+0x2b4>
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	f003 0303 	and.w	r3, r3, #3
 800830a:	2b01      	cmp	r3, #1
 800830c:	d116      	bne.n	800833c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800830e:	4b87      	ldr	r3, [pc, #540]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008316:	2b00      	cmp	r3, #0
 8008318:	d005      	beq.n	8008326 <HAL_RCC_OscConfig+0x29e>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	69db      	ldr	r3, [r3, #28]
 800831e:	2b80      	cmp	r3, #128	; 0x80
 8008320:	d001      	beq.n	8008326 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e282      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008326:	4b81      	ldr	r3, [pc, #516]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a1b      	ldr	r3, [r3, #32]
 8008332:	061b      	lsls	r3, r3, #24
 8008334:	497d      	ldr	r1, [pc, #500]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 8008336:	4313      	orrs	r3, r2
 8008338:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800833a:	e040      	b.n	80083be <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	69db      	ldr	r3, [r3, #28]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d023      	beq.n	800838c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008344:	4b79      	ldr	r3, [pc, #484]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a78      	ldr	r2, [pc, #480]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 800834a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800834e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008350:	f7fc fd48 	bl	8004de4 <HAL_GetTick>
 8008354:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008356:	e008      	b.n	800836a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008358:	f7fc fd44 	bl	8004de4 <HAL_GetTick>
 800835c:	4602      	mov	r2, r0
 800835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	2b02      	cmp	r3, #2
 8008364:	d901      	bls.n	800836a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008366:	2303      	movs	r3, #3
 8008368:	e260      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800836a:	4b70      	ldr	r3, [pc, #448]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0f0      	beq.n	8008358 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008376:	4b6d      	ldr	r3, [pc, #436]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	061b      	lsls	r3, r3, #24
 8008384:	4969      	ldr	r1, [pc, #420]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 8008386:	4313      	orrs	r3, r2
 8008388:	60cb      	str	r3, [r1, #12]
 800838a:	e018      	b.n	80083be <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800838c:	4b67      	ldr	r3, [pc, #412]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a66      	ldr	r2, [pc, #408]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 8008392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008398:	f7fc fd24 	bl	8004de4 <HAL_GetTick>
 800839c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800839e:	e008      	b.n	80083b2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80083a0:	f7fc fd20 	bl	8004de4 <HAL_GetTick>
 80083a4:	4602      	mov	r2, r0
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d901      	bls.n	80083b2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e23c      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80083b2:	4b5e      	ldr	r3, [pc, #376]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1f0      	bne.n	80083a0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0308 	and.w	r3, r3, #8
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d036      	beq.n	8008438 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d019      	beq.n	8008406 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083d2:	4b56      	ldr	r3, [pc, #344]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 80083d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083d6:	4a55      	ldr	r2, [pc, #340]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 80083d8:	f043 0301 	orr.w	r3, r3, #1
 80083dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083de:	f7fc fd01 	bl	8004de4 <HAL_GetTick>
 80083e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80083e4:	e008      	b.n	80083f8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083e6:	f7fc fcfd 	bl	8004de4 <HAL_GetTick>
 80083ea:	4602      	mov	r2, r0
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	1ad3      	subs	r3, r2, r3
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d901      	bls.n	80083f8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80083f4:	2303      	movs	r3, #3
 80083f6:	e219      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80083f8:	4b4c      	ldr	r3, [pc, #304]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 80083fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	2b00      	cmp	r3, #0
 8008402:	d0f0      	beq.n	80083e6 <HAL_RCC_OscConfig+0x35e>
 8008404:	e018      	b.n	8008438 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008406:	4b49      	ldr	r3, [pc, #292]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 8008408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800840a:	4a48      	ldr	r2, [pc, #288]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 800840c:	f023 0301 	bic.w	r3, r3, #1
 8008410:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008412:	f7fc fce7 	bl	8004de4 <HAL_GetTick>
 8008416:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008418:	e008      	b.n	800842c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800841a:	f7fc fce3 	bl	8004de4 <HAL_GetTick>
 800841e:	4602      	mov	r2, r0
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	2b02      	cmp	r3, #2
 8008426:	d901      	bls.n	800842c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	e1ff      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800842c:	4b3f      	ldr	r3, [pc, #252]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 800842e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008430:	f003 0302 	and.w	r3, r3, #2
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1f0      	bne.n	800841a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 0320 	and.w	r3, r3, #32
 8008440:	2b00      	cmp	r3, #0
 8008442:	d036      	beq.n	80084b2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d019      	beq.n	8008480 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800844c:	4b37      	ldr	r3, [pc, #220]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a36      	ldr	r2, [pc, #216]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 8008452:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008456:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008458:	f7fc fcc4 	bl	8004de4 <HAL_GetTick>
 800845c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800845e:	e008      	b.n	8008472 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008460:	f7fc fcc0 	bl	8004de4 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	2b02      	cmp	r3, #2
 800846c:	d901      	bls.n	8008472 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e1dc      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008472:	4b2e      	ldr	r3, [pc, #184]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d0f0      	beq.n	8008460 <HAL_RCC_OscConfig+0x3d8>
 800847e:	e018      	b.n	80084b2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008480:	4b2a      	ldr	r3, [pc, #168]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a29      	ldr	r2, [pc, #164]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 8008486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800848a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800848c:	f7fc fcaa 	bl	8004de4 <HAL_GetTick>
 8008490:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008492:	e008      	b.n	80084a6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008494:	f7fc fca6 	bl	8004de4 <HAL_GetTick>
 8008498:	4602      	mov	r2, r0
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d901      	bls.n	80084a6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80084a2:	2303      	movs	r3, #3
 80084a4:	e1c2      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084a6:	4b21      	ldr	r3, [pc, #132]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1f0      	bne.n	8008494 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0304 	and.w	r3, r3, #4
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 8086 	beq.w	80085cc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80084c0:	4b1b      	ldr	r3, [pc, #108]	; (8008530 <HAL_RCC_OscConfig+0x4a8>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a1a      	ldr	r2, [pc, #104]	; (8008530 <HAL_RCC_OscConfig+0x4a8>)
 80084c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80084cc:	f7fc fc8a 	bl	8004de4 <HAL_GetTick>
 80084d0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084d2:	e008      	b.n	80084e6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084d4:	f7fc fc86 	bl	8004de4 <HAL_GetTick>
 80084d8:	4602      	mov	r2, r0
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	2b64      	cmp	r3, #100	; 0x64
 80084e0:	d901      	bls.n	80084e6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e1a2      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084e6:	4b12      	ldr	r3, [pc, #72]	; (8008530 <HAL_RCC_OscConfig+0x4a8>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0f0      	beq.n	80084d4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d106      	bne.n	8008508 <HAL_RCC_OscConfig+0x480>
 80084fa:	4b0c      	ldr	r3, [pc, #48]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 80084fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084fe:	4a0b      	ldr	r2, [pc, #44]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 8008500:	f043 0301 	orr.w	r3, r3, #1
 8008504:	6713      	str	r3, [r2, #112]	; 0x70
 8008506:	e032      	b.n	800856e <HAL_RCC_OscConfig+0x4e6>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d111      	bne.n	8008534 <HAL_RCC_OscConfig+0x4ac>
 8008510:	4b06      	ldr	r3, [pc, #24]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 8008512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008514:	4a05      	ldr	r2, [pc, #20]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 8008516:	f023 0301 	bic.w	r3, r3, #1
 800851a:	6713      	str	r3, [r2, #112]	; 0x70
 800851c:	4b03      	ldr	r3, [pc, #12]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 800851e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008520:	4a02      	ldr	r2, [pc, #8]	; (800852c <HAL_RCC_OscConfig+0x4a4>)
 8008522:	f023 0304 	bic.w	r3, r3, #4
 8008526:	6713      	str	r3, [r2, #112]	; 0x70
 8008528:	e021      	b.n	800856e <HAL_RCC_OscConfig+0x4e6>
 800852a:	bf00      	nop
 800852c:	58024400 	.word	0x58024400
 8008530:	58024800 	.word	0x58024800
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	2b05      	cmp	r3, #5
 800853a:	d10c      	bne.n	8008556 <HAL_RCC_OscConfig+0x4ce>
 800853c:	4b83      	ldr	r3, [pc, #524]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 800853e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008540:	4a82      	ldr	r2, [pc, #520]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 8008542:	f043 0304 	orr.w	r3, r3, #4
 8008546:	6713      	str	r3, [r2, #112]	; 0x70
 8008548:	4b80      	ldr	r3, [pc, #512]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 800854a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800854c:	4a7f      	ldr	r2, [pc, #508]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 800854e:	f043 0301 	orr.w	r3, r3, #1
 8008552:	6713      	str	r3, [r2, #112]	; 0x70
 8008554:	e00b      	b.n	800856e <HAL_RCC_OscConfig+0x4e6>
 8008556:	4b7d      	ldr	r3, [pc, #500]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 8008558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800855a:	4a7c      	ldr	r2, [pc, #496]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 800855c:	f023 0301 	bic.w	r3, r3, #1
 8008560:	6713      	str	r3, [r2, #112]	; 0x70
 8008562:	4b7a      	ldr	r3, [pc, #488]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 8008564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008566:	4a79      	ldr	r2, [pc, #484]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 8008568:	f023 0304 	bic.w	r3, r3, #4
 800856c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d015      	beq.n	80085a2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008576:	f7fc fc35 	bl	8004de4 <HAL_GetTick>
 800857a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800857c:	e00a      	b.n	8008594 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800857e:	f7fc fc31 	bl	8004de4 <HAL_GetTick>
 8008582:	4602      	mov	r2, r0
 8008584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	f241 3288 	movw	r2, #5000	; 0x1388
 800858c:	4293      	cmp	r3, r2
 800858e:	d901      	bls.n	8008594 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008590:	2303      	movs	r3, #3
 8008592:	e14b      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008594:	4b6d      	ldr	r3, [pc, #436]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 8008596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008598:	f003 0302 	and.w	r3, r3, #2
 800859c:	2b00      	cmp	r3, #0
 800859e:	d0ee      	beq.n	800857e <HAL_RCC_OscConfig+0x4f6>
 80085a0:	e014      	b.n	80085cc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085a2:	f7fc fc1f 	bl	8004de4 <HAL_GetTick>
 80085a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085a8:	e00a      	b.n	80085c0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085aa:	f7fc fc1b 	bl	8004de4 <HAL_GetTick>
 80085ae:	4602      	mov	r2, r0
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d901      	bls.n	80085c0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e135      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085c0:	4b62      	ldr	r3, [pc, #392]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 80085c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c4:	f003 0302 	and.w	r3, r3, #2
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1ee      	bne.n	80085aa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f000 812a 	beq.w	800882a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80085d6:	4b5d      	ldr	r3, [pc, #372]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085de:	2b18      	cmp	r3, #24
 80085e0:	f000 80ba 	beq.w	8008758 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	f040 8095 	bne.w	8008718 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085ee:	4b57      	ldr	r3, [pc, #348]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a56      	ldr	r2, [pc, #344]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 80085f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085fa:	f7fc fbf3 	bl	8004de4 <HAL_GetTick>
 80085fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008600:	e008      	b.n	8008614 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008602:	f7fc fbef 	bl	8004de4 <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	2b02      	cmp	r3, #2
 800860e:	d901      	bls.n	8008614 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e10b      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008614:	4b4d      	ldr	r3, [pc, #308]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1f0      	bne.n	8008602 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008620:	4b4a      	ldr	r3, [pc, #296]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 8008622:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008624:	4b4a      	ldr	r3, [pc, #296]	; (8008750 <HAL_RCC_OscConfig+0x6c8>)
 8008626:	4013      	ands	r3, r2
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008630:	0112      	lsls	r2, r2, #4
 8008632:	430a      	orrs	r2, r1
 8008634:	4945      	ldr	r1, [pc, #276]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 8008636:	4313      	orrs	r3, r2
 8008638:	628b      	str	r3, [r1, #40]	; 0x28
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863e:	3b01      	subs	r3, #1
 8008640:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008648:	3b01      	subs	r3, #1
 800864a:	025b      	lsls	r3, r3, #9
 800864c:	b29b      	uxth	r3, r3
 800864e:	431a      	orrs	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008654:	3b01      	subs	r3, #1
 8008656:	041b      	lsls	r3, r3, #16
 8008658:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800865c:	431a      	orrs	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008662:	3b01      	subs	r3, #1
 8008664:	061b      	lsls	r3, r3, #24
 8008666:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800866a:	4938      	ldr	r1, [pc, #224]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 800866c:	4313      	orrs	r3, r2
 800866e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008670:	4b36      	ldr	r3, [pc, #216]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 8008672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008674:	4a35      	ldr	r2, [pc, #212]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 8008676:	f023 0301 	bic.w	r3, r3, #1
 800867a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800867c:	4b33      	ldr	r3, [pc, #204]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 800867e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008680:	4b34      	ldr	r3, [pc, #208]	; (8008754 <HAL_RCC_OscConfig+0x6cc>)
 8008682:	4013      	ands	r3, r2
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008688:	00d2      	lsls	r2, r2, #3
 800868a:	4930      	ldr	r1, [pc, #192]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 800868c:	4313      	orrs	r3, r2
 800868e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008690:	4b2e      	ldr	r3, [pc, #184]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 8008692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008694:	f023 020c 	bic.w	r2, r3, #12
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869c:	492b      	ldr	r1, [pc, #172]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 800869e:	4313      	orrs	r3, r2
 80086a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80086a2:	4b2a      	ldr	r3, [pc, #168]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 80086a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a6:	f023 0202 	bic.w	r2, r3, #2
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ae:	4927      	ldr	r1, [pc, #156]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 80086b0:	4313      	orrs	r3, r2
 80086b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80086b4:	4b25      	ldr	r3, [pc, #148]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	4a24      	ldr	r2, [pc, #144]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 80086ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086c0:	4b22      	ldr	r3, [pc, #136]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 80086c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c4:	4a21      	ldr	r2, [pc, #132]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 80086c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80086cc:	4b1f      	ldr	r3, [pc, #124]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 80086ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d0:	4a1e      	ldr	r2, [pc, #120]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 80086d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80086d8:	4b1c      	ldr	r3, [pc, #112]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 80086da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086dc:	4a1b      	ldr	r2, [pc, #108]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 80086de:	f043 0301 	orr.w	r3, r3, #1
 80086e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086e4:	4b19      	ldr	r3, [pc, #100]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a18      	ldr	r2, [pc, #96]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 80086ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f0:	f7fc fb78 	bl	8004de4 <HAL_GetTick>
 80086f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086f6:	e008      	b.n	800870a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086f8:	f7fc fb74 	bl	8004de4 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	2b02      	cmp	r3, #2
 8008704:	d901      	bls.n	800870a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e090      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800870a:	4b10      	ldr	r3, [pc, #64]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d0f0      	beq.n	80086f8 <HAL_RCC_OscConfig+0x670>
 8008716:	e088      	b.n	800882a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008718:	4b0c      	ldr	r3, [pc, #48]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a0b      	ldr	r2, [pc, #44]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 800871e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008724:	f7fc fb5e 	bl	8004de4 <HAL_GetTick>
 8008728:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800872a:	e008      	b.n	800873e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800872c:	f7fc fb5a 	bl	8004de4 <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	2b02      	cmp	r3, #2
 8008738:	d901      	bls.n	800873e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	e076      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800873e:	4b03      	ldr	r3, [pc, #12]	; (800874c <HAL_RCC_OscConfig+0x6c4>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1f0      	bne.n	800872c <HAL_RCC_OscConfig+0x6a4>
 800874a:	e06e      	b.n	800882a <HAL_RCC_OscConfig+0x7a2>
 800874c:	58024400 	.word	0x58024400
 8008750:	fffffc0c 	.word	0xfffffc0c
 8008754:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008758:	4b36      	ldr	r3, [pc, #216]	; (8008834 <HAL_RCC_OscConfig+0x7ac>)
 800875a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800875e:	4b35      	ldr	r3, [pc, #212]	; (8008834 <HAL_RCC_OscConfig+0x7ac>)
 8008760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008762:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008768:	2b01      	cmp	r3, #1
 800876a:	d031      	beq.n	80087d0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	f003 0203 	and.w	r2, r3, #3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008776:	429a      	cmp	r2, r3
 8008778:	d12a      	bne.n	80087d0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	091b      	lsrs	r3, r3, #4
 800877e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008786:	429a      	cmp	r2, r3
 8008788:	d122      	bne.n	80087d0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008794:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008796:	429a      	cmp	r2, r3
 8008798:	d11a      	bne.n	80087d0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	0a5b      	lsrs	r3, r3, #9
 800879e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d111      	bne.n	80087d0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	0c1b      	lsrs	r3, r3, #16
 80087b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d108      	bne.n	80087d0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	0e1b      	lsrs	r3, r3, #24
 80087c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d001      	beq.n	80087d4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e02b      	b.n	800882c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80087d4:	4b17      	ldr	r3, [pc, #92]	; (8008834 <HAL_RCC_OscConfig+0x7ac>)
 80087d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d8:	08db      	lsrs	r3, r3, #3
 80087da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087de:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d01f      	beq.n	800882a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80087ea:	4b12      	ldr	r3, [pc, #72]	; (8008834 <HAL_RCC_OscConfig+0x7ac>)
 80087ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ee:	4a11      	ldr	r2, [pc, #68]	; (8008834 <HAL_RCC_OscConfig+0x7ac>)
 80087f0:	f023 0301 	bic.w	r3, r3, #1
 80087f4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80087f6:	f7fc faf5 	bl	8004de4 <HAL_GetTick>
 80087fa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80087fc:	bf00      	nop
 80087fe:	f7fc faf1 	bl	8004de4 <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008806:	4293      	cmp	r3, r2
 8008808:	d0f9      	beq.n	80087fe <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800880a:	4b0a      	ldr	r3, [pc, #40]	; (8008834 <HAL_RCC_OscConfig+0x7ac>)
 800880c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800880e:	4b0a      	ldr	r3, [pc, #40]	; (8008838 <HAL_RCC_OscConfig+0x7b0>)
 8008810:	4013      	ands	r3, r2
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008816:	00d2      	lsls	r2, r2, #3
 8008818:	4906      	ldr	r1, [pc, #24]	; (8008834 <HAL_RCC_OscConfig+0x7ac>)
 800881a:	4313      	orrs	r3, r2
 800881c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800881e:	4b05      	ldr	r3, [pc, #20]	; (8008834 <HAL_RCC_OscConfig+0x7ac>)
 8008820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008822:	4a04      	ldr	r2, [pc, #16]	; (8008834 <HAL_RCC_OscConfig+0x7ac>)
 8008824:	f043 0301 	orr.w	r3, r3, #1
 8008828:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3730      	adds	r7, #48	; 0x30
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	58024400 	.word	0x58024400
 8008838:	ffff0007 	.word	0xffff0007

0800883c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e19c      	b.n	8008b8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008850:	4b8a      	ldr	r3, [pc, #552]	; (8008a7c <HAL_RCC_ClockConfig+0x240>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 030f 	and.w	r3, r3, #15
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	429a      	cmp	r2, r3
 800885c:	d910      	bls.n	8008880 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800885e:	4b87      	ldr	r3, [pc, #540]	; (8008a7c <HAL_RCC_ClockConfig+0x240>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f023 020f 	bic.w	r2, r3, #15
 8008866:	4985      	ldr	r1, [pc, #532]	; (8008a7c <HAL_RCC_ClockConfig+0x240>)
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	4313      	orrs	r3, r2
 800886c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800886e:	4b83      	ldr	r3, [pc, #524]	; (8008a7c <HAL_RCC_ClockConfig+0x240>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 030f 	and.w	r3, r3, #15
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	429a      	cmp	r2, r3
 800887a:	d001      	beq.n	8008880 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e184      	b.n	8008b8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0304 	and.w	r3, r3, #4
 8008888:	2b00      	cmp	r3, #0
 800888a:	d010      	beq.n	80088ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	691a      	ldr	r2, [r3, #16]
 8008890:	4b7b      	ldr	r3, [pc, #492]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008898:	429a      	cmp	r2, r3
 800889a:	d908      	bls.n	80088ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800889c:	4b78      	ldr	r3, [pc, #480]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	4975      	ldr	r1, [pc, #468]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0308 	and.w	r3, r3, #8
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d010      	beq.n	80088dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	695a      	ldr	r2, [r3, #20]
 80088be:	4b70      	ldr	r3, [pc, #448]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80088c0:	69db      	ldr	r3, [r3, #28]
 80088c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d908      	bls.n	80088dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80088ca:	4b6d      	ldr	r3, [pc, #436]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80088cc:	69db      	ldr	r3, [r3, #28]
 80088ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	496a      	ldr	r1, [pc, #424]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80088d8:	4313      	orrs	r3, r2
 80088da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0310 	and.w	r3, r3, #16
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d010      	beq.n	800890a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	699a      	ldr	r2, [r3, #24]
 80088ec:	4b64      	ldr	r3, [pc, #400]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d908      	bls.n	800890a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80088f8:	4b61      	ldr	r3, [pc, #388]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80088fa:	69db      	ldr	r3, [r3, #28]
 80088fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	495e      	ldr	r1, [pc, #376]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008906:	4313      	orrs	r3, r2
 8008908:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0320 	and.w	r3, r3, #32
 8008912:	2b00      	cmp	r3, #0
 8008914:	d010      	beq.n	8008938 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	69da      	ldr	r2, [r3, #28]
 800891a:	4b59      	ldr	r3, [pc, #356]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008922:	429a      	cmp	r2, r3
 8008924:	d908      	bls.n	8008938 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008926:	4b56      	ldr	r3, [pc, #344]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	4953      	ldr	r1, [pc, #332]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008934:	4313      	orrs	r3, r2
 8008936:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0302 	and.w	r3, r3, #2
 8008940:	2b00      	cmp	r3, #0
 8008942:	d010      	beq.n	8008966 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	68da      	ldr	r2, [r3, #12]
 8008948:	4b4d      	ldr	r3, [pc, #308]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	f003 030f 	and.w	r3, r3, #15
 8008950:	429a      	cmp	r2, r3
 8008952:	d908      	bls.n	8008966 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008954:	4b4a      	ldr	r3, [pc, #296]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008956:	699b      	ldr	r3, [r3, #24]
 8008958:	f023 020f 	bic.w	r2, r3, #15
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	4947      	ldr	r1, [pc, #284]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008962:	4313      	orrs	r3, r2
 8008964:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b00      	cmp	r3, #0
 8008970:	d055      	beq.n	8008a1e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008972:	4b43      	ldr	r3, [pc, #268]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	4940      	ldr	r1, [pc, #256]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008980:	4313      	orrs	r3, r2
 8008982:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	2b02      	cmp	r3, #2
 800898a:	d107      	bne.n	800899c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800898c:	4b3c      	ldr	r3, [pc, #240]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d121      	bne.n	80089dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e0f6      	b.n	8008b8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	d107      	bne.n	80089b4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089a4:	4b36      	ldr	r3, [pc, #216]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d115      	bne.n	80089dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e0ea      	b.n	8008b8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d107      	bne.n	80089cc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089bc:	4b30      	ldr	r3, [pc, #192]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d109      	bne.n	80089dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e0de      	b.n	8008b8a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089cc:	4b2c      	ldr	r3, [pc, #176]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0304 	and.w	r3, r3, #4
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d101      	bne.n	80089dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	e0d6      	b.n	8008b8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80089dc:	4b28      	ldr	r3, [pc, #160]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	f023 0207 	bic.w	r2, r3, #7
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	4925      	ldr	r1, [pc, #148]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 80089ea:	4313      	orrs	r3, r2
 80089ec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089ee:	f7fc f9f9 	bl	8004de4 <HAL_GetTick>
 80089f2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089f4:	e00a      	b.n	8008a0c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089f6:	f7fc f9f5 	bl	8004de4 <HAL_GetTick>
 80089fa:	4602      	mov	r2, r0
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d901      	bls.n	8008a0c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e0be      	b.n	8008b8a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a0c:	4b1c      	ldr	r3, [pc, #112]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	00db      	lsls	r3, r3, #3
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d1eb      	bne.n	80089f6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0302 	and.w	r3, r3, #2
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d010      	beq.n	8008a4c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	68da      	ldr	r2, [r3, #12]
 8008a2e:	4b14      	ldr	r3, [pc, #80]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	f003 030f 	and.w	r3, r3, #15
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d208      	bcs.n	8008a4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a3a:	4b11      	ldr	r3, [pc, #68]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	f023 020f 	bic.w	r2, r3, #15
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	490e      	ldr	r1, [pc, #56]	; (8008a80 <HAL_RCC_ClockConfig+0x244>)
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a4c:	4b0b      	ldr	r3, [pc, #44]	; (8008a7c <HAL_RCC_ClockConfig+0x240>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 030f 	and.w	r3, r3, #15
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d214      	bcs.n	8008a84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a5a:	4b08      	ldr	r3, [pc, #32]	; (8008a7c <HAL_RCC_ClockConfig+0x240>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f023 020f 	bic.w	r2, r3, #15
 8008a62:	4906      	ldr	r1, [pc, #24]	; (8008a7c <HAL_RCC_ClockConfig+0x240>)
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a6a:	4b04      	ldr	r3, [pc, #16]	; (8008a7c <HAL_RCC_ClockConfig+0x240>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 030f 	and.w	r3, r3, #15
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d005      	beq.n	8008a84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e086      	b.n	8008b8a <HAL_RCC_ClockConfig+0x34e>
 8008a7c:	52002000 	.word	0x52002000
 8008a80:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 0304 	and.w	r3, r3, #4
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d010      	beq.n	8008ab2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	691a      	ldr	r2, [r3, #16]
 8008a94:	4b3f      	ldr	r3, [pc, #252]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d208      	bcs.n	8008ab2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008aa0:	4b3c      	ldr	r3, [pc, #240]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	4939      	ldr	r1, [pc, #228]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 0308 	and.w	r3, r3, #8
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d010      	beq.n	8008ae0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	695a      	ldr	r2, [r3, #20]
 8008ac2:	4b34      	ldr	r3, [pc, #208]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008ac4:	69db      	ldr	r3, [r3, #28]
 8008ac6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d208      	bcs.n	8008ae0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ace:	4b31      	ldr	r3, [pc, #196]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008ad0:	69db      	ldr	r3, [r3, #28]
 8008ad2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	695b      	ldr	r3, [r3, #20]
 8008ada:	492e      	ldr	r1, [pc, #184]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008adc:	4313      	orrs	r3, r2
 8008ade:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0310 	and.w	r3, r3, #16
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d010      	beq.n	8008b0e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	699a      	ldr	r2, [r3, #24]
 8008af0:	4b28      	ldr	r3, [pc, #160]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d208      	bcs.n	8008b0e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008afc:	4b25      	ldr	r3, [pc, #148]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008afe:	69db      	ldr	r3, [r3, #28]
 8008b00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	4922      	ldr	r1, [pc, #136]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 0320 	and.w	r3, r3, #32
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d010      	beq.n	8008b3c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	69da      	ldr	r2, [r3, #28]
 8008b1e:	4b1d      	ldr	r3, [pc, #116]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d208      	bcs.n	8008b3c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008b2a:	4b1a      	ldr	r3, [pc, #104]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	4917      	ldr	r1, [pc, #92]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b3c:	f000 f834 	bl	8008ba8 <HAL_RCC_GetSysClockFreq>
 8008b40:	4602      	mov	r2, r0
 8008b42:	4b14      	ldr	r3, [pc, #80]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	0a1b      	lsrs	r3, r3, #8
 8008b48:	f003 030f 	and.w	r3, r3, #15
 8008b4c:	4912      	ldr	r1, [pc, #72]	; (8008b98 <HAL_RCC_ClockConfig+0x35c>)
 8008b4e:	5ccb      	ldrb	r3, [r1, r3]
 8008b50:	f003 031f 	and.w	r3, r3, #31
 8008b54:	fa22 f303 	lsr.w	r3, r2, r3
 8008b58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b5a:	4b0e      	ldr	r3, [pc, #56]	; (8008b94 <HAL_RCC_ClockConfig+0x358>)
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	f003 030f 	and.w	r3, r3, #15
 8008b62:	4a0d      	ldr	r2, [pc, #52]	; (8008b98 <HAL_RCC_ClockConfig+0x35c>)
 8008b64:	5cd3      	ldrb	r3, [r2, r3]
 8008b66:	f003 031f 	and.w	r3, r3, #31
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b70:	4a0a      	ldr	r2, [pc, #40]	; (8008b9c <HAL_RCC_ClockConfig+0x360>)
 8008b72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b74:	4a0a      	ldr	r2, [pc, #40]	; (8008ba0 <HAL_RCC_ClockConfig+0x364>)
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008b7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ba4 <HAL_RCC_ClockConfig+0x368>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fc f8e6 	bl	8004d50 <HAL_InitTick>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	58024400 	.word	0x58024400
 8008b98:	0800ec98 	.word	0x0800ec98
 8008b9c:	2400000c 	.word	0x2400000c
 8008ba0:	24000008 	.word	0x24000008
 8008ba4:	24000010 	.word	0x24000010

08008ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b089      	sub	sp, #36	; 0x24
 8008bac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008bae:	4bb3      	ldr	r3, [pc, #716]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bb6:	2b18      	cmp	r3, #24
 8008bb8:	f200 8155 	bhi.w	8008e66 <HAL_RCC_GetSysClockFreq+0x2be>
 8008bbc:	a201      	add	r2, pc, #4	; (adr r2, 8008bc4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc2:	bf00      	nop
 8008bc4:	08008c29 	.word	0x08008c29
 8008bc8:	08008e67 	.word	0x08008e67
 8008bcc:	08008e67 	.word	0x08008e67
 8008bd0:	08008e67 	.word	0x08008e67
 8008bd4:	08008e67 	.word	0x08008e67
 8008bd8:	08008e67 	.word	0x08008e67
 8008bdc:	08008e67 	.word	0x08008e67
 8008be0:	08008e67 	.word	0x08008e67
 8008be4:	08008c4f 	.word	0x08008c4f
 8008be8:	08008e67 	.word	0x08008e67
 8008bec:	08008e67 	.word	0x08008e67
 8008bf0:	08008e67 	.word	0x08008e67
 8008bf4:	08008e67 	.word	0x08008e67
 8008bf8:	08008e67 	.word	0x08008e67
 8008bfc:	08008e67 	.word	0x08008e67
 8008c00:	08008e67 	.word	0x08008e67
 8008c04:	08008c55 	.word	0x08008c55
 8008c08:	08008e67 	.word	0x08008e67
 8008c0c:	08008e67 	.word	0x08008e67
 8008c10:	08008e67 	.word	0x08008e67
 8008c14:	08008e67 	.word	0x08008e67
 8008c18:	08008e67 	.word	0x08008e67
 8008c1c:	08008e67 	.word	0x08008e67
 8008c20:	08008e67 	.word	0x08008e67
 8008c24:	08008c5b 	.word	0x08008c5b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c28:	4b94      	ldr	r3, [pc, #592]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0320 	and.w	r3, r3, #32
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d009      	beq.n	8008c48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c34:	4b91      	ldr	r3, [pc, #580]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	08db      	lsrs	r3, r3, #3
 8008c3a:	f003 0303 	and.w	r3, r3, #3
 8008c3e:	4a90      	ldr	r2, [pc, #576]	; (8008e80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c40:	fa22 f303 	lsr.w	r3, r2, r3
 8008c44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008c46:	e111      	b.n	8008e6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008c48:	4b8d      	ldr	r3, [pc, #564]	; (8008e80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c4a:	61bb      	str	r3, [r7, #24]
      break;
 8008c4c:	e10e      	b.n	8008e6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008c4e:	4b8d      	ldr	r3, [pc, #564]	; (8008e84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008c50:	61bb      	str	r3, [r7, #24]
      break;
 8008c52:	e10b      	b.n	8008e6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008c54:	4b8c      	ldr	r3, [pc, #560]	; (8008e88 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008c56:	61bb      	str	r3, [r7, #24]
      break;
 8008c58:	e108      	b.n	8008e6c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c5a:	4b88      	ldr	r3, [pc, #544]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5e:	f003 0303 	and.w	r3, r3, #3
 8008c62:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008c64:	4b85      	ldr	r3, [pc, #532]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c68:	091b      	lsrs	r3, r3, #4
 8008c6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c6e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008c70:	4b82      	ldr	r3, [pc, #520]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c74:	f003 0301 	and.w	r3, r3, #1
 8008c78:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008c7a:	4b80      	ldr	r3, [pc, #512]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c7e:	08db      	lsrs	r3, r3, #3
 8008c80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	fb02 f303 	mul.w	r3, r2, r3
 8008c8a:	ee07 3a90 	vmov	s15, r3
 8008c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c92:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f000 80e1 	beq.w	8008e60 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	f000 8083 	beq.w	8008dac <HAL_RCC_GetSysClockFreq+0x204>
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	f200 80a1 	bhi.w	8008df0 <HAL_RCC_GetSysClockFreq+0x248>
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d003      	beq.n	8008cbc <HAL_RCC_GetSysClockFreq+0x114>
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d056      	beq.n	8008d68 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008cba:	e099      	b.n	8008df0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cbc:	4b6f      	ldr	r3, [pc, #444]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0320 	and.w	r3, r3, #32
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d02d      	beq.n	8008d24 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cc8:	4b6c      	ldr	r3, [pc, #432]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	08db      	lsrs	r3, r3, #3
 8008cce:	f003 0303 	and.w	r3, r3, #3
 8008cd2:	4a6b      	ldr	r2, [pc, #428]	; (8008e80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	ee07 3a90 	vmov	s15, r3
 8008ce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	ee07 3a90 	vmov	s15, r3
 8008cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cf2:	4b62      	ldr	r3, [pc, #392]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cfa:	ee07 3a90 	vmov	s15, r3
 8008cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d02:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d06:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d1e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008d22:	e087      	b.n	8008e34 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	ee07 3a90 	vmov	s15, r3
 8008d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d2e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008e90 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d36:	4b51      	ldr	r3, [pc, #324]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d3e:	ee07 3a90 	vmov	s15, r3
 8008d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d46:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d4a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d66:	e065      	b.n	8008e34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d72:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008e94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d7a:	4b40      	ldr	r3, [pc, #256]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d82:	ee07 3a90 	vmov	s15, r3
 8008d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d8e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008da6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008daa:	e043      	b.n	8008e34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	ee07 3a90 	vmov	s15, r3
 8008db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008e98 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dbe:	4b2f      	ldr	r3, [pc, #188]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dc6:	ee07 3a90 	vmov	s15, r3
 8008dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dce:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dd2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008dee:	e021      	b.n	8008e34 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	ee07 3a90 	vmov	s15, r3
 8008df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dfa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008e94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e02:	4b1e      	ldr	r3, [pc, #120]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e0a:	ee07 3a90 	vmov	s15, r3
 8008e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e12:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e16:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e32:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008e34:	4b11      	ldr	r3, [pc, #68]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e38:	0a5b      	lsrs	r3, r3, #9
 8008e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e3e:	3301      	adds	r3, #1
 8008e40:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	ee07 3a90 	vmov	s15, r3
 8008e48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e58:	ee17 3a90 	vmov	r3, s15
 8008e5c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008e5e:	e005      	b.n	8008e6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008e60:	2300      	movs	r3, #0
 8008e62:	61bb      	str	r3, [r7, #24]
      break;
 8008e64:	e002      	b.n	8008e6c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008e66:	4b07      	ldr	r3, [pc, #28]	; (8008e84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008e68:	61bb      	str	r3, [r7, #24]
      break;
 8008e6a:	bf00      	nop
  }

  return sysclockfreq;
 8008e6c:	69bb      	ldr	r3, [r7, #24]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3724      	adds	r7, #36	; 0x24
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	58024400 	.word	0x58024400
 8008e80:	03d09000 	.word	0x03d09000
 8008e84:	003d0900 	.word	0x003d0900
 8008e88:	007a1200 	.word	0x007a1200
 8008e8c:	46000000 	.word	0x46000000
 8008e90:	4c742400 	.word	0x4c742400
 8008e94:	4a742400 	.word	0x4a742400
 8008e98:	4af42400 	.word	0x4af42400

08008e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008ea2:	f7ff fe81 	bl	8008ba8 <HAL_RCC_GetSysClockFreq>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	4b10      	ldr	r3, [pc, #64]	; (8008eec <HAL_RCC_GetHCLKFreq+0x50>)
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	0a1b      	lsrs	r3, r3, #8
 8008eae:	f003 030f 	and.w	r3, r3, #15
 8008eb2:	490f      	ldr	r1, [pc, #60]	; (8008ef0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008eb4:	5ccb      	ldrb	r3, [r1, r3]
 8008eb6:	f003 031f 	and.w	r3, r3, #31
 8008eba:	fa22 f303 	lsr.w	r3, r2, r3
 8008ebe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ec0:	4b0a      	ldr	r3, [pc, #40]	; (8008eec <HAL_RCC_GetHCLKFreq+0x50>)
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	f003 030f 	and.w	r3, r3, #15
 8008ec8:	4a09      	ldr	r2, [pc, #36]	; (8008ef0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008eca:	5cd3      	ldrb	r3, [r2, r3]
 8008ecc:	f003 031f 	and.w	r3, r3, #31
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ed6:	4a07      	ldr	r2, [pc, #28]	; (8008ef4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008ed8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008eda:	4a07      	ldr	r2, [pc, #28]	; (8008ef8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008ee0:	4b04      	ldr	r3, [pc, #16]	; (8008ef4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	58024400 	.word	0x58024400
 8008ef0:	0800ec98 	.word	0x0800ec98
 8008ef4:	2400000c 	.word	0x2400000c
 8008ef8:	24000008 	.word	0x24000008

08008efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008f00:	f7ff ffcc 	bl	8008e9c <HAL_RCC_GetHCLKFreq>
 8008f04:	4602      	mov	r2, r0
 8008f06:	4b06      	ldr	r3, [pc, #24]	; (8008f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f08:	69db      	ldr	r3, [r3, #28]
 8008f0a:	091b      	lsrs	r3, r3, #4
 8008f0c:	f003 0307 	and.w	r3, r3, #7
 8008f10:	4904      	ldr	r1, [pc, #16]	; (8008f24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f12:	5ccb      	ldrb	r3, [r1, r3]
 8008f14:	f003 031f 	and.w	r3, r3, #31
 8008f18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	58024400 	.word	0x58024400
 8008f24:	0800ec98 	.word	0x0800ec98

08008f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008f2c:	f7ff ffb6 	bl	8008e9c <HAL_RCC_GetHCLKFreq>
 8008f30:	4602      	mov	r2, r0
 8008f32:	4b06      	ldr	r3, [pc, #24]	; (8008f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f34:	69db      	ldr	r3, [r3, #28]
 8008f36:	0a1b      	lsrs	r3, r3, #8
 8008f38:	f003 0307 	and.w	r3, r3, #7
 8008f3c:	4904      	ldr	r1, [pc, #16]	; (8008f50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008f3e:	5ccb      	ldrb	r3, [r1, r3]
 8008f40:	f003 031f 	and.w	r3, r3, #31
 8008f44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	58024400 	.word	0x58024400
 8008f50:	0800ec98 	.word	0x0800ec98

08008f54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f58:	b0c6      	sub	sp, #280	; 0x118
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008f60:	2300      	movs	r3, #0
 8008f62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f66:	2300      	movs	r3, #0
 8008f68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f74:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008f78:	2500      	movs	r5, #0
 8008f7a:	ea54 0305 	orrs.w	r3, r4, r5
 8008f7e:	d049      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f8a:	d02f      	beq.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008f8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f90:	d828      	bhi.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008f92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f96:	d01a      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008f98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f9c:	d822      	bhi.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d003      	beq.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008fa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fa6:	d007      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008fa8:	e01c      	b.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008faa:	4bab      	ldr	r3, [pc, #684]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fae:	4aaa      	ldr	r2, [pc, #680]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008fb6:	e01a      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fbc:	3308      	adds	r3, #8
 8008fbe:	2102      	movs	r1, #2
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f001 fc25 	bl	800a810 <RCCEx_PLL2_Config>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008fcc:	e00f      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fd2:	3328      	adds	r3, #40	; 0x28
 8008fd4:	2102      	movs	r1, #2
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f001 fccc 	bl	800a974 <RCCEx_PLL3_Config>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008fe2:	e004      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008fea:	e000      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d10a      	bne.n	800900c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008ff6:	4b98      	ldr	r3, [pc, #608]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ffa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009004:	4a94      	ldr	r2, [pc, #592]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009006:	430b      	orrs	r3, r1
 8009008:	6513      	str	r3, [r2, #80]	; 0x50
 800900a:	e003      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800900c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009010:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009020:	f04f 0900 	mov.w	r9, #0
 8009024:	ea58 0309 	orrs.w	r3, r8, r9
 8009028:	d047      	beq.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800902a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800902e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009030:	2b04      	cmp	r3, #4
 8009032:	d82a      	bhi.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009034:	a201      	add	r2, pc, #4	; (adr r2, 800903c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903a:	bf00      	nop
 800903c:	08009051 	.word	0x08009051
 8009040:	0800905f 	.word	0x0800905f
 8009044:	08009075 	.word	0x08009075
 8009048:	08009093 	.word	0x08009093
 800904c:	08009093 	.word	0x08009093
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009050:	4b81      	ldr	r3, [pc, #516]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009054:	4a80      	ldr	r2, [pc, #512]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800905a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800905c:	e01a      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800905e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009062:	3308      	adds	r3, #8
 8009064:	2100      	movs	r1, #0
 8009066:	4618      	mov	r0, r3
 8009068:	f001 fbd2 	bl	800a810 <RCCEx_PLL2_Config>
 800906c:	4603      	mov	r3, r0
 800906e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009072:	e00f      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009078:	3328      	adds	r3, #40	; 0x28
 800907a:	2100      	movs	r1, #0
 800907c:	4618      	mov	r0, r3
 800907e:	f001 fc79 	bl	800a974 <RCCEx_PLL3_Config>
 8009082:	4603      	mov	r3, r0
 8009084:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009088:	e004      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009090:	e000      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009092:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009094:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10a      	bne.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800909c:	4b6e      	ldr	r3, [pc, #440]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800909e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090a0:	f023 0107 	bic.w	r1, r3, #7
 80090a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090aa:	4a6b      	ldr	r2, [pc, #428]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80090ac:	430b      	orrs	r3, r1
 80090ae:	6513      	str	r3, [r2, #80]	; 0x50
 80090b0:	e003      	b.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80090b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80090ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80090c6:	f04f 0b00 	mov.w	fp, #0
 80090ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80090ce:	d05b      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80090d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80090d8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80090dc:	d03b      	beq.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80090de:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80090e2:	d834      	bhi.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80090e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090e8:	d037      	beq.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80090ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090ee:	d82e      	bhi.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80090f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80090f4:	d033      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80090f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80090fa:	d828      	bhi.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80090fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009100:	d01a      	beq.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009106:	d822      	bhi.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009108:	2b00      	cmp	r3, #0
 800910a:	d003      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800910c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009110:	d007      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009112:	e01c      	b.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009114:	4b50      	ldr	r3, [pc, #320]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009118:	4a4f      	ldr	r2, [pc, #316]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800911a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800911e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009120:	e01e      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009126:	3308      	adds	r3, #8
 8009128:	2100      	movs	r1, #0
 800912a:	4618      	mov	r0, r3
 800912c:	f001 fb70 	bl	800a810 <RCCEx_PLL2_Config>
 8009130:	4603      	mov	r3, r0
 8009132:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009136:	e013      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800913c:	3328      	adds	r3, #40	; 0x28
 800913e:	2100      	movs	r1, #0
 8009140:	4618      	mov	r0, r3
 8009142:	f001 fc17 	bl	800a974 <RCCEx_PLL3_Config>
 8009146:	4603      	mov	r3, r0
 8009148:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800914c:	e008      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009154:	e004      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009156:	bf00      	nop
 8009158:	e002      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800915a:	bf00      	nop
 800915c:	e000      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800915e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009160:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10b      	bne.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009168:	4b3b      	ldr	r3, [pc, #236]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800916a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800916c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009174:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009178:	4a37      	ldr	r2, [pc, #220]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800917a:	430b      	orrs	r3, r1
 800917c:	6593      	str	r3, [r2, #88]	; 0x58
 800917e:	e003      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009180:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009184:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800918c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009190:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009194:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009198:	2300      	movs	r3, #0
 800919a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800919e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80091a2:	460b      	mov	r3, r1
 80091a4:	4313      	orrs	r3, r2
 80091a6:	d05d      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80091a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80091b0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80091b4:	d03b      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80091b6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80091ba:	d834      	bhi.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80091bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091c0:	d037      	beq.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80091c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091c6:	d82e      	bhi.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80091c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80091cc:	d033      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80091ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80091d2:	d828      	bhi.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80091d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091d8:	d01a      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80091da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091de:	d822      	bhi.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d003      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x298>
 80091e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80091e8:	d007      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80091ea:	e01c      	b.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091ec:	4b1a      	ldr	r3, [pc, #104]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80091ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f0:	4a19      	ldr	r2, [pc, #100]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80091f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091f8:	e01e      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091fe:	3308      	adds	r3, #8
 8009200:	2100      	movs	r1, #0
 8009202:	4618      	mov	r0, r3
 8009204:	f001 fb04 	bl	800a810 <RCCEx_PLL2_Config>
 8009208:	4603      	mov	r3, r0
 800920a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800920e:	e013      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009214:	3328      	adds	r3, #40	; 0x28
 8009216:	2100      	movs	r1, #0
 8009218:	4618      	mov	r0, r3
 800921a:	f001 fbab 	bl	800a974 <RCCEx_PLL3_Config>
 800921e:	4603      	mov	r3, r0
 8009220:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009224:	e008      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800922c:	e004      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800922e:	bf00      	nop
 8009230:	e002      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009232:	bf00      	nop
 8009234:	e000      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009238:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10d      	bne.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009240:	4b05      	ldr	r3, [pc, #20]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009244:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800924c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009250:	4a01      	ldr	r2, [pc, #4]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009252:	430b      	orrs	r3, r1
 8009254:	6593      	str	r3, [r2, #88]	; 0x58
 8009256:	e005      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009258:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800925c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009260:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009270:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009274:	2300      	movs	r3, #0
 8009276:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800927a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800927e:	460b      	mov	r3, r1
 8009280:	4313      	orrs	r3, r2
 8009282:	d03a      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800928a:	2b30      	cmp	r3, #48	; 0x30
 800928c:	d01f      	beq.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800928e:	2b30      	cmp	r3, #48	; 0x30
 8009290:	d819      	bhi.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009292:	2b20      	cmp	r3, #32
 8009294:	d00c      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009296:	2b20      	cmp	r3, #32
 8009298:	d815      	bhi.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800929a:	2b00      	cmp	r3, #0
 800929c:	d019      	beq.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800929e:	2b10      	cmp	r3, #16
 80092a0:	d111      	bne.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092a2:	4baa      	ldr	r3, [pc, #680]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a6:	4aa9      	ldr	r2, [pc, #676]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80092ae:	e011      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80092b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092b4:	3308      	adds	r3, #8
 80092b6:	2102      	movs	r1, #2
 80092b8:	4618      	mov	r0, r3
 80092ba:	f001 faa9 	bl	800a810 <RCCEx_PLL2_Config>
 80092be:	4603      	mov	r3, r0
 80092c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80092c4:	e006      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80092cc:	e002      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80092ce:	bf00      	nop
 80092d0:	e000      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80092d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10a      	bne.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80092dc:	4b9b      	ldr	r3, [pc, #620]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092e0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80092e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092ea:	4a98      	ldr	r2, [pc, #608]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092ec:	430b      	orrs	r3, r1
 80092ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80092f0:	e003      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80092f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80092fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009302:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009306:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800930a:	2300      	movs	r3, #0
 800930c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009310:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009314:	460b      	mov	r3, r1
 8009316:	4313      	orrs	r3, r2
 8009318:	d051      	beq.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800931a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800931e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009320:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009324:	d035      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009326:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800932a:	d82e      	bhi.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800932c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009330:	d031      	beq.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009332:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009336:	d828      	bhi.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800933c:	d01a      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800933e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009342:	d822      	bhi.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009344:	2b00      	cmp	r3, #0
 8009346:	d003      	beq.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800934c:	d007      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800934e:	e01c      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009350:	4b7e      	ldr	r3, [pc, #504]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009354:	4a7d      	ldr	r2, [pc, #500]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800935a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800935c:	e01c      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800935e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009362:	3308      	adds	r3, #8
 8009364:	2100      	movs	r1, #0
 8009366:	4618      	mov	r0, r3
 8009368:	f001 fa52 	bl	800a810 <RCCEx_PLL2_Config>
 800936c:	4603      	mov	r3, r0
 800936e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009372:	e011      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009378:	3328      	adds	r3, #40	; 0x28
 800937a:	2100      	movs	r1, #0
 800937c:	4618      	mov	r0, r3
 800937e:	f001 faf9 	bl	800a974 <RCCEx_PLL3_Config>
 8009382:	4603      	mov	r3, r0
 8009384:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009388:	e006      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009390:	e002      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009392:	bf00      	nop
 8009394:	e000      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009396:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009398:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800939c:	2b00      	cmp	r3, #0
 800939e:	d10a      	bne.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80093a0:	4b6a      	ldr	r3, [pc, #424]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80093a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093a4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80093a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093ae:	4a67      	ldr	r2, [pc, #412]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80093b0:	430b      	orrs	r3, r1
 80093b2:	6513      	str	r3, [r2, #80]	; 0x50
 80093b4:	e003      	b.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80093ba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80093be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80093ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093ce:	2300      	movs	r3, #0
 80093d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80093d4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80093d8:	460b      	mov	r3, r1
 80093da:	4313      	orrs	r3, r2
 80093dc:	d053      	beq.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80093de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093e8:	d033      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80093ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093ee:	d82c      	bhi.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80093f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80093f4:	d02f      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80093f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80093fa:	d826      	bhi.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80093fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009400:	d02b      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009402:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009406:	d820      	bhi.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009408:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800940c:	d012      	beq.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800940e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009412:	d81a      	bhi.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009414:	2b00      	cmp	r3, #0
 8009416:	d022      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800941c:	d115      	bne.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800941e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009422:	3308      	adds	r3, #8
 8009424:	2101      	movs	r1, #1
 8009426:	4618      	mov	r0, r3
 8009428:	f001 f9f2 	bl	800a810 <RCCEx_PLL2_Config>
 800942c:	4603      	mov	r3, r0
 800942e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009432:	e015      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009438:	3328      	adds	r3, #40	; 0x28
 800943a:	2101      	movs	r1, #1
 800943c:	4618      	mov	r0, r3
 800943e:	f001 fa99 	bl	800a974 <RCCEx_PLL3_Config>
 8009442:	4603      	mov	r3, r0
 8009444:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009448:	e00a      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009450:	e006      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009452:	bf00      	nop
 8009454:	e004      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009456:	bf00      	nop
 8009458:	e002      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800945a:	bf00      	nop
 800945c:	e000      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800945e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009460:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009464:	2b00      	cmp	r3, #0
 8009466:	d10a      	bne.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009468:	4b38      	ldr	r3, [pc, #224]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800946a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800946c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009476:	4a35      	ldr	r2, [pc, #212]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009478:	430b      	orrs	r3, r1
 800947a:	6513      	str	r3, [r2, #80]	; 0x50
 800947c:	e003      	b.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800947e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009482:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800948a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009492:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009496:	2300      	movs	r3, #0
 8009498:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800949c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80094a0:	460b      	mov	r3, r1
 80094a2:	4313      	orrs	r3, r2
 80094a4:	d058      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80094a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80094ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094b2:	d033      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80094b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094b8:	d82c      	bhi.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80094ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094be:	d02f      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80094c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094c4:	d826      	bhi.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80094c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094ca:	d02b      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80094cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094d0:	d820      	bhi.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80094d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094d6:	d012      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80094d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094dc:	d81a      	bhi.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d022      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80094e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094e6:	d115      	bne.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094ec:	3308      	adds	r3, #8
 80094ee:	2101      	movs	r1, #1
 80094f0:	4618      	mov	r0, r3
 80094f2:	f001 f98d 	bl	800a810 <RCCEx_PLL2_Config>
 80094f6:	4603      	mov	r3, r0
 80094f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80094fc:	e015      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009502:	3328      	adds	r3, #40	; 0x28
 8009504:	2101      	movs	r1, #1
 8009506:	4618      	mov	r0, r3
 8009508:	f001 fa34 	bl	800a974 <RCCEx_PLL3_Config>
 800950c:	4603      	mov	r3, r0
 800950e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009512:	e00a      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800951a:	e006      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800951c:	bf00      	nop
 800951e:	e004      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009520:	bf00      	nop
 8009522:	e002      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009524:	bf00      	nop
 8009526:	e000      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800952a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10e      	bne.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009532:	4b06      	ldr	r3, [pc, #24]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009536:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800953a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800953e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009542:	4a02      	ldr	r2, [pc, #8]	; (800954c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009544:	430b      	orrs	r3, r1
 8009546:	6593      	str	r3, [r2, #88]	; 0x58
 8009548:	e006      	b.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800954a:	bf00      	nop
 800954c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009550:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009554:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800955c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009560:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009568:	2300      	movs	r3, #0
 800956a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800956e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009572:	460b      	mov	r3, r1
 8009574:	4313      	orrs	r3, r2
 8009576:	d037      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800957c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800957e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009582:	d00e      	beq.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009588:	d816      	bhi.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800958a:	2b00      	cmp	r3, #0
 800958c:	d018      	beq.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800958e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009592:	d111      	bne.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009594:	4bc4      	ldr	r3, [pc, #784]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009598:	4ac3      	ldr	r2, [pc, #780]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800959a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800959e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80095a0:	e00f      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095a6:	3308      	adds	r3, #8
 80095a8:	2101      	movs	r1, #1
 80095aa:	4618      	mov	r0, r3
 80095ac:	f001 f930 	bl	800a810 <RCCEx_PLL2_Config>
 80095b0:	4603      	mov	r3, r0
 80095b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80095b6:	e004      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80095be:	e000      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80095c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10a      	bne.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80095ca:	4bb7      	ldr	r3, [pc, #732]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095ce:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80095d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095d8:	4ab3      	ldr	r2, [pc, #716]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095da:	430b      	orrs	r3, r1
 80095dc:	6513      	str	r3, [r2, #80]	; 0x50
 80095de:	e003      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80095e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80095e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80095f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80095f8:	2300      	movs	r3, #0
 80095fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80095fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009602:	460b      	mov	r3, r1
 8009604:	4313      	orrs	r3, r2
 8009606:	d039      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800960c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800960e:	2b03      	cmp	r3, #3
 8009610:	d81c      	bhi.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009612:	a201      	add	r2, pc, #4	; (adr r2, 8009618 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009618:	08009655 	.word	0x08009655
 800961c:	08009629 	.word	0x08009629
 8009620:	08009637 	.word	0x08009637
 8009624:	08009655 	.word	0x08009655
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009628:	4b9f      	ldr	r3, [pc, #636]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800962a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800962c:	4a9e      	ldr	r2, [pc, #632]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800962e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009632:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009634:	e00f      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800963a:	3308      	adds	r3, #8
 800963c:	2102      	movs	r1, #2
 800963e:	4618      	mov	r0, r3
 8009640:	f001 f8e6 	bl	800a810 <RCCEx_PLL2_Config>
 8009644:	4603      	mov	r3, r0
 8009646:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800964a:	e004      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009652:	e000      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009656:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10a      	bne.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800965e:	4b92      	ldr	r3, [pc, #584]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009662:	f023 0103 	bic.w	r1, r3, #3
 8009666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800966a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800966c:	4a8e      	ldr	r2, [pc, #568]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800966e:	430b      	orrs	r3, r1
 8009670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009672:	e003      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009674:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009678:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800967c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009684:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009688:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800968c:	2300      	movs	r3, #0
 800968e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009692:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009696:	460b      	mov	r3, r1
 8009698:	4313      	orrs	r3, r2
 800969a:	f000 8099 	beq.w	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800969e:	4b83      	ldr	r3, [pc, #524]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a82      	ldr	r2, [pc, #520]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80096a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80096aa:	f7fb fb9b 	bl	8004de4 <HAL_GetTick>
 80096ae:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096b2:	e00b      	b.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096b4:	f7fb fb96 	bl	8004de4 <HAL_GetTick>
 80096b8:	4602      	mov	r2, r0
 80096ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	2b64      	cmp	r3, #100	; 0x64
 80096c2:	d903      	bls.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80096c4:	2303      	movs	r3, #3
 80096c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80096ca:	e005      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096cc:	4b77      	ldr	r3, [pc, #476]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d0ed      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80096d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d173      	bne.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80096e0:	4b71      	ldr	r3, [pc, #452]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80096e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80096e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80096ec:	4053      	eors	r3, r2
 80096ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d015      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80096f6:	4b6c      	ldr	r3, [pc, #432]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80096f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009702:	4b69      	ldr	r3, [pc, #420]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009706:	4a68      	ldr	r2, [pc, #416]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800970c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800970e:	4b66      	ldr	r3, [pc, #408]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009712:	4a65      	ldr	r2, [pc, #404]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009718:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800971a:	4a63      	ldr	r2, [pc, #396]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800971c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009720:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009726:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800972a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800972e:	d118      	bne.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009730:	f7fb fb58 	bl	8004de4 <HAL_GetTick>
 8009734:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009738:	e00d      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800973a:	f7fb fb53 	bl	8004de4 <HAL_GetTick>
 800973e:	4602      	mov	r2, r0
 8009740:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009744:	1ad2      	subs	r2, r2, r3
 8009746:	f241 3388 	movw	r3, #5000	; 0x1388
 800974a:	429a      	cmp	r2, r3
 800974c:	d903      	bls.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800974e:	2303      	movs	r3, #3
 8009750:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8009754:	e005      	b.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009756:	4b54      	ldr	r3, [pc, #336]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800975a:	f003 0302 	and.w	r3, r3, #2
 800975e:	2b00      	cmp	r3, #0
 8009760:	d0eb      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009762:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009766:	2b00      	cmp	r3, #0
 8009768:	d129      	bne.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800976a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800976e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009776:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800977a:	d10e      	bne.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800977c:	4b4a      	ldr	r3, [pc, #296]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009788:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800978c:	091a      	lsrs	r2, r3, #4
 800978e:	4b48      	ldr	r3, [pc, #288]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009790:	4013      	ands	r3, r2
 8009792:	4a45      	ldr	r2, [pc, #276]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009794:	430b      	orrs	r3, r1
 8009796:	6113      	str	r3, [r2, #16]
 8009798:	e005      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800979a:	4b43      	ldr	r3, [pc, #268]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	4a42      	ldr	r2, [pc, #264]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80097a4:	6113      	str	r3, [r2, #16]
 80097a6:	4b40      	ldr	r3, [pc, #256]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80097aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80097b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097b6:	4a3c      	ldr	r2, [pc, #240]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097b8:	430b      	orrs	r3, r1
 80097ba:	6713      	str	r3, [r2, #112]	; 0x70
 80097bc:	e008      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80097be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80097c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80097c6:	e003      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80097cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80097d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d8:	f002 0301 	and.w	r3, r2, #1
 80097dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097e0:	2300      	movs	r3, #0
 80097e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80097e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80097ea:	460b      	mov	r3, r1
 80097ec:	4313      	orrs	r3, r2
 80097ee:	f000 808f 	beq.w	8009910 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80097f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097f8:	2b28      	cmp	r3, #40	; 0x28
 80097fa:	d871      	bhi.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80097fc:	a201      	add	r2, pc, #4	; (adr r2, 8009804 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80097fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009802:	bf00      	nop
 8009804:	080098e9 	.word	0x080098e9
 8009808:	080098e1 	.word	0x080098e1
 800980c:	080098e1 	.word	0x080098e1
 8009810:	080098e1 	.word	0x080098e1
 8009814:	080098e1 	.word	0x080098e1
 8009818:	080098e1 	.word	0x080098e1
 800981c:	080098e1 	.word	0x080098e1
 8009820:	080098e1 	.word	0x080098e1
 8009824:	080098b5 	.word	0x080098b5
 8009828:	080098e1 	.word	0x080098e1
 800982c:	080098e1 	.word	0x080098e1
 8009830:	080098e1 	.word	0x080098e1
 8009834:	080098e1 	.word	0x080098e1
 8009838:	080098e1 	.word	0x080098e1
 800983c:	080098e1 	.word	0x080098e1
 8009840:	080098e1 	.word	0x080098e1
 8009844:	080098cb 	.word	0x080098cb
 8009848:	080098e1 	.word	0x080098e1
 800984c:	080098e1 	.word	0x080098e1
 8009850:	080098e1 	.word	0x080098e1
 8009854:	080098e1 	.word	0x080098e1
 8009858:	080098e1 	.word	0x080098e1
 800985c:	080098e1 	.word	0x080098e1
 8009860:	080098e1 	.word	0x080098e1
 8009864:	080098e9 	.word	0x080098e9
 8009868:	080098e1 	.word	0x080098e1
 800986c:	080098e1 	.word	0x080098e1
 8009870:	080098e1 	.word	0x080098e1
 8009874:	080098e1 	.word	0x080098e1
 8009878:	080098e1 	.word	0x080098e1
 800987c:	080098e1 	.word	0x080098e1
 8009880:	080098e1 	.word	0x080098e1
 8009884:	080098e9 	.word	0x080098e9
 8009888:	080098e1 	.word	0x080098e1
 800988c:	080098e1 	.word	0x080098e1
 8009890:	080098e1 	.word	0x080098e1
 8009894:	080098e1 	.word	0x080098e1
 8009898:	080098e1 	.word	0x080098e1
 800989c:	080098e1 	.word	0x080098e1
 80098a0:	080098e1 	.word	0x080098e1
 80098a4:	080098e9 	.word	0x080098e9
 80098a8:	58024400 	.word	0x58024400
 80098ac:	58024800 	.word	0x58024800
 80098b0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098b8:	3308      	adds	r3, #8
 80098ba:	2101      	movs	r1, #1
 80098bc:	4618      	mov	r0, r3
 80098be:	f000 ffa7 	bl	800a810 <RCCEx_PLL2_Config>
 80098c2:	4603      	mov	r3, r0
 80098c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80098c8:	e00f      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098ce:	3328      	adds	r3, #40	; 0x28
 80098d0:	2101      	movs	r1, #1
 80098d2:	4618      	mov	r0, r3
 80098d4:	f001 f84e 	bl	800a974 <RCCEx_PLL3_Config>
 80098d8:	4603      	mov	r3, r0
 80098da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80098de:	e004      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80098e6:	e000      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80098e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d10a      	bne.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80098f2:	4bbf      	ldr	r3, [pc, #764]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80098f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098f6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80098fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009900:	4abb      	ldr	r2, [pc, #748]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009902:	430b      	orrs	r3, r1
 8009904:	6553      	str	r3, [r2, #84]	; 0x54
 8009906:	e003      	b.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009908:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800990c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009918:	f002 0302 	and.w	r3, r2, #2
 800991c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009920:	2300      	movs	r3, #0
 8009922:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009926:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800992a:	460b      	mov	r3, r1
 800992c:	4313      	orrs	r3, r2
 800992e:	d041      	beq.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009936:	2b05      	cmp	r3, #5
 8009938:	d824      	bhi.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800993a:	a201      	add	r2, pc, #4	; (adr r2, 8009940 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800993c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009940:	0800998d 	.word	0x0800998d
 8009944:	08009959 	.word	0x08009959
 8009948:	0800996f 	.word	0x0800996f
 800994c:	0800998d 	.word	0x0800998d
 8009950:	0800998d 	.word	0x0800998d
 8009954:	0800998d 	.word	0x0800998d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800995c:	3308      	adds	r3, #8
 800995e:	2101      	movs	r1, #1
 8009960:	4618      	mov	r0, r3
 8009962:	f000 ff55 	bl	800a810 <RCCEx_PLL2_Config>
 8009966:	4603      	mov	r3, r0
 8009968:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800996c:	e00f      	b.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800996e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009972:	3328      	adds	r3, #40	; 0x28
 8009974:	2101      	movs	r1, #1
 8009976:	4618      	mov	r0, r3
 8009978:	f000 fffc 	bl	800a974 <RCCEx_PLL3_Config>
 800997c:	4603      	mov	r3, r0
 800997e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009982:	e004      	b.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800998a:	e000      	b.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800998c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800998e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10a      	bne.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009996:	4b96      	ldr	r3, [pc, #600]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800999a:	f023 0107 	bic.w	r1, r3, #7
 800999e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099a4:	4a92      	ldr	r2, [pc, #584]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80099a6:	430b      	orrs	r3, r1
 80099a8:	6553      	str	r3, [r2, #84]	; 0x54
 80099aa:	e003      	b.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80099b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80099b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099bc:	f002 0304 	and.w	r3, r2, #4
 80099c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80099c4:	2300      	movs	r3, #0
 80099c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80099ca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80099ce:	460b      	mov	r3, r1
 80099d0:	4313      	orrs	r3, r2
 80099d2:	d044      	beq.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80099d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099dc:	2b05      	cmp	r3, #5
 80099de:	d825      	bhi.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80099e0:	a201      	add	r2, pc, #4	; (adr r2, 80099e8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80099e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e6:	bf00      	nop
 80099e8:	08009a35 	.word	0x08009a35
 80099ec:	08009a01 	.word	0x08009a01
 80099f0:	08009a17 	.word	0x08009a17
 80099f4:	08009a35 	.word	0x08009a35
 80099f8:	08009a35 	.word	0x08009a35
 80099fc:	08009a35 	.word	0x08009a35
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a04:	3308      	adds	r3, #8
 8009a06:	2101      	movs	r1, #1
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f000 ff01 	bl	800a810 <RCCEx_PLL2_Config>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009a14:	e00f      	b.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a1a:	3328      	adds	r3, #40	; 0x28
 8009a1c:	2101      	movs	r1, #1
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f000 ffa8 	bl	800a974 <RCCEx_PLL3_Config>
 8009a24:	4603      	mov	r3, r0
 8009a26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009a2a:	e004      	b.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009a32:	e000      	b.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d10b      	bne.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009a3e:	4b6c      	ldr	r3, [pc, #432]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a42:	f023 0107 	bic.w	r1, r3, #7
 8009a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a4e:	4a68      	ldr	r2, [pc, #416]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009a50:	430b      	orrs	r3, r1
 8009a52:	6593      	str	r3, [r2, #88]	; 0x58
 8009a54:	e003      	b.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a5a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a66:	f002 0320 	and.w	r3, r2, #32
 8009a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009a6e:	2300      	movs	r3, #0
 8009a70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009a74:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	d055      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a8a:	d033      	beq.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a90:	d82c      	bhi.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a96:	d02f      	beq.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a9c:	d826      	bhi.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009a9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009aa2:	d02b      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009aa4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009aa8:	d820      	bhi.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009aae:	d012      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ab4:	d81a      	bhi.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d022      	beq.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009aba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009abe:	d115      	bne.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ac4:	3308      	adds	r3, #8
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f000 fea1 	bl	800a810 <RCCEx_PLL2_Config>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009ad4:	e015      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ada:	3328      	adds	r3, #40	; 0x28
 8009adc:	2102      	movs	r1, #2
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 ff48 	bl	800a974 <RCCEx_PLL3_Config>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009aea:	e00a      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009af2:	e006      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009af4:	bf00      	nop
 8009af6:	e004      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009af8:	bf00      	nop
 8009afa:	e002      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009afc:	bf00      	nop
 8009afe:	e000      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10b      	bne.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009b0a:	4b39      	ldr	r3, [pc, #228]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b0e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b1a:	4a35      	ldr	r2, [pc, #212]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009b1c:	430b      	orrs	r3, r1
 8009b1e:	6553      	str	r3, [r2, #84]	; 0x54
 8009b20:	e003      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b26:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b32:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009b36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009b40:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009b44:	460b      	mov	r3, r1
 8009b46:	4313      	orrs	r3, r2
 8009b48:	d058      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b52:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009b56:	d033      	beq.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009b58:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009b5c:	d82c      	bhi.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b62:	d02f      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b68:	d826      	bhi.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009b6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b6e:	d02b      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009b70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b74:	d820      	bhi.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b7a:	d012      	beq.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009b7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b80:	d81a      	bhi.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d022      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b8a:	d115      	bne.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b90:	3308      	adds	r3, #8
 8009b92:	2100      	movs	r1, #0
 8009b94:	4618      	mov	r0, r3
 8009b96:	f000 fe3b 	bl	800a810 <RCCEx_PLL2_Config>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009ba0:	e015      	b.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ba6:	3328      	adds	r3, #40	; 0x28
 8009ba8:	2102      	movs	r1, #2
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 fee2 	bl	800a974 <RCCEx_PLL3_Config>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009bb6:	e00a      	b.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009bbe:	e006      	b.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009bc0:	bf00      	nop
 8009bc2:	e004      	b.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009bc4:	bf00      	nop
 8009bc6:	e002      	b.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009bc8:	bf00      	nop
 8009bca:	e000      	b.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10e      	bne.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009bd6:	4b06      	ldr	r3, [pc, #24]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bda:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009be6:	4a02      	ldr	r2, [pc, #8]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009be8:	430b      	orrs	r3, r1
 8009bea:	6593      	str	r3, [r2, #88]	; 0x58
 8009bec:	e006      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009bee:	bf00      	nop
 8009bf0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009bf8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009c08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009c12:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009c16:	460b      	mov	r3, r1
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	d055      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c24:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c28:	d033      	beq.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009c2a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c2e:	d82c      	bhi.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c34:	d02f      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c3a:	d826      	bhi.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009c3c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009c40:	d02b      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009c42:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009c46:	d820      	bhi.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c4c:	d012      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8009c4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c52:	d81a      	bhi.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d022      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c5c:	d115      	bne.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c62:	3308      	adds	r3, #8
 8009c64:	2100      	movs	r1, #0
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 fdd2 	bl	800a810 <RCCEx_PLL2_Config>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009c72:	e015      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c78:	3328      	adds	r3, #40	; 0x28
 8009c7a:	2102      	movs	r1, #2
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f000 fe79 	bl	800a974 <RCCEx_PLL3_Config>
 8009c82:	4603      	mov	r3, r0
 8009c84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009c88:	e00a      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009c90:	e006      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009c92:	bf00      	nop
 8009c94:	e004      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009c96:	bf00      	nop
 8009c98:	e002      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009c9a:	bf00      	nop
 8009c9c:	e000      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009c9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ca0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10b      	bne.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009ca8:	4ba0      	ldr	r3, [pc, #640]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cac:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009cb8:	4a9c      	ldr	r2, [pc, #624]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009cba:	430b      	orrs	r3, r1
 8009cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8009cbe:	e003      	b.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009cc4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd0:	f002 0308 	and.w	r3, r2, #8
 8009cd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009cd8:	2300      	movs	r3, #0
 8009cda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009cde:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	d01e      	beq.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cf4:	d10c      	bne.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cfa:	3328      	adds	r3, #40	; 0x28
 8009cfc:	2102      	movs	r1, #2
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f000 fe38 	bl	800a974 <RCCEx_PLL3_Config>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d002      	beq.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009d10:	4b86      	ldr	r3, [pc, #536]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d20:	4a82      	ldr	r2, [pc, #520]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d22:	430b      	orrs	r3, r1
 8009d24:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2e:	f002 0310 	and.w	r3, r2, #16
 8009d32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d36:	2300      	movs	r3, #0
 8009d38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d3c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009d40:	460b      	mov	r3, r1
 8009d42:	4313      	orrs	r3, r2
 8009d44:	d01e      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d52:	d10c      	bne.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d58:	3328      	adds	r3, #40	; 0x28
 8009d5a:	2102      	movs	r1, #2
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 fe09 	bl	800a974 <RCCEx_PLL3_Config>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d002      	beq.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d6e:	4b6f      	ldr	r3, [pc, #444]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d7e:	4a6b      	ldr	r2, [pc, #428]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d80:	430b      	orrs	r3, r1
 8009d82:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009d90:	67bb      	str	r3, [r7, #120]	; 0x78
 8009d92:	2300      	movs	r3, #0
 8009d94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d96:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	d03e      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009da4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009da8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009dac:	d022      	beq.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009dae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009db2:	d81b      	bhi.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d003      	beq.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dbc:	d00b      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009dbe:	e015      	b.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dc4:	3308      	adds	r3, #8
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f000 fd21 	bl	800a810 <RCCEx_PLL2_Config>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009dd4:	e00f      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dda:	3328      	adds	r3, #40	; 0x28
 8009ddc:	2102      	movs	r1, #2
 8009dde:	4618      	mov	r0, r3
 8009de0:	f000 fdc8 	bl	800a974 <RCCEx_PLL3_Config>
 8009de4:	4603      	mov	r3, r0
 8009de6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009dea:	e004      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009df2:	e000      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009df6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d10b      	bne.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009dfe:	4b4b      	ldr	r3, [pc, #300]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e02:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e0e:	4a47      	ldr	r2, [pc, #284]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e10:	430b      	orrs	r3, r1
 8009e12:	6593      	str	r3, [r2, #88]	; 0x58
 8009e14:	e003      	b.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e1a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e26:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009e2a:	673b      	str	r3, [r7, #112]	; 0x70
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	677b      	str	r3, [r7, #116]	; 0x74
 8009e30:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009e34:	460b      	mov	r3, r1
 8009e36:	4313      	orrs	r3, r2
 8009e38:	d03b      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e46:	d01f      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009e48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e4c:	d818      	bhi.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e52:	d003      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009e54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e58:	d007      	beq.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009e5a:	e011      	b.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e5c:	4b33      	ldr	r3, [pc, #204]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e60:	4a32      	ldr	r2, [pc, #200]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009e68:	e00f      	b.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e6e:	3328      	adds	r3, #40	; 0x28
 8009e70:	2101      	movs	r1, #1
 8009e72:	4618      	mov	r0, r3
 8009e74:	f000 fd7e 	bl	800a974 <RCCEx_PLL3_Config>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009e7e:	e004      	b.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009e86:	e000      	b.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d10b      	bne.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e92:	4b26      	ldr	r3, [pc, #152]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e96:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ea2:	4a22      	ldr	r2, [pc, #136]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ea4:	430b      	orrs	r3, r1
 8009ea6:	6553      	str	r3, [r2, #84]	; 0x54
 8009ea8:	e003      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eaa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009eae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009ebe:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ec4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009ec8:	460b      	mov	r3, r1
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	d034      	beq.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d003      	beq.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009edc:	d007      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009ede:	e011      	b.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ee0:	4b12      	ldr	r3, [pc, #72]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee4:	4a11      	ldr	r2, [pc, #68]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009eea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009eec:	e00e      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ef2:	3308      	adds	r3, #8
 8009ef4:	2102      	movs	r1, #2
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 fc8a 	bl	800a810 <RCCEx_PLL2_Config>
 8009efc:	4603      	mov	r3, r0
 8009efe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009f02:	e003      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10d      	bne.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009f14:	4b05      	ldr	r3, [pc, #20]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f22:	4a02      	ldr	r2, [pc, #8]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009f24:	430b      	orrs	r3, r1
 8009f26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f28:	e006      	b.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009f2a:	bf00      	nop
 8009f2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f34:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f40:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009f44:	663b      	str	r3, [r7, #96]	; 0x60
 8009f46:	2300      	movs	r3, #0
 8009f48:	667b      	str	r3, [r7, #100]	; 0x64
 8009f4a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009f4e:	460b      	mov	r3, r1
 8009f50:	4313      	orrs	r3, r2
 8009f52:	d00c      	beq.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f58:	3328      	adds	r3, #40	; 0x28
 8009f5a:	2102      	movs	r1, #2
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 fd09 	bl	800a974 <RCCEx_PLL3_Config>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d002      	beq.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f76:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009f7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f80:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009f84:	460b      	mov	r3, r1
 8009f86:	4313      	orrs	r3, r2
 8009f88:	d036      	beq.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f94:	d018      	beq.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009f96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f9a:	d811      	bhi.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fa0:	d014      	beq.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fa6:	d80b      	bhi.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d011      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fb0:	d106      	bne.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fb2:	4bb7      	ldr	r3, [pc, #732]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb6:	4ab6      	ldr	r2, [pc, #728]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009fbe:	e008      	b.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009fc6:	e004      	b.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009fc8:	bf00      	nop
 8009fca:	e002      	b.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009fcc:	bf00      	nop
 8009fce:	e000      	b.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fd2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d10a      	bne.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009fda:	4bad      	ldr	r3, [pc, #692]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fe8:	4aa9      	ldr	r2, [pc, #676]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009fea:	430b      	orrs	r3, r1
 8009fec:	6553      	str	r3, [r2, #84]	; 0x54
 8009fee:	e003      	b.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ff4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a000:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a004:	653b      	str	r3, [r7, #80]	; 0x50
 800a006:	2300      	movs	r3, #0
 800a008:	657b      	str	r3, [r7, #84]	; 0x54
 800a00a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a00e:	460b      	mov	r3, r1
 800a010:	4313      	orrs	r3, r2
 800a012:	d009      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a014:	4b9e      	ldr	r3, [pc, #632]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a018:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a01c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a022:	4a9b      	ldr	r2, [pc, #620]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a024:	430b      	orrs	r3, r1
 800a026:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a030:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a034:	64bb      	str	r3, [r7, #72]	; 0x48
 800a036:	2300      	movs	r3, #0
 800a038:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a03a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a03e:	460b      	mov	r3, r1
 800a040:	4313      	orrs	r3, r2
 800a042:	d009      	beq.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a044:	4b92      	ldr	r3, [pc, #584]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a048:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a04c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a052:	4a8f      	ldr	r2, [pc, #572]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a054:	430b      	orrs	r3, r1
 800a056:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a064:	643b      	str	r3, [r7, #64]	; 0x40
 800a066:	2300      	movs	r3, #0
 800a068:	647b      	str	r3, [r7, #68]	; 0x44
 800a06a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a06e:	460b      	mov	r3, r1
 800a070:	4313      	orrs	r3, r2
 800a072:	d00e      	beq.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a074:	4b86      	ldr	r3, [pc, #536]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	4a85      	ldr	r2, [pc, #532]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a07a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a07e:	6113      	str	r3, [r2, #16]
 800a080:	4b83      	ldr	r3, [pc, #524]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a082:	6919      	ldr	r1, [r3, #16]
 800a084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a088:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a08c:	4a80      	ldr	r2, [pc, #512]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a08e:	430b      	orrs	r3, r1
 800a090:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a09e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0a4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	d009      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a0ae:	4b78      	ldr	r3, [pc, #480]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a0b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0b2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0bc:	4a74      	ldr	r2, [pc, #464]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a0be:	430b      	orrs	r3, r1
 800a0c0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a0c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ca:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a0ce:	633b      	str	r3, [r7, #48]	; 0x30
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	637b      	str	r3, [r7, #52]	; 0x34
 800a0d4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a0d8:	460b      	mov	r3, r1
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	d00a      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a0de:	4b6c      	ldr	r3, [pc, #432]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a0e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0e2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a0e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ee:	4a68      	ldr	r2, [pc, #416]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a0f0:	430b      	orrs	r3, r1
 800a0f2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a0f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	62b9      	str	r1, [r7, #40]	; 0x28
 800a100:	f003 0301 	and.w	r3, r3, #1
 800a104:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a106:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a10a:	460b      	mov	r3, r1
 800a10c:	4313      	orrs	r3, r2
 800a10e:	d011      	beq.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a114:	3308      	adds	r3, #8
 800a116:	2100      	movs	r1, #0
 800a118:	4618      	mov	r0, r3
 800a11a:	f000 fb79 	bl	800a810 <RCCEx_PLL2_Config>
 800a11e:	4603      	mov	r3, r0
 800a120:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a124:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d003      	beq.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a12c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a130:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13c:	2100      	movs	r1, #0
 800a13e:	6239      	str	r1, [r7, #32]
 800a140:	f003 0302 	and.w	r3, r3, #2
 800a144:	627b      	str	r3, [r7, #36]	; 0x24
 800a146:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a14a:	460b      	mov	r3, r1
 800a14c:	4313      	orrs	r3, r2
 800a14e:	d011      	beq.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a154:	3308      	adds	r3, #8
 800a156:	2101      	movs	r1, #1
 800a158:	4618      	mov	r0, r3
 800a15a:	f000 fb59 	bl	800a810 <RCCEx_PLL2_Config>
 800a15e:	4603      	mov	r3, r0
 800a160:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a164:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d003      	beq.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a16c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a170:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17c:	2100      	movs	r1, #0
 800a17e:	61b9      	str	r1, [r7, #24]
 800a180:	f003 0304 	and.w	r3, r3, #4
 800a184:	61fb      	str	r3, [r7, #28]
 800a186:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a18a:	460b      	mov	r3, r1
 800a18c:	4313      	orrs	r3, r2
 800a18e:	d011      	beq.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a194:	3308      	adds	r3, #8
 800a196:	2102      	movs	r1, #2
 800a198:	4618      	mov	r0, r3
 800a19a:	f000 fb39 	bl	800a810 <RCCEx_PLL2_Config>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a1a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d003      	beq.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a1b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1bc:	2100      	movs	r1, #0
 800a1be:	6139      	str	r1, [r7, #16]
 800a1c0:	f003 0308 	and.w	r3, r3, #8
 800a1c4:	617b      	str	r3, [r7, #20]
 800a1c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	d011      	beq.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1d4:	3328      	adds	r3, #40	; 0x28
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f000 fbcb 	bl	800a974 <RCCEx_PLL3_Config>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800a1e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d003      	beq.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a1f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	60b9      	str	r1, [r7, #8]
 800a200:	f003 0310 	and.w	r3, r3, #16
 800a204:	60fb      	str	r3, [r7, #12]
 800a206:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a20a:	460b      	mov	r3, r1
 800a20c:	4313      	orrs	r3, r2
 800a20e:	d011      	beq.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a214:	3328      	adds	r3, #40	; 0x28
 800a216:	2101      	movs	r1, #1
 800a218:	4618      	mov	r0, r3
 800a21a:	f000 fbab 	bl	800a974 <RCCEx_PLL3_Config>
 800a21e:	4603      	mov	r3, r0
 800a220:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a224:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d003      	beq.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a22c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a230:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23c:	2100      	movs	r1, #0
 800a23e:	6039      	str	r1, [r7, #0]
 800a240:	f003 0320 	and.w	r3, r3, #32
 800a244:	607b      	str	r3, [r7, #4]
 800a246:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a24a:	460b      	mov	r3, r1
 800a24c:	4313      	orrs	r3, r2
 800a24e:	d011      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a254:	3328      	adds	r3, #40	; 0x28
 800a256:	2102      	movs	r1, #2
 800a258:	4618      	mov	r0, r3
 800a25a:	f000 fb8b 	bl	800a974 <RCCEx_PLL3_Config>
 800a25e:	4603      	mov	r3, r0
 800a260:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a264:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d003      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a26c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a270:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800a274:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d101      	bne.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	e000      	b.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a280:	2301      	movs	r3, #1
}
 800a282:	4618      	mov	r0, r3
 800a284:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800a288:	46bd      	mov	sp, r7
 800a28a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a28e:	bf00      	nop
 800a290:	58024400 	.word	0x58024400

0800a294 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a298:	f7fe fe00 	bl	8008e9c <HAL_RCC_GetHCLKFreq>
 800a29c:	4602      	mov	r2, r0
 800a29e:	4b06      	ldr	r3, [pc, #24]	; (800a2b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	091b      	lsrs	r3, r3, #4
 800a2a4:	f003 0307 	and.w	r3, r3, #7
 800a2a8:	4904      	ldr	r1, [pc, #16]	; (800a2bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a2aa:	5ccb      	ldrb	r3, [r1, r3]
 800a2ac:	f003 031f 	and.w	r3, r3, #31
 800a2b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	58024400 	.word	0x58024400
 800a2bc:	0800ec98 	.word	0x0800ec98

0800a2c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b089      	sub	sp, #36	; 0x24
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a2c8:	4ba1      	ldr	r3, [pc, #644]	; (800a550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2cc:	f003 0303 	and.w	r3, r3, #3
 800a2d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a2d2:	4b9f      	ldr	r3, [pc, #636]	; (800a550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2d6:	0b1b      	lsrs	r3, r3, #12
 800a2d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a2de:	4b9c      	ldr	r3, [pc, #624]	; (800a550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e2:	091b      	lsrs	r3, r3, #4
 800a2e4:	f003 0301 	and.w	r3, r3, #1
 800a2e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a2ea:	4b99      	ldr	r3, [pc, #612]	; (800a550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ee:	08db      	lsrs	r3, r3, #3
 800a2f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	fb02 f303 	mul.w	r3, r2, r3
 800a2fa:	ee07 3a90 	vmov	s15, r3
 800a2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a302:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f000 8111 	beq.w	800a530 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	2b02      	cmp	r3, #2
 800a312:	f000 8083 	beq.w	800a41c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	2b02      	cmp	r3, #2
 800a31a:	f200 80a1 	bhi.w	800a460 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d003      	beq.n	800a32c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d056      	beq.n	800a3d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a32a:	e099      	b.n	800a460 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a32c:	4b88      	ldr	r3, [pc, #544]	; (800a550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 0320 	and.w	r3, r3, #32
 800a334:	2b00      	cmp	r3, #0
 800a336:	d02d      	beq.n	800a394 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a338:	4b85      	ldr	r3, [pc, #532]	; (800a550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	08db      	lsrs	r3, r3, #3
 800a33e:	f003 0303 	and.w	r3, r3, #3
 800a342:	4a84      	ldr	r2, [pc, #528]	; (800a554 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a344:	fa22 f303 	lsr.w	r3, r2, r3
 800a348:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	ee07 3a90 	vmov	s15, r3
 800a350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	ee07 3a90 	vmov	s15, r3
 800a35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a35e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a362:	4b7b      	ldr	r3, [pc, #492]	; (800a550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a36a:	ee07 3a90 	vmov	s15, r3
 800a36e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a372:	ed97 6a03 	vldr	s12, [r7, #12]
 800a376:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a37a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a37e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a38a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a38e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a392:	e087      	b.n	800a4a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	ee07 3a90 	vmov	s15, r3
 800a39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a39e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a55c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a3a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3a6:	4b6a      	ldr	r3, [pc, #424]	; (800a550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ae:	ee07 3a90 	vmov	s15, r3
 800a3b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a3be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3d6:	e065      	b.n	800a4a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	ee07 3a90 	vmov	s15, r3
 800a3de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a560 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a3e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3ea:	4b59      	ldr	r3, [pc, #356]	; (800a550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3f2:	ee07 3a90 	vmov	s15, r3
 800a3f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a40a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a40e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a412:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a41a:	e043      	b.n	800a4a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	ee07 3a90 	vmov	s15, r3
 800a422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a426:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a42a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a42e:	4b48      	ldr	r3, [pc, #288]	; (800a550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a436:	ee07 3a90 	vmov	s15, r3
 800a43a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a43e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a442:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a44a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a44e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a45a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a45e:	e021      	b.n	800a4a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	ee07 3a90 	vmov	s15, r3
 800a466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a46a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a560 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a46e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a472:	4b37      	ldr	r3, [pc, #220]	; (800a550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a47a:	ee07 3a90 	vmov	s15, r3
 800a47e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a482:	ed97 6a03 	vldr	s12, [r7, #12]
 800a486:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a48a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a48e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a49a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a49e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a4a4:	4b2a      	ldr	r3, [pc, #168]	; (800a550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a8:	0a5b      	lsrs	r3, r3, #9
 800a4aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4ae:	ee07 3a90 	vmov	s15, r3
 800a4b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4be:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4ca:	ee17 2a90 	vmov	r2, s15
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a4d2:	4b1f      	ldr	r3, [pc, #124]	; (800a550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d6:	0c1b      	lsrs	r3, r3, #16
 800a4d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4dc:	ee07 3a90 	vmov	s15, r3
 800a4e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4f8:	ee17 2a90 	vmov	r2, s15
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a500:	4b13      	ldr	r3, [pc, #76]	; (800a550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a504:	0e1b      	lsrs	r3, r3, #24
 800a506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a50a:	ee07 3a90 	vmov	s15, r3
 800a50e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a51a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a51e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a526:	ee17 2a90 	vmov	r2, s15
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a52e:	e008      	b.n	800a542 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2200      	movs	r2, #0
 800a53a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	609a      	str	r2, [r3, #8]
}
 800a542:	bf00      	nop
 800a544:	3724      	adds	r7, #36	; 0x24
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	58024400 	.word	0x58024400
 800a554:	03d09000 	.word	0x03d09000
 800a558:	46000000 	.word	0x46000000
 800a55c:	4c742400 	.word	0x4c742400
 800a560:	4a742400 	.word	0x4a742400
 800a564:	4af42400 	.word	0x4af42400

0800a568 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a568:	b480      	push	{r7}
 800a56a:	b089      	sub	sp, #36	; 0x24
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a570:	4ba1      	ldr	r3, [pc, #644]	; (800a7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a574:	f003 0303 	and.w	r3, r3, #3
 800a578:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a57a:	4b9f      	ldr	r3, [pc, #636]	; (800a7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a57e:	0d1b      	lsrs	r3, r3, #20
 800a580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a584:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a586:	4b9c      	ldr	r3, [pc, #624]	; (800a7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a58a:	0a1b      	lsrs	r3, r3, #8
 800a58c:	f003 0301 	and.w	r3, r3, #1
 800a590:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a592:	4b99      	ldr	r3, [pc, #612]	; (800a7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a596:	08db      	lsrs	r3, r3, #3
 800a598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a59c:	693a      	ldr	r2, [r7, #16]
 800a59e:	fb02 f303 	mul.w	r3, r2, r3
 800a5a2:	ee07 3a90 	vmov	s15, r3
 800a5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f000 8111 	beq.w	800a7d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	f000 8083 	beq.w	800a6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	f200 80a1 	bhi.w	800a708 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d003      	beq.n	800a5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d056      	beq.n	800a680 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a5d2:	e099      	b.n	800a708 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5d4:	4b88      	ldr	r3, [pc, #544]	; (800a7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f003 0320 	and.w	r3, r3, #32
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d02d      	beq.n	800a63c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5e0:	4b85      	ldr	r3, [pc, #532]	; (800a7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	08db      	lsrs	r3, r3, #3
 800a5e6:	f003 0303 	and.w	r3, r3, #3
 800a5ea:	4a84      	ldr	r2, [pc, #528]	; (800a7fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a5ec:	fa22 f303 	lsr.w	r3, r2, r3
 800a5f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	ee07 3a90 	vmov	s15, r3
 800a5f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	ee07 3a90 	vmov	s15, r3
 800a602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a60a:	4b7b      	ldr	r3, [pc, #492]	; (800a7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a612:	ee07 3a90 	vmov	s15, r3
 800a616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a61a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a61e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a62a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a62e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a632:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a636:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a63a:	e087      	b.n	800a74c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	ee07 3a90 	vmov	s15, r3
 800a642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a646:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a804 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a64a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a64e:	4b6a      	ldr	r3, [pc, #424]	; (800a7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a656:	ee07 3a90 	vmov	s15, r3
 800a65a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a65e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a662:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a66a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a66e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a67a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a67e:	e065      	b.n	800a74c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	ee07 3a90 	vmov	s15, r3
 800a686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a68a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a808 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a68e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a692:	4b59      	ldr	r3, [pc, #356]	; (800a7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a69a:	ee07 3a90 	vmov	s15, r3
 800a69e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a6aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6c2:	e043      	b.n	800a74c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	ee07 3a90 	vmov	s15, r3
 800a6ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a80c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a6d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6d6:	4b48      	ldr	r3, [pc, #288]	; (800a7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6de:	ee07 3a90 	vmov	s15, r3
 800a6e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a6ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a706:	e021      	b.n	800a74c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	ee07 3a90 	vmov	s15, r3
 800a70e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a712:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a808 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a71a:	4b37      	ldr	r3, [pc, #220]	; (800a7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a722:	ee07 3a90 	vmov	s15, r3
 800a726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a72a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a72e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a73a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a73e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a742:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a74a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a74c:	4b2a      	ldr	r3, [pc, #168]	; (800a7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a74e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a750:	0a5b      	lsrs	r3, r3, #9
 800a752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a756:	ee07 3a90 	vmov	s15, r3
 800a75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a75e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a762:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a766:	edd7 6a07 	vldr	s13, [r7, #28]
 800a76a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a76e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a772:	ee17 2a90 	vmov	r2, s15
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a77a:	4b1f      	ldr	r3, [pc, #124]	; (800a7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77e:	0c1b      	lsrs	r3, r3, #16
 800a780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a784:	ee07 3a90 	vmov	s15, r3
 800a788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a78c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a790:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a794:	edd7 6a07 	vldr	s13, [r7, #28]
 800a798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a79c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7a0:	ee17 2a90 	vmov	r2, s15
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a7a8:	4b13      	ldr	r3, [pc, #76]	; (800a7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ac:	0e1b      	lsrs	r3, r3, #24
 800a7ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7b2:	ee07 3a90 	vmov	s15, r3
 800a7b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a7be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7ce:	ee17 2a90 	vmov	r2, s15
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a7d6:	e008      	b.n	800a7ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	609a      	str	r2, [r3, #8]
}
 800a7ea:	bf00      	nop
 800a7ec:	3724      	adds	r7, #36	; 0x24
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	58024400 	.word	0x58024400
 800a7fc:	03d09000 	.word	0x03d09000
 800a800:	46000000 	.word	0x46000000
 800a804:	4c742400 	.word	0x4c742400
 800a808:	4a742400 	.word	0x4a742400
 800a80c:	4af42400 	.word	0x4af42400

0800a810 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a81e:	4b53      	ldr	r3, [pc, #332]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a822:	f003 0303 	and.w	r3, r3, #3
 800a826:	2b03      	cmp	r3, #3
 800a828:	d101      	bne.n	800a82e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a82a:	2301      	movs	r3, #1
 800a82c:	e099      	b.n	800a962 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a82e:	4b4f      	ldr	r3, [pc, #316]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a4e      	ldr	r2, [pc, #312]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a834:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a83a:	f7fa fad3 	bl	8004de4 <HAL_GetTick>
 800a83e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a840:	e008      	b.n	800a854 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a842:	f7fa facf 	bl	8004de4 <HAL_GetTick>
 800a846:	4602      	mov	r2, r0
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	1ad3      	subs	r3, r2, r3
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d901      	bls.n	800a854 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a850:	2303      	movs	r3, #3
 800a852:	e086      	b.n	800a962 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a854:	4b45      	ldr	r3, [pc, #276]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1f0      	bne.n	800a842 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a860:	4b42      	ldr	r3, [pc, #264]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a864:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	031b      	lsls	r3, r3, #12
 800a86e:	493f      	ldr	r1, [pc, #252]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a870:	4313      	orrs	r3, r2
 800a872:	628b      	str	r3, [r1, #40]	; 0x28
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	3b01      	subs	r3, #1
 800a87a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	3b01      	subs	r3, #1
 800a884:	025b      	lsls	r3, r3, #9
 800a886:	b29b      	uxth	r3, r3
 800a888:	431a      	orrs	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	3b01      	subs	r3, #1
 800a890:	041b      	lsls	r3, r3, #16
 800a892:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a896:	431a      	orrs	r2, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	691b      	ldr	r3, [r3, #16]
 800a89c:	3b01      	subs	r3, #1
 800a89e:	061b      	lsls	r3, r3, #24
 800a8a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a8a4:	4931      	ldr	r1, [pc, #196]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a8aa:	4b30      	ldr	r3, [pc, #192]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	695b      	ldr	r3, [r3, #20]
 800a8b6:	492d      	ldr	r1, [pc, #180]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a8bc:	4b2b      	ldr	r3, [pc, #172]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c0:	f023 0220 	bic.w	r2, r3, #32
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	4928      	ldr	r1, [pc, #160]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a8ce:	4b27      	ldr	r3, [pc, #156]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d2:	4a26      	ldr	r2, [pc, #152]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a8d4:	f023 0310 	bic.w	r3, r3, #16
 800a8d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a8da:	4b24      	ldr	r3, [pc, #144]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a8dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8de:	4b24      	ldr	r3, [pc, #144]	; (800a970 <RCCEx_PLL2_Config+0x160>)
 800a8e0:	4013      	ands	r3, r2
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	69d2      	ldr	r2, [r2, #28]
 800a8e6:	00d2      	lsls	r2, r2, #3
 800a8e8:	4920      	ldr	r1, [pc, #128]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a8ee:	4b1f      	ldr	r3, [pc, #124]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f2:	4a1e      	ldr	r2, [pc, #120]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a8f4:	f043 0310 	orr.w	r3, r3, #16
 800a8f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d106      	bne.n	800a90e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a900:	4b1a      	ldr	r3, [pc, #104]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a904:	4a19      	ldr	r2, [pc, #100]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a906:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a90a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a90c:	e00f      	b.n	800a92e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	2b01      	cmp	r3, #1
 800a912:	d106      	bne.n	800a922 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a914:	4b15      	ldr	r3, [pc, #84]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a918:	4a14      	ldr	r2, [pc, #80]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a91a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a91e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a920:	e005      	b.n	800a92e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a922:	4b12      	ldr	r3, [pc, #72]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a926:	4a11      	ldr	r2, [pc, #68]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a928:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a92c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a92e:	4b0f      	ldr	r3, [pc, #60]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a0e      	ldr	r2, [pc, #56]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a934:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a93a:	f7fa fa53 	bl	8004de4 <HAL_GetTick>
 800a93e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a940:	e008      	b.n	800a954 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a942:	f7fa fa4f 	bl	8004de4 <HAL_GetTick>
 800a946:	4602      	mov	r2, r0
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	d901      	bls.n	800a954 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a950:	2303      	movs	r3, #3
 800a952:	e006      	b.n	800a962 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a954:	4b05      	ldr	r3, [pc, #20]	; (800a96c <RCCEx_PLL2_Config+0x15c>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d0f0      	beq.n	800a942 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a960:	7bfb      	ldrb	r3, [r7, #15]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	58024400 	.word	0x58024400
 800a970:	ffff0007 	.word	0xffff0007

0800a974 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a97e:	2300      	movs	r3, #0
 800a980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a982:	4b53      	ldr	r3, [pc, #332]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800a984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a986:	f003 0303 	and.w	r3, r3, #3
 800a98a:	2b03      	cmp	r3, #3
 800a98c:	d101      	bne.n	800a992 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	e099      	b.n	800aac6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a992:	4b4f      	ldr	r3, [pc, #316]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a4e      	ldr	r2, [pc, #312]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800a998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a99c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a99e:	f7fa fa21 	bl	8004de4 <HAL_GetTick>
 800a9a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a9a4:	e008      	b.n	800a9b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a9a6:	f7fa fa1d 	bl	8004de4 <HAL_GetTick>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	1ad3      	subs	r3, r2, r3
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	d901      	bls.n	800a9b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a9b4:	2303      	movs	r3, #3
 800a9b6:	e086      	b.n	800aac6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a9b8:	4b45      	ldr	r3, [pc, #276]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d1f0      	bne.n	800a9a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a9c4:	4b42      	ldr	r3, [pc, #264]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800a9c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	051b      	lsls	r3, r3, #20
 800a9d2:	493f      	ldr	r1, [pc, #252]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	628b      	str	r3, [r1, #40]	; 0x28
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	3b01      	subs	r3, #1
 800a9e8:	025b      	lsls	r3, r3, #9
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	431a      	orrs	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	041b      	lsls	r3, r3, #16
 800a9f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a9fa:	431a      	orrs	r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	3b01      	subs	r3, #1
 800aa02:	061b      	lsls	r3, r3, #24
 800aa04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aa08:	4931      	ldr	r1, [pc, #196]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800aa0e:	4b30      	ldr	r3, [pc, #192]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800aa10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	695b      	ldr	r3, [r3, #20]
 800aa1a:	492d      	ldr	r1, [pc, #180]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800aa20:	4b2b      	ldr	r3, [pc, #172]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800aa22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	699b      	ldr	r3, [r3, #24]
 800aa2c:	4928      	ldr	r1, [pc, #160]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aa32:	4b27      	ldr	r3, [pc, #156]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800aa34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa36:	4a26      	ldr	r2, [pc, #152]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800aa38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aa3e:	4b24      	ldr	r3, [pc, #144]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800aa40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa42:	4b24      	ldr	r3, [pc, #144]	; (800aad4 <RCCEx_PLL3_Config+0x160>)
 800aa44:	4013      	ands	r3, r2
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	69d2      	ldr	r2, [r2, #28]
 800aa4a:	00d2      	lsls	r2, r2, #3
 800aa4c:	4920      	ldr	r1, [pc, #128]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800aa52:	4b1f      	ldr	r3, [pc, #124]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800aa54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa56:	4a1e      	ldr	r2, [pc, #120]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800aa58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d106      	bne.n	800aa72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aa64:	4b1a      	ldr	r3, [pc, #104]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800aa66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa68:	4a19      	ldr	r2, [pc, #100]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800aa6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aa6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aa70:	e00f      	b.n	800aa92 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d106      	bne.n	800aa86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800aa78:	4b15      	ldr	r3, [pc, #84]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800aa7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7c:	4a14      	ldr	r2, [pc, #80]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800aa7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aa82:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aa84:	e005      	b.n	800aa92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aa86:	4b12      	ldr	r3, [pc, #72]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800aa88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa8a:	4a11      	ldr	r2, [pc, #68]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800aa8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800aa92:	4b0f      	ldr	r3, [pc, #60]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a0e      	ldr	r2, [pc, #56]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800aa98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa9e:	f7fa f9a1 	bl	8004de4 <HAL_GetTick>
 800aaa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aaa4:	e008      	b.n	800aab8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aaa6:	f7fa f99d 	bl	8004de4 <HAL_GetTick>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d901      	bls.n	800aab8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aab4:	2303      	movs	r3, #3
 800aab6:	e006      	b.n	800aac6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aab8:	4b05      	ldr	r3, [pc, #20]	; (800aad0 <RCCEx_PLL3_Config+0x15c>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d0f0      	beq.n	800aaa6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	58024400 	.word	0x58024400
 800aad4:	ffff0007 	.word	0xffff0007

0800aad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d101      	bne.n	800aaea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	e049      	b.n	800ab7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d106      	bne.n	800ab04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7f9 fe0a 	bl	8004718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2202      	movs	r2, #2
 800ab08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	3304      	adds	r3, #4
 800ab14:	4619      	mov	r1, r3
 800ab16:	4610      	mov	r0, r2
 800ab18:	f000 feb8 	bl	800b88c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3708      	adds	r7, #8
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
	...

0800ab88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d001      	beq.n	800aba0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	e05e      	b.n	800ac5e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2202      	movs	r2, #2
 800aba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68da      	ldr	r2, [r3, #12]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f042 0201 	orr.w	r2, r2, #1
 800abb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a2b      	ldr	r2, [pc, #172]	; (800ac6c <HAL_TIM_Base_Start_IT+0xe4>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d02c      	beq.n	800ac1c <HAL_TIM_Base_Start_IT+0x94>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abca:	d027      	beq.n	800ac1c <HAL_TIM_Base_Start_IT+0x94>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a27      	ldr	r2, [pc, #156]	; (800ac70 <HAL_TIM_Base_Start_IT+0xe8>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d022      	beq.n	800ac1c <HAL_TIM_Base_Start_IT+0x94>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a26      	ldr	r2, [pc, #152]	; (800ac74 <HAL_TIM_Base_Start_IT+0xec>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d01d      	beq.n	800ac1c <HAL_TIM_Base_Start_IT+0x94>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a24      	ldr	r2, [pc, #144]	; (800ac78 <HAL_TIM_Base_Start_IT+0xf0>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d018      	beq.n	800ac1c <HAL_TIM_Base_Start_IT+0x94>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a23      	ldr	r2, [pc, #140]	; (800ac7c <HAL_TIM_Base_Start_IT+0xf4>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d013      	beq.n	800ac1c <HAL_TIM_Base_Start_IT+0x94>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a21      	ldr	r2, [pc, #132]	; (800ac80 <HAL_TIM_Base_Start_IT+0xf8>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d00e      	beq.n	800ac1c <HAL_TIM_Base_Start_IT+0x94>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a20      	ldr	r2, [pc, #128]	; (800ac84 <HAL_TIM_Base_Start_IT+0xfc>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d009      	beq.n	800ac1c <HAL_TIM_Base_Start_IT+0x94>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a1e      	ldr	r2, [pc, #120]	; (800ac88 <HAL_TIM_Base_Start_IT+0x100>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d004      	beq.n	800ac1c <HAL_TIM_Base_Start_IT+0x94>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a1d      	ldr	r2, [pc, #116]	; (800ac8c <HAL_TIM_Base_Start_IT+0x104>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d115      	bne.n	800ac48 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	689a      	ldr	r2, [r3, #8]
 800ac22:	4b1b      	ldr	r3, [pc, #108]	; (800ac90 <HAL_TIM_Base_Start_IT+0x108>)
 800ac24:	4013      	ands	r3, r2
 800ac26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2b06      	cmp	r3, #6
 800ac2c:	d015      	beq.n	800ac5a <HAL_TIM_Base_Start_IT+0xd2>
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac34:	d011      	beq.n	800ac5a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f042 0201 	orr.w	r2, r2, #1
 800ac44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac46:	e008      	b.n	800ac5a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f042 0201 	orr.w	r2, r2, #1
 800ac56:	601a      	str	r2, [r3, #0]
 800ac58:	e000      	b.n	800ac5c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac5c:	2300      	movs	r3, #0
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3714      	adds	r7, #20
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	40010000 	.word	0x40010000
 800ac70:	40000400 	.word	0x40000400
 800ac74:	40000800 	.word	0x40000800
 800ac78:	40000c00 	.word	0x40000c00
 800ac7c:	40010400 	.word	0x40010400
 800ac80:	40001800 	.word	0x40001800
 800ac84:	40014000 	.word	0x40014000
 800ac88:	4000e000 	.word	0x4000e000
 800ac8c:	4000e400 	.word	0x4000e400
 800ac90:	00010007 	.word	0x00010007

0800ac94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d101      	bne.n	800aca6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	e049      	b.n	800ad3a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acac:	b2db      	uxtb	r3, r3
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d106      	bne.n	800acc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7f9 fcf4 	bl	80046a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2202      	movs	r2, #2
 800acc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	3304      	adds	r3, #4
 800acd0:	4619      	mov	r1, r3
 800acd2:	4610      	mov	r0, r2
 800acd4:	f000 fdda 	bl	800b88c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2201      	movs	r2, #1
 800acdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2201      	movs	r2, #1
 800ace4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2201      	movs	r2, #1
 800acec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2201      	movs	r2, #1
 800ad04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3708      	adds	r7, #8
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
	...

0800ad44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d109      	bne.n	800ad68 <HAL_TIM_PWM_Start+0x24>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	bf14      	ite	ne
 800ad60:	2301      	movne	r3, #1
 800ad62:	2300      	moveq	r3, #0
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	e03c      	b.n	800ade2 <HAL_TIM_PWM_Start+0x9e>
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	2b04      	cmp	r3, #4
 800ad6c:	d109      	bne.n	800ad82 <HAL_TIM_PWM_Start+0x3e>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	bf14      	ite	ne
 800ad7a:	2301      	movne	r3, #1
 800ad7c:	2300      	moveq	r3, #0
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	e02f      	b.n	800ade2 <HAL_TIM_PWM_Start+0x9e>
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	2b08      	cmp	r3, #8
 800ad86:	d109      	bne.n	800ad9c <HAL_TIM_PWM_Start+0x58>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	bf14      	ite	ne
 800ad94:	2301      	movne	r3, #1
 800ad96:	2300      	moveq	r3, #0
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	e022      	b.n	800ade2 <HAL_TIM_PWM_Start+0x9e>
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	2b0c      	cmp	r3, #12
 800ada0:	d109      	bne.n	800adb6 <HAL_TIM_PWM_Start+0x72>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	2b01      	cmp	r3, #1
 800adac:	bf14      	ite	ne
 800adae:	2301      	movne	r3, #1
 800adb0:	2300      	moveq	r3, #0
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	e015      	b.n	800ade2 <HAL_TIM_PWM_Start+0x9e>
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	2b10      	cmp	r3, #16
 800adba:	d109      	bne.n	800add0 <HAL_TIM_PWM_Start+0x8c>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	bf14      	ite	ne
 800adc8:	2301      	movne	r3, #1
 800adca:	2300      	moveq	r3, #0
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	e008      	b.n	800ade2 <HAL_TIM_PWM_Start+0x9e>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800add6:	b2db      	uxtb	r3, r3
 800add8:	2b01      	cmp	r3, #1
 800adda:	bf14      	ite	ne
 800addc:	2301      	movne	r3, #1
 800adde:	2300      	moveq	r3, #0
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d001      	beq.n	800adea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ade6:	2301      	movs	r3, #1
 800ade8:	e0ab      	b.n	800af42 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d104      	bne.n	800adfa <HAL_TIM_PWM_Start+0xb6>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2202      	movs	r2, #2
 800adf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800adf8:	e023      	b.n	800ae42 <HAL_TIM_PWM_Start+0xfe>
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	2b04      	cmp	r3, #4
 800adfe:	d104      	bne.n	800ae0a <HAL_TIM_PWM_Start+0xc6>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2202      	movs	r2, #2
 800ae04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae08:	e01b      	b.n	800ae42 <HAL_TIM_PWM_Start+0xfe>
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	2b08      	cmp	r3, #8
 800ae0e:	d104      	bne.n	800ae1a <HAL_TIM_PWM_Start+0xd6>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2202      	movs	r2, #2
 800ae14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae18:	e013      	b.n	800ae42 <HAL_TIM_PWM_Start+0xfe>
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	2b0c      	cmp	r3, #12
 800ae1e:	d104      	bne.n	800ae2a <HAL_TIM_PWM_Start+0xe6>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2202      	movs	r2, #2
 800ae24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae28:	e00b      	b.n	800ae42 <HAL_TIM_PWM_Start+0xfe>
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	2b10      	cmp	r3, #16
 800ae2e:	d104      	bne.n	800ae3a <HAL_TIM_PWM_Start+0xf6>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2202      	movs	r2, #2
 800ae34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae38:	e003      	b.n	800ae42 <HAL_TIM_PWM_Start+0xfe>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2202      	movs	r2, #2
 800ae3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2201      	movs	r2, #1
 800ae48:	6839      	ldr	r1, [r7, #0]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f001 f938 	bl	800c0c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a3d      	ldr	r2, [pc, #244]	; (800af4c <HAL_TIM_PWM_Start+0x208>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d013      	beq.n	800ae82 <HAL_TIM_PWM_Start+0x13e>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a3c      	ldr	r2, [pc, #240]	; (800af50 <HAL_TIM_PWM_Start+0x20c>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d00e      	beq.n	800ae82 <HAL_TIM_PWM_Start+0x13e>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a3a      	ldr	r2, [pc, #232]	; (800af54 <HAL_TIM_PWM_Start+0x210>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d009      	beq.n	800ae82 <HAL_TIM_PWM_Start+0x13e>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a39      	ldr	r2, [pc, #228]	; (800af58 <HAL_TIM_PWM_Start+0x214>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d004      	beq.n	800ae82 <HAL_TIM_PWM_Start+0x13e>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a37      	ldr	r2, [pc, #220]	; (800af5c <HAL_TIM_PWM_Start+0x218>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d101      	bne.n	800ae86 <HAL_TIM_PWM_Start+0x142>
 800ae82:	2301      	movs	r3, #1
 800ae84:	e000      	b.n	800ae88 <HAL_TIM_PWM_Start+0x144>
 800ae86:	2300      	movs	r3, #0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d007      	beq.n	800ae9c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae9a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a2a      	ldr	r2, [pc, #168]	; (800af4c <HAL_TIM_PWM_Start+0x208>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d02c      	beq.n	800af00 <HAL_TIM_PWM_Start+0x1bc>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeae:	d027      	beq.n	800af00 <HAL_TIM_PWM_Start+0x1bc>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a2a      	ldr	r2, [pc, #168]	; (800af60 <HAL_TIM_PWM_Start+0x21c>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d022      	beq.n	800af00 <HAL_TIM_PWM_Start+0x1bc>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4a29      	ldr	r2, [pc, #164]	; (800af64 <HAL_TIM_PWM_Start+0x220>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d01d      	beq.n	800af00 <HAL_TIM_PWM_Start+0x1bc>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4a27      	ldr	r2, [pc, #156]	; (800af68 <HAL_TIM_PWM_Start+0x224>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d018      	beq.n	800af00 <HAL_TIM_PWM_Start+0x1bc>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a1f      	ldr	r2, [pc, #124]	; (800af50 <HAL_TIM_PWM_Start+0x20c>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d013      	beq.n	800af00 <HAL_TIM_PWM_Start+0x1bc>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4a23      	ldr	r2, [pc, #140]	; (800af6c <HAL_TIM_PWM_Start+0x228>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d00e      	beq.n	800af00 <HAL_TIM_PWM_Start+0x1bc>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a1b      	ldr	r2, [pc, #108]	; (800af54 <HAL_TIM_PWM_Start+0x210>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d009      	beq.n	800af00 <HAL_TIM_PWM_Start+0x1bc>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a1f      	ldr	r2, [pc, #124]	; (800af70 <HAL_TIM_PWM_Start+0x22c>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d004      	beq.n	800af00 <HAL_TIM_PWM_Start+0x1bc>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a1e      	ldr	r2, [pc, #120]	; (800af74 <HAL_TIM_PWM_Start+0x230>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d115      	bne.n	800af2c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	689a      	ldr	r2, [r3, #8]
 800af06:	4b1c      	ldr	r3, [pc, #112]	; (800af78 <HAL_TIM_PWM_Start+0x234>)
 800af08:	4013      	ands	r3, r2
 800af0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2b06      	cmp	r3, #6
 800af10:	d015      	beq.n	800af3e <HAL_TIM_PWM_Start+0x1fa>
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af18:	d011      	beq.n	800af3e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f042 0201 	orr.w	r2, r2, #1
 800af28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af2a:	e008      	b.n	800af3e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f042 0201 	orr.w	r2, r2, #1
 800af3a:	601a      	str	r2, [r3, #0]
 800af3c:	e000      	b.n	800af40 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	40010000 	.word	0x40010000
 800af50:	40010400 	.word	0x40010400
 800af54:	40014000 	.word	0x40014000
 800af58:	40014400 	.word	0x40014400
 800af5c:	40014800 	.word	0x40014800
 800af60:	40000400 	.word	0x40000400
 800af64:	40000800 	.word	0x40000800
 800af68:	40000c00 	.word	0x40000c00
 800af6c:	40001800 	.word	0x40001800
 800af70:	4000e000 	.word	0x4000e000
 800af74:	4000e400 	.word	0x4000e400
 800af78:	00010007 	.word	0x00010007

0800af7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b086      	sub	sp, #24
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d101      	bne.n	800af90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800af8c:	2301      	movs	r3, #1
 800af8e:	e08f      	b.n	800b0b0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af96:	b2db      	uxtb	r3, r3
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d106      	bne.n	800afaa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f7f9 fac3 	bl	8004530 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2202      	movs	r2, #2
 800afae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	6899      	ldr	r1, [r3, #8]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	4b3e      	ldr	r3, [pc, #248]	; (800b0b8 <HAL_TIM_Encoder_Init+0x13c>)
 800afbe:	400b      	ands	r3, r1
 800afc0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	3304      	adds	r3, #4
 800afca:	4619      	mov	r1, r3
 800afcc:	4610      	mov	r0, r2
 800afce:	f000 fc5d 	bl	800b88c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	699b      	ldr	r3, [r3, #24]
 800afe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	6a1b      	ldr	r3, [r3, #32]
 800afe8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	697a      	ldr	r2, [r7, #20]
 800aff0:	4313      	orrs	r3, r2
 800aff2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800aff4:	693a      	ldr	r2, [r7, #16]
 800aff6:	4b31      	ldr	r3, [pc, #196]	; (800b0bc <HAL_TIM_Encoder_Init+0x140>)
 800aff8:	4013      	ands	r3, r2
 800affa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	689a      	ldr	r2, [r3, #8]
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	699b      	ldr	r3, [r3, #24]
 800b004:	021b      	lsls	r3, r3, #8
 800b006:	4313      	orrs	r3, r2
 800b008:	693a      	ldr	r2, [r7, #16]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b00e:	693a      	ldr	r2, [r7, #16]
 800b010:	4b2b      	ldr	r3, [pc, #172]	; (800b0c0 <HAL_TIM_Encoder_Init+0x144>)
 800b012:	4013      	ands	r3, r2
 800b014:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b016:	693a      	ldr	r2, [r7, #16]
 800b018:	4b2a      	ldr	r3, [pc, #168]	; (800b0c4 <HAL_TIM_Encoder_Init+0x148>)
 800b01a:	4013      	ands	r3, r2
 800b01c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	68da      	ldr	r2, [r3, #12]
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	69db      	ldr	r3, [r3, #28]
 800b026:	021b      	lsls	r3, r3, #8
 800b028:	4313      	orrs	r3, r2
 800b02a:	693a      	ldr	r2, [r7, #16]
 800b02c:	4313      	orrs	r3, r2
 800b02e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	011a      	lsls	r2, r3, #4
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	6a1b      	ldr	r3, [r3, #32]
 800b03a:	031b      	lsls	r3, r3, #12
 800b03c:	4313      	orrs	r3, r2
 800b03e:	693a      	ldr	r2, [r7, #16]
 800b040:	4313      	orrs	r3, r2
 800b042:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b04a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b052:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	685a      	ldr	r2, [r3, #4]
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	695b      	ldr	r3, [r3, #20]
 800b05c:	011b      	lsls	r3, r3, #4
 800b05e:	4313      	orrs	r3, r2
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	4313      	orrs	r3, r2
 800b064:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	697a      	ldr	r2, [r7, #20]
 800b06c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	693a      	ldr	r2, [r7, #16]
 800b074:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2201      	movs	r2, #1
 800b082:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2201      	movs	r2, #1
 800b08a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2201      	movs	r2, #1
 800b092:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2201      	movs	r2, #1
 800b09a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3718      	adds	r7, #24
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	fffebff8 	.word	0xfffebff8
 800b0bc:	fffffcfc 	.word	0xfffffcfc
 800b0c0:	fffff3f3 	.word	0xfffff3f3
 800b0c4:	ffff0f0f 	.word	0xffff0f0f

0800b0c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b0d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b0e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d110      	bne.n	800b11a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d102      	bne.n	800b104 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b0fe:	7b7b      	ldrb	r3, [r7, #13]
 800b100:	2b01      	cmp	r3, #1
 800b102:	d001      	beq.n	800b108 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	e069      	b.n	800b1dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2202      	movs	r2, #2
 800b10c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2202      	movs	r2, #2
 800b114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b118:	e031      	b.n	800b17e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	2b04      	cmp	r3, #4
 800b11e:	d110      	bne.n	800b142 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b120:	7bbb      	ldrb	r3, [r7, #14]
 800b122:	2b01      	cmp	r3, #1
 800b124:	d102      	bne.n	800b12c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b126:	7b3b      	ldrb	r3, [r7, #12]
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d001      	beq.n	800b130 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b12c:	2301      	movs	r3, #1
 800b12e:	e055      	b.n	800b1dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2202      	movs	r2, #2
 800b134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2202      	movs	r2, #2
 800b13c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b140:	e01d      	b.n	800b17e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b142:	7bfb      	ldrb	r3, [r7, #15]
 800b144:	2b01      	cmp	r3, #1
 800b146:	d108      	bne.n	800b15a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b148:	7bbb      	ldrb	r3, [r7, #14]
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d105      	bne.n	800b15a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b14e:	7b7b      	ldrb	r3, [r7, #13]
 800b150:	2b01      	cmp	r3, #1
 800b152:	d102      	bne.n	800b15a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b154:	7b3b      	ldrb	r3, [r7, #12]
 800b156:	2b01      	cmp	r3, #1
 800b158:	d001      	beq.n	800b15e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b15a:	2301      	movs	r3, #1
 800b15c:	e03e      	b.n	800b1dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2202      	movs	r2, #2
 800b162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2202      	movs	r2, #2
 800b16a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2202      	movs	r2, #2
 800b172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2202      	movs	r2, #2
 800b17a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d003      	beq.n	800b18c <HAL_TIM_Encoder_Start+0xc4>
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	2b04      	cmp	r3, #4
 800b188:	d008      	beq.n	800b19c <HAL_TIM_Encoder_Start+0xd4>
 800b18a:	e00f      	b.n	800b1ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2201      	movs	r2, #1
 800b192:	2100      	movs	r1, #0
 800b194:	4618      	mov	r0, r3
 800b196:	f000 ff93 	bl	800c0c0 <TIM_CCxChannelCmd>
      break;
 800b19a:	e016      	b.n	800b1ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	2104      	movs	r1, #4
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f000 ff8b 	bl	800c0c0 <TIM_CCxChannelCmd>
      break;
 800b1aa:	e00e      	b.n	800b1ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f000 ff83 	bl	800c0c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	2104      	movs	r1, #4
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f000 ff7c 	bl	800c0c0 <TIM_CCxChannelCmd>
      break;
 800b1c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f042 0201 	orr.w	r2, r2, #1
 800b1d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b1da:	2300      	movs	r3, #0
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	691b      	ldr	r3, [r3, #16]
 800b1f2:	f003 0302 	and.w	r3, r3, #2
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	d122      	bne.n	800b240 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	f003 0302 	and.w	r3, r3, #2
 800b204:	2b02      	cmp	r3, #2
 800b206:	d11b      	bne.n	800b240 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f06f 0202 	mvn.w	r2, #2
 800b210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2201      	movs	r2, #1
 800b216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	699b      	ldr	r3, [r3, #24]
 800b21e:	f003 0303 	and.w	r3, r3, #3
 800b222:	2b00      	cmp	r3, #0
 800b224:	d003      	beq.n	800b22e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 fb12 	bl	800b850 <HAL_TIM_IC_CaptureCallback>
 800b22c:	e005      	b.n	800b23a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 fb04 	bl	800b83c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 fb15 	bl	800b864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2200      	movs	r2, #0
 800b23e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	691b      	ldr	r3, [r3, #16]
 800b246:	f003 0304 	and.w	r3, r3, #4
 800b24a:	2b04      	cmp	r3, #4
 800b24c:	d122      	bne.n	800b294 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	f003 0304 	and.w	r3, r3, #4
 800b258:	2b04      	cmp	r3, #4
 800b25a:	d11b      	bne.n	800b294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f06f 0204 	mvn.w	r2, #4
 800b264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2202      	movs	r2, #2
 800b26a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	699b      	ldr	r3, [r3, #24]
 800b272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b276:	2b00      	cmp	r3, #0
 800b278:	d003      	beq.n	800b282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 fae8 	bl	800b850 <HAL_TIM_IC_CaptureCallback>
 800b280:	e005      	b.n	800b28e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 fada 	bl	800b83c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 faeb 	bl	800b864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	691b      	ldr	r3, [r3, #16]
 800b29a:	f003 0308 	and.w	r3, r3, #8
 800b29e:	2b08      	cmp	r3, #8
 800b2a0:	d122      	bne.n	800b2e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	f003 0308 	and.w	r3, r3, #8
 800b2ac:	2b08      	cmp	r3, #8
 800b2ae:	d11b      	bne.n	800b2e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f06f 0208 	mvn.w	r2, #8
 800b2b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2204      	movs	r2, #4
 800b2be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	69db      	ldr	r3, [r3, #28]
 800b2c6:	f003 0303 	and.w	r3, r3, #3
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d003      	beq.n	800b2d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 fabe 	bl	800b850 <HAL_TIM_IC_CaptureCallback>
 800b2d4:	e005      	b.n	800b2e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 fab0 	bl	800b83c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 fac1 	bl	800b864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	691b      	ldr	r3, [r3, #16]
 800b2ee:	f003 0310 	and.w	r3, r3, #16
 800b2f2:	2b10      	cmp	r3, #16
 800b2f4:	d122      	bne.n	800b33c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	f003 0310 	and.w	r3, r3, #16
 800b300:	2b10      	cmp	r3, #16
 800b302:	d11b      	bne.n	800b33c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f06f 0210 	mvn.w	r2, #16
 800b30c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2208      	movs	r2, #8
 800b312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	69db      	ldr	r3, [r3, #28]
 800b31a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d003      	beq.n	800b32a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 fa94 	bl	800b850 <HAL_TIM_IC_CaptureCallback>
 800b328:	e005      	b.n	800b336 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fa86 	bl	800b83c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 fa97 	bl	800b864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	f003 0301 	and.w	r3, r3, #1
 800b346:	2b01      	cmp	r3, #1
 800b348:	d10e      	bne.n	800b368 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	f003 0301 	and.w	r3, r3, #1
 800b354:	2b01      	cmp	r3, #1
 800b356:	d107      	bne.n	800b368 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f06f 0201 	mvn.w	r2, #1
 800b360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f7f5 fe22 	bl	8000fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b372:	2b80      	cmp	r3, #128	; 0x80
 800b374:	d10e      	bne.n	800b394 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	68db      	ldr	r3, [r3, #12]
 800b37c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b380:	2b80      	cmp	r3, #128	; 0x80
 800b382:	d107      	bne.n	800b394 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b38c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f001 f802 	bl	800c398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	691b      	ldr	r3, [r3, #16]
 800b39a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b39e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3a2:	d10e      	bne.n	800b3c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	68db      	ldr	r3, [r3, #12]
 800b3aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3ae:	2b80      	cmp	r3, #128	; 0x80
 800b3b0:	d107      	bne.n	800b3c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b3ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 fff5 	bl	800c3ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	691b      	ldr	r3, [r3, #16]
 800b3c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3cc:	2b40      	cmp	r3, #64	; 0x40
 800b3ce:	d10e      	bne.n	800b3ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3da:	2b40      	cmp	r3, #64	; 0x40
 800b3dc:	d107      	bne.n	800b3ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b3e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 fa45 	bl	800b878 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	691b      	ldr	r3, [r3, #16]
 800b3f4:	f003 0320 	and.w	r3, r3, #32
 800b3f8:	2b20      	cmp	r3, #32
 800b3fa:	d10e      	bne.n	800b41a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	f003 0320 	and.w	r3, r3, #32
 800b406:	2b20      	cmp	r3, #32
 800b408:	d107      	bne.n	800b41a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f06f 0220 	mvn.w	r2, #32
 800b412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 ffb5 	bl	800c384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b41a:	bf00      	nop
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
	...

0800b424 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b086      	sub	sp, #24
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b430:	2300      	movs	r3, #0
 800b432:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d101      	bne.n	800b442 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b43e:	2302      	movs	r3, #2
 800b440:	e0ff      	b.n	800b642 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2201      	movs	r2, #1
 800b446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2b14      	cmp	r3, #20
 800b44e:	f200 80f0 	bhi.w	800b632 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b452:	a201      	add	r2, pc, #4	; (adr r2, 800b458 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b458:	0800b4ad 	.word	0x0800b4ad
 800b45c:	0800b633 	.word	0x0800b633
 800b460:	0800b633 	.word	0x0800b633
 800b464:	0800b633 	.word	0x0800b633
 800b468:	0800b4ed 	.word	0x0800b4ed
 800b46c:	0800b633 	.word	0x0800b633
 800b470:	0800b633 	.word	0x0800b633
 800b474:	0800b633 	.word	0x0800b633
 800b478:	0800b52f 	.word	0x0800b52f
 800b47c:	0800b633 	.word	0x0800b633
 800b480:	0800b633 	.word	0x0800b633
 800b484:	0800b633 	.word	0x0800b633
 800b488:	0800b56f 	.word	0x0800b56f
 800b48c:	0800b633 	.word	0x0800b633
 800b490:	0800b633 	.word	0x0800b633
 800b494:	0800b633 	.word	0x0800b633
 800b498:	0800b5b1 	.word	0x0800b5b1
 800b49c:	0800b633 	.word	0x0800b633
 800b4a0:	0800b633 	.word	0x0800b633
 800b4a4:	0800b633 	.word	0x0800b633
 800b4a8:	0800b5f1 	.word	0x0800b5f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	68b9      	ldr	r1, [r7, #8]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f000 fa90 	bl	800b9d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	699a      	ldr	r2, [r3, #24]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f042 0208 	orr.w	r2, r2, #8
 800b4c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	699a      	ldr	r2, [r3, #24]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f022 0204 	bic.w	r2, r2, #4
 800b4d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	6999      	ldr	r1, [r3, #24]
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	691a      	ldr	r2, [r3, #16]
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	430a      	orrs	r2, r1
 800b4e8:	619a      	str	r2, [r3, #24]
      break;
 800b4ea:	e0a5      	b.n	800b638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	68b9      	ldr	r1, [r7, #8]
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f000 fb00 	bl	800baf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	699a      	ldr	r2, [r3, #24]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	699a      	ldr	r2, [r3, #24]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	6999      	ldr	r1, [r3, #24]
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	691b      	ldr	r3, [r3, #16]
 800b522:	021a      	lsls	r2, r3, #8
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	430a      	orrs	r2, r1
 800b52a:	619a      	str	r2, [r3, #24]
      break;
 800b52c:	e084      	b.n	800b638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	68b9      	ldr	r1, [r7, #8]
 800b534:	4618      	mov	r0, r3
 800b536:	f000 fb69 	bl	800bc0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	69da      	ldr	r2, [r3, #28]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f042 0208 	orr.w	r2, r2, #8
 800b548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	69da      	ldr	r2, [r3, #28]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f022 0204 	bic.w	r2, r2, #4
 800b558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	69d9      	ldr	r1, [r3, #28]
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	691a      	ldr	r2, [r3, #16]
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	430a      	orrs	r2, r1
 800b56a:	61da      	str	r2, [r3, #28]
      break;
 800b56c:	e064      	b.n	800b638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	68b9      	ldr	r1, [r7, #8]
 800b574:	4618      	mov	r0, r3
 800b576:	f000 fbd1 	bl	800bd1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	69da      	ldr	r2, [r3, #28]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	69da      	ldr	r2, [r3, #28]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	69d9      	ldr	r1, [r3, #28]
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	691b      	ldr	r3, [r3, #16]
 800b5a4:	021a      	lsls	r2, r3, #8
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	430a      	orrs	r2, r1
 800b5ac:	61da      	str	r2, [r3, #28]
      break;
 800b5ae:	e043      	b.n	800b638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	68b9      	ldr	r1, [r7, #8]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f000 fc1a 	bl	800bdf0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f042 0208 	orr.w	r2, r2, #8
 800b5ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f022 0204 	bic.w	r2, r2, #4
 800b5da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	691a      	ldr	r2, [r3, #16]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	430a      	orrs	r2, r1
 800b5ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b5ee:	e023      	b.n	800b638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	68b9      	ldr	r1, [r7, #8]
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f000 fc5e 	bl	800beb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b60a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b61a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	691b      	ldr	r3, [r3, #16]
 800b626:	021a      	lsls	r2, r3, #8
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	430a      	orrs	r2, r1
 800b62e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b630:	e002      	b.n	800b638 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	75fb      	strb	r3, [r7, #23]
      break;
 800b636:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b640:	7dfb      	ldrb	r3, [r7, #23]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3718      	adds	r7, #24
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop

0800b64c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b656:	2300      	movs	r3, #0
 800b658:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b660:	2b01      	cmp	r3, #1
 800b662:	d101      	bne.n	800b668 <HAL_TIM_ConfigClockSource+0x1c>
 800b664:	2302      	movs	r3, #2
 800b666:	e0dc      	b.n	800b822 <HAL_TIM_ConfigClockSource+0x1d6>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2202      	movs	r2, #2
 800b674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b680:	68ba      	ldr	r2, [r7, #8]
 800b682:	4b6a      	ldr	r3, [pc, #424]	; (800b82c <HAL_TIM_ConfigClockSource+0x1e0>)
 800b684:	4013      	ands	r3, r2
 800b686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b68e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a64      	ldr	r2, [pc, #400]	; (800b830 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	f000 80a9 	beq.w	800b7f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b6a4:	4a62      	ldr	r2, [pc, #392]	; (800b830 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	f200 80ae 	bhi.w	800b808 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6ac:	4a61      	ldr	r2, [pc, #388]	; (800b834 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	f000 80a1 	beq.w	800b7f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b6b4:	4a5f      	ldr	r2, [pc, #380]	; (800b834 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	f200 80a6 	bhi.w	800b808 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6bc:	4a5e      	ldr	r2, [pc, #376]	; (800b838 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	f000 8099 	beq.w	800b7f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b6c4:	4a5c      	ldr	r2, [pc, #368]	; (800b838 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	f200 809e 	bhi.w	800b808 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b6d0:	f000 8091 	beq.w	800b7f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b6d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b6d8:	f200 8096 	bhi.w	800b808 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6e0:	f000 8089 	beq.w	800b7f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b6e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6e8:	f200 808e 	bhi.w	800b808 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6f0:	d03e      	beq.n	800b770 <HAL_TIM_ConfigClockSource+0x124>
 800b6f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6f6:	f200 8087 	bhi.w	800b808 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6fe:	f000 8086 	beq.w	800b80e <HAL_TIM_ConfigClockSource+0x1c2>
 800b702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b706:	d87f      	bhi.n	800b808 <HAL_TIM_ConfigClockSource+0x1bc>
 800b708:	2b70      	cmp	r3, #112	; 0x70
 800b70a:	d01a      	beq.n	800b742 <HAL_TIM_ConfigClockSource+0xf6>
 800b70c:	2b70      	cmp	r3, #112	; 0x70
 800b70e:	d87b      	bhi.n	800b808 <HAL_TIM_ConfigClockSource+0x1bc>
 800b710:	2b60      	cmp	r3, #96	; 0x60
 800b712:	d050      	beq.n	800b7b6 <HAL_TIM_ConfigClockSource+0x16a>
 800b714:	2b60      	cmp	r3, #96	; 0x60
 800b716:	d877      	bhi.n	800b808 <HAL_TIM_ConfigClockSource+0x1bc>
 800b718:	2b50      	cmp	r3, #80	; 0x50
 800b71a:	d03c      	beq.n	800b796 <HAL_TIM_ConfigClockSource+0x14a>
 800b71c:	2b50      	cmp	r3, #80	; 0x50
 800b71e:	d873      	bhi.n	800b808 <HAL_TIM_ConfigClockSource+0x1bc>
 800b720:	2b40      	cmp	r3, #64	; 0x40
 800b722:	d058      	beq.n	800b7d6 <HAL_TIM_ConfigClockSource+0x18a>
 800b724:	2b40      	cmp	r3, #64	; 0x40
 800b726:	d86f      	bhi.n	800b808 <HAL_TIM_ConfigClockSource+0x1bc>
 800b728:	2b30      	cmp	r3, #48	; 0x30
 800b72a:	d064      	beq.n	800b7f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b72c:	2b30      	cmp	r3, #48	; 0x30
 800b72e:	d86b      	bhi.n	800b808 <HAL_TIM_ConfigClockSource+0x1bc>
 800b730:	2b20      	cmp	r3, #32
 800b732:	d060      	beq.n	800b7f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b734:	2b20      	cmp	r3, #32
 800b736:	d867      	bhi.n	800b808 <HAL_TIM_ConfigClockSource+0x1bc>
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d05c      	beq.n	800b7f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b73c:	2b10      	cmp	r3, #16
 800b73e:	d05a      	beq.n	800b7f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b740:	e062      	b.n	800b808 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6818      	ldr	r0, [r3, #0]
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	6899      	ldr	r1, [r3, #8]
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	685a      	ldr	r2, [r3, #4]
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	f000 fc95 	bl	800c080 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b764:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	68ba      	ldr	r2, [r7, #8]
 800b76c:	609a      	str	r2, [r3, #8]
      break;
 800b76e:	e04f      	b.n	800b810 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6818      	ldr	r0, [r3, #0]
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	6899      	ldr	r1, [r3, #8]
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	685a      	ldr	r2, [r3, #4]
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	68db      	ldr	r3, [r3, #12]
 800b780:	f000 fc7e 	bl	800c080 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	689a      	ldr	r2, [r3, #8]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b792:	609a      	str	r2, [r3, #8]
      break;
 800b794:	e03c      	b.n	800b810 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6818      	ldr	r0, [r3, #0]
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	6859      	ldr	r1, [r3, #4]
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	f000 fbee 	bl	800bf84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2150      	movs	r1, #80	; 0x50
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f000 fc48 	bl	800c044 <TIM_ITRx_SetConfig>
      break;
 800b7b4:	e02c      	b.n	800b810 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6818      	ldr	r0, [r3, #0]
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	6859      	ldr	r1, [r3, #4]
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	f000 fc0d 	bl	800bfe2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2160      	movs	r1, #96	; 0x60
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f000 fc38 	bl	800c044 <TIM_ITRx_SetConfig>
      break;
 800b7d4:	e01c      	b.n	800b810 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6818      	ldr	r0, [r3, #0]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	6859      	ldr	r1, [r3, #4]
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	f000 fbce 	bl	800bf84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2140      	movs	r1, #64	; 0x40
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f000 fc28 	bl	800c044 <TIM_ITRx_SetConfig>
      break;
 800b7f4:	e00c      	b.n	800b810 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4619      	mov	r1, r3
 800b800:	4610      	mov	r0, r2
 800b802:	f000 fc1f 	bl	800c044 <TIM_ITRx_SetConfig>
      break;
 800b806:	e003      	b.n	800b810 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	73fb      	strb	r3, [r7, #15]
      break;
 800b80c:	e000      	b.n	800b810 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b80e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b820:	7bfb      	ldrb	r3, [r7, #15]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	ffceff88 	.word	0xffceff88
 800b830:	00100040 	.word	0x00100040
 800b834:	00100030 	.word	0x00100030
 800b838:	00100020 	.word	0x00100020

0800b83c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b844:	bf00      	nop
 800b846:	370c      	adds	r7, #12
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b858:	bf00      	nop
 800b85a:	370c      	adds	r7, #12
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b86c:	bf00      	nop
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr

0800b878 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b878:	b480      	push	{r7}
 800b87a:	b083      	sub	sp, #12
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b880:	bf00      	nop
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b085      	sub	sp, #20
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	4a44      	ldr	r2, [pc, #272]	; (800b9b0 <TIM_Base_SetConfig+0x124>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d013      	beq.n	800b8cc <TIM_Base_SetConfig+0x40>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8aa:	d00f      	beq.n	800b8cc <TIM_Base_SetConfig+0x40>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4a41      	ldr	r2, [pc, #260]	; (800b9b4 <TIM_Base_SetConfig+0x128>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d00b      	beq.n	800b8cc <TIM_Base_SetConfig+0x40>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	4a40      	ldr	r2, [pc, #256]	; (800b9b8 <TIM_Base_SetConfig+0x12c>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d007      	beq.n	800b8cc <TIM_Base_SetConfig+0x40>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4a3f      	ldr	r2, [pc, #252]	; (800b9bc <TIM_Base_SetConfig+0x130>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d003      	beq.n	800b8cc <TIM_Base_SetConfig+0x40>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a3e      	ldr	r2, [pc, #248]	; (800b9c0 <TIM_Base_SetConfig+0x134>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d108      	bne.n	800b8de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	68fa      	ldr	r2, [r7, #12]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	4a33      	ldr	r2, [pc, #204]	; (800b9b0 <TIM_Base_SetConfig+0x124>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d027      	beq.n	800b936 <TIM_Base_SetConfig+0xaa>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8ec:	d023      	beq.n	800b936 <TIM_Base_SetConfig+0xaa>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	4a30      	ldr	r2, [pc, #192]	; (800b9b4 <TIM_Base_SetConfig+0x128>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d01f      	beq.n	800b936 <TIM_Base_SetConfig+0xaa>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4a2f      	ldr	r2, [pc, #188]	; (800b9b8 <TIM_Base_SetConfig+0x12c>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d01b      	beq.n	800b936 <TIM_Base_SetConfig+0xaa>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	4a2e      	ldr	r2, [pc, #184]	; (800b9bc <TIM_Base_SetConfig+0x130>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d017      	beq.n	800b936 <TIM_Base_SetConfig+0xaa>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4a2d      	ldr	r2, [pc, #180]	; (800b9c0 <TIM_Base_SetConfig+0x134>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d013      	beq.n	800b936 <TIM_Base_SetConfig+0xaa>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	4a2c      	ldr	r2, [pc, #176]	; (800b9c4 <TIM_Base_SetConfig+0x138>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d00f      	beq.n	800b936 <TIM_Base_SetConfig+0xaa>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	4a2b      	ldr	r2, [pc, #172]	; (800b9c8 <TIM_Base_SetConfig+0x13c>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d00b      	beq.n	800b936 <TIM_Base_SetConfig+0xaa>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	4a2a      	ldr	r2, [pc, #168]	; (800b9cc <TIM_Base_SetConfig+0x140>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d007      	beq.n	800b936 <TIM_Base_SetConfig+0xaa>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	4a29      	ldr	r2, [pc, #164]	; (800b9d0 <TIM_Base_SetConfig+0x144>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d003      	beq.n	800b936 <TIM_Base_SetConfig+0xaa>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	4a28      	ldr	r2, [pc, #160]	; (800b9d4 <TIM_Base_SetConfig+0x148>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d108      	bne.n	800b948 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b93c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	68fa      	ldr	r2, [r7, #12]
 800b944:	4313      	orrs	r3, r2
 800b946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	695b      	ldr	r3, [r3, #20]
 800b952:	4313      	orrs	r3, r2
 800b954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	689a      	ldr	r2, [r3, #8]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4a10      	ldr	r2, [pc, #64]	; (800b9b0 <TIM_Base_SetConfig+0x124>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d00f      	beq.n	800b994 <TIM_Base_SetConfig+0x108>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4a12      	ldr	r2, [pc, #72]	; (800b9c0 <TIM_Base_SetConfig+0x134>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d00b      	beq.n	800b994 <TIM_Base_SetConfig+0x108>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4a11      	ldr	r2, [pc, #68]	; (800b9c4 <TIM_Base_SetConfig+0x138>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d007      	beq.n	800b994 <TIM_Base_SetConfig+0x108>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	4a10      	ldr	r2, [pc, #64]	; (800b9c8 <TIM_Base_SetConfig+0x13c>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d003      	beq.n	800b994 <TIM_Base_SetConfig+0x108>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4a0f      	ldr	r2, [pc, #60]	; (800b9cc <TIM_Base_SetConfig+0x140>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d103      	bne.n	800b99c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	691a      	ldr	r2, [r3, #16]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	615a      	str	r2, [r3, #20]
}
 800b9a2:	bf00      	nop
 800b9a4:	3714      	adds	r7, #20
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	40010000 	.word	0x40010000
 800b9b4:	40000400 	.word	0x40000400
 800b9b8:	40000800 	.word	0x40000800
 800b9bc:	40000c00 	.word	0x40000c00
 800b9c0:	40010400 	.word	0x40010400
 800b9c4:	40014000 	.word	0x40014000
 800b9c8:	40014400 	.word	0x40014400
 800b9cc:	40014800 	.word	0x40014800
 800b9d0:	4000e000 	.word	0x4000e000
 800b9d4:	4000e400 	.word	0x4000e400

0800b9d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b087      	sub	sp, #28
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a1b      	ldr	r3, [r3, #32]
 800b9e6:	f023 0201 	bic.w	r2, r3, #1
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6a1b      	ldr	r3, [r3, #32]
 800b9f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	699b      	ldr	r3, [r3, #24]
 800b9fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	4b37      	ldr	r3, [pc, #220]	; (800bae0 <TIM_OC1_SetConfig+0x108>)
 800ba04:	4013      	ands	r3, r2
 800ba06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f023 0303 	bic.w	r3, r3, #3
 800ba0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	4313      	orrs	r3, r2
 800ba18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	f023 0302 	bic.w	r3, r3, #2
 800ba20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	697a      	ldr	r2, [r7, #20]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	4a2d      	ldr	r2, [pc, #180]	; (800bae4 <TIM_OC1_SetConfig+0x10c>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d00f      	beq.n	800ba54 <TIM_OC1_SetConfig+0x7c>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	4a2c      	ldr	r2, [pc, #176]	; (800bae8 <TIM_OC1_SetConfig+0x110>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d00b      	beq.n	800ba54 <TIM_OC1_SetConfig+0x7c>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	4a2b      	ldr	r2, [pc, #172]	; (800baec <TIM_OC1_SetConfig+0x114>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d007      	beq.n	800ba54 <TIM_OC1_SetConfig+0x7c>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	4a2a      	ldr	r2, [pc, #168]	; (800baf0 <TIM_OC1_SetConfig+0x118>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d003      	beq.n	800ba54 <TIM_OC1_SetConfig+0x7c>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	4a29      	ldr	r2, [pc, #164]	; (800baf4 <TIM_OC1_SetConfig+0x11c>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d10c      	bne.n	800ba6e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	f023 0308 	bic.w	r3, r3, #8
 800ba5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	697a      	ldr	r2, [r7, #20]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	f023 0304 	bic.w	r3, r3, #4
 800ba6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4a1c      	ldr	r2, [pc, #112]	; (800bae4 <TIM_OC1_SetConfig+0x10c>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d00f      	beq.n	800ba96 <TIM_OC1_SetConfig+0xbe>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	4a1b      	ldr	r2, [pc, #108]	; (800bae8 <TIM_OC1_SetConfig+0x110>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d00b      	beq.n	800ba96 <TIM_OC1_SetConfig+0xbe>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	4a1a      	ldr	r2, [pc, #104]	; (800baec <TIM_OC1_SetConfig+0x114>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d007      	beq.n	800ba96 <TIM_OC1_SetConfig+0xbe>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	4a19      	ldr	r2, [pc, #100]	; (800baf0 <TIM_OC1_SetConfig+0x118>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d003      	beq.n	800ba96 <TIM_OC1_SetConfig+0xbe>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	4a18      	ldr	r2, [pc, #96]	; (800baf4 <TIM_OC1_SetConfig+0x11c>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d111      	bne.n	800baba <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800baa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	695b      	ldr	r3, [r3, #20]
 800baaa:	693a      	ldr	r2, [r7, #16]
 800baac:	4313      	orrs	r3, r2
 800baae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	699b      	ldr	r3, [r3, #24]
 800bab4:	693a      	ldr	r2, [r7, #16]
 800bab6:	4313      	orrs	r3, r2
 800bab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	693a      	ldr	r2, [r7, #16]
 800babe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	68fa      	ldr	r2, [r7, #12]
 800bac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	685a      	ldr	r2, [r3, #4]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	697a      	ldr	r2, [r7, #20]
 800bad2:	621a      	str	r2, [r3, #32]
}
 800bad4:	bf00      	nop
 800bad6:	371c      	adds	r7, #28
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr
 800bae0:	fffeff8f 	.word	0xfffeff8f
 800bae4:	40010000 	.word	0x40010000
 800bae8:	40010400 	.word	0x40010400
 800baec:	40014000 	.word	0x40014000
 800baf0:	40014400 	.word	0x40014400
 800baf4:	40014800 	.word	0x40014800

0800baf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b087      	sub	sp, #28
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a1b      	ldr	r3, [r3, #32]
 800bb06:	f023 0210 	bic.w	r2, r3, #16
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a1b      	ldr	r3, [r3, #32]
 800bb12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	699b      	ldr	r3, [r3, #24]
 800bb1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bb20:	68fa      	ldr	r2, [r7, #12]
 800bb22:	4b34      	ldr	r3, [pc, #208]	; (800bbf4 <TIM_OC2_SetConfig+0xfc>)
 800bb24:	4013      	ands	r3, r2
 800bb26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	021b      	lsls	r3, r3, #8
 800bb36:	68fa      	ldr	r2, [r7, #12]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	f023 0320 	bic.w	r3, r3, #32
 800bb42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	011b      	lsls	r3, r3, #4
 800bb4a:	697a      	ldr	r2, [r7, #20]
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4a29      	ldr	r2, [pc, #164]	; (800bbf8 <TIM_OC2_SetConfig+0x100>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d003      	beq.n	800bb60 <TIM_OC2_SetConfig+0x68>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4a28      	ldr	r2, [pc, #160]	; (800bbfc <TIM_OC2_SetConfig+0x104>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d10d      	bne.n	800bb7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	011b      	lsls	r3, r3, #4
 800bb6e:	697a      	ldr	r2, [r7, #20]
 800bb70:	4313      	orrs	r3, r2
 800bb72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4a1e      	ldr	r2, [pc, #120]	; (800bbf8 <TIM_OC2_SetConfig+0x100>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d00f      	beq.n	800bba4 <TIM_OC2_SetConfig+0xac>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	4a1d      	ldr	r2, [pc, #116]	; (800bbfc <TIM_OC2_SetConfig+0x104>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d00b      	beq.n	800bba4 <TIM_OC2_SetConfig+0xac>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	4a1c      	ldr	r2, [pc, #112]	; (800bc00 <TIM_OC2_SetConfig+0x108>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d007      	beq.n	800bba4 <TIM_OC2_SetConfig+0xac>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	4a1b      	ldr	r2, [pc, #108]	; (800bc04 <TIM_OC2_SetConfig+0x10c>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d003      	beq.n	800bba4 <TIM_OC2_SetConfig+0xac>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	4a1a      	ldr	r2, [pc, #104]	; (800bc08 <TIM_OC2_SetConfig+0x110>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d113      	bne.n	800bbcc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bbaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bbb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	695b      	ldr	r3, [r3, #20]
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	693a      	ldr	r2, [r7, #16]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	699b      	ldr	r3, [r3, #24]
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	693a      	ldr	r2, [r7, #16]
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	693a      	ldr	r2, [r7, #16]
 800bbd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	68fa      	ldr	r2, [r7, #12]
 800bbd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	685a      	ldr	r2, [r3, #4]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	697a      	ldr	r2, [r7, #20]
 800bbe4:	621a      	str	r2, [r3, #32]
}
 800bbe6:	bf00      	nop
 800bbe8:	371c      	adds	r7, #28
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop
 800bbf4:	feff8fff 	.word	0xfeff8fff
 800bbf8:	40010000 	.word	0x40010000
 800bbfc:	40010400 	.word	0x40010400
 800bc00:	40014000 	.word	0x40014000
 800bc04:	40014400 	.word	0x40014400
 800bc08:	40014800 	.word	0x40014800

0800bc0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b087      	sub	sp, #28
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6a1b      	ldr	r3, [r3, #32]
 800bc1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a1b      	ldr	r3, [r3, #32]
 800bc26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	69db      	ldr	r3, [r3, #28]
 800bc32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	4b33      	ldr	r3, [pc, #204]	; (800bd04 <TIM_OC3_SetConfig+0xf8>)
 800bc38:	4013      	ands	r3, r2
 800bc3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f023 0303 	bic.w	r3, r3, #3
 800bc42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bc54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	021b      	lsls	r3, r3, #8
 800bc5c:	697a      	ldr	r2, [r7, #20]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4a28      	ldr	r2, [pc, #160]	; (800bd08 <TIM_OC3_SetConfig+0xfc>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d003      	beq.n	800bc72 <TIM_OC3_SetConfig+0x66>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4a27      	ldr	r2, [pc, #156]	; (800bd0c <TIM_OC3_SetConfig+0x100>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d10d      	bne.n	800bc8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	021b      	lsls	r3, r3, #8
 800bc80:	697a      	ldr	r2, [r7, #20]
 800bc82:	4313      	orrs	r3, r2
 800bc84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	4a1d      	ldr	r2, [pc, #116]	; (800bd08 <TIM_OC3_SetConfig+0xfc>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d00f      	beq.n	800bcb6 <TIM_OC3_SetConfig+0xaa>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	4a1c      	ldr	r2, [pc, #112]	; (800bd0c <TIM_OC3_SetConfig+0x100>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d00b      	beq.n	800bcb6 <TIM_OC3_SetConfig+0xaa>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	4a1b      	ldr	r2, [pc, #108]	; (800bd10 <TIM_OC3_SetConfig+0x104>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d007      	beq.n	800bcb6 <TIM_OC3_SetConfig+0xaa>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	4a1a      	ldr	r2, [pc, #104]	; (800bd14 <TIM_OC3_SetConfig+0x108>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d003      	beq.n	800bcb6 <TIM_OC3_SetConfig+0xaa>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4a19      	ldr	r2, [pc, #100]	; (800bd18 <TIM_OC3_SetConfig+0x10c>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d113      	bne.n	800bcde <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bcbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bcc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	695b      	ldr	r3, [r3, #20]
 800bcca:	011b      	lsls	r3, r3, #4
 800bccc:	693a      	ldr	r2, [r7, #16]
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	699b      	ldr	r3, [r3, #24]
 800bcd6:	011b      	lsls	r3, r3, #4
 800bcd8:	693a      	ldr	r2, [r7, #16]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	693a      	ldr	r2, [r7, #16]
 800bce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	685a      	ldr	r2, [r3, #4]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	697a      	ldr	r2, [r7, #20]
 800bcf6:	621a      	str	r2, [r3, #32]
}
 800bcf8:	bf00      	nop
 800bcfa:	371c      	adds	r7, #28
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr
 800bd04:	fffeff8f 	.word	0xfffeff8f
 800bd08:	40010000 	.word	0x40010000
 800bd0c:	40010400 	.word	0x40010400
 800bd10:	40014000 	.word	0x40014000
 800bd14:	40014400 	.word	0x40014400
 800bd18:	40014800 	.word	0x40014800

0800bd1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b087      	sub	sp, #28
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6a1b      	ldr	r3, [r3, #32]
 800bd2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6a1b      	ldr	r3, [r3, #32]
 800bd36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	69db      	ldr	r3, [r3, #28]
 800bd42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bd44:	68fa      	ldr	r2, [r7, #12]
 800bd46:	4b24      	ldr	r3, [pc, #144]	; (800bdd8 <TIM_OC4_SetConfig+0xbc>)
 800bd48:	4013      	ands	r3, r2
 800bd4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	021b      	lsls	r3, r3, #8
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bd66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	689b      	ldr	r3, [r3, #8]
 800bd6c:	031b      	lsls	r3, r3, #12
 800bd6e:	693a      	ldr	r2, [r7, #16]
 800bd70:	4313      	orrs	r3, r2
 800bd72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	4a19      	ldr	r2, [pc, #100]	; (800bddc <TIM_OC4_SetConfig+0xc0>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d00f      	beq.n	800bd9c <TIM_OC4_SetConfig+0x80>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	4a18      	ldr	r2, [pc, #96]	; (800bde0 <TIM_OC4_SetConfig+0xc4>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d00b      	beq.n	800bd9c <TIM_OC4_SetConfig+0x80>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	4a17      	ldr	r2, [pc, #92]	; (800bde4 <TIM_OC4_SetConfig+0xc8>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d007      	beq.n	800bd9c <TIM_OC4_SetConfig+0x80>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	4a16      	ldr	r2, [pc, #88]	; (800bde8 <TIM_OC4_SetConfig+0xcc>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d003      	beq.n	800bd9c <TIM_OC4_SetConfig+0x80>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	4a15      	ldr	r2, [pc, #84]	; (800bdec <TIM_OC4_SetConfig+0xd0>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d109      	bne.n	800bdb0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bda2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	695b      	ldr	r3, [r3, #20]
 800bda8:	019b      	lsls	r3, r3, #6
 800bdaa:	697a      	ldr	r2, [r7, #20]
 800bdac:	4313      	orrs	r3, r2
 800bdae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	697a      	ldr	r2, [r7, #20]
 800bdb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	68fa      	ldr	r2, [r7, #12]
 800bdba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	685a      	ldr	r2, [r3, #4]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	693a      	ldr	r2, [r7, #16]
 800bdc8:	621a      	str	r2, [r3, #32]
}
 800bdca:	bf00      	nop
 800bdcc:	371c      	adds	r7, #28
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop
 800bdd8:	feff8fff 	.word	0xfeff8fff
 800bddc:	40010000 	.word	0x40010000
 800bde0:	40010400 	.word	0x40010400
 800bde4:	40014000 	.word	0x40014000
 800bde8:	40014400 	.word	0x40014400
 800bdec:	40014800 	.word	0x40014800

0800bdf0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b087      	sub	sp, #28
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6a1b      	ldr	r3, [r3, #32]
 800bdfe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6a1b      	ldr	r3, [r3, #32]
 800be0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	4b21      	ldr	r3, [pc, #132]	; (800bea0 <TIM_OC5_SetConfig+0xb0>)
 800be1c:	4013      	ands	r3, r2
 800be1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	4313      	orrs	r3, r2
 800be28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800be30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	041b      	lsls	r3, r3, #16
 800be38:	693a      	ldr	r2, [r7, #16]
 800be3a:	4313      	orrs	r3, r2
 800be3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4a18      	ldr	r2, [pc, #96]	; (800bea4 <TIM_OC5_SetConfig+0xb4>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d00f      	beq.n	800be66 <TIM_OC5_SetConfig+0x76>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	4a17      	ldr	r2, [pc, #92]	; (800bea8 <TIM_OC5_SetConfig+0xb8>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d00b      	beq.n	800be66 <TIM_OC5_SetConfig+0x76>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	4a16      	ldr	r2, [pc, #88]	; (800beac <TIM_OC5_SetConfig+0xbc>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d007      	beq.n	800be66 <TIM_OC5_SetConfig+0x76>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4a15      	ldr	r2, [pc, #84]	; (800beb0 <TIM_OC5_SetConfig+0xc0>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d003      	beq.n	800be66 <TIM_OC5_SetConfig+0x76>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4a14      	ldr	r2, [pc, #80]	; (800beb4 <TIM_OC5_SetConfig+0xc4>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d109      	bne.n	800be7a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	695b      	ldr	r3, [r3, #20]
 800be72:	021b      	lsls	r3, r3, #8
 800be74:	697a      	ldr	r2, [r7, #20]
 800be76:	4313      	orrs	r3, r2
 800be78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	697a      	ldr	r2, [r7, #20]
 800be7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	68fa      	ldr	r2, [r7, #12]
 800be84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	685a      	ldr	r2, [r3, #4]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	693a      	ldr	r2, [r7, #16]
 800be92:	621a      	str	r2, [r3, #32]
}
 800be94:	bf00      	nop
 800be96:	371c      	adds	r7, #28
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr
 800bea0:	fffeff8f 	.word	0xfffeff8f
 800bea4:	40010000 	.word	0x40010000
 800bea8:	40010400 	.word	0x40010400
 800beac:	40014000 	.word	0x40014000
 800beb0:	40014400 	.word	0x40014400
 800beb4:	40014800 	.word	0x40014800

0800beb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800beb8:	b480      	push	{r7}
 800beba:	b087      	sub	sp, #28
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a1b      	ldr	r3, [r3, #32]
 800bec6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6a1b      	ldr	r3, [r3, #32]
 800bed2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	4b22      	ldr	r3, [pc, #136]	; (800bf6c <TIM_OC6_SetConfig+0xb4>)
 800bee4:	4013      	ands	r3, r2
 800bee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	021b      	lsls	r3, r3, #8
 800beee:	68fa      	ldr	r2, [r7, #12]
 800bef0:	4313      	orrs	r3, r2
 800bef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800befa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	051b      	lsls	r3, r3, #20
 800bf02:	693a      	ldr	r2, [r7, #16]
 800bf04:	4313      	orrs	r3, r2
 800bf06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	4a19      	ldr	r2, [pc, #100]	; (800bf70 <TIM_OC6_SetConfig+0xb8>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d00f      	beq.n	800bf30 <TIM_OC6_SetConfig+0x78>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	4a18      	ldr	r2, [pc, #96]	; (800bf74 <TIM_OC6_SetConfig+0xbc>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d00b      	beq.n	800bf30 <TIM_OC6_SetConfig+0x78>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	4a17      	ldr	r2, [pc, #92]	; (800bf78 <TIM_OC6_SetConfig+0xc0>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d007      	beq.n	800bf30 <TIM_OC6_SetConfig+0x78>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	4a16      	ldr	r2, [pc, #88]	; (800bf7c <TIM_OC6_SetConfig+0xc4>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d003      	beq.n	800bf30 <TIM_OC6_SetConfig+0x78>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	4a15      	ldr	r2, [pc, #84]	; (800bf80 <TIM_OC6_SetConfig+0xc8>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d109      	bne.n	800bf44 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bf36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	695b      	ldr	r3, [r3, #20]
 800bf3c:	029b      	lsls	r3, r3, #10
 800bf3e:	697a      	ldr	r2, [r7, #20]
 800bf40:	4313      	orrs	r3, r2
 800bf42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	697a      	ldr	r2, [r7, #20]
 800bf48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	685a      	ldr	r2, [r3, #4]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	693a      	ldr	r2, [r7, #16]
 800bf5c:	621a      	str	r2, [r3, #32]
}
 800bf5e:	bf00      	nop
 800bf60:	371c      	adds	r7, #28
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop
 800bf6c:	feff8fff 	.word	0xfeff8fff
 800bf70:	40010000 	.word	0x40010000
 800bf74:	40010400 	.word	0x40010400
 800bf78:	40014000 	.word	0x40014000
 800bf7c:	40014400 	.word	0x40014400
 800bf80:	40014800 	.word	0x40014800

0800bf84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b087      	sub	sp, #28
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	6a1b      	ldr	r3, [r3, #32]
 800bf94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	6a1b      	ldr	r3, [r3, #32]
 800bf9a:	f023 0201 	bic.w	r2, r3, #1
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	699b      	ldr	r3, [r3, #24]
 800bfa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bfae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	011b      	lsls	r3, r3, #4
 800bfb4:	693a      	ldr	r2, [r7, #16]
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	f023 030a 	bic.w	r3, r3, #10
 800bfc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bfc2:	697a      	ldr	r2, [r7, #20]
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	693a      	ldr	r2, [r7, #16]
 800bfce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	697a      	ldr	r2, [r7, #20]
 800bfd4:	621a      	str	r2, [r3, #32]
}
 800bfd6:	bf00      	nop
 800bfd8:	371c      	adds	r7, #28
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr

0800bfe2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bfe2:	b480      	push	{r7}
 800bfe4:	b087      	sub	sp, #28
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	60f8      	str	r0, [r7, #12]
 800bfea:	60b9      	str	r1, [r7, #8]
 800bfec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6a1b      	ldr	r3, [r3, #32]
 800bff2:	f023 0210 	bic.w	r2, r3, #16
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	699b      	ldr	r3, [r3, #24]
 800bffe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	6a1b      	ldr	r3, [r3, #32]
 800c004:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c00c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	031b      	lsls	r3, r3, #12
 800c012:	697a      	ldr	r2, [r7, #20]
 800c014:	4313      	orrs	r3, r2
 800c016:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c01e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	011b      	lsls	r3, r3, #4
 800c024:	693a      	ldr	r2, [r7, #16]
 800c026:	4313      	orrs	r3, r2
 800c028:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	697a      	ldr	r2, [r7, #20]
 800c02e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	693a      	ldr	r2, [r7, #16]
 800c034:	621a      	str	r2, [r3, #32]
}
 800c036:	bf00      	nop
 800c038:	371c      	adds	r7, #28
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
	...

0800c044 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c044:	b480      	push	{r7}
 800c046:	b085      	sub	sp, #20
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c054:	68fa      	ldr	r2, [r7, #12]
 800c056:	4b09      	ldr	r3, [pc, #36]	; (800c07c <TIM_ITRx_SetConfig+0x38>)
 800c058:	4013      	ands	r3, r2
 800c05a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c05c:	683a      	ldr	r2, [r7, #0]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	4313      	orrs	r3, r2
 800c062:	f043 0307 	orr.w	r3, r3, #7
 800c066:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	609a      	str	r2, [r3, #8]
}
 800c06e:	bf00      	nop
 800c070:	3714      	adds	r7, #20
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop
 800c07c:	ffcfff8f 	.word	0xffcfff8f

0800c080 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c080:	b480      	push	{r7}
 800c082:	b087      	sub	sp, #28
 800c084:	af00      	add	r7, sp, #0
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	607a      	str	r2, [r7, #4]
 800c08c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	689b      	ldr	r3, [r3, #8]
 800c092:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c09a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	021a      	lsls	r2, r3, #8
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	431a      	orrs	r2, r3
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	697a      	ldr	r2, [r7, #20]
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	697a      	ldr	r2, [r7, #20]
 800c0b2:	609a      	str	r2, [r3, #8]
}
 800c0b4:	bf00      	nop
 800c0b6:	371c      	adds	r7, #28
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b087      	sub	sp, #28
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	60f8      	str	r0, [r7, #12]
 800c0c8:	60b9      	str	r1, [r7, #8]
 800c0ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	f003 031f 	and.w	r3, r3, #31
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c0d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	6a1a      	ldr	r2, [r3, #32]
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	43db      	mvns	r3, r3
 800c0e2:	401a      	ands	r2, r3
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	6a1a      	ldr	r2, [r3, #32]
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	f003 031f 	and.w	r3, r3, #31
 800c0f2:	6879      	ldr	r1, [r7, #4]
 800c0f4:	fa01 f303 	lsl.w	r3, r1, r3
 800c0f8:	431a      	orrs	r2, r3
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	621a      	str	r2, [r3, #32]
}
 800c0fe:	bf00      	nop
 800c100:	371c      	adds	r7, #28
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr
	...

0800c10c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b085      	sub	sp, #20
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d101      	bne.n	800c124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c120:	2302      	movs	r3, #2
 800c122:	e077      	b.n	800c214 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2201      	movs	r2, #1
 800c128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2202      	movs	r2, #2
 800c130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	689b      	ldr	r3, [r3, #8]
 800c142:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a35      	ldr	r2, [pc, #212]	; (800c220 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d004      	beq.n	800c158 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a34      	ldr	r2, [pc, #208]	; (800c224 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d108      	bne.n	800c16a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c15e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	68fa      	ldr	r2, [r7, #12]
 800c166:	4313      	orrs	r3, r2
 800c168:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c170:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	68fa      	ldr	r2, [r7, #12]
 800c178:	4313      	orrs	r3, r2
 800c17a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	68fa      	ldr	r2, [r7, #12]
 800c182:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4a25      	ldr	r2, [pc, #148]	; (800c220 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d02c      	beq.n	800c1e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c196:	d027      	beq.n	800c1e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a22      	ldr	r2, [pc, #136]	; (800c228 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d022      	beq.n	800c1e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4a21      	ldr	r2, [pc, #132]	; (800c22c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d01d      	beq.n	800c1e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a1f      	ldr	r2, [pc, #124]	; (800c230 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d018      	beq.n	800c1e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a1a      	ldr	r2, [pc, #104]	; (800c224 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d013      	beq.n	800c1e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	4a1b      	ldr	r2, [pc, #108]	; (800c234 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d00e      	beq.n	800c1e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	4a1a      	ldr	r2, [pc, #104]	; (800c238 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d009      	beq.n	800c1e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a18      	ldr	r2, [pc, #96]	; (800c23c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d004      	beq.n	800c1e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4a17      	ldr	r2, [pc, #92]	; (800c240 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d10c      	bne.n	800c202 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	68ba      	ldr	r2, [r7, #8]
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	68ba      	ldr	r2, [r7, #8]
 800c200:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2201      	movs	r2, #1
 800c206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2200      	movs	r2, #0
 800c20e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c212:	2300      	movs	r3, #0
}
 800c214:	4618      	mov	r0, r3
 800c216:	3714      	adds	r7, #20
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr
 800c220:	40010000 	.word	0x40010000
 800c224:	40010400 	.word	0x40010400
 800c228:	40000400 	.word	0x40000400
 800c22c:	40000800 	.word	0x40000800
 800c230:	40000c00 	.word	0x40000c00
 800c234:	40001800 	.word	0x40001800
 800c238:	40014000 	.word	0x40014000
 800c23c:	4000e000 	.word	0x4000e000
 800c240:	4000e400 	.word	0x4000e400

0800c244 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c244:	b480      	push	{r7}
 800c246:	b085      	sub	sp, #20
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c24e:	2300      	movs	r3, #0
 800c250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d101      	bne.n	800c260 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c25c:	2302      	movs	r3, #2
 800c25e:	e087      	b.n	800c370 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2201      	movs	r2, #1
 800c264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	4313      	orrs	r3, r2
 800c274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	4313      	orrs	r3, r2
 800c282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	4313      	orrs	r3, r2
 800c290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4313      	orrs	r3, r2
 800c29e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	691b      	ldr	r3, [r3, #16]
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	695b      	ldr	r3, [r3, #20]
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	699b      	ldr	r3, [r3, #24]
 800c2d4:	041b      	lsls	r3, r3, #16
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4a27      	ldr	r2, [pc, #156]	; (800c37c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d004      	beq.n	800c2ee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a25      	ldr	r2, [pc, #148]	; (800c380 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d106      	bne.n	800c2fc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	69db      	ldr	r3, [r3, #28]
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4a1e      	ldr	r2, [pc, #120]	; (800c37c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d004      	beq.n	800c310 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a1d      	ldr	r2, [pc, #116]	; (800c380 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d126      	bne.n	800c35e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c31a:	051b      	lsls	r3, r3, #20
 800c31c:	4313      	orrs	r3, r2
 800c31e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	6a1b      	ldr	r3, [r3, #32]
 800c32a:	4313      	orrs	r3, r2
 800c32c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c338:	4313      	orrs	r3, r2
 800c33a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a0e      	ldr	r2, [pc, #56]	; (800c37c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d004      	beq.n	800c350 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a0d      	ldr	r2, [pc, #52]	; (800c380 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d106      	bne.n	800c35e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c35a:	4313      	orrs	r3, r2
 800c35c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	68fa      	ldr	r2, [r7, #12]
 800c364:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2200      	movs	r2, #0
 800c36a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c36e:	2300      	movs	r3, #0
}
 800c370:	4618      	mov	r0, r3
 800c372:	3714      	adds	r7, #20
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr
 800c37c:	40010000 	.word	0x40010000
 800c380:	40010400 	.word	0x40010400

0800c384 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c38c:	bf00      	nop
 800c38e:	370c      	adds	r7, #12
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr

0800c398 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c3a0:	bf00      	nop
 800c3a2:	370c      	adds	r7, #12
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c3b4:	bf00      	nop
 800c3b6:	370c      	adds	r7, #12
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr

0800c3c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b082      	sub	sp, #8
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d101      	bne.n	800c3d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e042      	b.n	800c458 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d106      	bne.n	800c3ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f7f8 fa41 	bl	800486c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2224      	movs	r2, #36	; 0x24
 800c3ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	681a      	ldr	r2, [r3, #0]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f022 0201 	bic.w	r2, r2, #1
 800c400:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 fcdc 	bl	800cdc0 <UART_SetConfig>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d101      	bne.n	800c412 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c40e:	2301      	movs	r3, #1
 800c410:	e022      	b.n	800c458 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c416:	2b00      	cmp	r3, #0
 800c418:	d002      	beq.n	800c420 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f001 fb3c 	bl	800da98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	685a      	ldr	r2, [r3, #4]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c42e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	689a      	ldr	r2, [r3, #8]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c43e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f042 0201 	orr.w	r2, r2, #1
 800c44e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f001 fbc3 	bl	800dbdc <UART_CheckIdleState>
 800c456:	4603      	mov	r3, r0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3708      	adds	r7, #8
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b08a      	sub	sp, #40	; 0x28
 800c464:	af00      	add	r7, sp, #0
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	60b9      	str	r1, [r7, #8]
 800c46a:	4613      	mov	r3, r2
 800c46c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c474:	2b20      	cmp	r3, #32
 800c476:	d167      	bne.n	800c548 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d002      	beq.n	800c484 <HAL_UART_Transmit_DMA+0x24>
 800c47e:	88fb      	ldrh	r3, [r7, #6]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d101      	bne.n	800c488 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c484:	2301      	movs	r3, #1
 800c486:	e060      	b.n	800c54a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	68ba      	ldr	r2, [r7, #8]
 800c48c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	88fa      	ldrh	r2, [r7, #6]
 800c492:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	88fa      	ldrh	r2, [r7, #6]
 800c49a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2221      	movs	r2, #33	; 0x21
 800c4aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d028      	beq.n	800c508 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4ba:	4a26      	ldr	r2, [pc, #152]	; (800c554 <HAL_UART_Transmit_DMA+0xf4>)
 800c4bc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4c2:	4a25      	ldr	r2, [pc, #148]	; (800c558 <HAL_UART_Transmit_DMA+0xf8>)
 800c4c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4ca:	4a24      	ldr	r2, [pc, #144]	; (800c55c <HAL_UART_Transmit_DMA+0xfc>)
 800c4cc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4de:	4619      	mov	r1, r3
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	3328      	adds	r3, #40	; 0x28
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	88fb      	ldrh	r3, [r7, #6]
 800c4ea:	f7f9 f8f1 	bl	80056d0 <HAL_DMA_Start_IT>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d009      	beq.n	800c508 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2210      	movs	r2, #16
 800c4f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2220      	movs	r2, #32
 800c500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800c504:	2301      	movs	r3, #1
 800c506:	e020      	b.n	800c54a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	2240      	movs	r2, #64	; 0x40
 800c50e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	3308      	adds	r3, #8
 800c516:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	e853 3f00 	ldrex	r3, [r3]
 800c51e:	613b      	str	r3, [r7, #16]
   return(result);
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c526:	627b      	str	r3, [r7, #36]	; 0x24
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	3308      	adds	r3, #8
 800c52e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c530:	623a      	str	r2, [r7, #32]
 800c532:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c534:	69f9      	ldr	r1, [r7, #28]
 800c536:	6a3a      	ldr	r2, [r7, #32]
 800c538:	e841 2300 	strex	r3, r2, [r1]
 800c53c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c53e:	69bb      	ldr	r3, [r7, #24]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d1e5      	bne.n	800c510 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c544:	2300      	movs	r3, #0
 800c546:	e000      	b.n	800c54a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c548:	2302      	movs	r3, #2
  }
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3728      	adds	r7, #40	; 0x28
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	0800e09d 	.word	0x0800e09d
 800c558:	0800e133 	.word	0x0800e133
 800c55c:	0800e2b5 	.word	0x0800e2b5

0800c560 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b08a      	sub	sp, #40	; 0x28
 800c564:	af00      	add	r7, sp, #0
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	60b9      	str	r1, [r7, #8]
 800c56a:	4613      	mov	r3, r2
 800c56c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c574:	2b20      	cmp	r3, #32
 800c576:	d137      	bne.n	800c5e8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d002      	beq.n	800c584 <HAL_UART_Receive_DMA+0x24>
 800c57e:	88fb      	ldrh	r3, [r7, #6]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d101      	bne.n	800c588 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c584:	2301      	movs	r3, #1
 800c586:	e030      	b.n	800c5ea <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2200      	movs	r2, #0
 800c58c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4a18      	ldr	r2, [pc, #96]	; (800c5f4 <HAL_UART_Receive_DMA+0x94>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d01f      	beq.n	800c5d8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d018      	beq.n	800c5d8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	e853 3f00 	ldrex	r3, [r3]
 800c5b2:	613b      	str	r3, [r7, #16]
   return(result);
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c5ba:	627b      	str	r3, [r7, #36]	; 0x24
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c4:	623b      	str	r3, [r7, #32]
 800c5c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c8:	69f9      	ldr	r1, [r7, #28]
 800c5ca:	6a3a      	ldr	r2, [r7, #32]
 800c5cc:	e841 2300 	strex	r3, r2, [r1]
 800c5d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d1e6      	bne.n	800c5a6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c5d8:	88fb      	ldrh	r3, [r7, #6]
 800c5da:	461a      	mov	r2, r3
 800c5dc:	68b9      	ldr	r1, [r7, #8]
 800c5de:	68f8      	ldr	r0, [r7, #12]
 800c5e0:	f001 fc0e 	bl	800de00 <UART_Start_Receive_DMA>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	e000      	b.n	800c5ea <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c5e8:	2302      	movs	r3, #2
  }
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3728      	adds	r7, #40	; 0x28
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	58000c00 	.word	0x58000c00

0800c5f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b0ba      	sub	sp, #232	; 0xe8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	69db      	ldr	r3, [r3, #28]
 800c606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c61e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c622:	f640 030f 	movw	r3, #2063	; 0x80f
 800c626:	4013      	ands	r3, r2
 800c628:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c62c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c630:	2b00      	cmp	r3, #0
 800c632:	d11b      	bne.n	800c66c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c638:	f003 0320 	and.w	r3, r3, #32
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d015      	beq.n	800c66c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c644:	f003 0320 	and.w	r3, r3, #32
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d105      	bne.n	800c658 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c64c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c654:	2b00      	cmp	r3, #0
 800c656:	d009      	beq.n	800c66c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	f000 8377 	beq.w	800cd50 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	4798      	blx	r3
      }
      return;
 800c66a:	e371      	b.n	800cd50 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c66c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c670:	2b00      	cmp	r3, #0
 800c672:	f000 8123 	beq.w	800c8bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c676:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c67a:	4b8d      	ldr	r3, [pc, #564]	; (800c8b0 <HAL_UART_IRQHandler+0x2b8>)
 800c67c:	4013      	ands	r3, r2
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d106      	bne.n	800c690 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c682:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c686:	4b8b      	ldr	r3, [pc, #556]	; (800c8b4 <HAL_UART_IRQHandler+0x2bc>)
 800c688:	4013      	ands	r3, r2
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	f000 8116 	beq.w	800c8bc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c694:	f003 0301 	and.w	r3, r3, #1
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d011      	beq.n	800c6c0 <HAL_UART_IRQHandler+0xc8>
 800c69c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d00b      	beq.n	800c6c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6b6:	f043 0201 	orr.w	r2, r3, #1
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c6c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6c4:	f003 0302 	and.w	r3, r3, #2
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d011      	beq.n	800c6f0 <HAL_UART_IRQHandler+0xf8>
 800c6cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6d0:	f003 0301 	and.w	r3, r3, #1
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d00b      	beq.n	800c6f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2202      	movs	r2, #2
 800c6de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6e6:	f043 0204 	orr.w	r2, r3, #4
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c6f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6f4:	f003 0304 	and.w	r3, r3, #4
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d011      	beq.n	800c720 <HAL_UART_IRQHandler+0x128>
 800c6fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c700:	f003 0301 	and.w	r3, r3, #1
 800c704:	2b00      	cmp	r3, #0
 800c706:	d00b      	beq.n	800c720 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2204      	movs	r2, #4
 800c70e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c716:	f043 0202 	orr.w	r2, r3, #2
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c724:	f003 0308 	and.w	r3, r3, #8
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d017      	beq.n	800c75c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c72c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c730:	f003 0320 	and.w	r3, r3, #32
 800c734:	2b00      	cmp	r3, #0
 800c736:	d105      	bne.n	800c744 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c738:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c73c:	4b5c      	ldr	r3, [pc, #368]	; (800c8b0 <HAL_UART_IRQHandler+0x2b8>)
 800c73e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c740:	2b00      	cmp	r3, #0
 800c742:	d00b      	beq.n	800c75c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2208      	movs	r2, #8
 800c74a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c752:	f043 0208 	orr.w	r2, r3, #8
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c764:	2b00      	cmp	r3, #0
 800c766:	d012      	beq.n	800c78e <HAL_UART_IRQHandler+0x196>
 800c768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c76c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00c      	beq.n	800c78e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c77c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c784:	f043 0220 	orr.w	r2, r3, #32
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c794:	2b00      	cmp	r3, #0
 800c796:	f000 82dd 	beq.w	800cd54 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c79a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c79e:	f003 0320 	and.w	r3, r3, #32
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d013      	beq.n	800c7ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c7a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7aa:	f003 0320 	and.w	r3, r3, #32
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d105      	bne.n	800c7be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c7b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d007      	beq.n	800c7ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d003      	beq.n	800c7ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	689b      	ldr	r3, [r3, #8]
 800c7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7e2:	2b40      	cmp	r3, #64	; 0x40
 800c7e4:	d005      	beq.n	800c7f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c7e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c7ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d054      	beq.n	800c89c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f001 fbec 	bl	800dfd0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	689b      	ldr	r3, [r3, #8]
 800c7fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c802:	2b40      	cmp	r3, #64	; 0x40
 800c804:	d146      	bne.n	800c894 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	3308      	adds	r3, #8
 800c80c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c810:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c814:	e853 3f00 	ldrex	r3, [r3]
 800c818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c81c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c824:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	3308      	adds	r3, #8
 800c82e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c832:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c836:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c83a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c83e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c842:	e841 2300 	strex	r3, r2, [r1]
 800c846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c84a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d1d9      	bne.n	800c806 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d017      	beq.n	800c88c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c862:	4a15      	ldr	r2, [pc, #84]	; (800c8b8 <HAL_UART_IRQHandler+0x2c0>)
 800c864:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7f9 fcb7 	bl	80061e0 <HAL_DMA_Abort_IT>
 800c872:	4603      	mov	r3, r0
 800c874:	2b00      	cmp	r3, #0
 800c876:	d019      	beq.n	800c8ac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c87e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800c886:	4610      	mov	r0, r2
 800c888:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c88a:	e00f      	b.n	800c8ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f000 fa81 	bl	800cd94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c892:	e00b      	b.n	800c8ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 fa7d 	bl	800cd94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c89a:	e007      	b.n	800c8ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 fa79 	bl	800cd94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800c8aa:	e253      	b.n	800cd54 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8ac:	bf00      	nop
    return;
 800c8ae:	e251      	b.n	800cd54 <HAL_UART_IRQHandler+0x75c>
 800c8b0:	10000001 	.word	0x10000001
 800c8b4:	04000120 	.word	0x04000120
 800c8b8:	0800e335 	.word	0x0800e335

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	f040 81e7 	bne.w	800cc94 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c8c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8ca:	f003 0310 	and.w	r3, r3, #16
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	f000 81e0 	beq.w	800cc94 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c8d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8d8:	f003 0310 	and.w	r3, r3, #16
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f000 81d9 	beq.w	800cc94 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2210      	movs	r2, #16
 800c8e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	689b      	ldr	r3, [r3, #8]
 800c8f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8f4:	2b40      	cmp	r3, #64	; 0x40
 800c8f6:	f040 8151 	bne.w	800cb9c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4a96      	ldr	r2, [pc, #600]	; (800cb5c <HAL_UART_IRQHandler+0x564>)
 800c904:	4293      	cmp	r3, r2
 800c906:	d068      	beq.n	800c9da <HAL_UART_IRQHandler+0x3e2>
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	4a93      	ldr	r2, [pc, #588]	; (800cb60 <HAL_UART_IRQHandler+0x568>)
 800c912:	4293      	cmp	r3, r2
 800c914:	d061      	beq.n	800c9da <HAL_UART_IRQHandler+0x3e2>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a91      	ldr	r2, [pc, #580]	; (800cb64 <HAL_UART_IRQHandler+0x56c>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d05a      	beq.n	800c9da <HAL_UART_IRQHandler+0x3e2>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a8e      	ldr	r2, [pc, #568]	; (800cb68 <HAL_UART_IRQHandler+0x570>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d053      	beq.n	800c9da <HAL_UART_IRQHandler+0x3e2>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a8c      	ldr	r2, [pc, #560]	; (800cb6c <HAL_UART_IRQHandler+0x574>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d04c      	beq.n	800c9da <HAL_UART_IRQHandler+0x3e2>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a89      	ldr	r2, [pc, #548]	; (800cb70 <HAL_UART_IRQHandler+0x578>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d045      	beq.n	800c9da <HAL_UART_IRQHandler+0x3e2>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4a87      	ldr	r2, [pc, #540]	; (800cb74 <HAL_UART_IRQHandler+0x57c>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d03e      	beq.n	800c9da <HAL_UART_IRQHandler+0x3e2>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a84      	ldr	r2, [pc, #528]	; (800cb78 <HAL_UART_IRQHandler+0x580>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d037      	beq.n	800c9da <HAL_UART_IRQHandler+0x3e2>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4a82      	ldr	r2, [pc, #520]	; (800cb7c <HAL_UART_IRQHandler+0x584>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d030      	beq.n	800c9da <HAL_UART_IRQHandler+0x3e2>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4a7f      	ldr	r2, [pc, #508]	; (800cb80 <HAL_UART_IRQHandler+0x588>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d029      	beq.n	800c9da <HAL_UART_IRQHandler+0x3e2>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4a7d      	ldr	r2, [pc, #500]	; (800cb84 <HAL_UART_IRQHandler+0x58c>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d022      	beq.n	800c9da <HAL_UART_IRQHandler+0x3e2>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a7a      	ldr	r2, [pc, #488]	; (800cb88 <HAL_UART_IRQHandler+0x590>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d01b      	beq.n	800c9da <HAL_UART_IRQHandler+0x3e2>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4a78      	ldr	r2, [pc, #480]	; (800cb8c <HAL_UART_IRQHandler+0x594>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d014      	beq.n	800c9da <HAL_UART_IRQHandler+0x3e2>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a75      	ldr	r2, [pc, #468]	; (800cb90 <HAL_UART_IRQHandler+0x598>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d00d      	beq.n	800c9da <HAL_UART_IRQHandler+0x3e2>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a73      	ldr	r2, [pc, #460]	; (800cb94 <HAL_UART_IRQHandler+0x59c>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d006      	beq.n	800c9da <HAL_UART_IRQHandler+0x3e2>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a70      	ldr	r2, [pc, #448]	; (800cb98 <HAL_UART_IRQHandler+0x5a0>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d106      	bne.n	800c9e8 <HAL_UART_IRQHandler+0x3f0>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	e005      	b.n	800c9f4 <HAL_UART_IRQHandler+0x3fc>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c9f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	f000 81ab 	beq.w	800cd58 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ca08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	f080 81a3 	bcs.w	800cd58 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ca18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca22:	69db      	ldr	r3, [r3, #28]
 800ca24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca28:	f000 8087 	beq.w	800cb3a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ca38:	e853 3f00 	ldrex	r3, [r3]
 800ca3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ca40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	461a      	mov	r2, r3
 800ca52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ca5a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ca62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ca66:	e841 2300 	strex	r3, r2, [r1]
 800ca6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ca6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d1da      	bne.n	800ca2c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	3308      	adds	r3, #8
 800ca7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca80:	e853 3f00 	ldrex	r3, [r3]
 800ca84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ca86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca88:	f023 0301 	bic.w	r3, r3, #1
 800ca8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	3308      	adds	r3, #8
 800ca96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ca9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ca9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caa0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800caa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800caa6:	e841 2300 	strex	r3, r2, [r1]
 800caaa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800caac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d1e1      	bne.n	800ca76 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	3308      	adds	r3, #8
 800cab8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cabc:	e853 3f00 	ldrex	r3, [r3]
 800cac0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cac8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	3308      	adds	r3, #8
 800cad2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cad6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cad8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cada:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cadc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cade:	e841 2300 	strex	r3, r2, [r1]
 800cae2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d1e3      	bne.n	800cab2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2220      	movs	r2, #32
 800caee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2200      	movs	r2, #0
 800caf6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cafe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb00:	e853 3f00 	ldrex	r3, [r3]
 800cb04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cb06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb08:	f023 0310 	bic.w	r3, r3, #16
 800cb0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	461a      	mov	r2, r3
 800cb16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb1a:	65bb      	str	r3, [r7, #88]	; 0x58
 800cb1c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cb20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb22:	e841 2300 	strex	r3, r2, [r1]
 800cb26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cb28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d1e4      	bne.n	800caf8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7f9 f835 	bl	8005ba4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2202      	movs	r2, #2
 800cb3e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	1ad3      	subs	r3, r2, r3
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	4619      	mov	r1, r3
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 f927 	bl	800cda8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cb5a:	e0fd      	b.n	800cd58 <HAL_UART_IRQHandler+0x760>
 800cb5c:	40020010 	.word	0x40020010
 800cb60:	40020028 	.word	0x40020028
 800cb64:	40020040 	.word	0x40020040
 800cb68:	40020058 	.word	0x40020058
 800cb6c:	40020070 	.word	0x40020070
 800cb70:	40020088 	.word	0x40020088
 800cb74:	400200a0 	.word	0x400200a0
 800cb78:	400200b8 	.word	0x400200b8
 800cb7c:	40020410 	.word	0x40020410
 800cb80:	40020428 	.word	0x40020428
 800cb84:	40020440 	.word	0x40020440
 800cb88:	40020458 	.word	0x40020458
 800cb8c:	40020470 	.word	0x40020470
 800cb90:	40020488 	.word	0x40020488
 800cb94:	400204a0 	.word	0x400204a0
 800cb98:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	1ad3      	subs	r3, r2, r3
 800cbac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	f000 80cf 	beq.w	800cd5c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800cbbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	f000 80ca 	beq.w	800cd5c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd0:	e853 3f00 	ldrex	r3, [r3]
 800cbd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cbd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cbdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cbea:	647b      	str	r3, [r7, #68]	; 0x44
 800cbec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cbf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cbf2:	e841 2300 	strex	r3, r2, [r1]
 800cbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cbf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d1e4      	bne.n	800cbc8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	3308      	adds	r3, #8
 800cc04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc08:	e853 3f00 	ldrex	r3, [r3]
 800cc0c:	623b      	str	r3, [r7, #32]
   return(result);
 800cc0e:	6a3a      	ldr	r2, [r7, #32]
 800cc10:	4b55      	ldr	r3, [pc, #340]	; (800cd68 <HAL_UART_IRQHandler+0x770>)
 800cc12:	4013      	ands	r3, r2
 800cc14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	3308      	adds	r3, #8
 800cc1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cc22:	633a      	str	r2, [r7, #48]	; 0x30
 800cc24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc2a:	e841 2300 	strex	r3, r2, [r1]
 800cc2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d1e3      	bne.n	800cbfe <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2220      	movs	r2, #32
 800cc3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2200      	movs	r2, #0
 800cc42:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	e853 3f00 	ldrex	r3, [r3]
 800cc56:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f023 0310 	bic.w	r3, r3, #16
 800cc5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	461a      	mov	r2, r3
 800cc68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cc6c:	61fb      	str	r3, [r7, #28]
 800cc6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc70:	69b9      	ldr	r1, [r7, #24]
 800cc72:	69fa      	ldr	r2, [r7, #28]
 800cc74:	e841 2300 	strex	r3, r2, [r1]
 800cc78:	617b      	str	r3, [r7, #20]
   return(result);
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d1e4      	bne.n	800cc4a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2202      	movs	r2, #2
 800cc84:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cc86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 f88b 	bl	800cda8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cc92:	e063      	b.n	800cd5c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cc94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d00e      	beq.n	800ccbe <HAL_UART_IRQHandler+0x6c6>
 800cca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d008      	beq.n	800ccbe <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ccb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f001 fb7d 	bl	800e3b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ccbc:	e051      	b.n	800cd62 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ccbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d014      	beq.n	800ccf4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ccca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ccce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d105      	bne.n	800cce2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ccd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ccda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d008      	beq.n	800ccf4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d03a      	beq.n	800cd60 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	4798      	blx	r3
    }
    return;
 800ccf2:	e035      	b.n	800cd60 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ccf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d009      	beq.n	800cd14 <HAL_UART_IRQHandler+0x71c>
 800cd00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d003      	beq.n	800cd14 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f001 fb27 	bl	800e360 <UART_EndTransmit_IT>
    return;
 800cd12:	e026      	b.n	800cd62 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cd14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d009      	beq.n	800cd34 <HAL_UART_IRQHandler+0x73c>
 800cd20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d003      	beq.n	800cd34 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f001 fb56 	bl	800e3de <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cd32:	e016      	b.n	800cd62 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cd34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d010      	beq.n	800cd62 <HAL_UART_IRQHandler+0x76a>
 800cd40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	da0c      	bge.n	800cd62 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f001 fb3e 	bl	800e3ca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cd4e:	e008      	b.n	800cd62 <HAL_UART_IRQHandler+0x76a>
      return;
 800cd50:	bf00      	nop
 800cd52:	e006      	b.n	800cd62 <HAL_UART_IRQHandler+0x76a>
    return;
 800cd54:	bf00      	nop
 800cd56:	e004      	b.n	800cd62 <HAL_UART_IRQHandler+0x76a>
      return;
 800cd58:	bf00      	nop
 800cd5a:	e002      	b.n	800cd62 <HAL_UART_IRQHandler+0x76a>
      return;
 800cd5c:	bf00      	nop
 800cd5e:	e000      	b.n	800cd62 <HAL_UART_IRQHandler+0x76a>
    return;
 800cd60:	bf00      	nop
  }
}
 800cd62:	37e8      	adds	r7, #232	; 0xe8
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	effffffe 	.word	0xeffffffe

0800cd6c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b083      	sub	sp, #12
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cd74:	bf00      	nop
 800cd76:	370c      	adds	r7, #12
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr

0800cd80 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b083      	sub	sp, #12
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cd88:	bf00      	nop
 800cd8a:	370c      	adds	r7, #12
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr

0800cd94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cd9c:	bf00      	nop
 800cd9e:	370c      	adds	r7, #12
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr

0800cda8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b083      	sub	sp, #12
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cdb4:	bf00      	nop
 800cdb6:	370c      	adds	r7, #12
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cdc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cdc4:	b092      	sub	sp, #72	; 0x48
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	689a      	ldr	r2, [r3, #8]
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	691b      	ldr	r3, [r3, #16]
 800cdd8:	431a      	orrs	r2, r3
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	695b      	ldr	r3, [r3, #20]
 800cdde:	431a      	orrs	r2, r3
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	69db      	ldr	r3, [r3, #28]
 800cde4:	4313      	orrs	r3, r2
 800cde6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	4bbe      	ldr	r3, [pc, #760]	; (800d0e8 <UART_SetConfig+0x328>)
 800cdf0:	4013      	ands	r3, r2
 800cdf2:	697a      	ldr	r2, [r7, #20]
 800cdf4:	6812      	ldr	r2, [r2, #0]
 800cdf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cdf8:	430b      	orrs	r3, r1
 800cdfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	68da      	ldr	r2, [r3, #12]
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	430a      	orrs	r2, r1
 800ce10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	699b      	ldr	r3, [r3, #24]
 800ce16:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4ab3      	ldr	r2, [pc, #716]	; (800d0ec <UART_SetConfig+0x32c>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d004      	beq.n	800ce2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	6a1b      	ldr	r3, [r3, #32]
 800ce26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	689a      	ldr	r2, [r3, #8]
 800ce32:	4baf      	ldr	r3, [pc, #700]	; (800d0f0 <UART_SetConfig+0x330>)
 800ce34:	4013      	ands	r3, r2
 800ce36:	697a      	ldr	r2, [r7, #20]
 800ce38:	6812      	ldr	r2, [r2, #0]
 800ce3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ce3c:	430b      	orrs	r3, r1
 800ce3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce46:	f023 010f 	bic.w	r1, r3, #15
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	430a      	orrs	r2, r1
 800ce54:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4aa6      	ldr	r2, [pc, #664]	; (800d0f4 <UART_SetConfig+0x334>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d177      	bne.n	800cf50 <UART_SetConfig+0x190>
 800ce60:	4ba5      	ldr	r3, [pc, #660]	; (800d0f8 <UART_SetConfig+0x338>)
 800ce62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ce68:	2b28      	cmp	r3, #40	; 0x28
 800ce6a:	d86d      	bhi.n	800cf48 <UART_SetConfig+0x188>
 800ce6c:	a201      	add	r2, pc, #4	; (adr r2, 800ce74 <UART_SetConfig+0xb4>)
 800ce6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce72:	bf00      	nop
 800ce74:	0800cf19 	.word	0x0800cf19
 800ce78:	0800cf49 	.word	0x0800cf49
 800ce7c:	0800cf49 	.word	0x0800cf49
 800ce80:	0800cf49 	.word	0x0800cf49
 800ce84:	0800cf49 	.word	0x0800cf49
 800ce88:	0800cf49 	.word	0x0800cf49
 800ce8c:	0800cf49 	.word	0x0800cf49
 800ce90:	0800cf49 	.word	0x0800cf49
 800ce94:	0800cf21 	.word	0x0800cf21
 800ce98:	0800cf49 	.word	0x0800cf49
 800ce9c:	0800cf49 	.word	0x0800cf49
 800cea0:	0800cf49 	.word	0x0800cf49
 800cea4:	0800cf49 	.word	0x0800cf49
 800cea8:	0800cf49 	.word	0x0800cf49
 800ceac:	0800cf49 	.word	0x0800cf49
 800ceb0:	0800cf49 	.word	0x0800cf49
 800ceb4:	0800cf29 	.word	0x0800cf29
 800ceb8:	0800cf49 	.word	0x0800cf49
 800cebc:	0800cf49 	.word	0x0800cf49
 800cec0:	0800cf49 	.word	0x0800cf49
 800cec4:	0800cf49 	.word	0x0800cf49
 800cec8:	0800cf49 	.word	0x0800cf49
 800cecc:	0800cf49 	.word	0x0800cf49
 800ced0:	0800cf49 	.word	0x0800cf49
 800ced4:	0800cf31 	.word	0x0800cf31
 800ced8:	0800cf49 	.word	0x0800cf49
 800cedc:	0800cf49 	.word	0x0800cf49
 800cee0:	0800cf49 	.word	0x0800cf49
 800cee4:	0800cf49 	.word	0x0800cf49
 800cee8:	0800cf49 	.word	0x0800cf49
 800ceec:	0800cf49 	.word	0x0800cf49
 800cef0:	0800cf49 	.word	0x0800cf49
 800cef4:	0800cf39 	.word	0x0800cf39
 800cef8:	0800cf49 	.word	0x0800cf49
 800cefc:	0800cf49 	.word	0x0800cf49
 800cf00:	0800cf49 	.word	0x0800cf49
 800cf04:	0800cf49 	.word	0x0800cf49
 800cf08:	0800cf49 	.word	0x0800cf49
 800cf0c:	0800cf49 	.word	0x0800cf49
 800cf10:	0800cf49 	.word	0x0800cf49
 800cf14:	0800cf41 	.word	0x0800cf41
 800cf18:	2301      	movs	r3, #1
 800cf1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf1e:	e326      	b.n	800d56e <UART_SetConfig+0x7ae>
 800cf20:	2304      	movs	r3, #4
 800cf22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf26:	e322      	b.n	800d56e <UART_SetConfig+0x7ae>
 800cf28:	2308      	movs	r3, #8
 800cf2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf2e:	e31e      	b.n	800d56e <UART_SetConfig+0x7ae>
 800cf30:	2310      	movs	r3, #16
 800cf32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf36:	e31a      	b.n	800d56e <UART_SetConfig+0x7ae>
 800cf38:	2320      	movs	r3, #32
 800cf3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf3e:	e316      	b.n	800d56e <UART_SetConfig+0x7ae>
 800cf40:	2340      	movs	r3, #64	; 0x40
 800cf42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf46:	e312      	b.n	800d56e <UART_SetConfig+0x7ae>
 800cf48:	2380      	movs	r3, #128	; 0x80
 800cf4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf4e:	e30e      	b.n	800d56e <UART_SetConfig+0x7ae>
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4a69      	ldr	r2, [pc, #420]	; (800d0fc <UART_SetConfig+0x33c>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d130      	bne.n	800cfbc <UART_SetConfig+0x1fc>
 800cf5a:	4b67      	ldr	r3, [pc, #412]	; (800d0f8 <UART_SetConfig+0x338>)
 800cf5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf5e:	f003 0307 	and.w	r3, r3, #7
 800cf62:	2b05      	cmp	r3, #5
 800cf64:	d826      	bhi.n	800cfb4 <UART_SetConfig+0x1f4>
 800cf66:	a201      	add	r2, pc, #4	; (adr r2, 800cf6c <UART_SetConfig+0x1ac>)
 800cf68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf6c:	0800cf85 	.word	0x0800cf85
 800cf70:	0800cf8d 	.word	0x0800cf8d
 800cf74:	0800cf95 	.word	0x0800cf95
 800cf78:	0800cf9d 	.word	0x0800cf9d
 800cf7c:	0800cfa5 	.word	0x0800cfa5
 800cf80:	0800cfad 	.word	0x0800cfad
 800cf84:	2300      	movs	r3, #0
 800cf86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf8a:	e2f0      	b.n	800d56e <UART_SetConfig+0x7ae>
 800cf8c:	2304      	movs	r3, #4
 800cf8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf92:	e2ec      	b.n	800d56e <UART_SetConfig+0x7ae>
 800cf94:	2308      	movs	r3, #8
 800cf96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf9a:	e2e8      	b.n	800d56e <UART_SetConfig+0x7ae>
 800cf9c:	2310      	movs	r3, #16
 800cf9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfa2:	e2e4      	b.n	800d56e <UART_SetConfig+0x7ae>
 800cfa4:	2320      	movs	r3, #32
 800cfa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfaa:	e2e0      	b.n	800d56e <UART_SetConfig+0x7ae>
 800cfac:	2340      	movs	r3, #64	; 0x40
 800cfae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfb2:	e2dc      	b.n	800d56e <UART_SetConfig+0x7ae>
 800cfb4:	2380      	movs	r3, #128	; 0x80
 800cfb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfba:	e2d8      	b.n	800d56e <UART_SetConfig+0x7ae>
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a4f      	ldr	r2, [pc, #316]	; (800d100 <UART_SetConfig+0x340>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d130      	bne.n	800d028 <UART_SetConfig+0x268>
 800cfc6:	4b4c      	ldr	r3, [pc, #304]	; (800d0f8 <UART_SetConfig+0x338>)
 800cfc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfca:	f003 0307 	and.w	r3, r3, #7
 800cfce:	2b05      	cmp	r3, #5
 800cfd0:	d826      	bhi.n	800d020 <UART_SetConfig+0x260>
 800cfd2:	a201      	add	r2, pc, #4	; (adr r2, 800cfd8 <UART_SetConfig+0x218>)
 800cfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfd8:	0800cff1 	.word	0x0800cff1
 800cfdc:	0800cff9 	.word	0x0800cff9
 800cfe0:	0800d001 	.word	0x0800d001
 800cfe4:	0800d009 	.word	0x0800d009
 800cfe8:	0800d011 	.word	0x0800d011
 800cfec:	0800d019 	.word	0x0800d019
 800cff0:	2300      	movs	r3, #0
 800cff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cff6:	e2ba      	b.n	800d56e <UART_SetConfig+0x7ae>
 800cff8:	2304      	movs	r3, #4
 800cffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cffe:	e2b6      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d000:	2308      	movs	r3, #8
 800d002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d006:	e2b2      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d008:	2310      	movs	r3, #16
 800d00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d00e:	e2ae      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d010:	2320      	movs	r3, #32
 800d012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d016:	e2aa      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d018:	2340      	movs	r3, #64	; 0x40
 800d01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d01e:	e2a6      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d020:	2380      	movs	r3, #128	; 0x80
 800d022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d026:	e2a2      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a35      	ldr	r2, [pc, #212]	; (800d104 <UART_SetConfig+0x344>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d130      	bne.n	800d094 <UART_SetConfig+0x2d4>
 800d032:	4b31      	ldr	r3, [pc, #196]	; (800d0f8 <UART_SetConfig+0x338>)
 800d034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d036:	f003 0307 	and.w	r3, r3, #7
 800d03a:	2b05      	cmp	r3, #5
 800d03c:	d826      	bhi.n	800d08c <UART_SetConfig+0x2cc>
 800d03e:	a201      	add	r2, pc, #4	; (adr r2, 800d044 <UART_SetConfig+0x284>)
 800d040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d044:	0800d05d 	.word	0x0800d05d
 800d048:	0800d065 	.word	0x0800d065
 800d04c:	0800d06d 	.word	0x0800d06d
 800d050:	0800d075 	.word	0x0800d075
 800d054:	0800d07d 	.word	0x0800d07d
 800d058:	0800d085 	.word	0x0800d085
 800d05c:	2300      	movs	r3, #0
 800d05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d062:	e284      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d064:	2304      	movs	r3, #4
 800d066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d06a:	e280      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d06c:	2308      	movs	r3, #8
 800d06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d072:	e27c      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d074:	2310      	movs	r3, #16
 800d076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d07a:	e278      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d07c:	2320      	movs	r3, #32
 800d07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d082:	e274      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d084:	2340      	movs	r3, #64	; 0x40
 800d086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d08a:	e270      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d08c:	2380      	movs	r3, #128	; 0x80
 800d08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d092:	e26c      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4a1b      	ldr	r2, [pc, #108]	; (800d108 <UART_SetConfig+0x348>)
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d142      	bne.n	800d124 <UART_SetConfig+0x364>
 800d09e:	4b16      	ldr	r3, [pc, #88]	; (800d0f8 <UART_SetConfig+0x338>)
 800d0a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0a2:	f003 0307 	and.w	r3, r3, #7
 800d0a6:	2b05      	cmp	r3, #5
 800d0a8:	d838      	bhi.n	800d11c <UART_SetConfig+0x35c>
 800d0aa:	a201      	add	r2, pc, #4	; (adr r2, 800d0b0 <UART_SetConfig+0x2f0>)
 800d0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b0:	0800d0c9 	.word	0x0800d0c9
 800d0b4:	0800d0d1 	.word	0x0800d0d1
 800d0b8:	0800d0d9 	.word	0x0800d0d9
 800d0bc:	0800d0e1 	.word	0x0800d0e1
 800d0c0:	0800d10d 	.word	0x0800d10d
 800d0c4:	0800d115 	.word	0x0800d115
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0ce:	e24e      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d0d0:	2304      	movs	r3, #4
 800d0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0d6:	e24a      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d0d8:	2308      	movs	r3, #8
 800d0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0de:	e246      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d0e0:	2310      	movs	r3, #16
 800d0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0e6:	e242      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d0e8:	cfff69f3 	.word	0xcfff69f3
 800d0ec:	58000c00 	.word	0x58000c00
 800d0f0:	11fff4ff 	.word	0x11fff4ff
 800d0f4:	40011000 	.word	0x40011000
 800d0f8:	58024400 	.word	0x58024400
 800d0fc:	40004400 	.word	0x40004400
 800d100:	40004800 	.word	0x40004800
 800d104:	40004c00 	.word	0x40004c00
 800d108:	40005000 	.word	0x40005000
 800d10c:	2320      	movs	r3, #32
 800d10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d112:	e22c      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d114:	2340      	movs	r3, #64	; 0x40
 800d116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d11a:	e228      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d11c:	2380      	movs	r3, #128	; 0x80
 800d11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d122:	e224      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4ab1      	ldr	r2, [pc, #708]	; (800d3f0 <UART_SetConfig+0x630>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d176      	bne.n	800d21c <UART_SetConfig+0x45c>
 800d12e:	4bb1      	ldr	r3, [pc, #708]	; (800d3f4 <UART_SetConfig+0x634>)
 800d130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d132:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d136:	2b28      	cmp	r3, #40	; 0x28
 800d138:	d86c      	bhi.n	800d214 <UART_SetConfig+0x454>
 800d13a:	a201      	add	r2, pc, #4	; (adr r2, 800d140 <UART_SetConfig+0x380>)
 800d13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d140:	0800d1e5 	.word	0x0800d1e5
 800d144:	0800d215 	.word	0x0800d215
 800d148:	0800d215 	.word	0x0800d215
 800d14c:	0800d215 	.word	0x0800d215
 800d150:	0800d215 	.word	0x0800d215
 800d154:	0800d215 	.word	0x0800d215
 800d158:	0800d215 	.word	0x0800d215
 800d15c:	0800d215 	.word	0x0800d215
 800d160:	0800d1ed 	.word	0x0800d1ed
 800d164:	0800d215 	.word	0x0800d215
 800d168:	0800d215 	.word	0x0800d215
 800d16c:	0800d215 	.word	0x0800d215
 800d170:	0800d215 	.word	0x0800d215
 800d174:	0800d215 	.word	0x0800d215
 800d178:	0800d215 	.word	0x0800d215
 800d17c:	0800d215 	.word	0x0800d215
 800d180:	0800d1f5 	.word	0x0800d1f5
 800d184:	0800d215 	.word	0x0800d215
 800d188:	0800d215 	.word	0x0800d215
 800d18c:	0800d215 	.word	0x0800d215
 800d190:	0800d215 	.word	0x0800d215
 800d194:	0800d215 	.word	0x0800d215
 800d198:	0800d215 	.word	0x0800d215
 800d19c:	0800d215 	.word	0x0800d215
 800d1a0:	0800d1fd 	.word	0x0800d1fd
 800d1a4:	0800d215 	.word	0x0800d215
 800d1a8:	0800d215 	.word	0x0800d215
 800d1ac:	0800d215 	.word	0x0800d215
 800d1b0:	0800d215 	.word	0x0800d215
 800d1b4:	0800d215 	.word	0x0800d215
 800d1b8:	0800d215 	.word	0x0800d215
 800d1bc:	0800d215 	.word	0x0800d215
 800d1c0:	0800d205 	.word	0x0800d205
 800d1c4:	0800d215 	.word	0x0800d215
 800d1c8:	0800d215 	.word	0x0800d215
 800d1cc:	0800d215 	.word	0x0800d215
 800d1d0:	0800d215 	.word	0x0800d215
 800d1d4:	0800d215 	.word	0x0800d215
 800d1d8:	0800d215 	.word	0x0800d215
 800d1dc:	0800d215 	.word	0x0800d215
 800d1e0:	0800d20d 	.word	0x0800d20d
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ea:	e1c0      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d1ec:	2304      	movs	r3, #4
 800d1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1f2:	e1bc      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d1f4:	2308      	movs	r3, #8
 800d1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1fa:	e1b8      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d1fc:	2310      	movs	r3, #16
 800d1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d202:	e1b4      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d204:	2320      	movs	r3, #32
 800d206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d20a:	e1b0      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d20c:	2340      	movs	r3, #64	; 0x40
 800d20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d212:	e1ac      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d214:	2380      	movs	r3, #128	; 0x80
 800d216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d21a:	e1a8      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4a75      	ldr	r2, [pc, #468]	; (800d3f8 <UART_SetConfig+0x638>)
 800d222:	4293      	cmp	r3, r2
 800d224:	d130      	bne.n	800d288 <UART_SetConfig+0x4c8>
 800d226:	4b73      	ldr	r3, [pc, #460]	; (800d3f4 <UART_SetConfig+0x634>)
 800d228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d22a:	f003 0307 	and.w	r3, r3, #7
 800d22e:	2b05      	cmp	r3, #5
 800d230:	d826      	bhi.n	800d280 <UART_SetConfig+0x4c0>
 800d232:	a201      	add	r2, pc, #4	; (adr r2, 800d238 <UART_SetConfig+0x478>)
 800d234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d238:	0800d251 	.word	0x0800d251
 800d23c:	0800d259 	.word	0x0800d259
 800d240:	0800d261 	.word	0x0800d261
 800d244:	0800d269 	.word	0x0800d269
 800d248:	0800d271 	.word	0x0800d271
 800d24c:	0800d279 	.word	0x0800d279
 800d250:	2300      	movs	r3, #0
 800d252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d256:	e18a      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d258:	2304      	movs	r3, #4
 800d25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d25e:	e186      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d260:	2308      	movs	r3, #8
 800d262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d266:	e182      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d268:	2310      	movs	r3, #16
 800d26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d26e:	e17e      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d270:	2320      	movs	r3, #32
 800d272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d276:	e17a      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d278:	2340      	movs	r3, #64	; 0x40
 800d27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d27e:	e176      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d280:	2380      	movs	r3, #128	; 0x80
 800d282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d286:	e172      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	4a5b      	ldr	r2, [pc, #364]	; (800d3fc <UART_SetConfig+0x63c>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d130      	bne.n	800d2f4 <UART_SetConfig+0x534>
 800d292:	4b58      	ldr	r3, [pc, #352]	; (800d3f4 <UART_SetConfig+0x634>)
 800d294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d296:	f003 0307 	and.w	r3, r3, #7
 800d29a:	2b05      	cmp	r3, #5
 800d29c:	d826      	bhi.n	800d2ec <UART_SetConfig+0x52c>
 800d29e:	a201      	add	r2, pc, #4	; (adr r2, 800d2a4 <UART_SetConfig+0x4e4>)
 800d2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2a4:	0800d2bd 	.word	0x0800d2bd
 800d2a8:	0800d2c5 	.word	0x0800d2c5
 800d2ac:	0800d2cd 	.word	0x0800d2cd
 800d2b0:	0800d2d5 	.word	0x0800d2d5
 800d2b4:	0800d2dd 	.word	0x0800d2dd
 800d2b8:	0800d2e5 	.word	0x0800d2e5
 800d2bc:	2300      	movs	r3, #0
 800d2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2c2:	e154      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d2c4:	2304      	movs	r3, #4
 800d2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ca:	e150      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d2cc:	2308      	movs	r3, #8
 800d2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2d2:	e14c      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d2d4:	2310      	movs	r3, #16
 800d2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2da:	e148      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d2dc:	2320      	movs	r3, #32
 800d2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2e2:	e144      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d2e4:	2340      	movs	r3, #64	; 0x40
 800d2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ea:	e140      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d2ec:	2380      	movs	r3, #128	; 0x80
 800d2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2f2:	e13c      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a41      	ldr	r2, [pc, #260]	; (800d400 <UART_SetConfig+0x640>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	f040 8082 	bne.w	800d404 <UART_SetConfig+0x644>
 800d300:	4b3c      	ldr	r3, [pc, #240]	; (800d3f4 <UART_SetConfig+0x634>)
 800d302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d304:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d308:	2b28      	cmp	r3, #40	; 0x28
 800d30a:	d86d      	bhi.n	800d3e8 <UART_SetConfig+0x628>
 800d30c:	a201      	add	r2, pc, #4	; (adr r2, 800d314 <UART_SetConfig+0x554>)
 800d30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d312:	bf00      	nop
 800d314:	0800d3b9 	.word	0x0800d3b9
 800d318:	0800d3e9 	.word	0x0800d3e9
 800d31c:	0800d3e9 	.word	0x0800d3e9
 800d320:	0800d3e9 	.word	0x0800d3e9
 800d324:	0800d3e9 	.word	0x0800d3e9
 800d328:	0800d3e9 	.word	0x0800d3e9
 800d32c:	0800d3e9 	.word	0x0800d3e9
 800d330:	0800d3e9 	.word	0x0800d3e9
 800d334:	0800d3c1 	.word	0x0800d3c1
 800d338:	0800d3e9 	.word	0x0800d3e9
 800d33c:	0800d3e9 	.word	0x0800d3e9
 800d340:	0800d3e9 	.word	0x0800d3e9
 800d344:	0800d3e9 	.word	0x0800d3e9
 800d348:	0800d3e9 	.word	0x0800d3e9
 800d34c:	0800d3e9 	.word	0x0800d3e9
 800d350:	0800d3e9 	.word	0x0800d3e9
 800d354:	0800d3c9 	.word	0x0800d3c9
 800d358:	0800d3e9 	.word	0x0800d3e9
 800d35c:	0800d3e9 	.word	0x0800d3e9
 800d360:	0800d3e9 	.word	0x0800d3e9
 800d364:	0800d3e9 	.word	0x0800d3e9
 800d368:	0800d3e9 	.word	0x0800d3e9
 800d36c:	0800d3e9 	.word	0x0800d3e9
 800d370:	0800d3e9 	.word	0x0800d3e9
 800d374:	0800d3d1 	.word	0x0800d3d1
 800d378:	0800d3e9 	.word	0x0800d3e9
 800d37c:	0800d3e9 	.word	0x0800d3e9
 800d380:	0800d3e9 	.word	0x0800d3e9
 800d384:	0800d3e9 	.word	0x0800d3e9
 800d388:	0800d3e9 	.word	0x0800d3e9
 800d38c:	0800d3e9 	.word	0x0800d3e9
 800d390:	0800d3e9 	.word	0x0800d3e9
 800d394:	0800d3d9 	.word	0x0800d3d9
 800d398:	0800d3e9 	.word	0x0800d3e9
 800d39c:	0800d3e9 	.word	0x0800d3e9
 800d3a0:	0800d3e9 	.word	0x0800d3e9
 800d3a4:	0800d3e9 	.word	0x0800d3e9
 800d3a8:	0800d3e9 	.word	0x0800d3e9
 800d3ac:	0800d3e9 	.word	0x0800d3e9
 800d3b0:	0800d3e9 	.word	0x0800d3e9
 800d3b4:	0800d3e1 	.word	0x0800d3e1
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3be:	e0d6      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d3c0:	2304      	movs	r3, #4
 800d3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3c6:	e0d2      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d3c8:	2308      	movs	r3, #8
 800d3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ce:	e0ce      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d3d0:	2310      	movs	r3, #16
 800d3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3d6:	e0ca      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d3d8:	2320      	movs	r3, #32
 800d3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3de:	e0c6      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d3e0:	2340      	movs	r3, #64	; 0x40
 800d3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3e6:	e0c2      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d3e8:	2380      	movs	r3, #128	; 0x80
 800d3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ee:	e0be      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d3f0:	40011400 	.word	0x40011400
 800d3f4:	58024400 	.word	0x58024400
 800d3f8:	40007800 	.word	0x40007800
 800d3fc:	40007c00 	.word	0x40007c00
 800d400:	40011800 	.word	0x40011800
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4aad      	ldr	r2, [pc, #692]	; (800d6c0 <UART_SetConfig+0x900>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d176      	bne.n	800d4fc <UART_SetConfig+0x73c>
 800d40e:	4bad      	ldr	r3, [pc, #692]	; (800d6c4 <UART_SetConfig+0x904>)
 800d410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d416:	2b28      	cmp	r3, #40	; 0x28
 800d418:	d86c      	bhi.n	800d4f4 <UART_SetConfig+0x734>
 800d41a:	a201      	add	r2, pc, #4	; (adr r2, 800d420 <UART_SetConfig+0x660>)
 800d41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d420:	0800d4c5 	.word	0x0800d4c5
 800d424:	0800d4f5 	.word	0x0800d4f5
 800d428:	0800d4f5 	.word	0x0800d4f5
 800d42c:	0800d4f5 	.word	0x0800d4f5
 800d430:	0800d4f5 	.word	0x0800d4f5
 800d434:	0800d4f5 	.word	0x0800d4f5
 800d438:	0800d4f5 	.word	0x0800d4f5
 800d43c:	0800d4f5 	.word	0x0800d4f5
 800d440:	0800d4cd 	.word	0x0800d4cd
 800d444:	0800d4f5 	.word	0x0800d4f5
 800d448:	0800d4f5 	.word	0x0800d4f5
 800d44c:	0800d4f5 	.word	0x0800d4f5
 800d450:	0800d4f5 	.word	0x0800d4f5
 800d454:	0800d4f5 	.word	0x0800d4f5
 800d458:	0800d4f5 	.word	0x0800d4f5
 800d45c:	0800d4f5 	.word	0x0800d4f5
 800d460:	0800d4d5 	.word	0x0800d4d5
 800d464:	0800d4f5 	.word	0x0800d4f5
 800d468:	0800d4f5 	.word	0x0800d4f5
 800d46c:	0800d4f5 	.word	0x0800d4f5
 800d470:	0800d4f5 	.word	0x0800d4f5
 800d474:	0800d4f5 	.word	0x0800d4f5
 800d478:	0800d4f5 	.word	0x0800d4f5
 800d47c:	0800d4f5 	.word	0x0800d4f5
 800d480:	0800d4dd 	.word	0x0800d4dd
 800d484:	0800d4f5 	.word	0x0800d4f5
 800d488:	0800d4f5 	.word	0x0800d4f5
 800d48c:	0800d4f5 	.word	0x0800d4f5
 800d490:	0800d4f5 	.word	0x0800d4f5
 800d494:	0800d4f5 	.word	0x0800d4f5
 800d498:	0800d4f5 	.word	0x0800d4f5
 800d49c:	0800d4f5 	.word	0x0800d4f5
 800d4a0:	0800d4e5 	.word	0x0800d4e5
 800d4a4:	0800d4f5 	.word	0x0800d4f5
 800d4a8:	0800d4f5 	.word	0x0800d4f5
 800d4ac:	0800d4f5 	.word	0x0800d4f5
 800d4b0:	0800d4f5 	.word	0x0800d4f5
 800d4b4:	0800d4f5 	.word	0x0800d4f5
 800d4b8:	0800d4f5 	.word	0x0800d4f5
 800d4bc:	0800d4f5 	.word	0x0800d4f5
 800d4c0:	0800d4ed 	.word	0x0800d4ed
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ca:	e050      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d4cc:	2304      	movs	r3, #4
 800d4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4d2:	e04c      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d4d4:	2308      	movs	r3, #8
 800d4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4da:	e048      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d4dc:	2310      	movs	r3, #16
 800d4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4e2:	e044      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d4e4:	2320      	movs	r3, #32
 800d4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ea:	e040      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d4ec:	2340      	movs	r3, #64	; 0x40
 800d4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4f2:	e03c      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d4f4:	2380      	movs	r3, #128	; 0x80
 800d4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4fa:	e038      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4a71      	ldr	r2, [pc, #452]	; (800d6c8 <UART_SetConfig+0x908>)
 800d502:	4293      	cmp	r3, r2
 800d504:	d130      	bne.n	800d568 <UART_SetConfig+0x7a8>
 800d506:	4b6f      	ldr	r3, [pc, #444]	; (800d6c4 <UART_SetConfig+0x904>)
 800d508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d50a:	f003 0307 	and.w	r3, r3, #7
 800d50e:	2b05      	cmp	r3, #5
 800d510:	d826      	bhi.n	800d560 <UART_SetConfig+0x7a0>
 800d512:	a201      	add	r2, pc, #4	; (adr r2, 800d518 <UART_SetConfig+0x758>)
 800d514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d518:	0800d531 	.word	0x0800d531
 800d51c:	0800d539 	.word	0x0800d539
 800d520:	0800d541 	.word	0x0800d541
 800d524:	0800d549 	.word	0x0800d549
 800d528:	0800d551 	.word	0x0800d551
 800d52c:	0800d559 	.word	0x0800d559
 800d530:	2302      	movs	r3, #2
 800d532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d536:	e01a      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d538:	2304      	movs	r3, #4
 800d53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d53e:	e016      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d540:	2308      	movs	r3, #8
 800d542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d546:	e012      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d548:	2310      	movs	r3, #16
 800d54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d54e:	e00e      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d550:	2320      	movs	r3, #32
 800d552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d556:	e00a      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d558:	2340      	movs	r3, #64	; 0x40
 800d55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d55e:	e006      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d560:	2380      	movs	r3, #128	; 0x80
 800d562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d566:	e002      	b.n	800d56e <UART_SetConfig+0x7ae>
 800d568:	2380      	movs	r3, #128	; 0x80
 800d56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4a55      	ldr	r2, [pc, #340]	; (800d6c8 <UART_SetConfig+0x908>)
 800d574:	4293      	cmp	r3, r2
 800d576:	f040 80f8 	bne.w	800d76a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d57a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d57e:	2b20      	cmp	r3, #32
 800d580:	dc46      	bgt.n	800d610 <UART_SetConfig+0x850>
 800d582:	2b02      	cmp	r3, #2
 800d584:	db75      	blt.n	800d672 <UART_SetConfig+0x8b2>
 800d586:	3b02      	subs	r3, #2
 800d588:	2b1e      	cmp	r3, #30
 800d58a:	d872      	bhi.n	800d672 <UART_SetConfig+0x8b2>
 800d58c:	a201      	add	r2, pc, #4	; (adr r2, 800d594 <UART_SetConfig+0x7d4>)
 800d58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d592:	bf00      	nop
 800d594:	0800d617 	.word	0x0800d617
 800d598:	0800d673 	.word	0x0800d673
 800d59c:	0800d61f 	.word	0x0800d61f
 800d5a0:	0800d673 	.word	0x0800d673
 800d5a4:	0800d673 	.word	0x0800d673
 800d5a8:	0800d673 	.word	0x0800d673
 800d5ac:	0800d62f 	.word	0x0800d62f
 800d5b0:	0800d673 	.word	0x0800d673
 800d5b4:	0800d673 	.word	0x0800d673
 800d5b8:	0800d673 	.word	0x0800d673
 800d5bc:	0800d673 	.word	0x0800d673
 800d5c0:	0800d673 	.word	0x0800d673
 800d5c4:	0800d673 	.word	0x0800d673
 800d5c8:	0800d673 	.word	0x0800d673
 800d5cc:	0800d63f 	.word	0x0800d63f
 800d5d0:	0800d673 	.word	0x0800d673
 800d5d4:	0800d673 	.word	0x0800d673
 800d5d8:	0800d673 	.word	0x0800d673
 800d5dc:	0800d673 	.word	0x0800d673
 800d5e0:	0800d673 	.word	0x0800d673
 800d5e4:	0800d673 	.word	0x0800d673
 800d5e8:	0800d673 	.word	0x0800d673
 800d5ec:	0800d673 	.word	0x0800d673
 800d5f0:	0800d673 	.word	0x0800d673
 800d5f4:	0800d673 	.word	0x0800d673
 800d5f8:	0800d673 	.word	0x0800d673
 800d5fc:	0800d673 	.word	0x0800d673
 800d600:	0800d673 	.word	0x0800d673
 800d604:	0800d673 	.word	0x0800d673
 800d608:	0800d673 	.word	0x0800d673
 800d60c:	0800d665 	.word	0x0800d665
 800d610:	2b40      	cmp	r3, #64	; 0x40
 800d612:	d02a      	beq.n	800d66a <UART_SetConfig+0x8aa>
 800d614:	e02d      	b.n	800d672 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d616:	f7fc fe3d 	bl	800a294 <HAL_RCCEx_GetD3PCLK1Freq>
 800d61a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d61c:	e02f      	b.n	800d67e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d61e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d622:	4618      	mov	r0, r3
 800d624:	f7fc fe4c 	bl	800a2c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d62c:	e027      	b.n	800d67e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d62e:	f107 0318 	add.w	r3, r7, #24
 800d632:	4618      	mov	r0, r3
 800d634:	f7fc ff98 	bl	800a568 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d638:	69fb      	ldr	r3, [r7, #28]
 800d63a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d63c:	e01f      	b.n	800d67e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d63e:	4b21      	ldr	r3, [pc, #132]	; (800d6c4 <UART_SetConfig+0x904>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f003 0320 	and.w	r3, r3, #32
 800d646:	2b00      	cmp	r3, #0
 800d648:	d009      	beq.n	800d65e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d64a:	4b1e      	ldr	r3, [pc, #120]	; (800d6c4 <UART_SetConfig+0x904>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	08db      	lsrs	r3, r3, #3
 800d650:	f003 0303 	and.w	r3, r3, #3
 800d654:	4a1d      	ldr	r2, [pc, #116]	; (800d6cc <UART_SetConfig+0x90c>)
 800d656:	fa22 f303 	lsr.w	r3, r2, r3
 800d65a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d65c:	e00f      	b.n	800d67e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d65e:	4b1b      	ldr	r3, [pc, #108]	; (800d6cc <UART_SetConfig+0x90c>)
 800d660:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d662:	e00c      	b.n	800d67e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d664:	4b1a      	ldr	r3, [pc, #104]	; (800d6d0 <UART_SetConfig+0x910>)
 800d666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d668:	e009      	b.n	800d67e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d66a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d66e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d670:	e005      	b.n	800d67e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d672:	2300      	movs	r3, #0
 800d674:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d676:	2301      	movs	r3, #1
 800d678:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d67c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d67e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d680:	2b00      	cmp	r3, #0
 800d682:	f000 81ee 	beq.w	800da62 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d68a:	4a12      	ldr	r2, [pc, #72]	; (800d6d4 <UART_SetConfig+0x914>)
 800d68c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d690:	461a      	mov	r2, r3
 800d692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d694:	fbb3 f3f2 	udiv	r3, r3, r2
 800d698:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	685a      	ldr	r2, [r3, #4]
 800d69e:	4613      	mov	r3, r2
 800d6a0:	005b      	lsls	r3, r3, #1
 800d6a2:	4413      	add	r3, r2
 800d6a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d305      	bcc.n	800d6b6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d6b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d910      	bls.n	800d6d8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d6bc:	e1d1      	b.n	800da62 <UART_SetConfig+0xca2>
 800d6be:	bf00      	nop
 800d6c0:	40011c00 	.word	0x40011c00
 800d6c4:	58024400 	.word	0x58024400
 800d6c8:	58000c00 	.word	0x58000c00
 800d6cc:	03d09000 	.word	0x03d09000
 800d6d0:	003d0900 	.word	0x003d0900
 800d6d4:	0800ecb0 	.word	0x0800ecb0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6da:	2200      	movs	r2, #0
 800d6dc:	60bb      	str	r3, [r7, #8]
 800d6de:	60fa      	str	r2, [r7, #12]
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e4:	4ac0      	ldr	r2, [pc, #768]	; (800d9e8 <UART_SetConfig+0xc28>)
 800d6e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	603b      	str	r3, [r7, #0]
 800d6f0:	607a      	str	r2, [r7, #4]
 800d6f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d6fa:	f7f2 fe11 	bl	8000320 <__aeabi_uldivmod>
 800d6fe:	4602      	mov	r2, r0
 800d700:	460b      	mov	r3, r1
 800d702:	4610      	mov	r0, r2
 800d704:	4619      	mov	r1, r3
 800d706:	f04f 0200 	mov.w	r2, #0
 800d70a:	f04f 0300 	mov.w	r3, #0
 800d70e:	020b      	lsls	r3, r1, #8
 800d710:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d714:	0202      	lsls	r2, r0, #8
 800d716:	6979      	ldr	r1, [r7, #20]
 800d718:	6849      	ldr	r1, [r1, #4]
 800d71a:	0849      	lsrs	r1, r1, #1
 800d71c:	2000      	movs	r0, #0
 800d71e:	460c      	mov	r4, r1
 800d720:	4605      	mov	r5, r0
 800d722:	eb12 0804 	adds.w	r8, r2, r4
 800d726:	eb43 0905 	adc.w	r9, r3, r5
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	2200      	movs	r2, #0
 800d730:	469a      	mov	sl, r3
 800d732:	4693      	mov	fp, r2
 800d734:	4652      	mov	r2, sl
 800d736:	465b      	mov	r3, fp
 800d738:	4640      	mov	r0, r8
 800d73a:	4649      	mov	r1, r9
 800d73c:	f7f2 fdf0 	bl	8000320 <__aeabi_uldivmod>
 800d740:	4602      	mov	r2, r0
 800d742:	460b      	mov	r3, r1
 800d744:	4613      	mov	r3, r2
 800d746:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d74a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d74e:	d308      	bcc.n	800d762 <UART_SetConfig+0x9a2>
 800d750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d756:	d204      	bcs.n	800d762 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d75e:	60da      	str	r2, [r3, #12]
 800d760:	e17f      	b.n	800da62 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d762:	2301      	movs	r3, #1
 800d764:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d768:	e17b      	b.n	800da62 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	69db      	ldr	r3, [r3, #28]
 800d76e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d772:	f040 80bd 	bne.w	800d8f0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d776:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d77a:	2b20      	cmp	r3, #32
 800d77c:	dc48      	bgt.n	800d810 <UART_SetConfig+0xa50>
 800d77e:	2b00      	cmp	r3, #0
 800d780:	db7b      	blt.n	800d87a <UART_SetConfig+0xaba>
 800d782:	2b20      	cmp	r3, #32
 800d784:	d879      	bhi.n	800d87a <UART_SetConfig+0xaba>
 800d786:	a201      	add	r2, pc, #4	; (adr r2, 800d78c <UART_SetConfig+0x9cc>)
 800d788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d78c:	0800d817 	.word	0x0800d817
 800d790:	0800d81f 	.word	0x0800d81f
 800d794:	0800d87b 	.word	0x0800d87b
 800d798:	0800d87b 	.word	0x0800d87b
 800d79c:	0800d827 	.word	0x0800d827
 800d7a0:	0800d87b 	.word	0x0800d87b
 800d7a4:	0800d87b 	.word	0x0800d87b
 800d7a8:	0800d87b 	.word	0x0800d87b
 800d7ac:	0800d837 	.word	0x0800d837
 800d7b0:	0800d87b 	.word	0x0800d87b
 800d7b4:	0800d87b 	.word	0x0800d87b
 800d7b8:	0800d87b 	.word	0x0800d87b
 800d7bc:	0800d87b 	.word	0x0800d87b
 800d7c0:	0800d87b 	.word	0x0800d87b
 800d7c4:	0800d87b 	.word	0x0800d87b
 800d7c8:	0800d87b 	.word	0x0800d87b
 800d7cc:	0800d847 	.word	0x0800d847
 800d7d0:	0800d87b 	.word	0x0800d87b
 800d7d4:	0800d87b 	.word	0x0800d87b
 800d7d8:	0800d87b 	.word	0x0800d87b
 800d7dc:	0800d87b 	.word	0x0800d87b
 800d7e0:	0800d87b 	.word	0x0800d87b
 800d7e4:	0800d87b 	.word	0x0800d87b
 800d7e8:	0800d87b 	.word	0x0800d87b
 800d7ec:	0800d87b 	.word	0x0800d87b
 800d7f0:	0800d87b 	.word	0x0800d87b
 800d7f4:	0800d87b 	.word	0x0800d87b
 800d7f8:	0800d87b 	.word	0x0800d87b
 800d7fc:	0800d87b 	.word	0x0800d87b
 800d800:	0800d87b 	.word	0x0800d87b
 800d804:	0800d87b 	.word	0x0800d87b
 800d808:	0800d87b 	.word	0x0800d87b
 800d80c:	0800d86d 	.word	0x0800d86d
 800d810:	2b40      	cmp	r3, #64	; 0x40
 800d812:	d02e      	beq.n	800d872 <UART_SetConfig+0xab2>
 800d814:	e031      	b.n	800d87a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d816:	f7fb fb71 	bl	8008efc <HAL_RCC_GetPCLK1Freq>
 800d81a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d81c:	e033      	b.n	800d886 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d81e:	f7fb fb83 	bl	8008f28 <HAL_RCC_GetPCLK2Freq>
 800d822:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d824:	e02f      	b.n	800d886 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7fc fd48 	bl	800a2c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d832:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d834:	e027      	b.n	800d886 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d836:	f107 0318 	add.w	r3, r7, #24
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7fc fe94 	bl	800a568 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d840:	69fb      	ldr	r3, [r7, #28]
 800d842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d844:	e01f      	b.n	800d886 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d846:	4b69      	ldr	r3, [pc, #420]	; (800d9ec <UART_SetConfig+0xc2c>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f003 0320 	and.w	r3, r3, #32
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d009      	beq.n	800d866 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d852:	4b66      	ldr	r3, [pc, #408]	; (800d9ec <UART_SetConfig+0xc2c>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	08db      	lsrs	r3, r3, #3
 800d858:	f003 0303 	and.w	r3, r3, #3
 800d85c:	4a64      	ldr	r2, [pc, #400]	; (800d9f0 <UART_SetConfig+0xc30>)
 800d85e:	fa22 f303 	lsr.w	r3, r2, r3
 800d862:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d864:	e00f      	b.n	800d886 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d866:	4b62      	ldr	r3, [pc, #392]	; (800d9f0 <UART_SetConfig+0xc30>)
 800d868:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d86a:	e00c      	b.n	800d886 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d86c:	4b61      	ldr	r3, [pc, #388]	; (800d9f4 <UART_SetConfig+0xc34>)
 800d86e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d870:	e009      	b.n	800d886 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d878:	e005      	b.n	800d886 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d87a:	2300      	movs	r3, #0
 800d87c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d87e:	2301      	movs	r3, #1
 800d880:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d884:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d888:	2b00      	cmp	r3, #0
 800d88a:	f000 80ea 	beq.w	800da62 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d892:	4a55      	ldr	r2, [pc, #340]	; (800d9e8 <UART_SetConfig+0xc28>)
 800d894:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d898:	461a      	mov	r2, r3
 800d89a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d89c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8a0:	005a      	lsls	r2, r3, #1
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	085b      	lsrs	r3, r3, #1
 800d8a8:	441a      	add	r2, r3
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8b2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b6:	2b0f      	cmp	r3, #15
 800d8b8:	d916      	bls.n	800d8e8 <UART_SetConfig+0xb28>
 800d8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8c0:	d212      	bcs.n	800d8e8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c4:	b29b      	uxth	r3, r3
 800d8c6:	f023 030f 	bic.w	r3, r3, #15
 800d8ca:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ce:	085b      	lsrs	r3, r3, #1
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	f003 0307 	and.w	r3, r3, #7
 800d8d6:	b29a      	uxth	r2, r3
 800d8d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d8da:	4313      	orrs	r3, r2
 800d8dc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d8e4:	60da      	str	r2, [r3, #12]
 800d8e6:	e0bc      	b.n	800da62 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d8ee:	e0b8      	b.n	800da62 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d8f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d8f4:	2b20      	cmp	r3, #32
 800d8f6:	dc4b      	bgt.n	800d990 <UART_SetConfig+0xbd0>
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f2c0 8087 	blt.w	800da0c <UART_SetConfig+0xc4c>
 800d8fe:	2b20      	cmp	r3, #32
 800d900:	f200 8084 	bhi.w	800da0c <UART_SetConfig+0xc4c>
 800d904:	a201      	add	r2, pc, #4	; (adr r2, 800d90c <UART_SetConfig+0xb4c>)
 800d906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d90a:	bf00      	nop
 800d90c:	0800d997 	.word	0x0800d997
 800d910:	0800d99f 	.word	0x0800d99f
 800d914:	0800da0d 	.word	0x0800da0d
 800d918:	0800da0d 	.word	0x0800da0d
 800d91c:	0800d9a7 	.word	0x0800d9a7
 800d920:	0800da0d 	.word	0x0800da0d
 800d924:	0800da0d 	.word	0x0800da0d
 800d928:	0800da0d 	.word	0x0800da0d
 800d92c:	0800d9b7 	.word	0x0800d9b7
 800d930:	0800da0d 	.word	0x0800da0d
 800d934:	0800da0d 	.word	0x0800da0d
 800d938:	0800da0d 	.word	0x0800da0d
 800d93c:	0800da0d 	.word	0x0800da0d
 800d940:	0800da0d 	.word	0x0800da0d
 800d944:	0800da0d 	.word	0x0800da0d
 800d948:	0800da0d 	.word	0x0800da0d
 800d94c:	0800d9c7 	.word	0x0800d9c7
 800d950:	0800da0d 	.word	0x0800da0d
 800d954:	0800da0d 	.word	0x0800da0d
 800d958:	0800da0d 	.word	0x0800da0d
 800d95c:	0800da0d 	.word	0x0800da0d
 800d960:	0800da0d 	.word	0x0800da0d
 800d964:	0800da0d 	.word	0x0800da0d
 800d968:	0800da0d 	.word	0x0800da0d
 800d96c:	0800da0d 	.word	0x0800da0d
 800d970:	0800da0d 	.word	0x0800da0d
 800d974:	0800da0d 	.word	0x0800da0d
 800d978:	0800da0d 	.word	0x0800da0d
 800d97c:	0800da0d 	.word	0x0800da0d
 800d980:	0800da0d 	.word	0x0800da0d
 800d984:	0800da0d 	.word	0x0800da0d
 800d988:	0800da0d 	.word	0x0800da0d
 800d98c:	0800d9ff 	.word	0x0800d9ff
 800d990:	2b40      	cmp	r3, #64	; 0x40
 800d992:	d037      	beq.n	800da04 <UART_SetConfig+0xc44>
 800d994:	e03a      	b.n	800da0c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d996:	f7fb fab1 	bl	8008efc <HAL_RCC_GetPCLK1Freq>
 800d99a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d99c:	e03c      	b.n	800da18 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d99e:	f7fb fac3 	bl	8008f28 <HAL_RCC_GetPCLK2Freq>
 800d9a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d9a4:	e038      	b.n	800da18 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d9a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f7fc fc88 	bl	800a2c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9b4:	e030      	b.n	800da18 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d9b6:	f107 0318 	add.w	r3, r7, #24
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7fc fdd4 	bl	800a568 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d9c0:	69fb      	ldr	r3, [r7, #28]
 800d9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9c4:	e028      	b.n	800da18 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d9c6:	4b09      	ldr	r3, [pc, #36]	; (800d9ec <UART_SetConfig+0xc2c>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f003 0320 	and.w	r3, r3, #32
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d012      	beq.n	800d9f8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d9d2:	4b06      	ldr	r3, [pc, #24]	; (800d9ec <UART_SetConfig+0xc2c>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	08db      	lsrs	r3, r3, #3
 800d9d8:	f003 0303 	and.w	r3, r3, #3
 800d9dc:	4a04      	ldr	r2, [pc, #16]	; (800d9f0 <UART_SetConfig+0xc30>)
 800d9de:	fa22 f303 	lsr.w	r3, r2, r3
 800d9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d9e4:	e018      	b.n	800da18 <UART_SetConfig+0xc58>
 800d9e6:	bf00      	nop
 800d9e8:	0800ecb0 	.word	0x0800ecb0
 800d9ec:	58024400 	.word	0x58024400
 800d9f0:	03d09000 	.word	0x03d09000
 800d9f4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d9f8:	4b24      	ldr	r3, [pc, #144]	; (800da8c <UART_SetConfig+0xccc>)
 800d9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9fc:	e00c      	b.n	800da18 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d9fe:	4b24      	ldr	r3, [pc, #144]	; (800da90 <UART_SetConfig+0xcd0>)
 800da00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da02:	e009      	b.n	800da18 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da0a:	e005      	b.n	800da18 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800da0c:	2300      	movs	r3, #0
 800da0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800da10:	2301      	movs	r3, #1
 800da12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800da16:	bf00      	nop
    }

    if (pclk != 0U)
 800da18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d021      	beq.n	800da62 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da22:	4a1c      	ldr	r2, [pc, #112]	; (800da94 <UART_SetConfig+0xcd4>)
 800da24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da28:	461a      	mov	r2, r3
 800da2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da2c:	fbb3 f2f2 	udiv	r2, r3, r2
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	685b      	ldr	r3, [r3, #4]
 800da34:	085b      	lsrs	r3, r3, #1
 800da36:	441a      	add	r2, r3
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800da40:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da44:	2b0f      	cmp	r3, #15
 800da46:	d909      	bls.n	800da5c <UART_SetConfig+0xc9c>
 800da48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da4e:	d205      	bcs.n	800da5c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800da50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da52:	b29a      	uxth	r2, r3
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	60da      	str	r2, [r3, #12]
 800da5a:	e002      	b.n	800da62 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800da5c:	2301      	movs	r3, #1
 800da5e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	2201      	movs	r2, #1
 800da66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	2201      	movs	r2, #1
 800da6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	2200      	movs	r2, #0
 800da76:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	2200      	movs	r2, #0
 800da7c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800da7e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800da82:	4618      	mov	r0, r3
 800da84:	3748      	adds	r7, #72	; 0x48
 800da86:	46bd      	mov	sp, r7
 800da88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800da8c:	03d09000 	.word	0x03d09000
 800da90:	003d0900 	.word	0x003d0900
 800da94:	0800ecb0 	.word	0x0800ecb0

0800da98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800da98:	b480      	push	{r7}
 800da9a:	b083      	sub	sp, #12
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daa4:	f003 0301 	and.w	r3, r3, #1
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d00a      	beq.n	800dac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	430a      	orrs	r2, r1
 800dac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dac6:	f003 0302 	and.w	r3, r3, #2
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d00a      	beq.n	800dae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	430a      	orrs	r2, r1
 800dae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dae8:	f003 0304 	and.w	r3, r3, #4
 800daec:	2b00      	cmp	r3, #0
 800daee:	d00a      	beq.n	800db06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	430a      	orrs	r2, r1
 800db04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db0a:	f003 0308 	and.w	r3, r3, #8
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d00a      	beq.n	800db28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	430a      	orrs	r2, r1
 800db26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db2c:	f003 0310 	and.w	r3, r3, #16
 800db30:	2b00      	cmp	r3, #0
 800db32:	d00a      	beq.n	800db4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	430a      	orrs	r2, r1
 800db48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db4e:	f003 0320 	and.w	r3, r3, #32
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00a      	beq.n	800db6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	689b      	ldr	r3, [r3, #8]
 800db5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	430a      	orrs	r2, r1
 800db6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db74:	2b00      	cmp	r3, #0
 800db76:	d01a      	beq.n	800dbae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	430a      	orrs	r2, r1
 800db8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db96:	d10a      	bne.n	800dbae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	685b      	ldr	r3, [r3, #4]
 800db9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	430a      	orrs	r2, r1
 800dbac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d00a      	beq.n	800dbd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	430a      	orrs	r2, r1
 800dbce:	605a      	str	r2, [r3, #4]
  }
}
 800dbd0:	bf00      	nop
 800dbd2:	370c      	adds	r7, #12
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbda:	4770      	bx	lr

0800dbdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b098      	sub	sp, #96	; 0x60
 800dbe0:	af02      	add	r7, sp, #8
 800dbe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dbec:	f7f7 f8fa 	bl	8004de4 <HAL_GetTick>
 800dbf0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f003 0308 	and.w	r3, r3, #8
 800dbfc:	2b08      	cmp	r3, #8
 800dbfe:	d12f      	bne.n	800dc60 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dc04:	9300      	str	r3, [sp, #0]
 800dc06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f000 f88e 	bl	800dd30 <UART_WaitOnFlagUntilTimeout>
 800dc14:	4603      	mov	r3, r0
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d022      	beq.n	800dc60 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc22:	e853 3f00 	ldrex	r3, [r3]
 800dc26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dc28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc2e:	653b      	str	r3, [r7, #80]	; 0x50
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	461a      	mov	r2, r3
 800dc36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc38:	647b      	str	r3, [r7, #68]	; 0x44
 800dc3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dc3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc40:	e841 2300 	strex	r3, r2, [r1]
 800dc44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dc46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d1e6      	bne.n	800dc1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2220      	movs	r2, #32
 800dc50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2200      	movs	r2, #0
 800dc58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dc5c:	2303      	movs	r3, #3
 800dc5e:	e063      	b.n	800dd28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f003 0304 	and.w	r3, r3, #4
 800dc6a:	2b04      	cmp	r3, #4
 800dc6c:	d149      	bne.n	800dd02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dc72:	9300      	str	r3, [sp, #0]
 800dc74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc76:	2200      	movs	r2, #0
 800dc78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f000 f857 	bl	800dd30 <UART_WaitOnFlagUntilTimeout>
 800dc82:	4603      	mov	r3, r0
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d03c      	beq.n	800dd02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc90:	e853 3f00 	ldrex	r3, [r3]
 800dc94:	623b      	str	r3, [r7, #32]
   return(result);
 800dc96:	6a3b      	ldr	r3, [r7, #32]
 800dc98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dc9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	461a      	mov	r2, r3
 800dca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dca6:	633b      	str	r3, [r7, #48]	; 0x30
 800dca8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dcac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcae:	e841 2300 	strex	r3, r2, [r1]
 800dcb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d1e6      	bne.n	800dc88 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	3308      	adds	r3, #8
 800dcc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	e853 3f00 	ldrex	r3, [r3]
 800dcc8:	60fb      	str	r3, [r7, #12]
   return(result);
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f023 0301 	bic.w	r3, r3, #1
 800dcd0:	64bb      	str	r3, [r7, #72]	; 0x48
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	3308      	adds	r3, #8
 800dcd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dcda:	61fa      	str	r2, [r7, #28]
 800dcdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcde:	69b9      	ldr	r1, [r7, #24]
 800dce0:	69fa      	ldr	r2, [r7, #28]
 800dce2:	e841 2300 	strex	r3, r2, [r1]
 800dce6:	617b      	str	r3, [r7, #20]
   return(result);
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d1e5      	bne.n	800dcba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2220      	movs	r2, #32
 800dcf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dcfe:	2303      	movs	r3, #3
 800dd00:	e012      	b.n	800dd28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2220      	movs	r2, #32
 800dd06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2220      	movs	r2, #32
 800dd0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2200      	movs	r2, #0
 800dd16:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2200      	movs	r2, #0
 800dd22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dd26:	2300      	movs	r3, #0
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3758      	adds	r7, #88	; 0x58
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b084      	sub	sp, #16
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	603b      	str	r3, [r7, #0]
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd40:	e049      	b.n	800ddd6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dd42:	69bb      	ldr	r3, [r7, #24]
 800dd44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd48:	d045      	beq.n	800ddd6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd4a:	f7f7 f84b 	bl	8004de4 <HAL_GetTick>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	1ad3      	subs	r3, r2, r3
 800dd54:	69ba      	ldr	r2, [r7, #24]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d302      	bcc.n	800dd60 <UART_WaitOnFlagUntilTimeout+0x30>
 800dd5a:	69bb      	ldr	r3, [r7, #24]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d101      	bne.n	800dd64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dd60:	2303      	movs	r3, #3
 800dd62:	e048      	b.n	800ddf6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	f003 0304 	and.w	r3, r3, #4
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d031      	beq.n	800ddd6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	69db      	ldr	r3, [r3, #28]
 800dd78:	f003 0308 	and.w	r3, r3, #8
 800dd7c:	2b08      	cmp	r3, #8
 800dd7e:	d110      	bne.n	800dda2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	2208      	movs	r2, #8
 800dd86:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800dd88:	68f8      	ldr	r0, [r7, #12]
 800dd8a:	f000 f921 	bl	800dfd0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	2208      	movs	r2, #8
 800dd92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800dd9e:	2301      	movs	r3, #1
 800dda0:	e029      	b.n	800ddf6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	69db      	ldr	r3, [r3, #28]
 800dda8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ddac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ddb0:	d111      	bne.n	800ddd6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ddba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ddbc:	68f8      	ldr	r0, [r7, #12]
 800ddbe:	f000 f907 	bl	800dfd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2220      	movs	r2, #32
 800ddc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ddd2:	2303      	movs	r3, #3
 800ddd4:	e00f      	b.n	800ddf6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	69da      	ldr	r2, [r3, #28]
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	4013      	ands	r3, r2
 800dde0:	68ba      	ldr	r2, [r7, #8]
 800dde2:	429a      	cmp	r2, r3
 800dde4:	bf0c      	ite	eq
 800dde6:	2301      	moveq	r3, #1
 800dde8:	2300      	movne	r3, #0
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	461a      	mov	r2, r3
 800ddee:	79fb      	ldrb	r3, [r7, #7]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d0a6      	beq.n	800dd42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ddf4:	2300      	movs	r3, #0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3710      	adds	r7, #16
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
	...

0800de00 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b096      	sub	sp, #88	; 0x58
 800de04:	af00      	add	r7, sp, #0
 800de06:	60f8      	str	r0, [r7, #12]
 800de08:	60b9      	str	r1, [r7, #8]
 800de0a:	4613      	mov	r3, r2
 800de0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	68ba      	ldr	r2, [r7, #8]
 800de12:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	88fa      	ldrh	r2, [r7, #6]
 800de18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2200      	movs	r2, #0
 800de20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	2222      	movs	r2, #34	; 0x22
 800de28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de32:	2b00      	cmp	r3, #0
 800de34:	d02d      	beq.n	800de92 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de3c:	4a40      	ldr	r2, [pc, #256]	; (800df40 <UART_Start_Receive_DMA+0x140>)
 800de3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de46:	4a3f      	ldr	r2, [pc, #252]	; (800df44 <UART_Start_Receive_DMA+0x144>)
 800de48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de50:	4a3d      	ldr	r2, [pc, #244]	; (800df48 <UART_Start_Receive_DMA+0x148>)
 800de52:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de5a:	2200      	movs	r2, #0
 800de5c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	3324      	adds	r3, #36	; 0x24
 800de6a:	4619      	mov	r1, r3
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de70:	461a      	mov	r2, r3
 800de72:	88fb      	ldrh	r3, [r7, #6]
 800de74:	f7f7 fc2c 	bl	80056d0 <HAL_DMA_Start_IT>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d009      	beq.n	800de92 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2210      	movs	r2, #16
 800de82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	2220      	movs	r2, #32
 800de8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800de8e:	2301      	movs	r3, #1
 800de90:	e051      	b.n	800df36 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	691b      	ldr	r3, [r3, #16]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d018      	beq.n	800decc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dea2:	e853 3f00 	ldrex	r3, [r3]
 800dea6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800deae:	657b      	str	r3, [r7, #84]	; 0x54
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	461a      	mov	r2, r3
 800deb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800deb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800deba:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800debc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800debe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dec0:	e841 2300 	strex	r3, r2, [r1]
 800dec4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d1e6      	bne.n	800de9a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	3308      	adds	r3, #8
 800ded2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ded4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded6:	e853 3f00 	ldrex	r3, [r3]
 800deda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dede:	f043 0301 	orr.w	r3, r3, #1
 800dee2:	653b      	str	r3, [r7, #80]	; 0x50
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	3308      	adds	r3, #8
 800deea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800deec:	637a      	str	r2, [r7, #52]	; 0x34
 800deee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800def0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800def2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800def4:	e841 2300 	strex	r3, r2, [r1]
 800def8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800defa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defc:	2b00      	cmp	r3, #0
 800defe:	d1e5      	bne.n	800decc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	3308      	adds	r3, #8
 800df06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	e853 3f00 	ldrex	r3, [r3]
 800df0e:	613b      	str	r3, [r7, #16]
   return(result);
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df16:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	3308      	adds	r3, #8
 800df1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800df20:	623a      	str	r2, [r7, #32]
 800df22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df24:	69f9      	ldr	r1, [r7, #28]
 800df26:	6a3a      	ldr	r2, [r7, #32]
 800df28:	e841 2300 	strex	r3, r2, [r1]
 800df2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800df2e:	69bb      	ldr	r3, [r7, #24]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d1e5      	bne.n	800df00 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800df34:	2300      	movs	r3, #0
}
 800df36:	4618      	mov	r0, r3
 800df38:	3758      	adds	r7, #88	; 0x58
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop
 800df40:	0800e14f 	.word	0x0800e14f
 800df44:	0800e277 	.word	0x0800e277
 800df48:	0800e2b5 	.word	0x0800e2b5

0800df4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b08f      	sub	sp, #60	; 0x3c
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df5a:	6a3b      	ldr	r3, [r7, #32]
 800df5c:	e853 3f00 	ldrex	r3, [r3]
 800df60:	61fb      	str	r3, [r7, #28]
   return(result);
 800df62:	69fb      	ldr	r3, [r7, #28]
 800df64:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800df68:	637b      	str	r3, [r7, #52]	; 0x34
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	461a      	mov	r2, r3
 800df70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df74:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df7a:	e841 2300 	strex	r3, r2, [r1]
 800df7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df82:	2b00      	cmp	r3, #0
 800df84:	d1e6      	bne.n	800df54 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	3308      	adds	r3, #8
 800df8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	e853 3f00 	ldrex	r3, [r3]
 800df94:	60bb      	str	r3, [r7, #8]
   return(result);
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800df9c:	633b      	str	r3, [r7, #48]	; 0x30
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	3308      	adds	r3, #8
 800dfa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfa6:	61ba      	str	r2, [r7, #24]
 800dfa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfaa:	6979      	ldr	r1, [r7, #20]
 800dfac:	69ba      	ldr	r2, [r7, #24]
 800dfae:	e841 2300 	strex	r3, r2, [r1]
 800dfb2:	613b      	str	r3, [r7, #16]
   return(result);
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d1e5      	bne.n	800df86 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2220      	movs	r2, #32
 800dfbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800dfc2:	bf00      	nop
 800dfc4:	373c      	adds	r7, #60	; 0x3c
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr
	...

0800dfd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b095      	sub	sp, #84	; 0x54
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfe0:	e853 3f00 	ldrex	r3, [r3]
 800dfe4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dfec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	461a      	mov	r2, r3
 800dff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dff6:	643b      	str	r3, [r7, #64]	; 0x40
 800dff8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dffa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dffc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dffe:	e841 2300 	strex	r3, r2, [r1]
 800e002:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e006:	2b00      	cmp	r3, #0
 800e008:	d1e6      	bne.n	800dfd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	3308      	adds	r3, #8
 800e010:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e012:	6a3b      	ldr	r3, [r7, #32]
 800e014:	e853 3f00 	ldrex	r3, [r3]
 800e018:	61fb      	str	r3, [r7, #28]
   return(result);
 800e01a:	69fa      	ldr	r2, [r7, #28]
 800e01c:	4b1e      	ldr	r3, [pc, #120]	; (800e098 <UART_EndRxTransfer+0xc8>)
 800e01e:	4013      	ands	r3, r2
 800e020:	64bb      	str	r3, [r7, #72]	; 0x48
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	3308      	adds	r3, #8
 800e028:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e02a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e02c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e02e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e032:	e841 2300 	strex	r3, r2, [r1]
 800e036:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d1e5      	bne.n	800e00a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e042:	2b01      	cmp	r3, #1
 800e044:	d118      	bne.n	800e078 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	e853 3f00 	ldrex	r3, [r3]
 800e052:	60bb      	str	r3, [r7, #8]
   return(result);
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	f023 0310 	bic.w	r3, r3, #16
 800e05a:	647b      	str	r3, [r7, #68]	; 0x44
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	461a      	mov	r2, r3
 800e062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e064:	61bb      	str	r3, [r7, #24]
 800e066:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e068:	6979      	ldr	r1, [r7, #20]
 800e06a:	69ba      	ldr	r2, [r7, #24]
 800e06c:	e841 2300 	strex	r3, r2, [r1]
 800e070:	613b      	str	r3, [r7, #16]
   return(result);
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d1e6      	bne.n	800e046 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2220      	movs	r2, #32
 800e07c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2200      	movs	r2, #0
 800e084:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2200      	movs	r2, #0
 800e08a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e08c:	bf00      	nop
 800e08e:	3754      	adds	r7, #84	; 0x54
 800e090:	46bd      	mov	sp, r7
 800e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e096:	4770      	bx	lr
 800e098:	effffffe 	.word	0xeffffffe

0800e09c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b090      	sub	sp, #64	; 0x40
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0a8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	69db      	ldr	r3, [r3, #28]
 800e0ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0b2:	d037      	beq.n	800e124 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e0bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	3308      	adds	r3, #8
 800e0c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c6:	e853 3f00 	ldrex	r3, [r3]
 800e0ca:	623b      	str	r3, [r7, #32]
   return(result);
 800e0cc:	6a3b      	ldr	r3, [r7, #32]
 800e0ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e0d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	3308      	adds	r3, #8
 800e0da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e0dc:	633a      	str	r2, [r7, #48]	; 0x30
 800e0de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e0e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0e4:	e841 2300 	strex	r3, r2, [r1]
 800e0e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d1e5      	bne.n	800e0bc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e0f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	e853 3f00 	ldrex	r3, [r3]
 800e0fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e104:	637b      	str	r3, [r7, #52]	; 0x34
 800e106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	461a      	mov	r2, r3
 800e10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e10e:	61fb      	str	r3, [r7, #28]
 800e110:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e112:	69b9      	ldr	r1, [r7, #24]
 800e114:	69fa      	ldr	r2, [r7, #28]
 800e116:	e841 2300 	strex	r3, r2, [r1]
 800e11a:	617b      	str	r3, [r7, #20]
   return(result);
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d1e6      	bne.n	800e0f0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e122:	e002      	b.n	800e12a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e124:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e126:	f7f5 fb27 	bl	8003778 <HAL_UART_TxCpltCallback>
}
 800e12a:	bf00      	nop
 800e12c:	3740      	adds	r7, #64	; 0x40
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}

0800e132 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e132:	b580      	push	{r7, lr}
 800e134:	b084      	sub	sp, #16
 800e136:	af00      	add	r7, sp, #0
 800e138:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e13e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e140:	68f8      	ldr	r0, [r7, #12]
 800e142:	f7fe fe13 	bl	800cd6c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e146:	bf00      	nop
 800e148:	3710      	adds	r7, #16
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}

0800e14e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e14e:	b580      	push	{r7, lr}
 800e150:	b09c      	sub	sp, #112	; 0x70
 800e152:	af00      	add	r7, sp, #0
 800e154:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e15a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	69db      	ldr	r3, [r3, #28]
 800e160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e164:	d071      	beq.n	800e24a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e168:	2200      	movs	r2, #0
 800e16a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e16e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e176:	e853 3f00 	ldrex	r3, [r3]
 800e17a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e17c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e17e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e182:	66bb      	str	r3, [r7, #104]	; 0x68
 800e184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	461a      	mov	r2, r3
 800e18a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e18c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e18e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e190:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e192:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e194:	e841 2300 	strex	r3, r2, [r1]
 800e198:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e19a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d1e6      	bne.n	800e16e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	3308      	adds	r3, #8
 800e1a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1aa:	e853 3f00 	ldrex	r3, [r3]
 800e1ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1b2:	f023 0301 	bic.w	r3, r3, #1
 800e1b6:	667b      	str	r3, [r7, #100]	; 0x64
 800e1b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	3308      	adds	r3, #8
 800e1be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e1c0:	647a      	str	r2, [r7, #68]	; 0x44
 800e1c2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e1c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1c8:	e841 2300 	strex	r3, r2, [r1]
 800e1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e1ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d1e5      	bne.n	800e1a0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e1d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	3308      	adds	r3, #8
 800e1da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1de:	e853 3f00 	ldrex	r3, [r3]
 800e1e2:	623b      	str	r3, [r7, #32]
   return(result);
 800e1e4:	6a3b      	ldr	r3, [r7, #32]
 800e1e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e1ea:	663b      	str	r3, [r7, #96]	; 0x60
 800e1ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	3308      	adds	r3, #8
 800e1f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e1f4:	633a      	str	r2, [r7, #48]	; 0x30
 800e1f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e1fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1fc:	e841 2300 	strex	r3, r2, [r1]
 800e200:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e204:	2b00      	cmp	r3, #0
 800e206:	d1e5      	bne.n	800e1d4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e20a:	2220      	movs	r2, #32
 800e20c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e214:	2b01      	cmp	r3, #1
 800e216:	d118      	bne.n	800e24a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	e853 3f00 	ldrex	r3, [r3]
 800e224:	60fb      	str	r3, [r7, #12]
   return(result);
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f023 0310 	bic.w	r3, r3, #16
 800e22c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e22e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	461a      	mov	r2, r3
 800e234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e236:	61fb      	str	r3, [r7, #28]
 800e238:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e23a:	69b9      	ldr	r1, [r7, #24]
 800e23c:	69fa      	ldr	r2, [r7, #28]
 800e23e:	e841 2300 	strex	r3, r2, [r1]
 800e242:	617b      	str	r3, [r7, #20]
   return(result);
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d1e6      	bne.n	800e218 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e24a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e24c:	2200      	movs	r2, #0
 800e24e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e254:	2b01      	cmp	r3, #1
 800e256:	d107      	bne.n	800e268 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e25a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e25e:	4619      	mov	r1, r3
 800e260:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e262:	f7fe fda1 	bl	800cda8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e266:	e002      	b.n	800e26e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800e268:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e26a:	f7f5 fa97 	bl	800379c <HAL_UART_RxCpltCallback>
}
 800e26e:	bf00      	nop
 800e270:	3770      	adds	r7, #112	; 0x70
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}

0800e276 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e276:	b580      	push	{r7, lr}
 800e278:	b084      	sub	sp, #16
 800e27a:	af00      	add	r7, sp, #0
 800e27c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e282:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	2201      	movs	r2, #1
 800e288:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e28e:	2b01      	cmp	r3, #1
 800e290:	d109      	bne.n	800e2a6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e298:	085b      	lsrs	r3, r3, #1
 800e29a:	b29b      	uxth	r3, r3
 800e29c:	4619      	mov	r1, r3
 800e29e:	68f8      	ldr	r0, [r7, #12]
 800e2a0:	f7fe fd82 	bl	800cda8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e2a4:	e002      	b.n	800e2ac <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e2a6:	68f8      	ldr	r0, [r7, #12]
 800e2a8:	f7fe fd6a 	bl	800cd80 <HAL_UART_RxHalfCpltCallback>
}
 800e2ac:	bf00      	nop
 800e2ae:	3710      	adds	r7, #16
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b086      	sub	sp, #24
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2c0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e2d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	689b      	ldr	r3, [r3, #8]
 800e2d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2dc:	2b80      	cmp	r3, #128	; 0x80
 800e2de:	d109      	bne.n	800e2f4 <UART_DMAError+0x40>
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	2b21      	cmp	r3, #33	; 0x21
 800e2e4:	d106      	bne.n	800e2f4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e2ee:	6978      	ldr	r0, [r7, #20]
 800e2f0:	f7ff fe2c 	bl	800df4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2fe:	2b40      	cmp	r3, #64	; 0x40
 800e300:	d109      	bne.n	800e316 <UART_DMAError+0x62>
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	2b22      	cmp	r3, #34	; 0x22
 800e306:	d106      	bne.n	800e316 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	2200      	movs	r2, #0
 800e30c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e310:	6978      	ldr	r0, [r7, #20]
 800e312:	f7ff fe5d 	bl	800dfd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e31c:	f043 0210 	orr.w	r2, r3, #16
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e326:	6978      	ldr	r0, [r7, #20]
 800e328:	f7fe fd34 	bl	800cd94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e32c:	bf00      	nop
 800e32e:	3718      	adds	r7, #24
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e340:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2200      	movs	r2, #0
 800e346:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2200      	movs	r2, #0
 800e34e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e352:	68f8      	ldr	r0, [r7, #12]
 800e354:	f7fe fd1e 	bl	800cd94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e358:	bf00      	nop
 800e35a:	3710      	adds	r7, #16
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}

0800e360 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b088      	sub	sp, #32
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	e853 3f00 	ldrex	r3, [r3]
 800e374:	60bb      	str	r3, [r7, #8]
   return(result);
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e37c:	61fb      	str	r3, [r7, #28]
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	461a      	mov	r2, r3
 800e384:	69fb      	ldr	r3, [r7, #28]
 800e386:	61bb      	str	r3, [r7, #24]
 800e388:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e38a:	6979      	ldr	r1, [r7, #20]
 800e38c:	69ba      	ldr	r2, [r7, #24]
 800e38e:	e841 2300 	strex	r3, r2, [r1]
 800e392:	613b      	str	r3, [r7, #16]
   return(result);
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d1e6      	bne.n	800e368 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2220      	movs	r2, #32
 800e39e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f7f5 f9e5 	bl	8003778 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e3ae:	bf00      	nop
 800e3b0:	3720      	adds	r7, #32
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}

0800e3b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e3b6:	b480      	push	{r7}
 800e3b8:	b083      	sub	sp, #12
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e3be:	bf00      	nop
 800e3c0:	370c      	adds	r7, #12
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c8:	4770      	bx	lr

0800e3ca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e3ca:	b480      	push	{r7}
 800e3cc:	b083      	sub	sp, #12
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e3d2:	bf00      	nop
 800e3d4:	370c      	adds	r7, #12
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr

0800e3de <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e3de:	b480      	push	{r7}
 800e3e0:	b083      	sub	sp, #12
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e3e6:	bf00      	nop
 800e3e8:	370c      	adds	r7, #12
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr

0800e3f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e3f2:	b480      	push	{r7}
 800e3f4:	b085      	sub	sp, #20
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e400:	2b01      	cmp	r3, #1
 800e402:	d101      	bne.n	800e408 <HAL_UARTEx_DisableFifoMode+0x16>
 800e404:	2302      	movs	r3, #2
 800e406:	e027      	b.n	800e458 <HAL_UARTEx_DisableFifoMode+0x66>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2201      	movs	r2, #1
 800e40c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2224      	movs	r2, #36	; 0x24
 800e414:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	681a      	ldr	r2, [r3, #0]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f022 0201 	bic.w	r2, r2, #1
 800e42e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e436:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2200      	movs	r2, #0
 800e43c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	68fa      	ldr	r2, [r7, #12]
 800e444:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2220      	movs	r2, #32
 800e44a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2200      	movs	r2, #0
 800e452:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e456:	2300      	movs	r3, #0
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3714      	adds	r7, #20
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr

0800e464 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
 800e46c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e474:	2b01      	cmp	r3, #1
 800e476:	d101      	bne.n	800e47c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e478:	2302      	movs	r3, #2
 800e47a:	e02d      	b.n	800e4d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2201      	movs	r2, #1
 800e480:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2224      	movs	r2, #36	; 0x24
 800e488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	681a      	ldr	r2, [r3, #0]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	f022 0201 	bic.w	r2, r2, #1
 800e4a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	689b      	ldr	r3, [r3, #8]
 800e4aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	683a      	ldr	r2, [r7, #0]
 800e4b4:	430a      	orrs	r2, r1
 800e4b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f000 f84f 	bl	800e55c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	68fa      	ldr	r2, [r7, #12]
 800e4c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2220      	movs	r2, #32
 800e4ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e4d6:	2300      	movs	r3, #0
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3710      	adds	r7, #16
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b084      	sub	sp, #16
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	d101      	bne.n	800e4f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e4f4:	2302      	movs	r3, #2
 800e4f6:	e02d      	b.n	800e554 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2224      	movs	r2, #36	; 0x24
 800e504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	681a      	ldr	r2, [r3, #0]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f022 0201 	bic.w	r2, r2, #1
 800e51e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	689b      	ldr	r3, [r3, #8]
 800e526:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	683a      	ldr	r2, [r7, #0]
 800e530:	430a      	orrs	r2, r1
 800e532:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f000 f811 	bl	800e55c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	68fa      	ldr	r2, [r7, #12]
 800e540:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2220      	movs	r2, #32
 800e546:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2200      	movs	r2, #0
 800e54e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e552:	2300      	movs	r3, #0
}
 800e554:	4618      	mov	r0, r3
 800e556:	3710      	adds	r7, #16
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e55c:	b480      	push	{r7}
 800e55e:	b085      	sub	sp, #20
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d108      	bne.n	800e57e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2201      	movs	r2, #1
 800e570:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2201      	movs	r2, #1
 800e578:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e57c:	e031      	b.n	800e5e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e57e:	2310      	movs	r3, #16
 800e580:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e582:	2310      	movs	r3, #16
 800e584:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	689b      	ldr	r3, [r3, #8]
 800e58c:	0e5b      	lsrs	r3, r3, #25
 800e58e:	b2db      	uxtb	r3, r3
 800e590:	f003 0307 	and.w	r3, r3, #7
 800e594:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	689b      	ldr	r3, [r3, #8]
 800e59c:	0f5b      	lsrs	r3, r3, #29
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	f003 0307 	and.w	r3, r3, #7
 800e5a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e5a6:	7bbb      	ldrb	r3, [r7, #14]
 800e5a8:	7b3a      	ldrb	r2, [r7, #12]
 800e5aa:	4911      	ldr	r1, [pc, #68]	; (800e5f0 <UARTEx_SetNbDataToProcess+0x94>)
 800e5ac:	5c8a      	ldrb	r2, [r1, r2]
 800e5ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e5b2:	7b3a      	ldrb	r2, [r7, #12]
 800e5b4:	490f      	ldr	r1, [pc, #60]	; (800e5f4 <UARTEx_SetNbDataToProcess+0x98>)
 800e5b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e5b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e5bc:	b29a      	uxth	r2, r3
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e5c4:	7bfb      	ldrb	r3, [r7, #15]
 800e5c6:	7b7a      	ldrb	r2, [r7, #13]
 800e5c8:	4909      	ldr	r1, [pc, #36]	; (800e5f0 <UARTEx_SetNbDataToProcess+0x94>)
 800e5ca:	5c8a      	ldrb	r2, [r1, r2]
 800e5cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e5d0:	7b7a      	ldrb	r2, [r7, #13]
 800e5d2:	4908      	ldr	r1, [pc, #32]	; (800e5f4 <UARTEx_SetNbDataToProcess+0x98>)
 800e5d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e5d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800e5da:	b29a      	uxth	r2, r3
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e5e2:	bf00      	nop
 800e5e4:	3714      	adds	r7, #20
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ec:	4770      	bx	lr
 800e5ee:	bf00      	nop
 800e5f0:	0800ecc8 	.word	0x0800ecc8
 800e5f4:	0800ecd0 	.word	0x0800ecd0

0800e5f8 <__cxa_pure_virtual>:
 800e5f8:	b508      	push	{r3, lr}
 800e5fa:	f000 f80d 	bl	800e618 <_ZSt9terminatev>

0800e5fe <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e5fe:	b508      	push	{r3, lr}
 800e600:	4780      	blx	r0
 800e602:	f000 f80e 	bl	800e622 <abort>
	...

0800e608 <_ZSt13get_terminatev>:
 800e608:	4b02      	ldr	r3, [pc, #8]	; (800e614 <_ZSt13get_terminatev+0xc>)
 800e60a:	6818      	ldr	r0, [r3, #0]
 800e60c:	f3bf 8f5b 	dmb	ish
 800e610:	4770      	bx	lr
 800e612:	bf00      	nop
 800e614:	24000018 	.word	0x24000018

0800e618 <_ZSt9terminatev>:
 800e618:	b508      	push	{r3, lr}
 800e61a:	f7ff fff5 	bl	800e608 <_ZSt13get_terminatev>
 800e61e:	f7ff ffee 	bl	800e5fe <_ZN10__cxxabiv111__terminateEPFvvE>

0800e622 <abort>:
 800e622:	b508      	push	{r3, lr}
 800e624:	2006      	movs	r0, #6
 800e626:	f000 f873 	bl	800e710 <raise>
 800e62a:	2001      	movs	r0, #1
 800e62c:	f7f6 fa72 	bl	8004b14 <_exit>

0800e630 <__errno>:
 800e630:	4b01      	ldr	r3, [pc, #4]	; (800e638 <__errno+0x8>)
 800e632:	6818      	ldr	r0, [r3, #0]
 800e634:	4770      	bx	lr
 800e636:	bf00      	nop
 800e638:	2400001c 	.word	0x2400001c

0800e63c <__libc_init_array>:
 800e63c:	b570      	push	{r4, r5, r6, lr}
 800e63e:	4d0d      	ldr	r5, [pc, #52]	; (800e674 <__libc_init_array+0x38>)
 800e640:	4c0d      	ldr	r4, [pc, #52]	; (800e678 <__libc_init_array+0x3c>)
 800e642:	1b64      	subs	r4, r4, r5
 800e644:	10a4      	asrs	r4, r4, #2
 800e646:	2600      	movs	r6, #0
 800e648:	42a6      	cmp	r6, r4
 800e64a:	d109      	bne.n	800e660 <__libc_init_array+0x24>
 800e64c:	4d0b      	ldr	r5, [pc, #44]	; (800e67c <__libc_init_array+0x40>)
 800e64e:	4c0c      	ldr	r4, [pc, #48]	; (800e680 <__libc_init_array+0x44>)
 800e650:	f000 f9b0 	bl	800e9b4 <_init>
 800e654:	1b64      	subs	r4, r4, r5
 800e656:	10a4      	asrs	r4, r4, #2
 800e658:	2600      	movs	r6, #0
 800e65a:	42a6      	cmp	r6, r4
 800e65c:	d105      	bne.n	800e66a <__libc_init_array+0x2e>
 800e65e:	bd70      	pop	{r4, r5, r6, pc}
 800e660:	f855 3b04 	ldr.w	r3, [r5], #4
 800e664:	4798      	blx	r3
 800e666:	3601      	adds	r6, #1
 800e668:	e7ee      	b.n	800e648 <__libc_init_array+0xc>
 800e66a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e66e:	4798      	blx	r3
 800e670:	3601      	adds	r6, #1
 800e672:	e7f2      	b.n	800e65a <__libc_init_array+0x1e>
 800e674:	0800ece0 	.word	0x0800ece0
 800e678:	0800ece0 	.word	0x0800ece0
 800e67c:	0800ece0 	.word	0x0800ece0
 800e680:	0800ece8 	.word	0x0800ece8

0800e684 <memcpy>:
 800e684:	440a      	add	r2, r1
 800e686:	4291      	cmp	r1, r2
 800e688:	f100 33ff 	add.w	r3, r0, #4294967295
 800e68c:	d100      	bne.n	800e690 <memcpy+0xc>
 800e68e:	4770      	bx	lr
 800e690:	b510      	push	{r4, lr}
 800e692:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e69a:	4291      	cmp	r1, r2
 800e69c:	d1f9      	bne.n	800e692 <memcpy+0xe>
 800e69e:	bd10      	pop	{r4, pc}

0800e6a0 <memset>:
 800e6a0:	4402      	add	r2, r0
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	4293      	cmp	r3, r2
 800e6a6:	d100      	bne.n	800e6aa <memset+0xa>
 800e6a8:	4770      	bx	lr
 800e6aa:	f803 1b01 	strb.w	r1, [r3], #1
 800e6ae:	e7f9      	b.n	800e6a4 <memset+0x4>

0800e6b0 <realloc>:
 800e6b0:	4b02      	ldr	r3, [pc, #8]	; (800e6bc <realloc+0xc>)
 800e6b2:	460a      	mov	r2, r1
 800e6b4:	4601      	mov	r1, r0
 800e6b6:	6818      	ldr	r0, [r3, #0]
 800e6b8:	f000 b8da 	b.w	800e870 <_realloc_r>
 800e6bc:	2400001c 	.word	0x2400001c

0800e6c0 <_raise_r>:
 800e6c0:	291f      	cmp	r1, #31
 800e6c2:	b538      	push	{r3, r4, r5, lr}
 800e6c4:	4604      	mov	r4, r0
 800e6c6:	460d      	mov	r5, r1
 800e6c8:	d904      	bls.n	800e6d4 <_raise_r+0x14>
 800e6ca:	2316      	movs	r3, #22
 800e6cc:	6003      	str	r3, [r0, #0]
 800e6ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e6d2:	bd38      	pop	{r3, r4, r5, pc}
 800e6d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e6d6:	b112      	cbz	r2, 800e6de <_raise_r+0x1e>
 800e6d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6dc:	b94b      	cbnz	r3, 800e6f2 <_raise_r+0x32>
 800e6de:	4620      	mov	r0, r4
 800e6e0:	f000 f830 	bl	800e744 <_getpid_r>
 800e6e4:	462a      	mov	r2, r5
 800e6e6:	4601      	mov	r1, r0
 800e6e8:	4620      	mov	r0, r4
 800e6ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6ee:	f000 b817 	b.w	800e720 <_kill_r>
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d00a      	beq.n	800e70c <_raise_r+0x4c>
 800e6f6:	1c59      	adds	r1, r3, #1
 800e6f8:	d103      	bne.n	800e702 <_raise_r+0x42>
 800e6fa:	2316      	movs	r3, #22
 800e6fc:	6003      	str	r3, [r0, #0]
 800e6fe:	2001      	movs	r0, #1
 800e700:	e7e7      	b.n	800e6d2 <_raise_r+0x12>
 800e702:	2400      	movs	r4, #0
 800e704:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e708:	4628      	mov	r0, r5
 800e70a:	4798      	blx	r3
 800e70c:	2000      	movs	r0, #0
 800e70e:	e7e0      	b.n	800e6d2 <_raise_r+0x12>

0800e710 <raise>:
 800e710:	4b02      	ldr	r3, [pc, #8]	; (800e71c <raise+0xc>)
 800e712:	4601      	mov	r1, r0
 800e714:	6818      	ldr	r0, [r3, #0]
 800e716:	f7ff bfd3 	b.w	800e6c0 <_raise_r>
 800e71a:	bf00      	nop
 800e71c:	2400001c 	.word	0x2400001c

0800e720 <_kill_r>:
 800e720:	b538      	push	{r3, r4, r5, lr}
 800e722:	4d07      	ldr	r5, [pc, #28]	; (800e740 <_kill_r+0x20>)
 800e724:	2300      	movs	r3, #0
 800e726:	4604      	mov	r4, r0
 800e728:	4608      	mov	r0, r1
 800e72a:	4611      	mov	r1, r2
 800e72c:	602b      	str	r3, [r5, #0]
 800e72e:	f7f6 f9e1 	bl	8004af4 <_kill>
 800e732:	1c43      	adds	r3, r0, #1
 800e734:	d102      	bne.n	800e73c <_kill_r+0x1c>
 800e736:	682b      	ldr	r3, [r5, #0]
 800e738:	b103      	cbz	r3, 800e73c <_kill_r+0x1c>
 800e73a:	6023      	str	r3, [r4, #0]
 800e73c:	bd38      	pop	{r3, r4, r5, pc}
 800e73e:	bf00      	nop
 800e740:	24000fa8 	.word	0x24000fa8

0800e744 <_getpid_r>:
 800e744:	f7f6 b9ce 	b.w	8004ae4 <_getpid>

0800e748 <sbrk_aligned>:
 800e748:	b570      	push	{r4, r5, r6, lr}
 800e74a:	4e0e      	ldr	r6, [pc, #56]	; (800e784 <sbrk_aligned+0x3c>)
 800e74c:	460c      	mov	r4, r1
 800e74e:	6831      	ldr	r1, [r6, #0]
 800e750:	4605      	mov	r5, r0
 800e752:	b911      	cbnz	r1, 800e75a <sbrk_aligned+0x12>
 800e754:	f000 f8bc 	bl	800e8d0 <_sbrk_r>
 800e758:	6030      	str	r0, [r6, #0]
 800e75a:	4621      	mov	r1, r4
 800e75c:	4628      	mov	r0, r5
 800e75e:	f000 f8b7 	bl	800e8d0 <_sbrk_r>
 800e762:	1c43      	adds	r3, r0, #1
 800e764:	d00a      	beq.n	800e77c <sbrk_aligned+0x34>
 800e766:	1cc4      	adds	r4, r0, #3
 800e768:	f024 0403 	bic.w	r4, r4, #3
 800e76c:	42a0      	cmp	r0, r4
 800e76e:	d007      	beq.n	800e780 <sbrk_aligned+0x38>
 800e770:	1a21      	subs	r1, r4, r0
 800e772:	4628      	mov	r0, r5
 800e774:	f000 f8ac 	bl	800e8d0 <_sbrk_r>
 800e778:	3001      	adds	r0, #1
 800e77a:	d101      	bne.n	800e780 <sbrk_aligned+0x38>
 800e77c:	f04f 34ff 	mov.w	r4, #4294967295
 800e780:	4620      	mov	r0, r4
 800e782:	bd70      	pop	{r4, r5, r6, pc}
 800e784:	24000fa4 	.word	0x24000fa4

0800e788 <_malloc_r>:
 800e788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e78c:	1ccd      	adds	r5, r1, #3
 800e78e:	f025 0503 	bic.w	r5, r5, #3
 800e792:	3508      	adds	r5, #8
 800e794:	2d0c      	cmp	r5, #12
 800e796:	bf38      	it	cc
 800e798:	250c      	movcc	r5, #12
 800e79a:	2d00      	cmp	r5, #0
 800e79c:	4607      	mov	r7, r0
 800e79e:	db01      	blt.n	800e7a4 <_malloc_r+0x1c>
 800e7a0:	42a9      	cmp	r1, r5
 800e7a2:	d905      	bls.n	800e7b0 <_malloc_r+0x28>
 800e7a4:	230c      	movs	r3, #12
 800e7a6:	603b      	str	r3, [r7, #0]
 800e7a8:	2600      	movs	r6, #0
 800e7aa:	4630      	mov	r0, r6
 800e7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7b0:	4e2e      	ldr	r6, [pc, #184]	; (800e86c <_malloc_r+0xe4>)
 800e7b2:	f000 f89d 	bl	800e8f0 <__malloc_lock>
 800e7b6:	6833      	ldr	r3, [r6, #0]
 800e7b8:	461c      	mov	r4, r3
 800e7ba:	bb34      	cbnz	r4, 800e80a <_malloc_r+0x82>
 800e7bc:	4629      	mov	r1, r5
 800e7be:	4638      	mov	r0, r7
 800e7c0:	f7ff ffc2 	bl	800e748 <sbrk_aligned>
 800e7c4:	1c43      	adds	r3, r0, #1
 800e7c6:	4604      	mov	r4, r0
 800e7c8:	d14d      	bne.n	800e866 <_malloc_r+0xde>
 800e7ca:	6834      	ldr	r4, [r6, #0]
 800e7cc:	4626      	mov	r6, r4
 800e7ce:	2e00      	cmp	r6, #0
 800e7d0:	d140      	bne.n	800e854 <_malloc_r+0xcc>
 800e7d2:	6823      	ldr	r3, [r4, #0]
 800e7d4:	4631      	mov	r1, r6
 800e7d6:	4638      	mov	r0, r7
 800e7d8:	eb04 0803 	add.w	r8, r4, r3
 800e7dc:	f000 f878 	bl	800e8d0 <_sbrk_r>
 800e7e0:	4580      	cmp	r8, r0
 800e7e2:	d13a      	bne.n	800e85a <_malloc_r+0xd2>
 800e7e4:	6821      	ldr	r1, [r4, #0]
 800e7e6:	3503      	adds	r5, #3
 800e7e8:	1a6d      	subs	r5, r5, r1
 800e7ea:	f025 0503 	bic.w	r5, r5, #3
 800e7ee:	3508      	adds	r5, #8
 800e7f0:	2d0c      	cmp	r5, #12
 800e7f2:	bf38      	it	cc
 800e7f4:	250c      	movcc	r5, #12
 800e7f6:	4629      	mov	r1, r5
 800e7f8:	4638      	mov	r0, r7
 800e7fa:	f7ff ffa5 	bl	800e748 <sbrk_aligned>
 800e7fe:	3001      	adds	r0, #1
 800e800:	d02b      	beq.n	800e85a <_malloc_r+0xd2>
 800e802:	6823      	ldr	r3, [r4, #0]
 800e804:	442b      	add	r3, r5
 800e806:	6023      	str	r3, [r4, #0]
 800e808:	e00e      	b.n	800e828 <_malloc_r+0xa0>
 800e80a:	6822      	ldr	r2, [r4, #0]
 800e80c:	1b52      	subs	r2, r2, r5
 800e80e:	d41e      	bmi.n	800e84e <_malloc_r+0xc6>
 800e810:	2a0b      	cmp	r2, #11
 800e812:	d916      	bls.n	800e842 <_malloc_r+0xba>
 800e814:	1961      	adds	r1, r4, r5
 800e816:	42a3      	cmp	r3, r4
 800e818:	6025      	str	r5, [r4, #0]
 800e81a:	bf18      	it	ne
 800e81c:	6059      	strne	r1, [r3, #4]
 800e81e:	6863      	ldr	r3, [r4, #4]
 800e820:	bf08      	it	eq
 800e822:	6031      	streq	r1, [r6, #0]
 800e824:	5162      	str	r2, [r4, r5]
 800e826:	604b      	str	r3, [r1, #4]
 800e828:	4638      	mov	r0, r7
 800e82a:	f104 060b 	add.w	r6, r4, #11
 800e82e:	f000 f865 	bl	800e8fc <__malloc_unlock>
 800e832:	f026 0607 	bic.w	r6, r6, #7
 800e836:	1d23      	adds	r3, r4, #4
 800e838:	1af2      	subs	r2, r6, r3
 800e83a:	d0b6      	beq.n	800e7aa <_malloc_r+0x22>
 800e83c:	1b9b      	subs	r3, r3, r6
 800e83e:	50a3      	str	r3, [r4, r2]
 800e840:	e7b3      	b.n	800e7aa <_malloc_r+0x22>
 800e842:	6862      	ldr	r2, [r4, #4]
 800e844:	42a3      	cmp	r3, r4
 800e846:	bf0c      	ite	eq
 800e848:	6032      	streq	r2, [r6, #0]
 800e84a:	605a      	strne	r2, [r3, #4]
 800e84c:	e7ec      	b.n	800e828 <_malloc_r+0xa0>
 800e84e:	4623      	mov	r3, r4
 800e850:	6864      	ldr	r4, [r4, #4]
 800e852:	e7b2      	b.n	800e7ba <_malloc_r+0x32>
 800e854:	4634      	mov	r4, r6
 800e856:	6876      	ldr	r6, [r6, #4]
 800e858:	e7b9      	b.n	800e7ce <_malloc_r+0x46>
 800e85a:	230c      	movs	r3, #12
 800e85c:	603b      	str	r3, [r7, #0]
 800e85e:	4638      	mov	r0, r7
 800e860:	f000 f84c 	bl	800e8fc <__malloc_unlock>
 800e864:	e7a1      	b.n	800e7aa <_malloc_r+0x22>
 800e866:	6025      	str	r5, [r4, #0]
 800e868:	e7de      	b.n	800e828 <_malloc_r+0xa0>
 800e86a:	bf00      	nop
 800e86c:	24000fa0 	.word	0x24000fa0

0800e870 <_realloc_r>:
 800e870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e874:	4680      	mov	r8, r0
 800e876:	4614      	mov	r4, r2
 800e878:	460e      	mov	r6, r1
 800e87a:	b921      	cbnz	r1, 800e886 <_realloc_r+0x16>
 800e87c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e880:	4611      	mov	r1, r2
 800e882:	f7ff bf81 	b.w	800e788 <_malloc_r>
 800e886:	b92a      	cbnz	r2, 800e894 <_realloc_r+0x24>
 800e888:	f000 f83e 	bl	800e908 <_free_r>
 800e88c:	4625      	mov	r5, r4
 800e88e:	4628      	mov	r0, r5
 800e890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e894:	f000 f884 	bl	800e9a0 <_malloc_usable_size_r>
 800e898:	4284      	cmp	r4, r0
 800e89a:	4607      	mov	r7, r0
 800e89c:	d802      	bhi.n	800e8a4 <_realloc_r+0x34>
 800e89e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e8a2:	d812      	bhi.n	800e8ca <_realloc_r+0x5a>
 800e8a4:	4621      	mov	r1, r4
 800e8a6:	4640      	mov	r0, r8
 800e8a8:	f7ff ff6e 	bl	800e788 <_malloc_r>
 800e8ac:	4605      	mov	r5, r0
 800e8ae:	2800      	cmp	r0, #0
 800e8b0:	d0ed      	beq.n	800e88e <_realloc_r+0x1e>
 800e8b2:	42bc      	cmp	r4, r7
 800e8b4:	4622      	mov	r2, r4
 800e8b6:	4631      	mov	r1, r6
 800e8b8:	bf28      	it	cs
 800e8ba:	463a      	movcs	r2, r7
 800e8bc:	f7ff fee2 	bl	800e684 <memcpy>
 800e8c0:	4631      	mov	r1, r6
 800e8c2:	4640      	mov	r0, r8
 800e8c4:	f000 f820 	bl	800e908 <_free_r>
 800e8c8:	e7e1      	b.n	800e88e <_realloc_r+0x1e>
 800e8ca:	4635      	mov	r5, r6
 800e8cc:	e7df      	b.n	800e88e <_realloc_r+0x1e>
	...

0800e8d0 <_sbrk_r>:
 800e8d0:	b538      	push	{r3, r4, r5, lr}
 800e8d2:	4d06      	ldr	r5, [pc, #24]	; (800e8ec <_sbrk_r+0x1c>)
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	4608      	mov	r0, r1
 800e8da:	602b      	str	r3, [r5, #0]
 800e8dc:	f7f6 f924 	bl	8004b28 <_sbrk>
 800e8e0:	1c43      	adds	r3, r0, #1
 800e8e2:	d102      	bne.n	800e8ea <_sbrk_r+0x1a>
 800e8e4:	682b      	ldr	r3, [r5, #0]
 800e8e6:	b103      	cbz	r3, 800e8ea <_sbrk_r+0x1a>
 800e8e8:	6023      	str	r3, [r4, #0]
 800e8ea:	bd38      	pop	{r3, r4, r5, pc}
 800e8ec:	24000fa8 	.word	0x24000fa8

0800e8f0 <__malloc_lock>:
 800e8f0:	4801      	ldr	r0, [pc, #4]	; (800e8f8 <__malloc_lock+0x8>)
 800e8f2:	f000 b85d 	b.w	800e9b0 <__retarget_lock_acquire_recursive>
 800e8f6:	bf00      	nop
 800e8f8:	24000fac 	.word	0x24000fac

0800e8fc <__malloc_unlock>:
 800e8fc:	4801      	ldr	r0, [pc, #4]	; (800e904 <__malloc_unlock+0x8>)
 800e8fe:	f000 b858 	b.w	800e9b2 <__retarget_lock_release_recursive>
 800e902:	bf00      	nop
 800e904:	24000fac 	.word	0x24000fac

0800e908 <_free_r>:
 800e908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e90a:	2900      	cmp	r1, #0
 800e90c:	d044      	beq.n	800e998 <_free_r+0x90>
 800e90e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e912:	9001      	str	r0, [sp, #4]
 800e914:	2b00      	cmp	r3, #0
 800e916:	f1a1 0404 	sub.w	r4, r1, #4
 800e91a:	bfb8      	it	lt
 800e91c:	18e4      	addlt	r4, r4, r3
 800e91e:	f7ff ffe7 	bl	800e8f0 <__malloc_lock>
 800e922:	4a1e      	ldr	r2, [pc, #120]	; (800e99c <_free_r+0x94>)
 800e924:	9801      	ldr	r0, [sp, #4]
 800e926:	6813      	ldr	r3, [r2, #0]
 800e928:	b933      	cbnz	r3, 800e938 <_free_r+0x30>
 800e92a:	6063      	str	r3, [r4, #4]
 800e92c:	6014      	str	r4, [r2, #0]
 800e92e:	b003      	add	sp, #12
 800e930:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e934:	f7ff bfe2 	b.w	800e8fc <__malloc_unlock>
 800e938:	42a3      	cmp	r3, r4
 800e93a:	d908      	bls.n	800e94e <_free_r+0x46>
 800e93c:	6825      	ldr	r5, [r4, #0]
 800e93e:	1961      	adds	r1, r4, r5
 800e940:	428b      	cmp	r3, r1
 800e942:	bf01      	itttt	eq
 800e944:	6819      	ldreq	r1, [r3, #0]
 800e946:	685b      	ldreq	r3, [r3, #4]
 800e948:	1949      	addeq	r1, r1, r5
 800e94a:	6021      	streq	r1, [r4, #0]
 800e94c:	e7ed      	b.n	800e92a <_free_r+0x22>
 800e94e:	461a      	mov	r2, r3
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	b10b      	cbz	r3, 800e958 <_free_r+0x50>
 800e954:	42a3      	cmp	r3, r4
 800e956:	d9fa      	bls.n	800e94e <_free_r+0x46>
 800e958:	6811      	ldr	r1, [r2, #0]
 800e95a:	1855      	adds	r5, r2, r1
 800e95c:	42a5      	cmp	r5, r4
 800e95e:	d10b      	bne.n	800e978 <_free_r+0x70>
 800e960:	6824      	ldr	r4, [r4, #0]
 800e962:	4421      	add	r1, r4
 800e964:	1854      	adds	r4, r2, r1
 800e966:	42a3      	cmp	r3, r4
 800e968:	6011      	str	r1, [r2, #0]
 800e96a:	d1e0      	bne.n	800e92e <_free_r+0x26>
 800e96c:	681c      	ldr	r4, [r3, #0]
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	6053      	str	r3, [r2, #4]
 800e972:	4421      	add	r1, r4
 800e974:	6011      	str	r1, [r2, #0]
 800e976:	e7da      	b.n	800e92e <_free_r+0x26>
 800e978:	d902      	bls.n	800e980 <_free_r+0x78>
 800e97a:	230c      	movs	r3, #12
 800e97c:	6003      	str	r3, [r0, #0]
 800e97e:	e7d6      	b.n	800e92e <_free_r+0x26>
 800e980:	6825      	ldr	r5, [r4, #0]
 800e982:	1961      	adds	r1, r4, r5
 800e984:	428b      	cmp	r3, r1
 800e986:	bf04      	itt	eq
 800e988:	6819      	ldreq	r1, [r3, #0]
 800e98a:	685b      	ldreq	r3, [r3, #4]
 800e98c:	6063      	str	r3, [r4, #4]
 800e98e:	bf04      	itt	eq
 800e990:	1949      	addeq	r1, r1, r5
 800e992:	6021      	streq	r1, [r4, #0]
 800e994:	6054      	str	r4, [r2, #4]
 800e996:	e7ca      	b.n	800e92e <_free_r+0x26>
 800e998:	b003      	add	sp, #12
 800e99a:	bd30      	pop	{r4, r5, pc}
 800e99c:	24000fa0 	.word	0x24000fa0

0800e9a0 <_malloc_usable_size_r>:
 800e9a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9a4:	1f18      	subs	r0, r3, #4
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	bfbc      	itt	lt
 800e9aa:	580b      	ldrlt	r3, [r1, r0]
 800e9ac:	18c0      	addlt	r0, r0, r3
 800e9ae:	4770      	bx	lr

0800e9b0 <__retarget_lock_acquire_recursive>:
 800e9b0:	4770      	bx	lr

0800e9b2 <__retarget_lock_release_recursive>:
 800e9b2:	4770      	bx	lr

0800e9b4 <_init>:
 800e9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9b6:	bf00      	nop
 800e9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9ba:	bc08      	pop	{r3}
 800e9bc:	469e      	mov	lr, r3
 800e9be:	4770      	bx	lr

0800e9c0 <_fini>:
 800e9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9c2:	bf00      	nop
 800e9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9c6:	bc08      	pop	{r3}
 800e9c8:	469e      	mov	lr, r3
 800e9ca:	4770      	bx	lr
