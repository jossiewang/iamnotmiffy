
0527_peanuts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d958  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  0800dc24  0800dc24  0001dc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800df24  0800df24  0001df24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800df2c  0800df2c  0001df2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800df34  0800df34  0001df34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800df38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000db0  24000078  0800dfb0  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000e28  0800dfb0  00020e28  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f468  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003361  00000000  00000000  0003f50e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001458  00000000  00000000  00042870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001368  00000000  00000000  00043cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034ec6  00000000  00000000  00045030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a7c4  00000000  00000000  00079ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001533c3  00000000  00000000  000946ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e7a7d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005bc0  00000000  00000000  001e7ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000078 	.word	0x24000078
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800dc0c 	.word	0x0800dc0c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400007c 	.word	0x2400007c
 8000308:	0800dc0c 	.word	0x0800dc0c

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295
 800032c:	f04f 30ff 	movne.w	r0, #4294967295
 8000330:	f000 b974 	b.w	800061c <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9d08      	ldr	r5, [sp, #32]
 8000352:	4604      	mov	r4, r0
 8000354:	468e      	mov	lr, r1
 8000356:	2b00      	cmp	r3, #0
 8000358:	d14d      	bne.n	80003f6 <__udivmoddi4+0xaa>
 800035a:	428a      	cmp	r2, r1
 800035c:	4694      	mov	ip, r2
 800035e:	d969      	bls.n	8000434 <__udivmoddi4+0xe8>
 8000360:	fab2 f282 	clz	r2, r2
 8000364:	b152      	cbz	r2, 800037c <__udivmoddi4+0x30>
 8000366:	fa01 f302 	lsl.w	r3, r1, r2
 800036a:	f1c2 0120 	rsb	r1, r2, #32
 800036e:	fa20 f101 	lsr.w	r1, r0, r1
 8000372:	fa0c fc02 	lsl.w	ip, ip, r2
 8000376:	ea41 0e03 	orr.w	lr, r1, r3
 800037a:	4094      	lsls	r4, r2
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	0c21      	lsrs	r1, r4, #16
 8000382:	fbbe f6f8 	udiv	r6, lr, r8
 8000386:	fa1f f78c 	uxth.w	r7, ip
 800038a:	fb08 e316 	mls	r3, r8, r6, lr
 800038e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000392:	fb06 f107 	mul.w	r1, r6, r7
 8000396:	4299      	cmp	r1, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x64>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 811f 	bcs.w	80005e4 <__udivmoddi4+0x298>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 811c 	bls.w	80005e4 <__udivmoddi4+0x298>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	4463      	add	r3, ip
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 f707 	mul.w	r7, r0, r7
 80003c4:	42a7      	cmp	r7, r4
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x92>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	f080 810a 	bcs.w	80005e8 <__udivmoddi4+0x29c>
 80003d4:	42a7      	cmp	r7, r4
 80003d6:	f240 8107 	bls.w	80005e8 <__udivmoddi4+0x29c>
 80003da:	4464      	add	r4, ip
 80003dc:	3802      	subs	r0, #2
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	1be4      	subs	r4, r4, r7
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa4>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0xc2>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80ef 	beq.w	80005de <__udivmoddi4+0x292>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x160>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0xd4>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80f9 	bhi.w	8000612 <__udivmoddi4+0x2c6>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0303 	sbc.w	r3, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	469e      	mov	lr, r3
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0e0      	beq.n	80003f0 <__udivmoddi4+0xa4>
 800042e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000432:	e7dd      	b.n	80003f0 <__udivmoddi4+0xa4>
 8000434:	b902      	cbnz	r2, 8000438 <__udivmoddi4+0xec>
 8000436:	deff      	udf	#255	; 0xff
 8000438:	fab2 f282 	clz	r2, r2
 800043c:	2a00      	cmp	r2, #0
 800043e:	f040 8092 	bne.w	8000566 <__udivmoddi4+0x21a>
 8000442:	eba1 010c 	sub.w	r1, r1, ip
 8000446:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	2601      	movs	r6, #1
 8000450:	0c20      	lsrs	r0, r4, #16
 8000452:	fbb1 f3f7 	udiv	r3, r1, r7
 8000456:	fb07 1113 	mls	r1, r7, r3, r1
 800045a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800045e:	fb0e f003 	mul.w	r0, lr, r3
 8000462:	4288      	cmp	r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x12c>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f103 38ff 	add.w	r8, r3, #4294967295
 800046e:	d202      	bcs.n	8000476 <__udivmoddi4+0x12a>
 8000470:	4288      	cmp	r0, r1
 8000472:	f200 80cb 	bhi.w	800060c <__udivmoddi4+0x2c0>
 8000476:	4643      	mov	r3, r8
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1110 	mls	r1, r7, r0, r1
 8000484:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000488:	fb0e fe00 	mul.w	lr, lr, r0
 800048c:	45a6      	cmp	lr, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x156>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f100 31ff 	add.w	r1, r0, #4294967295
 8000498:	d202      	bcs.n	80004a0 <__udivmoddi4+0x154>
 800049a:	45a6      	cmp	lr, r4
 800049c:	f200 80bb 	bhi.w	8000616 <__udivmoddi4+0x2ca>
 80004a0:	4608      	mov	r0, r1
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004aa:	e79c      	b.n	80003e6 <__udivmoddi4+0x9a>
 80004ac:	f1c6 0720 	rsb	r7, r6, #32
 80004b0:	40b3      	lsls	r3, r6
 80004b2:	fa22 fc07 	lsr.w	ip, r2, r7
 80004b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ba:	fa20 f407 	lsr.w	r4, r0, r7
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	431c      	orrs	r4, r3
 80004c4:	40f9      	lsrs	r1, r7
 80004c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ca:	fa00 f306 	lsl.w	r3, r0, r6
 80004ce:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d2:	0c20      	lsrs	r0, r4, #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fb09 1118 	mls	r1, r9, r8, r1
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	fb08 f00e 	mul.w	r0, r8, lr
 80004e4:	4288      	cmp	r0, r1
 80004e6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ea:	d90b      	bls.n	8000504 <__udivmoddi4+0x1b8>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f4:	f080 8088 	bcs.w	8000608 <__udivmoddi4+0x2bc>
 80004f8:	4288      	cmp	r0, r1
 80004fa:	f240 8085 	bls.w	8000608 <__udivmoddi4+0x2bc>
 80004fe:	f1a8 0802 	sub.w	r8, r8, #2
 8000502:	4461      	add	r1, ip
 8000504:	1a09      	subs	r1, r1, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb1 f0f9 	udiv	r0, r1, r9
 800050c:	fb09 1110 	mls	r1, r9, r0, r1
 8000510:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000514:	fb00 fe0e 	mul.w	lr, r0, lr
 8000518:	458e      	cmp	lr, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x1e2>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f100 34ff 	add.w	r4, r0, #4294967295
 8000524:	d26c      	bcs.n	8000600 <__udivmoddi4+0x2b4>
 8000526:	458e      	cmp	lr, r1
 8000528:	d96a      	bls.n	8000600 <__udivmoddi4+0x2b4>
 800052a:	3802      	subs	r0, #2
 800052c:	4461      	add	r1, ip
 800052e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000532:	fba0 9402 	umull	r9, r4, r0, r2
 8000536:	eba1 010e 	sub.w	r1, r1, lr
 800053a:	42a1      	cmp	r1, r4
 800053c:	46c8      	mov	r8, r9
 800053e:	46a6      	mov	lr, r4
 8000540:	d356      	bcc.n	80005f0 <__udivmoddi4+0x2a4>
 8000542:	d053      	beq.n	80005ec <__udivmoddi4+0x2a0>
 8000544:	b15d      	cbz	r5, 800055e <__udivmoddi4+0x212>
 8000546:	ebb3 0208 	subs.w	r2, r3, r8
 800054a:	eb61 010e 	sbc.w	r1, r1, lr
 800054e:	fa01 f707 	lsl.w	r7, r1, r7
 8000552:	fa22 f306 	lsr.w	r3, r2, r6
 8000556:	40f1      	lsrs	r1, r6
 8000558:	431f      	orrs	r7, r3
 800055a:	e9c5 7100 	strd	r7, r1, [r5]
 800055e:	2600      	movs	r6, #0
 8000560:	4631      	mov	r1, r6
 8000562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000566:	f1c2 0320 	rsb	r3, r2, #32
 800056a:	40d8      	lsrs	r0, r3
 800056c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000570:	fa21 f303 	lsr.w	r3, r1, r3
 8000574:	4091      	lsls	r1, r2
 8000576:	4301      	orrs	r1, r0
 8000578:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800057c:	fa1f fe8c 	uxth.w	lr, ip
 8000580:	fbb3 f0f7 	udiv	r0, r3, r7
 8000584:	fb07 3610 	mls	r6, r7, r0, r3
 8000588:	0c0b      	lsrs	r3, r1, #16
 800058a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800058e:	fb00 f60e 	mul.w	r6, r0, lr
 8000592:	429e      	cmp	r6, r3
 8000594:	fa04 f402 	lsl.w	r4, r4, r2
 8000598:	d908      	bls.n	80005ac <__udivmoddi4+0x260>
 800059a:	eb1c 0303 	adds.w	r3, ip, r3
 800059e:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a2:	d22f      	bcs.n	8000604 <__udivmoddi4+0x2b8>
 80005a4:	429e      	cmp	r6, r3
 80005a6:	d92d      	bls.n	8000604 <__udivmoddi4+0x2b8>
 80005a8:	3802      	subs	r0, #2
 80005aa:	4463      	add	r3, ip
 80005ac:	1b9b      	subs	r3, r3, r6
 80005ae:	b289      	uxth	r1, r1
 80005b0:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b4:	fb07 3316 	mls	r3, r7, r6, r3
 80005b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005bc:	fb06 f30e 	mul.w	r3, r6, lr
 80005c0:	428b      	cmp	r3, r1
 80005c2:	d908      	bls.n	80005d6 <__udivmoddi4+0x28a>
 80005c4:	eb1c 0101 	adds.w	r1, ip, r1
 80005c8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005cc:	d216      	bcs.n	80005fc <__udivmoddi4+0x2b0>
 80005ce:	428b      	cmp	r3, r1
 80005d0:	d914      	bls.n	80005fc <__udivmoddi4+0x2b0>
 80005d2:	3e02      	subs	r6, #2
 80005d4:	4461      	add	r1, ip
 80005d6:	1ac9      	subs	r1, r1, r3
 80005d8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005dc:	e738      	b.n	8000450 <__udivmoddi4+0x104>
 80005de:	462e      	mov	r6, r5
 80005e0:	4628      	mov	r0, r5
 80005e2:	e705      	b.n	80003f0 <__udivmoddi4+0xa4>
 80005e4:	4606      	mov	r6, r0
 80005e6:	e6e3      	b.n	80003b0 <__udivmoddi4+0x64>
 80005e8:	4618      	mov	r0, r3
 80005ea:	e6f8      	b.n	80003de <__udivmoddi4+0x92>
 80005ec:	454b      	cmp	r3, r9
 80005ee:	d2a9      	bcs.n	8000544 <__udivmoddi4+0x1f8>
 80005f0:	ebb9 0802 	subs.w	r8, r9, r2
 80005f4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005f8:	3801      	subs	r0, #1
 80005fa:	e7a3      	b.n	8000544 <__udivmoddi4+0x1f8>
 80005fc:	4646      	mov	r6, r8
 80005fe:	e7ea      	b.n	80005d6 <__udivmoddi4+0x28a>
 8000600:	4620      	mov	r0, r4
 8000602:	e794      	b.n	800052e <__udivmoddi4+0x1e2>
 8000604:	4640      	mov	r0, r8
 8000606:	e7d1      	b.n	80005ac <__udivmoddi4+0x260>
 8000608:	46d0      	mov	r8, sl
 800060a:	e77b      	b.n	8000504 <__udivmoddi4+0x1b8>
 800060c:	3b02      	subs	r3, #2
 800060e:	4461      	add	r1, ip
 8000610:	e732      	b.n	8000478 <__udivmoddi4+0x12c>
 8000612:	4630      	mov	r0, r6
 8000614:	e709      	b.n	800042a <__udivmoddi4+0xde>
 8000616:	4464      	add	r4, ip
 8000618:	3802      	subs	r0, #2
 800061a:	e742      	b.n	80004a2 <__udivmoddi4+0x156>

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	0a5a      	lsrs	r2, r3, #9
 8000630:	490f      	ldr	r1, [pc, #60]	; (8000670 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000632:	fba1 1202 	umull	r1, r2, r1, r2
 8000636:	09d2      	lsrs	r2, r2, #7
 8000638:	490e      	ldr	r1, [pc, #56]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063a:	fb01 f202 	mul.w	r2, r1, r2
 800063e:	1a9b      	subs	r3, r3, r2
 8000640:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	0a5b      	lsrs	r3, r3, #9
 8000648:	4a09      	ldr	r2, [pc, #36]	; (8000670 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064a:	fba2 2303 	umull	r2, r3, r2, r3
 800064e:	09db      	lsrs	r3, r3, #7
 8000650:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	441a      	add	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	68fa      	ldr	r2, [r7, #12]
 8000662:	601a      	str	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	00044b83 	.word	0x00044b83
 8000674:	3b9aca00 	.word	0x3b9aca00

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f003 fc4e 	bl	8003f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f84a 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f000 fb74 	bl	8000d70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000688:	f000 fb4a 	bl	8000d20 <MX_DMA_Init>
  MX_TIM2_Init();
 800068c:	f000 f910 	bl	80008b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000690:	f000 f972 	bl	8000978 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000694:	f000 f9be 	bl	8000a14 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000698:	f000 fa12 	bl	8000ac0 <MX_TIM8_Init>
  MX_TIM23_Init();
 800069c:	f000 fa9e 	bl	8000bdc <MX_TIM23_Init>
  MX_USART3_UART_Init();
 80006a0:	f000 faf2 	bl	8000c88 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80006a4:	f000 f8aa 	bl	80007fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim3);
 80006a8:	4815      	ldr	r0, [pc, #84]	; (8000700 <main+0x88>)
 80006aa:	f009 fb8f 	bl	8009dcc <HAL_TIM_Base_Start_IT>
    HAL_TIM_Encoder_Start(TIM_ENC_MF, TIM_CHANNEL_1);
 80006ae:	2100      	movs	r1, #0
 80006b0:	4814      	ldr	r0, [pc, #80]	; (8000704 <main+0x8c>)
 80006b2:	f009 fe2b 	bl	800a30c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_MF, TIM_CHANNEL_2);
 80006b6:	2104      	movs	r1, #4
 80006b8:	4812      	ldr	r0, [pc, #72]	; (8000704 <main+0x8c>)
 80006ba:	f009 fe27 	bl	800a30c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_ML, TIM_CHANNEL_1);
 80006be:	2100      	movs	r1, #0
 80006c0:	4811      	ldr	r0, [pc, #68]	; (8000708 <main+0x90>)
 80006c2:	f009 fe23 	bl	800a30c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_ML, TIM_CHANNEL_2);
 80006c6:	2104      	movs	r1, #4
 80006c8:	480f      	ldr	r0, [pc, #60]	; (8000708 <main+0x90>)
 80006ca:	f009 fe1f 	bl	800a30c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_MR, TIM_CHANNEL_1);
 80006ce:	2100      	movs	r1, #0
 80006d0:	480e      	ldr	r0, [pc, #56]	; (800070c <main+0x94>)
 80006d2:	f009 fe1b 	bl	800a30c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_MR, TIM_CHANNEL_2);
 80006d6:	2104      	movs	r1, #4
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <main+0x94>)
 80006da:	f009 fe17 	bl	800a30c <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(TIM_PWM_MF, CH_PWM_MF);
 80006de:	2100      	movs	r1, #0
 80006e0:	480b      	ldr	r0, [pc, #44]	; (8000710 <main+0x98>)
 80006e2:	f009 fc51 	bl	8009f88 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(TIM_PWM_ML, CH_PWM_ML);
 80006e6:	210c      	movs	r1, #12
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <main+0x98>)
 80006ea:	f009 fc4d 	bl	8009f88 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(TIM_PWM_MR, CH_PWM_MR);
 80006ee:	2108      	movs	r1, #8
 80006f0:	4808      	ldr	r0, [pc, #32]	; (8000714 <main+0x9c>)
 80006f2:	f009 fc49 	bl	8009f88 <HAL_TIM_PWM_Start>
  	setup();
 80006f6:	f002 fa05 	bl	8002b04 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 80006fa:	f002 fa19 	bl	8002b30 <loop>
 80006fe:	e7fc      	b.n	80006fa <main+0x82>
 8000700:	2400012c 	.word	0x2400012c
 8000704:	24000094 	.word	0x24000094
 8000708:	24000178 	.word	0x24000178
 800070c:	24000210 	.word	0x24000210
 8000710:	240000e0 	.word	0x240000e0
 8000714:	240001c4 	.word	0x240001c4

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b09c      	sub	sp, #112	; 0x70
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000722:	224c      	movs	r2, #76	; 0x4c
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f00d f8e6 	bl	800d8f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2220      	movs	r2, #32
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f00d f8e0 	bl	800d8f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000738:	2002      	movs	r0, #2
 800073a:	f006 fd8d 	bl	8007258 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <SystemClock_Config+0xe0>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800074a:	4a2b      	ldr	r2, [pc, #172]	; (80007f8 <SystemClock_Config+0xe0>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6193      	str	r3, [r2, #24]
 8000752:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <SystemClock_Config+0xe0>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800075e:	bf00      	nop
 8000760:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <SystemClock_Config+0xe0>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800076c:	d1f8      	bne.n	8000760 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076e:	2302      	movs	r3, #2
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000772:	2301      	movs	r3, #1
 8000774:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000776:	2340      	movs	r3, #64	; 0x40
 8000778:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077e:	2300      	movs	r3, #0
 8000780:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000782:	2304      	movs	r3, #4
 8000784:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000786:	2315      	movs	r3, #21
 8000788:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800078e:	2302      	movs	r3, #2
 8000790:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000796:	230c      	movs	r3, #12
 8000798:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800079a:	2300      	movs	r3, #0
 800079c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a6:	4618      	mov	r0, r3
 80007a8:	f006 fd90 	bl	80072cc <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007b2:	f000 fb95 	bl	8000ee0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	233f      	movs	r3, #63	; 0x3f
 80007b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2303      	movs	r3, #3
 80007bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80007be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007c4:	2308      	movs	r3, #8
 80007c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007c8:	2340      	movs	r3, #64	; 0x40
 80007ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007cc:	2340      	movs	r3, #64	; 0x40
 80007ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007d6:	2340      	movs	r3, #64	; 0x40
 80007d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2102      	movs	r1, #2
 80007de:	4618      	mov	r0, r3
 80007e0:	f007 f94e 	bl	8007a80 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80007ea:	f000 fb79 	bl	8000ee0 <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3770      	adds	r7, #112	; 0x70
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	58024800 	.word	0x58024800

080007fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	; 0x30
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	2224      	movs	r2, #36	; 0x24
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f00d f874 	bl	800d8f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000810:	463b      	mov	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800081a:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <MX_TIM1_Init+0xac>)
 800081c:	4a23      	ldr	r2, [pc, #140]	; (80008ac <MX_TIM1_Init+0xb0>)
 800081e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000820:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <MX_TIM1_Init+0xac>)
 8000822:	2200      	movs	r2, #0
 8000824:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <MX_TIM1_Init+0xac>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_TIM1_Init+0xac>)
 800082e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000832:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <MX_TIM1_Init+0xac>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800083a:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_TIM1_Init+0xac>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <MX_TIM1_Init+0xac>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000846:	2303      	movs	r3, #3
 8000848:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800084e:	2301      	movs	r3, #1
 8000850:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800085e:	2301      	movs	r3, #1
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	4619      	mov	r1, r3
 8000870:	480d      	ldr	r0, [pc, #52]	; (80008a8 <MX_TIM1_Init+0xac>)
 8000872:	f009 fca5 	bl	800a1c0 <HAL_TIM_Encoder_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800087c:	f000 fb30 	bl	8000ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000880:	2300      	movs	r3, #0
 8000882:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800088c:	463b      	mov	r3, r7
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_TIM1_Init+0xac>)
 8000892:	f00a fd5d 	bl	800b350 <HAL_TIMEx_MasterConfigSynchronization>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800089c:	f000 fb20 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3730      	adds	r7, #48	; 0x30
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	24000094 	.word	0x24000094
 80008ac:	40010000 	.word	0x40010000

080008b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c2:	463b      	mov	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
 80008d0:	615a      	str	r2, [r3, #20]
 80008d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d4:	4b27      	ldr	r3, [pc, #156]	; (8000974 <MX_TIM2_Init+0xc4>)
 80008d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80008dc:	4b25      	ldr	r3, [pc, #148]	; (8000974 <MX_TIM2_Init+0xc4>)
 80008de:	223f      	movs	r2, #63	; 0x3f
 80008e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e2:	4b24      	ldr	r3, [pc, #144]	; (8000974 <MX_TIM2_Init+0xc4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_TIM2_Init+0xc4>)
 80008ea:	2231      	movs	r2, #49	; 0x31
 80008ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_TIM2_Init+0xc4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_TIM2_Init+0xc4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008fa:	481e      	ldr	r0, [pc, #120]	; (8000974 <MX_TIM2_Init+0xc4>)
 80008fc:	f009 faec 	bl	8009ed8 <HAL_TIM_PWM_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000906:	f000 faeb 	bl	8000ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4816      	ldr	r0, [pc, #88]	; (8000974 <MX_TIM2_Init+0xc4>)
 800091a:	f00a fd19 	bl	800b350 <HAL_TIMEx_MasterConfigSynchronization>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000924:	f000 fadc 	bl	8000ee0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000928:	2360      	movs	r3, #96	; 0x60
 800092a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000938:	463b      	mov	r3, r7
 800093a:	2200      	movs	r2, #0
 800093c:	4619      	mov	r1, r3
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <MX_TIM2_Init+0xc4>)
 8000940:	f009 fe92 	bl	800a668 <HAL_TIM_PWM_ConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800094a:	f000 fac9 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	220c      	movs	r2, #12
 8000952:	4619      	mov	r1, r3
 8000954:	4807      	ldr	r0, [pc, #28]	; (8000974 <MX_TIM2_Init+0xc4>)
 8000956:	f009 fe87 	bl	800a668 <HAL_TIM_PWM_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000960:	f000 fabe 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000964:	4803      	ldr	r0, [pc, #12]	; (8000974 <MX_TIM2_Init+0xc4>)
 8000966:	f003 f853 	bl	8003a10 <HAL_TIM_MspPostInit>

}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	; 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	240000e0 	.word	0x240000e0

08000978 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000996:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <MX_TIM3_Init+0x94>)
 8000998:	4a1d      	ldr	r2, [pc, #116]	; (8000a10 <MX_TIM3_Init+0x98>)
 800099a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <MX_TIM3_Init+0x94>)
 800099e:	223f      	movs	r2, #63	; 0x3f
 80009a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_TIM3_Init+0x94>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80009a8:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <MX_TIM3_Init+0x94>)
 80009aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_TIM3_Init+0x94>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <MX_TIM3_Init+0x94>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009bc:	4813      	ldr	r0, [pc, #76]	; (8000a0c <MX_TIM3_Init+0x94>)
 80009be:	f009 f9ad 	bl	8009d1c <HAL_TIM_Base_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80009c8:	f000 fa8a 	bl	8000ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	4619      	mov	r1, r3
 80009d8:	480c      	ldr	r0, [pc, #48]	; (8000a0c <MX_TIM3_Init+0x94>)
 80009da:	f009 ff59 	bl	800a890 <HAL_TIM_ConfigClockSource>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80009e4:	f000 fa7c 	bl	8000ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_TIM3_Init+0x94>)
 80009f6:	f00a fcab 	bl	800b350 <HAL_TIMEx_MasterConfigSynchronization>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a00:	f000 fa6e 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	2400012c 	.word	0x2400012c
 8000a10:	40000400 	.word	0x40000400

08000a14 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	2224      	movs	r2, #36	; 0x24
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f00c ff68 	bl	800d8f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000a34:	4a21      	ldr	r2, [pc, #132]	; (8000abc <MX_TIM4_Init+0xa8>)
 8000a36:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a4a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a60:	2301      	movs	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a70:	2301      	movs	r3, #1
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	4619      	mov	r1, r3
 8000a82:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000a84:	f009 fb9c 	bl	800a1c0 <HAL_TIM_Encoder_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000a8e:	f000 fa27 	bl	8000ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000aa0:	f00a fc56 	bl	800b350 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000aaa:	f000 fa19 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	3730      	adds	r7, #48	; 0x30
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	24000178 	.word	0x24000178
 8000abc:	40000800 	.word	0x40000800

08000ac0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b098      	sub	sp, #96	; 0x60
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]
 8000ae2:	615a      	str	r2, [r3, #20]
 8000ae4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2234      	movs	r2, #52	; 0x34
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f00c ff03 	bl	800d8f8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000af2:	4b38      	ldr	r3, [pc, #224]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000af4:	4a38      	ldr	r2, [pc, #224]	; (8000bd8 <MX_TIM8_Init+0x118>)
 8000af6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 8000af8:	4b36      	ldr	r3, [pc, #216]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000afa:	223f      	movs	r2, #63	; 0x3f
 8000afc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afe:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8000b04:	4b33      	ldr	r3, [pc, #204]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b06:	2231      	movs	r2, #49	; 0x31
 8000b08:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0a:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b10:	4b30      	ldr	r3, [pc, #192]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b16:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b1c:	482d      	ldr	r0, [pc, #180]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b1e:	f009 f9db 	bl	8009ed8 <HAL_TIM_PWM_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000b28:	f000 f9da 	bl	8000ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b30:	2300      	movs	r3, #0
 8000b32:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4825      	ldr	r0, [pc, #148]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b40:	f00a fc06 	bl	800b350 <HAL_TIMEx_MasterConfigSynchronization>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8000b4a:	f000 f9c9 	bl	8000ee0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b4e:	2360      	movs	r3, #96	; 0x60
 8000b50:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b56:	2300      	movs	r3, #0
 8000b58:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b6e:	2208      	movs	r2, #8
 8000b70:	4619      	mov	r1, r3
 8000b72:	4818      	ldr	r0, [pc, #96]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b74:	f009 fd78 	bl	800a668 <HAL_TIM_PWM_ConfigChannel>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8000b7e:	f000 f9af 	bl	8000ee0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ba4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000bb8:	f00a fc66 	bl	800b488 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8000bc2:	f000 f98d 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000bc6:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000bc8:	f002 ff22 	bl	8003a10 <HAL_TIM_MspPostInit>

}
 8000bcc:	bf00      	nop
 8000bce:	3760      	adds	r7, #96	; 0x60
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	240001c4 	.word	0x240001c4
 8000bd8:	40010400 	.word	0x40010400

08000bdc <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	; 0x30
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	2224      	movs	r2, #36	; 0x24
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f00c fe84 	bl	800d8f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000bfa:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000bfc:	4a21      	ldr	r2, [pc, #132]	; (8000c84 <MX_TIM23_Init+0xa8>)
 8000bfe:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8000c00:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c06:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8000c0c:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c12:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c20:	2303      	movs	r3, #3
 8000c22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480d      	ldr	r0, [pc, #52]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000c4c:	f009 fab8 	bl	800a1c0 <HAL_TIM_Encoder_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 8000c56:	f000 f943 	bl	8000ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8000c62:	463b      	mov	r3, r7
 8000c64:	4619      	mov	r1, r3
 8000c66:	4806      	ldr	r0, [pc, #24]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000c68:	f00a fb72 	bl	800b350 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 8000c72:	f000 f935 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	3730      	adds	r7, #48	; 0x30
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	24000210 	.word	0x24000210
 8000c84:	4000e000 	.word	0x4000e000

08000c88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000c8e:	4a23      	ldr	r2, [pc, #140]	; (8000d1c <MX_USART3_UART_Init+0x94>)
 8000c90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000c94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ca0:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000cae:	220c      	movs	r2, #12
 8000cb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cd0:	4811      	ldr	r0, [pc, #68]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000cd2:	f00a fc97 	bl	800b604 <HAL_UART_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cdc:	f000 f900 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	480d      	ldr	r0, [pc, #52]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000ce4:	f00c fcea 	bl	800d6bc <HAL_UARTEx_SetTxFifoThreshold>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cee:	f000 f8f7 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4808      	ldr	r0, [pc, #32]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000cf6:	f00c fd1f 	bl	800d738 <HAL_UARTEx_SetRxFifoThreshold>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d00:	f000 f8ee 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d04:	4804      	ldr	r0, [pc, #16]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000d06:	f00c fca0 	bl	800d64a <HAL_UARTEx_DisableFifoMode>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d10:	f000 f8e6 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	2400025c 	.word	0x2400025c
 8000d1c:	40004800 	.word	0x40004800

08000d20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_DMA_Init+0x4c>)
 8000d28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d2c:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <MX_DMA_Init+0x4c>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <MX_DMA_Init+0x4c>)
 8000d38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	200b      	movs	r0, #11
 8000d4a:	f003 fa54 	bl	80041f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d4e:	200b      	movs	r0, #11
 8000d50:	f003 fa6b 	bl	800422a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2100      	movs	r1, #0
 8000d58:	200c      	movs	r0, #12
 8000d5a:	f003 fa4c 	bl	80041f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d5e:	200c      	movs	r0, #12
 8000d60:	f003 fa63 	bl	800422a <HAL_NVIC_EnableIRQ>

}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	58024400 	.word	0x58024400

08000d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	; 0x30
 8000d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d86:	4b39      	ldr	r3, [pc, #228]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8c:	4a37      	ldr	r2, [pc, #220]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d96:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	f003 0310 	and.w	r3, r3, #16
 8000da0:	61bb      	str	r3, [r7, #24]
 8000da2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000da4:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	4a30      	ldr	r2, [pc, #192]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000dac:	f043 0320 	orr.w	r3, r3, #32
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db4:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	f003 0320 	and.w	r3, r3, #32
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc2:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	4a28      	ldr	r2, [pc, #160]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd2:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de6:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfe:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e04:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000e06:	f043 0308 	orr.w	r3, r3, #8
 8000e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e14:	f003 0308 	and.w	r3, r3, #8
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f249 51c0 	movw	r1, #38336	; 0x95c0
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <MX_GPIO_Init+0x100>)
 8000e42:	f006 f9ef 	bl	8007224 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8000e46:	f249 53c0 	movw	r3, #38336	; 0x95c0
 8000e4a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4804      	ldr	r0, [pc, #16]	; (8000e70 <MX_GPIO_Init+0x100>)
 8000e60:	f006 f838 	bl	8006ed4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e64:	bf00      	nop
 8000e66:	3730      	adds	r7, #48	; 0x30
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	58021000 	.word	0x58021000

08000e74 <HAL_TIM_PeriodElapsedCallback>:
void inverse_kinematics_model();
void Encoder();
void PID_PWM();
void kinematics_model();

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a13      	ldr	r2, [pc, #76]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d11f      	bne.n	8000ec6 <HAL_TIM_PeriodElapsedCallback+0x52>
		loop();
 8000e86:	f001 fe53 	bl	8002b30 <loop>
		rVx++;
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e8c:	ed93 7b00 	vldr	d7, [r3]
 8000e90:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e94:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e9a:	ed83 7b00 	vstr	d7, [r3]
		rVy++;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000ea0:	ed93 7b00 	vldr	d7, [r3]
 8000ea4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ea8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000eae:	ed83 7b00 	vstr	d7, [r3]
		rW++;
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000eb4:	ed93 7b00 	vldr	d7, [r3]
 8000eb8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ebc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ec2:	ed83 7b00 	vstr	d7, [r3]
		//inverse_kinematics_model();
		//Encoder();
		//PID_PWM();
		//kinematics_model();
	}
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40000400 	.word	0x40000400
 8000ed4:	240003f8 	.word	0x240003f8
 8000ed8:	24000400 	.word	0x24000400
 8000edc:	24000408 	.word	0x24000408

08000ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee4:	b672      	cpsid	i
}
 8000ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <Error_Handler+0x8>

08000eea <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <_ZN3ros3MsgC1Ev+0x1c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	0800ded4 	.word	0x0800ded4

08000f2c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
      data()
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ffe8 	bl	8000f0c <_ZN3ros3MsgC1Ev>
 8000f3c:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3304      	adds	r3, #4
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ffcf 	bl	8000eea <_ZN3ros4TimeC1Ev>
    {
    }
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	0800debc 	.word	0x0800debc

08000f5c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6859      	ldr	r1, [r3, #4]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	b2ca      	uxtb	r2, r1
 8000f76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	0a19      	lsrs	r1, r3, #8
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3301      	adds	r3, #1
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	4413      	add	r3, r2
 8000f86:	b2ca      	uxtb	r2, r1
 8000f88:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	0c19      	lsrs	r1, r3, #16
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	3302      	adds	r3, #2
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	b2ca      	uxtb	r2, r1
 8000f9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	0e19      	lsrs	r1, r3, #24
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	3303      	adds	r3, #3
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	4413      	add	r3, r2
 8000faa:	b2ca      	uxtb	r2, r1
 8000fac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6899      	ldr	r1, [r3, #8]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	b2ca      	uxtb	r2, r1
 8000fc0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	0a19      	lsrs	r1, r3, #8
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	b2ca      	uxtb	r2, r1
 8000fd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	0c19      	lsrs	r1, r3, #16
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	3302      	adds	r3, #2
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b2ca      	uxtb	r2, r1
 8000fe4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	0e19      	lsrs	r1, r3, #24
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	3303      	adds	r3, #3
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	b2ca      	uxtb	r2, r1
 8000ff6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	60fb      	str	r3, [r7, #12]
      return offset;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
    }
 8001000:	4618      	mov	r0, r3
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	4413      	add	r3, r2
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3301      	adds	r3, #1
 8001030:	6839      	ldr	r1, [r7, #0]
 8001032:	440b      	add	r3, r1
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	431a      	orrs	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3302      	adds	r3, #2
 8001046:	6839      	ldr	r1, [r7, #0]
 8001048:	440b      	add	r3, r1
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	041b      	lsls	r3, r3, #16
 800104e:	431a      	orrs	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3303      	adds	r3, #3
 800105c:	6839      	ldr	r1, [r7, #0]
 800105e:	440b      	add	r3, r1
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	061b      	lsls	r3, r3, #24
 8001064:	431a      	orrs	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3304      	adds	r3, #4
 800106e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	4413      	add	r3, r2
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	3301      	adds	r3, #1
 8001086:	6839      	ldr	r1, [r7, #0]
 8001088:	440b      	add	r3, r1
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	3302      	adds	r3, #2
 800109c:	6839      	ldr	r1, [r7, #0]
 800109e:	440b      	add	r3, r1
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	041b      	lsls	r3, r3, #16
 80010a4:	431a      	orrs	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3303      	adds	r3, #3
 80010b2:	6839      	ldr	r1, [r7, #0]
 80010b4:	440b      	add	r3, r1
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	061b      	lsls	r3, r3, #24
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	3304      	adds	r3, #4
 80010c4:	60fb      	str	r3, [r7, #12]
     return offset;
 80010c6:	68fb      	ldr	r3, [r7, #12]
    }
 80010c8:	4618      	mov	r0, r3
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	0800dc24 	.word	0x0800dc24

080010f0 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	0800dc34 	.word	0x0800dc34

0800110c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fef8 	bl	8000f0c <_ZN3ros3MsgC1Ev>
 800111c:	4a0b      	ldr	r2, [pc, #44]	; (800114c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	809a      	strh	r2, [r3, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a09      	ldr	r2, [pc, #36]	; (8001150 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a06      	ldr	r2, [pc, #24]	; (8001150 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001138:	611a      	str	r2, [r3, #16]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
    {
    }
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	0800dea4 	.word	0x0800dea4
 8001150:	0800dc58 	.word	0x0800dc58

08001154 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	8899      	ldrh	r1, [r3, #4]
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	4413      	add	r3, r2
 800116c:	b2ca      	uxtb	r2, r1
 800116e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	889b      	ldrh	r3, [r3, #4]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	b299      	uxth	r1, r3
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	3301      	adds	r3, #1
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	4413      	add	r3, r2
 8001180:	b2ca      	uxtb	r2, r1
 8001182:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	3302      	adds	r3, #2
 8001188:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f8bc 	bl	800030c <strlen>
 8001194:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	4413      	add	r3, r2
 800119c:	69b9      	ldr	r1, [r7, #24]
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 fcd0 	bl	8002b44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	3304      	adds	r3, #4
 80011a8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	18d0      	adds	r0, r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4619      	mov	r1, r3
 80011b8:	f00c fb90 	bl	800d8dc <memcpy>
      offset += length_topic_name;
 80011bc:	69fa      	ldr	r2, [r7, #28]
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	4413      	add	r3, r2
 80011c2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f89f 	bl	800030c <strlen>
 80011ce:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	4413      	add	r3, r2
 80011d6:	6979      	ldr	r1, [r7, #20]
 80011d8:	4618      	mov	r0, r3
 80011da:	f001 fcb3 	bl	8002b44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	18d0      	adds	r0, r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	4619      	mov	r1, r3
 80011f2:	f00c fb73 	bl	800d8dc <memcpy>
      offset += length_message_type;
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	4413      	add	r3, r2
 80011fc:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f882 	bl	800030c <strlen>
 8001208:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	4413      	add	r3, r2
 8001210:	6939      	ldr	r1, [r7, #16]
 8001212:	4618      	mov	r0, r3
 8001214:	f001 fc96 	bl	8002b44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	3304      	adds	r3, #4
 800121c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	18d0      	adds	r0, r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4619      	mov	r1, r3
 800122c:	f00c fb56 	bl	800d8dc <memcpy>
      offset += length_md5sum;
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4413      	add	r3, r2
 8001236:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800123e:	68f9      	ldr	r1, [r7, #12]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	4413      	add	r3, r2
 8001246:	b2ca      	uxtb	r2, r1
 8001248:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	0a19      	lsrs	r1, r3, #8
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3301      	adds	r3, #1
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	4413      	add	r3, r2
 8001256:	b2ca      	uxtb	r2, r1
 8001258:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	0c19      	lsrs	r1, r3, #16
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3302      	adds	r3, #2
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	4413      	add	r3, r2
 8001266:	b2ca      	uxtb	r2, r1
 8001268:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	0e19      	lsrs	r1, r3, #24
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3303      	adds	r3, #3
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	4413      	add	r3, r2
 8001276:	b2ca      	uxtb	r2, r1
 8001278:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	61fb      	str	r3, [r7, #28]
      return offset;
 8001280:	69fb      	ldr	r3, [r7, #28]
    }
 8001282:	4618      	mov	r0, r3
 8001284:	3720      	adds	r7, #32
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800128a:	b580      	push	{r7, lr}
 800128c:	b08a      	sub	sp, #40	; 0x28
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	4413      	add	r3, r2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	889b      	ldrh	r3, [r3, #4]
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	3301      	adds	r3, #1
 80012b0:	6839      	ldr	r1, [r7, #0]
 80012b2:	440b      	add	r3, r1
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	4313      	orrs	r3, r2
 80012bc:	b21b      	sxth	r3, r3
 80012be:	b29a      	uxth	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	3302      	adds	r3, #2
 80012c8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	441a      	add	r2, r3
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4611      	mov	r1, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 fc52 	bl	8002b80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	3304      	adds	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	4413      	add	r3, r2
 80012ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d20c      	bcs.n	800130c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	441a      	add	r2, r3
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6839      	ldr	r1, [r7, #0]
 80012fe:	440b      	add	r3, r1
 8001300:	7812      	ldrb	r2, [r2, #0]
 8001302:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	3301      	adds	r3, #1
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
 800130a:	e7ec      	b.n	80012e6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	4413      	add	r3, r2
 8001312:	3b01      	subs	r3, #1
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	4413      	add	r3, r2
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	3b01      	subs	r3, #1
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	441a      	add	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	4413      	add	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	441a      	add	r2, r3
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f001 fc1f 	bl	8002b80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	3304      	adds	r3, #4
 8001346:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	623b      	str	r3, [r7, #32]
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4413      	add	r3, r2
 8001352:	6a3a      	ldr	r2, [r7, #32]
 8001354:	429a      	cmp	r2, r3
 8001356:	d20c      	bcs.n	8001372 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	6a3b      	ldr	r3, [r7, #32]
 800135c:	441a      	add	r2, r3
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	3b01      	subs	r3, #1
 8001362:	6839      	ldr	r1, [r7, #0]
 8001364:	440b      	add	r3, r1
 8001366:	7812      	ldrb	r2, [r2, #0]
 8001368:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	3301      	adds	r3, #1
 800136e:	623b      	str	r3, [r7, #32]
 8001370:	e7ec      	b.n	800134c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4413      	add	r3, r2
 8001378:	3b01      	subs	r3, #1
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	4413      	add	r3, r2
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	3b01      	subs	r3, #1
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	441a      	add	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4413      	add	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	441a      	add	r2, r3
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 fbec 	bl	8002b80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	3304      	adds	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d20c      	bcs.n	80013d8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	441a      	add	r2, r3
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6839      	ldr	r1, [r7, #0]
 80013ca:	440b      	add	r3, r1
 80013cc:	7812      	ldrb	r2, [r2, #0]
 80013ce:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	3301      	adds	r3, #1
 80013d4:	61fb      	str	r3, [r7, #28]
 80013d6:	e7ec      	b.n	80013b2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4413      	add	r3, r2
 80013de:	3b01      	subs	r3, #1
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	441a      	add	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4413      	add	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	6839      	ldr	r1, [r7, #0]
 8001406:	440a      	add	r2, r1
 8001408:	7812      	ldrb	r2, [r2, #0]
 800140a:	4313      	orrs	r3, r2
 800140c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	3301      	adds	r3, #1
 8001414:	6839      	ldr	r1, [r7, #0]
 8001416:	440b      	add	r3, r1
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	4313      	orrs	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	3302      	adds	r3, #2
 8001426:	6839      	ldr	r1, [r7, #0]
 8001428:	440b      	add	r3, r1
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	041b      	lsls	r3, r3, #16
 800142e:	4313      	orrs	r3, r2
 8001430:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	3303      	adds	r3, #3
 8001438:	6839      	ldr	r1, [r7, #0]
 800143a:	440b      	add	r3, r1
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	061b      	lsls	r3, r3, #24
 8001440:	4313      	orrs	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	3304      	adds	r3, #4
 800144e:	61bb      	str	r3, [r7, #24]
     return offset;
 8001450:	69bb      	ldr	r3, [r7, #24]
    }
 8001452:	4618      	mov	r0, r3
 8001454:	3728      	adds	r7, #40	; 0x28
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	0800dc5c 	.word	0x0800dc5c

08001478 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	0800dc78 	.word	0x0800dc78

08001494 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fd34 	bl	8000f0c <_ZN3ros3MsgC1Ev>
 80014a4:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	711a      	strb	r2, [r3, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80014b4:	609a      	str	r2, [r3, #8]
    {
    }
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	0800de8c 	.word	0x0800de8c
 80014c4:	0800dc58 	.word	0x0800dc58

080014c8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	7912      	ldrb	r2, [r2, #4]
 80014e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	3301      	adds	r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe ff0d 	bl	800030c <strlen>
 80014f2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	4413      	add	r3, r2
 80014fa:	68b9      	ldr	r1, [r7, #8]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f001 fb21 	bl	8002b44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	3304      	adds	r3, #4
 8001506:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	18d0      	adds	r0, r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	4619      	mov	r1, r3
 8001516:	f00c f9e1 	bl	800d8dc <memcpy>
      offset += length_msg;
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	4413      	add	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
      return offset;
 8001522:	68fb      	ldr	r3, [r7, #12]
    }
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	4413      	add	r3, r2
 8001540:	781a      	ldrb	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	3301      	adds	r3, #1
 800154a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	441a      	add	r2, r3
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f001 fb11 	bl	8002b80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	3304      	adds	r3, #4
 8001562:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4413      	add	r3, r2
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	429a      	cmp	r2, r3
 8001572:	d20c      	bcs.n	800158e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	441a      	add	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3b01      	subs	r3, #1
 800157e:	6839      	ldr	r1, [r7, #0]
 8001580:	440b      	add	r3, r1
 8001582:	7812      	ldrb	r2, [r2, #0]
 8001584:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	e7ec      	b.n	8001568 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4413      	add	r3, r2
 8001594:	3b01      	subs	r3, #1
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	4413      	add	r3, r2
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	441a      	add	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4413      	add	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
     return offset;
 80015b2:	693b      	ldr	r3, [r7, #16]
    }
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	0800dc9c 	.word	0x0800dc9c

080015d8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	0800dcb0 	.word	0x0800dcb0

080015f4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fc84 	bl	8000f0c <_ZN3ros3MsgC1Ev>
 8001604:	4a0c      	ldr	r2, [pc, #48]	; (8001638 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	61da      	str	r2, [r3, #28]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	0800de74 	.word	0x0800de74

0800163c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6859      	ldr	r1, [r3, #4]
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	4413      	add	r3, r2
 8001654:	b2ca      	uxtb	r2, r1
 8001656:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	0a19      	lsrs	r1, r3, #8
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	3301      	adds	r3, #1
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	4413      	add	r3, r2
 8001666:	b2ca      	uxtb	r2, r1
 8001668:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	0c19      	lsrs	r1, r3, #16
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	3302      	adds	r3, #2
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	4413      	add	r3, r2
 8001678:	b2ca      	uxtb	r2, r1
 800167a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	0e19      	lsrs	r1, r3, #24
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	3303      	adds	r3, #3
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	4413      	add	r3, r2
 800168a:	b2ca      	uxtb	r2, r1
 800168c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	3304      	adds	r3, #4
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	6a3a      	ldr	r2, [r7, #32]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d22b      	bcs.n	80016fa <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80016b0:	6939      	ldr	r1, [r7, #16]
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	b2ca      	uxtb	r2, r1
 80016ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	0a19      	lsrs	r1, r3, #8
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	3301      	adds	r3, #1
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	b2ca      	uxtb	r2, r1
 80016ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	0c19      	lsrs	r1, r3, #16
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	3302      	adds	r3, #2
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	b2ca      	uxtb	r2, r1
 80016da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	0e19      	lsrs	r1, r3, #24
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	3303      	adds	r3, #3
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	b2ca      	uxtb	r2, r1
 80016ea:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	3304      	adds	r3, #4
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	3301      	adds	r3, #1
 80016f6:	623b      	str	r3, [r7, #32]
 80016f8:	e7ce      	b.n	8001698 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6919      	ldr	r1, [r3, #16]
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	4413      	add	r3, r2
 8001704:	b2ca      	uxtb	r2, r1
 8001706:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	0a19      	lsrs	r1, r3, #8
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	3301      	adds	r3, #1
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	4413      	add	r3, r2
 8001716:	b2ca      	uxtb	r2, r1
 8001718:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	0c19      	lsrs	r1, r3, #16
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	3302      	adds	r3, #2
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	4413      	add	r3, r2
 8001728:	b2ca      	uxtb	r2, r1
 800172a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	0e19      	lsrs	r1, r3, #24
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	3303      	adds	r3, #3
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	4413      	add	r3, r2
 800173a:	b2ca      	uxtb	r2, r1
 800173c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	3304      	adds	r3, #4
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	429a      	cmp	r2, r3
 8001750:	d22b      	bcs.n	80017aa <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699a      	ldr	r2, [r3, #24]
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001760:	68f9      	ldr	r1, [r7, #12]
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	4413      	add	r3, r2
 8001768:	b2ca      	uxtb	r2, r1
 800176a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	0a19      	lsrs	r1, r3, #8
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	3301      	adds	r3, #1
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	4413      	add	r3, r2
 8001778:	b2ca      	uxtb	r2, r1
 800177a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	0c19      	lsrs	r1, r3, #16
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	3302      	adds	r3, #2
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	4413      	add	r3, r2
 8001788:	b2ca      	uxtb	r2, r1
 800178a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	0e19      	lsrs	r1, r3, #24
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	3303      	adds	r3, #3
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	4413      	add	r3, r2
 8001798:	b2ca      	uxtb	r2, r1
 800179a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	3304      	adds	r3, #4
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3301      	adds	r3, #1
 80017a6:	61fb      	str	r3, [r7, #28]
 80017a8:	e7ce      	b.n	8001748 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69d9      	ldr	r1, [r3, #28]
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	4413      	add	r3, r2
 80017b4:	b2ca      	uxtb	r2, r1
 80017b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	0a19      	lsrs	r1, r3, #8
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	3301      	adds	r3, #1
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	4413      	add	r3, r2
 80017c6:	b2ca      	uxtb	r2, r1
 80017c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	0c19      	lsrs	r1, r3, #16
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	3302      	adds	r3, #2
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	b2ca      	uxtb	r2, r1
 80017da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	0e19      	lsrs	r1, r3, #24
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	3303      	adds	r3, #3
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	4413      	add	r3, r2
 80017ea:	b2ca      	uxtb	r2, r1
 80017ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	3304      	adds	r3, #4
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80017f4:	2300      	movs	r3, #0
 80017f6:	61bb      	str	r3, [r7, #24]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d228      	bcs.n	8001854 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fd7c 	bl	800030c <strlen>
 8001814:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	4413      	add	r3, r2
 800181c:	6979      	ldr	r1, [r7, #20]
 800181e:	4618      	mov	r0, r3
 8001820:	f001 f990 	bl	8002b44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	3304      	adds	r3, #4
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	18d0      	adds	r0, r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	4619      	mov	r1, r3
 8001840:	f00c f84c 	bl	800d8dc <memcpy>
      offset += length_stringsi;
 8001844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	4413      	add	r3, r2
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	3301      	adds	r3, #1
 8001850:	61bb      	str	r3, [r7, #24]
 8001852:	e7d1      	b.n	80017f8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001856:	4618      	mov	r0, r3
 8001858:	3728      	adds	r7, #40	; 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800185e:	b580      	push	{r7, lr}
 8001860:	b08e      	sub	sp, #56	; 0x38
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800186c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	4413      	add	r3, r2
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001878:	3301      	adds	r3, #1
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	4413      	add	r3, r2
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	6a3a      	ldr	r2, [r7, #32]
 8001884:	4313      	orrs	r3, r2
 8001886:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800188a:	3302      	adds	r3, #2
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	4413      	add	r3, r2
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	041b      	lsls	r3, r3, #16
 8001894:	6a3a      	ldr	r2, [r7, #32]
 8001896:	4313      	orrs	r3, r2
 8001898:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800189a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189c:	3303      	adds	r3, #3
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	4413      	add	r3, r2
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	061b      	lsls	r3, r3, #24
 80018a6:	6a3a      	ldr	r2, [r7, #32]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80018ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ae:	3304      	adds	r3, #4
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	6a3a      	ldr	r2, [r7, #32]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d90a      	bls.n	80018d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4619      	mov	r1, r3
 80018c6:	4610      	mov	r0, r2
 80018c8:	f00c f81e 	bl	800d908 <realloc>
 80018cc:	4602      	mov	r2, r0
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a3a      	ldr	r2, [r7, #32]
 80018d6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80018d8:	2300      	movs	r3, #0
 80018da:	633b      	str	r3, [r7, #48]	; 0x30
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d236      	bcs.n	8001954 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018ee:	6839      	ldr	r1, [r7, #0]
 80018f0:	440a      	add	r2, r1
 80018f2:	7812      	ldrb	r2, [r2, #0]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fc:	3301      	adds	r3, #1
 80018fe:	6839      	ldr	r1, [r7, #0]
 8001900:	440b      	add	r3, r1
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	021b      	lsls	r3, r3, #8
 8001906:	4313      	orrs	r3, r2
 8001908:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190e:	3302      	adds	r3, #2
 8001910:	6839      	ldr	r1, [r7, #0]
 8001912:	440b      	add	r3, r1
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	041b      	lsls	r3, r3, #16
 8001918:	4313      	orrs	r3, r2
 800191a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001920:	3303      	adds	r3, #3
 8001922:	6839      	ldr	r1, [r7, #0]
 8001924:	440b      	add	r3, r1
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	061b      	lsls	r3, r3, #24
 800192a:	4313      	orrs	r3, r2
 800192c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001936:	3304      	adds	r3, #4
 8001938:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800194c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800194e:	3301      	adds	r3, #1
 8001950:	633b      	str	r3, [r7, #48]	; 0x30
 8001952:	e7c3      	b.n	80018dc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	4413      	add	r3, r2
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800195e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001960:	3301      	adds	r3, #1
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	4413      	add	r3, r2
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	4313      	orrs	r3, r2
 800196e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001972:	3302      	adds	r3, #2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	4313      	orrs	r3, r2
 8001980:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001984:	3303      	adds	r3, #3
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	4413      	add	r3, r2
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	061b      	lsls	r3, r3, #24
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	4313      	orrs	r3, r2
 8001992:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001996:	3304      	adds	r3, #4
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d90a      	bls.n	80019ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699a      	ldr	r2, [r3, #24]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4619      	mov	r1, r3
 80019ae:	4610      	mov	r0, r2
 80019b0:	f00b ffaa 	bl	800d908 <realloc>
 80019b4:	4602      	mov	r2, r0
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80019c0:	2300      	movs	r3, #0
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d236      	bcs.n	8001a3c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019d6:	6839      	ldr	r1, [r7, #0]
 80019d8:	440a      	add	r2, r1
 80019da:	7812      	ldrb	r2, [r2, #0]
 80019dc:	4313      	orrs	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e4:	3301      	adds	r3, #1
 80019e6:	6839      	ldr	r1, [r7, #0]
 80019e8:	440b      	add	r3, r1
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	021b      	lsls	r3, r3, #8
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f6:	3302      	adds	r3, #2
 80019f8:	6839      	ldr	r1, [r7, #0]
 80019fa:	440b      	add	r3, r1
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	041b      	lsls	r3, r3, #16
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a08:	3303      	adds	r3, #3
 8001a0a:	6839      	ldr	r1, [r7, #0]
 8001a0c:	440b      	add	r3, r1
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	061b      	lsls	r3, r3, #24
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1e:	3304      	adds	r3, #4
 8001a20:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699a      	ldr	r2, [r3, #24]
 8001a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	3214      	adds	r2, #20
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a36:	3301      	adds	r3, #1
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a3a:	e7c3      	b.n	80019c4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	4413      	add	r3, r2
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a48:	3301      	adds	r3, #1
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	021b      	lsls	r3, r3, #8
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	041b      	lsls	r3, r3, #16
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a6c:	3303      	adds	r3, #3
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	4413      	add	r3, r2
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	061b      	lsls	r3, r3, #24
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7e:	3304      	adds	r3, #4
 8001a80:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d90a      	bls.n	8001aa2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4619      	mov	r1, r3
 8001a96:	4610      	mov	r0, r2
 8001a98:	f00b ff36 	bl	800d908 <realloc>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d23f      	bcs.n	8001b36 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	441a      	add	r2, r3
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 f85c 	bl	8002b80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aca:	3304      	adds	r3, #4
 8001acc:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d20c      	bcs.n	8001af8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	441a      	add	r2, r3
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	6839      	ldr	r1, [r7, #0]
 8001aea:	440b      	add	r3, r1
 8001aec:	7812      	ldrb	r2, [r2, #0]
 8001aee:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	3301      	adds	r3, #1
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
 8001af6:	e7ec      	b.n	8001ad2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4413      	add	r3, r2
 8001afe:	3b01      	subs	r3, #1
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	441a      	add	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4413      	add	r3, r2
 8001b1a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	3220      	adds	r2, #32
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b30:	3301      	adds	r3, #1
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b34:	e7ba      	b.n	8001aac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3738      	adds	r7, #56	; 0x38
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	0800ddc8 	.word	0x0800ddc8

08001b5c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	0800dcd4 	.word	0x0800dcd4

08001b78 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	611a      	str	r2, [r3, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
  }
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a4b      	ldr	r2, [pc, #300]	; (8001d00 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d077      	beq.n	8001cc8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a48      	ldr	r2, [pc, #288]	; (8001d04 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d06f      	beq.n	8001cc8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a45      	ldr	r2, [pc, #276]	; (8001d08 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d067      	beq.n	8001cc8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a42      	ldr	r2, [pc, #264]	; (8001d0c <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d05f      	beq.n	8001cc8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a3f      	ldr	r2, [pc, #252]	; (8001d10 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d057      	beq.n	8001cc8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a3c      	ldr	r2, [pc, #240]	; (8001d14 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d04f      	beq.n	8001cc8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a39      	ldr	r2, [pc, #228]	; (8001d18 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d047      	beq.n	8001cc8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a36      	ldr	r2, [pc, #216]	; (8001d1c <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d03f      	beq.n	8001cc8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a33      	ldr	r2, [pc, #204]	; (8001d20 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d037      	beq.n	8001cc8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a30      	ldr	r2, [pc, #192]	; (8001d24 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d02f      	beq.n	8001cc8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a2d      	ldr	r2, [pc, #180]	; (8001d28 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d027      	beq.n	8001cc8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a2a      	ldr	r2, [pc, #168]	; (8001d2c <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d01f      	beq.n	8001cc8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a27      	ldr	r2, [pc, #156]	; (8001d30 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d017      	beq.n	8001cc8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a24      	ldr	r2, [pc, #144]	; (8001d34 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d00f      	beq.n	8001cc8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a21      	ldr	r2, [pc, #132]	; (8001d38 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d007      	beq.n	8001cc8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	; (8001d3c <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d10a      	bne.n	8001cde <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cdc:	e009      	b.n	8001cf2 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40020010 	.word	0x40020010
 8001d04:	40020028 	.word	0x40020028
 8001d08:	40020040 	.word	0x40020040
 8001d0c:	40020058 	.word	0x40020058
 8001d10:	40020070 	.word	0x40020070
 8001d14:	40020088 	.word	0x40020088
 8001d18:	400200a0 	.word	0x400200a0
 8001d1c:	400200b8 	.word	0x400200b8
 8001d20:	40020410 	.word	0x40020410
 8001d24:	40020428 	.word	0x40020428
 8001d28:	40020440 	.word	0x40020440
 8001d2c:	40020458 	.word	0x40020458
 8001d30:	40020470 	.word	0x40020470
 8001d34:	40020488 	.word	0x40020488
 8001d38:	400204a0 	.word	0x400204a0
 8001d3c:	400204b8 	.word	0x400204b8

08001d40 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <_ZN13STM32HardwareC1Ev+0x34>)
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	2400025c 	.word	0x2400025c

08001d78 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f804 	bl	8001d8e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6818      	ldr	r0, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da2:	4619      	mov	r1, r3
 8001da4:	f009 fcfe 	bl	800b7a4 <HAL_UART_Receive_DMA>
    }
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff fefb 	bl	8001bc0 <_ZN13STM32Hardware10getRdmaIndEv>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	429c      	cmp	r4, r3
 8001dce:	bf14      	ite	ne
 8001dd0:	2301      	movne	r3, #1
 8001dd2:	2300      	moveq	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d012      	beq.n	8001e00 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001de0:	1c59      	adds	r1, r3, #1
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	4413      	add	r3, r2
 8001dec:	791b      	ldrb	r3, [r3, #4]
 8001dee:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001df6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001e00:	68fb      	ldr	r3, [r7, #12]
    }
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd90      	pop	{r4, r7, pc}
	...

08001e0c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1c:	2b20      	cmp	r3, #32
 8001e1e:	d108      	bne.n	8001e32 <_ZN13STM32Hardware5flushEv+0x26>
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <_ZN13STM32Hardware5flushEv+0xb4>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	f083 0301 	eor.w	r3, r3, #1
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <_ZN13STM32Hardware5flushEv+0x26>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <_ZN13STM32Hardware5flushEv+0x28>
 8001e32:	2300      	movs	r3, #0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d03f      	beq.n	8001eb8 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8001e38:	4b21      	ldr	r3, [pc, #132]	; (8001ec0 <_ZN13STM32Hardware5flushEv+0xb4>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d031      	beq.n	8001eb2 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d20a      	bcs.n	8001e74 <_ZN13STM32Hardware5flushEv+0x68>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	e006      	b.n	8001e82 <_ZN13STM32Hardware5flushEv+0x76>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001e8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	89fa      	ldrh	r2, [r7, #14]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f009 fc03 	bl	800b6a4 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001ea4:	89fb      	ldrh	r3, [r7, #14]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001eb2:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <_ZN13STM32Hardware5flushEv+0xb4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
      }
    }
 8001eb8:	bf00      	nop
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	24000410 	.word	0x24000410

08001ec4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
      int n = length;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eda:	bfa8      	it	ge
 8001edc:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001ee0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001ee8:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	bf28      	it	cs
 8001ef2:	4613      	movcs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001efc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	4413      	add	r3, r2
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	68b9      	ldr	r1, [r7, #8]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f00b fce7 	bl	800d8dc <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	4413      	add	r3, r2
 8001f18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d00b      	beq.n	8001f42 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	18d1      	adds	r1, r2, r3
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	f00b fccd 	bl	800d8dc <memcpy>
      }

      flush();
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f7ff ff62 	bl	8001e0c <_ZN13STM32Hardware5flushEv>
    }
 8001f48:	bf00      	nop
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	f002 f866 	bl	8004028 <HAL_GetTick>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe ffca 	bl	8000f0c <_ZN3ros3MsgC1Ev>
 8001f78:	4a0e      	ldr	r2, [pc, #56]	; (8001fb4 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	0800de30 	.word	0x0800de30

08001fb8 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001fb8:	b480      	push	{r7}
 8001fba:	b08b      	sub	sp, #44	; 0x2c
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001fcc:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8001fd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fd6:	6838      	ldr	r0, [r7, #0]
 8001fd8:	4401      	add	r1, r0
 8001fda:	b2d3      	uxtb	r3, r2
 8001fdc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8001fde:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	0a02      	lsrs	r2, r0, #8
 8001fec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001ff0:	0a0b      	lsrs	r3, r1, #8
 8001ff2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ff4:	3101      	adds	r1, #1
 8001ff6:	6838      	ldr	r0, [r7, #0]
 8001ff8:	4401      	add	r1, r0
 8001ffa:	b2d3      	uxtb	r3, r2
 8001ffc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8001ffe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	0c02      	lsrs	r2, r0, #16
 800200c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002010:	0c0b      	lsrs	r3, r1, #16
 8002012:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002014:	3102      	adds	r1, #2
 8002016:	6838      	ldr	r0, [r7, #0]
 8002018:	4401      	add	r1, r0
 800201a:	b2d3      	uxtb	r3, r2
 800201c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800201e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	0e02      	lsrs	r2, r0, #24
 800202c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002030:	0e0b      	lsrs	r3, r1, #24
 8002032:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002034:	3103      	adds	r1, #3
 8002036:	6838      	ldr	r0, [r7, #0]
 8002038:	4401      	add	r1, r0
 800203a:	b2d3      	uxtb	r3, r2
 800203c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800203e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	000a      	movs	r2, r1
 800204c:	2300      	movs	r3, #0
 800204e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002050:	3104      	adds	r1, #4
 8002052:	6838      	ldr	r0, [r7, #0]
 8002054:	4401      	add	r1, r0
 8002056:	b2d3      	uxtb	r3, r2
 8002058:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800205a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	0a0a      	lsrs	r2, r1, #8
 8002068:	2300      	movs	r3, #0
 800206a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800206c:	3105      	adds	r1, #5
 800206e:	6838      	ldr	r0, [r7, #0]
 8002070:	4401      	add	r1, r0
 8002072:	b2d3      	uxtb	r3, r2
 8002074:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002076:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	0c0a      	lsrs	r2, r1, #16
 8002084:	2300      	movs	r3, #0
 8002086:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002088:	3106      	adds	r1, #6
 800208a:	6838      	ldr	r0, [r7, #0]
 800208c:	4401      	add	r1, r0
 800208e:	b2d3      	uxtb	r3, r2
 8002090:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002092:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	0e0a      	lsrs	r2, r1, #24
 80020a0:	2300      	movs	r3, #0
 80020a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020a4:	3107      	adds	r1, #7
 80020a6:	6838      	ldr	r0, [r7, #0]
 80020a8:	4401      	add	r1, r0
 80020aa:	b2d3      	uxtb	r3, r2
 80020ac:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	3308      	adds	r3, #8
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80020ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80020be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80020c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020c4:	6838      	ldr	r0, [r7, #0]
 80020c6:	4401      	add	r1, r0
 80020c8:	b2d3      	uxtb	r3, r2
 80020ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80020cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	0a02      	lsrs	r2, r0, #8
 80020da:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80020de:	0a0b      	lsrs	r3, r1, #8
 80020e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020e2:	3101      	adds	r1, #1
 80020e4:	6838      	ldr	r0, [r7, #0]
 80020e6:	4401      	add	r1, r0
 80020e8:	b2d3      	uxtb	r3, r2
 80020ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80020ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	0c02      	lsrs	r2, r0, #16
 80020fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80020fe:	0c0b      	lsrs	r3, r1, #16
 8002100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002102:	3102      	adds	r1, #2
 8002104:	6838      	ldr	r0, [r7, #0]
 8002106:	4401      	add	r1, r0
 8002108:	b2d3      	uxtb	r3, r2
 800210a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800210c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	0e02      	lsrs	r2, r0, #24
 800211a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800211e:	0e0b      	lsrs	r3, r1, #24
 8002120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002122:	3103      	adds	r1, #3
 8002124:	6838      	ldr	r0, [r7, #0]
 8002126:	4401      	add	r1, r0
 8002128:	b2d3      	uxtb	r3, r2
 800212a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800212c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	000a      	movs	r2, r1
 800213a:	2300      	movs	r3, #0
 800213c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800213e:	3104      	adds	r1, #4
 8002140:	6838      	ldr	r0, [r7, #0]
 8002142:	4401      	add	r1, r0
 8002144:	b2d3      	uxtb	r3, r2
 8002146:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002148:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	0a0a      	lsrs	r2, r1, #8
 8002156:	2300      	movs	r3, #0
 8002158:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800215a:	3105      	adds	r1, #5
 800215c:	6838      	ldr	r0, [r7, #0]
 800215e:	4401      	add	r1, r0
 8002160:	b2d3      	uxtb	r3, r2
 8002162:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002164:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	0c0a      	lsrs	r2, r1, #16
 8002172:	2300      	movs	r3, #0
 8002174:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002176:	3106      	adds	r1, #6
 8002178:	6838      	ldr	r0, [r7, #0]
 800217a:	4401      	add	r1, r0
 800217c:	b2d3      	uxtb	r3, r2
 800217e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002180:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	0e0a      	lsrs	r2, r1, #24
 800218e:	2300      	movs	r3, #0
 8002190:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002192:	3107      	adds	r1, #7
 8002194:	6838      	ldr	r0, [r7, #0]
 8002196:	4401      	add	r1, r0
 8002198:	b2d3      	uxtb	r3, r2
 800219a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	3308      	adds	r3, #8
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80021ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021b2:	6838      	ldr	r0, [r7, #0]
 80021b4:	4401      	add	r1, r0
 80021b6:	b2d3      	uxtb	r3, r2
 80021b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80021ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	0a02      	lsrs	r2, r0, #8
 80021c8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80021cc:	0a0b      	lsrs	r3, r1, #8
 80021ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021d0:	3101      	adds	r1, #1
 80021d2:	6838      	ldr	r0, [r7, #0]
 80021d4:	4401      	add	r1, r0
 80021d6:	b2d3      	uxtb	r3, r2
 80021d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80021da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	0c02      	lsrs	r2, r0, #16
 80021e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80021ec:	0c0b      	lsrs	r3, r1, #16
 80021ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021f0:	3102      	adds	r1, #2
 80021f2:	6838      	ldr	r0, [r7, #0]
 80021f4:	4401      	add	r1, r0
 80021f6:	b2d3      	uxtb	r3, r2
 80021f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80021fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	0e02      	lsrs	r2, r0, #24
 8002208:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800220c:	0e0b      	lsrs	r3, r1, #24
 800220e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002210:	3103      	adds	r1, #3
 8002212:	6838      	ldr	r0, [r7, #0]
 8002214:	4401      	add	r1, r0
 8002216:	b2d3      	uxtb	r3, r2
 8002218:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800221a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	000a      	movs	r2, r1
 8002228:	2300      	movs	r3, #0
 800222a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800222c:	3104      	adds	r1, #4
 800222e:	6838      	ldr	r0, [r7, #0]
 8002230:	4401      	add	r1, r0
 8002232:	b2d3      	uxtb	r3, r2
 8002234:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002236:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	0a0a      	lsrs	r2, r1, #8
 8002244:	2300      	movs	r3, #0
 8002246:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002248:	3105      	adds	r1, #5
 800224a:	6838      	ldr	r0, [r7, #0]
 800224c:	4401      	add	r1, r0
 800224e:	b2d3      	uxtb	r3, r2
 8002250:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002252:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	f04f 0300 	mov.w	r3, #0
 800225e:	0c0a      	lsrs	r2, r1, #16
 8002260:	2300      	movs	r3, #0
 8002262:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002264:	3106      	adds	r1, #6
 8002266:	6838      	ldr	r0, [r7, #0]
 8002268:	4401      	add	r1, r0
 800226a:	b2d3      	uxtb	r3, r2
 800226c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800226e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	0e0a      	lsrs	r2, r1, #24
 800227c:	2300      	movs	r3, #0
 800227e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002280:	3107      	adds	r1, #7
 8002282:	6838      	ldr	r0, [r7, #0]
 8002284:	4401      	add	r1, r0
 8002286:	b2d3      	uxtb	r3, r2
 8002288:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	3308      	adds	r3, #8
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002292:	4618      	mov	r0, r3
 8002294:	372c      	adds	r7, #44	; 0x2c
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800229e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80022a2:	b0eb      	sub	sp, #428	; 0x1ac
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80022aa:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022c0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80022c4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80022c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80022cc:	4413      	add	r3, r2
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2200      	movs	r2, #0
 80022d4:	461c      	mov	r4, r3
 80022d6:	4615      	mov	r5, r2
 80022d8:	ea40 0804 	orr.w	r8, r0, r4
 80022dc:	ea41 0905 	orr.w	r9, r1, r5
 80022e0:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80022e4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80022e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80022f2:	4413      	add	r3, r2
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2200      	movs	r2, #0
 80022fa:	469a      	mov	sl, r3
 80022fc:	4693      	mov	fp, r2
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800230a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800230e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002312:	ea40 0402 	orr.w	r4, r0, r2
 8002316:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800231a:	430b      	orrs	r3, r1
 800231c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002320:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002324:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002328:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800232c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002330:	1c9a      	adds	r2, r3, #2
 8002332:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002336:	4413      	add	r3, r2
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2200      	movs	r2, #0
 800233e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002342:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002352:	464c      	mov	r4, r9
 8002354:	0423      	lsls	r3, r4, #16
 8002356:	4644      	mov	r4, r8
 8002358:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800235c:	4644      	mov	r4, r8
 800235e:	0422      	lsls	r2, r4, #16
 8002360:	ea40 0402 	orr.w	r4, r0, r2
 8002364:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002368:	430b      	orrs	r3, r1
 800236a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800236e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002372:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002376:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800237a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800237e:	1cda      	adds	r2, r3, #3
 8002380:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002384:	4413      	add	r3, r2
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2200      	movs	r2, #0
 800238c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002390:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002394:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002398:	4623      	mov	r3, r4
 800239a:	0a1b      	lsrs	r3, r3, #8
 800239c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80023a0:	4623      	mov	r3, r4
 80023a2:	061b      	lsls	r3, r3, #24
 80023a4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80023a8:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80023ac:	4623      	mov	r3, r4
 80023ae:	4303      	orrs	r3, r0
 80023b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80023b4:	462b      	mov	r3, r5
 80023b6:	430b      	orrs	r3, r1
 80023b8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80023bc:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80023c0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80023c4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80023c8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80023cc:	1d1a      	adds	r2, r3, #4
 80023ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023d2:	4413      	add	r3, r2
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2200      	movs	r2, #0
 80023da:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80023de:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80023ee:	0023      	movs	r3, r4
 80023f0:	2200      	movs	r2, #0
 80023f2:	ea40 0402 	orr.w	r4, r0, r2
 80023f6:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80023fa:	430b      	orrs	r3, r1
 80023fc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002400:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002404:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002408:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800240c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002410:	1d5a      	adds	r2, r3, #5
 8002412:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002416:	4413      	add	r3, r2
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2200      	movs	r2, #0
 800241e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002422:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002432:	0223      	lsls	r3, r4, #8
 8002434:	2200      	movs	r2, #0
 8002436:	ea40 0402 	orr.w	r4, r0, r2
 800243a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800243e:	430b      	orrs	r3, r1
 8002440:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002444:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002448:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800244c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002450:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002454:	1d9a      	adds	r2, r3, #6
 8002456:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800245a:	4413      	add	r3, r2
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2200      	movs	r2, #0
 8002462:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002466:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002476:	0423      	lsls	r3, r4, #16
 8002478:	2200      	movs	r2, #0
 800247a:	ea40 0402 	orr.w	r4, r0, r2
 800247e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002482:	430b      	orrs	r3, r1
 8002484:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002488:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800248c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002490:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002494:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002498:	1dda      	adds	r2, r3, #7
 800249a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800249e:	4413      	add	r3, r2
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2200      	movs	r2, #0
 80024a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80024aa:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	f04f 0300 	mov.w	r3, #0
 80024b6:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80024ba:	0623      	lsls	r3, r4, #24
 80024bc:	2200      	movs	r2, #0
 80024be:	ea40 0402 	orr.w	r4, r0, r2
 80024c2:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80024c6:	430b      	orrs	r3, r1
 80024c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80024cc:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80024d0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80024d4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80024d8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80024dc:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80024e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80024e4:	3308      	adds	r3, #8
 80024e6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80024f6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80024fa:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80024fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002502:	4413      	add	r3, r2
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2200      	movs	r2, #0
 800250a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800250e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002512:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002516:	4623      	mov	r3, r4
 8002518:	4303      	orrs	r3, r0
 800251a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800251e:	462b      	mov	r3, r5
 8002520:	430b      	orrs	r3, r1
 8002522:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002526:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800252a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800252e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002532:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800253c:	4413      	add	r3, r2
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2200      	movs	r2, #0
 8002544:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002548:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002558:	464c      	mov	r4, r9
 800255a:	0223      	lsls	r3, r4, #8
 800255c:	4644      	mov	r4, r8
 800255e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002562:	4644      	mov	r4, r8
 8002564:	0222      	lsls	r2, r4, #8
 8002566:	ea40 0402 	orr.w	r4, r0, r2
 800256a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800256e:	430b      	orrs	r3, r1
 8002570:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002574:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002578:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800257c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002580:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002584:	1c9a      	adds	r2, r3, #2
 8002586:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800258a:	4413      	add	r3, r2
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2200      	movs	r2, #0
 8002592:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002596:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80025a6:	464c      	mov	r4, r9
 80025a8:	0423      	lsls	r3, r4, #16
 80025aa:	4644      	mov	r4, r8
 80025ac:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80025b0:	4644      	mov	r4, r8
 80025b2:	0422      	lsls	r2, r4, #16
 80025b4:	ea40 0402 	orr.w	r4, r0, r2
 80025b8:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80025bc:	430b      	orrs	r3, r1
 80025be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80025c2:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80025c6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025ca:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80025ce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025d2:	1cda      	adds	r2, r3, #3
 80025d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025d8:	4413      	add	r3, r2
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2200      	movs	r2, #0
 80025e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80025e4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80025e8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80025ec:	4623      	mov	r3, r4
 80025ee:	0a1b      	lsrs	r3, r3, #8
 80025f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80025f4:	4623      	mov	r3, r4
 80025f6:	061b      	lsls	r3, r3, #24
 80025f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025fc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002600:	4623      	mov	r3, r4
 8002602:	4303      	orrs	r3, r0
 8002604:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002608:	462b      	mov	r3, r5
 800260a:	430b      	orrs	r3, r1
 800260c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002610:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002614:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002618:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800261c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002620:	1d1a      	adds	r2, r3, #4
 8002622:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002626:	4413      	add	r3, r2
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2200      	movs	r2, #0
 800262e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002632:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002642:	0023      	movs	r3, r4
 8002644:	2200      	movs	r2, #0
 8002646:	ea40 0402 	orr.w	r4, r0, r2
 800264a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800264e:	430b      	orrs	r3, r1
 8002650:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002654:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002658:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800265c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002660:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002664:	1d5a      	adds	r2, r3, #5
 8002666:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800266a:	4413      	add	r3, r2
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2200      	movs	r2, #0
 8002672:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002676:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	f04f 0300 	mov.w	r3, #0
 8002682:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002686:	0223      	lsls	r3, r4, #8
 8002688:	2200      	movs	r2, #0
 800268a:	ea40 0402 	orr.w	r4, r0, r2
 800268e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002692:	430b      	orrs	r3, r1
 8002694:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002698:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800269c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80026a0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80026a4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026a8:	1d9a      	adds	r2, r3, #6
 80026aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026ae:	4413      	add	r3, r2
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2200      	movs	r2, #0
 80026b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80026ca:	0423      	lsls	r3, r4, #16
 80026cc:	2200      	movs	r2, #0
 80026ce:	ea40 0402 	orr.w	r4, r0, r2
 80026d2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80026d6:	430b      	orrs	r3, r1
 80026d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80026dc:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80026e0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80026e4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80026e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026ec:	1dda      	adds	r2, r3, #7
 80026ee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026f2:	4413      	add	r3, r2
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2200      	movs	r2, #0
 80026fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80026fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800270e:	0623      	lsls	r3, r4, #24
 8002710:	2200      	movs	r2, #0
 8002712:	ea40 0402 	orr.w	r4, r0, r2
 8002716:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800271a:	430b      	orrs	r3, r1
 800271c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002720:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002724:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002728:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800272c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002730:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002734:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002738:	3308      	adds	r3, #8
 800273a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800274a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800274e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002752:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002756:	4413      	add	r3, r2
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2200      	movs	r2, #0
 800275e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002762:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002766:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800276a:	4623      	mov	r3, r4
 800276c:	4303      	orrs	r3, r0
 800276e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002770:	462b      	mov	r3, r5
 8002772:	430b      	orrs	r3, r1
 8002774:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002776:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800277a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800277e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002782:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800278c:	4413      	add	r3, r2
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2200      	movs	r2, #0
 8002794:	673b      	str	r3, [r7, #112]	; 0x70
 8002796:	677a      	str	r2, [r7, #116]	; 0x74
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80027a4:	464c      	mov	r4, r9
 80027a6:	0223      	lsls	r3, r4, #8
 80027a8:	4644      	mov	r4, r8
 80027aa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80027ae:	4644      	mov	r4, r8
 80027b0:	0222      	lsls	r2, r4, #8
 80027b2:	ea40 0402 	orr.w	r4, r0, r2
 80027b6:	66bc      	str	r4, [r7, #104]	; 0x68
 80027b8:	430b      	orrs	r3, r1
 80027ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027bc:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80027c0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027c4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80027c8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027cc:	1c9a      	adds	r2, r3, #2
 80027ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027d2:	4413      	add	r3, r2
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2200      	movs	r2, #0
 80027da:	663b      	str	r3, [r7, #96]	; 0x60
 80027dc:	667a      	str	r2, [r7, #100]	; 0x64
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80027ea:	464c      	mov	r4, r9
 80027ec:	0423      	lsls	r3, r4, #16
 80027ee:	4644      	mov	r4, r8
 80027f0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80027f4:	4644      	mov	r4, r8
 80027f6:	0422      	lsls	r2, r4, #16
 80027f8:	ea40 0402 	orr.w	r4, r0, r2
 80027fc:	65bc      	str	r4, [r7, #88]	; 0x58
 80027fe:	430b      	orrs	r3, r1
 8002800:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002802:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002806:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800280a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800280e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002812:	1cda      	adds	r2, r3, #3
 8002814:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002818:	4413      	add	r3, r2
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2200      	movs	r2, #0
 8002820:	653b      	str	r3, [r7, #80]	; 0x50
 8002822:	657a      	str	r2, [r7, #84]	; 0x54
 8002824:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002828:	4623      	mov	r3, r4
 800282a:	0a1b      	lsrs	r3, r3, #8
 800282c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800282e:	4623      	mov	r3, r4
 8002830:	061b      	lsls	r3, r3, #24
 8002832:	64bb      	str	r3, [r7, #72]	; 0x48
 8002834:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002838:	4623      	mov	r3, r4
 800283a:	4303      	orrs	r3, r0
 800283c:	643b      	str	r3, [r7, #64]	; 0x40
 800283e:	462b      	mov	r3, r5
 8002840:	430b      	orrs	r3, r1
 8002842:	647b      	str	r3, [r7, #68]	; 0x44
 8002844:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002848:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800284c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002850:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002854:	1d1a      	adds	r2, r3, #4
 8002856:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800285a:	4413      	add	r3, r2
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2200      	movs	r2, #0
 8002862:	63bb      	str	r3, [r7, #56]	; 0x38
 8002864:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002870:	0023      	movs	r3, r4
 8002872:	2200      	movs	r2, #0
 8002874:	ea40 0402 	orr.w	r4, r0, r2
 8002878:	633c      	str	r4, [r7, #48]	; 0x30
 800287a:	430b      	orrs	r3, r1
 800287c:	637b      	str	r3, [r7, #52]	; 0x34
 800287e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002882:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002886:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800288a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800288e:	1d5a      	adds	r2, r3, #5
 8002890:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002894:	4413      	add	r3, r2
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2200      	movs	r2, #0
 800289c:	62bb      	str	r3, [r7, #40]	; 0x28
 800289e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80028aa:	0223      	lsls	r3, r4, #8
 80028ac:	2200      	movs	r2, #0
 80028ae:	ea40 0402 	orr.w	r4, r0, r2
 80028b2:	623c      	str	r4, [r7, #32]
 80028b4:	430b      	orrs	r3, r1
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
 80028b8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80028bc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80028c0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80028c4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028c8:	3306      	adds	r3, #6
 80028ca:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80028ce:	4413      	add	r3, r2
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2200      	movs	r2, #0
 80028d6:	61bb      	str	r3, [r7, #24]
 80028d8:	61fa      	str	r2, [r7, #28]
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	69bc      	ldr	r4, [r7, #24]
 80028e4:	0423      	lsls	r3, r4, #16
 80028e6:	2200      	movs	r2, #0
 80028e8:	ea40 0402 	orr.w	r4, r0, r2
 80028ec:	613c      	str	r4, [r7, #16]
 80028ee:	430b      	orrs	r3, r1
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80028f6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80028fa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80028fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002902:	3307      	adds	r3, #7
 8002904:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002908:	4413      	add	r3, r2
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2200      	movs	r2, #0
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	60fa      	str	r2, [r7, #12]
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	68bc      	ldr	r4, [r7, #8]
 800291e:	0623      	lsls	r3, r4, #24
 8002920:	2200      	movs	r2, #0
 8002922:	ea40 0402 	orr.w	r4, r0, r2
 8002926:	603c      	str	r4, [r7, #0]
 8002928:	430b      	orrs	r3, r1
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002930:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002934:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002938:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 800293c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002940:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002944:	3308      	adds	r3, #8
 8002946:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 800294a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 800294e:	4618      	mov	r0, r3
 8002950:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002954:	46bd      	mov	sp, r7
 8002956:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800295a:	4770      	bx	lr

0800295c <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	4b03      	ldr	r3, [pc, #12]	; (8002974 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	0800dcf8 	.word	0x0800dcf8

08002978 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	0800dd10 	.word	0x0800dd10

08002994 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fe fab4 	bl	8000f0c <_ZN3ros3MsgC1Ev>
 80029a4:	4a08      	ldr	r2, [pc, #32]	; (80029c8 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3308      	adds	r3, #8
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fada 	bl	8001f68 <_ZN13geometry_msgs7Vector3C1Ev>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3328      	adds	r3, #40	; 0x28
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fad5 	bl	8001f68 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	0800de18 	.word	0x0800de18

080029cc <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f103 0008 	add.w	r0, r3, #8
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	4413      	add	r3, r2
 80029e6:	4619      	mov	r1, r3
 80029e8:	f7ff fae6 	bl	8001fb8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4413      	add	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	4413      	add	r3, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	f7ff fad9 	bl	8001fb8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002a06:	4602      	mov	r2, r0
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
      return offset;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
    }
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f103 0008 	add.w	r0, r3, #8
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	4413      	add	r3, r2
 8002a32:	4619      	mov	r1, r3
 8002a34:	f7ff fc33 	bl	800229e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f7ff fc26 	bl	800229e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002a52:	4602      	mov	r2, r0
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4413      	add	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]
     return offset;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
    }
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	0800dd34 	.word	0x0800dd34

08002a80 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	0800dd48 	.word	0x0800dd48

08002a9c <_Z12vel_callbackRKN13geometry_msgs5TwistE>:
ros::NodeHandle nh;
int n=0;
geometry_msgs::Twist speed;
ros::Publisher pub("speed_fromSTM",&speed);
void vel_callback(const geometry_msgs::Twist &msg)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002aaa:	490a      	ldr	r1, [pc, #40]	; (8002ad4 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 8002aac:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002ab6:	4908      	ldr	r1, [pc, #32]	; (8002ad8 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x3c>)
 8002ab8:	e9c1 2300 	strd	r2, r3, [r1]
	W=msg.angular.z;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002ac2:	4906      	ldr	r1, [pc, #24]	; (8002adc <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x40>)
 8002ac4:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	240003e0 	.word	0x240003e0
 8002ad8:	240003e8 	.word	0x240003e8
 8002adc:	240003f0 	.word	0x240003f0

08002ae0 <HAL_UART_TxCpltCallback>:

ros::Subscriber<geometry_msgs::Twist> sub("cmdvel_toSTM",vel_callback);


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
nh.getHardware()->flush();
 8002ae8:	4805      	ldr	r0, [pc, #20]	; (8002b00 <HAL_UART_TxCpltCallback+0x20>)
 8002aea:	f000 f933 	bl	8002d54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff f98b 	bl	8001e0c <_ZN13STM32Hardware5flushEv>
 }
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	24000414 	.word	0x24000414

08002b04 <setup>:
 //void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 //{
 //nh.getHardware()->reset_rbuf();
 //}
 void setup(void)
 {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
 nh.initNode();
 8002b08:	4806      	ldr	r0, [pc, #24]	; (8002b24 <setup+0x20>)
 8002b0a:	f000 f92f 	bl	8002d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
 nh.subscribe(sub);
 8002b0e:	4906      	ldr	r1, [pc, #24]	; (8002b28 <setup+0x24>)
 8002b10:	4804      	ldr	r0, [pc, #16]	; (8002b24 <setup+0x20>)
 8002b12:	f000 f948 	bl	8002da6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
 nh.advertise(pub);
 8002b16:	4905      	ldr	r1, [pc, #20]	; (8002b2c <setup+0x28>)
 8002b18:	4802      	ldr	r0, [pc, #8]	; (8002b24 <setup+0x20>)
 8002b1a:	f000 f96f 	bl	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
 }
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	24000414 	.word	0x24000414
 8002b28:	24000db0 	.word	0x24000db0
 8002b2c:	24000d98 	.word	0x24000d98

08002b30 <loop>:
 void loop(void)
 {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
 nh.spinOnce();
 8002b34:	4802      	ldr	r0, [pc, #8]	; (8002b40 <loop+0x10>)
 8002b36:	f000 f991 	bl	8002e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
 }
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	24000414 	.word	0x24000414

08002b44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d80d      	bhi.n	8002b74 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	fa22 f103 	lsr.w	r1, r2, r3
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	b2ca      	uxtb	r2, r1
 8002b6a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	e7ee      	b.n	8002b52 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d811      	bhi.n	8002bbe <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6839      	ldr	r1, [r7, #0]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	440a      	add	r2, r1
 8002ba4:	7812      	ldrb	r2, [r2, #0]
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	00d2      	lsls	r2, r2, #3
 8002bac:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	e7ea      	b.n	8002b94 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002bbe:	bf00      	nop
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	0800de60 	.word	0x0800de60

08002bec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ffe8 	bl	8002bcc <_ZN3ros15NodeHandleBase_C1Ev>
 8002bfc:	4a3a      	ldr	r2, [pc, #232]	; (8002ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3304      	adds	r3, #4
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff f89a 	bl	8001d40 <_ZN13STM32HardwareC1Ev>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe fcea 	bl	80015f4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2b18      	cmp	r3, #24
 8002c28:	d80b      	bhi.n	8002c42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	2200      	movs	r2, #0
 8002c38:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	e7f0      	b.n	8002c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	2b18      	cmp	r3, #24
 8002c4a:	d80a      	bhi.n	8002c62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002c54:	2100      	movs	r1, #0
 8002c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	e7f1      	b.n	8002c46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c6c:	d20a      	bcs.n	8002c84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4413      	add	r3, r2
 8002c74:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	e7f0      	b.n	8002c66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002c84:	2300      	movs	r3, #0
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c8e:	d20a      	bcs.n	8002ca6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4413      	add	r3, r2
 8002c96:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	e7f0      	b.n	8002c88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	0800de04 	.word	0x0800de04

08002cec <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	0800de48 	.word	0x0800de48

08002d0c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ffe5 	bl	8002cec <_ZN3ros11Subscriber_C1Ev>
 8002d22:	4a0b      	ldr	r2, [pc, #44]	; (8002d50 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3310      	adds	r3, #16
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fe31 	bl	8002994 <_ZN13geometry_msgs5TwistC1Ev>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	659a      	str	r2, [r3, #88]	; 0x58
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	609a      	str	r2, [r3, #8]
  };
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	0800ddec 	.word	0x0800ddec

08002d54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3304      	adds	r3, #4
  }
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3304      	adds	r3, #4
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe fffd 	bl	8001d78 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8002da6:	b480      	push	{r7}
 8002da8:	b085      	sub	sp, #20
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b18      	cmp	r3, #24
 8002db8:	dc19      	bgt.n	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10d      	bne.n	8002de6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8002dca:	6839      	ldr	r1, [r7, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	605a      	str	r2, [r3, #4]
        return true;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e004      	b.n	8002df0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	3301      	adds	r3, #1
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	e7e2      	b.n	8002db4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8002dee:	2300      	movs	r3, #0
  }
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b18      	cmp	r3, #24
 8002e0e:	dc1e      	bgt.n	8002e4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d111      	bne.n	8002e46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	60da      	str	r2, [r3, #12]
        return true;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e004      	b.n	8002e50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	e7dd      	b.n	8002e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8002e4e:	2300      	movs	r3, #0
  }
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3304      	adds	r3, #4
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff f871 	bl	8001f50 <_ZN13STM32Hardware4timeEv>
 8002e6e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d903      	bls.n	8002e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d009      	beq.n	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d903      	bls.n	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d014      	beq.n	8002edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff f84a 	bl	8001f50 <_ZN13STM32Hardware4timeEv>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1ad2      	subs	r2, r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	bf8c      	ite	hi
 8002ecc:	2301      	movhi	r3, #1
 8002ece:	2300      	movls	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8002ed6:	f06f 0301 	mvn.w	r3, #1
 8002eda:	e194      	b.n	8003206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3304      	adds	r3, #4
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fe ff65 	bl	8001db0 <_ZN13STM32Hardware4readEv>
 8002ee6:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f2c0 8174 	blt.w	80031d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	441a      	add	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f06:	2b07      	cmp	r3, #7
 8002f08:	d11e      	bne.n	8002f48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8002f10:	1c59      	adds	r1, r3, #1
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	b2d1      	uxtb	r1, r2
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	4413      	add	r3, r2
 8002f20:	460a      	mov	r2, r1
 8002f22:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002f2c:	1e5a      	subs	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1b4      	bne.n	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2208      	movs	r2, #8
 8002f42:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002f46:	e7af      	b.n	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d128      	bne.n	8002fa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2bff      	cmp	r3, #255	; 0xff
 8002f56:	d10d      	bne.n	8002f74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f103 0214 	add.w	r2, r3, #20
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002f72:	e799      	b.n	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fe ffe9 	bl	8001f50 <_ZN13STM32Hardware4timeEv>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	bf8c      	ite	hi
 8002f8c:	2301      	movhi	r3, #1
 8002f8e:	2300      	movls	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d088      	beq.n	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8002f9e:	f06f 0301 	mvn.w	r3, #1
 8002fa2:	e130      	b.n	8003206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d118      	bne.n	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2bfe      	cmp	r3, #254	; 0xfe
 8002fb2:	d107      	bne.n	8002fc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002fc2:	e771      	b.n	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f47f af68 	bne.w	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f918 	bl	800320e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002fde:	e763      	b.n	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d113      	bne.n	8003012 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003010:	e74a      	b.n	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003018:	2b03      	cmp	r3, #3
 800301a:	d110      	bne.n	800303e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	021b      	lsls	r3, r3, #8
 8003026:	441a      	add	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800303c:	e734      	b.n	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003044:	2b04      	cmp	r3, #4
 8003046:	d116      	bne.n	8003076 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800304e:	425a      	negs	r2, r3
 8003050:	b2db      	uxtb	r3, r3
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	bf58      	it	pl
 8003056:	4253      	negpl	r3, r2
 8003058:	2bff      	cmp	r3, #255	; 0xff
 800305a:	d107      	bne.n	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800306a:	e71d      	b.n	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003074:	e718      	b.n	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800307c:	2b05      	cmp	r3, #5
 800307e:	d10f      	bne.n	80030a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800309e:	e703      	b.n	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d117      	bne.n	80030da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	441a      	add	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2207      	movs	r2, #7
 80030c0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f47f aeec 	bne.w	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2208      	movs	r2, #8
 80030d4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80030d8:	e6e6      	b.n	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	f47f aee1 	bne.w	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80030f4:	425a      	negs	r2, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	bf58      	it	pl
 80030fc:	4253      	negpl	r3, r2
 80030fe:	2bff      	cmp	r3, #255	; 0xff
 8003100:	f47f aed2 	bne.w	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800310a:	2b00      	cmp	r3, #0
 800310c:	d110      	bne.n	8003130 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f87d 	bl	800320e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f898 	bl	800324a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800312a:	f04f 33ff 	mov.w	r3, #4294967295
 800312e:	e06a      	b.n	8003206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003136:	2b0a      	cmp	r3, #10
 8003138:	d107      	bne.n	800314a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003140:	4619      	mov	r1, r3
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f960 	bl	8003408 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003148:	e6ae      	b.n	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003150:	2b06      	cmp	r3, #6
 8003152:	d10e      	bne.n	8003172 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003160:	4619      	mov	r1, r3
 8003162:	4610      	mov	r0, r2
 8003164:	f7fe fb7b 	bl	800185e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003170:	e69a      	b.n	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003178:	2b0b      	cmp	r3, #11
 800317a:	d104      	bne.n	8003186 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003184:	e690      	b.n	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800318c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800319a:	2b00      	cmp	r3, #0
 800319c:	f43f ae84 	beq.w	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80031a6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f202 2222 	addw	r2, r2, #546	; 0x222
 80031b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80031ba:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80031c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80031d2:	4611      	mov	r1, r2
 80031d4:	4798      	blx	r3
    while (true)
 80031d6:	e667      	b.n	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80031d8:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00f      	beq.n	8003204 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d906      	bls.n	8003204 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f809 	bl	800320e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8003204:	2300      	movs	r3, #0
  }
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800320e:	b580      	push	{r7, lr}
 8003210:	b086      	sub	sp, #24
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003216:	f107 030c 	add.w	r3, r7, #12
 800321a:	4618      	mov	r0, r3
 800321c:	f7fd fe86 	bl	8000f2c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f107 020c 	add.w	r2, r7, #12
 800322a:	210a      	movs	r1, #10
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	4798      	blx	r3
    rt_time = hardware_.time();
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3304      	adds	r3, #4
 8003234:	4618      	mov	r0, r3
 8003236:	f7fe fe8b 	bl	8001f50 <_ZN13STM32Hardware4timeEv>
 800323a:	4602      	mov	r2, r0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003242:	bf00      	nop
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800324a:	b590      	push	{r4, r7, lr}
 800324c:	b08b      	sub	sp, #44	; 0x2c
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003252:	f107 030c 	add.w	r3, r7, #12
 8003256:	4618      	mov	r0, r3
 8003258:	f7fd ff58 	bl	800110c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800325c:	2300      	movs	r3, #0
 800325e:	627b      	str	r3, [r7, #36]	; 0x24
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	2b18      	cmp	r3, #24
 8003264:	dc63      	bgt.n	800332e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d056      	beq.n	8003326 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	b29b      	uxth	r3, r3
 800328a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	6859      	ldr	r1, [r3, #4]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3308      	adds	r3, #8
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4608      	mov	r0, r1
 80032c6:	4798      	blx	r3
 80032c8:	4603      	mov	r3, r0
 80032ca:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	6859      	ldr	r1, [r3, #4]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	330c      	adds	r3, #12
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4608      	mov	r0, r1
 80032f4:	4798      	blx	r3
 80032f6:	4603      	mov	r3, r0
 80032f8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80032fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032fe:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681c      	ldr	r4, [r3, #0]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	4618      	mov	r0, r3
 8003316:	f7fe fc46 	bl	8001ba6 <_ZN3ros9Publisher15getEndpointTypeEv>
 800331a:	4601      	mov	r1, r0
 800331c:	f107 030c 	add.w	r3, r7, #12
 8003320:	461a      	mov	r2, r3
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	3301      	adds	r3, #1
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
 800332c:	e798      	b.n	8003260 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800332e:	2300      	movs	r3, #0
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	2b18      	cmp	r3, #24
 8003336:	dc5f      	bgt.n	80033f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d053      	beq.n	80033f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	b29b      	uxth	r3, r3
 8003358:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003372:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800337e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3308      	adds	r3, #8
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4608      	mov	r0, r1
 800338a:	4798      	blx	r3
 800338c:	4603      	mov	r3, r0
 800338e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003394:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003398:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80033a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	330c      	adds	r3, #12
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4608      	mov	r0, r1
 80033b0:	4798      	blx	r3
 80033b2:	4603      	mov	r3, r0
 80033b4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80033b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033ba:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681c      	ldr	r4, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80033ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80033d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3304      	adds	r3, #4
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4608      	mov	r0, r1
 80033e2:	4798      	blx	r3
 80033e4:	4601      	mov	r1, r0
 80033e6:	f107 030c 	add.w	r3, r7, #12
 80033ea:	461a      	mov	r2, r3
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	3301      	adds	r3, #1
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
 80033f6:	e79c      	b.n	8003332 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003400:	bf00      	nop
 8003402:	372c      	adds	r7, #44	; 0x2c
 8003404:	46bd      	mov	sp, r7
 8003406:	bd90      	pop	{r4, r7, pc}

08003408 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003412:	f107 0308 	add.w	r3, r7, #8
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd fd88 	bl	8000f2c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3304      	adds	r3, #4
 8003420:	4618      	mov	r0, r3
 8003422:	f7fe fd95 	bl	8001f50 <_ZN13STM32Hardware4timeEv>
 8003426:	4602      	mov	r2, r0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003432:	f107 0308 	add.w	r3, r7, #8
 8003436:	6839      	ldr	r1, [r7, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7fd fde7 	bl	800100c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	4915      	ldr	r1, [pc, #84]	; (8003498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003444:	fba1 1303 	umull	r1, r3, r1, r3
 8003448:	099b      	lsrs	r3, r3, #6
 800344a:	4413      	add	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800344e:	6939      	ldr	r1, [r7, #16]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4b11      	ldr	r3, [pc, #68]	; (8003498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003454:	fba3 0302 	umull	r0, r3, r3, r2
 8003458:	099b      	lsrs	r3, r3, #6
 800345a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800345e:	fb00 f303 	mul.w	r3, r0, r3
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	4a0d      	ldr	r2, [pc, #52]	; (800349c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003466:	fb02 f303 	mul.w	r3, r2, r3
 800346a:	440b      	add	r3, r1
 800346c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800346e:	f107 0308 	add.w	r3, r7, #8
 8003472:	3304      	adds	r3, #4
 8003474:	4619      	mov	r1, r3
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f8a6 	bl	80035c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3304      	adds	r3, #4
 8003480:	4618      	mov	r0, r3
 8003482:	f7fe fd65 	bl	8001f50 <_ZN13STM32Hardware4timeEv>
 8003486:	4602      	mov	r2, r0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800348e:	bf00      	nop
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	10624dd3 	.word	0x10624dd3
 800349c:	000f4240 	.word	0x000f4240

080034a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b63      	cmp	r3, #99	; 0x63
 80034b0:	dd09      	ble.n	80034c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80034b8:	f083 0301 	eor.w	r3, r3, #1
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e079      	b.n	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80034d2:	3207      	adds	r2, #7
 80034d4:	4611      	mov	r1, r2
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	4798      	blx	r3
 80034da:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	22ff      	movs	r2, #255	; 0xff
 80034e0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	22fe      	movs	r2, #254	; 0xfe
 80034e8:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	0a1b      	lsrs	r3, r3, #8
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003512:	4413      	add	r3, r2
 8003514:	b2db      	uxtb	r3, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	b2da      	uxtb	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	b2da      	uxtb	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	b21b      	sxth	r3, r3
 800352e:	121b      	asrs	r3, r3, #8
 8003530:	b21b      	sxth	r3, r3
 8003532:	b2da      	uxtb	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800353e:	2305      	movs	r3, #5
 8003540:	61bb      	str	r3, [r7, #24]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	3306      	adds	r3, #6
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	429a      	cmp	r2, r3
 800354a:	dc0d      	bgt.n	8003568 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	4413      	add	r3, r2
 8003552:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	4413      	add	r3, r2
 800355e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	3301      	adds	r3, #1
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	e7ec      	b.n	8003542 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	3307      	adds	r3, #7
 800356c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	425a      	negs	r2, r3
 8003572:	b2db      	uxtb	r3, r3
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	bf58      	it	pl
 8003578:	4253      	negpl	r3, r2
 800357a:	b2da      	uxtb	r2, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	1c59      	adds	r1, r3, #1
 8003580:	6179      	str	r1, [r7, #20]
 8003582:	43d2      	mvns	r2, r2
 8003584:	b2d1      	uxtb	r1, r2
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4413      	add	r3, r2
 800358a:	460a      	mov	r2, r1
 800358c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003596:	dc0a      	bgt.n	80035ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	1d18      	adds	r0, r3, #4
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	4619      	mov	r1, r3
 80035a6:	f7fe fc8d 	bl	8001ec4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	e005      	b.n	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80035ae:	4905      	ldr	r1, [pc, #20]	; (80035c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f849 	bl	8003648 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80035b6:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80035ba:	4618      	mov	r0, r3
 80035bc:	3720      	adds	r7, #32
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	0800dd6c 	.word	0x0800dd6c

080035c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3304      	adds	r3, #4
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe fcba 	bl	8001f50 <_ZN13STM32Hardware4timeEv>
 80035dc:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4915      	ldr	r1, [pc, #84]	; (800363c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80035e6:	fba1 1303 	umull	r1, r3, r1, r3
 80035ea:	099b      	lsrs	r3, r3, #6
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	1e5a      	subs	r2, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	6859      	ldr	r1, [r3, #4]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4b0f      	ldr	r3, [pc, #60]	; (800363c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80035fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003602:	099b      	lsrs	r3, r3, #6
 8003604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003608:	fb00 f303 	mul.w	r3, r0, r3
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	4a0c      	ldr	r2, [pc, #48]	; (8003640 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8003610:	fb02 f303 	mul.w	r3, r2, r3
 8003614:	1aca      	subs	r2, r1, r3
 8003616:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003618:	4413      	add	r3, r2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800362c:	4619      	mov	r1, r3
 800362e:	4610      	mov	r0, r2
 8003630:	f7fc fff6 	bl	8000620 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	10624dd3 	.word	0x10624dd3
 8003640:	000f4240 	.word	0x000f4240
 8003644:	3b9aca00 	.word	0x3b9aca00

08003648 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	2103      	movs	r1, #3
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f804 	bl	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800365c:	bf00      	nop
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	460b      	mov	r3, r1
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003672:	f107 0314 	add.w	r3, r7, #20
 8003676:	4618      	mov	r0, r3
 8003678:	f7fd ff0c 	bl	8001494 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800367c:	7afb      	ldrb	r3, [r7, #11]
 800367e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f107 0214 	add.w	r2, r7, #20
 800368e:	2107      	movs	r1, #7
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	4798      	blx	r3
  }
 8003694:	bf00      	nop
 8003696:	3720      	adds	r7, #32
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <_Z41__static_initialization_and_destruction_0ii>:
   }
   /* USER CODE BEGIN USART3_Init 2 */

   /* USER CODE END USART3_Init 2 */

 }
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d116      	bne.n	80036da <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d111      	bne.n	80036da <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 80036b6:	480b      	ldr	r0, [pc, #44]	; (80036e4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80036b8:	f7ff fa98 	bl	8002bec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Twist speed;
 80036bc:	480a      	ldr	r0, [pc, #40]	; (80036e8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80036be:	f7ff f969 	bl	8002994 <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher pub("speed_fromSTM",&speed);
 80036c2:	2300      	movs	r3, #0
 80036c4:	4a08      	ldr	r2, [pc, #32]	; (80036e8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80036c6:	4909      	ldr	r1, [pc, #36]	; (80036ec <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80036c8:	4809      	ldr	r0, [pc, #36]	; (80036f0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80036ca:	f7fe fa55 	bl	8001b78 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub("cmdvel_toSTM",vel_callback);
 80036ce:	2301      	movs	r3, #1
 80036d0:	4a08      	ldr	r2, [pc, #32]	; (80036f4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80036d2:	4909      	ldr	r1, [pc, #36]	; (80036f8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80036d4:	4809      	ldr	r0, [pc, #36]	; (80036fc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80036d6:	f7ff fb19 	bl	8002d0c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
 }
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	24000414 	.word	0x24000414
 80036e8:	24000d50 	.word	0x24000d50
 80036ec:	0800dda8 	.word	0x0800dda8
 80036f0:	24000d98 	.word	0x24000d98
 80036f4:	08002a9d 	.word	0x08002a9d
 80036f8:	0800ddb8 	.word	0x0800ddb8
 80036fc:	24000db0 	.word	0x24000db0

08003700 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3310      	adds	r3, #16
 800370e:	6839      	ldr	r1, [r7, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff f981 	bl	8002a18 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	3210      	adds	r2, #16
 800371e:	4610      	mov	r0, r2
 8003720:	4798      	blx	r3
  }
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8003736:	4618      	mov	r0, r3
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3310      	adds	r3, #16
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff f988 	bl	8002a64 <_ZN13geometry_msgs5Twist7getTypeEv>
 8003754:	4603      	mov	r3, r0
  }
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3310      	adds	r3, #16
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff f988 	bl	8002a80 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8003770:	4603      	mov	r3, r0
  }
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
    return configured_;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <_GLOBAL__sub_I_nh>:
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
 8003798:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800379c:	2001      	movs	r0, #1
 800379e:	f7ff ff7d 	bl	800369c <_Z41__static_initialization_and_destruction_0ii>
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_MspInit+0x30>)
 80037ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037b0:	4a08      	ldr	r2, [pc, #32]	; (80037d4 <HAL_MspInit+0x30>)
 80037b2:	f043 0302 	orr.w	r3, r3, #2
 80037b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80037ba:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <HAL_MspInit+0x30>)
 80037bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	607b      	str	r3, [r7, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	58024400 	.word	0x58024400

080037d8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08e      	sub	sp, #56	; 0x38
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a4f      	ldr	r2, [pc, #316]	; (8003934 <HAL_TIM_Encoder_MspInit+0x15c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d12f      	bne.n	800385a <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037fa:	4b4f      	ldr	r3, [pc, #316]	; (8003938 <HAL_TIM_Encoder_MspInit+0x160>)
 80037fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003800:	4a4d      	ldr	r2, [pc, #308]	; (8003938 <HAL_TIM_Encoder_MspInit+0x160>)
 8003802:	f043 0301 	orr.w	r3, r3, #1
 8003806:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800380a:	4b4b      	ldr	r3, [pc, #300]	; (8003938 <HAL_TIM_Encoder_MspInit+0x160>)
 800380c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	623b      	str	r3, [r7, #32]
 8003816:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003818:	4b47      	ldr	r3, [pc, #284]	; (8003938 <HAL_TIM_Encoder_MspInit+0x160>)
 800381a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800381e:	4a46      	ldr	r2, [pc, #280]	; (8003938 <HAL_TIM_Encoder_MspInit+0x160>)
 8003820:	f043 0310 	orr.w	r3, r3, #16
 8003824:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003828:	4b43      	ldr	r3, [pc, #268]	; (8003938 <HAL_TIM_Encoder_MspInit+0x160>)
 800382a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003836:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383c:	2302      	movs	r3, #2
 800383e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003840:	2300      	movs	r3, #0
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003844:	2300      	movs	r3, #0
 8003846:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003848:	2301      	movs	r3, #1
 800384a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800384c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003850:	4619      	mov	r1, r3
 8003852:	483a      	ldr	r0, [pc, #232]	; (800393c <HAL_TIM_Encoder_MspInit+0x164>)
 8003854:	f003 fb3e 	bl	8006ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8003858:	e067      	b.n	800392a <HAL_TIM_Encoder_MspInit+0x152>
  else if(htim_encoder->Instance==TIM4)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a38      	ldr	r2, [pc, #224]	; (8003940 <HAL_TIM_Encoder_MspInit+0x168>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d12f      	bne.n	80038c4 <HAL_TIM_Encoder_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003864:	4b34      	ldr	r3, [pc, #208]	; (8003938 <HAL_TIM_Encoder_MspInit+0x160>)
 8003866:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800386a:	4a33      	ldr	r2, [pc, #204]	; (8003938 <HAL_TIM_Encoder_MspInit+0x160>)
 800386c:	f043 0304 	orr.w	r3, r3, #4
 8003870:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003874:	4b30      	ldr	r3, [pc, #192]	; (8003938 <HAL_TIM_Encoder_MspInit+0x160>)
 8003876:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003882:	4b2d      	ldr	r3, [pc, #180]	; (8003938 <HAL_TIM_Encoder_MspInit+0x160>)
 8003884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003888:	4a2b      	ldr	r2, [pc, #172]	; (8003938 <HAL_TIM_Encoder_MspInit+0x160>)
 800388a:	f043 0308 	orr.w	r3, r3, #8
 800388e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003892:	4b29      	ldr	r3, [pc, #164]	; (8003938 <HAL_TIM_Encoder_MspInit+0x160>)
 8003894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80038a0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a6:	2302      	movs	r3, #2
 80038a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ae:	2300      	movs	r3, #0
 80038b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80038b2:	2302      	movs	r3, #2
 80038b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ba:	4619      	mov	r1, r3
 80038bc:	4821      	ldr	r0, [pc, #132]	; (8003944 <HAL_TIM_Encoder_MspInit+0x16c>)
 80038be:	f003 fb09 	bl	8006ed4 <HAL_GPIO_Init>
}
 80038c2:	e032      	b.n	800392a <HAL_TIM_Encoder_MspInit+0x152>
  else if(htim_encoder->Instance==TIM23)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1f      	ldr	r2, [pc, #124]	; (8003948 <HAL_TIM_Encoder_MspInit+0x170>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d12d      	bne.n	800392a <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80038ce:	4b1a      	ldr	r3, [pc, #104]	; (8003938 <HAL_TIM_Encoder_MspInit+0x160>)
 80038d0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80038d4:	4a18      	ldr	r2, [pc, #96]	; (8003938 <HAL_TIM_Encoder_MspInit+0x160>)
 80038d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038da:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80038de:	4b16      	ldr	r3, [pc, #88]	; (8003938 <HAL_TIM_Encoder_MspInit+0x160>)
 80038e0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80038e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80038ec:	4b12      	ldr	r3, [pc, #72]	; (8003938 <HAL_TIM_Encoder_MspInit+0x160>)
 80038ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038f2:	4a11      	ldr	r2, [pc, #68]	; (8003938 <HAL_TIM_Encoder_MspInit+0x160>)
 80038f4:	f043 0320 	orr.w	r3, r3, #32
 80038f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038fc:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <HAL_TIM_Encoder_MspInit+0x160>)
 80038fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800390a:	2303      	movs	r3, #3
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390e:	2302      	movs	r3, #2
 8003910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003912:	2300      	movs	r3, #0
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003916:	2300      	movs	r3, #0
 8003918:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 800391a:	230d      	movs	r3, #13
 800391c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800391e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003922:	4619      	mov	r1, r3
 8003924:	4809      	ldr	r0, [pc, #36]	; (800394c <HAL_TIM_Encoder_MspInit+0x174>)
 8003926:	f003 fad5 	bl	8006ed4 <HAL_GPIO_Init>
}
 800392a:	bf00      	nop
 800392c:	3738      	adds	r7, #56	; 0x38
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40010000 	.word	0x40010000
 8003938:	58024400 	.word	0x58024400
 800393c:	58021000 	.word	0x58021000
 8003940:	40000800 	.word	0x40000800
 8003944:	58020c00 	.word	0x58020c00
 8003948:	4000e000 	.word	0x4000e000
 800394c:	58021400 	.word	0x58021400

08003950 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003960:	d10f      	bne.n	8003982 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003962:	4b15      	ldr	r3, [pc, #84]	; (80039b8 <HAL_TIM_PWM_MspInit+0x68>)
 8003964:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003968:	4a13      	ldr	r2, [pc, #76]	; (80039b8 <HAL_TIM_PWM_MspInit+0x68>)
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003972:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <HAL_TIM_PWM_MspInit+0x68>)
 8003974:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003980:	e013      	b.n	80039aa <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM8)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a0d      	ldr	r2, [pc, #52]	; (80039bc <HAL_TIM_PWM_MspInit+0x6c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d10e      	bne.n	80039aa <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800398c:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <HAL_TIM_PWM_MspInit+0x68>)
 800398e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003992:	4a09      	ldr	r2, [pc, #36]	; (80039b8 <HAL_TIM_PWM_MspInit+0x68>)
 8003994:	f043 0302 	orr.w	r3, r3, #2
 8003998:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_TIM_PWM_MspInit+0x68>)
 800399e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
}
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	58024400 	.word	0x58024400
 80039bc:	40010400 	.word	0x40010400

080039c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a0e      	ldr	r2, [pc, #56]	; (8003a08 <HAL_TIM_Base_MspInit+0x48>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d116      	bne.n	8003a00 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039d2:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <HAL_TIM_Base_MspInit+0x4c>)
 80039d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039d8:	4a0c      	ldr	r2, [pc, #48]	; (8003a0c <HAL_TIM_Base_MspInit+0x4c>)
 80039da:	f043 0302 	orr.w	r3, r3, #2
 80039de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039e2:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <HAL_TIM_Base_MspInit+0x4c>)
 80039e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80039f0:	2200      	movs	r2, #0
 80039f2:	2100      	movs	r1, #0
 80039f4:	201d      	movs	r0, #29
 80039f6:	f000 fbfe 	bl	80041f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80039fa:	201d      	movs	r0, #29
 80039fc:	f000 fc15 	bl	800422a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003a00:	bf00      	nop
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40000400 	.word	0x40000400
 8003a0c:	58024400 	.word	0x58024400

08003a10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08a      	sub	sp, #40	; 0x28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a18:	f107 0314 	add.w	r3, r7, #20
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	60da      	str	r2, [r3, #12]
 8003a26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a30:	d11f      	bne.n	8003a72 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a32:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <HAL_TIM_MspPostInit+0xb4>)
 8003a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a38:	4a22      	ldr	r2, [pc, #136]	; (8003ac4 <HAL_TIM_MspPostInit+0xb4>)
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a42:	4b20      	ldr	r3, [pc, #128]	; (8003ac4 <HAL_TIM_MspPostInit+0xb4>)
 8003a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8003a50:	2309      	movs	r3, #9
 8003a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a54:	2302      	movs	r3, #2
 8003a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a60:	2301      	movs	r3, #1
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a64:	f107 0314 	add.w	r3, r7, #20
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4817      	ldr	r0, [pc, #92]	; (8003ac8 <HAL_TIM_MspPostInit+0xb8>)
 8003a6c:	f003 fa32 	bl	8006ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003a70:	e024      	b.n	8003abc <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM8)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a15      	ldr	r2, [pc, #84]	; (8003acc <HAL_TIM_MspPostInit+0xbc>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d11f      	bne.n	8003abc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <HAL_TIM_MspPostInit+0xb4>)
 8003a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a82:	4a10      	ldr	r2, [pc, #64]	; (8003ac4 <HAL_TIM_MspPostInit+0xb4>)
 8003a84:	f043 0304 	orr.w	r3, r3, #4
 8003a88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <HAL_TIM_MspPostInit+0xb4>)
 8003a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003aac:	2303      	movs	r3, #3
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ab0:	f107 0314 	add.w	r3, r7, #20
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4806      	ldr	r0, [pc, #24]	; (8003ad0 <HAL_TIM_MspPostInit+0xc0>)
 8003ab8:	f003 fa0c 	bl	8006ed4 <HAL_GPIO_Init>
}
 8003abc:	bf00      	nop
 8003abe:	3728      	adds	r7, #40	; 0x28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	58024400 	.word	0x58024400
 8003ac8:	58020000 	.word	0x58020000
 8003acc:	40010400 	.word	0x40010400
 8003ad0:	58020800 	.word	0x58020800

08003ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b0b8      	sub	sp, #224	; 0xe0
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003adc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	605a      	str	r2, [r3, #4]
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	60da      	str	r2, [r3, #12]
 8003aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003aec:	f107 0310 	add.w	r3, r7, #16
 8003af0:	22b8      	movs	r2, #184	; 0xb8
 8003af2:	2100      	movs	r1, #0
 8003af4:	4618      	mov	r0, r3
 8003af6:	f009 feff 	bl	800d8f8 <memset>
  if(huart->Instance==USART3)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a5a      	ldr	r2, [pc, #360]	; (8003c68 <HAL_UART_MspInit+0x194>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	f040 80ac 	bne.w	8003c5e <HAL_UART_MspInit+0x18a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003b06:	f04f 0202 	mov.w	r2, #2
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b18:	f107 0310 	add.w	r3, r7, #16
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f004 fb3b 	bl	8008198 <HAL_RCCEx_PeriphCLKConfig>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8003b28:	f7fd f9da 	bl	8000ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b2c:	4b4f      	ldr	r3, [pc, #316]	; (8003c6c <HAL_UART_MspInit+0x198>)
 8003b2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b32:	4a4e      	ldr	r2, [pc, #312]	; (8003c6c <HAL_UART_MspInit+0x198>)
 8003b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b3c:	4b4b      	ldr	r3, [pc, #300]	; (8003c6c <HAL_UART_MspInit+0x198>)
 8003b3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b4a:	4b48      	ldr	r3, [pc, #288]	; (8003c6c <HAL_UART_MspInit+0x198>)
 8003b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b50:	4a46      	ldr	r2, [pc, #280]	; (8003c6c <HAL_UART_MspInit+0x198>)
 8003b52:	f043 0304 	orr.w	r3, r3, #4
 8003b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b5a:	4b44      	ldr	r3, [pc, #272]	; (8003c6c <HAL_UART_MspInit+0x198>)
 8003b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003b68:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b70:	2302      	movs	r3, #2
 8003b72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b82:	2307      	movs	r3, #7
 8003b84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4838      	ldr	r0, [pc, #224]	; (8003c70 <HAL_UART_MspInit+0x19c>)
 8003b90:	f003 f9a0 	bl	8006ed4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8003b94:	4b37      	ldr	r3, [pc, #220]	; (8003c74 <HAL_UART_MspInit+0x1a0>)
 8003b96:	4a38      	ldr	r2, [pc, #224]	; (8003c78 <HAL_UART_MspInit+0x1a4>)
 8003b98:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003b9a:	4b36      	ldr	r3, [pc, #216]	; (8003c74 <HAL_UART_MspInit+0x1a0>)
 8003b9c:	222d      	movs	r2, #45	; 0x2d
 8003b9e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ba0:	4b34      	ldr	r3, [pc, #208]	; (8003c74 <HAL_UART_MspInit+0x1a0>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ba6:	4b33      	ldr	r3, [pc, #204]	; (8003c74 <HAL_UART_MspInit+0x1a0>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003bac:	4b31      	ldr	r3, [pc, #196]	; (8003c74 <HAL_UART_MspInit+0x1a0>)
 8003bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bb2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bb4:	4b2f      	ldr	r3, [pc, #188]	; (8003c74 <HAL_UART_MspInit+0x1a0>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bba:	4b2e      	ldr	r3, [pc, #184]	; (8003c74 <HAL_UART_MspInit+0x1a0>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003bc0:	4b2c      	ldr	r3, [pc, #176]	; (8003c74 <HAL_UART_MspInit+0x1a0>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003bc6:	4b2b      	ldr	r3, [pc, #172]	; (8003c74 <HAL_UART_MspInit+0x1a0>)
 8003bc8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bcc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bce:	4b29      	ldr	r3, [pc, #164]	; (8003c74 <HAL_UART_MspInit+0x1a0>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003bd4:	4827      	ldr	r0, [pc, #156]	; (8003c74 <HAL_UART_MspInit+0x1a0>)
 8003bd6:	f000 fb43 	bl	8004260 <HAL_DMA_Init>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8003be0:	f7fd f97e 	bl	8000ee0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a23      	ldr	r2, [pc, #140]	; (8003c74 <HAL_UART_MspInit+0x1a0>)
 8003be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003bec:	4a21      	ldr	r2, [pc, #132]	; (8003c74 <HAL_UART_MspInit+0x1a0>)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8003bf2:	4b22      	ldr	r3, [pc, #136]	; (8003c7c <HAL_UART_MspInit+0x1a8>)
 8003bf4:	4a22      	ldr	r2, [pc, #136]	; (8003c80 <HAL_UART_MspInit+0x1ac>)
 8003bf6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003bf8:	4b20      	ldr	r3, [pc, #128]	; (8003c7c <HAL_UART_MspInit+0x1a8>)
 8003bfa:	222e      	movs	r2, #46	; 0x2e
 8003bfc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bfe:	4b1f      	ldr	r3, [pc, #124]	; (8003c7c <HAL_UART_MspInit+0x1a8>)
 8003c00:	2240      	movs	r2, #64	; 0x40
 8003c02:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c04:	4b1d      	ldr	r3, [pc, #116]	; (8003c7c <HAL_UART_MspInit+0x1a8>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	; (8003c7c <HAL_UART_MspInit+0x1a8>)
 8003c0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c10:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c12:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <HAL_UART_MspInit+0x1a8>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c18:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <HAL_UART_MspInit+0x1a8>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003c1e:	4b17      	ldr	r3, [pc, #92]	; (8003c7c <HAL_UART_MspInit+0x1a8>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003c24:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <HAL_UART_MspInit+0x1a8>)
 8003c26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c2a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c2c:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <HAL_UART_MspInit+0x1a8>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003c32:	4812      	ldr	r0, [pc, #72]	; (8003c7c <HAL_UART_MspInit+0x1a8>)
 8003c34:	f000 fb14 	bl	8004260 <HAL_DMA_Init>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 8003c3e:	f7fd f94f 	bl	8000ee0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a0d      	ldr	r2, [pc, #52]	; (8003c7c <HAL_UART_MspInit+0x1a8>)
 8003c46:	67da      	str	r2, [r3, #124]	; 0x7c
 8003c48:	4a0c      	ldr	r2, [pc, #48]	; (8003c7c <HAL_UART_MspInit+0x1a8>)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2100      	movs	r1, #0
 8003c52:	2027      	movs	r0, #39	; 0x27
 8003c54:	f000 facf 	bl	80041f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003c58:	2027      	movs	r0, #39	; 0x27
 8003c5a:	f000 fae6 	bl	800422a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003c5e:	bf00      	nop
 8003c60:	37e0      	adds	r7, #224	; 0xe0
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40004800 	.word	0x40004800
 8003c6c:	58024400 	.word	0x58024400
 8003c70:	58020800 	.word	0x58020800
 8003c74:	240002f0 	.word	0x240002f0
 8003c78:	40020010 	.word	0x40020010
 8003c7c:	24000368 	.word	0x24000368
 8003c80:	40020028 	.word	0x40020028

08003c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c88:	e7fe      	b.n	8003c88 <NMI_Handler+0x4>

08003c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c8e:	e7fe      	b.n	8003c8e <HardFault_Handler+0x4>

08003c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c94:	e7fe      	b.n	8003c94 <MemManage_Handler+0x4>

08003c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c96:	b480      	push	{r7}
 8003c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c9a:	e7fe      	b.n	8003c9a <BusFault_Handler+0x4>

08003c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ca0:	e7fe      	b.n	8003ca0 <UsageFault_Handler+0x4>

08003ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ca6:	bf00      	nop
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cb4:	bf00      	nop
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cc2:	bf00      	nop
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cd0:	f000 f996 	bl	8004000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cd4:	bf00      	nop
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003cdc:	4802      	ldr	r0, [pc, #8]	; (8003ce8 <DMA1_Stream0_IRQHandler+0x10>)
 8003cde:	f001 fde7 	bl	80058b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	240002f0 	.word	0x240002f0

08003cec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003cf0:	4802      	ldr	r0, [pc, #8]	; (8003cfc <DMA1_Stream1_IRQHandler+0x10>)
 8003cf2:	f001 fddd 	bl	80058b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003cf6:	bf00      	nop
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	24000368 	.word	0x24000368

08003d00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003d04:	4802      	ldr	r0, [pc, #8]	; (8003d10 <TIM3_IRQHandler+0x10>)
 8003d06:	f006 fb8f 	bl	800a428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003d0a:	bf00      	nop
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	2400012c 	.word	0x2400012c

08003d14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003d18:	4802      	ldr	r0, [pc, #8]	; (8003d24 <USART3_IRQHandler+0x10>)
 8003d1a:	f007 fd8f 	bl	800b83c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003d1e:	bf00      	nop
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	2400025c 	.word	0x2400025c

08003d28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return 1;
 8003d2c:	2301      	movs	r3, #1
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <_kill>:

int _kill(int pid, int sig)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d42:	f009 fda1 	bl	800d888 <__errno>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2216      	movs	r2, #22
 8003d4a:	601a      	str	r2, [r3, #0]
  return -1;
 8003d4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <_exit>:

void _exit (int status)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d60:	f04f 31ff 	mov.w	r1, #4294967295
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff ffe7 	bl	8003d38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d6a:	e7fe      	b.n	8003d6a <_exit+0x12>

08003d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d74:	4a14      	ldr	r2, [pc, #80]	; (8003dc8 <_sbrk+0x5c>)
 8003d76:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <_sbrk+0x60>)
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d80:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <_sbrk+0x64>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d102      	bne.n	8003d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <_sbrk+0x64>)
 8003d8a:	4a12      	ldr	r2, [pc, #72]	; (8003dd4 <_sbrk+0x68>)
 8003d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <_sbrk+0x64>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4413      	add	r3, r2
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d207      	bcs.n	8003dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d9c:	f009 fd74 	bl	800d888 <__errno>
 8003da0:	4603      	mov	r3, r0
 8003da2:	220c      	movs	r2, #12
 8003da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003da6:	f04f 33ff 	mov.w	r3, #4294967295
 8003daa:	e009      	b.n	8003dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dac:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <_sbrk+0x64>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003db2:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <_sbrk+0x64>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4413      	add	r3, r2
 8003dba:	4a05      	ldr	r2, [pc, #20]	; (8003dd0 <_sbrk+0x64>)
 8003dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	24050000 	.word	0x24050000
 8003dcc:	00000400 	.word	0x00000400
 8003dd0:	24000e10 	.word	0x24000e10
 8003dd4:	24000e28 	.word	0x24000e28

08003dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ddc:	4b32      	ldr	r3, [pc, #200]	; (8003ea8 <SystemInit+0xd0>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de2:	4a31      	ldr	r2, [pc, #196]	; (8003ea8 <SystemInit+0xd0>)
 8003de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003dec:	4b2f      	ldr	r3, [pc, #188]	; (8003eac <SystemInit+0xd4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	2b06      	cmp	r3, #6
 8003df6:	d807      	bhi.n	8003e08 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003df8:	4b2c      	ldr	r3, [pc, #176]	; (8003eac <SystemInit+0xd4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f023 030f 	bic.w	r3, r3, #15
 8003e00:	4a2a      	ldr	r2, [pc, #168]	; (8003eac <SystemInit+0xd4>)
 8003e02:	f043 0307 	orr.w	r3, r3, #7
 8003e06:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003e08:	4b29      	ldr	r3, [pc, #164]	; (8003eb0 <SystemInit+0xd8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a28      	ldr	r2, [pc, #160]	; (8003eb0 <SystemInit+0xd8>)
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e14:	4b26      	ldr	r3, [pc, #152]	; (8003eb0 <SystemInit+0xd8>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003e1a:	4b25      	ldr	r3, [pc, #148]	; (8003eb0 <SystemInit+0xd8>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	4924      	ldr	r1, [pc, #144]	; (8003eb0 <SystemInit+0xd8>)
 8003e20:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <SystemInit+0xdc>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e26:	4b21      	ldr	r3, [pc, #132]	; (8003eac <SystemInit+0xd4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d007      	beq.n	8003e42 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e32:	4b1e      	ldr	r3, [pc, #120]	; (8003eac <SystemInit+0xd4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f023 030f 	bic.w	r3, r3, #15
 8003e3a:	4a1c      	ldr	r2, [pc, #112]	; (8003eac <SystemInit+0xd4>)
 8003e3c:	f043 0307 	orr.w	r3, r3, #7
 8003e40:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003e42:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <SystemInit+0xd8>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003e48:	4b19      	ldr	r3, [pc, #100]	; (8003eb0 <SystemInit+0xd8>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003e4e:	4b18      	ldr	r3, [pc, #96]	; (8003eb0 <SystemInit+0xd8>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003e54:	4b16      	ldr	r3, [pc, #88]	; (8003eb0 <SystemInit+0xd8>)
 8003e56:	4a18      	ldr	r2, [pc, #96]	; (8003eb8 <SystemInit+0xe0>)
 8003e58:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003e5a:	4b15      	ldr	r3, [pc, #84]	; (8003eb0 <SystemInit+0xd8>)
 8003e5c:	4a17      	ldr	r2, [pc, #92]	; (8003ebc <SystemInit+0xe4>)
 8003e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003e60:	4b13      	ldr	r3, [pc, #76]	; (8003eb0 <SystemInit+0xd8>)
 8003e62:	4a17      	ldr	r2, [pc, #92]	; (8003ec0 <SystemInit+0xe8>)
 8003e64:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003e66:	4b12      	ldr	r3, [pc, #72]	; (8003eb0 <SystemInit+0xd8>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003e6c:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <SystemInit+0xd8>)
 8003e6e:	4a14      	ldr	r2, [pc, #80]	; (8003ec0 <SystemInit+0xe8>)
 8003e70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003e72:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <SystemInit+0xd8>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003e78:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <SystemInit+0xd8>)
 8003e7a:	4a11      	ldr	r2, [pc, #68]	; (8003ec0 <SystemInit+0xe8>)
 8003e7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003e7e:	4b0c      	ldr	r3, [pc, #48]	; (8003eb0 <SystemInit+0xd8>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e84:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <SystemInit+0xd8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a09      	ldr	r2, [pc, #36]	; (8003eb0 <SystemInit+0xd8>)
 8003e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003e90:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <SystemInit+0xd8>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003e96:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <SystemInit+0xec>)
 8003e98:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003e9c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003e9e:	bf00      	nop
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	e000ed00 	.word	0xe000ed00
 8003eac:	52002000 	.word	0x52002000
 8003eb0:	58024400 	.word	0x58024400
 8003eb4:	eaf6ed7f 	.word	0xeaf6ed7f
 8003eb8:	02020200 	.word	0x02020200
 8003ebc:	01ff0000 	.word	0x01ff0000
 8003ec0:	01010280 	.word	0x01010280
 8003ec4:	52004000 	.word	0x52004000

08003ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ecc:	f7ff ff84 	bl	8003dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ed0:	480c      	ldr	r0, [pc, #48]	; (8003f04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ed2:	490d      	ldr	r1, [pc, #52]	; (8003f08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ed4:	4a0d      	ldr	r2, [pc, #52]	; (8003f0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ed8:	e002      	b.n	8003ee0 <LoopCopyDataInit>

08003eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ede:	3304      	adds	r3, #4

08003ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ee4:	d3f9      	bcc.n	8003eda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ee6:	4a0a      	ldr	r2, [pc, #40]	; (8003f10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ee8:	4c0a      	ldr	r4, [pc, #40]	; (8003f14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003eec:	e001      	b.n	8003ef2 <LoopFillZerobss>

08003eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ef0:	3204      	adds	r2, #4

08003ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ef4:	d3fb      	bcc.n	8003eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ef6:	f009 fccd 	bl	800d894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003efa:	f7fc fbbd 	bl	8000678 <main>
  bx  lr
 8003efe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f00:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003f04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003f08:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8003f0c:	0800df38 	.word	0x0800df38
  ldr r2, =_sbss
 8003f10:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8003f14:	24000e28 	.word	0x24000e28

08003f18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f18:	e7fe      	b.n	8003f18 <ADC3_IRQHandler>
	...

08003f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f22:	2003      	movs	r0, #3
 8003f24:	f000 f95c 	bl	80041e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f28:	f003 ff60 	bl	8007dec <HAL_RCC_GetSysClockFreq>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	4b15      	ldr	r3, [pc, #84]	; (8003f84 <HAL_Init+0x68>)
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	0a1b      	lsrs	r3, r3, #8
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	4913      	ldr	r1, [pc, #76]	; (8003f88 <HAL_Init+0x6c>)
 8003f3a:	5ccb      	ldrb	r3, [r1, r3]
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	fa22 f303 	lsr.w	r3, r2, r3
 8003f44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f46:	4b0f      	ldr	r3, [pc, #60]	; (8003f84 <HAL_Init+0x68>)
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	4a0e      	ldr	r2, [pc, #56]	; (8003f88 <HAL_Init+0x6c>)
 8003f50:	5cd3      	ldrb	r3, [r2, r3]
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5c:	4a0b      	ldr	r2, [pc, #44]	; (8003f8c <HAL_Init+0x70>)
 8003f5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f60:	4a0b      	ldr	r2, [pc, #44]	; (8003f90 <HAL_Init+0x74>)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f66:	200f      	movs	r0, #15
 8003f68:	f000 f814 	bl	8003f94 <HAL_InitTick>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e002      	b.n	8003f7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f76:	f7ff fc15 	bl	80037a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	58024400 	.word	0x58024400
 8003f88:	0800dee4 	.word	0x0800dee4
 8003f8c:	24000004 	.word	0x24000004
 8003f90:	24000000 	.word	0x24000000

08003f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003f9c:	4b15      	ldr	r3, [pc, #84]	; (8003ff4 <HAL_InitTick+0x60>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e021      	b.n	8003fec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003fa8:	4b13      	ldr	r3, [pc, #76]	; (8003ff8 <HAL_InitTick+0x64>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <HAL_InitTick+0x60>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 f941 	bl	8004246 <HAL_SYSTICK_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e00e      	b.n	8003fec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b0f      	cmp	r3, #15
 8003fd2:	d80a      	bhi.n	8003fea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fdc:	f000 f90b 	bl	80041f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fe0:	4a06      	ldr	r2, [pc, #24]	; (8003ffc <HAL_InitTick+0x68>)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	e000      	b.n	8003fec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	2400000c 	.word	0x2400000c
 8003ff8:	24000000 	.word	0x24000000
 8003ffc:	24000008 	.word	0x24000008

08004000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004004:	4b06      	ldr	r3, [pc, #24]	; (8004020 <HAL_IncTick+0x20>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_IncTick+0x24>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4413      	add	r3, r2
 8004010:	4a04      	ldr	r2, [pc, #16]	; (8004024 <HAL_IncTick+0x24>)
 8004012:	6013      	str	r3, [r2, #0]
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	2400000c 	.word	0x2400000c
 8004024:	24000e14 	.word	0x24000e14

08004028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return uwTick;
 800402c:	4b03      	ldr	r3, [pc, #12]	; (800403c <HAL_GetTick+0x14>)
 800402e:	681b      	ldr	r3, [r3, #0]
}
 8004030:	4618      	mov	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	24000e14 	.word	0x24000e14

08004040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <__NVIC_SetPriorityGrouping+0x40>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800405c:	4013      	ands	r3, r2
 800405e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004068:	4b06      	ldr	r3, [pc, #24]	; (8004084 <__NVIC_SetPriorityGrouping+0x44>)
 800406a:	4313      	orrs	r3, r2
 800406c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800406e:	4a04      	ldr	r2, [pc, #16]	; (8004080 <__NVIC_SetPriorityGrouping+0x40>)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	60d3      	str	r3, [r2, #12]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	e000ed00 	.word	0xe000ed00
 8004084:	05fa0000 	.word	0x05fa0000

08004088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800408c:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <__NVIC_GetPriorityGrouping+0x18>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	0a1b      	lsrs	r3, r3, #8
 8004092:	f003 0307 	and.w	r3, r3, #7
}
 8004096:	4618      	mov	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	e000ed00 	.word	0xe000ed00

080040a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	db0b      	blt.n	80040ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	f003 021f 	and.w	r2, r3, #31
 80040bc:	4907      	ldr	r1, [pc, #28]	; (80040dc <__NVIC_EnableIRQ+0x38>)
 80040be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	2001      	movs	r0, #1
 80040c6:	fa00 f202 	lsl.w	r2, r0, r2
 80040ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	e000e100 	.word	0xe000e100

080040e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4603      	mov	r3, r0
 80040e8:	6039      	str	r1, [r7, #0]
 80040ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	db0a      	blt.n	800410a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	490c      	ldr	r1, [pc, #48]	; (800412c <__NVIC_SetPriority+0x4c>)
 80040fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040fe:	0112      	lsls	r2, r2, #4
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	440b      	add	r3, r1
 8004104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004108:	e00a      	b.n	8004120 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	b2da      	uxtb	r2, r3
 800410e:	4908      	ldr	r1, [pc, #32]	; (8004130 <__NVIC_SetPriority+0x50>)
 8004110:	88fb      	ldrh	r3, [r7, #6]
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	3b04      	subs	r3, #4
 8004118:	0112      	lsls	r2, r2, #4
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	440b      	add	r3, r1
 800411e:	761a      	strb	r2, [r3, #24]
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	e000e100 	.word	0xe000e100
 8004130:	e000ed00 	.word	0xe000ed00

08004134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004134:	b480      	push	{r7}
 8004136:	b089      	sub	sp, #36	; 0x24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f1c3 0307 	rsb	r3, r3, #7
 800414e:	2b04      	cmp	r3, #4
 8004150:	bf28      	it	cs
 8004152:	2304      	movcs	r3, #4
 8004154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	3304      	adds	r3, #4
 800415a:	2b06      	cmp	r3, #6
 800415c:	d902      	bls.n	8004164 <NVIC_EncodePriority+0x30>
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	3b03      	subs	r3, #3
 8004162:	e000      	b.n	8004166 <NVIC_EncodePriority+0x32>
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004168:	f04f 32ff 	mov.w	r2, #4294967295
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43da      	mvns	r2, r3
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	401a      	ands	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800417c:	f04f 31ff 	mov.w	r1, #4294967295
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	fa01 f303 	lsl.w	r3, r1, r3
 8004186:	43d9      	mvns	r1, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800418c:	4313      	orrs	r3, r2
         );
}
 800418e:	4618      	mov	r0, r3
 8004190:	3724      	adds	r7, #36	; 0x24
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
	...

0800419c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041ac:	d301      	bcc.n	80041b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041ae:	2301      	movs	r3, #1
 80041b0:	e00f      	b.n	80041d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041b2:	4a0a      	ldr	r2, [pc, #40]	; (80041dc <SysTick_Config+0x40>)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041ba:	210f      	movs	r1, #15
 80041bc:	f04f 30ff 	mov.w	r0, #4294967295
 80041c0:	f7ff ff8e 	bl	80040e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <SysTick_Config+0x40>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041ca:	4b04      	ldr	r3, [pc, #16]	; (80041dc <SysTick_Config+0x40>)
 80041cc:	2207      	movs	r2, #7
 80041ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	e000e010 	.word	0xe000e010

080041e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff ff29 	bl	8004040 <__NVIC_SetPriorityGrouping>
}
 80041ee:	bf00      	nop
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b086      	sub	sp, #24
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	4603      	mov	r3, r0
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004204:	f7ff ff40 	bl	8004088 <__NVIC_GetPriorityGrouping>
 8004208:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	6978      	ldr	r0, [r7, #20]
 8004210:	f7ff ff90 	bl	8004134 <NVIC_EncodePriority>
 8004214:	4602      	mov	r2, r0
 8004216:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800421a:	4611      	mov	r1, r2
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff ff5f 	bl	80040e0 <__NVIC_SetPriority>
}
 8004222:	bf00      	nop
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	4603      	mov	r3, r0
 8004232:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004234:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff ff33 	bl	80040a4 <__NVIC_EnableIRQ>
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b082      	sub	sp, #8
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff ffa4 	bl	800419c <SysTick_Config>
 8004254:	4603      	mov	r3, r0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004268:	f7ff fede 	bl	8004028 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e314      	b.n	80048a2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a66      	ldr	r2, [pc, #408]	; (8004418 <HAL_DMA_Init+0x1b8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d04a      	beq.n	8004318 <HAL_DMA_Init+0xb8>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a65      	ldr	r2, [pc, #404]	; (800441c <HAL_DMA_Init+0x1bc>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d045      	beq.n	8004318 <HAL_DMA_Init+0xb8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a63      	ldr	r2, [pc, #396]	; (8004420 <HAL_DMA_Init+0x1c0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d040      	beq.n	8004318 <HAL_DMA_Init+0xb8>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a62      	ldr	r2, [pc, #392]	; (8004424 <HAL_DMA_Init+0x1c4>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d03b      	beq.n	8004318 <HAL_DMA_Init+0xb8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a60      	ldr	r2, [pc, #384]	; (8004428 <HAL_DMA_Init+0x1c8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d036      	beq.n	8004318 <HAL_DMA_Init+0xb8>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a5f      	ldr	r2, [pc, #380]	; (800442c <HAL_DMA_Init+0x1cc>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d031      	beq.n	8004318 <HAL_DMA_Init+0xb8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a5d      	ldr	r2, [pc, #372]	; (8004430 <HAL_DMA_Init+0x1d0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d02c      	beq.n	8004318 <HAL_DMA_Init+0xb8>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a5c      	ldr	r2, [pc, #368]	; (8004434 <HAL_DMA_Init+0x1d4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d027      	beq.n	8004318 <HAL_DMA_Init+0xb8>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a5a      	ldr	r2, [pc, #360]	; (8004438 <HAL_DMA_Init+0x1d8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d022      	beq.n	8004318 <HAL_DMA_Init+0xb8>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a59      	ldr	r2, [pc, #356]	; (800443c <HAL_DMA_Init+0x1dc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d01d      	beq.n	8004318 <HAL_DMA_Init+0xb8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a57      	ldr	r2, [pc, #348]	; (8004440 <HAL_DMA_Init+0x1e0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d018      	beq.n	8004318 <HAL_DMA_Init+0xb8>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a56      	ldr	r2, [pc, #344]	; (8004444 <HAL_DMA_Init+0x1e4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d013      	beq.n	8004318 <HAL_DMA_Init+0xb8>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a54      	ldr	r2, [pc, #336]	; (8004448 <HAL_DMA_Init+0x1e8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00e      	beq.n	8004318 <HAL_DMA_Init+0xb8>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a53      	ldr	r2, [pc, #332]	; (800444c <HAL_DMA_Init+0x1ec>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d009      	beq.n	8004318 <HAL_DMA_Init+0xb8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a51      	ldr	r2, [pc, #324]	; (8004450 <HAL_DMA_Init+0x1f0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d004      	beq.n	8004318 <HAL_DMA_Init+0xb8>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a50      	ldr	r2, [pc, #320]	; (8004454 <HAL_DMA_Init+0x1f4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d101      	bne.n	800431c <HAL_DMA_Init+0xbc>
 8004318:	2301      	movs	r3, #1
 800431a:	e000      	b.n	800431e <HAL_DMA_Init+0xbe>
 800431c:	2300      	movs	r3, #0
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 813c 	beq.w	800459c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a37      	ldr	r2, [pc, #220]	; (8004418 <HAL_DMA_Init+0x1b8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d04a      	beq.n	80043d4 <HAL_DMA_Init+0x174>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a36      	ldr	r2, [pc, #216]	; (800441c <HAL_DMA_Init+0x1bc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d045      	beq.n	80043d4 <HAL_DMA_Init+0x174>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a34      	ldr	r2, [pc, #208]	; (8004420 <HAL_DMA_Init+0x1c0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d040      	beq.n	80043d4 <HAL_DMA_Init+0x174>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a33      	ldr	r2, [pc, #204]	; (8004424 <HAL_DMA_Init+0x1c4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d03b      	beq.n	80043d4 <HAL_DMA_Init+0x174>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a31      	ldr	r2, [pc, #196]	; (8004428 <HAL_DMA_Init+0x1c8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d036      	beq.n	80043d4 <HAL_DMA_Init+0x174>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a30      	ldr	r2, [pc, #192]	; (800442c <HAL_DMA_Init+0x1cc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d031      	beq.n	80043d4 <HAL_DMA_Init+0x174>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a2e      	ldr	r2, [pc, #184]	; (8004430 <HAL_DMA_Init+0x1d0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d02c      	beq.n	80043d4 <HAL_DMA_Init+0x174>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a2d      	ldr	r2, [pc, #180]	; (8004434 <HAL_DMA_Init+0x1d4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d027      	beq.n	80043d4 <HAL_DMA_Init+0x174>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a2b      	ldr	r2, [pc, #172]	; (8004438 <HAL_DMA_Init+0x1d8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d022      	beq.n	80043d4 <HAL_DMA_Init+0x174>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2a      	ldr	r2, [pc, #168]	; (800443c <HAL_DMA_Init+0x1dc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d01d      	beq.n	80043d4 <HAL_DMA_Init+0x174>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a28      	ldr	r2, [pc, #160]	; (8004440 <HAL_DMA_Init+0x1e0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d018      	beq.n	80043d4 <HAL_DMA_Init+0x174>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a27      	ldr	r2, [pc, #156]	; (8004444 <HAL_DMA_Init+0x1e4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d013      	beq.n	80043d4 <HAL_DMA_Init+0x174>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a25      	ldr	r2, [pc, #148]	; (8004448 <HAL_DMA_Init+0x1e8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00e      	beq.n	80043d4 <HAL_DMA_Init+0x174>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a24      	ldr	r2, [pc, #144]	; (800444c <HAL_DMA_Init+0x1ec>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d009      	beq.n	80043d4 <HAL_DMA_Init+0x174>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a22      	ldr	r2, [pc, #136]	; (8004450 <HAL_DMA_Init+0x1f0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d004      	beq.n	80043d4 <HAL_DMA_Init+0x174>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a21      	ldr	r2, [pc, #132]	; (8004454 <HAL_DMA_Init+0x1f4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d108      	bne.n	80043e6 <HAL_DMA_Init+0x186>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0201 	bic.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	e007      	b.n	80043f6 <HAL_DMA_Init+0x196>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0201 	bic.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043f6:	e02f      	b.n	8004458 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043f8:	f7ff fe16 	bl	8004028 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b05      	cmp	r3, #5
 8004404:	d928      	bls.n	8004458 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2203      	movs	r2, #3
 8004410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e244      	b.n	80048a2 <HAL_DMA_Init+0x642>
 8004418:	40020010 	.word	0x40020010
 800441c:	40020028 	.word	0x40020028
 8004420:	40020040 	.word	0x40020040
 8004424:	40020058 	.word	0x40020058
 8004428:	40020070 	.word	0x40020070
 800442c:	40020088 	.word	0x40020088
 8004430:	400200a0 	.word	0x400200a0
 8004434:	400200b8 	.word	0x400200b8
 8004438:	40020410 	.word	0x40020410
 800443c:	40020428 	.word	0x40020428
 8004440:	40020440 	.word	0x40020440
 8004444:	40020458 	.word	0x40020458
 8004448:	40020470 	.word	0x40020470
 800444c:	40020488 	.word	0x40020488
 8004450:	400204a0 	.word	0x400204a0
 8004454:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1c8      	bne.n	80043f8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4b84      	ldr	r3, [pc, #528]	; (8004684 <HAL_DMA_Init+0x424>)
 8004472:	4013      	ands	r3, r2
 8004474:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800447e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800448a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004496:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	d107      	bne.n	80044bc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	4313      	orrs	r3, r2
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b28      	cmp	r3, #40	; 0x28
 80044c2:	d903      	bls.n	80044cc <HAL_DMA_Init+0x26c>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b2e      	cmp	r3, #46	; 0x2e
 80044ca:	d91f      	bls.n	800450c <HAL_DMA_Init+0x2ac>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b3e      	cmp	r3, #62	; 0x3e
 80044d2:	d903      	bls.n	80044dc <HAL_DMA_Init+0x27c>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b42      	cmp	r3, #66	; 0x42
 80044da:	d917      	bls.n	800450c <HAL_DMA_Init+0x2ac>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b46      	cmp	r3, #70	; 0x46
 80044e2:	d903      	bls.n	80044ec <HAL_DMA_Init+0x28c>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b48      	cmp	r3, #72	; 0x48
 80044ea:	d90f      	bls.n	800450c <HAL_DMA_Init+0x2ac>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b4e      	cmp	r3, #78	; 0x4e
 80044f2:	d903      	bls.n	80044fc <HAL_DMA_Init+0x29c>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b52      	cmp	r3, #82	; 0x52
 80044fa:	d907      	bls.n	800450c <HAL_DMA_Init+0x2ac>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b73      	cmp	r3, #115	; 0x73
 8004502:	d905      	bls.n	8004510 <HAL_DMA_Init+0x2b0>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b77      	cmp	r3, #119	; 0x77
 800450a:	d801      	bhi.n	8004510 <HAL_DMA_Init+0x2b0>
 800450c:	2301      	movs	r3, #1
 800450e:	e000      	b.n	8004512 <HAL_DMA_Init+0x2b2>
 8004510:	2300      	movs	r3, #0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800451c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f023 0307 	bic.w	r3, r3, #7
 8004534:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	2b04      	cmp	r3, #4
 8004546:	d117      	bne.n	8004578 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00e      	beq.n	8004578 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f002 fb30 	bl	8006bc0 <DMA_CheckFifoParam>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d008      	beq.n	8004578 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2240      	movs	r2, #64	; 0x40
 800456a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e194      	b.n	80048a2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f002 fa6b 	bl	8006a5c <DMA_CalcBaseAndBitshift>
 8004586:	4603      	mov	r3, r0
 8004588:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	223f      	movs	r2, #63	; 0x3f
 8004594:	409a      	lsls	r2, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	609a      	str	r2, [r3, #8]
 800459a:	e0ca      	b.n	8004732 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a39      	ldr	r2, [pc, #228]	; (8004688 <HAL_DMA_Init+0x428>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d022      	beq.n	80045ec <HAL_DMA_Init+0x38c>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a38      	ldr	r2, [pc, #224]	; (800468c <HAL_DMA_Init+0x42c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d01d      	beq.n	80045ec <HAL_DMA_Init+0x38c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a36      	ldr	r2, [pc, #216]	; (8004690 <HAL_DMA_Init+0x430>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d018      	beq.n	80045ec <HAL_DMA_Init+0x38c>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a35      	ldr	r2, [pc, #212]	; (8004694 <HAL_DMA_Init+0x434>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d013      	beq.n	80045ec <HAL_DMA_Init+0x38c>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a33      	ldr	r2, [pc, #204]	; (8004698 <HAL_DMA_Init+0x438>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00e      	beq.n	80045ec <HAL_DMA_Init+0x38c>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a32      	ldr	r2, [pc, #200]	; (800469c <HAL_DMA_Init+0x43c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d009      	beq.n	80045ec <HAL_DMA_Init+0x38c>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a30      	ldr	r2, [pc, #192]	; (80046a0 <HAL_DMA_Init+0x440>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d004      	beq.n	80045ec <HAL_DMA_Init+0x38c>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a2f      	ldr	r2, [pc, #188]	; (80046a4 <HAL_DMA_Init+0x444>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d101      	bne.n	80045f0 <HAL_DMA_Init+0x390>
 80045ec:	2301      	movs	r3, #1
 80045ee:	e000      	b.n	80045f2 <HAL_DMA_Init+0x392>
 80045f0:	2300      	movs	r3, #0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 8094 	beq.w	8004720 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a22      	ldr	r2, [pc, #136]	; (8004688 <HAL_DMA_Init+0x428>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d021      	beq.n	8004646 <HAL_DMA_Init+0x3e6>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a21      	ldr	r2, [pc, #132]	; (800468c <HAL_DMA_Init+0x42c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d01c      	beq.n	8004646 <HAL_DMA_Init+0x3e6>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a1f      	ldr	r2, [pc, #124]	; (8004690 <HAL_DMA_Init+0x430>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d017      	beq.n	8004646 <HAL_DMA_Init+0x3e6>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a1e      	ldr	r2, [pc, #120]	; (8004694 <HAL_DMA_Init+0x434>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d012      	beq.n	8004646 <HAL_DMA_Init+0x3e6>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a1c      	ldr	r2, [pc, #112]	; (8004698 <HAL_DMA_Init+0x438>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00d      	beq.n	8004646 <HAL_DMA_Init+0x3e6>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a1b      	ldr	r2, [pc, #108]	; (800469c <HAL_DMA_Init+0x43c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d008      	beq.n	8004646 <HAL_DMA_Init+0x3e6>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a19      	ldr	r2, [pc, #100]	; (80046a0 <HAL_DMA_Init+0x440>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d003      	beq.n	8004646 <HAL_DMA_Init+0x3e6>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <HAL_DMA_Init+0x444>)
 8004644:	4293      	cmp	r3, r2
 8004646:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <HAL_DMA_Init+0x448>)
 8004664:	4013      	ands	r3, r2
 8004666:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b40      	cmp	r3, #64	; 0x40
 800466e:	d01d      	beq.n	80046ac <HAL_DMA_Init+0x44c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b80      	cmp	r3, #128	; 0x80
 8004676:	d102      	bne.n	800467e <HAL_DMA_Init+0x41e>
 8004678:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800467c:	e017      	b.n	80046ae <HAL_DMA_Init+0x44e>
 800467e:	2300      	movs	r3, #0
 8004680:	e015      	b.n	80046ae <HAL_DMA_Init+0x44e>
 8004682:	bf00      	nop
 8004684:	fe10803f 	.word	0xfe10803f
 8004688:	58025408 	.word	0x58025408
 800468c:	5802541c 	.word	0x5802541c
 8004690:	58025430 	.word	0x58025430
 8004694:	58025444 	.word	0x58025444
 8004698:	58025458 	.word	0x58025458
 800469c:	5802546c 	.word	0x5802546c
 80046a0:	58025480 	.word	0x58025480
 80046a4:	58025494 	.word	0x58025494
 80046a8:	fffe000f 	.word	0xfffe000f
 80046ac:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	68d2      	ldr	r2, [r2, #12]
 80046b2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80046b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80046bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80046c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80046cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80046d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80046dc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	4b6e      	ldr	r3, [pc, #440]	; (80048ac <HAL_DMA_Init+0x64c>)
 80046f4:	4413      	add	r3, r2
 80046f6:	4a6e      	ldr	r2, [pc, #440]	; (80048b0 <HAL_DMA_Init+0x650>)
 80046f8:	fba2 2303 	umull	r2, r3, r2, r3
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	009a      	lsls	r2, r3, #2
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f002 f9a9 	bl	8006a5c <DMA_CalcBaseAndBitshift>
 800470a:	4603      	mov	r3, r0
 800470c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	2201      	movs	r2, #1
 8004718:	409a      	lsls	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	605a      	str	r2, [r3, #4]
 800471e:	e008      	b.n	8004732 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2240      	movs	r2, #64	; 0x40
 8004724:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2203      	movs	r2, #3
 800472a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e0b7      	b.n	80048a2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a5f      	ldr	r2, [pc, #380]	; (80048b4 <HAL_DMA_Init+0x654>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d072      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a5d      	ldr	r2, [pc, #372]	; (80048b8 <HAL_DMA_Init+0x658>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d06d      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a5c      	ldr	r2, [pc, #368]	; (80048bc <HAL_DMA_Init+0x65c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d068      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a5a      	ldr	r2, [pc, #360]	; (80048c0 <HAL_DMA_Init+0x660>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d063      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a59      	ldr	r2, [pc, #356]	; (80048c4 <HAL_DMA_Init+0x664>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d05e      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a57      	ldr	r2, [pc, #348]	; (80048c8 <HAL_DMA_Init+0x668>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d059      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a56      	ldr	r2, [pc, #344]	; (80048cc <HAL_DMA_Init+0x66c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d054      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a54      	ldr	r2, [pc, #336]	; (80048d0 <HAL_DMA_Init+0x670>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d04f      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a53      	ldr	r2, [pc, #332]	; (80048d4 <HAL_DMA_Init+0x674>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d04a      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a51      	ldr	r2, [pc, #324]	; (80048d8 <HAL_DMA_Init+0x678>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d045      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a50      	ldr	r2, [pc, #320]	; (80048dc <HAL_DMA_Init+0x67c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d040      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a4e      	ldr	r2, [pc, #312]	; (80048e0 <HAL_DMA_Init+0x680>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d03b      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a4d      	ldr	r2, [pc, #308]	; (80048e4 <HAL_DMA_Init+0x684>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d036      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a4b      	ldr	r2, [pc, #300]	; (80048e8 <HAL_DMA_Init+0x688>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d031      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a4a      	ldr	r2, [pc, #296]	; (80048ec <HAL_DMA_Init+0x68c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d02c      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a48      	ldr	r2, [pc, #288]	; (80048f0 <HAL_DMA_Init+0x690>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d027      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a47      	ldr	r2, [pc, #284]	; (80048f4 <HAL_DMA_Init+0x694>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d022      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a45      	ldr	r2, [pc, #276]	; (80048f8 <HAL_DMA_Init+0x698>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d01d      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a44      	ldr	r2, [pc, #272]	; (80048fc <HAL_DMA_Init+0x69c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d018      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a42      	ldr	r2, [pc, #264]	; (8004900 <HAL_DMA_Init+0x6a0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d013      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a41      	ldr	r2, [pc, #260]	; (8004904 <HAL_DMA_Init+0x6a4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00e      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a3f      	ldr	r2, [pc, #252]	; (8004908 <HAL_DMA_Init+0x6a8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d009      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a3e      	ldr	r2, [pc, #248]	; (800490c <HAL_DMA_Init+0x6ac>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d004      	beq.n	8004822 <HAL_DMA_Init+0x5c2>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a3c      	ldr	r2, [pc, #240]	; (8004910 <HAL_DMA_Init+0x6b0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d101      	bne.n	8004826 <HAL_DMA_Init+0x5c6>
 8004822:	2301      	movs	r3, #1
 8004824:	e000      	b.n	8004828 <HAL_DMA_Init+0x5c8>
 8004826:	2300      	movs	r3, #0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d032      	beq.n	8004892 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f002 fa43 	bl	8006cb8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2b80      	cmp	r3, #128	; 0x80
 8004838:	d102      	bne.n	8004840 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004854:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d010      	beq.n	8004880 <HAL_DMA_Init+0x620>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b08      	cmp	r3, #8
 8004864:	d80c      	bhi.n	8004880 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f002 fac0 	bl	8006dec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800487c:	605a      	str	r2, [r3, #4]
 800487e:	e008      	b.n	8004892 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	a7fdabf8 	.word	0xa7fdabf8
 80048b0:	cccccccd 	.word	0xcccccccd
 80048b4:	40020010 	.word	0x40020010
 80048b8:	40020028 	.word	0x40020028
 80048bc:	40020040 	.word	0x40020040
 80048c0:	40020058 	.word	0x40020058
 80048c4:	40020070 	.word	0x40020070
 80048c8:	40020088 	.word	0x40020088
 80048cc:	400200a0 	.word	0x400200a0
 80048d0:	400200b8 	.word	0x400200b8
 80048d4:	40020410 	.word	0x40020410
 80048d8:	40020428 	.word	0x40020428
 80048dc:	40020440 	.word	0x40020440
 80048e0:	40020458 	.word	0x40020458
 80048e4:	40020470 	.word	0x40020470
 80048e8:	40020488 	.word	0x40020488
 80048ec:	400204a0 	.word	0x400204a0
 80048f0:	400204b8 	.word	0x400204b8
 80048f4:	58025408 	.word	0x58025408
 80048f8:	5802541c 	.word	0x5802541c
 80048fc:	58025430 	.word	0x58025430
 8004900:	58025444 	.word	0x58025444
 8004904:	58025458 	.word	0x58025458
 8004908:	5802546c 	.word	0x5802546c
 800490c:	58025480 	.word	0x58025480
 8004910:	58025494 	.word	0x58025494

08004914 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e226      	b.n	8004d7e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <HAL_DMA_Start_IT+0x2a>
 800493a:	2302      	movs	r3, #2
 800493c:	e21f      	b.n	8004d7e <HAL_DMA_Start_IT+0x46a>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b01      	cmp	r3, #1
 8004950:	f040 820a 	bne.w	8004d68 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a68      	ldr	r2, [pc, #416]	; (8004b08 <HAL_DMA_Start_IT+0x1f4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d04a      	beq.n	8004a02 <HAL_DMA_Start_IT+0xee>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a66      	ldr	r2, [pc, #408]	; (8004b0c <HAL_DMA_Start_IT+0x1f8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d045      	beq.n	8004a02 <HAL_DMA_Start_IT+0xee>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a65      	ldr	r2, [pc, #404]	; (8004b10 <HAL_DMA_Start_IT+0x1fc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d040      	beq.n	8004a02 <HAL_DMA_Start_IT+0xee>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a63      	ldr	r2, [pc, #396]	; (8004b14 <HAL_DMA_Start_IT+0x200>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d03b      	beq.n	8004a02 <HAL_DMA_Start_IT+0xee>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a62      	ldr	r2, [pc, #392]	; (8004b18 <HAL_DMA_Start_IT+0x204>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d036      	beq.n	8004a02 <HAL_DMA_Start_IT+0xee>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a60      	ldr	r2, [pc, #384]	; (8004b1c <HAL_DMA_Start_IT+0x208>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d031      	beq.n	8004a02 <HAL_DMA_Start_IT+0xee>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a5f      	ldr	r2, [pc, #380]	; (8004b20 <HAL_DMA_Start_IT+0x20c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d02c      	beq.n	8004a02 <HAL_DMA_Start_IT+0xee>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a5d      	ldr	r2, [pc, #372]	; (8004b24 <HAL_DMA_Start_IT+0x210>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d027      	beq.n	8004a02 <HAL_DMA_Start_IT+0xee>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a5c      	ldr	r2, [pc, #368]	; (8004b28 <HAL_DMA_Start_IT+0x214>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d022      	beq.n	8004a02 <HAL_DMA_Start_IT+0xee>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a5a      	ldr	r2, [pc, #360]	; (8004b2c <HAL_DMA_Start_IT+0x218>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d01d      	beq.n	8004a02 <HAL_DMA_Start_IT+0xee>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a59      	ldr	r2, [pc, #356]	; (8004b30 <HAL_DMA_Start_IT+0x21c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d018      	beq.n	8004a02 <HAL_DMA_Start_IT+0xee>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a57      	ldr	r2, [pc, #348]	; (8004b34 <HAL_DMA_Start_IT+0x220>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d013      	beq.n	8004a02 <HAL_DMA_Start_IT+0xee>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a56      	ldr	r2, [pc, #344]	; (8004b38 <HAL_DMA_Start_IT+0x224>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d00e      	beq.n	8004a02 <HAL_DMA_Start_IT+0xee>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a54      	ldr	r2, [pc, #336]	; (8004b3c <HAL_DMA_Start_IT+0x228>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d009      	beq.n	8004a02 <HAL_DMA_Start_IT+0xee>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a53      	ldr	r2, [pc, #332]	; (8004b40 <HAL_DMA_Start_IT+0x22c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d004      	beq.n	8004a02 <HAL_DMA_Start_IT+0xee>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a51      	ldr	r2, [pc, #324]	; (8004b44 <HAL_DMA_Start_IT+0x230>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d108      	bne.n	8004a14 <HAL_DMA_Start_IT+0x100>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0201 	bic.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	e007      	b.n	8004a24 <HAL_DMA_Start_IT+0x110>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0201 	bic.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	68b9      	ldr	r1, [r7, #8]
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f001 fe6a 	bl	8006704 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a34      	ldr	r2, [pc, #208]	; (8004b08 <HAL_DMA_Start_IT+0x1f4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d04a      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x1bc>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a33      	ldr	r2, [pc, #204]	; (8004b0c <HAL_DMA_Start_IT+0x1f8>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d045      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x1bc>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a31      	ldr	r2, [pc, #196]	; (8004b10 <HAL_DMA_Start_IT+0x1fc>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d040      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x1bc>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a30      	ldr	r2, [pc, #192]	; (8004b14 <HAL_DMA_Start_IT+0x200>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d03b      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x1bc>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a2e      	ldr	r2, [pc, #184]	; (8004b18 <HAL_DMA_Start_IT+0x204>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d036      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x1bc>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a2d      	ldr	r2, [pc, #180]	; (8004b1c <HAL_DMA_Start_IT+0x208>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d031      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x1bc>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a2b      	ldr	r2, [pc, #172]	; (8004b20 <HAL_DMA_Start_IT+0x20c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d02c      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x1bc>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a2a      	ldr	r2, [pc, #168]	; (8004b24 <HAL_DMA_Start_IT+0x210>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d027      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x1bc>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a28      	ldr	r2, [pc, #160]	; (8004b28 <HAL_DMA_Start_IT+0x214>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d022      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x1bc>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a27      	ldr	r2, [pc, #156]	; (8004b2c <HAL_DMA_Start_IT+0x218>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d01d      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x1bc>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a25      	ldr	r2, [pc, #148]	; (8004b30 <HAL_DMA_Start_IT+0x21c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d018      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x1bc>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a24      	ldr	r2, [pc, #144]	; (8004b34 <HAL_DMA_Start_IT+0x220>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d013      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x1bc>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a22      	ldr	r2, [pc, #136]	; (8004b38 <HAL_DMA_Start_IT+0x224>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00e      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x1bc>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a21      	ldr	r2, [pc, #132]	; (8004b3c <HAL_DMA_Start_IT+0x228>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d009      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x1bc>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a1f      	ldr	r2, [pc, #124]	; (8004b40 <HAL_DMA_Start_IT+0x22c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d004      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x1bc>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a1e      	ldr	r2, [pc, #120]	; (8004b44 <HAL_DMA_Start_IT+0x230>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d101      	bne.n	8004ad4 <HAL_DMA_Start_IT+0x1c0>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e000      	b.n	8004ad6 <HAL_DMA_Start_IT+0x1c2>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d036      	beq.n	8004b48 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f023 021e 	bic.w	r2, r3, #30
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0216 	orr.w	r2, r2, #22
 8004aec:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d03e      	beq.n	8004b74 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0208 	orr.w	r2, r2, #8
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	e035      	b.n	8004b74 <HAL_DMA_Start_IT+0x260>
 8004b08:	40020010 	.word	0x40020010
 8004b0c:	40020028 	.word	0x40020028
 8004b10:	40020040 	.word	0x40020040
 8004b14:	40020058 	.word	0x40020058
 8004b18:	40020070 	.word	0x40020070
 8004b1c:	40020088 	.word	0x40020088
 8004b20:	400200a0 	.word	0x400200a0
 8004b24:	400200b8 	.word	0x400200b8
 8004b28:	40020410 	.word	0x40020410
 8004b2c:	40020428 	.word	0x40020428
 8004b30:	40020440 	.word	0x40020440
 8004b34:	40020458 	.word	0x40020458
 8004b38:	40020470 	.word	0x40020470
 8004b3c:	40020488 	.word	0x40020488
 8004b40:	400204a0 	.word	0x400204a0
 8004b44:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 020e 	bic.w	r2, r3, #14
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 020a 	orr.w	r2, r2, #10
 8004b5a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d007      	beq.n	8004b74 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0204 	orr.w	r2, r2, #4
 8004b72:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a83      	ldr	r2, [pc, #524]	; (8004d88 <HAL_DMA_Start_IT+0x474>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d072      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a82      	ldr	r2, [pc, #520]	; (8004d8c <HAL_DMA_Start_IT+0x478>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d06d      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a80      	ldr	r2, [pc, #512]	; (8004d90 <HAL_DMA_Start_IT+0x47c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d068      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a7f      	ldr	r2, [pc, #508]	; (8004d94 <HAL_DMA_Start_IT+0x480>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d063      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a7d      	ldr	r2, [pc, #500]	; (8004d98 <HAL_DMA_Start_IT+0x484>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d05e      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a7c      	ldr	r2, [pc, #496]	; (8004d9c <HAL_DMA_Start_IT+0x488>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d059      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a7a      	ldr	r2, [pc, #488]	; (8004da0 <HAL_DMA_Start_IT+0x48c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d054      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a79      	ldr	r2, [pc, #484]	; (8004da4 <HAL_DMA_Start_IT+0x490>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d04f      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a77      	ldr	r2, [pc, #476]	; (8004da8 <HAL_DMA_Start_IT+0x494>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d04a      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a76      	ldr	r2, [pc, #472]	; (8004dac <HAL_DMA_Start_IT+0x498>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d045      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a74      	ldr	r2, [pc, #464]	; (8004db0 <HAL_DMA_Start_IT+0x49c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d040      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a73      	ldr	r2, [pc, #460]	; (8004db4 <HAL_DMA_Start_IT+0x4a0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d03b      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a71      	ldr	r2, [pc, #452]	; (8004db8 <HAL_DMA_Start_IT+0x4a4>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d036      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a70      	ldr	r2, [pc, #448]	; (8004dbc <HAL_DMA_Start_IT+0x4a8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d031      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a6e      	ldr	r2, [pc, #440]	; (8004dc0 <HAL_DMA_Start_IT+0x4ac>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d02c      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a6d      	ldr	r2, [pc, #436]	; (8004dc4 <HAL_DMA_Start_IT+0x4b0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d027      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a6b      	ldr	r2, [pc, #428]	; (8004dc8 <HAL_DMA_Start_IT+0x4b4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d022      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a6a      	ldr	r2, [pc, #424]	; (8004dcc <HAL_DMA_Start_IT+0x4b8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d01d      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a68      	ldr	r2, [pc, #416]	; (8004dd0 <HAL_DMA_Start_IT+0x4bc>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d018      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a67      	ldr	r2, [pc, #412]	; (8004dd4 <HAL_DMA_Start_IT+0x4c0>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d013      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a65      	ldr	r2, [pc, #404]	; (8004dd8 <HAL_DMA_Start_IT+0x4c4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00e      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a64      	ldr	r2, [pc, #400]	; (8004ddc <HAL_DMA_Start_IT+0x4c8>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d009      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a62      	ldr	r2, [pc, #392]	; (8004de0 <HAL_DMA_Start_IT+0x4cc>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d004      	beq.n	8004c64 <HAL_DMA_Start_IT+0x350>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a61      	ldr	r2, [pc, #388]	; (8004de4 <HAL_DMA_Start_IT+0x4d0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d101      	bne.n	8004c68 <HAL_DMA_Start_IT+0x354>
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <HAL_DMA_Start_IT+0x356>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01a      	beq.n	8004ca4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d007      	beq.n	8004c8c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c8a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ca2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a37      	ldr	r2, [pc, #220]	; (8004d88 <HAL_DMA_Start_IT+0x474>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d04a      	beq.n	8004d44 <HAL_DMA_Start_IT+0x430>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a36      	ldr	r2, [pc, #216]	; (8004d8c <HAL_DMA_Start_IT+0x478>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d045      	beq.n	8004d44 <HAL_DMA_Start_IT+0x430>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a34      	ldr	r2, [pc, #208]	; (8004d90 <HAL_DMA_Start_IT+0x47c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d040      	beq.n	8004d44 <HAL_DMA_Start_IT+0x430>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a33      	ldr	r2, [pc, #204]	; (8004d94 <HAL_DMA_Start_IT+0x480>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d03b      	beq.n	8004d44 <HAL_DMA_Start_IT+0x430>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a31      	ldr	r2, [pc, #196]	; (8004d98 <HAL_DMA_Start_IT+0x484>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d036      	beq.n	8004d44 <HAL_DMA_Start_IT+0x430>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a30      	ldr	r2, [pc, #192]	; (8004d9c <HAL_DMA_Start_IT+0x488>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d031      	beq.n	8004d44 <HAL_DMA_Start_IT+0x430>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a2e      	ldr	r2, [pc, #184]	; (8004da0 <HAL_DMA_Start_IT+0x48c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d02c      	beq.n	8004d44 <HAL_DMA_Start_IT+0x430>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a2d      	ldr	r2, [pc, #180]	; (8004da4 <HAL_DMA_Start_IT+0x490>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d027      	beq.n	8004d44 <HAL_DMA_Start_IT+0x430>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a2b      	ldr	r2, [pc, #172]	; (8004da8 <HAL_DMA_Start_IT+0x494>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d022      	beq.n	8004d44 <HAL_DMA_Start_IT+0x430>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a2a      	ldr	r2, [pc, #168]	; (8004dac <HAL_DMA_Start_IT+0x498>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d01d      	beq.n	8004d44 <HAL_DMA_Start_IT+0x430>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a28      	ldr	r2, [pc, #160]	; (8004db0 <HAL_DMA_Start_IT+0x49c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d018      	beq.n	8004d44 <HAL_DMA_Start_IT+0x430>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a27      	ldr	r2, [pc, #156]	; (8004db4 <HAL_DMA_Start_IT+0x4a0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d013      	beq.n	8004d44 <HAL_DMA_Start_IT+0x430>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a25      	ldr	r2, [pc, #148]	; (8004db8 <HAL_DMA_Start_IT+0x4a4>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00e      	beq.n	8004d44 <HAL_DMA_Start_IT+0x430>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a24      	ldr	r2, [pc, #144]	; (8004dbc <HAL_DMA_Start_IT+0x4a8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d009      	beq.n	8004d44 <HAL_DMA_Start_IT+0x430>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a22      	ldr	r2, [pc, #136]	; (8004dc0 <HAL_DMA_Start_IT+0x4ac>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d004      	beq.n	8004d44 <HAL_DMA_Start_IT+0x430>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a21      	ldr	r2, [pc, #132]	; (8004dc4 <HAL_DMA_Start_IT+0x4b0>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d108      	bne.n	8004d56 <HAL_DMA_Start_IT+0x442>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	e012      	b.n	8004d7c <HAL_DMA_Start_IT+0x468>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f042 0201 	orr.w	r2, r2, #1
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	e009      	b.n	8004d7c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d6e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40020010 	.word	0x40020010
 8004d8c:	40020028 	.word	0x40020028
 8004d90:	40020040 	.word	0x40020040
 8004d94:	40020058 	.word	0x40020058
 8004d98:	40020070 	.word	0x40020070
 8004d9c:	40020088 	.word	0x40020088
 8004da0:	400200a0 	.word	0x400200a0
 8004da4:	400200b8 	.word	0x400200b8
 8004da8:	40020410 	.word	0x40020410
 8004dac:	40020428 	.word	0x40020428
 8004db0:	40020440 	.word	0x40020440
 8004db4:	40020458 	.word	0x40020458
 8004db8:	40020470 	.word	0x40020470
 8004dbc:	40020488 	.word	0x40020488
 8004dc0:	400204a0 	.word	0x400204a0
 8004dc4:	400204b8 	.word	0x400204b8
 8004dc8:	58025408 	.word	0x58025408
 8004dcc:	5802541c 	.word	0x5802541c
 8004dd0:	58025430 	.word	0x58025430
 8004dd4:	58025444 	.word	0x58025444
 8004dd8:	58025458 	.word	0x58025458
 8004ddc:	5802546c 	.word	0x5802546c
 8004de0:	58025480 	.word	0x58025480
 8004de4:	58025494 	.word	0x58025494

08004de8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004df0:	f7ff f91a 	bl	8004028 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e2dc      	b.n	80053ba <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d008      	beq.n	8004e1e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2280      	movs	r2, #128	; 0x80
 8004e10:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e2cd      	b.n	80053ba <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a76      	ldr	r2, [pc, #472]	; (8004ffc <HAL_DMA_Abort+0x214>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d04a      	beq.n	8004ebe <HAL_DMA_Abort+0xd6>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a74      	ldr	r2, [pc, #464]	; (8005000 <HAL_DMA_Abort+0x218>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d045      	beq.n	8004ebe <HAL_DMA_Abort+0xd6>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a73      	ldr	r2, [pc, #460]	; (8005004 <HAL_DMA_Abort+0x21c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d040      	beq.n	8004ebe <HAL_DMA_Abort+0xd6>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a71      	ldr	r2, [pc, #452]	; (8005008 <HAL_DMA_Abort+0x220>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d03b      	beq.n	8004ebe <HAL_DMA_Abort+0xd6>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a70      	ldr	r2, [pc, #448]	; (800500c <HAL_DMA_Abort+0x224>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d036      	beq.n	8004ebe <HAL_DMA_Abort+0xd6>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a6e      	ldr	r2, [pc, #440]	; (8005010 <HAL_DMA_Abort+0x228>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d031      	beq.n	8004ebe <HAL_DMA_Abort+0xd6>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a6d      	ldr	r2, [pc, #436]	; (8005014 <HAL_DMA_Abort+0x22c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d02c      	beq.n	8004ebe <HAL_DMA_Abort+0xd6>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a6b      	ldr	r2, [pc, #428]	; (8005018 <HAL_DMA_Abort+0x230>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d027      	beq.n	8004ebe <HAL_DMA_Abort+0xd6>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a6a      	ldr	r2, [pc, #424]	; (800501c <HAL_DMA_Abort+0x234>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d022      	beq.n	8004ebe <HAL_DMA_Abort+0xd6>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a68      	ldr	r2, [pc, #416]	; (8005020 <HAL_DMA_Abort+0x238>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d01d      	beq.n	8004ebe <HAL_DMA_Abort+0xd6>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a67      	ldr	r2, [pc, #412]	; (8005024 <HAL_DMA_Abort+0x23c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d018      	beq.n	8004ebe <HAL_DMA_Abort+0xd6>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a65      	ldr	r2, [pc, #404]	; (8005028 <HAL_DMA_Abort+0x240>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d013      	beq.n	8004ebe <HAL_DMA_Abort+0xd6>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a64      	ldr	r2, [pc, #400]	; (800502c <HAL_DMA_Abort+0x244>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d00e      	beq.n	8004ebe <HAL_DMA_Abort+0xd6>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a62      	ldr	r2, [pc, #392]	; (8005030 <HAL_DMA_Abort+0x248>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d009      	beq.n	8004ebe <HAL_DMA_Abort+0xd6>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a61      	ldr	r2, [pc, #388]	; (8005034 <HAL_DMA_Abort+0x24c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d004      	beq.n	8004ebe <HAL_DMA_Abort+0xd6>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a5f      	ldr	r2, [pc, #380]	; (8005038 <HAL_DMA_Abort+0x250>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d101      	bne.n	8004ec2 <HAL_DMA_Abort+0xda>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <HAL_DMA_Abort+0xdc>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d013      	beq.n	8004ef0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 021e 	bic.w	r2, r2, #30
 8004ed6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	695a      	ldr	r2, [r3, #20]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ee6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	e00a      	b.n	8004f06 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 020e 	bic.w	r2, r2, #14
 8004efe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a3c      	ldr	r2, [pc, #240]	; (8004ffc <HAL_DMA_Abort+0x214>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d072      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a3a      	ldr	r2, [pc, #232]	; (8005000 <HAL_DMA_Abort+0x218>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d06d      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a39      	ldr	r2, [pc, #228]	; (8005004 <HAL_DMA_Abort+0x21c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d068      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a37      	ldr	r2, [pc, #220]	; (8005008 <HAL_DMA_Abort+0x220>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d063      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a36      	ldr	r2, [pc, #216]	; (800500c <HAL_DMA_Abort+0x224>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d05e      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a34      	ldr	r2, [pc, #208]	; (8005010 <HAL_DMA_Abort+0x228>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d059      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a33      	ldr	r2, [pc, #204]	; (8005014 <HAL_DMA_Abort+0x22c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d054      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a31      	ldr	r2, [pc, #196]	; (8005018 <HAL_DMA_Abort+0x230>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d04f      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a30      	ldr	r2, [pc, #192]	; (800501c <HAL_DMA_Abort+0x234>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d04a      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a2e      	ldr	r2, [pc, #184]	; (8005020 <HAL_DMA_Abort+0x238>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d045      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a2d      	ldr	r2, [pc, #180]	; (8005024 <HAL_DMA_Abort+0x23c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d040      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a2b      	ldr	r2, [pc, #172]	; (8005028 <HAL_DMA_Abort+0x240>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d03b      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a2a      	ldr	r2, [pc, #168]	; (800502c <HAL_DMA_Abort+0x244>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d036      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a28      	ldr	r2, [pc, #160]	; (8005030 <HAL_DMA_Abort+0x248>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d031      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a27      	ldr	r2, [pc, #156]	; (8005034 <HAL_DMA_Abort+0x24c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d02c      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a25      	ldr	r2, [pc, #148]	; (8005038 <HAL_DMA_Abort+0x250>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d027      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a24      	ldr	r2, [pc, #144]	; (800503c <HAL_DMA_Abort+0x254>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d022      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a22      	ldr	r2, [pc, #136]	; (8005040 <HAL_DMA_Abort+0x258>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d01d      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a21      	ldr	r2, [pc, #132]	; (8005044 <HAL_DMA_Abort+0x25c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d018      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1f      	ldr	r2, [pc, #124]	; (8005048 <HAL_DMA_Abort+0x260>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d013      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1e      	ldr	r2, [pc, #120]	; (800504c <HAL_DMA_Abort+0x264>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00e      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1c      	ldr	r2, [pc, #112]	; (8005050 <HAL_DMA_Abort+0x268>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d009      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1b      	ldr	r2, [pc, #108]	; (8005054 <HAL_DMA_Abort+0x26c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d004      	beq.n	8004ff6 <HAL_DMA_Abort+0x20e>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a19      	ldr	r2, [pc, #100]	; (8005058 <HAL_DMA_Abort+0x270>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d132      	bne.n	800505c <HAL_DMA_Abort+0x274>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e031      	b.n	800505e <HAL_DMA_Abort+0x276>
 8004ffa:	bf00      	nop
 8004ffc:	40020010 	.word	0x40020010
 8005000:	40020028 	.word	0x40020028
 8005004:	40020040 	.word	0x40020040
 8005008:	40020058 	.word	0x40020058
 800500c:	40020070 	.word	0x40020070
 8005010:	40020088 	.word	0x40020088
 8005014:	400200a0 	.word	0x400200a0
 8005018:	400200b8 	.word	0x400200b8
 800501c:	40020410 	.word	0x40020410
 8005020:	40020428 	.word	0x40020428
 8005024:	40020440 	.word	0x40020440
 8005028:	40020458 	.word	0x40020458
 800502c:	40020470 	.word	0x40020470
 8005030:	40020488 	.word	0x40020488
 8005034:	400204a0 	.word	0x400204a0
 8005038:	400204b8 	.word	0x400204b8
 800503c:	58025408 	.word	0x58025408
 8005040:	5802541c 	.word	0x5802541c
 8005044:	58025430 	.word	0x58025430
 8005048:	58025444 	.word	0x58025444
 800504c:	58025458 	.word	0x58025458
 8005050:	5802546c 	.word	0x5802546c
 8005054:	58025480 	.word	0x58025480
 8005058:	58025494 	.word	0x58025494
 800505c:	2300      	movs	r3, #0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d007      	beq.n	8005072 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800506c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005070:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a6d      	ldr	r2, [pc, #436]	; (800522c <HAL_DMA_Abort+0x444>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d04a      	beq.n	8005112 <HAL_DMA_Abort+0x32a>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a6b      	ldr	r2, [pc, #428]	; (8005230 <HAL_DMA_Abort+0x448>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d045      	beq.n	8005112 <HAL_DMA_Abort+0x32a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a6a      	ldr	r2, [pc, #424]	; (8005234 <HAL_DMA_Abort+0x44c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d040      	beq.n	8005112 <HAL_DMA_Abort+0x32a>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a68      	ldr	r2, [pc, #416]	; (8005238 <HAL_DMA_Abort+0x450>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d03b      	beq.n	8005112 <HAL_DMA_Abort+0x32a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a67      	ldr	r2, [pc, #412]	; (800523c <HAL_DMA_Abort+0x454>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d036      	beq.n	8005112 <HAL_DMA_Abort+0x32a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a65      	ldr	r2, [pc, #404]	; (8005240 <HAL_DMA_Abort+0x458>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d031      	beq.n	8005112 <HAL_DMA_Abort+0x32a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a64      	ldr	r2, [pc, #400]	; (8005244 <HAL_DMA_Abort+0x45c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d02c      	beq.n	8005112 <HAL_DMA_Abort+0x32a>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a62      	ldr	r2, [pc, #392]	; (8005248 <HAL_DMA_Abort+0x460>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d027      	beq.n	8005112 <HAL_DMA_Abort+0x32a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a61      	ldr	r2, [pc, #388]	; (800524c <HAL_DMA_Abort+0x464>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d022      	beq.n	8005112 <HAL_DMA_Abort+0x32a>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a5f      	ldr	r2, [pc, #380]	; (8005250 <HAL_DMA_Abort+0x468>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d01d      	beq.n	8005112 <HAL_DMA_Abort+0x32a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a5e      	ldr	r2, [pc, #376]	; (8005254 <HAL_DMA_Abort+0x46c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d018      	beq.n	8005112 <HAL_DMA_Abort+0x32a>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a5c      	ldr	r2, [pc, #368]	; (8005258 <HAL_DMA_Abort+0x470>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d013      	beq.n	8005112 <HAL_DMA_Abort+0x32a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a5b      	ldr	r2, [pc, #364]	; (800525c <HAL_DMA_Abort+0x474>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00e      	beq.n	8005112 <HAL_DMA_Abort+0x32a>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a59      	ldr	r2, [pc, #356]	; (8005260 <HAL_DMA_Abort+0x478>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d009      	beq.n	8005112 <HAL_DMA_Abort+0x32a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a58      	ldr	r2, [pc, #352]	; (8005264 <HAL_DMA_Abort+0x47c>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d004      	beq.n	8005112 <HAL_DMA_Abort+0x32a>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a56      	ldr	r2, [pc, #344]	; (8005268 <HAL_DMA_Abort+0x480>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d108      	bne.n	8005124 <HAL_DMA_Abort+0x33c>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0201 	bic.w	r2, r2, #1
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	e007      	b.n	8005134 <HAL_DMA_Abort+0x34c>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0201 	bic.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005134:	e013      	b.n	800515e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005136:	f7fe ff77 	bl	8004028 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b05      	cmp	r3, #5
 8005142:	d90c      	bls.n	800515e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2220      	movs	r2, #32
 8005148:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2203      	movs	r2, #3
 800514e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e12d      	b.n	80053ba <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e5      	bne.n	8005136 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a2f      	ldr	r2, [pc, #188]	; (800522c <HAL_DMA_Abort+0x444>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d04a      	beq.n	800520a <HAL_DMA_Abort+0x422>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a2d      	ldr	r2, [pc, #180]	; (8005230 <HAL_DMA_Abort+0x448>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d045      	beq.n	800520a <HAL_DMA_Abort+0x422>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a2c      	ldr	r2, [pc, #176]	; (8005234 <HAL_DMA_Abort+0x44c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d040      	beq.n	800520a <HAL_DMA_Abort+0x422>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a2a      	ldr	r2, [pc, #168]	; (8005238 <HAL_DMA_Abort+0x450>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d03b      	beq.n	800520a <HAL_DMA_Abort+0x422>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a29      	ldr	r2, [pc, #164]	; (800523c <HAL_DMA_Abort+0x454>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d036      	beq.n	800520a <HAL_DMA_Abort+0x422>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a27      	ldr	r2, [pc, #156]	; (8005240 <HAL_DMA_Abort+0x458>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d031      	beq.n	800520a <HAL_DMA_Abort+0x422>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a26      	ldr	r2, [pc, #152]	; (8005244 <HAL_DMA_Abort+0x45c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d02c      	beq.n	800520a <HAL_DMA_Abort+0x422>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a24      	ldr	r2, [pc, #144]	; (8005248 <HAL_DMA_Abort+0x460>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d027      	beq.n	800520a <HAL_DMA_Abort+0x422>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a23      	ldr	r2, [pc, #140]	; (800524c <HAL_DMA_Abort+0x464>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d022      	beq.n	800520a <HAL_DMA_Abort+0x422>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a21      	ldr	r2, [pc, #132]	; (8005250 <HAL_DMA_Abort+0x468>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d01d      	beq.n	800520a <HAL_DMA_Abort+0x422>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a20      	ldr	r2, [pc, #128]	; (8005254 <HAL_DMA_Abort+0x46c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d018      	beq.n	800520a <HAL_DMA_Abort+0x422>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1e      	ldr	r2, [pc, #120]	; (8005258 <HAL_DMA_Abort+0x470>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d013      	beq.n	800520a <HAL_DMA_Abort+0x422>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a1d      	ldr	r2, [pc, #116]	; (800525c <HAL_DMA_Abort+0x474>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d00e      	beq.n	800520a <HAL_DMA_Abort+0x422>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a1b      	ldr	r2, [pc, #108]	; (8005260 <HAL_DMA_Abort+0x478>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d009      	beq.n	800520a <HAL_DMA_Abort+0x422>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a1a      	ldr	r2, [pc, #104]	; (8005264 <HAL_DMA_Abort+0x47c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d004      	beq.n	800520a <HAL_DMA_Abort+0x422>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a18      	ldr	r2, [pc, #96]	; (8005268 <HAL_DMA_Abort+0x480>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d101      	bne.n	800520e <HAL_DMA_Abort+0x426>
 800520a:	2301      	movs	r3, #1
 800520c:	e000      	b.n	8005210 <HAL_DMA_Abort+0x428>
 800520e:	2300      	movs	r3, #0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d02b      	beq.n	800526c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005218:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800521e:	f003 031f 	and.w	r3, r3, #31
 8005222:	223f      	movs	r2, #63	; 0x3f
 8005224:	409a      	lsls	r2, r3
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	609a      	str	r2, [r3, #8]
 800522a:	e02a      	b.n	8005282 <HAL_DMA_Abort+0x49a>
 800522c:	40020010 	.word	0x40020010
 8005230:	40020028 	.word	0x40020028
 8005234:	40020040 	.word	0x40020040
 8005238:	40020058 	.word	0x40020058
 800523c:	40020070 	.word	0x40020070
 8005240:	40020088 	.word	0x40020088
 8005244:	400200a0 	.word	0x400200a0
 8005248:	400200b8 	.word	0x400200b8
 800524c:	40020410 	.word	0x40020410
 8005250:	40020428 	.word	0x40020428
 8005254:	40020440 	.word	0x40020440
 8005258:	40020458 	.word	0x40020458
 800525c:	40020470 	.word	0x40020470
 8005260:	40020488 	.word	0x40020488
 8005264:	400204a0 	.word	0x400204a0
 8005268:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005270:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005276:	f003 031f 	and.w	r3, r3, #31
 800527a:	2201      	movs	r2, #1
 800527c:	409a      	lsls	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a4f      	ldr	r2, [pc, #316]	; (80053c4 <HAL_DMA_Abort+0x5dc>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d072      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a4d      	ldr	r2, [pc, #308]	; (80053c8 <HAL_DMA_Abort+0x5e0>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d06d      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a4c      	ldr	r2, [pc, #304]	; (80053cc <HAL_DMA_Abort+0x5e4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d068      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a4a      	ldr	r2, [pc, #296]	; (80053d0 <HAL_DMA_Abort+0x5e8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d063      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a49      	ldr	r2, [pc, #292]	; (80053d4 <HAL_DMA_Abort+0x5ec>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d05e      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a47      	ldr	r2, [pc, #284]	; (80053d8 <HAL_DMA_Abort+0x5f0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d059      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a46      	ldr	r2, [pc, #280]	; (80053dc <HAL_DMA_Abort+0x5f4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d054      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a44      	ldr	r2, [pc, #272]	; (80053e0 <HAL_DMA_Abort+0x5f8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d04f      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a43      	ldr	r2, [pc, #268]	; (80053e4 <HAL_DMA_Abort+0x5fc>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d04a      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a41      	ldr	r2, [pc, #260]	; (80053e8 <HAL_DMA_Abort+0x600>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d045      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a40      	ldr	r2, [pc, #256]	; (80053ec <HAL_DMA_Abort+0x604>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d040      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a3e      	ldr	r2, [pc, #248]	; (80053f0 <HAL_DMA_Abort+0x608>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d03b      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a3d      	ldr	r2, [pc, #244]	; (80053f4 <HAL_DMA_Abort+0x60c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d036      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a3b      	ldr	r2, [pc, #236]	; (80053f8 <HAL_DMA_Abort+0x610>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d031      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a3a      	ldr	r2, [pc, #232]	; (80053fc <HAL_DMA_Abort+0x614>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d02c      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a38      	ldr	r2, [pc, #224]	; (8005400 <HAL_DMA_Abort+0x618>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d027      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a37      	ldr	r2, [pc, #220]	; (8005404 <HAL_DMA_Abort+0x61c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d022      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a35      	ldr	r2, [pc, #212]	; (8005408 <HAL_DMA_Abort+0x620>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d01d      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a34      	ldr	r2, [pc, #208]	; (800540c <HAL_DMA_Abort+0x624>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d018      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a32      	ldr	r2, [pc, #200]	; (8005410 <HAL_DMA_Abort+0x628>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d013      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a31      	ldr	r2, [pc, #196]	; (8005414 <HAL_DMA_Abort+0x62c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d00e      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a2f      	ldr	r2, [pc, #188]	; (8005418 <HAL_DMA_Abort+0x630>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d009      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a2e      	ldr	r2, [pc, #184]	; (800541c <HAL_DMA_Abort+0x634>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d004      	beq.n	8005372 <HAL_DMA_Abort+0x58a>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a2c      	ldr	r2, [pc, #176]	; (8005420 <HAL_DMA_Abort+0x638>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d101      	bne.n	8005376 <HAL_DMA_Abort+0x58e>
 8005372:	2301      	movs	r3, #1
 8005374:	e000      	b.n	8005378 <HAL_DMA_Abort+0x590>
 8005376:	2300      	movs	r3, #0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d015      	beq.n	80053a8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005384:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00c      	beq.n	80053a8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005398:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800539c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80053a6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3718      	adds	r7, #24
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40020010 	.word	0x40020010
 80053c8:	40020028 	.word	0x40020028
 80053cc:	40020040 	.word	0x40020040
 80053d0:	40020058 	.word	0x40020058
 80053d4:	40020070 	.word	0x40020070
 80053d8:	40020088 	.word	0x40020088
 80053dc:	400200a0 	.word	0x400200a0
 80053e0:	400200b8 	.word	0x400200b8
 80053e4:	40020410 	.word	0x40020410
 80053e8:	40020428 	.word	0x40020428
 80053ec:	40020440 	.word	0x40020440
 80053f0:	40020458 	.word	0x40020458
 80053f4:	40020470 	.word	0x40020470
 80053f8:	40020488 	.word	0x40020488
 80053fc:	400204a0 	.word	0x400204a0
 8005400:	400204b8 	.word	0x400204b8
 8005404:	58025408 	.word	0x58025408
 8005408:	5802541c 	.word	0x5802541c
 800540c:	58025430 	.word	0x58025430
 8005410:	58025444 	.word	0x58025444
 8005414:	58025458 	.word	0x58025458
 8005418:	5802546c 	.word	0x5802546c
 800541c:	58025480 	.word	0x58025480
 8005420:	58025494 	.word	0x58025494

08005424 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e237      	b.n	80058a6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d004      	beq.n	800544c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2280      	movs	r2, #128	; 0x80
 8005446:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e22c      	b.n	80058a6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a5c      	ldr	r2, [pc, #368]	; (80055c4 <HAL_DMA_Abort_IT+0x1a0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d04a      	beq.n	80054ec <HAL_DMA_Abort_IT+0xc8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a5b      	ldr	r2, [pc, #364]	; (80055c8 <HAL_DMA_Abort_IT+0x1a4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d045      	beq.n	80054ec <HAL_DMA_Abort_IT+0xc8>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a59      	ldr	r2, [pc, #356]	; (80055cc <HAL_DMA_Abort_IT+0x1a8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d040      	beq.n	80054ec <HAL_DMA_Abort_IT+0xc8>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a58      	ldr	r2, [pc, #352]	; (80055d0 <HAL_DMA_Abort_IT+0x1ac>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d03b      	beq.n	80054ec <HAL_DMA_Abort_IT+0xc8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a56      	ldr	r2, [pc, #344]	; (80055d4 <HAL_DMA_Abort_IT+0x1b0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d036      	beq.n	80054ec <HAL_DMA_Abort_IT+0xc8>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a55      	ldr	r2, [pc, #340]	; (80055d8 <HAL_DMA_Abort_IT+0x1b4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d031      	beq.n	80054ec <HAL_DMA_Abort_IT+0xc8>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a53      	ldr	r2, [pc, #332]	; (80055dc <HAL_DMA_Abort_IT+0x1b8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d02c      	beq.n	80054ec <HAL_DMA_Abort_IT+0xc8>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a52      	ldr	r2, [pc, #328]	; (80055e0 <HAL_DMA_Abort_IT+0x1bc>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d027      	beq.n	80054ec <HAL_DMA_Abort_IT+0xc8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a50      	ldr	r2, [pc, #320]	; (80055e4 <HAL_DMA_Abort_IT+0x1c0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d022      	beq.n	80054ec <HAL_DMA_Abort_IT+0xc8>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a4f      	ldr	r2, [pc, #316]	; (80055e8 <HAL_DMA_Abort_IT+0x1c4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d01d      	beq.n	80054ec <HAL_DMA_Abort_IT+0xc8>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a4d      	ldr	r2, [pc, #308]	; (80055ec <HAL_DMA_Abort_IT+0x1c8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d018      	beq.n	80054ec <HAL_DMA_Abort_IT+0xc8>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a4c      	ldr	r2, [pc, #304]	; (80055f0 <HAL_DMA_Abort_IT+0x1cc>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d013      	beq.n	80054ec <HAL_DMA_Abort_IT+0xc8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a4a      	ldr	r2, [pc, #296]	; (80055f4 <HAL_DMA_Abort_IT+0x1d0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00e      	beq.n	80054ec <HAL_DMA_Abort_IT+0xc8>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a49      	ldr	r2, [pc, #292]	; (80055f8 <HAL_DMA_Abort_IT+0x1d4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d009      	beq.n	80054ec <HAL_DMA_Abort_IT+0xc8>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a47      	ldr	r2, [pc, #284]	; (80055fc <HAL_DMA_Abort_IT+0x1d8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d004      	beq.n	80054ec <HAL_DMA_Abort_IT+0xc8>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a46      	ldr	r2, [pc, #280]	; (8005600 <HAL_DMA_Abort_IT+0x1dc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d101      	bne.n	80054f0 <HAL_DMA_Abort_IT+0xcc>
 80054ec:	2301      	movs	r3, #1
 80054ee:	e000      	b.n	80054f2 <HAL_DMA_Abort_IT+0xce>
 80054f0:	2300      	movs	r3, #0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 8086 	beq.w	8005604 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2204      	movs	r2, #4
 80054fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a2f      	ldr	r2, [pc, #188]	; (80055c4 <HAL_DMA_Abort_IT+0x1a0>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d04a      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x17c>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a2e      	ldr	r2, [pc, #184]	; (80055c8 <HAL_DMA_Abort_IT+0x1a4>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d045      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x17c>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a2c      	ldr	r2, [pc, #176]	; (80055cc <HAL_DMA_Abort_IT+0x1a8>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d040      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x17c>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a2b      	ldr	r2, [pc, #172]	; (80055d0 <HAL_DMA_Abort_IT+0x1ac>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d03b      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x17c>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a29      	ldr	r2, [pc, #164]	; (80055d4 <HAL_DMA_Abort_IT+0x1b0>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d036      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x17c>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a28      	ldr	r2, [pc, #160]	; (80055d8 <HAL_DMA_Abort_IT+0x1b4>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d031      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x17c>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a26      	ldr	r2, [pc, #152]	; (80055dc <HAL_DMA_Abort_IT+0x1b8>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d02c      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x17c>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a25      	ldr	r2, [pc, #148]	; (80055e0 <HAL_DMA_Abort_IT+0x1bc>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d027      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x17c>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a23      	ldr	r2, [pc, #140]	; (80055e4 <HAL_DMA_Abort_IT+0x1c0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d022      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x17c>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a22      	ldr	r2, [pc, #136]	; (80055e8 <HAL_DMA_Abort_IT+0x1c4>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d01d      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x17c>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a20      	ldr	r2, [pc, #128]	; (80055ec <HAL_DMA_Abort_IT+0x1c8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d018      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x17c>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a1f      	ldr	r2, [pc, #124]	; (80055f0 <HAL_DMA_Abort_IT+0x1cc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d013      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x17c>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1d      	ldr	r2, [pc, #116]	; (80055f4 <HAL_DMA_Abort_IT+0x1d0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00e      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x17c>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1c      	ldr	r2, [pc, #112]	; (80055f8 <HAL_DMA_Abort_IT+0x1d4>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d009      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x17c>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a1a      	ldr	r2, [pc, #104]	; (80055fc <HAL_DMA_Abort_IT+0x1d8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d004      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x17c>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a19      	ldr	r2, [pc, #100]	; (8005600 <HAL_DMA_Abort_IT+0x1dc>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d108      	bne.n	80055b2 <HAL_DMA_Abort_IT+0x18e>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0201 	bic.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	e178      	b.n	80058a4 <HAL_DMA_Abort_IT+0x480>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0201 	bic.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	e16f      	b.n	80058a4 <HAL_DMA_Abort_IT+0x480>
 80055c4:	40020010 	.word	0x40020010
 80055c8:	40020028 	.word	0x40020028
 80055cc:	40020040 	.word	0x40020040
 80055d0:	40020058 	.word	0x40020058
 80055d4:	40020070 	.word	0x40020070
 80055d8:	40020088 	.word	0x40020088
 80055dc:	400200a0 	.word	0x400200a0
 80055e0:	400200b8 	.word	0x400200b8
 80055e4:	40020410 	.word	0x40020410
 80055e8:	40020428 	.word	0x40020428
 80055ec:	40020440 	.word	0x40020440
 80055f0:	40020458 	.word	0x40020458
 80055f4:	40020470 	.word	0x40020470
 80055f8:	40020488 	.word	0x40020488
 80055fc:	400204a0 	.word	0x400204a0
 8005600:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 020e 	bic.w	r2, r2, #14
 8005612:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a6c      	ldr	r2, [pc, #432]	; (80057cc <HAL_DMA_Abort_IT+0x3a8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d04a      	beq.n	80056b4 <HAL_DMA_Abort_IT+0x290>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a6b      	ldr	r2, [pc, #428]	; (80057d0 <HAL_DMA_Abort_IT+0x3ac>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d045      	beq.n	80056b4 <HAL_DMA_Abort_IT+0x290>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a69      	ldr	r2, [pc, #420]	; (80057d4 <HAL_DMA_Abort_IT+0x3b0>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d040      	beq.n	80056b4 <HAL_DMA_Abort_IT+0x290>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a68      	ldr	r2, [pc, #416]	; (80057d8 <HAL_DMA_Abort_IT+0x3b4>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d03b      	beq.n	80056b4 <HAL_DMA_Abort_IT+0x290>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a66      	ldr	r2, [pc, #408]	; (80057dc <HAL_DMA_Abort_IT+0x3b8>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d036      	beq.n	80056b4 <HAL_DMA_Abort_IT+0x290>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a65      	ldr	r2, [pc, #404]	; (80057e0 <HAL_DMA_Abort_IT+0x3bc>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d031      	beq.n	80056b4 <HAL_DMA_Abort_IT+0x290>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a63      	ldr	r2, [pc, #396]	; (80057e4 <HAL_DMA_Abort_IT+0x3c0>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d02c      	beq.n	80056b4 <HAL_DMA_Abort_IT+0x290>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a62      	ldr	r2, [pc, #392]	; (80057e8 <HAL_DMA_Abort_IT+0x3c4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d027      	beq.n	80056b4 <HAL_DMA_Abort_IT+0x290>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a60      	ldr	r2, [pc, #384]	; (80057ec <HAL_DMA_Abort_IT+0x3c8>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d022      	beq.n	80056b4 <HAL_DMA_Abort_IT+0x290>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a5f      	ldr	r2, [pc, #380]	; (80057f0 <HAL_DMA_Abort_IT+0x3cc>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d01d      	beq.n	80056b4 <HAL_DMA_Abort_IT+0x290>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a5d      	ldr	r2, [pc, #372]	; (80057f4 <HAL_DMA_Abort_IT+0x3d0>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d018      	beq.n	80056b4 <HAL_DMA_Abort_IT+0x290>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a5c      	ldr	r2, [pc, #368]	; (80057f8 <HAL_DMA_Abort_IT+0x3d4>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d013      	beq.n	80056b4 <HAL_DMA_Abort_IT+0x290>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a5a      	ldr	r2, [pc, #360]	; (80057fc <HAL_DMA_Abort_IT+0x3d8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00e      	beq.n	80056b4 <HAL_DMA_Abort_IT+0x290>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a59      	ldr	r2, [pc, #356]	; (8005800 <HAL_DMA_Abort_IT+0x3dc>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d009      	beq.n	80056b4 <HAL_DMA_Abort_IT+0x290>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a57      	ldr	r2, [pc, #348]	; (8005804 <HAL_DMA_Abort_IT+0x3e0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d004      	beq.n	80056b4 <HAL_DMA_Abort_IT+0x290>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a56      	ldr	r2, [pc, #344]	; (8005808 <HAL_DMA_Abort_IT+0x3e4>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d108      	bne.n	80056c6 <HAL_DMA_Abort_IT+0x2a2>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0201 	bic.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	e007      	b.n	80056d6 <HAL_DMA_Abort_IT+0x2b2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a3c      	ldr	r2, [pc, #240]	; (80057cc <HAL_DMA_Abort_IT+0x3a8>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d072      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a3a      	ldr	r2, [pc, #232]	; (80057d0 <HAL_DMA_Abort_IT+0x3ac>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d06d      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a39      	ldr	r2, [pc, #228]	; (80057d4 <HAL_DMA_Abort_IT+0x3b0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d068      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a37      	ldr	r2, [pc, #220]	; (80057d8 <HAL_DMA_Abort_IT+0x3b4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d063      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a36      	ldr	r2, [pc, #216]	; (80057dc <HAL_DMA_Abort_IT+0x3b8>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d05e      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a34      	ldr	r2, [pc, #208]	; (80057e0 <HAL_DMA_Abort_IT+0x3bc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d059      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a33      	ldr	r2, [pc, #204]	; (80057e4 <HAL_DMA_Abort_IT+0x3c0>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d054      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a31      	ldr	r2, [pc, #196]	; (80057e8 <HAL_DMA_Abort_IT+0x3c4>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d04f      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a30      	ldr	r2, [pc, #192]	; (80057ec <HAL_DMA_Abort_IT+0x3c8>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d04a      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a2e      	ldr	r2, [pc, #184]	; (80057f0 <HAL_DMA_Abort_IT+0x3cc>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d045      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a2d      	ldr	r2, [pc, #180]	; (80057f4 <HAL_DMA_Abort_IT+0x3d0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d040      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a2b      	ldr	r2, [pc, #172]	; (80057f8 <HAL_DMA_Abort_IT+0x3d4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d03b      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a2a      	ldr	r2, [pc, #168]	; (80057fc <HAL_DMA_Abort_IT+0x3d8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d036      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a28      	ldr	r2, [pc, #160]	; (8005800 <HAL_DMA_Abort_IT+0x3dc>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d031      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a27      	ldr	r2, [pc, #156]	; (8005804 <HAL_DMA_Abort_IT+0x3e0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d02c      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a25      	ldr	r2, [pc, #148]	; (8005808 <HAL_DMA_Abort_IT+0x3e4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d027      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a24      	ldr	r2, [pc, #144]	; (800580c <HAL_DMA_Abort_IT+0x3e8>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d022      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a22      	ldr	r2, [pc, #136]	; (8005810 <HAL_DMA_Abort_IT+0x3ec>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d01d      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a21      	ldr	r2, [pc, #132]	; (8005814 <HAL_DMA_Abort_IT+0x3f0>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d018      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a1f      	ldr	r2, [pc, #124]	; (8005818 <HAL_DMA_Abort_IT+0x3f4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d013      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a1e      	ldr	r2, [pc, #120]	; (800581c <HAL_DMA_Abort_IT+0x3f8>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00e      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1c      	ldr	r2, [pc, #112]	; (8005820 <HAL_DMA_Abort_IT+0x3fc>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d009      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1b      	ldr	r2, [pc, #108]	; (8005824 <HAL_DMA_Abort_IT+0x400>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d004      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x3a2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a19      	ldr	r2, [pc, #100]	; (8005828 <HAL_DMA_Abort_IT+0x404>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d132      	bne.n	800582c <HAL_DMA_Abort_IT+0x408>
 80057c6:	2301      	movs	r3, #1
 80057c8:	e031      	b.n	800582e <HAL_DMA_Abort_IT+0x40a>
 80057ca:	bf00      	nop
 80057cc:	40020010 	.word	0x40020010
 80057d0:	40020028 	.word	0x40020028
 80057d4:	40020040 	.word	0x40020040
 80057d8:	40020058 	.word	0x40020058
 80057dc:	40020070 	.word	0x40020070
 80057e0:	40020088 	.word	0x40020088
 80057e4:	400200a0 	.word	0x400200a0
 80057e8:	400200b8 	.word	0x400200b8
 80057ec:	40020410 	.word	0x40020410
 80057f0:	40020428 	.word	0x40020428
 80057f4:	40020440 	.word	0x40020440
 80057f8:	40020458 	.word	0x40020458
 80057fc:	40020470 	.word	0x40020470
 8005800:	40020488 	.word	0x40020488
 8005804:	400204a0 	.word	0x400204a0
 8005808:	400204b8 	.word	0x400204b8
 800580c:	58025408 	.word	0x58025408
 8005810:	5802541c 	.word	0x5802541c
 8005814:	58025430 	.word	0x58025430
 8005818:	58025444 	.word	0x58025444
 800581c:	58025458 	.word	0x58025458
 8005820:	5802546c 	.word	0x5802546c
 8005824:	58025480 	.word	0x58025480
 8005828:	58025494 	.word	0x58025494
 800582c:	2300      	movs	r3, #0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d028      	beq.n	8005884 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800583c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005840:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005846:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584c:	f003 031f 	and.w	r3, r3, #31
 8005850:	2201      	movs	r2, #1
 8005852:	409a      	lsls	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005860:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00c      	beq.n	8005884 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005878:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005882:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop

080058b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08a      	sub	sp, #40	; 0x28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058bc:	4b67      	ldr	r3, [pc, #412]	; (8005a5c <HAL_DMA_IRQHandler+0x1ac>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a67      	ldr	r2, [pc, #412]	; (8005a60 <HAL_DMA_IRQHandler+0x1b0>)
 80058c2:	fba2 2303 	umull	r2, r3, r2, r3
 80058c6:	0a9b      	lsrs	r3, r3, #10
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ce:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a5f      	ldr	r2, [pc, #380]	; (8005a64 <HAL_DMA_IRQHandler+0x1b4>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d04a      	beq.n	8005982 <HAL_DMA_IRQHandler+0xd2>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a5d      	ldr	r2, [pc, #372]	; (8005a68 <HAL_DMA_IRQHandler+0x1b8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d045      	beq.n	8005982 <HAL_DMA_IRQHandler+0xd2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a5c      	ldr	r2, [pc, #368]	; (8005a6c <HAL_DMA_IRQHandler+0x1bc>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d040      	beq.n	8005982 <HAL_DMA_IRQHandler+0xd2>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a5a      	ldr	r2, [pc, #360]	; (8005a70 <HAL_DMA_IRQHandler+0x1c0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d03b      	beq.n	8005982 <HAL_DMA_IRQHandler+0xd2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a59      	ldr	r2, [pc, #356]	; (8005a74 <HAL_DMA_IRQHandler+0x1c4>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d036      	beq.n	8005982 <HAL_DMA_IRQHandler+0xd2>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a57      	ldr	r2, [pc, #348]	; (8005a78 <HAL_DMA_IRQHandler+0x1c8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d031      	beq.n	8005982 <HAL_DMA_IRQHandler+0xd2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a56      	ldr	r2, [pc, #344]	; (8005a7c <HAL_DMA_IRQHandler+0x1cc>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d02c      	beq.n	8005982 <HAL_DMA_IRQHandler+0xd2>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a54      	ldr	r2, [pc, #336]	; (8005a80 <HAL_DMA_IRQHandler+0x1d0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d027      	beq.n	8005982 <HAL_DMA_IRQHandler+0xd2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a53      	ldr	r2, [pc, #332]	; (8005a84 <HAL_DMA_IRQHandler+0x1d4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d022      	beq.n	8005982 <HAL_DMA_IRQHandler+0xd2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a51      	ldr	r2, [pc, #324]	; (8005a88 <HAL_DMA_IRQHandler+0x1d8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d01d      	beq.n	8005982 <HAL_DMA_IRQHandler+0xd2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a50      	ldr	r2, [pc, #320]	; (8005a8c <HAL_DMA_IRQHandler+0x1dc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d018      	beq.n	8005982 <HAL_DMA_IRQHandler+0xd2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a4e      	ldr	r2, [pc, #312]	; (8005a90 <HAL_DMA_IRQHandler+0x1e0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d013      	beq.n	8005982 <HAL_DMA_IRQHandler+0xd2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a4d      	ldr	r2, [pc, #308]	; (8005a94 <HAL_DMA_IRQHandler+0x1e4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00e      	beq.n	8005982 <HAL_DMA_IRQHandler+0xd2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a4b      	ldr	r2, [pc, #300]	; (8005a98 <HAL_DMA_IRQHandler+0x1e8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d009      	beq.n	8005982 <HAL_DMA_IRQHandler+0xd2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a4a      	ldr	r2, [pc, #296]	; (8005a9c <HAL_DMA_IRQHandler+0x1ec>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d004      	beq.n	8005982 <HAL_DMA_IRQHandler+0xd2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a48      	ldr	r2, [pc, #288]	; (8005aa0 <HAL_DMA_IRQHandler+0x1f0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d101      	bne.n	8005986 <HAL_DMA_IRQHandler+0xd6>
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <HAL_DMA_IRQHandler+0xd8>
 8005986:	2300      	movs	r3, #0
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 842b 	beq.w	80061e4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005992:	f003 031f 	and.w	r3, r3, #31
 8005996:	2208      	movs	r2, #8
 8005998:	409a      	lsls	r2, r3
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	4013      	ands	r3, r2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 80a2 	beq.w	8005ae8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a2e      	ldr	r2, [pc, #184]	; (8005a64 <HAL_DMA_IRQHandler+0x1b4>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d04a      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x194>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a2d      	ldr	r2, [pc, #180]	; (8005a68 <HAL_DMA_IRQHandler+0x1b8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d045      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x194>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a2b      	ldr	r2, [pc, #172]	; (8005a6c <HAL_DMA_IRQHandler+0x1bc>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d040      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x194>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a2a      	ldr	r2, [pc, #168]	; (8005a70 <HAL_DMA_IRQHandler+0x1c0>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d03b      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x194>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a28      	ldr	r2, [pc, #160]	; (8005a74 <HAL_DMA_IRQHandler+0x1c4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d036      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x194>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a27      	ldr	r2, [pc, #156]	; (8005a78 <HAL_DMA_IRQHandler+0x1c8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d031      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x194>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a25      	ldr	r2, [pc, #148]	; (8005a7c <HAL_DMA_IRQHandler+0x1cc>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d02c      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x194>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a24      	ldr	r2, [pc, #144]	; (8005a80 <HAL_DMA_IRQHandler+0x1d0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d027      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x194>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a22      	ldr	r2, [pc, #136]	; (8005a84 <HAL_DMA_IRQHandler+0x1d4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d022      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x194>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a21      	ldr	r2, [pc, #132]	; (8005a88 <HAL_DMA_IRQHandler+0x1d8>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d01d      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x194>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1f      	ldr	r2, [pc, #124]	; (8005a8c <HAL_DMA_IRQHandler+0x1dc>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d018      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x194>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a1e      	ldr	r2, [pc, #120]	; (8005a90 <HAL_DMA_IRQHandler+0x1e0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d013      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x194>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a1c      	ldr	r2, [pc, #112]	; (8005a94 <HAL_DMA_IRQHandler+0x1e4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00e      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x194>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a1b      	ldr	r2, [pc, #108]	; (8005a98 <HAL_DMA_IRQHandler+0x1e8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d009      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x194>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a19      	ldr	r2, [pc, #100]	; (8005a9c <HAL_DMA_IRQHandler+0x1ec>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d004      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x194>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a18      	ldr	r2, [pc, #96]	; (8005aa0 <HAL_DMA_IRQHandler+0x1f0>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d12f      	bne.n	8005aa4 <HAL_DMA_IRQHandler+0x1f4>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0304 	and.w	r3, r3, #4
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	bf14      	ite	ne
 8005a52:	2301      	movne	r3, #1
 8005a54:	2300      	moveq	r3, #0
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	e02e      	b.n	8005ab8 <HAL_DMA_IRQHandler+0x208>
 8005a5a:	bf00      	nop
 8005a5c:	24000000 	.word	0x24000000
 8005a60:	1b4e81b5 	.word	0x1b4e81b5
 8005a64:	40020010 	.word	0x40020010
 8005a68:	40020028 	.word	0x40020028
 8005a6c:	40020040 	.word	0x40020040
 8005a70:	40020058 	.word	0x40020058
 8005a74:	40020070 	.word	0x40020070
 8005a78:	40020088 	.word	0x40020088
 8005a7c:	400200a0 	.word	0x400200a0
 8005a80:	400200b8 	.word	0x400200b8
 8005a84:	40020410 	.word	0x40020410
 8005a88:	40020428 	.word	0x40020428
 8005a8c:	40020440 	.word	0x40020440
 8005a90:	40020458 	.word	0x40020458
 8005a94:	40020470 	.word	0x40020470
 8005a98:	40020488 	.word	0x40020488
 8005a9c:	400204a0 	.word	0x400204a0
 8005aa0:	400204b8 	.word	0x400204b8
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	bf14      	ite	ne
 8005ab2:	2301      	movne	r3, #1
 8005ab4:	2300      	moveq	r3, #0
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d015      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0204 	bic.w	r2, r2, #4
 8005aca:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad0:	f003 031f 	and.w	r3, r3, #31
 8005ad4:	2208      	movs	r2, #8
 8005ad6:	409a      	lsls	r2, r3
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae0:	f043 0201 	orr.w	r2, r3, #1
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aec:	f003 031f 	and.w	r3, r3, #31
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	fa22 f303 	lsr.w	r3, r2, r3
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d06e      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a69      	ldr	r2, [pc, #420]	; (8005ca8 <HAL_DMA_IRQHandler+0x3f8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d04a      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x2ee>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a67      	ldr	r2, [pc, #412]	; (8005cac <HAL_DMA_IRQHandler+0x3fc>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d045      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x2ee>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a66      	ldr	r2, [pc, #408]	; (8005cb0 <HAL_DMA_IRQHandler+0x400>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d040      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x2ee>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a64      	ldr	r2, [pc, #400]	; (8005cb4 <HAL_DMA_IRQHandler+0x404>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d03b      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x2ee>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a63      	ldr	r2, [pc, #396]	; (8005cb8 <HAL_DMA_IRQHandler+0x408>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d036      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x2ee>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a61      	ldr	r2, [pc, #388]	; (8005cbc <HAL_DMA_IRQHandler+0x40c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d031      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x2ee>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a60      	ldr	r2, [pc, #384]	; (8005cc0 <HAL_DMA_IRQHandler+0x410>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d02c      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x2ee>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a5e      	ldr	r2, [pc, #376]	; (8005cc4 <HAL_DMA_IRQHandler+0x414>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d027      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x2ee>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a5d      	ldr	r2, [pc, #372]	; (8005cc8 <HAL_DMA_IRQHandler+0x418>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d022      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x2ee>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a5b      	ldr	r2, [pc, #364]	; (8005ccc <HAL_DMA_IRQHandler+0x41c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d01d      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x2ee>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a5a      	ldr	r2, [pc, #360]	; (8005cd0 <HAL_DMA_IRQHandler+0x420>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d018      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x2ee>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a58      	ldr	r2, [pc, #352]	; (8005cd4 <HAL_DMA_IRQHandler+0x424>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d013      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x2ee>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a57      	ldr	r2, [pc, #348]	; (8005cd8 <HAL_DMA_IRQHandler+0x428>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00e      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x2ee>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a55      	ldr	r2, [pc, #340]	; (8005cdc <HAL_DMA_IRQHandler+0x42c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d009      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x2ee>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a54      	ldr	r2, [pc, #336]	; (8005ce0 <HAL_DMA_IRQHandler+0x430>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d004      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x2ee>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a52      	ldr	r2, [pc, #328]	; (8005ce4 <HAL_DMA_IRQHandler+0x434>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d10a      	bne.n	8005bb4 <HAL_DMA_IRQHandler+0x304>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	bf14      	ite	ne
 8005bac:	2301      	movne	r3, #1
 8005bae:	2300      	moveq	r3, #0
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	e003      	b.n	8005bbc <HAL_DMA_IRQHandler+0x30c>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00d      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc4:	f003 031f 	and.w	r3, r3, #31
 8005bc8:	2201      	movs	r2, #1
 8005bca:	409a      	lsls	r2, r3
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd4:	f043 0202 	orr.w	r2, r3, #2
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be0:	f003 031f 	and.w	r3, r3, #31
 8005be4:	2204      	movs	r2, #4
 8005be6:	409a      	lsls	r2, r3
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	4013      	ands	r3, r2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 808f 	beq.w	8005d10 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a2c      	ldr	r2, [pc, #176]	; (8005ca8 <HAL_DMA_IRQHandler+0x3f8>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d04a      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x3e2>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a2a      	ldr	r2, [pc, #168]	; (8005cac <HAL_DMA_IRQHandler+0x3fc>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d045      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x3e2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a29      	ldr	r2, [pc, #164]	; (8005cb0 <HAL_DMA_IRQHandler+0x400>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d040      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x3e2>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a27      	ldr	r2, [pc, #156]	; (8005cb4 <HAL_DMA_IRQHandler+0x404>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d03b      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x3e2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a26      	ldr	r2, [pc, #152]	; (8005cb8 <HAL_DMA_IRQHandler+0x408>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d036      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x3e2>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a24      	ldr	r2, [pc, #144]	; (8005cbc <HAL_DMA_IRQHandler+0x40c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d031      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x3e2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a23      	ldr	r2, [pc, #140]	; (8005cc0 <HAL_DMA_IRQHandler+0x410>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d02c      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x3e2>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a21      	ldr	r2, [pc, #132]	; (8005cc4 <HAL_DMA_IRQHandler+0x414>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d027      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x3e2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a20      	ldr	r2, [pc, #128]	; (8005cc8 <HAL_DMA_IRQHandler+0x418>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d022      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x3e2>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a1e      	ldr	r2, [pc, #120]	; (8005ccc <HAL_DMA_IRQHandler+0x41c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d01d      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x3e2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a1d      	ldr	r2, [pc, #116]	; (8005cd0 <HAL_DMA_IRQHandler+0x420>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d018      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x3e2>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a1b      	ldr	r2, [pc, #108]	; (8005cd4 <HAL_DMA_IRQHandler+0x424>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d013      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x3e2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a1a      	ldr	r2, [pc, #104]	; (8005cd8 <HAL_DMA_IRQHandler+0x428>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00e      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x3e2>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a18      	ldr	r2, [pc, #96]	; (8005cdc <HAL_DMA_IRQHandler+0x42c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d009      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x3e2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a17      	ldr	r2, [pc, #92]	; (8005ce0 <HAL_DMA_IRQHandler+0x430>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d004      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x3e2>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a15      	ldr	r2, [pc, #84]	; (8005ce4 <HAL_DMA_IRQHandler+0x434>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d12a      	bne.n	8005ce8 <HAL_DMA_IRQHandler+0x438>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	bf14      	ite	ne
 8005ca0:	2301      	movne	r3, #1
 8005ca2:	2300      	moveq	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	e023      	b.n	8005cf0 <HAL_DMA_IRQHandler+0x440>
 8005ca8:	40020010 	.word	0x40020010
 8005cac:	40020028 	.word	0x40020028
 8005cb0:	40020040 	.word	0x40020040
 8005cb4:	40020058 	.word	0x40020058
 8005cb8:	40020070 	.word	0x40020070
 8005cbc:	40020088 	.word	0x40020088
 8005cc0:	400200a0 	.word	0x400200a0
 8005cc4:	400200b8 	.word	0x400200b8
 8005cc8:	40020410 	.word	0x40020410
 8005ccc:	40020428 	.word	0x40020428
 8005cd0:	40020440 	.word	0x40020440
 8005cd4:	40020458 	.word	0x40020458
 8005cd8:	40020470 	.word	0x40020470
 8005cdc:	40020488 	.word	0x40020488
 8005ce0:	400204a0 	.word	0x400204a0
 8005ce4:	400204b8 	.word	0x400204b8
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00d      	beq.n	8005d10 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf8:	f003 031f 	and.w	r3, r3, #31
 8005cfc:	2204      	movs	r2, #4
 8005cfe:	409a      	lsls	r2, r3
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d08:	f043 0204 	orr.w	r2, r3, #4
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d14:	f003 031f 	and.w	r3, r3, #31
 8005d18:	2210      	movs	r2, #16
 8005d1a:	409a      	lsls	r2, r3
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 80a6 	beq.w	8005e72 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a85      	ldr	r2, [pc, #532]	; (8005f40 <HAL_DMA_IRQHandler+0x690>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d04a      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x516>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a83      	ldr	r2, [pc, #524]	; (8005f44 <HAL_DMA_IRQHandler+0x694>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d045      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x516>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a82      	ldr	r2, [pc, #520]	; (8005f48 <HAL_DMA_IRQHandler+0x698>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d040      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x516>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a80      	ldr	r2, [pc, #512]	; (8005f4c <HAL_DMA_IRQHandler+0x69c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d03b      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x516>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a7f      	ldr	r2, [pc, #508]	; (8005f50 <HAL_DMA_IRQHandler+0x6a0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d036      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x516>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a7d      	ldr	r2, [pc, #500]	; (8005f54 <HAL_DMA_IRQHandler+0x6a4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d031      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x516>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a7c      	ldr	r2, [pc, #496]	; (8005f58 <HAL_DMA_IRQHandler+0x6a8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d02c      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x516>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a7a      	ldr	r2, [pc, #488]	; (8005f5c <HAL_DMA_IRQHandler+0x6ac>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d027      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x516>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a79      	ldr	r2, [pc, #484]	; (8005f60 <HAL_DMA_IRQHandler+0x6b0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d022      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x516>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a77      	ldr	r2, [pc, #476]	; (8005f64 <HAL_DMA_IRQHandler+0x6b4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d01d      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x516>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a76      	ldr	r2, [pc, #472]	; (8005f68 <HAL_DMA_IRQHandler+0x6b8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d018      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x516>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a74      	ldr	r2, [pc, #464]	; (8005f6c <HAL_DMA_IRQHandler+0x6bc>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d013      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x516>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a73      	ldr	r2, [pc, #460]	; (8005f70 <HAL_DMA_IRQHandler+0x6c0>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d00e      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x516>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a71      	ldr	r2, [pc, #452]	; (8005f74 <HAL_DMA_IRQHandler+0x6c4>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d009      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x516>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a70      	ldr	r2, [pc, #448]	; (8005f78 <HAL_DMA_IRQHandler+0x6c8>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d004      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x516>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a6e      	ldr	r2, [pc, #440]	; (8005f7c <HAL_DMA_IRQHandler+0x6cc>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d10a      	bne.n	8005ddc <HAL_DMA_IRQHandler+0x52c>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0308 	and.w	r3, r3, #8
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	bf14      	ite	ne
 8005dd4:	2301      	movne	r3, #1
 8005dd6:	2300      	moveq	r3, #0
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	e009      	b.n	8005df0 <HAL_DMA_IRQHandler+0x540>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0304 	and.w	r3, r3, #4
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	bf14      	ite	ne
 8005dea:	2301      	movne	r3, #1
 8005dec:	2300      	moveq	r3, #0
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d03e      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df8:	f003 031f 	and.w	r3, r3, #31
 8005dfc:	2210      	movs	r2, #16
 8005dfe:	409a      	lsls	r2, r3
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d018      	beq.n	8005e44 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d108      	bne.n	8005e32 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d024      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	4798      	blx	r3
 8005e30:	e01f      	b.n	8005e72 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d01b      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	4798      	blx	r3
 8005e42:	e016      	b.n	8005e72 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d107      	bne.n	8005e62 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0208 	bic.w	r2, r2, #8
 8005e60:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e76:	f003 031f 	and.w	r3, r3, #31
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	409a      	lsls	r2, r3
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	4013      	ands	r3, r2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 8110 	beq.w	80060a8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a2c      	ldr	r2, [pc, #176]	; (8005f40 <HAL_DMA_IRQHandler+0x690>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d04a      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x678>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a2b      	ldr	r2, [pc, #172]	; (8005f44 <HAL_DMA_IRQHandler+0x694>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d045      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x678>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a29      	ldr	r2, [pc, #164]	; (8005f48 <HAL_DMA_IRQHandler+0x698>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d040      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x678>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a28      	ldr	r2, [pc, #160]	; (8005f4c <HAL_DMA_IRQHandler+0x69c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d03b      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x678>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a26      	ldr	r2, [pc, #152]	; (8005f50 <HAL_DMA_IRQHandler+0x6a0>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d036      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x678>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a25      	ldr	r2, [pc, #148]	; (8005f54 <HAL_DMA_IRQHandler+0x6a4>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d031      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x678>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a23      	ldr	r2, [pc, #140]	; (8005f58 <HAL_DMA_IRQHandler+0x6a8>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d02c      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x678>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a22      	ldr	r2, [pc, #136]	; (8005f5c <HAL_DMA_IRQHandler+0x6ac>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d027      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x678>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a20      	ldr	r2, [pc, #128]	; (8005f60 <HAL_DMA_IRQHandler+0x6b0>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d022      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x678>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a1f      	ldr	r2, [pc, #124]	; (8005f64 <HAL_DMA_IRQHandler+0x6b4>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d01d      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x678>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a1d      	ldr	r2, [pc, #116]	; (8005f68 <HAL_DMA_IRQHandler+0x6b8>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d018      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x678>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a1c      	ldr	r2, [pc, #112]	; (8005f6c <HAL_DMA_IRQHandler+0x6bc>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d013      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x678>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1a      	ldr	r2, [pc, #104]	; (8005f70 <HAL_DMA_IRQHandler+0x6c0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d00e      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x678>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a19      	ldr	r2, [pc, #100]	; (8005f74 <HAL_DMA_IRQHandler+0x6c4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d009      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x678>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a17      	ldr	r2, [pc, #92]	; (8005f78 <HAL_DMA_IRQHandler+0x6c8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d004      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x678>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a16      	ldr	r2, [pc, #88]	; (8005f7c <HAL_DMA_IRQHandler+0x6cc>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d12b      	bne.n	8005f80 <HAL_DMA_IRQHandler+0x6d0>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0310 	and.w	r3, r3, #16
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	bf14      	ite	ne
 8005f36:	2301      	movne	r3, #1
 8005f38:	2300      	moveq	r3, #0
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	e02a      	b.n	8005f94 <HAL_DMA_IRQHandler+0x6e4>
 8005f3e:	bf00      	nop
 8005f40:	40020010 	.word	0x40020010
 8005f44:	40020028 	.word	0x40020028
 8005f48:	40020040 	.word	0x40020040
 8005f4c:	40020058 	.word	0x40020058
 8005f50:	40020070 	.word	0x40020070
 8005f54:	40020088 	.word	0x40020088
 8005f58:	400200a0 	.word	0x400200a0
 8005f5c:	400200b8 	.word	0x400200b8
 8005f60:	40020410 	.word	0x40020410
 8005f64:	40020428 	.word	0x40020428
 8005f68:	40020440 	.word	0x40020440
 8005f6c:	40020458 	.word	0x40020458
 8005f70:	40020470 	.word	0x40020470
 8005f74:	40020488 	.word	0x40020488
 8005f78:	400204a0 	.word	0x400204a0
 8005f7c:	400204b8 	.word	0x400204b8
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	bf14      	ite	ne
 8005f8e:	2301      	movne	r3, #1
 8005f90:	2300      	moveq	r3, #0
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 8087 	beq.w	80060a8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f9e:	f003 031f 	and.w	r3, r3, #31
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	409a      	lsls	r2, r3
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d139      	bne.n	800602a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0216 	bic.w	r2, r2, #22
 8005fc4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	695a      	ldr	r2, [r3, #20]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fd4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d103      	bne.n	8005fe6 <HAL_DMA_IRQHandler+0x736>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d007      	beq.n	8005ff6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0208 	bic.w	r2, r2, #8
 8005ff4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	223f      	movs	r2, #63	; 0x3f
 8006000:	409a      	lsls	r2, r3
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 834a 	beq.w	80066b4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	4798      	blx	r3
          }
          return;
 8006028:	e344      	b.n	80066b4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d018      	beq.n	800606a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d108      	bne.n	8006058 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604a:	2b00      	cmp	r3, #0
 800604c:	d02c      	beq.n	80060a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	4798      	blx	r3
 8006056:	e027      	b.n	80060a8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d023      	beq.n	80060a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	4798      	blx	r3
 8006068:	e01e      	b.n	80060a8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10f      	bne.n	8006098 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0210 	bic.w	r2, r2, #16
 8006086:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609c:	2b00      	cmp	r3, #0
 800609e:	d003      	beq.n	80060a8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 8306 	beq.w	80066be <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 8088 	beq.w	80061d0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2204      	movs	r2, #4
 80060c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a7a      	ldr	r2, [pc, #488]	; (80062b8 <HAL_DMA_IRQHandler+0xa08>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d04a      	beq.n	8006168 <HAL_DMA_IRQHandler+0x8b8>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a79      	ldr	r2, [pc, #484]	; (80062bc <HAL_DMA_IRQHandler+0xa0c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d045      	beq.n	8006168 <HAL_DMA_IRQHandler+0x8b8>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a77      	ldr	r2, [pc, #476]	; (80062c0 <HAL_DMA_IRQHandler+0xa10>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d040      	beq.n	8006168 <HAL_DMA_IRQHandler+0x8b8>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a76      	ldr	r2, [pc, #472]	; (80062c4 <HAL_DMA_IRQHandler+0xa14>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d03b      	beq.n	8006168 <HAL_DMA_IRQHandler+0x8b8>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a74      	ldr	r2, [pc, #464]	; (80062c8 <HAL_DMA_IRQHandler+0xa18>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d036      	beq.n	8006168 <HAL_DMA_IRQHandler+0x8b8>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a73      	ldr	r2, [pc, #460]	; (80062cc <HAL_DMA_IRQHandler+0xa1c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d031      	beq.n	8006168 <HAL_DMA_IRQHandler+0x8b8>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a71      	ldr	r2, [pc, #452]	; (80062d0 <HAL_DMA_IRQHandler+0xa20>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d02c      	beq.n	8006168 <HAL_DMA_IRQHandler+0x8b8>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a70      	ldr	r2, [pc, #448]	; (80062d4 <HAL_DMA_IRQHandler+0xa24>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d027      	beq.n	8006168 <HAL_DMA_IRQHandler+0x8b8>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a6e      	ldr	r2, [pc, #440]	; (80062d8 <HAL_DMA_IRQHandler+0xa28>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d022      	beq.n	8006168 <HAL_DMA_IRQHandler+0x8b8>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a6d      	ldr	r2, [pc, #436]	; (80062dc <HAL_DMA_IRQHandler+0xa2c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d01d      	beq.n	8006168 <HAL_DMA_IRQHandler+0x8b8>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a6b      	ldr	r2, [pc, #428]	; (80062e0 <HAL_DMA_IRQHandler+0xa30>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d018      	beq.n	8006168 <HAL_DMA_IRQHandler+0x8b8>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a6a      	ldr	r2, [pc, #424]	; (80062e4 <HAL_DMA_IRQHandler+0xa34>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d013      	beq.n	8006168 <HAL_DMA_IRQHandler+0x8b8>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a68      	ldr	r2, [pc, #416]	; (80062e8 <HAL_DMA_IRQHandler+0xa38>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d00e      	beq.n	8006168 <HAL_DMA_IRQHandler+0x8b8>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a67      	ldr	r2, [pc, #412]	; (80062ec <HAL_DMA_IRQHandler+0xa3c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d009      	beq.n	8006168 <HAL_DMA_IRQHandler+0x8b8>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a65      	ldr	r2, [pc, #404]	; (80062f0 <HAL_DMA_IRQHandler+0xa40>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d004      	beq.n	8006168 <HAL_DMA_IRQHandler+0x8b8>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a64      	ldr	r2, [pc, #400]	; (80062f4 <HAL_DMA_IRQHandler+0xa44>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d108      	bne.n	800617a <HAL_DMA_IRQHandler+0x8ca>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0201 	bic.w	r2, r2, #1
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	e007      	b.n	800618a <HAL_DMA_IRQHandler+0x8da>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0201 	bic.w	r2, r2, #1
 8006188:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	3301      	adds	r3, #1
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006192:	429a      	cmp	r2, r3
 8006194:	d307      	bcc.n	80061a6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1f2      	bne.n	800618a <HAL_DMA_IRQHandler+0x8da>
 80061a4:	e000      	b.n	80061a8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80061a6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d004      	beq.n	80061c0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2203      	movs	r2, #3
 80061ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80061be:	e003      	b.n	80061c8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 8272 	beq.w	80066be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	4798      	blx	r3
 80061e2:	e26c      	b.n	80066be <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a43      	ldr	r2, [pc, #268]	; (80062f8 <HAL_DMA_IRQHandler+0xa48>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d022      	beq.n	8006234 <HAL_DMA_IRQHandler+0x984>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a42      	ldr	r2, [pc, #264]	; (80062fc <HAL_DMA_IRQHandler+0xa4c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d01d      	beq.n	8006234 <HAL_DMA_IRQHandler+0x984>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a40      	ldr	r2, [pc, #256]	; (8006300 <HAL_DMA_IRQHandler+0xa50>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d018      	beq.n	8006234 <HAL_DMA_IRQHandler+0x984>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a3f      	ldr	r2, [pc, #252]	; (8006304 <HAL_DMA_IRQHandler+0xa54>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d013      	beq.n	8006234 <HAL_DMA_IRQHandler+0x984>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a3d      	ldr	r2, [pc, #244]	; (8006308 <HAL_DMA_IRQHandler+0xa58>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d00e      	beq.n	8006234 <HAL_DMA_IRQHandler+0x984>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a3c      	ldr	r2, [pc, #240]	; (800630c <HAL_DMA_IRQHandler+0xa5c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d009      	beq.n	8006234 <HAL_DMA_IRQHandler+0x984>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a3a      	ldr	r2, [pc, #232]	; (8006310 <HAL_DMA_IRQHandler+0xa60>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d004      	beq.n	8006234 <HAL_DMA_IRQHandler+0x984>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a39      	ldr	r2, [pc, #228]	; (8006314 <HAL_DMA_IRQHandler+0xa64>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d101      	bne.n	8006238 <HAL_DMA_IRQHandler+0x988>
 8006234:	2301      	movs	r3, #1
 8006236:	e000      	b.n	800623a <HAL_DMA_IRQHandler+0x98a>
 8006238:	2300      	movs	r3, #0
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 823f 	beq.w	80066be <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800624c:	f003 031f 	and.w	r3, r3, #31
 8006250:	2204      	movs	r2, #4
 8006252:	409a      	lsls	r2, r3
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	4013      	ands	r3, r2
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 80cd 	beq.w	80063f8 <HAL_DMA_IRQHandler+0xb48>
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 80c7 	beq.w	80063f8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800626e:	f003 031f 	and.w	r3, r3, #31
 8006272:	2204      	movs	r2, #4
 8006274:	409a      	lsls	r2, r3
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d049      	beq.n	8006318 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d109      	bne.n	80062a2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 8210 	beq.w	80066b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062a0:	e20a      	b.n	80066b8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 8206 	beq.w	80066b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062b4:	e200      	b.n	80066b8 <HAL_DMA_IRQHandler+0xe08>
 80062b6:	bf00      	nop
 80062b8:	40020010 	.word	0x40020010
 80062bc:	40020028 	.word	0x40020028
 80062c0:	40020040 	.word	0x40020040
 80062c4:	40020058 	.word	0x40020058
 80062c8:	40020070 	.word	0x40020070
 80062cc:	40020088 	.word	0x40020088
 80062d0:	400200a0 	.word	0x400200a0
 80062d4:	400200b8 	.word	0x400200b8
 80062d8:	40020410 	.word	0x40020410
 80062dc:	40020428 	.word	0x40020428
 80062e0:	40020440 	.word	0x40020440
 80062e4:	40020458 	.word	0x40020458
 80062e8:	40020470 	.word	0x40020470
 80062ec:	40020488 	.word	0x40020488
 80062f0:	400204a0 	.word	0x400204a0
 80062f4:	400204b8 	.word	0x400204b8
 80062f8:	58025408 	.word	0x58025408
 80062fc:	5802541c 	.word	0x5802541c
 8006300:	58025430 	.word	0x58025430
 8006304:	58025444 	.word	0x58025444
 8006308:	58025458 	.word	0x58025458
 800630c:	5802546c 	.word	0x5802546c
 8006310:	58025480 	.word	0x58025480
 8006314:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b00      	cmp	r3, #0
 8006320:	d160      	bne.n	80063e4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a7f      	ldr	r2, [pc, #508]	; (8006524 <HAL_DMA_IRQHandler+0xc74>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d04a      	beq.n	80063c2 <HAL_DMA_IRQHandler+0xb12>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a7d      	ldr	r2, [pc, #500]	; (8006528 <HAL_DMA_IRQHandler+0xc78>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d045      	beq.n	80063c2 <HAL_DMA_IRQHandler+0xb12>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a7c      	ldr	r2, [pc, #496]	; (800652c <HAL_DMA_IRQHandler+0xc7c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d040      	beq.n	80063c2 <HAL_DMA_IRQHandler+0xb12>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a7a      	ldr	r2, [pc, #488]	; (8006530 <HAL_DMA_IRQHandler+0xc80>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d03b      	beq.n	80063c2 <HAL_DMA_IRQHandler+0xb12>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a79      	ldr	r2, [pc, #484]	; (8006534 <HAL_DMA_IRQHandler+0xc84>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d036      	beq.n	80063c2 <HAL_DMA_IRQHandler+0xb12>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a77      	ldr	r2, [pc, #476]	; (8006538 <HAL_DMA_IRQHandler+0xc88>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d031      	beq.n	80063c2 <HAL_DMA_IRQHandler+0xb12>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a76      	ldr	r2, [pc, #472]	; (800653c <HAL_DMA_IRQHandler+0xc8c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d02c      	beq.n	80063c2 <HAL_DMA_IRQHandler+0xb12>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a74      	ldr	r2, [pc, #464]	; (8006540 <HAL_DMA_IRQHandler+0xc90>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d027      	beq.n	80063c2 <HAL_DMA_IRQHandler+0xb12>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a73      	ldr	r2, [pc, #460]	; (8006544 <HAL_DMA_IRQHandler+0xc94>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d022      	beq.n	80063c2 <HAL_DMA_IRQHandler+0xb12>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a71      	ldr	r2, [pc, #452]	; (8006548 <HAL_DMA_IRQHandler+0xc98>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d01d      	beq.n	80063c2 <HAL_DMA_IRQHandler+0xb12>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a70      	ldr	r2, [pc, #448]	; (800654c <HAL_DMA_IRQHandler+0xc9c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d018      	beq.n	80063c2 <HAL_DMA_IRQHandler+0xb12>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a6e      	ldr	r2, [pc, #440]	; (8006550 <HAL_DMA_IRQHandler+0xca0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d013      	beq.n	80063c2 <HAL_DMA_IRQHandler+0xb12>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a6d      	ldr	r2, [pc, #436]	; (8006554 <HAL_DMA_IRQHandler+0xca4>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d00e      	beq.n	80063c2 <HAL_DMA_IRQHandler+0xb12>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a6b      	ldr	r2, [pc, #428]	; (8006558 <HAL_DMA_IRQHandler+0xca8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d009      	beq.n	80063c2 <HAL_DMA_IRQHandler+0xb12>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a6a      	ldr	r2, [pc, #424]	; (800655c <HAL_DMA_IRQHandler+0xcac>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d004      	beq.n	80063c2 <HAL_DMA_IRQHandler+0xb12>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a68      	ldr	r2, [pc, #416]	; (8006560 <HAL_DMA_IRQHandler+0xcb0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d108      	bne.n	80063d4 <HAL_DMA_IRQHandler+0xb24>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f022 0208 	bic.w	r2, r2, #8
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	e007      	b.n	80063e4 <HAL_DMA_IRQHandler+0xb34>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0204 	bic.w	r2, r2, #4
 80063e2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 8165 	beq.w	80066b8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063f6:	e15f      	b.n	80066b8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fc:	f003 031f 	and.w	r3, r3, #31
 8006400:	2202      	movs	r2, #2
 8006402:	409a      	lsls	r2, r3
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	4013      	ands	r3, r2
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 80c5 	beq.w	8006598 <HAL_DMA_IRQHandler+0xce8>
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 80bf 	beq.w	8006598 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641e:	f003 031f 	and.w	r3, r3, #31
 8006422:	2202      	movs	r2, #2
 8006424:	409a      	lsls	r2, r3
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d018      	beq.n	8006466 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d109      	bne.n	8006452 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 813a 	beq.w	80066bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006450:	e134      	b.n	80066bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 8130 	beq.w	80066bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006464:	e12a      	b.n	80066bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f003 0320 	and.w	r3, r3, #32
 800646c:	2b00      	cmp	r3, #0
 800646e:	f040 8089 	bne.w	8006584 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a2b      	ldr	r2, [pc, #172]	; (8006524 <HAL_DMA_IRQHandler+0xc74>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d04a      	beq.n	8006512 <HAL_DMA_IRQHandler+0xc62>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a29      	ldr	r2, [pc, #164]	; (8006528 <HAL_DMA_IRQHandler+0xc78>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d045      	beq.n	8006512 <HAL_DMA_IRQHandler+0xc62>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a28      	ldr	r2, [pc, #160]	; (800652c <HAL_DMA_IRQHandler+0xc7c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d040      	beq.n	8006512 <HAL_DMA_IRQHandler+0xc62>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a26      	ldr	r2, [pc, #152]	; (8006530 <HAL_DMA_IRQHandler+0xc80>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d03b      	beq.n	8006512 <HAL_DMA_IRQHandler+0xc62>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a25      	ldr	r2, [pc, #148]	; (8006534 <HAL_DMA_IRQHandler+0xc84>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d036      	beq.n	8006512 <HAL_DMA_IRQHandler+0xc62>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a23      	ldr	r2, [pc, #140]	; (8006538 <HAL_DMA_IRQHandler+0xc88>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d031      	beq.n	8006512 <HAL_DMA_IRQHandler+0xc62>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a22      	ldr	r2, [pc, #136]	; (800653c <HAL_DMA_IRQHandler+0xc8c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d02c      	beq.n	8006512 <HAL_DMA_IRQHandler+0xc62>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a20      	ldr	r2, [pc, #128]	; (8006540 <HAL_DMA_IRQHandler+0xc90>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d027      	beq.n	8006512 <HAL_DMA_IRQHandler+0xc62>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1f      	ldr	r2, [pc, #124]	; (8006544 <HAL_DMA_IRQHandler+0xc94>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d022      	beq.n	8006512 <HAL_DMA_IRQHandler+0xc62>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a1d      	ldr	r2, [pc, #116]	; (8006548 <HAL_DMA_IRQHandler+0xc98>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d01d      	beq.n	8006512 <HAL_DMA_IRQHandler+0xc62>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a1c      	ldr	r2, [pc, #112]	; (800654c <HAL_DMA_IRQHandler+0xc9c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d018      	beq.n	8006512 <HAL_DMA_IRQHandler+0xc62>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a1a      	ldr	r2, [pc, #104]	; (8006550 <HAL_DMA_IRQHandler+0xca0>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d013      	beq.n	8006512 <HAL_DMA_IRQHandler+0xc62>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a19      	ldr	r2, [pc, #100]	; (8006554 <HAL_DMA_IRQHandler+0xca4>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d00e      	beq.n	8006512 <HAL_DMA_IRQHandler+0xc62>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a17      	ldr	r2, [pc, #92]	; (8006558 <HAL_DMA_IRQHandler+0xca8>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d009      	beq.n	8006512 <HAL_DMA_IRQHandler+0xc62>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a16      	ldr	r2, [pc, #88]	; (800655c <HAL_DMA_IRQHandler+0xcac>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d004      	beq.n	8006512 <HAL_DMA_IRQHandler+0xc62>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a14      	ldr	r2, [pc, #80]	; (8006560 <HAL_DMA_IRQHandler+0xcb0>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d128      	bne.n	8006564 <HAL_DMA_IRQHandler+0xcb4>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0214 	bic.w	r2, r2, #20
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	e027      	b.n	8006574 <HAL_DMA_IRQHandler+0xcc4>
 8006524:	40020010 	.word	0x40020010
 8006528:	40020028 	.word	0x40020028
 800652c:	40020040 	.word	0x40020040
 8006530:	40020058 	.word	0x40020058
 8006534:	40020070 	.word	0x40020070
 8006538:	40020088 	.word	0x40020088
 800653c:	400200a0 	.word	0x400200a0
 8006540:	400200b8 	.word	0x400200b8
 8006544:	40020410 	.word	0x40020410
 8006548:	40020428 	.word	0x40020428
 800654c:	40020440 	.word	0x40020440
 8006550:	40020458 	.word	0x40020458
 8006554:	40020470 	.word	0x40020470
 8006558:	40020488 	.word	0x40020488
 800655c:	400204a0 	.word	0x400204a0
 8006560:	400204b8 	.word	0x400204b8
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 020a 	bic.w	r2, r2, #10
 8006572:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 8097 	beq.w	80066bc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006596:	e091      	b.n	80066bc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800659c:	f003 031f 	and.w	r3, r3, #31
 80065a0:	2208      	movs	r2, #8
 80065a2:	409a      	lsls	r2, r3
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	4013      	ands	r3, r2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 8088 	beq.w	80066be <HAL_DMA_IRQHandler+0xe0e>
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f003 0308 	and.w	r3, r3, #8
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 8082 	beq.w	80066be <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a41      	ldr	r2, [pc, #260]	; (80066c4 <HAL_DMA_IRQHandler+0xe14>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d04a      	beq.n	800665a <HAL_DMA_IRQHandler+0xdaa>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a3f      	ldr	r2, [pc, #252]	; (80066c8 <HAL_DMA_IRQHandler+0xe18>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d045      	beq.n	800665a <HAL_DMA_IRQHandler+0xdaa>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a3e      	ldr	r2, [pc, #248]	; (80066cc <HAL_DMA_IRQHandler+0xe1c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d040      	beq.n	800665a <HAL_DMA_IRQHandler+0xdaa>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a3c      	ldr	r2, [pc, #240]	; (80066d0 <HAL_DMA_IRQHandler+0xe20>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d03b      	beq.n	800665a <HAL_DMA_IRQHandler+0xdaa>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a3b      	ldr	r2, [pc, #236]	; (80066d4 <HAL_DMA_IRQHandler+0xe24>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d036      	beq.n	800665a <HAL_DMA_IRQHandler+0xdaa>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a39      	ldr	r2, [pc, #228]	; (80066d8 <HAL_DMA_IRQHandler+0xe28>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d031      	beq.n	800665a <HAL_DMA_IRQHandler+0xdaa>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a38      	ldr	r2, [pc, #224]	; (80066dc <HAL_DMA_IRQHandler+0xe2c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d02c      	beq.n	800665a <HAL_DMA_IRQHandler+0xdaa>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a36      	ldr	r2, [pc, #216]	; (80066e0 <HAL_DMA_IRQHandler+0xe30>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d027      	beq.n	800665a <HAL_DMA_IRQHandler+0xdaa>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a35      	ldr	r2, [pc, #212]	; (80066e4 <HAL_DMA_IRQHandler+0xe34>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d022      	beq.n	800665a <HAL_DMA_IRQHandler+0xdaa>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a33      	ldr	r2, [pc, #204]	; (80066e8 <HAL_DMA_IRQHandler+0xe38>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d01d      	beq.n	800665a <HAL_DMA_IRQHandler+0xdaa>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a32      	ldr	r2, [pc, #200]	; (80066ec <HAL_DMA_IRQHandler+0xe3c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d018      	beq.n	800665a <HAL_DMA_IRQHandler+0xdaa>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a30      	ldr	r2, [pc, #192]	; (80066f0 <HAL_DMA_IRQHandler+0xe40>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d013      	beq.n	800665a <HAL_DMA_IRQHandler+0xdaa>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a2f      	ldr	r2, [pc, #188]	; (80066f4 <HAL_DMA_IRQHandler+0xe44>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00e      	beq.n	800665a <HAL_DMA_IRQHandler+0xdaa>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a2d      	ldr	r2, [pc, #180]	; (80066f8 <HAL_DMA_IRQHandler+0xe48>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d009      	beq.n	800665a <HAL_DMA_IRQHandler+0xdaa>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a2c      	ldr	r2, [pc, #176]	; (80066fc <HAL_DMA_IRQHandler+0xe4c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d004      	beq.n	800665a <HAL_DMA_IRQHandler+0xdaa>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a2a      	ldr	r2, [pc, #168]	; (8006700 <HAL_DMA_IRQHandler+0xe50>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d108      	bne.n	800666c <HAL_DMA_IRQHandler+0xdbc>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 021c 	bic.w	r2, r2, #28
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	e007      	b.n	800667c <HAL_DMA_IRQHandler+0xdcc>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 020e 	bic.w	r2, r2, #14
 800667a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006680:	f003 031f 	and.w	r3, r3, #31
 8006684:	2201      	movs	r2, #1
 8006686:	409a      	lsls	r2, r3
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d009      	beq.n	80066be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	4798      	blx	r3
 80066b2:	e004      	b.n	80066be <HAL_DMA_IRQHandler+0xe0e>
          return;
 80066b4:	bf00      	nop
 80066b6:	e002      	b.n	80066be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066b8:	bf00      	nop
 80066ba:	e000      	b.n	80066be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066bc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80066be:	3728      	adds	r7, #40	; 0x28
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	40020010 	.word	0x40020010
 80066c8:	40020028 	.word	0x40020028
 80066cc:	40020040 	.word	0x40020040
 80066d0:	40020058 	.word	0x40020058
 80066d4:	40020070 	.word	0x40020070
 80066d8:	40020088 	.word	0x40020088
 80066dc:	400200a0 	.word	0x400200a0
 80066e0:	400200b8 	.word	0x400200b8
 80066e4:	40020410 	.word	0x40020410
 80066e8:	40020428 	.word	0x40020428
 80066ec:	40020440 	.word	0x40020440
 80066f0:	40020458 	.word	0x40020458
 80066f4:	40020470 	.word	0x40020470
 80066f8:	40020488 	.word	0x40020488
 80066fc:	400204a0 	.word	0x400204a0
 8006700:	400204b8 	.word	0x400204b8

08006704 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006716:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a7f      	ldr	r2, [pc, #508]	; (8006920 <DMA_SetConfig+0x21c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d072      	beq.n	800680e <DMA_SetConfig+0x10a>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a7d      	ldr	r2, [pc, #500]	; (8006924 <DMA_SetConfig+0x220>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d06d      	beq.n	800680e <DMA_SetConfig+0x10a>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a7c      	ldr	r2, [pc, #496]	; (8006928 <DMA_SetConfig+0x224>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d068      	beq.n	800680e <DMA_SetConfig+0x10a>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a7a      	ldr	r2, [pc, #488]	; (800692c <DMA_SetConfig+0x228>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d063      	beq.n	800680e <DMA_SetConfig+0x10a>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a79      	ldr	r2, [pc, #484]	; (8006930 <DMA_SetConfig+0x22c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d05e      	beq.n	800680e <DMA_SetConfig+0x10a>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a77      	ldr	r2, [pc, #476]	; (8006934 <DMA_SetConfig+0x230>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d059      	beq.n	800680e <DMA_SetConfig+0x10a>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a76      	ldr	r2, [pc, #472]	; (8006938 <DMA_SetConfig+0x234>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d054      	beq.n	800680e <DMA_SetConfig+0x10a>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a74      	ldr	r2, [pc, #464]	; (800693c <DMA_SetConfig+0x238>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d04f      	beq.n	800680e <DMA_SetConfig+0x10a>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a73      	ldr	r2, [pc, #460]	; (8006940 <DMA_SetConfig+0x23c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d04a      	beq.n	800680e <DMA_SetConfig+0x10a>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a71      	ldr	r2, [pc, #452]	; (8006944 <DMA_SetConfig+0x240>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d045      	beq.n	800680e <DMA_SetConfig+0x10a>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a70      	ldr	r2, [pc, #448]	; (8006948 <DMA_SetConfig+0x244>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d040      	beq.n	800680e <DMA_SetConfig+0x10a>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a6e      	ldr	r2, [pc, #440]	; (800694c <DMA_SetConfig+0x248>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d03b      	beq.n	800680e <DMA_SetConfig+0x10a>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a6d      	ldr	r2, [pc, #436]	; (8006950 <DMA_SetConfig+0x24c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d036      	beq.n	800680e <DMA_SetConfig+0x10a>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a6b      	ldr	r2, [pc, #428]	; (8006954 <DMA_SetConfig+0x250>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d031      	beq.n	800680e <DMA_SetConfig+0x10a>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a6a      	ldr	r2, [pc, #424]	; (8006958 <DMA_SetConfig+0x254>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d02c      	beq.n	800680e <DMA_SetConfig+0x10a>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a68      	ldr	r2, [pc, #416]	; (800695c <DMA_SetConfig+0x258>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d027      	beq.n	800680e <DMA_SetConfig+0x10a>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a67      	ldr	r2, [pc, #412]	; (8006960 <DMA_SetConfig+0x25c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d022      	beq.n	800680e <DMA_SetConfig+0x10a>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a65      	ldr	r2, [pc, #404]	; (8006964 <DMA_SetConfig+0x260>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d01d      	beq.n	800680e <DMA_SetConfig+0x10a>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a64      	ldr	r2, [pc, #400]	; (8006968 <DMA_SetConfig+0x264>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d018      	beq.n	800680e <DMA_SetConfig+0x10a>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a62      	ldr	r2, [pc, #392]	; (800696c <DMA_SetConfig+0x268>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d013      	beq.n	800680e <DMA_SetConfig+0x10a>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a61      	ldr	r2, [pc, #388]	; (8006970 <DMA_SetConfig+0x26c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00e      	beq.n	800680e <DMA_SetConfig+0x10a>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a5f      	ldr	r2, [pc, #380]	; (8006974 <DMA_SetConfig+0x270>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d009      	beq.n	800680e <DMA_SetConfig+0x10a>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a5e      	ldr	r2, [pc, #376]	; (8006978 <DMA_SetConfig+0x274>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d004      	beq.n	800680e <DMA_SetConfig+0x10a>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a5c      	ldr	r2, [pc, #368]	; (800697c <DMA_SetConfig+0x278>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d101      	bne.n	8006812 <DMA_SetConfig+0x10e>
 800680e:	2301      	movs	r3, #1
 8006810:	e000      	b.n	8006814 <DMA_SetConfig+0x110>
 8006812:	2300      	movs	r3, #0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00d      	beq.n	8006834 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006820:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006826:	2b00      	cmp	r3, #0
 8006828:	d004      	beq.n	8006834 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006832:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a39      	ldr	r2, [pc, #228]	; (8006920 <DMA_SetConfig+0x21c>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d04a      	beq.n	80068d4 <DMA_SetConfig+0x1d0>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a38      	ldr	r2, [pc, #224]	; (8006924 <DMA_SetConfig+0x220>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d045      	beq.n	80068d4 <DMA_SetConfig+0x1d0>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a36      	ldr	r2, [pc, #216]	; (8006928 <DMA_SetConfig+0x224>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d040      	beq.n	80068d4 <DMA_SetConfig+0x1d0>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a35      	ldr	r2, [pc, #212]	; (800692c <DMA_SetConfig+0x228>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d03b      	beq.n	80068d4 <DMA_SetConfig+0x1d0>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a33      	ldr	r2, [pc, #204]	; (8006930 <DMA_SetConfig+0x22c>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d036      	beq.n	80068d4 <DMA_SetConfig+0x1d0>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a32      	ldr	r2, [pc, #200]	; (8006934 <DMA_SetConfig+0x230>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d031      	beq.n	80068d4 <DMA_SetConfig+0x1d0>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a30      	ldr	r2, [pc, #192]	; (8006938 <DMA_SetConfig+0x234>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d02c      	beq.n	80068d4 <DMA_SetConfig+0x1d0>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a2f      	ldr	r2, [pc, #188]	; (800693c <DMA_SetConfig+0x238>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d027      	beq.n	80068d4 <DMA_SetConfig+0x1d0>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a2d      	ldr	r2, [pc, #180]	; (8006940 <DMA_SetConfig+0x23c>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d022      	beq.n	80068d4 <DMA_SetConfig+0x1d0>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a2c      	ldr	r2, [pc, #176]	; (8006944 <DMA_SetConfig+0x240>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d01d      	beq.n	80068d4 <DMA_SetConfig+0x1d0>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a2a      	ldr	r2, [pc, #168]	; (8006948 <DMA_SetConfig+0x244>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d018      	beq.n	80068d4 <DMA_SetConfig+0x1d0>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a29      	ldr	r2, [pc, #164]	; (800694c <DMA_SetConfig+0x248>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d013      	beq.n	80068d4 <DMA_SetConfig+0x1d0>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a27      	ldr	r2, [pc, #156]	; (8006950 <DMA_SetConfig+0x24c>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d00e      	beq.n	80068d4 <DMA_SetConfig+0x1d0>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a26      	ldr	r2, [pc, #152]	; (8006954 <DMA_SetConfig+0x250>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d009      	beq.n	80068d4 <DMA_SetConfig+0x1d0>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a24      	ldr	r2, [pc, #144]	; (8006958 <DMA_SetConfig+0x254>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d004      	beq.n	80068d4 <DMA_SetConfig+0x1d0>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a23      	ldr	r2, [pc, #140]	; (800695c <DMA_SetConfig+0x258>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d101      	bne.n	80068d8 <DMA_SetConfig+0x1d4>
 80068d4:	2301      	movs	r3, #1
 80068d6:	e000      	b.n	80068da <DMA_SetConfig+0x1d6>
 80068d8:	2300      	movs	r3, #0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d059      	beq.n	8006992 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e2:	f003 031f 	and.w	r3, r3, #31
 80068e6:	223f      	movs	r2, #63	; 0x3f
 80068e8:	409a      	lsls	r2, r3
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80068fc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	2b40      	cmp	r3, #64	; 0x40
 800690c:	d138      	bne.n	8006980 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800691e:	e086      	b.n	8006a2e <DMA_SetConfig+0x32a>
 8006920:	40020010 	.word	0x40020010
 8006924:	40020028 	.word	0x40020028
 8006928:	40020040 	.word	0x40020040
 800692c:	40020058 	.word	0x40020058
 8006930:	40020070 	.word	0x40020070
 8006934:	40020088 	.word	0x40020088
 8006938:	400200a0 	.word	0x400200a0
 800693c:	400200b8 	.word	0x400200b8
 8006940:	40020410 	.word	0x40020410
 8006944:	40020428 	.word	0x40020428
 8006948:	40020440 	.word	0x40020440
 800694c:	40020458 	.word	0x40020458
 8006950:	40020470 	.word	0x40020470
 8006954:	40020488 	.word	0x40020488
 8006958:	400204a0 	.word	0x400204a0
 800695c:	400204b8 	.word	0x400204b8
 8006960:	58025408 	.word	0x58025408
 8006964:	5802541c 	.word	0x5802541c
 8006968:	58025430 	.word	0x58025430
 800696c:	58025444 	.word	0x58025444
 8006970:	58025458 	.word	0x58025458
 8006974:	5802546c 	.word	0x5802546c
 8006978:	58025480 	.word	0x58025480
 800697c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	60da      	str	r2, [r3, #12]
}
 8006990:	e04d      	b.n	8006a2e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a29      	ldr	r2, [pc, #164]	; (8006a3c <DMA_SetConfig+0x338>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d022      	beq.n	80069e2 <DMA_SetConfig+0x2de>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a27      	ldr	r2, [pc, #156]	; (8006a40 <DMA_SetConfig+0x33c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d01d      	beq.n	80069e2 <DMA_SetConfig+0x2de>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a26      	ldr	r2, [pc, #152]	; (8006a44 <DMA_SetConfig+0x340>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d018      	beq.n	80069e2 <DMA_SetConfig+0x2de>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a24      	ldr	r2, [pc, #144]	; (8006a48 <DMA_SetConfig+0x344>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d013      	beq.n	80069e2 <DMA_SetConfig+0x2de>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a23      	ldr	r2, [pc, #140]	; (8006a4c <DMA_SetConfig+0x348>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d00e      	beq.n	80069e2 <DMA_SetConfig+0x2de>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a21      	ldr	r2, [pc, #132]	; (8006a50 <DMA_SetConfig+0x34c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d009      	beq.n	80069e2 <DMA_SetConfig+0x2de>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a20      	ldr	r2, [pc, #128]	; (8006a54 <DMA_SetConfig+0x350>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d004      	beq.n	80069e2 <DMA_SetConfig+0x2de>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a1e      	ldr	r2, [pc, #120]	; (8006a58 <DMA_SetConfig+0x354>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d101      	bne.n	80069e6 <DMA_SetConfig+0x2e2>
 80069e2:	2301      	movs	r3, #1
 80069e4:	e000      	b.n	80069e8 <DMA_SetConfig+0x2e4>
 80069e6:	2300      	movs	r3, #0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d020      	beq.n	8006a2e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f0:	f003 031f 	and.w	r3, r3, #31
 80069f4:	2201      	movs	r2, #1
 80069f6:	409a      	lsls	r2, r3
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	2b40      	cmp	r3, #64	; 0x40
 8006a0a:	d108      	bne.n	8006a1e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	60da      	str	r2, [r3, #12]
}
 8006a1c:	e007      	b.n	8006a2e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	60da      	str	r2, [r3, #12]
}
 8006a2e:	bf00      	nop
 8006a30:	371c      	adds	r7, #28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	58025408 	.word	0x58025408
 8006a40:	5802541c 	.word	0x5802541c
 8006a44:	58025430 	.word	0x58025430
 8006a48:	58025444 	.word	0x58025444
 8006a4c:	58025458 	.word	0x58025458
 8006a50:	5802546c 	.word	0x5802546c
 8006a54:	58025480 	.word	0x58025480
 8006a58:	58025494 	.word	0x58025494

08006a5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a42      	ldr	r2, [pc, #264]	; (8006b74 <DMA_CalcBaseAndBitshift+0x118>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d04a      	beq.n	8006b04 <DMA_CalcBaseAndBitshift+0xa8>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a41      	ldr	r2, [pc, #260]	; (8006b78 <DMA_CalcBaseAndBitshift+0x11c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d045      	beq.n	8006b04 <DMA_CalcBaseAndBitshift+0xa8>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a3f      	ldr	r2, [pc, #252]	; (8006b7c <DMA_CalcBaseAndBitshift+0x120>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d040      	beq.n	8006b04 <DMA_CalcBaseAndBitshift+0xa8>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a3e      	ldr	r2, [pc, #248]	; (8006b80 <DMA_CalcBaseAndBitshift+0x124>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d03b      	beq.n	8006b04 <DMA_CalcBaseAndBitshift+0xa8>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a3c      	ldr	r2, [pc, #240]	; (8006b84 <DMA_CalcBaseAndBitshift+0x128>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d036      	beq.n	8006b04 <DMA_CalcBaseAndBitshift+0xa8>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a3b      	ldr	r2, [pc, #236]	; (8006b88 <DMA_CalcBaseAndBitshift+0x12c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d031      	beq.n	8006b04 <DMA_CalcBaseAndBitshift+0xa8>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a39      	ldr	r2, [pc, #228]	; (8006b8c <DMA_CalcBaseAndBitshift+0x130>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d02c      	beq.n	8006b04 <DMA_CalcBaseAndBitshift+0xa8>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a38      	ldr	r2, [pc, #224]	; (8006b90 <DMA_CalcBaseAndBitshift+0x134>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d027      	beq.n	8006b04 <DMA_CalcBaseAndBitshift+0xa8>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a36      	ldr	r2, [pc, #216]	; (8006b94 <DMA_CalcBaseAndBitshift+0x138>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d022      	beq.n	8006b04 <DMA_CalcBaseAndBitshift+0xa8>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a35      	ldr	r2, [pc, #212]	; (8006b98 <DMA_CalcBaseAndBitshift+0x13c>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d01d      	beq.n	8006b04 <DMA_CalcBaseAndBitshift+0xa8>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a33      	ldr	r2, [pc, #204]	; (8006b9c <DMA_CalcBaseAndBitshift+0x140>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d018      	beq.n	8006b04 <DMA_CalcBaseAndBitshift+0xa8>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a32      	ldr	r2, [pc, #200]	; (8006ba0 <DMA_CalcBaseAndBitshift+0x144>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d013      	beq.n	8006b04 <DMA_CalcBaseAndBitshift+0xa8>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a30      	ldr	r2, [pc, #192]	; (8006ba4 <DMA_CalcBaseAndBitshift+0x148>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00e      	beq.n	8006b04 <DMA_CalcBaseAndBitshift+0xa8>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a2f      	ldr	r2, [pc, #188]	; (8006ba8 <DMA_CalcBaseAndBitshift+0x14c>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d009      	beq.n	8006b04 <DMA_CalcBaseAndBitshift+0xa8>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a2d      	ldr	r2, [pc, #180]	; (8006bac <DMA_CalcBaseAndBitshift+0x150>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d004      	beq.n	8006b04 <DMA_CalcBaseAndBitshift+0xa8>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a2c      	ldr	r2, [pc, #176]	; (8006bb0 <DMA_CalcBaseAndBitshift+0x154>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d101      	bne.n	8006b08 <DMA_CalcBaseAndBitshift+0xac>
 8006b04:	2301      	movs	r3, #1
 8006b06:	e000      	b.n	8006b0a <DMA_CalcBaseAndBitshift+0xae>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d024      	beq.n	8006b58 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	3b10      	subs	r3, #16
 8006b16:	4a27      	ldr	r2, [pc, #156]	; (8006bb4 <DMA_CalcBaseAndBitshift+0x158>)
 8006b18:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1c:	091b      	lsrs	r3, r3, #4
 8006b1e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	4a24      	ldr	r2, [pc, #144]	; (8006bb8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006b28:	5cd3      	ldrb	r3, [r2, r3]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d908      	bls.n	8006b48 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	4b1f      	ldr	r3, [pc, #124]	; (8006bbc <DMA_CalcBaseAndBitshift+0x160>)
 8006b3e:	4013      	ands	r3, r2
 8006b40:	1d1a      	adds	r2, r3, #4
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	659a      	str	r2, [r3, #88]	; 0x58
 8006b46:	e00d      	b.n	8006b64 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	4b1b      	ldr	r3, [pc, #108]	; (8006bbc <DMA_CalcBaseAndBitshift+0x160>)
 8006b50:	4013      	ands	r3, r2
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6593      	str	r3, [r2, #88]	; 0x58
 8006b56:	e005      	b.n	8006b64 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	40020010 	.word	0x40020010
 8006b78:	40020028 	.word	0x40020028
 8006b7c:	40020040 	.word	0x40020040
 8006b80:	40020058 	.word	0x40020058
 8006b84:	40020070 	.word	0x40020070
 8006b88:	40020088 	.word	0x40020088
 8006b8c:	400200a0 	.word	0x400200a0
 8006b90:	400200b8 	.word	0x400200b8
 8006b94:	40020410 	.word	0x40020410
 8006b98:	40020428 	.word	0x40020428
 8006b9c:	40020440 	.word	0x40020440
 8006ba0:	40020458 	.word	0x40020458
 8006ba4:	40020470 	.word	0x40020470
 8006ba8:	40020488 	.word	0x40020488
 8006bac:	400204a0 	.word	0x400204a0
 8006bb0:	400204b8 	.word	0x400204b8
 8006bb4:	aaaaaaab 	.word	0xaaaaaaab
 8006bb8:	0800def4 	.word	0x0800def4
 8006bbc:	fffffc00 	.word	0xfffffc00

08006bc0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d120      	bne.n	8006c16 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd8:	2b03      	cmp	r3, #3
 8006bda:	d858      	bhi.n	8006c8e <DMA_CheckFifoParam+0xce>
 8006bdc:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <DMA_CheckFifoParam+0x24>)
 8006bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be2:	bf00      	nop
 8006be4:	08006bf5 	.word	0x08006bf5
 8006be8:	08006c07 	.word	0x08006c07
 8006bec:	08006bf5 	.word	0x08006bf5
 8006bf0:	08006c8f 	.word	0x08006c8f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d048      	beq.n	8006c92 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c04:	e045      	b.n	8006c92 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c0e:	d142      	bne.n	8006c96 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c14:	e03f      	b.n	8006c96 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c1e:	d123      	bne.n	8006c68 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d838      	bhi.n	8006c9a <DMA_CheckFifoParam+0xda>
 8006c28:	a201      	add	r2, pc, #4	; (adr r2, 8006c30 <DMA_CheckFifoParam+0x70>)
 8006c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2e:	bf00      	nop
 8006c30:	08006c41 	.word	0x08006c41
 8006c34:	08006c47 	.word	0x08006c47
 8006c38:	08006c41 	.word	0x08006c41
 8006c3c:	08006c59 	.word	0x08006c59
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	73fb      	strb	r3, [r7, #15]
        break;
 8006c44:	e030      	b.n	8006ca8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d025      	beq.n	8006c9e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c56:	e022      	b.n	8006c9e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c60:	d11f      	bne.n	8006ca2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c66:	e01c      	b.n	8006ca2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d902      	bls.n	8006c76 <DMA_CheckFifoParam+0xb6>
 8006c70:	2b03      	cmp	r3, #3
 8006c72:	d003      	beq.n	8006c7c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006c74:	e018      	b.n	8006ca8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	73fb      	strb	r3, [r7, #15]
        break;
 8006c7a:	e015      	b.n	8006ca8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00e      	beq.n	8006ca6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	73fb      	strb	r3, [r7, #15]
    break;
 8006c8c:	e00b      	b.n	8006ca6 <DMA_CheckFifoParam+0xe6>
        break;
 8006c8e:	bf00      	nop
 8006c90:	e00a      	b.n	8006ca8 <DMA_CheckFifoParam+0xe8>
        break;
 8006c92:	bf00      	nop
 8006c94:	e008      	b.n	8006ca8 <DMA_CheckFifoParam+0xe8>
        break;
 8006c96:	bf00      	nop
 8006c98:	e006      	b.n	8006ca8 <DMA_CheckFifoParam+0xe8>
        break;
 8006c9a:	bf00      	nop
 8006c9c:	e004      	b.n	8006ca8 <DMA_CheckFifoParam+0xe8>
        break;
 8006c9e:	bf00      	nop
 8006ca0:	e002      	b.n	8006ca8 <DMA_CheckFifoParam+0xe8>
        break;
 8006ca2:	bf00      	nop
 8006ca4:	e000      	b.n	8006ca8 <DMA_CheckFifoParam+0xe8>
    break;
 8006ca6:	bf00      	nop
    }
  }

  return status;
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop

08006cb8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a38      	ldr	r2, [pc, #224]	; (8006dac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d022      	beq.n	8006d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a36      	ldr	r2, [pc, #216]	; (8006db0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d01d      	beq.n	8006d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a35      	ldr	r2, [pc, #212]	; (8006db4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d018      	beq.n	8006d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a33      	ldr	r2, [pc, #204]	; (8006db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d013      	beq.n	8006d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a32      	ldr	r2, [pc, #200]	; (8006dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d00e      	beq.n	8006d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a30      	ldr	r2, [pc, #192]	; (8006dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d009      	beq.n	8006d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a2f      	ldr	r2, [pc, #188]	; (8006dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d004      	beq.n	8006d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a2d      	ldr	r2, [pc, #180]	; (8006dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d101      	bne.n	8006d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006d16:	2301      	movs	r3, #1
 8006d18:	e000      	b.n	8006d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d01a      	beq.n	8006d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	3b08      	subs	r3, #8
 8006d28:	4a28      	ldr	r2, [pc, #160]	; (8006dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2e:	091b      	lsrs	r3, r3, #4
 8006d30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	4b26      	ldr	r3, [pc, #152]	; (8006dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006d36:	4413      	add	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a24      	ldr	r2, [pc, #144]	; (8006dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006d44:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f003 031f 	and.w	r3, r3, #31
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	409a      	lsls	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006d54:	e024      	b.n	8006da0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	3b10      	subs	r3, #16
 8006d5e:	4a1e      	ldr	r2, [pc, #120]	; (8006dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006d60:	fba2 2303 	umull	r2, r3, r2, r3
 8006d64:	091b      	lsrs	r3, r3, #4
 8006d66:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	4a1c      	ldr	r2, [pc, #112]	; (8006ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d806      	bhi.n	8006d7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	4a1b      	ldr	r2, [pc, #108]	; (8006de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d902      	bls.n	8006d7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3308      	adds	r3, #8
 8006d7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	4b18      	ldr	r3, [pc, #96]	; (8006de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006d82:	4413      	add	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	461a      	mov	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a16      	ldr	r2, [pc, #88]	; (8006de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006d90:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f003 031f 	and.w	r3, r3, #31
 8006d98:	2201      	movs	r2, #1
 8006d9a:	409a      	lsls	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006da0:	bf00      	nop
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	58025408 	.word	0x58025408
 8006db0:	5802541c 	.word	0x5802541c
 8006db4:	58025430 	.word	0x58025430
 8006db8:	58025444 	.word	0x58025444
 8006dbc:	58025458 	.word	0x58025458
 8006dc0:	5802546c 	.word	0x5802546c
 8006dc4:	58025480 	.word	0x58025480
 8006dc8:	58025494 	.word	0x58025494
 8006dcc:	cccccccd 	.word	0xcccccccd
 8006dd0:	16009600 	.word	0x16009600
 8006dd4:	58025880 	.word	0x58025880
 8006dd8:	aaaaaaab 	.word	0xaaaaaaab
 8006ddc:	400204b8 	.word	0x400204b8
 8006de0:	4002040f 	.word	0x4002040f
 8006de4:	10008200 	.word	0x10008200
 8006de8:	40020880 	.word	0x40020880

08006dec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d04a      	beq.n	8006e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	d847      	bhi.n	8006e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a25      	ldr	r2, [pc, #148]	; (8006ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d022      	beq.n	8006e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a24      	ldr	r2, [pc, #144]	; (8006ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d01d      	beq.n	8006e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a22      	ldr	r2, [pc, #136]	; (8006eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d018      	beq.n	8006e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a21      	ldr	r2, [pc, #132]	; (8006eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d013      	beq.n	8006e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a1f      	ldr	r2, [pc, #124]	; (8006eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d00e      	beq.n	8006e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a1e      	ldr	r2, [pc, #120]	; (8006eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d009      	beq.n	8006e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a1c      	ldr	r2, [pc, #112]	; (8006ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d004      	beq.n	8006e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a1b      	ldr	r2, [pc, #108]	; (8006ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d101      	bne.n	8006e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e000      	b.n	8006e5e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00a      	beq.n	8006e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	4b17      	ldr	r3, [pc, #92]	; (8006ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006e66:	4413      	add	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a15      	ldr	r2, [pc, #84]	; (8006ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006e74:	671a      	str	r2, [r3, #112]	; 0x70
 8006e76:	e009      	b.n	8006e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	4b14      	ldr	r3, [pc, #80]	; (8006ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	461a      	mov	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a11      	ldr	r2, [pc, #68]	; (8006ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006e8a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	2201      	movs	r2, #1
 8006e92:	409a      	lsls	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006e98:	bf00      	nop
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	58025408 	.word	0x58025408
 8006ea8:	5802541c 	.word	0x5802541c
 8006eac:	58025430 	.word	0x58025430
 8006eb0:	58025444 	.word	0x58025444
 8006eb4:	58025458 	.word	0x58025458
 8006eb8:	5802546c 	.word	0x5802546c
 8006ebc:	58025480 	.word	0x58025480
 8006ec0:	58025494 	.word	0x58025494
 8006ec4:	1600963f 	.word	0x1600963f
 8006ec8:	58025940 	.word	0x58025940
 8006ecc:	1000823f 	.word	0x1000823f
 8006ed0:	40020940 	.word	0x40020940

08006ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b089      	sub	sp, #36	; 0x24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006ee2:	4b86      	ldr	r3, [pc, #536]	; (80070fc <HAL_GPIO_Init+0x228>)
 8006ee4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ee6:	e18c      	b.n	8007202 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	2101      	movs	r1, #1
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 817e 	beq.w	80071fc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f003 0303 	and.w	r3, r3, #3
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d005      	beq.n	8006f18 <HAL_GPIO_Init+0x44>
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f003 0303 	and.w	r3, r3, #3
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d130      	bne.n	8006f7a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	2203      	movs	r2, #3
 8006f24:	fa02 f303 	lsl.w	r3, r2, r3
 8006f28:	43db      	mvns	r3, r3
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	005b      	lsls	r3, r3, #1
 8006f38:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f4e:	2201      	movs	r2, #1
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	fa02 f303 	lsl.w	r3, r2, r3
 8006f56:	43db      	mvns	r3, r3
 8006f58:	69ba      	ldr	r2, [r7, #24]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	091b      	lsrs	r3, r3, #4
 8006f64:	f003 0201 	and.w	r2, r3, #1
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d017      	beq.n	8006fb6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	005b      	lsls	r3, r3, #1
 8006f90:	2203      	movs	r2, #3
 8006f92:	fa02 f303 	lsl.w	r3, r2, r3
 8006f96:	43db      	mvns	r3, r3
 8006f98:	69ba      	ldr	r2, [r7, #24]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	689a      	ldr	r2, [r3, #8]
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	005b      	lsls	r3, r3, #1
 8006fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006faa:	69ba      	ldr	r2, [r7, #24]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	69ba      	ldr	r2, [r7, #24]
 8006fb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f003 0303 	and.w	r3, r3, #3
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d123      	bne.n	800700a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	08da      	lsrs	r2, r3, #3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3208      	adds	r2, #8
 8006fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	220f      	movs	r2, #15
 8006fda:	fa02 f303 	lsl.w	r3, r2, r3
 8006fde:	43db      	mvns	r3, r3
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	691a      	ldr	r2, [r3, #16]
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	f003 0307 	and.w	r3, r3, #7
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff6:	69ba      	ldr	r2, [r7, #24]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	08da      	lsrs	r2, r3, #3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	3208      	adds	r2, #8
 8007004:	69b9      	ldr	r1, [r7, #24]
 8007006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	005b      	lsls	r3, r3, #1
 8007014:	2203      	movs	r2, #3
 8007016:	fa02 f303 	lsl.w	r3, r2, r3
 800701a:	43db      	mvns	r3, r3
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	4013      	ands	r3, r2
 8007020:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f003 0203 	and.w	r2, r3, #3
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	005b      	lsls	r3, r3, #1
 800702e:	fa02 f303 	lsl.w	r3, r2, r3
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	4313      	orrs	r3, r2
 8007036:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007046:	2b00      	cmp	r3, #0
 8007048:	f000 80d8 	beq.w	80071fc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800704c:	4b2c      	ldr	r3, [pc, #176]	; (8007100 <HAL_GPIO_Init+0x22c>)
 800704e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007052:	4a2b      	ldr	r2, [pc, #172]	; (8007100 <HAL_GPIO_Init+0x22c>)
 8007054:	f043 0302 	orr.w	r3, r3, #2
 8007058:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800705c:	4b28      	ldr	r3, [pc, #160]	; (8007100 <HAL_GPIO_Init+0x22c>)
 800705e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800706a:	4a26      	ldr	r2, [pc, #152]	; (8007104 <HAL_GPIO_Init+0x230>)
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	089b      	lsrs	r3, r3, #2
 8007070:	3302      	adds	r3, #2
 8007072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	f003 0303 	and.w	r3, r3, #3
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	220f      	movs	r2, #15
 8007082:	fa02 f303 	lsl.w	r3, r2, r3
 8007086:	43db      	mvns	r3, r3
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	4013      	ands	r3, r2
 800708c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a1d      	ldr	r2, [pc, #116]	; (8007108 <HAL_GPIO_Init+0x234>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d04a      	beq.n	800712c <HAL_GPIO_Init+0x258>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a1c      	ldr	r2, [pc, #112]	; (800710c <HAL_GPIO_Init+0x238>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d02b      	beq.n	80070f6 <HAL_GPIO_Init+0x222>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a1b      	ldr	r2, [pc, #108]	; (8007110 <HAL_GPIO_Init+0x23c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d025      	beq.n	80070f2 <HAL_GPIO_Init+0x21e>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a1a      	ldr	r2, [pc, #104]	; (8007114 <HAL_GPIO_Init+0x240>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d01f      	beq.n	80070ee <HAL_GPIO_Init+0x21a>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a19      	ldr	r2, [pc, #100]	; (8007118 <HAL_GPIO_Init+0x244>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d019      	beq.n	80070ea <HAL_GPIO_Init+0x216>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a18      	ldr	r2, [pc, #96]	; (800711c <HAL_GPIO_Init+0x248>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d013      	beq.n	80070e6 <HAL_GPIO_Init+0x212>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a17      	ldr	r2, [pc, #92]	; (8007120 <HAL_GPIO_Init+0x24c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d00d      	beq.n	80070e2 <HAL_GPIO_Init+0x20e>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a16      	ldr	r2, [pc, #88]	; (8007124 <HAL_GPIO_Init+0x250>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d007      	beq.n	80070de <HAL_GPIO_Init+0x20a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a15      	ldr	r2, [pc, #84]	; (8007128 <HAL_GPIO_Init+0x254>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d101      	bne.n	80070da <HAL_GPIO_Init+0x206>
 80070d6:	2309      	movs	r3, #9
 80070d8:	e029      	b.n	800712e <HAL_GPIO_Init+0x25a>
 80070da:	230a      	movs	r3, #10
 80070dc:	e027      	b.n	800712e <HAL_GPIO_Init+0x25a>
 80070de:	2307      	movs	r3, #7
 80070e0:	e025      	b.n	800712e <HAL_GPIO_Init+0x25a>
 80070e2:	2306      	movs	r3, #6
 80070e4:	e023      	b.n	800712e <HAL_GPIO_Init+0x25a>
 80070e6:	2305      	movs	r3, #5
 80070e8:	e021      	b.n	800712e <HAL_GPIO_Init+0x25a>
 80070ea:	2304      	movs	r3, #4
 80070ec:	e01f      	b.n	800712e <HAL_GPIO_Init+0x25a>
 80070ee:	2303      	movs	r3, #3
 80070f0:	e01d      	b.n	800712e <HAL_GPIO_Init+0x25a>
 80070f2:	2302      	movs	r3, #2
 80070f4:	e01b      	b.n	800712e <HAL_GPIO_Init+0x25a>
 80070f6:	2301      	movs	r3, #1
 80070f8:	e019      	b.n	800712e <HAL_GPIO_Init+0x25a>
 80070fa:	bf00      	nop
 80070fc:	58000080 	.word	0x58000080
 8007100:	58024400 	.word	0x58024400
 8007104:	58000400 	.word	0x58000400
 8007108:	58020000 	.word	0x58020000
 800710c:	58020400 	.word	0x58020400
 8007110:	58020800 	.word	0x58020800
 8007114:	58020c00 	.word	0x58020c00
 8007118:	58021000 	.word	0x58021000
 800711c:	58021400 	.word	0x58021400
 8007120:	58021800 	.word	0x58021800
 8007124:	58021c00 	.word	0x58021c00
 8007128:	58022400 	.word	0x58022400
 800712c:	2300      	movs	r3, #0
 800712e:	69fa      	ldr	r2, [r7, #28]
 8007130:	f002 0203 	and.w	r2, r2, #3
 8007134:	0092      	lsls	r2, r2, #2
 8007136:	4093      	lsls	r3, r2
 8007138:	69ba      	ldr	r2, [r7, #24]
 800713a:	4313      	orrs	r3, r2
 800713c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800713e:	4938      	ldr	r1, [pc, #224]	; (8007220 <HAL_GPIO_Init+0x34c>)
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	089b      	lsrs	r3, r3, #2
 8007144:	3302      	adds	r3, #2
 8007146:	69ba      	ldr	r2, [r7, #24]
 8007148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800714c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	43db      	mvns	r3, r3
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	4013      	ands	r3, r2
 800715c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	4313      	orrs	r3, r2
 8007170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007172:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800717a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	43db      	mvns	r3, r3
 8007186:	69ba      	ldr	r2, [r7, #24]
 8007188:	4013      	ands	r3, r2
 800718a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	4313      	orrs	r3, r2
 800719e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80071a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	43db      	mvns	r3, r3
 80071b2:	69ba      	ldr	r2, [r7, #24]
 80071b4:	4013      	ands	r3, r2
 80071b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d003      	beq.n	80071cc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	69ba      	ldr	r2, [r7, #24]
 80071d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	43db      	mvns	r3, r3
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	4013      	ands	r3, r2
 80071e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	3301      	adds	r3, #1
 8007200:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	fa22 f303 	lsr.w	r3, r2, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	f47f ae6b 	bne.w	8006ee8 <HAL_GPIO_Init+0x14>
  }
}
 8007212:	bf00      	nop
 8007214:	bf00      	nop
 8007216:	3724      	adds	r7, #36	; 0x24
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	58000400 	.word	0x58000400

08007224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	807b      	strh	r3, [r7, #2]
 8007230:	4613      	mov	r3, r2
 8007232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007234:	787b      	ldrb	r3, [r7, #1]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800723a:	887a      	ldrh	r2, [r7, #2]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007240:	e003      	b.n	800724a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007242:	887b      	ldrh	r3, [r7, #2]
 8007244:	041a      	lsls	r2, r3, #16
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	619a      	str	r2, [r3, #24]
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
	...

08007258 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007260:	4b19      	ldr	r3, [pc, #100]	; (80072c8 <HAL_PWREx_ConfigSupply+0x70>)
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f003 0304 	and.w	r3, r3, #4
 8007268:	2b04      	cmp	r3, #4
 800726a:	d00a      	beq.n	8007282 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800726c:	4b16      	ldr	r3, [pc, #88]	; (80072c8 <HAL_PWREx_ConfigSupply+0x70>)
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	f003 0307 	and.w	r3, r3, #7
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	429a      	cmp	r2, r3
 8007278:	d001      	beq.n	800727e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e01f      	b.n	80072be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	e01d      	b.n	80072be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007282:	4b11      	ldr	r3, [pc, #68]	; (80072c8 <HAL_PWREx_ConfigSupply+0x70>)
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f023 0207 	bic.w	r2, r3, #7
 800728a:	490f      	ldr	r1, [pc, #60]	; (80072c8 <HAL_PWREx_ConfigSupply+0x70>)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4313      	orrs	r3, r2
 8007290:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007292:	f7fc fec9 	bl	8004028 <HAL_GetTick>
 8007296:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007298:	e009      	b.n	80072ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800729a:	f7fc fec5 	bl	8004028 <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072a8:	d901      	bls.n	80072ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e007      	b.n	80072be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80072ae:	4b06      	ldr	r3, [pc, #24]	; (80072c8 <HAL_PWREx_ConfigSupply+0x70>)
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ba:	d1ee      	bne.n	800729a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	58024800 	.word	0x58024800

080072cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08c      	sub	sp, #48	; 0x30
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e3c8      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 8087 	beq.w	80073fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072ec:	4b88      	ldr	r3, [pc, #544]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072f6:	4b86      	ldr	r3, [pc, #536]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 80072f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80072fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fe:	2b10      	cmp	r3, #16
 8007300:	d007      	beq.n	8007312 <HAL_RCC_OscConfig+0x46>
 8007302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007304:	2b18      	cmp	r3, #24
 8007306:	d110      	bne.n	800732a <HAL_RCC_OscConfig+0x5e>
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	f003 0303 	and.w	r3, r3, #3
 800730e:	2b02      	cmp	r3, #2
 8007310:	d10b      	bne.n	800732a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007312:	4b7f      	ldr	r3, [pc, #508]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d06c      	beq.n	80073f8 <HAL_RCC_OscConfig+0x12c>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d168      	bne.n	80073f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e3a2      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007332:	d106      	bne.n	8007342 <HAL_RCC_OscConfig+0x76>
 8007334:	4b76      	ldr	r3, [pc, #472]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a75      	ldr	r2, [pc, #468]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 800733a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	e02e      	b.n	80073a0 <HAL_RCC_OscConfig+0xd4>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10c      	bne.n	8007364 <HAL_RCC_OscConfig+0x98>
 800734a:	4b71      	ldr	r3, [pc, #452]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a70      	ldr	r2, [pc, #448]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 8007350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	4b6e      	ldr	r3, [pc, #440]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a6d      	ldr	r2, [pc, #436]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 800735c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	e01d      	b.n	80073a0 <HAL_RCC_OscConfig+0xd4>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800736c:	d10c      	bne.n	8007388 <HAL_RCC_OscConfig+0xbc>
 800736e:	4b68      	ldr	r3, [pc, #416]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a67      	ldr	r2, [pc, #412]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 8007374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007378:	6013      	str	r3, [r2, #0]
 800737a:	4b65      	ldr	r3, [pc, #404]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a64      	ldr	r2, [pc, #400]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 8007380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	e00b      	b.n	80073a0 <HAL_RCC_OscConfig+0xd4>
 8007388:	4b61      	ldr	r3, [pc, #388]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a60      	ldr	r2, [pc, #384]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 800738e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007392:	6013      	str	r3, [r2, #0]
 8007394:	4b5e      	ldr	r3, [pc, #376]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a5d      	ldr	r2, [pc, #372]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 800739a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800739e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d013      	beq.n	80073d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a8:	f7fc fe3e 	bl	8004028 <HAL_GetTick>
 80073ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073ae:	e008      	b.n	80073c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073b0:	f7fc fe3a 	bl	8004028 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b64      	cmp	r3, #100	; 0x64
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e356      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073c2:	4b53      	ldr	r3, [pc, #332]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0f0      	beq.n	80073b0 <HAL_RCC_OscConfig+0xe4>
 80073ce:	e014      	b.n	80073fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d0:	f7fc fe2a 	bl	8004028 <HAL_GetTick>
 80073d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80073d6:	e008      	b.n	80073ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073d8:	f7fc fe26 	bl	8004028 <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	2b64      	cmp	r3, #100	; 0x64
 80073e4:	d901      	bls.n	80073ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e342      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80073ea:	4b49      	ldr	r3, [pc, #292]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1f0      	bne.n	80073d8 <HAL_RCC_OscConfig+0x10c>
 80073f6:	e000      	b.n	80073fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 808c 	beq.w	8007520 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007408:	4b41      	ldr	r3, [pc, #260]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007410:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007412:	4b3f      	ldr	r3, [pc, #252]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 8007414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007416:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d007      	beq.n	800742e <HAL_RCC_OscConfig+0x162>
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	2b18      	cmp	r3, #24
 8007422:	d137      	bne.n	8007494 <HAL_RCC_OscConfig+0x1c8>
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	f003 0303 	and.w	r3, r3, #3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d132      	bne.n	8007494 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800742e:	4b38      	ldr	r3, [pc, #224]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0304 	and.w	r3, r3, #4
 8007436:	2b00      	cmp	r3, #0
 8007438:	d005      	beq.n	8007446 <HAL_RCC_OscConfig+0x17a>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e314      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007446:	4b32      	ldr	r3, [pc, #200]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f023 0219 	bic.w	r2, r3, #25
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	492f      	ldr	r1, [pc, #188]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 8007454:	4313      	orrs	r3, r2
 8007456:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007458:	f7fc fde6 	bl	8004028 <HAL_GetTick>
 800745c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800745e:	e008      	b.n	8007472 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007460:	f7fc fde2 	bl	8004028 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	2b02      	cmp	r3, #2
 800746c:	d901      	bls.n	8007472 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e2fe      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007472:	4b27      	ldr	r3, [pc, #156]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0304 	and.w	r3, r3, #4
 800747a:	2b00      	cmp	r3, #0
 800747c:	d0f0      	beq.n	8007460 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800747e:	4b24      	ldr	r3, [pc, #144]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	061b      	lsls	r3, r3, #24
 800748c:	4920      	ldr	r1, [pc, #128]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 800748e:	4313      	orrs	r3, r2
 8007490:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007492:	e045      	b.n	8007520 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d026      	beq.n	80074ea <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800749c:	4b1c      	ldr	r3, [pc, #112]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f023 0219 	bic.w	r2, r3, #25
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	4919      	ldr	r1, [pc, #100]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ae:	f7fc fdbb 	bl	8004028 <HAL_GetTick>
 80074b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074b4:	e008      	b.n	80074c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074b6:	f7fc fdb7 	bl	8004028 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d901      	bls.n	80074c8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e2d3      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074c8:	4b11      	ldr	r3, [pc, #68]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 0304 	and.w	r3, r3, #4
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d0f0      	beq.n	80074b6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074d4:	4b0e      	ldr	r3, [pc, #56]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	061b      	lsls	r3, r3, #24
 80074e2:	490b      	ldr	r1, [pc, #44]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	604b      	str	r3, [r1, #4]
 80074e8:	e01a      	b.n	8007520 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074ea:	4b09      	ldr	r3, [pc, #36]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a08      	ldr	r2, [pc, #32]	; (8007510 <HAL_RCC_OscConfig+0x244>)
 80074f0:	f023 0301 	bic.w	r3, r3, #1
 80074f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f6:	f7fc fd97 	bl	8004028 <HAL_GetTick>
 80074fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80074fc:	e00a      	b.n	8007514 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074fe:	f7fc fd93 	bl	8004028 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b02      	cmp	r3, #2
 800750a:	d903      	bls.n	8007514 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e2af      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
 8007510:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007514:	4b96      	ldr	r3, [pc, #600]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0304 	and.w	r3, r3, #4
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1ee      	bne.n	80074fe <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0310 	and.w	r3, r3, #16
 8007528:	2b00      	cmp	r3, #0
 800752a:	d06a      	beq.n	8007602 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800752c:	4b90      	ldr	r3, [pc, #576]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007534:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007536:	4b8e      	ldr	r3, [pc, #568]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 8007538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	2b08      	cmp	r3, #8
 8007540:	d007      	beq.n	8007552 <HAL_RCC_OscConfig+0x286>
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	2b18      	cmp	r3, #24
 8007546:	d11b      	bne.n	8007580 <HAL_RCC_OscConfig+0x2b4>
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f003 0303 	and.w	r3, r3, #3
 800754e:	2b01      	cmp	r3, #1
 8007550:	d116      	bne.n	8007580 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007552:	4b87      	ldr	r3, [pc, #540]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800755a:	2b00      	cmp	r3, #0
 800755c:	d005      	beq.n	800756a <HAL_RCC_OscConfig+0x29e>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	2b80      	cmp	r3, #128	; 0x80
 8007564:	d001      	beq.n	800756a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e282      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800756a:	4b81      	ldr	r3, [pc, #516]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	061b      	lsls	r3, r3, #24
 8007578:	497d      	ldr	r1, [pc, #500]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 800757a:	4313      	orrs	r3, r2
 800757c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800757e:	e040      	b.n	8007602 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d023      	beq.n	80075d0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007588:	4b79      	ldr	r3, [pc, #484]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a78      	ldr	r2, [pc, #480]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 800758e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007594:	f7fc fd48 	bl	8004028 <HAL_GetTick>
 8007598:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800759a:	e008      	b.n	80075ae <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800759c:	f7fc fd44 	bl	8004028 <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d901      	bls.n	80075ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e260      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80075ae:	4b70      	ldr	r3, [pc, #448]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d0f0      	beq.n	800759c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80075ba:	4b6d      	ldr	r3, [pc, #436]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	061b      	lsls	r3, r3, #24
 80075c8:	4969      	ldr	r1, [pc, #420]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60cb      	str	r3, [r1, #12]
 80075ce:	e018      	b.n	8007602 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80075d0:	4b67      	ldr	r3, [pc, #412]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a66      	ldr	r2, [pc, #408]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 80075d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075dc:	f7fc fd24 	bl	8004028 <HAL_GetTick>
 80075e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80075e2:	e008      	b.n	80075f6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80075e4:	f7fc fd20 	bl	8004028 <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d901      	bls.n	80075f6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e23c      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80075f6:	4b5e      	ldr	r3, [pc, #376]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1f0      	bne.n	80075e4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0308 	and.w	r3, r3, #8
 800760a:	2b00      	cmp	r3, #0
 800760c:	d036      	beq.n	800767c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d019      	beq.n	800764a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007616:	4b56      	ldr	r3, [pc, #344]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 8007618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800761a:	4a55      	ldr	r2, [pc, #340]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 800761c:	f043 0301 	orr.w	r3, r3, #1
 8007620:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007622:	f7fc fd01 	bl	8004028 <HAL_GetTick>
 8007626:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007628:	e008      	b.n	800763c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800762a:	f7fc fcfd 	bl	8004028 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	2b02      	cmp	r3, #2
 8007636:	d901      	bls.n	800763c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e219      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800763c:	4b4c      	ldr	r3, [pc, #304]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 800763e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007640:	f003 0302 	and.w	r3, r3, #2
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0f0      	beq.n	800762a <HAL_RCC_OscConfig+0x35e>
 8007648:	e018      	b.n	800767c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800764a:	4b49      	ldr	r3, [pc, #292]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 800764c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800764e:	4a48      	ldr	r2, [pc, #288]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 8007650:	f023 0301 	bic.w	r3, r3, #1
 8007654:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007656:	f7fc fce7 	bl	8004028 <HAL_GetTick>
 800765a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800765c:	e008      	b.n	8007670 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800765e:	f7fc fce3 	bl	8004028 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	2b02      	cmp	r3, #2
 800766a:	d901      	bls.n	8007670 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e1ff      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007670:	4b3f      	ldr	r3, [pc, #252]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 8007672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007674:	f003 0302 	and.w	r3, r3, #2
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1f0      	bne.n	800765e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0320 	and.w	r3, r3, #32
 8007684:	2b00      	cmp	r3, #0
 8007686:	d036      	beq.n	80076f6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d019      	beq.n	80076c4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007690:	4b37      	ldr	r3, [pc, #220]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a36      	ldr	r2, [pc, #216]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 8007696:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800769a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800769c:	f7fc fcc4 	bl	8004028 <HAL_GetTick>
 80076a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80076a2:	e008      	b.n	80076b6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076a4:	f7fc fcc0 	bl	8004028 <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d901      	bls.n	80076b6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e1dc      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80076b6:	4b2e      	ldr	r3, [pc, #184]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0f0      	beq.n	80076a4 <HAL_RCC_OscConfig+0x3d8>
 80076c2:	e018      	b.n	80076f6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80076c4:	4b2a      	ldr	r3, [pc, #168]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a29      	ldr	r2, [pc, #164]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 80076ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80076d0:	f7fc fcaa 	bl	8004028 <HAL_GetTick>
 80076d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80076d6:	e008      	b.n	80076ea <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076d8:	f7fc fca6 	bl	8004028 <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d901      	bls.n	80076ea <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e1c2      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80076ea:	4b21      	ldr	r3, [pc, #132]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1f0      	bne.n	80076d8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0304 	and.w	r3, r3, #4
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f000 8086 	beq.w	8007810 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007704:	4b1b      	ldr	r3, [pc, #108]	; (8007774 <HAL_RCC_OscConfig+0x4a8>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a1a      	ldr	r2, [pc, #104]	; (8007774 <HAL_RCC_OscConfig+0x4a8>)
 800770a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800770e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007710:	f7fc fc8a 	bl	8004028 <HAL_GetTick>
 8007714:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007716:	e008      	b.n	800772a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007718:	f7fc fc86 	bl	8004028 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	2b64      	cmp	r3, #100	; 0x64
 8007724:	d901      	bls.n	800772a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e1a2      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800772a:	4b12      	ldr	r3, [pc, #72]	; (8007774 <HAL_RCC_OscConfig+0x4a8>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007732:	2b00      	cmp	r3, #0
 8007734:	d0f0      	beq.n	8007718 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d106      	bne.n	800774c <HAL_RCC_OscConfig+0x480>
 800773e:	4b0c      	ldr	r3, [pc, #48]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 8007740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007742:	4a0b      	ldr	r2, [pc, #44]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 8007744:	f043 0301 	orr.w	r3, r3, #1
 8007748:	6713      	str	r3, [r2, #112]	; 0x70
 800774a:	e032      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e6>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d111      	bne.n	8007778 <HAL_RCC_OscConfig+0x4ac>
 8007754:	4b06      	ldr	r3, [pc, #24]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 8007756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007758:	4a05      	ldr	r2, [pc, #20]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 800775a:	f023 0301 	bic.w	r3, r3, #1
 800775e:	6713      	str	r3, [r2, #112]	; 0x70
 8007760:	4b03      	ldr	r3, [pc, #12]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 8007762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007764:	4a02      	ldr	r2, [pc, #8]	; (8007770 <HAL_RCC_OscConfig+0x4a4>)
 8007766:	f023 0304 	bic.w	r3, r3, #4
 800776a:	6713      	str	r3, [r2, #112]	; 0x70
 800776c:	e021      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e6>
 800776e:	bf00      	nop
 8007770:	58024400 	.word	0x58024400
 8007774:	58024800 	.word	0x58024800
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	2b05      	cmp	r3, #5
 800777e:	d10c      	bne.n	800779a <HAL_RCC_OscConfig+0x4ce>
 8007780:	4b83      	ldr	r3, [pc, #524]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 8007782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007784:	4a82      	ldr	r2, [pc, #520]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 8007786:	f043 0304 	orr.w	r3, r3, #4
 800778a:	6713      	str	r3, [r2, #112]	; 0x70
 800778c:	4b80      	ldr	r3, [pc, #512]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 800778e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007790:	4a7f      	ldr	r2, [pc, #508]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 8007792:	f043 0301 	orr.w	r3, r3, #1
 8007796:	6713      	str	r3, [r2, #112]	; 0x70
 8007798:	e00b      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e6>
 800779a:	4b7d      	ldr	r3, [pc, #500]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 800779c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800779e:	4a7c      	ldr	r2, [pc, #496]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 80077a0:	f023 0301 	bic.w	r3, r3, #1
 80077a4:	6713      	str	r3, [r2, #112]	; 0x70
 80077a6:	4b7a      	ldr	r3, [pc, #488]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 80077a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077aa:	4a79      	ldr	r2, [pc, #484]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 80077ac:	f023 0304 	bic.w	r3, r3, #4
 80077b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d015      	beq.n	80077e6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ba:	f7fc fc35 	bl	8004028 <HAL_GetTick>
 80077be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077c0:	e00a      	b.n	80077d8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077c2:	f7fc fc31 	bl	8004028 <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d901      	bls.n	80077d8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e14b      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077d8:	4b6d      	ldr	r3, [pc, #436]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 80077da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d0ee      	beq.n	80077c2 <HAL_RCC_OscConfig+0x4f6>
 80077e4:	e014      	b.n	8007810 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077e6:	f7fc fc1f 	bl	8004028 <HAL_GetTick>
 80077ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80077ec:	e00a      	b.n	8007804 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077ee:	f7fc fc1b 	bl	8004028 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d901      	bls.n	8007804 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e135      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007804:	4b62      	ldr	r3, [pc, #392]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 8007806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007808:	f003 0302 	and.w	r3, r3, #2
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1ee      	bne.n	80077ee <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 812a 	beq.w	8007a6e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800781a:	4b5d      	ldr	r3, [pc, #372]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007822:	2b18      	cmp	r3, #24
 8007824:	f000 80ba 	beq.w	800799c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782c:	2b02      	cmp	r3, #2
 800782e:	f040 8095 	bne.w	800795c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007832:	4b57      	ldr	r3, [pc, #348]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a56      	ldr	r2, [pc, #344]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 8007838:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800783c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800783e:	f7fc fbf3 	bl	8004028 <HAL_GetTick>
 8007842:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007844:	e008      	b.n	8007858 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007846:	f7fc fbef 	bl	8004028 <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	2b02      	cmp	r3, #2
 8007852:	d901      	bls.n	8007858 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e10b      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007858:	4b4d      	ldr	r3, [pc, #308]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1f0      	bne.n	8007846 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007864:	4b4a      	ldr	r3, [pc, #296]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 8007866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007868:	4b4a      	ldr	r3, [pc, #296]	; (8007994 <HAL_RCC_OscConfig+0x6c8>)
 800786a:	4013      	ands	r3, r2
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007874:	0112      	lsls	r2, r2, #4
 8007876:	430a      	orrs	r2, r1
 8007878:	4945      	ldr	r1, [pc, #276]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 800787a:	4313      	orrs	r3, r2
 800787c:	628b      	str	r3, [r1, #40]	; 0x28
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007882:	3b01      	subs	r3, #1
 8007884:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788c:	3b01      	subs	r3, #1
 800788e:	025b      	lsls	r3, r3, #9
 8007890:	b29b      	uxth	r3, r3
 8007892:	431a      	orrs	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007898:	3b01      	subs	r3, #1
 800789a:	041b      	lsls	r3, r3, #16
 800789c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80078a0:	431a      	orrs	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a6:	3b01      	subs	r3, #1
 80078a8:	061b      	lsls	r3, r3, #24
 80078aa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80078ae:	4938      	ldr	r1, [pc, #224]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80078b4:	4b36      	ldr	r3, [pc, #216]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b8:	4a35      	ldr	r2, [pc, #212]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 80078ba:	f023 0301 	bic.w	r3, r3, #1
 80078be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80078c0:	4b33      	ldr	r3, [pc, #204]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 80078c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078c4:	4b34      	ldr	r3, [pc, #208]	; (8007998 <HAL_RCC_OscConfig+0x6cc>)
 80078c6:	4013      	ands	r3, r2
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80078cc:	00d2      	lsls	r2, r2, #3
 80078ce:	4930      	ldr	r1, [pc, #192]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80078d4:	4b2e      	ldr	r3, [pc, #184]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 80078d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d8:	f023 020c 	bic.w	r2, r3, #12
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e0:	492b      	ldr	r1, [pc, #172]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80078e6:	4b2a      	ldr	r3, [pc, #168]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 80078e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ea:	f023 0202 	bic.w	r2, r3, #2
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f2:	4927      	ldr	r1, [pc, #156]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80078f8:	4b25      	ldr	r3, [pc, #148]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 80078fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fc:	4a24      	ldr	r2, [pc, #144]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 80078fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007902:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007904:	4b22      	ldr	r3, [pc, #136]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 8007906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007908:	4a21      	ldr	r2, [pc, #132]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 800790a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800790e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007910:	4b1f      	ldr	r3, [pc, #124]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 8007912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007914:	4a1e      	ldr	r2, [pc, #120]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 8007916:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800791a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800791c:	4b1c      	ldr	r3, [pc, #112]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 800791e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007920:	4a1b      	ldr	r2, [pc, #108]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 8007922:	f043 0301 	orr.w	r3, r3, #1
 8007926:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007928:	4b19      	ldr	r3, [pc, #100]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a18      	ldr	r2, [pc, #96]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 800792e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007934:	f7fc fb78 	bl	8004028 <HAL_GetTick>
 8007938:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800793a:	e008      	b.n	800794e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800793c:	f7fc fb74 	bl	8004028 <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	2b02      	cmp	r3, #2
 8007948:	d901      	bls.n	800794e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e090      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800794e:	4b10      	ldr	r3, [pc, #64]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0f0      	beq.n	800793c <HAL_RCC_OscConfig+0x670>
 800795a:	e088      	b.n	8007a6e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800795c:	4b0c      	ldr	r3, [pc, #48]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a0b      	ldr	r2, [pc, #44]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 8007962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007968:	f7fc fb5e 	bl	8004028 <HAL_GetTick>
 800796c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800796e:	e008      	b.n	8007982 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007970:	f7fc fb5a 	bl	8004028 <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	2b02      	cmp	r3, #2
 800797c:	d901      	bls.n	8007982 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e076      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007982:	4b03      	ldr	r3, [pc, #12]	; (8007990 <HAL_RCC_OscConfig+0x6c4>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1f0      	bne.n	8007970 <HAL_RCC_OscConfig+0x6a4>
 800798e:	e06e      	b.n	8007a6e <HAL_RCC_OscConfig+0x7a2>
 8007990:	58024400 	.word	0x58024400
 8007994:	fffffc0c 	.word	0xfffffc0c
 8007998:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800799c:	4b36      	ldr	r3, [pc, #216]	; (8007a78 <HAL_RCC_OscConfig+0x7ac>)
 800799e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80079a2:	4b35      	ldr	r3, [pc, #212]	; (8007a78 <HAL_RCC_OscConfig+0x7ac>)
 80079a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d031      	beq.n	8007a14 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	f003 0203 	and.w	r2, r3, #3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d12a      	bne.n	8007a14 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	091b      	lsrs	r3, r3, #4
 80079c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d122      	bne.n	8007a14 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80079da:	429a      	cmp	r2, r3
 80079dc:	d11a      	bne.n	8007a14 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	0a5b      	lsrs	r3, r3, #9
 80079e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d111      	bne.n	8007a14 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	0c1b      	lsrs	r3, r3, #16
 80079f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d108      	bne.n	8007a14 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	0e1b      	lsrs	r3, r3, #24
 8007a06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a0e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d001      	beq.n	8007a18 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e02b      	b.n	8007a70 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007a18:	4b17      	ldr	r3, [pc, #92]	; (8007a78 <HAL_RCC_OscConfig+0x7ac>)
 8007a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1c:	08db      	lsrs	r3, r3, #3
 8007a1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a22:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d01f      	beq.n	8007a6e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007a2e:	4b12      	ldr	r3, [pc, #72]	; (8007a78 <HAL_RCC_OscConfig+0x7ac>)
 8007a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a32:	4a11      	ldr	r2, [pc, #68]	; (8007a78 <HAL_RCC_OscConfig+0x7ac>)
 8007a34:	f023 0301 	bic.w	r3, r3, #1
 8007a38:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007a3a:	f7fc faf5 	bl	8004028 <HAL_GetTick>
 8007a3e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007a40:	bf00      	nop
 8007a42:	f7fc faf1 	bl	8004028 <HAL_GetTick>
 8007a46:	4602      	mov	r2, r0
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d0f9      	beq.n	8007a42 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007a4e:	4b0a      	ldr	r3, [pc, #40]	; (8007a78 <HAL_RCC_OscConfig+0x7ac>)
 8007a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a52:	4b0a      	ldr	r3, [pc, #40]	; (8007a7c <HAL_RCC_OscConfig+0x7b0>)
 8007a54:	4013      	ands	r3, r2
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007a5a:	00d2      	lsls	r2, r2, #3
 8007a5c:	4906      	ldr	r1, [pc, #24]	; (8007a78 <HAL_RCC_OscConfig+0x7ac>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007a62:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <HAL_RCC_OscConfig+0x7ac>)
 8007a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a66:	4a04      	ldr	r2, [pc, #16]	; (8007a78 <HAL_RCC_OscConfig+0x7ac>)
 8007a68:	f043 0301 	orr.w	r3, r3, #1
 8007a6c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3730      	adds	r7, #48	; 0x30
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	58024400 	.word	0x58024400
 8007a7c:	ffff0007 	.word	0xffff0007

08007a80 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e19c      	b.n	8007dce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a94:	4b8a      	ldr	r3, [pc, #552]	; (8007cc0 <HAL_RCC_ClockConfig+0x240>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 030f 	and.w	r3, r3, #15
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d910      	bls.n	8007ac4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aa2:	4b87      	ldr	r3, [pc, #540]	; (8007cc0 <HAL_RCC_ClockConfig+0x240>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f023 020f 	bic.w	r2, r3, #15
 8007aaa:	4985      	ldr	r1, [pc, #532]	; (8007cc0 <HAL_RCC_ClockConfig+0x240>)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ab2:	4b83      	ldr	r3, [pc, #524]	; (8007cc0 <HAL_RCC_ClockConfig+0x240>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 030f 	and.w	r3, r3, #15
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d001      	beq.n	8007ac4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e184      	b.n	8007dce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0304 	and.w	r3, r3, #4
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d010      	beq.n	8007af2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	691a      	ldr	r2, [r3, #16]
 8007ad4:	4b7b      	ldr	r3, [pc, #492]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d908      	bls.n	8007af2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ae0:	4b78      	ldr	r3, [pc, #480]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	4975      	ldr	r1, [pc, #468]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0308 	and.w	r3, r3, #8
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d010      	beq.n	8007b20 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	695a      	ldr	r2, [r3, #20]
 8007b02:	4b70      	ldr	r3, [pc, #448]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007b04:	69db      	ldr	r3, [r3, #28]
 8007b06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d908      	bls.n	8007b20 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007b0e:	4b6d      	ldr	r3, [pc, #436]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	496a      	ldr	r1, [pc, #424]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0310 	and.w	r3, r3, #16
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d010      	beq.n	8007b4e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	699a      	ldr	r2, [r3, #24]
 8007b30:	4b64      	ldr	r3, [pc, #400]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d908      	bls.n	8007b4e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b3c:	4b61      	ldr	r3, [pc, #388]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007b3e:	69db      	ldr	r3, [r3, #28]
 8007b40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	495e      	ldr	r1, [pc, #376]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0320 	and.w	r3, r3, #32
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d010      	beq.n	8007b7c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	69da      	ldr	r2, [r3, #28]
 8007b5e:	4b59      	ldr	r3, [pc, #356]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d908      	bls.n	8007b7c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007b6a:	4b56      	ldr	r3, [pc, #344]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	4953      	ldr	r1, [pc, #332]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d010      	beq.n	8007baa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	68da      	ldr	r2, [r3, #12]
 8007b8c:	4b4d      	ldr	r3, [pc, #308]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	f003 030f 	and.w	r3, r3, #15
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d908      	bls.n	8007baa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b98:	4b4a      	ldr	r3, [pc, #296]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	f023 020f 	bic.w	r2, r3, #15
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	4947      	ldr	r1, [pc, #284]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d055      	beq.n	8007c62 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007bb6:	4b43      	ldr	r3, [pc, #268]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	4940      	ldr	r1, [pc, #256]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d107      	bne.n	8007be0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007bd0:	4b3c      	ldr	r3, [pc, #240]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d121      	bne.n	8007c20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e0f6      	b.n	8007dce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	2b03      	cmp	r3, #3
 8007be6:	d107      	bne.n	8007bf8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007be8:	4b36      	ldr	r3, [pc, #216]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d115      	bne.n	8007c20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e0ea      	b.n	8007dce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d107      	bne.n	8007c10 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c00:	4b30      	ldr	r3, [pc, #192]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d109      	bne.n	8007c20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e0de      	b.n	8007dce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c10:	4b2c      	ldr	r3, [pc, #176]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e0d6      	b.n	8007dce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c20:	4b28      	ldr	r3, [pc, #160]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	f023 0207 	bic.w	r2, r3, #7
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	4925      	ldr	r1, [pc, #148]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c32:	f7fc f9f9 	bl	8004028 <HAL_GetTick>
 8007c36:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c38:	e00a      	b.n	8007c50 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c3a:	f7fc f9f5 	bl	8004028 <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d901      	bls.n	8007c50 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e0be      	b.n	8007dce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c50:	4b1c      	ldr	r3, [pc, #112]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	00db      	lsls	r3, r3, #3
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d1eb      	bne.n	8007c3a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d010      	beq.n	8007c90 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68da      	ldr	r2, [r3, #12]
 8007c72:	4b14      	ldr	r3, [pc, #80]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	f003 030f 	and.w	r3, r3, #15
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d208      	bcs.n	8007c90 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c7e:	4b11      	ldr	r3, [pc, #68]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	f023 020f 	bic.w	r2, r3, #15
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	490e      	ldr	r1, [pc, #56]	; (8007cc4 <HAL_RCC_ClockConfig+0x244>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c90:	4b0b      	ldr	r3, [pc, #44]	; (8007cc0 <HAL_RCC_ClockConfig+0x240>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 030f 	and.w	r3, r3, #15
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d214      	bcs.n	8007cc8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c9e:	4b08      	ldr	r3, [pc, #32]	; (8007cc0 <HAL_RCC_ClockConfig+0x240>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f023 020f 	bic.w	r2, r3, #15
 8007ca6:	4906      	ldr	r1, [pc, #24]	; (8007cc0 <HAL_RCC_ClockConfig+0x240>)
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cae:	4b04      	ldr	r3, [pc, #16]	; (8007cc0 <HAL_RCC_ClockConfig+0x240>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 030f 	and.w	r3, r3, #15
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d005      	beq.n	8007cc8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e086      	b.n	8007dce <HAL_RCC_ClockConfig+0x34e>
 8007cc0:	52002000 	.word	0x52002000
 8007cc4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0304 	and.w	r3, r3, #4
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d010      	beq.n	8007cf6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	691a      	ldr	r2, [r3, #16]
 8007cd8:	4b3f      	ldr	r3, [pc, #252]	; (8007dd8 <HAL_RCC_ClockConfig+0x358>)
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d208      	bcs.n	8007cf6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ce4:	4b3c      	ldr	r3, [pc, #240]	; (8007dd8 <HAL_RCC_ClockConfig+0x358>)
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	4939      	ldr	r1, [pc, #228]	; (8007dd8 <HAL_RCC_ClockConfig+0x358>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 0308 	and.w	r3, r3, #8
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d010      	beq.n	8007d24 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	695a      	ldr	r2, [r3, #20]
 8007d06:	4b34      	ldr	r3, [pc, #208]	; (8007dd8 <HAL_RCC_ClockConfig+0x358>)
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d208      	bcs.n	8007d24 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007d12:	4b31      	ldr	r3, [pc, #196]	; (8007dd8 <HAL_RCC_ClockConfig+0x358>)
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	492e      	ldr	r1, [pc, #184]	; (8007dd8 <HAL_RCC_ClockConfig+0x358>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0310 	and.w	r3, r3, #16
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d010      	beq.n	8007d52 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	699a      	ldr	r2, [r3, #24]
 8007d34:	4b28      	ldr	r3, [pc, #160]	; (8007dd8 <HAL_RCC_ClockConfig+0x358>)
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d208      	bcs.n	8007d52 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007d40:	4b25      	ldr	r3, [pc, #148]	; (8007dd8 <HAL_RCC_ClockConfig+0x358>)
 8007d42:	69db      	ldr	r3, [r3, #28]
 8007d44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	4922      	ldr	r1, [pc, #136]	; (8007dd8 <HAL_RCC_ClockConfig+0x358>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0320 	and.w	r3, r3, #32
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d010      	beq.n	8007d80 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	69da      	ldr	r2, [r3, #28]
 8007d62:	4b1d      	ldr	r3, [pc, #116]	; (8007dd8 <HAL_RCC_ClockConfig+0x358>)
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d208      	bcs.n	8007d80 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007d6e:	4b1a      	ldr	r3, [pc, #104]	; (8007dd8 <HAL_RCC_ClockConfig+0x358>)
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	4917      	ldr	r1, [pc, #92]	; (8007dd8 <HAL_RCC_ClockConfig+0x358>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007d80:	f000 f834 	bl	8007dec <HAL_RCC_GetSysClockFreq>
 8007d84:	4602      	mov	r2, r0
 8007d86:	4b14      	ldr	r3, [pc, #80]	; (8007dd8 <HAL_RCC_ClockConfig+0x358>)
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	0a1b      	lsrs	r3, r3, #8
 8007d8c:	f003 030f 	and.w	r3, r3, #15
 8007d90:	4912      	ldr	r1, [pc, #72]	; (8007ddc <HAL_RCC_ClockConfig+0x35c>)
 8007d92:	5ccb      	ldrb	r3, [r1, r3]
 8007d94:	f003 031f 	and.w	r3, r3, #31
 8007d98:	fa22 f303 	lsr.w	r3, r2, r3
 8007d9c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d9e:	4b0e      	ldr	r3, [pc, #56]	; (8007dd8 <HAL_RCC_ClockConfig+0x358>)
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	f003 030f 	and.w	r3, r3, #15
 8007da6:	4a0d      	ldr	r2, [pc, #52]	; (8007ddc <HAL_RCC_ClockConfig+0x35c>)
 8007da8:	5cd3      	ldrb	r3, [r2, r3]
 8007daa:	f003 031f 	and.w	r3, r3, #31
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	fa22 f303 	lsr.w	r3, r2, r3
 8007db4:	4a0a      	ldr	r2, [pc, #40]	; (8007de0 <HAL_RCC_ClockConfig+0x360>)
 8007db6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007db8:	4a0a      	ldr	r2, [pc, #40]	; (8007de4 <HAL_RCC_ClockConfig+0x364>)
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007dbe:	4b0a      	ldr	r3, [pc, #40]	; (8007de8 <HAL_RCC_ClockConfig+0x368>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fc f8e6 	bl	8003f94 <HAL_InitTick>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	58024400 	.word	0x58024400
 8007ddc:	0800dee4 	.word	0x0800dee4
 8007de0:	24000004 	.word	0x24000004
 8007de4:	24000000 	.word	0x24000000
 8007de8:	24000008 	.word	0x24000008

08007dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b089      	sub	sp, #36	; 0x24
 8007df0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007df2:	4bb3      	ldr	r3, [pc, #716]	; (80080c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007dfa:	2b18      	cmp	r3, #24
 8007dfc:	f200 8155 	bhi.w	80080aa <HAL_RCC_GetSysClockFreq+0x2be>
 8007e00:	a201      	add	r2, pc, #4	; (adr r2, 8007e08 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e06:	bf00      	nop
 8007e08:	08007e6d 	.word	0x08007e6d
 8007e0c:	080080ab 	.word	0x080080ab
 8007e10:	080080ab 	.word	0x080080ab
 8007e14:	080080ab 	.word	0x080080ab
 8007e18:	080080ab 	.word	0x080080ab
 8007e1c:	080080ab 	.word	0x080080ab
 8007e20:	080080ab 	.word	0x080080ab
 8007e24:	080080ab 	.word	0x080080ab
 8007e28:	08007e93 	.word	0x08007e93
 8007e2c:	080080ab 	.word	0x080080ab
 8007e30:	080080ab 	.word	0x080080ab
 8007e34:	080080ab 	.word	0x080080ab
 8007e38:	080080ab 	.word	0x080080ab
 8007e3c:	080080ab 	.word	0x080080ab
 8007e40:	080080ab 	.word	0x080080ab
 8007e44:	080080ab 	.word	0x080080ab
 8007e48:	08007e99 	.word	0x08007e99
 8007e4c:	080080ab 	.word	0x080080ab
 8007e50:	080080ab 	.word	0x080080ab
 8007e54:	080080ab 	.word	0x080080ab
 8007e58:	080080ab 	.word	0x080080ab
 8007e5c:	080080ab 	.word	0x080080ab
 8007e60:	080080ab 	.word	0x080080ab
 8007e64:	080080ab 	.word	0x080080ab
 8007e68:	08007e9f 	.word	0x08007e9f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e6c:	4b94      	ldr	r3, [pc, #592]	; (80080c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0320 	and.w	r3, r3, #32
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d009      	beq.n	8007e8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e78:	4b91      	ldr	r3, [pc, #580]	; (80080c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	08db      	lsrs	r3, r3, #3
 8007e7e:	f003 0303 	and.w	r3, r3, #3
 8007e82:	4a90      	ldr	r2, [pc, #576]	; (80080c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e84:	fa22 f303 	lsr.w	r3, r2, r3
 8007e88:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007e8a:	e111      	b.n	80080b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007e8c:	4b8d      	ldr	r3, [pc, #564]	; (80080c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e8e:	61bb      	str	r3, [r7, #24]
      break;
 8007e90:	e10e      	b.n	80080b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007e92:	4b8d      	ldr	r3, [pc, #564]	; (80080c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e94:	61bb      	str	r3, [r7, #24]
      break;
 8007e96:	e10b      	b.n	80080b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007e98:	4b8c      	ldr	r3, [pc, #560]	; (80080cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007e9a:	61bb      	str	r3, [r7, #24]
      break;
 8007e9c:	e108      	b.n	80080b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e9e:	4b88      	ldr	r3, [pc, #544]	; (80080c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea2:	f003 0303 	and.w	r3, r3, #3
 8007ea6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007ea8:	4b85      	ldr	r3, [pc, #532]	; (80080c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eac:	091b      	lsrs	r3, r3, #4
 8007eae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007eb2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007eb4:	4b82      	ldr	r3, [pc, #520]	; (80080c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007ebe:	4b80      	ldr	r3, [pc, #512]	; (80080c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec2:	08db      	lsrs	r3, r3, #3
 8007ec4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	fb02 f303 	mul.w	r3, r2, r3
 8007ece:	ee07 3a90 	vmov	s15, r3
 8007ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 80e1 	beq.w	80080a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	f000 8083 	beq.w	8007ff0 <HAL_RCC_GetSysClockFreq+0x204>
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	f200 80a1 	bhi.w	8008034 <HAL_RCC_GetSysClockFreq+0x248>
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d003      	beq.n	8007f00 <HAL_RCC_GetSysClockFreq+0x114>
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d056      	beq.n	8007fac <HAL_RCC_GetSysClockFreq+0x1c0>
 8007efe:	e099      	b.n	8008034 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f00:	4b6f      	ldr	r3, [pc, #444]	; (80080c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0320 	and.w	r3, r3, #32
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d02d      	beq.n	8007f68 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f0c:	4b6c      	ldr	r3, [pc, #432]	; (80080c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	08db      	lsrs	r3, r3, #3
 8007f12:	f003 0303 	and.w	r3, r3, #3
 8007f16:	4a6b      	ldr	r2, [pc, #428]	; (80080c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f18:	fa22 f303 	lsr.w	r3, r2, r3
 8007f1c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	ee07 3a90 	vmov	s15, r3
 8007f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	ee07 3a90 	vmov	s15, r3
 8007f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f36:	4b62      	ldr	r3, [pc, #392]	; (80080c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f3e:	ee07 3a90 	vmov	s15, r3
 8007f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f4a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80080d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f62:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007f66:	e087      	b.n	8008078 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	ee07 3a90 	vmov	s15, r3
 8007f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f72:	eddf 6a58 	vldr	s13, [pc, #352]	; 80080d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f7a:	4b51      	ldr	r3, [pc, #324]	; (80080c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f82:	ee07 3a90 	vmov	s15, r3
 8007f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f8e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80080d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007faa:	e065      	b.n	8008078 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	ee07 3a90 	vmov	s15, r3
 8007fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80080d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fbe:	4b40      	ldr	r3, [pc, #256]	; (80080c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc6:	ee07 3a90 	vmov	s15, r3
 8007fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fce:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fd2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80080d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007fee:	e043      	b.n	8008078 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	ee07 3a90 	vmov	s15, r3
 8007ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ffa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80080dc <HAL_RCC_GetSysClockFreq+0x2f0>
 8007ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008002:	4b2f      	ldr	r3, [pc, #188]	; (80080c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800800a:	ee07 3a90 	vmov	s15, r3
 800800e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008012:	ed97 6a02 	vldr	s12, [r7, #8]
 8008016:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80080d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800801a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800801e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800802a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800802e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008032:	e021      	b.n	8008078 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	ee07 3a90 	vmov	s15, r3
 800803a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800803e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80080d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008046:	4b1e      	ldr	r3, [pc, #120]	; (80080c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800804e:	ee07 3a90 	vmov	s15, r3
 8008052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008056:	ed97 6a02 	vldr	s12, [r7, #8]
 800805a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80080d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800805e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800806a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800806e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008072:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008076:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008078:	4b11      	ldr	r3, [pc, #68]	; (80080c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800807a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800807c:	0a5b      	lsrs	r3, r3, #9
 800807e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008082:	3301      	adds	r3, #1
 8008084:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	ee07 3a90 	vmov	s15, r3
 800808c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008090:	edd7 6a07 	vldr	s13, [r7, #28]
 8008094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800809c:	ee17 3a90 	vmov	r3, s15
 80080a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80080a2:	e005      	b.n	80080b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80080a4:	2300      	movs	r3, #0
 80080a6:	61bb      	str	r3, [r7, #24]
      break;
 80080a8:	e002      	b.n	80080b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80080aa:	4b07      	ldr	r3, [pc, #28]	; (80080c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80080ac:	61bb      	str	r3, [r7, #24]
      break;
 80080ae:	bf00      	nop
  }

  return sysclockfreq;
 80080b0:	69bb      	ldr	r3, [r7, #24]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3724      	adds	r7, #36	; 0x24
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	58024400 	.word	0x58024400
 80080c4:	03d09000 	.word	0x03d09000
 80080c8:	003d0900 	.word	0x003d0900
 80080cc:	017d7840 	.word	0x017d7840
 80080d0:	46000000 	.word	0x46000000
 80080d4:	4c742400 	.word	0x4c742400
 80080d8:	4a742400 	.word	0x4a742400
 80080dc:	4bbebc20 	.word	0x4bbebc20

080080e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80080e6:	f7ff fe81 	bl	8007dec <HAL_RCC_GetSysClockFreq>
 80080ea:	4602      	mov	r2, r0
 80080ec:	4b10      	ldr	r3, [pc, #64]	; (8008130 <HAL_RCC_GetHCLKFreq+0x50>)
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	0a1b      	lsrs	r3, r3, #8
 80080f2:	f003 030f 	and.w	r3, r3, #15
 80080f6:	490f      	ldr	r1, [pc, #60]	; (8008134 <HAL_RCC_GetHCLKFreq+0x54>)
 80080f8:	5ccb      	ldrb	r3, [r1, r3]
 80080fa:	f003 031f 	and.w	r3, r3, #31
 80080fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008102:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008104:	4b0a      	ldr	r3, [pc, #40]	; (8008130 <HAL_RCC_GetHCLKFreq+0x50>)
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	f003 030f 	and.w	r3, r3, #15
 800810c:	4a09      	ldr	r2, [pc, #36]	; (8008134 <HAL_RCC_GetHCLKFreq+0x54>)
 800810e:	5cd3      	ldrb	r3, [r2, r3]
 8008110:	f003 031f 	and.w	r3, r3, #31
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	fa22 f303 	lsr.w	r3, r2, r3
 800811a:	4a07      	ldr	r2, [pc, #28]	; (8008138 <HAL_RCC_GetHCLKFreq+0x58>)
 800811c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800811e:	4a07      	ldr	r2, [pc, #28]	; (800813c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008124:	4b04      	ldr	r3, [pc, #16]	; (8008138 <HAL_RCC_GetHCLKFreq+0x58>)
 8008126:	681b      	ldr	r3, [r3, #0]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	58024400 	.word	0x58024400
 8008134:	0800dee4 	.word	0x0800dee4
 8008138:	24000004 	.word	0x24000004
 800813c:	24000000 	.word	0x24000000

08008140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008144:	f7ff ffcc 	bl	80080e0 <HAL_RCC_GetHCLKFreq>
 8008148:	4602      	mov	r2, r0
 800814a:	4b06      	ldr	r3, [pc, #24]	; (8008164 <HAL_RCC_GetPCLK1Freq+0x24>)
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	091b      	lsrs	r3, r3, #4
 8008150:	f003 0307 	and.w	r3, r3, #7
 8008154:	4904      	ldr	r1, [pc, #16]	; (8008168 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008156:	5ccb      	ldrb	r3, [r1, r3]
 8008158:	f003 031f 	and.w	r3, r3, #31
 800815c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008160:	4618      	mov	r0, r3
 8008162:	bd80      	pop	{r7, pc}
 8008164:	58024400 	.word	0x58024400
 8008168:	0800dee4 	.word	0x0800dee4

0800816c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008170:	f7ff ffb6 	bl	80080e0 <HAL_RCC_GetHCLKFreq>
 8008174:	4602      	mov	r2, r0
 8008176:	4b06      	ldr	r3, [pc, #24]	; (8008190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008178:	69db      	ldr	r3, [r3, #28]
 800817a:	0a1b      	lsrs	r3, r3, #8
 800817c:	f003 0307 	and.w	r3, r3, #7
 8008180:	4904      	ldr	r1, [pc, #16]	; (8008194 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008182:	5ccb      	ldrb	r3, [r1, r3]
 8008184:	f003 031f 	and.w	r3, r3, #31
 8008188:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800818c:	4618      	mov	r0, r3
 800818e:	bd80      	pop	{r7, pc}
 8008190:	58024400 	.word	0x58024400
 8008194:	0800dee4 	.word	0x0800dee4

08008198 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800819c:	b0c6      	sub	sp, #280	; 0x118
 800819e:	af00      	add	r7, sp, #0
 80081a0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80081a4:	2300      	movs	r3, #0
 80081a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80081aa:	2300      	movs	r3, #0
 80081ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80081b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80081bc:	2500      	movs	r5, #0
 80081be:	ea54 0305 	orrs.w	r3, r4, r5
 80081c2:	d049      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80081c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081ce:	d02f      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80081d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081d4:	d828      	bhi.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80081d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081da:	d01a      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80081dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081e0:	d822      	bhi.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d003      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80081e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081ea:	d007      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80081ec:	e01c      	b.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081ee:	4bab      	ldr	r3, [pc, #684]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80081f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f2:	4aaa      	ldr	r2, [pc, #680]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80081f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80081fa:	e01a      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008200:	3308      	adds	r3, #8
 8008202:	2102      	movs	r1, #2
 8008204:	4618      	mov	r0, r3
 8008206:	f001 fc25 	bl	8009a54 <RCCEx_PLL2_Config>
 800820a:	4603      	mov	r3, r0
 800820c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008210:	e00f      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008216:	3328      	adds	r3, #40	; 0x28
 8008218:	2102      	movs	r1, #2
 800821a:	4618      	mov	r0, r3
 800821c:	f001 fccc 	bl	8009bb8 <RCCEx_PLL3_Config>
 8008220:	4603      	mov	r3, r0
 8008222:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008226:	e004      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800822e:	e000      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008232:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10a      	bne.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800823a:	4b98      	ldr	r3, [pc, #608]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800823c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800823e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008248:	4a94      	ldr	r2, [pc, #592]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800824a:	430b      	orrs	r3, r1
 800824c:	6513      	str	r3, [r2, #80]	; 0x50
 800824e:	e003      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008250:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008254:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008260:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008264:	f04f 0900 	mov.w	r9, #0
 8008268:	ea58 0309 	orrs.w	r3, r8, r9
 800826c:	d047      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800826e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008274:	2b04      	cmp	r3, #4
 8008276:	d82a      	bhi.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008278:	a201      	add	r2, pc, #4	; (adr r2, 8008280 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800827a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827e:	bf00      	nop
 8008280:	08008295 	.word	0x08008295
 8008284:	080082a3 	.word	0x080082a3
 8008288:	080082b9 	.word	0x080082b9
 800828c:	080082d7 	.word	0x080082d7
 8008290:	080082d7 	.word	0x080082d7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008294:	4b81      	ldr	r3, [pc, #516]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008298:	4a80      	ldr	r2, [pc, #512]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800829a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800829e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80082a0:	e01a      	b.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082a6:	3308      	adds	r3, #8
 80082a8:	2100      	movs	r1, #0
 80082aa:	4618      	mov	r0, r3
 80082ac:	f001 fbd2 	bl	8009a54 <RCCEx_PLL2_Config>
 80082b0:	4603      	mov	r3, r0
 80082b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80082b6:	e00f      	b.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80082b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082bc:	3328      	adds	r3, #40	; 0x28
 80082be:	2100      	movs	r1, #0
 80082c0:	4618      	mov	r0, r3
 80082c2:	f001 fc79 	bl	8009bb8 <RCCEx_PLL3_Config>
 80082c6:	4603      	mov	r3, r0
 80082c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80082cc:	e004      	b.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80082d4:	e000      	b.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80082d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10a      	bne.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80082e0:	4b6e      	ldr	r3, [pc, #440]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80082e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082e4:	f023 0107 	bic.w	r1, r3, #7
 80082e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ee:	4a6b      	ldr	r2, [pc, #428]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80082f0:	430b      	orrs	r3, r1
 80082f2:	6513      	str	r3, [r2, #80]	; 0x50
 80082f4:	e003      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80082fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80082fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008306:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800830a:	f04f 0b00 	mov.w	fp, #0
 800830e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008312:	d05b      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008318:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800831c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008320:	d03b      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008322:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008326:	d834      	bhi.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008328:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800832c:	d037      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800832e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008332:	d82e      	bhi.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008334:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008338:	d033      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800833a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800833e:	d828      	bhi.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008340:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008344:	d01a      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800834a:	d822      	bhi.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800834c:	2b00      	cmp	r3, #0
 800834e:	d003      	beq.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008350:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008354:	d007      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008356:	e01c      	b.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008358:	4b50      	ldr	r3, [pc, #320]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800835a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835c:	4a4f      	ldr	r2, [pc, #316]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800835e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008362:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008364:	e01e      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800836a:	3308      	adds	r3, #8
 800836c:	2100      	movs	r1, #0
 800836e:	4618      	mov	r0, r3
 8008370:	f001 fb70 	bl	8009a54 <RCCEx_PLL2_Config>
 8008374:	4603      	mov	r3, r0
 8008376:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800837a:	e013      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800837c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008380:	3328      	adds	r3, #40	; 0x28
 8008382:	2100      	movs	r1, #0
 8008384:	4618      	mov	r0, r3
 8008386:	f001 fc17 	bl	8009bb8 <RCCEx_PLL3_Config>
 800838a:	4603      	mov	r3, r0
 800838c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008390:	e008      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008398:	e004      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800839a:	bf00      	nop
 800839c:	e002      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800839e:	bf00      	nop
 80083a0:	e000      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80083a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d10b      	bne.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80083ac:	4b3b      	ldr	r3, [pc, #236]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80083ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083b0:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80083b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80083bc:	4a37      	ldr	r2, [pc, #220]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80083be:	430b      	orrs	r3, r1
 80083c0:	6593      	str	r3, [r2, #88]	; 0x58
 80083c2:	e003      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80083c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80083cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80083d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80083dc:	2300      	movs	r3, #0
 80083de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80083e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80083e6:	460b      	mov	r3, r1
 80083e8:	4313      	orrs	r3, r2
 80083ea:	d05d      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80083ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80083f4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80083f8:	d03b      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80083fa:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80083fe:	d834      	bhi.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008400:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008404:	d037      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008406:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800840a:	d82e      	bhi.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800840c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008410:	d033      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008412:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008416:	d828      	bhi.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008418:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800841c:	d01a      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800841e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008422:	d822      	bhi.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800842c:	d007      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800842e:	e01c      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008430:	4b1a      	ldr	r3, [pc, #104]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008434:	4a19      	ldr	r2, [pc, #100]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800843a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800843c:	e01e      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800843e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008442:	3308      	adds	r3, #8
 8008444:	2100      	movs	r1, #0
 8008446:	4618      	mov	r0, r3
 8008448:	f001 fb04 	bl	8009a54 <RCCEx_PLL2_Config>
 800844c:	4603      	mov	r3, r0
 800844e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008452:	e013      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008458:	3328      	adds	r3, #40	; 0x28
 800845a:	2100      	movs	r1, #0
 800845c:	4618      	mov	r0, r3
 800845e:	f001 fbab 	bl	8009bb8 <RCCEx_PLL3_Config>
 8008462:	4603      	mov	r3, r0
 8008464:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008468:	e008      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008470:	e004      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008472:	bf00      	nop
 8008474:	e002      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008476:	bf00      	nop
 8008478:	e000      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800847a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800847c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10d      	bne.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008484:	4b05      	ldr	r3, [pc, #20]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008488:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800848c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008490:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008494:	4a01      	ldr	r2, [pc, #4]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008496:	430b      	orrs	r3, r1
 8008498:	6593      	str	r3, [r2, #88]	; 0x58
 800849a:	e005      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800849c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80084a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80084a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80084b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80084b8:	2300      	movs	r3, #0
 80084ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80084be:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4313      	orrs	r3, r2
 80084c6:	d03a      	beq.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80084c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ce:	2b30      	cmp	r3, #48	; 0x30
 80084d0:	d01f      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80084d2:	2b30      	cmp	r3, #48	; 0x30
 80084d4:	d819      	bhi.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	d00c      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80084da:	2b20      	cmp	r3, #32
 80084dc:	d815      	bhi.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d019      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80084e2:	2b10      	cmp	r3, #16
 80084e4:	d111      	bne.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084e6:	4baa      	ldr	r3, [pc, #680]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80084e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ea:	4aa9      	ldr	r2, [pc, #676]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80084ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80084f2:	e011      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084f8:	3308      	adds	r3, #8
 80084fa:	2102      	movs	r1, #2
 80084fc:	4618      	mov	r0, r3
 80084fe:	f001 faa9 	bl	8009a54 <RCCEx_PLL2_Config>
 8008502:	4603      	mov	r3, r0
 8008504:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008508:	e006      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008510:	e002      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008512:	bf00      	nop
 8008514:	e000      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008516:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008518:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10a      	bne.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008520:	4b9b      	ldr	r3, [pc, #620]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008524:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800852c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800852e:	4a98      	ldr	r2, [pc, #608]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008530:	430b      	orrs	r3, r1
 8008532:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008534:	e003      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008536:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800853a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800853e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008546:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800854a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800854e:	2300      	movs	r3, #0
 8008550:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008554:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008558:	460b      	mov	r3, r1
 800855a:	4313      	orrs	r3, r2
 800855c:	d051      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800855e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008568:	d035      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800856a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800856e:	d82e      	bhi.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008570:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008574:	d031      	beq.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x442>
 8008576:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800857a:	d828      	bhi.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x436>
 800857c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008580:	d01a      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008586:	d822      	bhi.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008588:	2b00      	cmp	r3, #0
 800858a:	d003      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800858c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008590:	d007      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008592:	e01c      	b.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008594:	4b7e      	ldr	r3, [pc, #504]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008598:	4a7d      	ldr	r2, [pc, #500]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800859a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800859e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80085a0:	e01c      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085a6:	3308      	adds	r3, #8
 80085a8:	2100      	movs	r1, #0
 80085aa:	4618      	mov	r0, r3
 80085ac:	f001 fa52 	bl	8009a54 <RCCEx_PLL2_Config>
 80085b0:	4603      	mov	r3, r0
 80085b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80085b6:	e011      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085bc:	3328      	adds	r3, #40	; 0x28
 80085be:	2100      	movs	r1, #0
 80085c0:	4618      	mov	r0, r3
 80085c2:	f001 faf9 	bl	8009bb8 <RCCEx_PLL3_Config>
 80085c6:	4603      	mov	r3, r0
 80085c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80085cc:	e006      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80085d4:	e002      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80085d6:	bf00      	nop
 80085d8:	e000      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80085da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10a      	bne.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80085e4:	4b6a      	ldr	r3, [pc, #424]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80085e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085e8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80085ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085f2:	4a67      	ldr	r2, [pc, #412]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80085f4:	430b      	orrs	r3, r1
 80085f6:	6513      	str	r3, [r2, #80]	; 0x50
 80085f8:	e003      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80085fe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800860e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008612:	2300      	movs	r3, #0
 8008614:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008618:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800861c:	460b      	mov	r3, r1
 800861e:	4313      	orrs	r3, r2
 8008620:	d053      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800862c:	d033      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800862e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008632:	d82c      	bhi.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008634:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008638:	d02f      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800863a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800863e:	d826      	bhi.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008640:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008644:	d02b      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008646:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800864a:	d820      	bhi.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800864c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008650:	d012      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8008652:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008656:	d81a      	bhi.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008658:	2b00      	cmp	r3, #0
 800865a:	d022      	beq.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800865c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008660:	d115      	bne.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008666:	3308      	adds	r3, #8
 8008668:	2101      	movs	r1, #1
 800866a:	4618      	mov	r0, r3
 800866c:	f001 f9f2 	bl	8009a54 <RCCEx_PLL2_Config>
 8008670:	4603      	mov	r3, r0
 8008672:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008676:	e015      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800867c:	3328      	adds	r3, #40	; 0x28
 800867e:	2101      	movs	r1, #1
 8008680:	4618      	mov	r0, r3
 8008682:	f001 fa99 	bl	8009bb8 <RCCEx_PLL3_Config>
 8008686:	4603      	mov	r3, r0
 8008688:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800868c:	e00a      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008694:	e006      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008696:	bf00      	nop
 8008698:	e004      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800869a:	bf00      	nop
 800869c:	e002      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800869e:	bf00      	nop
 80086a0:	e000      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80086a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10a      	bne.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80086ac:	4b38      	ldr	r3, [pc, #224]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80086ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086b0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80086b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086ba:	4a35      	ldr	r2, [pc, #212]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80086bc:	430b      	orrs	r3, r1
 80086be:	6513      	str	r3, [r2, #80]	; 0x50
 80086c0:	e003      	b.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80086c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80086ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80086d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80086da:	2300      	movs	r3, #0
 80086dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80086e0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80086e4:	460b      	mov	r3, r1
 80086e6:	4313      	orrs	r3, r2
 80086e8:	d058      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80086ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80086f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086f6:	d033      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80086f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086fc:	d82c      	bhi.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80086fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008702:	d02f      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008708:	d826      	bhi.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800870a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800870e:	d02b      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008710:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008714:	d820      	bhi.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800871a:	d012      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800871c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008720:	d81a      	bhi.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d022      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008726:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800872a:	d115      	bne.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800872c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008730:	3308      	adds	r3, #8
 8008732:	2101      	movs	r1, #1
 8008734:	4618      	mov	r0, r3
 8008736:	f001 f98d 	bl	8009a54 <RCCEx_PLL2_Config>
 800873a:	4603      	mov	r3, r0
 800873c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008740:	e015      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008746:	3328      	adds	r3, #40	; 0x28
 8008748:	2101      	movs	r1, #1
 800874a:	4618      	mov	r0, r3
 800874c:	f001 fa34 	bl	8009bb8 <RCCEx_PLL3_Config>
 8008750:	4603      	mov	r3, r0
 8008752:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008756:	e00a      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800875e:	e006      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008760:	bf00      	nop
 8008762:	e004      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008764:	bf00      	nop
 8008766:	e002      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008768:	bf00      	nop
 800876a:	e000      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800876c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800876e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10e      	bne.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008776:	4b06      	ldr	r3, [pc, #24]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800877a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800877e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008782:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008786:	4a02      	ldr	r2, [pc, #8]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008788:	430b      	orrs	r3, r1
 800878a:	6593      	str	r3, [r2, #88]	; 0x58
 800878c:	e006      	b.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800878e:	bf00      	nop
 8008790:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008794:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008798:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800879c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80087a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087ac:	2300      	movs	r3, #0
 80087ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80087b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80087b6:	460b      	mov	r3, r1
 80087b8:	4313      	orrs	r3, r2
 80087ba:	d037      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80087bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087c6:	d00e      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80087c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087cc:	d816      	bhi.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x664>
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d018      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80087d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087d6:	d111      	bne.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087d8:	4bc4      	ldr	r3, [pc, #784]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80087da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087dc:	4ac3      	ldr	r2, [pc, #780]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80087de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80087e4:	e00f      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087ea:	3308      	adds	r3, #8
 80087ec:	2101      	movs	r1, #1
 80087ee:	4618      	mov	r0, r3
 80087f0:	f001 f930 	bl	8009a54 <RCCEx_PLL2_Config>
 80087f4:	4603      	mov	r3, r0
 80087f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80087fa:	e004      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008802:	e000      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008806:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800880a:	2b00      	cmp	r3, #0
 800880c:	d10a      	bne.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800880e:	4bb7      	ldr	r3, [pc, #732]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008812:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800881a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800881c:	4ab3      	ldr	r2, [pc, #716]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800881e:	430b      	orrs	r3, r1
 8008820:	6513      	str	r3, [r2, #80]	; 0x50
 8008822:	e003      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008824:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008828:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800882c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008834:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008838:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800883c:	2300      	movs	r3, #0
 800883e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008842:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008846:	460b      	mov	r3, r1
 8008848:	4313      	orrs	r3, r2
 800884a:	d039      	beq.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800884c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008852:	2b03      	cmp	r3, #3
 8008854:	d81c      	bhi.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008856:	a201      	add	r2, pc, #4	; (adr r2, 800885c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885c:	08008899 	.word	0x08008899
 8008860:	0800886d 	.word	0x0800886d
 8008864:	0800887b 	.word	0x0800887b
 8008868:	08008899 	.word	0x08008899
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800886c:	4b9f      	ldr	r3, [pc, #636]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800886e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008870:	4a9e      	ldr	r2, [pc, #632]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008876:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008878:	e00f      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800887a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800887e:	3308      	adds	r3, #8
 8008880:	2102      	movs	r1, #2
 8008882:	4618      	mov	r0, r3
 8008884:	f001 f8e6 	bl	8009a54 <RCCEx_PLL2_Config>
 8008888:	4603      	mov	r3, r0
 800888a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800888e:	e004      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008896:	e000      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800889a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10a      	bne.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80088a2:	4b92      	ldr	r3, [pc, #584]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80088a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088a6:	f023 0103 	bic.w	r1, r3, #3
 80088aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088b0:	4a8e      	ldr	r2, [pc, #568]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80088b2:	430b      	orrs	r3, r1
 80088b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80088b6:	e003      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80088bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80088c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80088cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088d0:	2300      	movs	r3, #0
 80088d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80088d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80088da:	460b      	mov	r3, r1
 80088dc:	4313      	orrs	r3, r2
 80088de:	f000 8099 	beq.w	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80088e2:	4b83      	ldr	r3, [pc, #524]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a82      	ldr	r2, [pc, #520]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80088e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80088ee:	f7fb fb9b 	bl	8004028 <HAL_GetTick>
 80088f2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088f6:	e00b      	b.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088f8:	f7fb fb96 	bl	8004028 <HAL_GetTick>
 80088fc:	4602      	mov	r2, r0
 80088fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	2b64      	cmp	r3, #100	; 0x64
 8008906:	d903      	bls.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008908:	2303      	movs	r3, #3
 800890a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800890e:	e005      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008910:	4b77      	ldr	r3, [pc, #476]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008918:	2b00      	cmp	r3, #0
 800891a:	d0ed      	beq.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800891c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008920:	2b00      	cmp	r3, #0
 8008922:	d173      	bne.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008924:	4b71      	ldr	r3, [pc, #452]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008926:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800892c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008930:	4053      	eors	r3, r2
 8008932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008936:	2b00      	cmp	r3, #0
 8008938:	d015      	beq.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800893a:	4b6c      	ldr	r3, [pc, #432]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800893c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800893e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008942:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008946:	4b69      	ldr	r3, [pc, #420]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894a:	4a68      	ldr	r2, [pc, #416]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800894c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008950:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008952:	4b66      	ldr	r3, [pc, #408]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008956:	4a65      	ldr	r2, [pc, #404]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800895c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800895e:	4a63      	ldr	r2, [pc, #396]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008964:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800896a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800896e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008972:	d118      	bne.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008974:	f7fb fb58 	bl	8004028 <HAL_GetTick>
 8008978:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800897c:	e00d      	b.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800897e:	f7fb fb53 	bl	8004028 <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008988:	1ad2      	subs	r2, r2, r3
 800898a:	f241 3388 	movw	r3, #5000	; 0x1388
 800898e:	429a      	cmp	r2, r3
 8008990:	d903      	bls.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8008998:	e005      	b.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800899a:	4b54      	ldr	r3, [pc, #336]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800899c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d0eb      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80089a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d129      	bne.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089be:	d10e      	bne.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x846>
 80089c0:	4b4a      	ldr	r3, [pc, #296]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80089c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089d0:	091a      	lsrs	r2, r3, #4
 80089d2:	4b48      	ldr	r3, [pc, #288]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80089d4:	4013      	ands	r3, r2
 80089d6:	4a45      	ldr	r2, [pc, #276]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089d8:	430b      	orrs	r3, r1
 80089da:	6113      	str	r3, [r2, #16]
 80089dc:	e005      	b.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x852>
 80089de:	4b43      	ldr	r3, [pc, #268]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	4a42      	ldr	r2, [pc, #264]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80089e8:	6113      	str	r3, [r2, #16]
 80089ea:	4b40      	ldr	r3, [pc, #256]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089ec:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80089ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089fa:	4a3c      	ldr	r2, [pc, #240]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089fc:	430b      	orrs	r3, r1
 80089fe:	6713      	str	r3, [r2, #112]	; 0x70
 8008a00:	e008      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a06:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8008a0a:	e003      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a10:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1c:	f002 0301 	and.w	r3, r2, #1
 8008a20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a24:	2300      	movs	r3, #0
 8008a26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008a2a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008a2e:	460b      	mov	r3, r1
 8008a30:	4313      	orrs	r3, r2
 8008a32:	f000 808f 	beq.w	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a3c:	2b28      	cmp	r3, #40	; 0x28
 8008a3e:	d871      	bhi.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008a40:	a201      	add	r2, pc, #4	; (adr r2, 8008a48 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a46:	bf00      	nop
 8008a48:	08008b2d 	.word	0x08008b2d
 8008a4c:	08008b25 	.word	0x08008b25
 8008a50:	08008b25 	.word	0x08008b25
 8008a54:	08008b25 	.word	0x08008b25
 8008a58:	08008b25 	.word	0x08008b25
 8008a5c:	08008b25 	.word	0x08008b25
 8008a60:	08008b25 	.word	0x08008b25
 8008a64:	08008b25 	.word	0x08008b25
 8008a68:	08008af9 	.word	0x08008af9
 8008a6c:	08008b25 	.word	0x08008b25
 8008a70:	08008b25 	.word	0x08008b25
 8008a74:	08008b25 	.word	0x08008b25
 8008a78:	08008b25 	.word	0x08008b25
 8008a7c:	08008b25 	.word	0x08008b25
 8008a80:	08008b25 	.word	0x08008b25
 8008a84:	08008b25 	.word	0x08008b25
 8008a88:	08008b0f 	.word	0x08008b0f
 8008a8c:	08008b25 	.word	0x08008b25
 8008a90:	08008b25 	.word	0x08008b25
 8008a94:	08008b25 	.word	0x08008b25
 8008a98:	08008b25 	.word	0x08008b25
 8008a9c:	08008b25 	.word	0x08008b25
 8008aa0:	08008b25 	.word	0x08008b25
 8008aa4:	08008b25 	.word	0x08008b25
 8008aa8:	08008b2d 	.word	0x08008b2d
 8008aac:	08008b25 	.word	0x08008b25
 8008ab0:	08008b25 	.word	0x08008b25
 8008ab4:	08008b25 	.word	0x08008b25
 8008ab8:	08008b25 	.word	0x08008b25
 8008abc:	08008b25 	.word	0x08008b25
 8008ac0:	08008b25 	.word	0x08008b25
 8008ac4:	08008b25 	.word	0x08008b25
 8008ac8:	08008b2d 	.word	0x08008b2d
 8008acc:	08008b25 	.word	0x08008b25
 8008ad0:	08008b25 	.word	0x08008b25
 8008ad4:	08008b25 	.word	0x08008b25
 8008ad8:	08008b25 	.word	0x08008b25
 8008adc:	08008b25 	.word	0x08008b25
 8008ae0:	08008b25 	.word	0x08008b25
 8008ae4:	08008b25 	.word	0x08008b25
 8008ae8:	08008b2d 	.word	0x08008b2d
 8008aec:	58024400 	.word	0x58024400
 8008af0:	58024800 	.word	0x58024800
 8008af4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008afc:	3308      	adds	r3, #8
 8008afe:	2101      	movs	r1, #1
 8008b00:	4618      	mov	r0, r3
 8008b02:	f000 ffa7 	bl	8009a54 <RCCEx_PLL2_Config>
 8008b06:	4603      	mov	r3, r0
 8008b08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b0c:	e00f      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b12:	3328      	adds	r3, #40	; 0x28
 8008b14:	2101      	movs	r1, #1
 8008b16:	4618      	mov	r0, r3
 8008b18:	f001 f84e 	bl	8009bb8 <RCCEx_PLL3_Config>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b22:	e004      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008b2a:	e000      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d10a      	bne.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008b36:	4bbf      	ldr	r3, [pc, #764]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b3a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b44:	4abb      	ldr	r2, [pc, #748]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008b46:	430b      	orrs	r3, r1
 8008b48:	6553      	str	r3, [r2, #84]	; 0x54
 8008b4a:	e003      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5c:	f002 0302 	and.w	r3, r2, #2
 8008b60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b64:	2300      	movs	r3, #0
 8008b66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b6a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	4313      	orrs	r3, r2
 8008b72:	d041      	beq.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b7a:	2b05      	cmp	r3, #5
 8008b7c:	d824      	bhi.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008b7e:	a201      	add	r2, pc, #4	; (adr r2, 8008b84 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b84:	08008bd1 	.word	0x08008bd1
 8008b88:	08008b9d 	.word	0x08008b9d
 8008b8c:	08008bb3 	.word	0x08008bb3
 8008b90:	08008bd1 	.word	0x08008bd1
 8008b94:	08008bd1 	.word	0x08008bd1
 8008b98:	08008bd1 	.word	0x08008bd1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ba0:	3308      	adds	r3, #8
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 ff55 	bl	8009a54 <RCCEx_PLL2_Config>
 8008baa:	4603      	mov	r3, r0
 8008bac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008bb0:	e00f      	b.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bb6:	3328      	adds	r3, #40	; 0x28
 8008bb8:	2101      	movs	r1, #1
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f000 fffc 	bl	8009bb8 <RCCEx_PLL3_Config>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008bc6:	e004      	b.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008bce:	e000      	b.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8008bd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bd2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d10a      	bne.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008bda:	4b96      	ldr	r3, [pc, #600]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bde:	f023 0107 	bic.w	r1, r3, #7
 8008be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008be8:	4a92      	ldr	r2, [pc, #584]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008bea:	430b      	orrs	r3, r1
 8008bec:	6553      	str	r3, [r2, #84]	; 0x54
 8008bee:	e003      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bf0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008bf4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c00:	f002 0304 	and.w	r3, r2, #4
 8008c04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c0e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008c12:	460b      	mov	r3, r1
 8008c14:	4313      	orrs	r3, r2
 8008c16:	d044      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c20:	2b05      	cmp	r3, #5
 8008c22:	d825      	bhi.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8008c24:	a201      	add	r2, pc, #4	; (adr r2, 8008c2c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8008c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2a:	bf00      	nop
 8008c2c:	08008c79 	.word	0x08008c79
 8008c30:	08008c45 	.word	0x08008c45
 8008c34:	08008c5b 	.word	0x08008c5b
 8008c38:	08008c79 	.word	0x08008c79
 8008c3c:	08008c79 	.word	0x08008c79
 8008c40:	08008c79 	.word	0x08008c79
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c48:	3308      	adds	r3, #8
 8008c4a:	2101      	movs	r1, #1
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 ff01 	bl	8009a54 <RCCEx_PLL2_Config>
 8008c52:	4603      	mov	r3, r0
 8008c54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008c58:	e00f      	b.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c5e:	3328      	adds	r3, #40	; 0x28
 8008c60:	2101      	movs	r1, #1
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 ffa8 	bl	8009bb8 <RCCEx_PLL3_Config>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008c6e:	e004      	b.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008c76:	e000      	b.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8008c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10b      	bne.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008c82:	4b6c      	ldr	r3, [pc, #432]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c86:	f023 0107 	bic.w	r1, r3, #7
 8008c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c92:	4a68      	ldr	r2, [pc, #416]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008c94:	430b      	orrs	r3, r1
 8008c96:	6593      	str	r3, [r2, #88]	; 0x58
 8008c98:	e003      	b.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c9a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c9e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008caa:	f002 0320 	and.w	r3, r2, #32
 8008cae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008cb8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	d055      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cce:	d033      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cd4:	d82c      	bhi.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cda:	d02f      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ce0:	d826      	bhi.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008ce2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ce6:	d02b      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008ce8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008cec:	d820      	bhi.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008cee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cf2:	d012      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cf8:	d81a      	bhi.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d022      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008cfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d02:	d115      	bne.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d08:	3308      	adds	r3, #8
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 fea1 	bl	8009a54 <RCCEx_PLL2_Config>
 8008d12:	4603      	mov	r3, r0
 8008d14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d18:	e015      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d1e:	3328      	adds	r3, #40	; 0x28
 8008d20:	2102      	movs	r1, #2
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 ff48 	bl	8009bb8 <RCCEx_PLL3_Config>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d2e:	e00a      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008d36:	e006      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008d38:	bf00      	nop
 8008d3a:	e004      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008d3c:	bf00      	nop
 8008d3e:	e002      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008d40:	bf00      	nop
 8008d42:	e000      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10b      	bne.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008d4e:	4b39      	ldr	r3, [pc, #228]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d52:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d5e:	4a35      	ldr	r2, [pc, #212]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008d60:	430b      	orrs	r3, r1
 8008d62:	6553      	str	r3, [r2, #84]	; 0x54
 8008d64:	e003      	b.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008d6a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d76:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008d7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d7e:	2300      	movs	r3, #0
 8008d80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d84:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008d88:	460b      	mov	r3, r1
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	d058      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d96:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008d9a:	d033      	beq.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008d9c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008da0:	d82c      	bhi.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008da6:	d02f      	beq.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dac:	d826      	bhi.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008dae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008db2:	d02b      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008db4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008db8:	d820      	bhi.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dbe:	d012      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8008dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dc4:	d81a      	bhi.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d022      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dce:	d115      	bne.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dd4:	3308      	adds	r3, #8
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 fe3b 	bl	8009a54 <RCCEx_PLL2_Config>
 8008dde:	4603      	mov	r3, r0
 8008de0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008de4:	e015      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dea:	3328      	adds	r3, #40	; 0x28
 8008dec:	2102      	movs	r1, #2
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 fee2 	bl	8009bb8 <RCCEx_PLL3_Config>
 8008df4:	4603      	mov	r3, r0
 8008df6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008dfa:	e00a      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008e02:	e006      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008e04:	bf00      	nop
 8008e06:	e004      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008e08:	bf00      	nop
 8008e0a:	e002      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008e0c:	bf00      	nop
 8008e0e:	e000      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10e      	bne.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e1a:	4b06      	ldr	r3, [pc, #24]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e1e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e2a:	4a02      	ldr	r2, [pc, #8]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008e2c:	430b      	orrs	r3, r1
 8008e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8008e30:	e006      	b.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8008e32:	bf00      	nop
 8008e34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e48:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008e4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e50:	2300      	movs	r3, #0
 8008e52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008e56:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	d055      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e68:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008e6c:	d033      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8008e6e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008e72:	d82c      	bhi.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e78:	d02f      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e7e:	d826      	bhi.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008e80:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008e84:	d02b      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008e86:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008e8a:	d820      	bhi.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008e8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e90:	d012      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8008e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e96:	d81a      	bhi.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d022      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ea0:	d115      	bne.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ea6:	3308      	adds	r3, #8
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 fdd2 	bl	8009a54 <RCCEx_PLL2_Config>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008eb6:	e015      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ebc:	3328      	adds	r3, #40	; 0x28
 8008ebe:	2102      	movs	r1, #2
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 fe79 	bl	8009bb8 <RCCEx_PLL3_Config>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008ecc:	e00a      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008ed4:	e006      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008ed6:	bf00      	nop
 8008ed8:	e004      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008eda:	bf00      	nop
 8008edc:	e002      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008ede:	bf00      	nop
 8008ee0:	e000      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ee4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d10b      	bne.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008eec:	4ba0      	ldr	r3, [pc, #640]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ef0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ef8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008efc:	4a9c      	ldr	r2, [pc, #624]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008efe:	430b      	orrs	r3, r1
 8008f00:	6593      	str	r3, [r2, #88]	; 0x58
 8008f02:	e003      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f14:	f002 0308 	and.w	r3, r2, #8
 8008f18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008f22:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008f26:	460b      	mov	r3, r1
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	d01e      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f38:	d10c      	bne.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f3e:	3328      	adds	r3, #40	; 0x28
 8008f40:	2102      	movs	r1, #2
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 fe38 	bl	8009bb8 <RCCEx_PLL3_Config>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d002      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008f54:	4b86      	ldr	r3, [pc, #536]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f58:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f64:	4a82      	ldr	r2, [pc, #520]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f66:	430b      	orrs	r3, r1
 8008f68:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f72:	f002 0310 	and.w	r3, r2, #16
 8008f76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f80:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008f84:	460b      	mov	r3, r1
 8008f86:	4313      	orrs	r3, r2
 8008f88:	d01e      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f96:	d10c      	bne.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f9c:	3328      	adds	r3, #40	; 0x28
 8008f9e:	2102      	movs	r1, #2
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 fe09 	bl	8009bb8 <RCCEx_PLL3_Config>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d002      	beq.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008fb2:	4b6f      	ldr	r3, [pc, #444]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fc2:	4a6b      	ldr	r2, [pc, #428]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008fc4:	430b      	orrs	r3, r1
 8008fc6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008fd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008fda:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	d03e      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fe8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008fec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ff0:	d022      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008ff2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ff6:	d81b      	bhi.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d003      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009000:	d00b      	beq.n	800901a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009002:	e015      	b.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009008:	3308      	adds	r3, #8
 800900a:	2100      	movs	r1, #0
 800900c:	4618      	mov	r0, r3
 800900e:	f000 fd21 	bl	8009a54 <RCCEx_PLL2_Config>
 8009012:	4603      	mov	r3, r0
 8009014:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009018:	e00f      	b.n	800903a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800901a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800901e:	3328      	adds	r3, #40	; 0x28
 8009020:	2102      	movs	r1, #2
 8009022:	4618      	mov	r0, r3
 8009024:	f000 fdc8 	bl	8009bb8 <RCCEx_PLL3_Config>
 8009028:	4603      	mov	r3, r0
 800902a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800902e:	e004      	b.n	800903a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009036:	e000      	b.n	800903a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800903a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10b      	bne.n	800905a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009042:	4b4b      	ldr	r3, [pc, #300]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009046:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800904a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800904e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009052:	4a47      	ldr	r2, [pc, #284]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009054:	430b      	orrs	r3, r1
 8009056:	6593      	str	r3, [r2, #88]	; 0x58
 8009058:	e003      	b.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800905a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800905e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800906e:	673b      	str	r3, [r7, #112]	; 0x70
 8009070:	2300      	movs	r3, #0
 8009072:	677b      	str	r3, [r7, #116]	; 0x74
 8009074:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009078:	460b      	mov	r3, r1
 800907a:	4313      	orrs	r3, r2
 800907c:	d03b      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800907e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009086:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800908a:	d01f      	beq.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800908c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009090:	d818      	bhi.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009096:	d003      	beq.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009098:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800909c:	d007      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800909e:	e011      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090a0:	4b33      	ldr	r3, [pc, #204]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80090a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a4:	4a32      	ldr	r2, [pc, #200]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80090a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80090ac:	e00f      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090b2:	3328      	adds	r3, #40	; 0x28
 80090b4:	2101      	movs	r1, #1
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 fd7e 	bl	8009bb8 <RCCEx_PLL3_Config>
 80090bc:	4603      	mov	r3, r0
 80090be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80090c2:	e004      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80090ca:	e000      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80090cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10b      	bne.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80090d6:	4b26      	ldr	r3, [pc, #152]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80090d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090da:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80090de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090e6:	4a22      	ldr	r2, [pc, #136]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80090e8:	430b      	orrs	r3, r1
 80090ea:	6553      	str	r3, [r2, #84]	; 0x54
 80090ec:	e003      	b.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80090f2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80090f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fe:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009102:	66bb      	str	r3, [r7, #104]	; 0x68
 8009104:	2300      	movs	r3, #0
 8009106:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009108:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800910c:	460b      	mov	r3, r1
 800910e:	4313      	orrs	r3, r2
 8009110:	d034      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009118:	2b00      	cmp	r3, #0
 800911a:	d003      	beq.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800911c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009120:	d007      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009122:	e011      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009124:	4b12      	ldr	r3, [pc, #72]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009128:	4a11      	ldr	r2, [pc, #68]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800912a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800912e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009130:	e00e      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009136:	3308      	adds	r3, #8
 8009138:	2102      	movs	r1, #2
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fc8a 	bl	8009a54 <RCCEx_PLL2_Config>
 8009140:	4603      	mov	r3, r0
 8009142:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009146:	e003      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800914e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009150:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009154:	2b00      	cmp	r3, #0
 8009156:	d10d      	bne.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009158:	4b05      	ldr	r3, [pc, #20]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800915a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800915c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009166:	4a02      	ldr	r2, [pc, #8]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009168:	430b      	orrs	r3, r1
 800916a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800916c:	e006      	b.n	800917c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800916e:	bf00      	nop
 8009170:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009174:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009178:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800917c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009184:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009188:	663b      	str	r3, [r7, #96]	; 0x60
 800918a:	2300      	movs	r3, #0
 800918c:	667b      	str	r3, [r7, #100]	; 0x64
 800918e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009192:	460b      	mov	r3, r1
 8009194:	4313      	orrs	r3, r2
 8009196:	d00c      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800919c:	3328      	adds	r3, #40	; 0x28
 800919e:	2102      	movs	r1, #2
 80091a0:	4618      	mov	r0, r3
 80091a2:	f000 fd09 	bl	8009bb8 <RCCEx_PLL3_Config>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80091b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ba:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80091be:	65bb      	str	r3, [r7, #88]	; 0x58
 80091c0:	2300      	movs	r3, #0
 80091c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091c4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80091c8:	460b      	mov	r3, r1
 80091ca:	4313      	orrs	r3, r2
 80091cc:	d036      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80091ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091d8:	d018      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80091da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091de:	d811      	bhi.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80091e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091e4:	d014      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80091e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091ea:	d80b      	bhi.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d011      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80091f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091f4:	d106      	bne.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091f6:	4bb7      	ldr	r3, [pc, #732]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80091f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fa:	4ab6      	ldr	r2, [pc, #728]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80091fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009200:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009202:	e008      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800920a:	e004      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800920c:	bf00      	nop
 800920e:	e002      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009210:	bf00      	nop
 8009212:	e000      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009216:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10a      	bne.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800921e:	4bad      	ldr	r3, [pc, #692]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009222:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800922a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800922c:	4aa9      	ldr	r2, [pc, #676]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800922e:	430b      	orrs	r3, r1
 8009230:	6553      	str	r3, [r2, #84]	; 0x54
 8009232:	e003      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009234:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009238:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800923c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009244:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009248:	653b      	str	r3, [r7, #80]	; 0x50
 800924a:	2300      	movs	r3, #0
 800924c:	657b      	str	r3, [r7, #84]	; 0x54
 800924e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009252:	460b      	mov	r3, r1
 8009254:	4313      	orrs	r3, r2
 8009256:	d009      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009258:	4b9e      	ldr	r3, [pc, #632]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800925a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800925c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009266:	4a9b      	ldr	r2, [pc, #620]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009268:	430b      	orrs	r3, r1
 800926a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800926c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009278:	64bb      	str	r3, [r7, #72]	; 0x48
 800927a:	2300      	movs	r3, #0
 800927c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800927e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009282:	460b      	mov	r3, r1
 8009284:	4313      	orrs	r3, r2
 8009286:	d009      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009288:	4b92      	ldr	r3, [pc, #584]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800928a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800928c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009296:	4a8f      	ldr	r2, [pc, #572]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009298:	430b      	orrs	r3, r1
 800929a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800929c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80092a8:	643b      	str	r3, [r7, #64]	; 0x40
 80092aa:	2300      	movs	r3, #0
 80092ac:	647b      	str	r3, [r7, #68]	; 0x44
 80092ae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80092b2:	460b      	mov	r3, r1
 80092b4:	4313      	orrs	r3, r2
 80092b6:	d00e      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80092b8:	4b86      	ldr	r3, [pc, #536]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	4a85      	ldr	r2, [pc, #532]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80092be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80092c2:	6113      	str	r3, [r2, #16]
 80092c4:	4b83      	ldr	r3, [pc, #524]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80092c6:	6919      	ldr	r1, [r3, #16]
 80092c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80092d0:	4a80      	ldr	r2, [pc, #512]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80092d2:	430b      	orrs	r3, r1
 80092d4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80092d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092de:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80092e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80092e4:	2300      	movs	r3, #0
 80092e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092e8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80092ec:	460b      	mov	r3, r1
 80092ee:	4313      	orrs	r3, r2
 80092f0:	d009      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80092f2:	4b78      	ldr	r3, [pc, #480]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80092f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092f6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80092fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009300:	4a74      	ldr	r2, [pc, #464]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009302:	430b      	orrs	r3, r1
 8009304:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800930a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009312:	633b      	str	r3, [r7, #48]	; 0x30
 8009314:	2300      	movs	r3, #0
 8009316:	637b      	str	r3, [r7, #52]	; 0x34
 8009318:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800931c:	460b      	mov	r3, r1
 800931e:	4313      	orrs	r3, r2
 8009320:	d00a      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009322:	4b6c      	ldr	r3, [pc, #432]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009326:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800932a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800932e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009332:	4a68      	ldr	r2, [pc, #416]	; (80094d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009334:	430b      	orrs	r3, r1
 8009336:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800933c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009340:	2100      	movs	r1, #0
 8009342:	62b9      	str	r1, [r7, #40]	; 0x28
 8009344:	f003 0301 	and.w	r3, r3, #1
 8009348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800934a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800934e:	460b      	mov	r3, r1
 8009350:	4313      	orrs	r3, r2
 8009352:	d011      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009358:	3308      	adds	r3, #8
 800935a:	2100      	movs	r1, #0
 800935c:	4618      	mov	r0, r3
 800935e:	f000 fb79 	bl	8009a54 <RCCEx_PLL2_Config>
 8009362:	4603      	mov	r3, r0
 8009364:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009368:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800936c:	2b00      	cmp	r3, #0
 800936e:	d003      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009370:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009374:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800937c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009380:	2100      	movs	r1, #0
 8009382:	6239      	str	r1, [r7, #32]
 8009384:	f003 0302 	and.w	r3, r3, #2
 8009388:	627b      	str	r3, [r7, #36]	; 0x24
 800938a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800938e:	460b      	mov	r3, r1
 8009390:	4313      	orrs	r3, r2
 8009392:	d011      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009398:	3308      	adds	r3, #8
 800939a:	2101      	movs	r1, #1
 800939c:	4618      	mov	r0, r3
 800939e:	f000 fb59 	bl	8009a54 <RCCEx_PLL2_Config>
 80093a2:	4603      	mov	r3, r0
 80093a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80093a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d003      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80093b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80093b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c0:	2100      	movs	r1, #0
 80093c2:	61b9      	str	r1, [r7, #24]
 80093c4:	f003 0304 	and.w	r3, r3, #4
 80093c8:	61fb      	str	r3, [r7, #28]
 80093ca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80093ce:	460b      	mov	r3, r1
 80093d0:	4313      	orrs	r3, r2
 80093d2:	d011      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80093d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093d8:	3308      	adds	r3, #8
 80093da:	2102      	movs	r1, #2
 80093dc:	4618      	mov	r0, r3
 80093de:	f000 fb39 	bl	8009a54 <RCCEx_PLL2_Config>
 80093e2:	4603      	mov	r3, r0
 80093e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80093e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d003      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80093f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80093f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009400:	2100      	movs	r1, #0
 8009402:	6139      	str	r1, [r7, #16]
 8009404:	f003 0308 	and.w	r3, r3, #8
 8009408:	617b      	str	r3, [r7, #20]
 800940a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800940e:	460b      	mov	r3, r1
 8009410:	4313      	orrs	r3, r2
 8009412:	d011      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009418:	3328      	adds	r3, #40	; 0x28
 800941a:	2100      	movs	r1, #0
 800941c:	4618      	mov	r0, r3
 800941e:	f000 fbcb 	bl	8009bb8 <RCCEx_PLL3_Config>
 8009422:	4603      	mov	r3, r0
 8009424:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8009428:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800942c:	2b00      	cmp	r3, #0
 800942e:	d003      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009430:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009434:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009440:	2100      	movs	r1, #0
 8009442:	60b9      	str	r1, [r7, #8]
 8009444:	f003 0310 	and.w	r3, r3, #16
 8009448:	60fb      	str	r3, [r7, #12]
 800944a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800944e:	460b      	mov	r3, r1
 8009450:	4313      	orrs	r3, r2
 8009452:	d011      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009458:	3328      	adds	r3, #40	; 0x28
 800945a:	2101      	movs	r1, #1
 800945c:	4618      	mov	r0, r3
 800945e:	f000 fbab 	bl	8009bb8 <RCCEx_PLL3_Config>
 8009462:	4603      	mov	r3, r0
 8009464:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009468:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800946c:	2b00      	cmp	r3, #0
 800946e:	d003      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009470:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009474:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800947c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009480:	2100      	movs	r1, #0
 8009482:	6039      	str	r1, [r7, #0]
 8009484:	f003 0320 	and.w	r3, r3, #32
 8009488:	607b      	str	r3, [r7, #4]
 800948a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800948e:	460b      	mov	r3, r1
 8009490:	4313      	orrs	r3, r2
 8009492:	d011      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009498:	3328      	adds	r3, #40	; 0x28
 800949a:	2102      	movs	r1, #2
 800949c:	4618      	mov	r0, r3
 800949e:	f000 fb8b 	bl	8009bb8 <RCCEx_PLL3_Config>
 80094a2:	4603      	mov	r3, r0
 80094a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80094a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d003      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80094b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 80094b8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d101      	bne.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	e000      	b.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80094cc:	46bd      	mov	sp, r7
 80094ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094d2:	bf00      	nop
 80094d4:	58024400 	.word	0x58024400

080094d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80094dc:	f7fe fe00 	bl	80080e0 <HAL_RCC_GetHCLKFreq>
 80094e0:	4602      	mov	r2, r0
 80094e2:	4b06      	ldr	r3, [pc, #24]	; (80094fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	091b      	lsrs	r3, r3, #4
 80094e8:	f003 0307 	and.w	r3, r3, #7
 80094ec:	4904      	ldr	r1, [pc, #16]	; (8009500 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80094ee:	5ccb      	ldrb	r3, [r1, r3]
 80094f0:	f003 031f 	and.w	r3, r3, #31
 80094f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	58024400 	.word	0x58024400
 8009500:	0800dee4 	.word	0x0800dee4

08009504 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009504:	b480      	push	{r7}
 8009506:	b089      	sub	sp, #36	; 0x24
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800950c:	4ba1      	ldr	r3, [pc, #644]	; (8009794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800950e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009510:	f003 0303 	and.w	r3, r3, #3
 8009514:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009516:	4b9f      	ldr	r3, [pc, #636]	; (8009794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951a:	0b1b      	lsrs	r3, r3, #12
 800951c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009520:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009522:	4b9c      	ldr	r3, [pc, #624]	; (8009794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009526:	091b      	lsrs	r3, r3, #4
 8009528:	f003 0301 	and.w	r3, r3, #1
 800952c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800952e:	4b99      	ldr	r3, [pc, #612]	; (8009794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009532:	08db      	lsrs	r3, r3, #3
 8009534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	fb02 f303 	mul.w	r3, r2, r3
 800953e:	ee07 3a90 	vmov	s15, r3
 8009542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009546:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	2b00      	cmp	r3, #0
 800954e:	f000 8111 	beq.w	8009774 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	2b02      	cmp	r3, #2
 8009556:	f000 8083 	beq.w	8009660 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	2b02      	cmp	r3, #2
 800955e:	f200 80a1 	bhi.w	80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d003      	beq.n	8009570 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d056      	beq.n	800961c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800956e:	e099      	b.n	80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009570:	4b88      	ldr	r3, [pc, #544]	; (8009794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 0320 	and.w	r3, r3, #32
 8009578:	2b00      	cmp	r3, #0
 800957a:	d02d      	beq.n	80095d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800957c:	4b85      	ldr	r3, [pc, #532]	; (8009794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	08db      	lsrs	r3, r3, #3
 8009582:	f003 0303 	and.w	r3, r3, #3
 8009586:	4a84      	ldr	r2, [pc, #528]	; (8009798 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009588:	fa22 f303 	lsr.w	r3, r2, r3
 800958c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	ee07 3a90 	vmov	s15, r3
 8009594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	ee07 3a90 	vmov	s15, r3
 800959e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095a6:	4b7b      	ldr	r3, [pc, #492]	; (8009794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ae:	ee07 3a90 	vmov	s15, r3
 80095b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800979c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80095be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80095d6:	e087      	b.n	80096e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	ee07 3a90 	vmov	s15, r3
 80095de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80097a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80095e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ea:	4b6a      	ldr	r3, [pc, #424]	; (8009794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095f2:	ee07 3a90 	vmov	s15, r3
 80095f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80095fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800979c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800960a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800960e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800961a:	e065      	b.n	80096e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	ee07 3a90 	vmov	s15, r3
 8009622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009626:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80097a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800962a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800962e:	4b59      	ldr	r3, [pc, #356]	; (8009794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009636:	ee07 3a90 	vmov	s15, r3
 800963a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800963e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009642:	eddf 5a56 	vldr	s11, [pc, #344]	; 800979c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800964a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800964e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800965a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800965e:	e043      	b.n	80096e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	ee07 3a90 	vmov	s15, r3
 8009666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800966a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80097a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800966e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009672:	4b48      	ldr	r3, [pc, #288]	; (8009794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800967a:	ee07 3a90 	vmov	s15, r3
 800967e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009682:	ed97 6a03 	vldr	s12, [r7, #12]
 8009686:	eddf 5a45 	vldr	s11, [pc, #276]	; 800979c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800968a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800968e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800969a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800969e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096a2:	e021      	b.n	80096e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	ee07 3a90 	vmov	s15, r3
 80096aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80097a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80096b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096b6:	4b37      	ldr	r3, [pc, #220]	; (8009794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096be:	ee07 3a90 	vmov	s15, r3
 80096c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800979c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80096e8:	4b2a      	ldr	r3, [pc, #168]	; (8009794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ec:	0a5b      	lsrs	r3, r3, #9
 80096ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096f2:	ee07 3a90 	vmov	s15, r3
 80096f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009702:	edd7 6a07 	vldr	s13, [r7, #28]
 8009706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800970a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800970e:	ee17 2a90 	vmov	r2, s15
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009716:	4b1f      	ldr	r3, [pc, #124]	; (8009794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971a:	0c1b      	lsrs	r3, r3, #16
 800971c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009720:	ee07 3a90 	vmov	s15, r3
 8009724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800972c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009730:	edd7 6a07 	vldr	s13, [r7, #28]
 8009734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800973c:	ee17 2a90 	vmov	r2, s15
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009744:	4b13      	ldr	r3, [pc, #76]	; (8009794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009748:	0e1b      	lsrs	r3, r3, #24
 800974a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800974e:	ee07 3a90 	vmov	s15, r3
 8009752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800975a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800975e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800976a:	ee17 2a90 	vmov	r2, s15
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009772:	e008      	b.n	8009786 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	609a      	str	r2, [r3, #8]
}
 8009786:	bf00      	nop
 8009788:	3724      	adds	r7, #36	; 0x24
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	58024400 	.word	0x58024400
 8009798:	03d09000 	.word	0x03d09000
 800979c:	46000000 	.word	0x46000000
 80097a0:	4c742400 	.word	0x4c742400
 80097a4:	4a742400 	.word	0x4a742400
 80097a8:	4bbebc20 	.word	0x4bbebc20

080097ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b089      	sub	sp, #36	; 0x24
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097b4:	4ba1      	ldr	r3, [pc, #644]	; (8009a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b8:	f003 0303 	and.w	r3, r3, #3
 80097bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80097be:	4b9f      	ldr	r3, [pc, #636]	; (8009a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c2:	0d1b      	lsrs	r3, r3, #20
 80097c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80097ca:	4b9c      	ldr	r3, [pc, #624]	; (8009a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ce:	0a1b      	lsrs	r3, r3, #8
 80097d0:	f003 0301 	and.w	r3, r3, #1
 80097d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80097d6:	4b99      	ldr	r3, [pc, #612]	; (8009a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097da:	08db      	lsrs	r3, r3, #3
 80097dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	fb02 f303 	mul.w	r3, r2, r3
 80097e6:	ee07 3a90 	vmov	s15, r3
 80097ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f000 8111 	beq.w	8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	f000 8083 	beq.w	8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	2b02      	cmp	r3, #2
 8009806:	f200 80a1 	bhi.w	800994c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d003      	beq.n	8009818 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	2b01      	cmp	r3, #1
 8009814:	d056      	beq.n	80098c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009816:	e099      	b.n	800994c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009818:	4b88      	ldr	r3, [pc, #544]	; (8009a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 0320 	and.w	r3, r3, #32
 8009820:	2b00      	cmp	r3, #0
 8009822:	d02d      	beq.n	8009880 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009824:	4b85      	ldr	r3, [pc, #532]	; (8009a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	08db      	lsrs	r3, r3, #3
 800982a:	f003 0303 	and.w	r3, r3, #3
 800982e:	4a84      	ldr	r2, [pc, #528]	; (8009a40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009830:	fa22 f303 	lsr.w	r3, r2, r3
 8009834:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	ee07 3a90 	vmov	s15, r3
 800983c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	ee07 3a90 	vmov	s15, r3
 8009846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800984a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800984e:	4b7b      	ldr	r3, [pc, #492]	; (8009a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009856:	ee07 3a90 	vmov	s15, r3
 800985a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800985e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009862:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009a44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800986a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800986e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800987a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800987e:	e087      	b.n	8009990 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	ee07 3a90 	vmov	s15, r3
 8009886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800988a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009a48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800988e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009892:	4b6a      	ldr	r3, [pc, #424]	; (8009a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800989a:	ee07 3a90 	vmov	s15, r3
 800989e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80098a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009a44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098c2:	e065      	b.n	8009990 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	ee07 3a90 	vmov	s15, r3
 80098ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009a4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80098d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098d6:	4b59      	ldr	r3, [pc, #356]	; (8009a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098de:	ee07 3a90 	vmov	s15, r3
 80098e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009a44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009906:	e043      	b.n	8009990 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	ee07 3a90 	vmov	s15, r3
 800990e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009912:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009a50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800991a:	4b48      	ldr	r3, [pc, #288]	; (8009a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800991c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009922:	ee07 3a90 	vmov	s15, r3
 8009926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800992a:	ed97 6a03 	vldr	s12, [r7, #12]
 800992e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009a44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800993a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800993e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800994a:	e021      	b.n	8009990 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	ee07 3a90 	vmov	s15, r3
 8009952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009956:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009a4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800995a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800995e:	4b37      	ldr	r3, [pc, #220]	; (8009a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009966:	ee07 3a90 	vmov	s15, r3
 800996a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800996e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009972:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009a44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800997a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800997e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800998e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009990:	4b2a      	ldr	r3, [pc, #168]	; (8009a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009994:	0a5b      	lsrs	r3, r3, #9
 8009996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800999a:	ee07 3a90 	vmov	s15, r3
 800999e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80099ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099b6:	ee17 2a90 	vmov	r2, s15
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80099be:	4b1f      	ldr	r3, [pc, #124]	; (8009a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c2:	0c1b      	lsrs	r3, r3, #16
 80099c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099c8:	ee07 3a90 	vmov	s15, r3
 80099cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80099dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099e4:	ee17 2a90 	vmov	r2, s15
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80099ec:	4b13      	ldr	r3, [pc, #76]	; (8009a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f0:	0e1b      	lsrs	r3, r3, #24
 80099f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099f6:	ee07 3a90 	vmov	s15, r3
 80099fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a06:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a12:	ee17 2a90 	vmov	r2, s15
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009a1a:	e008      	b.n	8009a2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	609a      	str	r2, [r3, #8]
}
 8009a2e:	bf00      	nop
 8009a30:	3724      	adds	r7, #36	; 0x24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	58024400 	.word	0x58024400
 8009a40:	03d09000 	.word	0x03d09000
 8009a44:	46000000 	.word	0x46000000
 8009a48:	4c742400 	.word	0x4c742400
 8009a4c:	4a742400 	.word	0x4a742400
 8009a50:	4bbebc20 	.word	0x4bbebc20

08009a54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a62:	4b53      	ldr	r3, [pc, #332]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a66:	f003 0303 	and.w	r3, r3, #3
 8009a6a:	2b03      	cmp	r3, #3
 8009a6c:	d101      	bne.n	8009a72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e099      	b.n	8009ba6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a72:	4b4f      	ldr	r3, [pc, #316]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a4e      	ldr	r2, [pc, #312]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009a78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a7e:	f7fa fad3 	bl	8004028 <HAL_GetTick>
 8009a82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a84:	e008      	b.n	8009a98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a86:	f7fa facf 	bl	8004028 <HAL_GetTick>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d901      	bls.n	8009a98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a94:	2303      	movs	r3, #3
 8009a96:	e086      	b.n	8009ba6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a98:	4b45      	ldr	r3, [pc, #276]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1f0      	bne.n	8009a86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009aa4:	4b42      	ldr	r3, [pc, #264]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	031b      	lsls	r3, r3, #12
 8009ab2:	493f      	ldr	r1, [pc, #252]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	628b      	str	r3, [r1, #40]	; 0x28
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	3b01      	subs	r3, #1
 8009abe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	025b      	lsls	r3, r3, #9
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	431a      	orrs	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	041b      	lsls	r3, r3, #16
 8009ad6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009ada:	431a      	orrs	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	061b      	lsls	r3, r3, #24
 8009ae4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ae8:	4931      	ldr	r1, [pc, #196]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009aea:	4313      	orrs	r3, r2
 8009aec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009aee:	4b30      	ldr	r3, [pc, #192]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	695b      	ldr	r3, [r3, #20]
 8009afa:	492d      	ldr	r1, [pc, #180]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009afc:	4313      	orrs	r3, r2
 8009afe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009b00:	4b2b      	ldr	r3, [pc, #172]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b04:	f023 0220 	bic.w	r2, r3, #32
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	699b      	ldr	r3, [r3, #24]
 8009b0c:	4928      	ldr	r1, [pc, #160]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009b12:	4b27      	ldr	r3, [pc, #156]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b16:	4a26      	ldr	r2, [pc, #152]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b18:	f023 0310 	bic.w	r3, r3, #16
 8009b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009b1e:	4b24      	ldr	r3, [pc, #144]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b22:	4b24      	ldr	r3, [pc, #144]	; (8009bb4 <RCCEx_PLL2_Config+0x160>)
 8009b24:	4013      	ands	r3, r2
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	69d2      	ldr	r2, [r2, #28]
 8009b2a:	00d2      	lsls	r2, r2, #3
 8009b2c:	4920      	ldr	r1, [pc, #128]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009b32:	4b1f      	ldr	r3, [pc, #124]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b36:	4a1e      	ldr	r2, [pc, #120]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b38:	f043 0310 	orr.w	r3, r3, #16
 8009b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d106      	bne.n	8009b52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009b44:	4b1a      	ldr	r3, [pc, #104]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b48:	4a19      	ldr	r2, [pc, #100]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b50:	e00f      	b.n	8009b72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d106      	bne.n	8009b66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009b58:	4b15      	ldr	r3, [pc, #84]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5c:	4a14      	ldr	r2, [pc, #80]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b64:	e005      	b.n	8009b72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b66:	4b12      	ldr	r3, [pc, #72]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b6a:	4a11      	ldr	r2, [pc, #68]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b72:	4b0f      	ldr	r3, [pc, #60]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a0e      	ldr	r2, [pc, #56]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b7e:	f7fa fa53 	bl	8004028 <HAL_GetTick>
 8009b82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b84:	e008      	b.n	8009b98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b86:	f7fa fa4f 	bl	8004028 <HAL_GetTick>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d901      	bls.n	8009b98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e006      	b.n	8009ba6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b98:	4b05      	ldr	r3, [pc, #20]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d0f0      	beq.n	8009b86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	58024400 	.word	0x58024400
 8009bb4:	ffff0007 	.word	0xffff0007

08009bb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009bc6:	4b53      	ldr	r3, [pc, #332]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bca:	f003 0303 	and.w	r3, r3, #3
 8009bce:	2b03      	cmp	r3, #3
 8009bd0:	d101      	bne.n	8009bd6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e099      	b.n	8009d0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009bd6:	4b4f      	ldr	r3, [pc, #316]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a4e      	ldr	r2, [pc, #312]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009be2:	f7fa fa21 	bl	8004028 <HAL_GetTick>
 8009be6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009be8:	e008      	b.n	8009bfc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009bea:	f7fa fa1d 	bl	8004028 <HAL_GetTick>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	1ad3      	subs	r3, r2, r3
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	d901      	bls.n	8009bfc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	e086      	b.n	8009d0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bfc:	4b45      	ldr	r3, [pc, #276]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1f0      	bne.n	8009bea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009c08:	4b42      	ldr	r3, [pc, #264]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c0c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	051b      	lsls	r3, r3, #20
 8009c16:	493f      	ldr	r1, [pc, #252]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	628b      	str	r3, [r1, #40]	; 0x28
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	3b01      	subs	r3, #1
 8009c22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	025b      	lsls	r3, r3, #9
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	431a      	orrs	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	3b01      	subs	r3, #1
 8009c38:	041b      	lsls	r3, r3, #16
 8009c3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c3e:	431a      	orrs	r2, r3
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	3b01      	subs	r3, #1
 8009c46:	061b      	lsls	r3, r3, #24
 8009c48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c4c:	4931      	ldr	r1, [pc, #196]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c52:	4b30      	ldr	r3, [pc, #192]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	695b      	ldr	r3, [r3, #20]
 8009c5e:	492d      	ldr	r1, [pc, #180]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c60:	4313      	orrs	r3, r2
 8009c62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c64:	4b2b      	ldr	r3, [pc, #172]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	699b      	ldr	r3, [r3, #24]
 8009c70:	4928      	ldr	r1, [pc, #160]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c72:	4313      	orrs	r3, r2
 8009c74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c76:	4b27      	ldr	r3, [pc, #156]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7a:	4a26      	ldr	r2, [pc, #152]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c82:	4b24      	ldr	r3, [pc, #144]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c86:	4b24      	ldr	r3, [pc, #144]	; (8009d18 <RCCEx_PLL3_Config+0x160>)
 8009c88:	4013      	ands	r3, r2
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	69d2      	ldr	r2, [r2, #28]
 8009c8e:	00d2      	lsls	r2, r2, #3
 8009c90:	4920      	ldr	r1, [pc, #128]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c92:	4313      	orrs	r3, r2
 8009c94:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009c96:	4b1f      	ldr	r3, [pc, #124]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9a:	4a1e      	ldr	r2, [pc, #120]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d106      	bne.n	8009cb6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009ca8:	4b1a      	ldr	r3, [pc, #104]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cac:	4a19      	ldr	r2, [pc, #100]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009cae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009cb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009cb4:	e00f      	b.n	8009cd6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d106      	bne.n	8009cca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009cbc:	4b15      	ldr	r3, [pc, #84]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc0:	4a14      	ldr	r2, [pc, #80]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009cc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009cc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009cc8:	e005      	b.n	8009cd6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009cca:	4b12      	ldr	r3, [pc, #72]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cce:	4a11      	ldr	r2, [pc, #68]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009cd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009cd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009cd6:	4b0f      	ldr	r3, [pc, #60]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a0e      	ldr	r2, [pc, #56]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ce2:	f7fa f9a1 	bl	8004028 <HAL_GetTick>
 8009ce6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ce8:	e008      	b.n	8009cfc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009cea:	f7fa f99d 	bl	8004028 <HAL_GetTick>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d901      	bls.n	8009cfc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	e006      	b.n	8009d0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cfc:	4b05      	ldr	r3, [pc, #20]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d0f0      	beq.n	8009cea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	58024400 	.word	0x58024400
 8009d18:	ffff0007 	.word	0xffff0007

08009d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d101      	bne.n	8009d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e049      	b.n	8009dc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d106      	bne.n	8009d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7f9 fe3c 	bl	80039c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	3304      	adds	r3, #4
 8009d58:	4619      	mov	r1, r3
 8009d5a:	4610      	mov	r0, r2
 8009d5c:	f000 feb8 	bl	800aad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2201      	movs	r2, #1
 8009d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2201      	movs	r2, #1
 8009da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
	...

08009dcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d001      	beq.n	8009de4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	e05e      	b.n	8009ea2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2202      	movs	r2, #2
 8009de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68da      	ldr	r2, [r3, #12]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f042 0201 	orr.w	r2, r2, #1
 8009dfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a2b      	ldr	r2, [pc, #172]	; (8009eb0 <HAL_TIM_Base_Start_IT+0xe4>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d02c      	beq.n	8009e60 <HAL_TIM_Base_Start_IT+0x94>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e0e:	d027      	beq.n	8009e60 <HAL_TIM_Base_Start_IT+0x94>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a27      	ldr	r2, [pc, #156]	; (8009eb4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d022      	beq.n	8009e60 <HAL_TIM_Base_Start_IT+0x94>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a26      	ldr	r2, [pc, #152]	; (8009eb8 <HAL_TIM_Base_Start_IT+0xec>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d01d      	beq.n	8009e60 <HAL_TIM_Base_Start_IT+0x94>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a24      	ldr	r2, [pc, #144]	; (8009ebc <HAL_TIM_Base_Start_IT+0xf0>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d018      	beq.n	8009e60 <HAL_TIM_Base_Start_IT+0x94>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a23      	ldr	r2, [pc, #140]	; (8009ec0 <HAL_TIM_Base_Start_IT+0xf4>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d013      	beq.n	8009e60 <HAL_TIM_Base_Start_IT+0x94>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a21      	ldr	r2, [pc, #132]	; (8009ec4 <HAL_TIM_Base_Start_IT+0xf8>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d00e      	beq.n	8009e60 <HAL_TIM_Base_Start_IT+0x94>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a20      	ldr	r2, [pc, #128]	; (8009ec8 <HAL_TIM_Base_Start_IT+0xfc>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d009      	beq.n	8009e60 <HAL_TIM_Base_Start_IT+0x94>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a1e      	ldr	r2, [pc, #120]	; (8009ecc <HAL_TIM_Base_Start_IT+0x100>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d004      	beq.n	8009e60 <HAL_TIM_Base_Start_IT+0x94>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a1d      	ldr	r2, [pc, #116]	; (8009ed0 <HAL_TIM_Base_Start_IT+0x104>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d115      	bne.n	8009e8c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	689a      	ldr	r2, [r3, #8]
 8009e66:	4b1b      	ldr	r3, [pc, #108]	; (8009ed4 <HAL_TIM_Base_Start_IT+0x108>)
 8009e68:	4013      	ands	r3, r2
 8009e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2b06      	cmp	r3, #6
 8009e70:	d015      	beq.n	8009e9e <HAL_TIM_Base_Start_IT+0xd2>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e78:	d011      	beq.n	8009e9e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f042 0201 	orr.w	r2, r2, #1
 8009e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e8a:	e008      	b.n	8009e9e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f042 0201 	orr.w	r2, r2, #1
 8009e9a:	601a      	str	r2, [r3, #0]
 8009e9c:	e000      	b.n	8009ea0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	40010000 	.word	0x40010000
 8009eb4:	40000400 	.word	0x40000400
 8009eb8:	40000800 	.word	0x40000800
 8009ebc:	40000c00 	.word	0x40000c00
 8009ec0:	40010400 	.word	0x40010400
 8009ec4:	40001800 	.word	0x40001800
 8009ec8:	40014000 	.word	0x40014000
 8009ecc:	4000e000 	.word	0x4000e000
 8009ed0:	4000e400 	.word	0x4000e400
 8009ed4:	00010007 	.word	0x00010007

08009ed8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d101      	bne.n	8009eea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e049      	b.n	8009f7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d106      	bne.n	8009f04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f7f9 fd26 	bl	8003950 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2202      	movs	r2, #2
 8009f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	3304      	adds	r3, #4
 8009f14:	4619      	mov	r1, r3
 8009f16:	4610      	mov	r0, r2
 8009f18:	f000 fdda 	bl	800aad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
	...

08009f88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d109      	bne.n	8009fac <HAL_TIM_PWM_Start+0x24>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	bf14      	ite	ne
 8009fa4:	2301      	movne	r3, #1
 8009fa6:	2300      	moveq	r3, #0
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	e03c      	b.n	800a026 <HAL_TIM_PWM_Start+0x9e>
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	2b04      	cmp	r3, #4
 8009fb0:	d109      	bne.n	8009fc6 <HAL_TIM_PWM_Start+0x3e>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	bf14      	ite	ne
 8009fbe:	2301      	movne	r3, #1
 8009fc0:	2300      	moveq	r3, #0
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	e02f      	b.n	800a026 <HAL_TIM_PWM_Start+0x9e>
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	2b08      	cmp	r3, #8
 8009fca:	d109      	bne.n	8009fe0 <HAL_TIM_PWM_Start+0x58>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	bf14      	ite	ne
 8009fd8:	2301      	movne	r3, #1
 8009fda:	2300      	moveq	r3, #0
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	e022      	b.n	800a026 <HAL_TIM_PWM_Start+0x9e>
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	2b0c      	cmp	r3, #12
 8009fe4:	d109      	bne.n	8009ffa <HAL_TIM_PWM_Start+0x72>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	bf14      	ite	ne
 8009ff2:	2301      	movne	r3, #1
 8009ff4:	2300      	moveq	r3, #0
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	e015      	b.n	800a026 <HAL_TIM_PWM_Start+0x9e>
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	2b10      	cmp	r3, #16
 8009ffe:	d109      	bne.n	800a014 <HAL_TIM_PWM_Start+0x8c>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a006:	b2db      	uxtb	r3, r3
 800a008:	2b01      	cmp	r3, #1
 800a00a:	bf14      	ite	ne
 800a00c:	2301      	movne	r3, #1
 800a00e:	2300      	moveq	r3, #0
 800a010:	b2db      	uxtb	r3, r3
 800a012:	e008      	b.n	800a026 <HAL_TIM_PWM_Start+0x9e>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	bf14      	ite	ne
 800a020:	2301      	movne	r3, #1
 800a022:	2300      	moveq	r3, #0
 800a024:	b2db      	uxtb	r3, r3
 800a026:	2b00      	cmp	r3, #0
 800a028:	d001      	beq.n	800a02e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e0ab      	b.n	800a186 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d104      	bne.n	800a03e <HAL_TIM_PWM_Start+0xb6>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2202      	movs	r2, #2
 800a038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a03c:	e023      	b.n	800a086 <HAL_TIM_PWM_Start+0xfe>
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	2b04      	cmp	r3, #4
 800a042:	d104      	bne.n	800a04e <HAL_TIM_PWM_Start+0xc6>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2202      	movs	r2, #2
 800a048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a04c:	e01b      	b.n	800a086 <HAL_TIM_PWM_Start+0xfe>
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	2b08      	cmp	r3, #8
 800a052:	d104      	bne.n	800a05e <HAL_TIM_PWM_Start+0xd6>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2202      	movs	r2, #2
 800a058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a05c:	e013      	b.n	800a086 <HAL_TIM_PWM_Start+0xfe>
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	2b0c      	cmp	r3, #12
 800a062:	d104      	bne.n	800a06e <HAL_TIM_PWM_Start+0xe6>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2202      	movs	r2, #2
 800a068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a06c:	e00b      	b.n	800a086 <HAL_TIM_PWM_Start+0xfe>
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	2b10      	cmp	r3, #16
 800a072:	d104      	bne.n	800a07e <HAL_TIM_PWM_Start+0xf6>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2202      	movs	r2, #2
 800a078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a07c:	e003      	b.n	800a086 <HAL_TIM_PWM_Start+0xfe>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2202      	movs	r2, #2
 800a082:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	2201      	movs	r2, #1
 800a08c:	6839      	ldr	r1, [r7, #0]
 800a08e:	4618      	mov	r0, r3
 800a090:	f001 f938 	bl	800b304 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a3d      	ldr	r2, [pc, #244]	; (800a190 <HAL_TIM_PWM_Start+0x208>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d013      	beq.n	800a0c6 <HAL_TIM_PWM_Start+0x13e>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a3c      	ldr	r2, [pc, #240]	; (800a194 <HAL_TIM_PWM_Start+0x20c>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d00e      	beq.n	800a0c6 <HAL_TIM_PWM_Start+0x13e>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a3a      	ldr	r2, [pc, #232]	; (800a198 <HAL_TIM_PWM_Start+0x210>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d009      	beq.n	800a0c6 <HAL_TIM_PWM_Start+0x13e>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a39      	ldr	r2, [pc, #228]	; (800a19c <HAL_TIM_PWM_Start+0x214>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d004      	beq.n	800a0c6 <HAL_TIM_PWM_Start+0x13e>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a37      	ldr	r2, [pc, #220]	; (800a1a0 <HAL_TIM_PWM_Start+0x218>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d101      	bne.n	800a0ca <HAL_TIM_PWM_Start+0x142>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e000      	b.n	800a0cc <HAL_TIM_PWM_Start+0x144>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d007      	beq.n	800a0e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a0de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a2a      	ldr	r2, [pc, #168]	; (800a190 <HAL_TIM_PWM_Start+0x208>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d02c      	beq.n	800a144 <HAL_TIM_PWM_Start+0x1bc>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0f2:	d027      	beq.n	800a144 <HAL_TIM_PWM_Start+0x1bc>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a2a      	ldr	r2, [pc, #168]	; (800a1a4 <HAL_TIM_PWM_Start+0x21c>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d022      	beq.n	800a144 <HAL_TIM_PWM_Start+0x1bc>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a29      	ldr	r2, [pc, #164]	; (800a1a8 <HAL_TIM_PWM_Start+0x220>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d01d      	beq.n	800a144 <HAL_TIM_PWM_Start+0x1bc>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a27      	ldr	r2, [pc, #156]	; (800a1ac <HAL_TIM_PWM_Start+0x224>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d018      	beq.n	800a144 <HAL_TIM_PWM_Start+0x1bc>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a1f      	ldr	r2, [pc, #124]	; (800a194 <HAL_TIM_PWM_Start+0x20c>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d013      	beq.n	800a144 <HAL_TIM_PWM_Start+0x1bc>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a23      	ldr	r2, [pc, #140]	; (800a1b0 <HAL_TIM_PWM_Start+0x228>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d00e      	beq.n	800a144 <HAL_TIM_PWM_Start+0x1bc>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a1b      	ldr	r2, [pc, #108]	; (800a198 <HAL_TIM_PWM_Start+0x210>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d009      	beq.n	800a144 <HAL_TIM_PWM_Start+0x1bc>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a1f      	ldr	r2, [pc, #124]	; (800a1b4 <HAL_TIM_PWM_Start+0x22c>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d004      	beq.n	800a144 <HAL_TIM_PWM_Start+0x1bc>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a1e      	ldr	r2, [pc, #120]	; (800a1b8 <HAL_TIM_PWM_Start+0x230>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d115      	bne.n	800a170 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	689a      	ldr	r2, [r3, #8]
 800a14a:	4b1c      	ldr	r3, [pc, #112]	; (800a1bc <HAL_TIM_PWM_Start+0x234>)
 800a14c:	4013      	ands	r3, r2
 800a14e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2b06      	cmp	r3, #6
 800a154:	d015      	beq.n	800a182 <HAL_TIM_PWM_Start+0x1fa>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a15c:	d011      	beq.n	800a182 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f042 0201 	orr.w	r2, r2, #1
 800a16c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a16e:	e008      	b.n	800a182 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f042 0201 	orr.w	r2, r2, #1
 800a17e:	601a      	str	r2, [r3, #0]
 800a180:	e000      	b.n	800a184 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a182:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	40010000 	.word	0x40010000
 800a194:	40010400 	.word	0x40010400
 800a198:	40014000 	.word	0x40014000
 800a19c:	40014400 	.word	0x40014400
 800a1a0:	40014800 	.word	0x40014800
 800a1a4:	40000400 	.word	0x40000400
 800a1a8:	40000800 	.word	0x40000800
 800a1ac:	40000c00 	.word	0x40000c00
 800a1b0:	40001800 	.word	0x40001800
 800a1b4:	4000e000 	.word	0x4000e000
 800a1b8:	4000e400 	.word	0x4000e400
 800a1bc:	00010007 	.word	0x00010007

0800a1c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d101      	bne.n	800a1d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e08f      	b.n	800a2f4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d106      	bne.n	800a1ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7f9 faf5 	bl	80037d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2202      	movs	r2, #2
 800a1f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	6899      	ldr	r1, [r3, #8]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	4b3e      	ldr	r3, [pc, #248]	; (800a2fc <HAL_TIM_Encoder_Init+0x13c>)
 800a202:	400b      	ands	r3, r1
 800a204:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	3304      	adds	r3, #4
 800a20e:	4619      	mov	r1, r3
 800a210:	4610      	mov	r0, r2
 800a212:	f000 fc5d 	bl	800aad0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	699b      	ldr	r3, [r3, #24]
 800a224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	6a1b      	ldr	r3, [r3, #32]
 800a22c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	4313      	orrs	r3, r2
 800a236:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a238:	693a      	ldr	r2, [r7, #16]
 800a23a:	4b31      	ldr	r3, [pc, #196]	; (800a300 <HAL_TIM_Encoder_Init+0x140>)
 800a23c:	4013      	ands	r3, r2
 800a23e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	689a      	ldr	r2, [r3, #8]
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	699b      	ldr	r3, [r3, #24]
 800a248:	021b      	lsls	r3, r3, #8
 800a24a:	4313      	orrs	r3, r2
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	4313      	orrs	r3, r2
 800a250:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a252:	693a      	ldr	r2, [r7, #16]
 800a254:	4b2b      	ldr	r3, [pc, #172]	; (800a304 <HAL_TIM_Encoder_Init+0x144>)
 800a256:	4013      	ands	r3, r2
 800a258:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a25a:	693a      	ldr	r2, [r7, #16]
 800a25c:	4b2a      	ldr	r3, [pc, #168]	; (800a308 <HAL_TIM_Encoder_Init+0x148>)
 800a25e:	4013      	ands	r3, r2
 800a260:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	68da      	ldr	r2, [r3, #12]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	69db      	ldr	r3, [r3, #28]
 800a26a:	021b      	lsls	r3, r3, #8
 800a26c:	4313      	orrs	r3, r2
 800a26e:	693a      	ldr	r2, [r7, #16]
 800a270:	4313      	orrs	r3, r2
 800a272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	011a      	lsls	r2, r3, #4
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	031b      	lsls	r3, r3, #12
 800a280:	4313      	orrs	r3, r2
 800a282:	693a      	ldr	r2, [r7, #16]
 800a284:	4313      	orrs	r3, r2
 800a286:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a28e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a296:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	685a      	ldr	r2, [r3, #4]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	695b      	ldr	r3, [r3, #20]
 800a2a0:	011b      	lsls	r3, r3, #4
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	68fa      	ldr	r2, [r7, #12]
 800a2c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3718      	adds	r7, #24
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	fffebff8 	.word	0xfffebff8
 800a300:	fffffcfc 	.word	0xfffffcfc
 800a304:	fffff3f3 	.word	0xfffff3f3
 800a308:	ffff0f0f 	.word	0xffff0f0f

0800a30c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a31c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a324:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a32c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a334:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d110      	bne.n	800a35e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a33c:	7bfb      	ldrb	r3, [r7, #15]
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d102      	bne.n	800a348 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a342:	7b7b      	ldrb	r3, [r7, #13]
 800a344:	2b01      	cmp	r3, #1
 800a346:	d001      	beq.n	800a34c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	e069      	b.n	800a420 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2202      	movs	r2, #2
 800a350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2202      	movs	r2, #2
 800a358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a35c:	e031      	b.n	800a3c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	2b04      	cmp	r3, #4
 800a362:	d110      	bne.n	800a386 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a364:	7bbb      	ldrb	r3, [r7, #14]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d102      	bne.n	800a370 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a36a:	7b3b      	ldrb	r3, [r7, #12]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d001      	beq.n	800a374 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a370:	2301      	movs	r3, #1
 800a372:	e055      	b.n	800a420 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2202      	movs	r2, #2
 800a378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2202      	movs	r2, #2
 800a380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a384:	e01d      	b.n	800a3c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a386:	7bfb      	ldrb	r3, [r7, #15]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d108      	bne.n	800a39e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a38c:	7bbb      	ldrb	r3, [r7, #14]
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d105      	bne.n	800a39e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a392:	7b7b      	ldrb	r3, [r7, #13]
 800a394:	2b01      	cmp	r3, #1
 800a396:	d102      	bne.n	800a39e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a398:	7b3b      	ldrb	r3, [r7, #12]
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d001      	beq.n	800a3a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e03e      	b.n	800a420 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2202      	movs	r2, #2
 800a3a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2202      	movs	r2, #2
 800a3ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2202      	movs	r2, #2
 800a3b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2202      	movs	r2, #2
 800a3be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d003      	beq.n	800a3d0 <HAL_TIM_Encoder_Start+0xc4>
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	2b04      	cmp	r3, #4
 800a3cc:	d008      	beq.n	800a3e0 <HAL_TIM_Encoder_Start+0xd4>
 800a3ce:	e00f      	b.n	800a3f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	2100      	movs	r1, #0
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f000 ff93 	bl	800b304 <TIM_CCxChannelCmd>
      break;
 800a3de:	e016      	b.n	800a40e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	2104      	movs	r1, #4
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f000 ff8b 	bl	800b304 <TIM_CCxChannelCmd>
      break;
 800a3ee:	e00e      	b.n	800a40e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f000 ff83 	bl	800b304 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2201      	movs	r2, #1
 800a404:	2104      	movs	r1, #4
 800a406:	4618      	mov	r0, r3
 800a408:	f000 ff7c 	bl	800b304 <TIM_CCxChannelCmd>
      break;
 800a40c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f042 0201 	orr.w	r2, r2, #1
 800a41c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a41e:	2300      	movs	r3, #0
}
 800a420:	4618      	mov	r0, r3
 800a422:	3710      	adds	r7, #16
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	f003 0302 	and.w	r3, r3, #2
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d122      	bne.n	800a484 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	f003 0302 	and.w	r3, r3, #2
 800a448:	2b02      	cmp	r3, #2
 800a44a:	d11b      	bne.n	800a484 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f06f 0202 	mvn.w	r2, #2
 800a454:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2201      	movs	r2, #1
 800a45a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	699b      	ldr	r3, [r3, #24]
 800a462:	f003 0303 	and.w	r3, r3, #3
 800a466:	2b00      	cmp	r3, #0
 800a468:	d003      	beq.n	800a472 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 fb12 	bl	800aa94 <HAL_TIM_IC_CaptureCallback>
 800a470:	e005      	b.n	800a47e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 fb04 	bl	800aa80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 fb15 	bl	800aaa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	f003 0304 	and.w	r3, r3, #4
 800a48e:	2b04      	cmp	r3, #4
 800a490:	d122      	bne.n	800a4d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	f003 0304 	and.w	r3, r3, #4
 800a49c:	2b04      	cmp	r3, #4
 800a49e:	d11b      	bne.n	800a4d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f06f 0204 	mvn.w	r2, #4
 800a4a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2202      	movs	r2, #2
 800a4ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	699b      	ldr	r3, [r3, #24]
 800a4b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d003      	beq.n	800a4c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 fae8 	bl	800aa94 <HAL_TIM_IC_CaptureCallback>
 800a4c4:	e005      	b.n	800a4d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 fada 	bl	800aa80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 faeb 	bl	800aaa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	f003 0308 	and.w	r3, r3, #8
 800a4e2:	2b08      	cmp	r3, #8
 800a4e4:	d122      	bne.n	800a52c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	f003 0308 	and.w	r3, r3, #8
 800a4f0:	2b08      	cmp	r3, #8
 800a4f2:	d11b      	bne.n	800a52c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f06f 0208 	mvn.w	r2, #8
 800a4fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2204      	movs	r2, #4
 800a502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	69db      	ldr	r3, [r3, #28]
 800a50a:	f003 0303 	and.w	r3, r3, #3
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d003      	beq.n	800a51a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 fabe 	bl	800aa94 <HAL_TIM_IC_CaptureCallback>
 800a518:	e005      	b.n	800a526 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fab0 	bl	800aa80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 fac1 	bl	800aaa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	f003 0310 	and.w	r3, r3, #16
 800a536:	2b10      	cmp	r3, #16
 800a538:	d122      	bne.n	800a580 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	f003 0310 	and.w	r3, r3, #16
 800a544:	2b10      	cmp	r3, #16
 800a546:	d11b      	bne.n	800a580 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f06f 0210 	mvn.w	r2, #16
 800a550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2208      	movs	r2, #8
 800a556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	69db      	ldr	r3, [r3, #28]
 800a55e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a562:	2b00      	cmp	r3, #0
 800a564:	d003      	beq.n	800a56e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 fa94 	bl	800aa94 <HAL_TIM_IC_CaptureCallback>
 800a56c:	e005      	b.n	800a57a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 fa86 	bl	800aa80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 fa97 	bl	800aaa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	f003 0301 	and.w	r3, r3, #1
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d10e      	bne.n	800a5ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	f003 0301 	and.w	r3, r3, #1
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d107      	bne.n	800a5ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f06f 0201 	mvn.w	r2, #1
 800a5a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f7f6 fc64 	bl	8000e74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5b6:	2b80      	cmp	r3, #128	; 0x80
 800a5b8:	d10e      	bne.n	800a5d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5c4:	2b80      	cmp	r3, #128	; 0x80
 800a5c6:	d107      	bne.n	800a5d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a5d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f001 f802 	bl	800b5dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5e6:	d10e      	bne.n	800a606 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5f2:	2b80      	cmp	r3, #128	; 0x80
 800a5f4:	d107      	bne.n	800a606 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a5fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 fff5 	bl	800b5f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a610:	2b40      	cmp	r3, #64	; 0x40
 800a612:	d10e      	bne.n	800a632 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a61e:	2b40      	cmp	r3, #64	; 0x40
 800a620:	d107      	bne.n	800a632 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a62a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 fa45 	bl	800aabc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	f003 0320 	and.w	r3, r3, #32
 800a63c:	2b20      	cmp	r3, #32
 800a63e:	d10e      	bne.n	800a65e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	f003 0320 	and.w	r3, r3, #32
 800a64a:	2b20      	cmp	r3, #32
 800a64c:	d107      	bne.n	800a65e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f06f 0220 	mvn.w	r2, #32
 800a656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 ffb5 	bl	800b5c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a65e:	bf00      	nop
 800a660:	3708      	adds	r7, #8
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
	...

0800a668 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b086      	sub	sp, #24
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a674:	2300      	movs	r3, #0
 800a676:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d101      	bne.n	800a686 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a682:	2302      	movs	r3, #2
 800a684:	e0ff      	b.n	800a886 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2201      	movs	r2, #1
 800a68a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2b14      	cmp	r3, #20
 800a692:	f200 80f0 	bhi.w	800a876 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a696:	a201      	add	r2, pc, #4	; (adr r2, 800a69c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a69c:	0800a6f1 	.word	0x0800a6f1
 800a6a0:	0800a877 	.word	0x0800a877
 800a6a4:	0800a877 	.word	0x0800a877
 800a6a8:	0800a877 	.word	0x0800a877
 800a6ac:	0800a731 	.word	0x0800a731
 800a6b0:	0800a877 	.word	0x0800a877
 800a6b4:	0800a877 	.word	0x0800a877
 800a6b8:	0800a877 	.word	0x0800a877
 800a6bc:	0800a773 	.word	0x0800a773
 800a6c0:	0800a877 	.word	0x0800a877
 800a6c4:	0800a877 	.word	0x0800a877
 800a6c8:	0800a877 	.word	0x0800a877
 800a6cc:	0800a7b3 	.word	0x0800a7b3
 800a6d0:	0800a877 	.word	0x0800a877
 800a6d4:	0800a877 	.word	0x0800a877
 800a6d8:	0800a877 	.word	0x0800a877
 800a6dc:	0800a7f5 	.word	0x0800a7f5
 800a6e0:	0800a877 	.word	0x0800a877
 800a6e4:	0800a877 	.word	0x0800a877
 800a6e8:	0800a877 	.word	0x0800a877
 800a6ec:	0800a835 	.word	0x0800a835
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68b9      	ldr	r1, [r7, #8]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 fa90 	bl	800ac1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	699a      	ldr	r2, [r3, #24]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f042 0208 	orr.w	r2, r2, #8
 800a70a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	699a      	ldr	r2, [r3, #24]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f022 0204 	bic.w	r2, r2, #4
 800a71a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	6999      	ldr	r1, [r3, #24]
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	691a      	ldr	r2, [r3, #16]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	430a      	orrs	r2, r1
 800a72c:	619a      	str	r2, [r3, #24]
      break;
 800a72e:	e0a5      	b.n	800a87c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	68b9      	ldr	r1, [r7, #8]
 800a736:	4618      	mov	r0, r3
 800a738:	f000 fb00 	bl	800ad3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	699a      	ldr	r2, [r3, #24]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a74a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	699a      	ldr	r2, [r3, #24]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a75a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	6999      	ldr	r1, [r3, #24]
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	021a      	lsls	r2, r3, #8
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	430a      	orrs	r2, r1
 800a76e:	619a      	str	r2, [r3, #24]
      break;
 800a770:	e084      	b.n	800a87c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	68b9      	ldr	r1, [r7, #8]
 800a778:	4618      	mov	r0, r3
 800a77a:	f000 fb69 	bl	800ae50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	69da      	ldr	r2, [r3, #28]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f042 0208 	orr.w	r2, r2, #8
 800a78c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	69da      	ldr	r2, [r3, #28]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f022 0204 	bic.w	r2, r2, #4
 800a79c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	69d9      	ldr	r1, [r3, #28]
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	691a      	ldr	r2, [r3, #16]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	430a      	orrs	r2, r1
 800a7ae:	61da      	str	r2, [r3, #28]
      break;
 800a7b0:	e064      	b.n	800a87c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68b9      	ldr	r1, [r7, #8]
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f000 fbd1 	bl	800af60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	69da      	ldr	r2, [r3, #28]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	69da      	ldr	r2, [r3, #28]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	69d9      	ldr	r1, [r3, #28]
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	691b      	ldr	r3, [r3, #16]
 800a7e8:	021a      	lsls	r2, r3, #8
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	430a      	orrs	r2, r1
 800a7f0:	61da      	str	r2, [r3, #28]
      break;
 800a7f2:	e043      	b.n	800a87c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	68b9      	ldr	r1, [r7, #8]
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f000 fc1a 	bl	800b034 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f042 0208 	orr.w	r2, r2, #8
 800a80e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f022 0204 	bic.w	r2, r2, #4
 800a81e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	691a      	ldr	r2, [r3, #16]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	430a      	orrs	r2, r1
 800a830:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a832:	e023      	b.n	800a87c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68b9      	ldr	r1, [r7, #8]
 800a83a:	4618      	mov	r0, r3
 800a83c:	f000 fc5e 	bl	800b0fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a84e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a85e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	021a      	lsls	r2, r3, #8
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	430a      	orrs	r2, r1
 800a872:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a874:	e002      	b.n	800a87c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a876:	2301      	movs	r3, #1
 800a878:	75fb      	strb	r3, [r7, #23]
      break;
 800a87a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2200      	movs	r2, #0
 800a880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a884:	7dfb      	ldrb	r3, [r7, #23]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3718      	adds	r7, #24
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop

0800a890 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a89a:	2300      	movs	r3, #0
 800a89c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d101      	bne.n	800a8ac <HAL_TIM_ConfigClockSource+0x1c>
 800a8a8:	2302      	movs	r3, #2
 800a8aa:	e0dc      	b.n	800aa66 <HAL_TIM_ConfigClockSource+0x1d6>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	4b6a      	ldr	r3, [pc, #424]	; (800aa70 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a8c8:	4013      	ands	r3, r2
 800a8ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a8d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	68ba      	ldr	r2, [r7, #8]
 800a8da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a64      	ldr	r2, [pc, #400]	; (800aa74 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	f000 80a9 	beq.w	800aa3a <HAL_TIM_ConfigClockSource+0x1aa>
 800a8e8:	4a62      	ldr	r2, [pc, #392]	; (800aa74 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	f200 80ae 	bhi.w	800aa4c <HAL_TIM_ConfigClockSource+0x1bc>
 800a8f0:	4a61      	ldr	r2, [pc, #388]	; (800aa78 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	f000 80a1 	beq.w	800aa3a <HAL_TIM_ConfigClockSource+0x1aa>
 800a8f8:	4a5f      	ldr	r2, [pc, #380]	; (800aa78 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	f200 80a6 	bhi.w	800aa4c <HAL_TIM_ConfigClockSource+0x1bc>
 800a900:	4a5e      	ldr	r2, [pc, #376]	; (800aa7c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a902:	4293      	cmp	r3, r2
 800a904:	f000 8099 	beq.w	800aa3a <HAL_TIM_ConfigClockSource+0x1aa>
 800a908:	4a5c      	ldr	r2, [pc, #368]	; (800aa7c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	f200 809e 	bhi.w	800aa4c <HAL_TIM_ConfigClockSource+0x1bc>
 800a910:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a914:	f000 8091 	beq.w	800aa3a <HAL_TIM_ConfigClockSource+0x1aa>
 800a918:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a91c:	f200 8096 	bhi.w	800aa4c <HAL_TIM_ConfigClockSource+0x1bc>
 800a920:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a924:	f000 8089 	beq.w	800aa3a <HAL_TIM_ConfigClockSource+0x1aa>
 800a928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a92c:	f200 808e 	bhi.w	800aa4c <HAL_TIM_ConfigClockSource+0x1bc>
 800a930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a934:	d03e      	beq.n	800a9b4 <HAL_TIM_ConfigClockSource+0x124>
 800a936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a93a:	f200 8087 	bhi.w	800aa4c <HAL_TIM_ConfigClockSource+0x1bc>
 800a93e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a942:	f000 8086 	beq.w	800aa52 <HAL_TIM_ConfigClockSource+0x1c2>
 800a946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a94a:	d87f      	bhi.n	800aa4c <HAL_TIM_ConfigClockSource+0x1bc>
 800a94c:	2b70      	cmp	r3, #112	; 0x70
 800a94e:	d01a      	beq.n	800a986 <HAL_TIM_ConfigClockSource+0xf6>
 800a950:	2b70      	cmp	r3, #112	; 0x70
 800a952:	d87b      	bhi.n	800aa4c <HAL_TIM_ConfigClockSource+0x1bc>
 800a954:	2b60      	cmp	r3, #96	; 0x60
 800a956:	d050      	beq.n	800a9fa <HAL_TIM_ConfigClockSource+0x16a>
 800a958:	2b60      	cmp	r3, #96	; 0x60
 800a95a:	d877      	bhi.n	800aa4c <HAL_TIM_ConfigClockSource+0x1bc>
 800a95c:	2b50      	cmp	r3, #80	; 0x50
 800a95e:	d03c      	beq.n	800a9da <HAL_TIM_ConfigClockSource+0x14a>
 800a960:	2b50      	cmp	r3, #80	; 0x50
 800a962:	d873      	bhi.n	800aa4c <HAL_TIM_ConfigClockSource+0x1bc>
 800a964:	2b40      	cmp	r3, #64	; 0x40
 800a966:	d058      	beq.n	800aa1a <HAL_TIM_ConfigClockSource+0x18a>
 800a968:	2b40      	cmp	r3, #64	; 0x40
 800a96a:	d86f      	bhi.n	800aa4c <HAL_TIM_ConfigClockSource+0x1bc>
 800a96c:	2b30      	cmp	r3, #48	; 0x30
 800a96e:	d064      	beq.n	800aa3a <HAL_TIM_ConfigClockSource+0x1aa>
 800a970:	2b30      	cmp	r3, #48	; 0x30
 800a972:	d86b      	bhi.n	800aa4c <HAL_TIM_ConfigClockSource+0x1bc>
 800a974:	2b20      	cmp	r3, #32
 800a976:	d060      	beq.n	800aa3a <HAL_TIM_ConfigClockSource+0x1aa>
 800a978:	2b20      	cmp	r3, #32
 800a97a:	d867      	bhi.n	800aa4c <HAL_TIM_ConfigClockSource+0x1bc>
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d05c      	beq.n	800aa3a <HAL_TIM_ConfigClockSource+0x1aa>
 800a980:	2b10      	cmp	r3, #16
 800a982:	d05a      	beq.n	800aa3a <HAL_TIM_ConfigClockSource+0x1aa>
 800a984:	e062      	b.n	800aa4c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6818      	ldr	r0, [r3, #0]
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	6899      	ldr	r1, [r3, #8]
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	685a      	ldr	r2, [r3, #4]
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	f000 fc95 	bl	800b2c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a9a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68ba      	ldr	r2, [r7, #8]
 800a9b0:	609a      	str	r2, [r3, #8]
      break;
 800a9b2:	e04f      	b.n	800aa54 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6818      	ldr	r0, [r3, #0]
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	6899      	ldr	r1, [r3, #8]
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	685a      	ldr	r2, [r3, #4]
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	f000 fc7e 	bl	800b2c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	689a      	ldr	r2, [r3, #8]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9d6:	609a      	str	r2, [r3, #8]
      break;
 800a9d8:	e03c      	b.n	800aa54 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6818      	ldr	r0, [r3, #0]
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	6859      	ldr	r1, [r3, #4]
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	f000 fbee 	bl	800b1c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2150      	movs	r1, #80	; 0x50
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f000 fc48 	bl	800b288 <TIM_ITRx_SetConfig>
      break;
 800a9f8:	e02c      	b.n	800aa54 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6818      	ldr	r0, [r3, #0]
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	6859      	ldr	r1, [r3, #4]
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	461a      	mov	r2, r3
 800aa08:	f000 fc0d 	bl	800b226 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2160      	movs	r1, #96	; 0x60
 800aa12:	4618      	mov	r0, r3
 800aa14:	f000 fc38 	bl	800b288 <TIM_ITRx_SetConfig>
      break;
 800aa18:	e01c      	b.n	800aa54 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6818      	ldr	r0, [r3, #0]
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	6859      	ldr	r1, [r3, #4]
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	461a      	mov	r2, r3
 800aa28:	f000 fbce 	bl	800b1c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2140      	movs	r1, #64	; 0x40
 800aa32:	4618      	mov	r0, r3
 800aa34:	f000 fc28 	bl	800b288 <TIM_ITRx_SetConfig>
      break;
 800aa38:	e00c      	b.n	800aa54 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4619      	mov	r1, r3
 800aa44:	4610      	mov	r0, r2
 800aa46:	f000 fc1f 	bl	800b288 <TIM_ITRx_SetConfig>
      break;
 800aa4a:	e003      	b.n	800aa54 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	73fb      	strb	r3, [r7, #15]
      break;
 800aa50:	e000      	b.n	800aa54 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800aa52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa64:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	ffceff88 	.word	0xffceff88
 800aa74:	00100040 	.word	0x00100040
 800aa78:	00100030 	.word	0x00100030
 800aa7c:	00100020 	.word	0x00100020

0800aa80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aab0:	bf00      	nop
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aac4:	bf00      	nop
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4a44      	ldr	r2, [pc, #272]	; (800abf4 <TIM_Base_SetConfig+0x124>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d013      	beq.n	800ab10 <TIM_Base_SetConfig+0x40>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaee:	d00f      	beq.n	800ab10 <TIM_Base_SetConfig+0x40>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a41      	ldr	r2, [pc, #260]	; (800abf8 <TIM_Base_SetConfig+0x128>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d00b      	beq.n	800ab10 <TIM_Base_SetConfig+0x40>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a40      	ldr	r2, [pc, #256]	; (800abfc <TIM_Base_SetConfig+0x12c>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d007      	beq.n	800ab10 <TIM_Base_SetConfig+0x40>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a3f      	ldr	r2, [pc, #252]	; (800ac00 <TIM_Base_SetConfig+0x130>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d003      	beq.n	800ab10 <TIM_Base_SetConfig+0x40>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a3e      	ldr	r2, [pc, #248]	; (800ac04 <TIM_Base_SetConfig+0x134>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d108      	bne.n	800ab22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	4a33      	ldr	r2, [pc, #204]	; (800abf4 <TIM_Base_SetConfig+0x124>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d027      	beq.n	800ab7a <TIM_Base_SetConfig+0xaa>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab30:	d023      	beq.n	800ab7a <TIM_Base_SetConfig+0xaa>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a30      	ldr	r2, [pc, #192]	; (800abf8 <TIM_Base_SetConfig+0x128>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d01f      	beq.n	800ab7a <TIM_Base_SetConfig+0xaa>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a2f      	ldr	r2, [pc, #188]	; (800abfc <TIM_Base_SetConfig+0x12c>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d01b      	beq.n	800ab7a <TIM_Base_SetConfig+0xaa>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a2e      	ldr	r2, [pc, #184]	; (800ac00 <TIM_Base_SetConfig+0x130>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d017      	beq.n	800ab7a <TIM_Base_SetConfig+0xaa>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a2d      	ldr	r2, [pc, #180]	; (800ac04 <TIM_Base_SetConfig+0x134>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d013      	beq.n	800ab7a <TIM_Base_SetConfig+0xaa>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a2c      	ldr	r2, [pc, #176]	; (800ac08 <TIM_Base_SetConfig+0x138>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d00f      	beq.n	800ab7a <TIM_Base_SetConfig+0xaa>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a2b      	ldr	r2, [pc, #172]	; (800ac0c <TIM_Base_SetConfig+0x13c>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d00b      	beq.n	800ab7a <TIM_Base_SetConfig+0xaa>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a2a      	ldr	r2, [pc, #168]	; (800ac10 <TIM_Base_SetConfig+0x140>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d007      	beq.n	800ab7a <TIM_Base_SetConfig+0xaa>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4a29      	ldr	r2, [pc, #164]	; (800ac14 <TIM_Base_SetConfig+0x144>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d003      	beq.n	800ab7a <TIM_Base_SetConfig+0xaa>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4a28      	ldr	r2, [pc, #160]	; (800ac18 <TIM_Base_SetConfig+0x148>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d108      	bne.n	800ab8c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	695b      	ldr	r3, [r3, #20]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	689a      	ldr	r2, [r3, #8]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4a10      	ldr	r2, [pc, #64]	; (800abf4 <TIM_Base_SetConfig+0x124>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d00f      	beq.n	800abd8 <TIM_Base_SetConfig+0x108>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a12      	ldr	r2, [pc, #72]	; (800ac04 <TIM_Base_SetConfig+0x134>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d00b      	beq.n	800abd8 <TIM_Base_SetConfig+0x108>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a11      	ldr	r2, [pc, #68]	; (800ac08 <TIM_Base_SetConfig+0x138>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d007      	beq.n	800abd8 <TIM_Base_SetConfig+0x108>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4a10      	ldr	r2, [pc, #64]	; (800ac0c <TIM_Base_SetConfig+0x13c>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d003      	beq.n	800abd8 <TIM_Base_SetConfig+0x108>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4a0f      	ldr	r2, [pc, #60]	; (800ac10 <TIM_Base_SetConfig+0x140>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d103      	bne.n	800abe0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	691a      	ldr	r2, [r3, #16]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	615a      	str	r2, [r3, #20]
}
 800abe6:	bf00      	nop
 800abe8:	3714      	adds	r7, #20
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	40010000 	.word	0x40010000
 800abf8:	40000400 	.word	0x40000400
 800abfc:	40000800 	.word	0x40000800
 800ac00:	40000c00 	.word	0x40000c00
 800ac04:	40010400 	.word	0x40010400
 800ac08:	40014000 	.word	0x40014000
 800ac0c:	40014400 	.word	0x40014400
 800ac10:	40014800 	.word	0x40014800
 800ac14:	4000e000 	.word	0x4000e000
 800ac18:	4000e400 	.word	0x4000e400

0800ac1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b087      	sub	sp, #28
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a1b      	ldr	r3, [r3, #32]
 800ac2a:	f023 0201 	bic.w	r2, r3, #1
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a1b      	ldr	r3, [r3, #32]
 800ac36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	699b      	ldr	r3, [r3, #24]
 800ac42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	4b37      	ldr	r3, [pc, #220]	; (800ad24 <TIM_OC1_SetConfig+0x108>)
 800ac48:	4013      	ands	r3, r2
 800ac4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f023 0303 	bic.w	r3, r3, #3
 800ac52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	f023 0302 	bic.w	r3, r3, #2
 800ac64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4a2d      	ldr	r2, [pc, #180]	; (800ad28 <TIM_OC1_SetConfig+0x10c>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d00f      	beq.n	800ac98 <TIM_OC1_SetConfig+0x7c>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4a2c      	ldr	r2, [pc, #176]	; (800ad2c <TIM_OC1_SetConfig+0x110>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d00b      	beq.n	800ac98 <TIM_OC1_SetConfig+0x7c>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4a2b      	ldr	r2, [pc, #172]	; (800ad30 <TIM_OC1_SetConfig+0x114>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d007      	beq.n	800ac98 <TIM_OC1_SetConfig+0x7c>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a2a      	ldr	r2, [pc, #168]	; (800ad34 <TIM_OC1_SetConfig+0x118>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d003      	beq.n	800ac98 <TIM_OC1_SetConfig+0x7c>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a29      	ldr	r2, [pc, #164]	; (800ad38 <TIM_OC1_SetConfig+0x11c>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d10c      	bne.n	800acb2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	f023 0308 	bic.w	r3, r3, #8
 800ac9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	697a      	ldr	r2, [r7, #20]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	f023 0304 	bic.w	r3, r3, #4
 800acb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a1c      	ldr	r2, [pc, #112]	; (800ad28 <TIM_OC1_SetConfig+0x10c>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d00f      	beq.n	800acda <TIM_OC1_SetConfig+0xbe>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a1b      	ldr	r2, [pc, #108]	; (800ad2c <TIM_OC1_SetConfig+0x110>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d00b      	beq.n	800acda <TIM_OC1_SetConfig+0xbe>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a1a      	ldr	r2, [pc, #104]	; (800ad30 <TIM_OC1_SetConfig+0x114>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d007      	beq.n	800acda <TIM_OC1_SetConfig+0xbe>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a19      	ldr	r2, [pc, #100]	; (800ad34 <TIM_OC1_SetConfig+0x118>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d003      	beq.n	800acda <TIM_OC1_SetConfig+0xbe>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a18      	ldr	r2, [pc, #96]	; (800ad38 <TIM_OC1_SetConfig+0x11c>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d111      	bne.n	800acfe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ace0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ace8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	695b      	ldr	r3, [r3, #20]
 800acee:	693a      	ldr	r2, [r7, #16]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	699b      	ldr	r3, [r3, #24]
 800acf8:	693a      	ldr	r2, [r7, #16]
 800acfa:	4313      	orrs	r3, r2
 800acfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	693a      	ldr	r2, [r7, #16]
 800ad02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	697a      	ldr	r2, [r7, #20]
 800ad16:	621a      	str	r2, [r3, #32]
}
 800ad18:	bf00      	nop
 800ad1a:	371c      	adds	r7, #28
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr
 800ad24:	fffeff8f 	.word	0xfffeff8f
 800ad28:	40010000 	.word	0x40010000
 800ad2c:	40010400 	.word	0x40010400
 800ad30:	40014000 	.word	0x40014000
 800ad34:	40014400 	.word	0x40014400
 800ad38:	40014800 	.word	0x40014800

0800ad3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b087      	sub	sp, #28
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a1b      	ldr	r3, [r3, #32]
 800ad4a:	f023 0210 	bic.w	r2, r3, #16
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6a1b      	ldr	r3, [r3, #32]
 800ad56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	699b      	ldr	r3, [r3, #24]
 800ad62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	4b34      	ldr	r3, [pc, #208]	; (800ae38 <TIM_OC2_SetConfig+0xfc>)
 800ad68:	4013      	ands	r3, r2
 800ad6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	021b      	lsls	r3, r3, #8
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	f023 0320 	bic.w	r3, r3, #32
 800ad86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	011b      	lsls	r3, r3, #4
 800ad8e:	697a      	ldr	r2, [r7, #20]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	4a29      	ldr	r2, [pc, #164]	; (800ae3c <TIM_OC2_SetConfig+0x100>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d003      	beq.n	800ada4 <TIM_OC2_SetConfig+0x68>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4a28      	ldr	r2, [pc, #160]	; (800ae40 <TIM_OC2_SetConfig+0x104>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d10d      	bne.n	800adc0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800adaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	011b      	lsls	r3, r3, #4
 800adb2:	697a      	ldr	r2, [r7, #20]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4a1e      	ldr	r2, [pc, #120]	; (800ae3c <TIM_OC2_SetConfig+0x100>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d00f      	beq.n	800ade8 <TIM_OC2_SetConfig+0xac>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4a1d      	ldr	r2, [pc, #116]	; (800ae40 <TIM_OC2_SetConfig+0x104>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d00b      	beq.n	800ade8 <TIM_OC2_SetConfig+0xac>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4a1c      	ldr	r2, [pc, #112]	; (800ae44 <TIM_OC2_SetConfig+0x108>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d007      	beq.n	800ade8 <TIM_OC2_SetConfig+0xac>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	4a1b      	ldr	r2, [pc, #108]	; (800ae48 <TIM_OC2_SetConfig+0x10c>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d003      	beq.n	800ade8 <TIM_OC2_SetConfig+0xac>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a1a      	ldr	r2, [pc, #104]	; (800ae4c <TIM_OC2_SetConfig+0x110>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d113      	bne.n	800ae10 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800adee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800adf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	695b      	ldr	r3, [r3, #20]
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	4313      	orrs	r3, r2
 800ae02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	699b      	ldr	r3, [r3, #24]
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	693a      	ldr	r2, [r7, #16]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	693a      	ldr	r2, [r7, #16]
 800ae14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	685a      	ldr	r2, [r3, #4]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	697a      	ldr	r2, [r7, #20]
 800ae28:	621a      	str	r2, [r3, #32]
}
 800ae2a:	bf00      	nop
 800ae2c:	371c      	adds	r7, #28
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	feff8fff 	.word	0xfeff8fff
 800ae3c:	40010000 	.word	0x40010000
 800ae40:	40010400 	.word	0x40010400
 800ae44:	40014000 	.word	0x40014000
 800ae48:	40014400 	.word	0x40014400
 800ae4c:	40014800 	.word	0x40014800

0800ae50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b087      	sub	sp, #28
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a1b      	ldr	r3, [r3, #32]
 800ae5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6a1b      	ldr	r3, [r3, #32]
 800ae6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	69db      	ldr	r3, [r3, #28]
 800ae76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	4b33      	ldr	r3, [pc, #204]	; (800af48 <TIM_OC3_SetConfig+0xf8>)
 800ae7c:	4013      	ands	r3, r2
 800ae7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f023 0303 	bic.w	r3, r3, #3
 800ae86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	021b      	lsls	r3, r3, #8
 800aea0:	697a      	ldr	r2, [r7, #20]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a28      	ldr	r2, [pc, #160]	; (800af4c <TIM_OC3_SetConfig+0xfc>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d003      	beq.n	800aeb6 <TIM_OC3_SetConfig+0x66>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a27      	ldr	r2, [pc, #156]	; (800af50 <TIM_OC3_SetConfig+0x100>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d10d      	bne.n	800aed2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	021b      	lsls	r3, r3, #8
 800aec4:	697a      	ldr	r2, [r7, #20]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	4a1d      	ldr	r2, [pc, #116]	; (800af4c <TIM_OC3_SetConfig+0xfc>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d00f      	beq.n	800aefa <TIM_OC3_SetConfig+0xaa>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	4a1c      	ldr	r2, [pc, #112]	; (800af50 <TIM_OC3_SetConfig+0x100>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d00b      	beq.n	800aefa <TIM_OC3_SetConfig+0xaa>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4a1b      	ldr	r2, [pc, #108]	; (800af54 <TIM_OC3_SetConfig+0x104>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d007      	beq.n	800aefa <TIM_OC3_SetConfig+0xaa>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4a1a      	ldr	r2, [pc, #104]	; (800af58 <TIM_OC3_SetConfig+0x108>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d003      	beq.n	800aefa <TIM_OC3_SetConfig+0xaa>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4a19      	ldr	r2, [pc, #100]	; (800af5c <TIM_OC3_SetConfig+0x10c>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d113      	bne.n	800af22 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	695b      	ldr	r3, [r3, #20]
 800af0e:	011b      	lsls	r3, r3, #4
 800af10:	693a      	ldr	r2, [r7, #16]
 800af12:	4313      	orrs	r3, r2
 800af14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	011b      	lsls	r3, r3, #4
 800af1c:	693a      	ldr	r2, [r7, #16]
 800af1e:	4313      	orrs	r3, r2
 800af20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	693a      	ldr	r2, [r7, #16]
 800af26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	68fa      	ldr	r2, [r7, #12]
 800af2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	685a      	ldr	r2, [r3, #4]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	697a      	ldr	r2, [r7, #20]
 800af3a:	621a      	str	r2, [r3, #32]
}
 800af3c:	bf00      	nop
 800af3e:	371c      	adds	r7, #28
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr
 800af48:	fffeff8f 	.word	0xfffeff8f
 800af4c:	40010000 	.word	0x40010000
 800af50:	40010400 	.word	0x40010400
 800af54:	40014000 	.word	0x40014000
 800af58:	40014400 	.word	0x40014400
 800af5c:	40014800 	.word	0x40014800

0800af60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af60:	b480      	push	{r7}
 800af62:	b087      	sub	sp, #28
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6a1b      	ldr	r3, [r3, #32]
 800af6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	69db      	ldr	r3, [r3, #28]
 800af86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	4b24      	ldr	r3, [pc, #144]	; (800b01c <TIM_OC4_SetConfig+0xbc>)
 800af8c:	4013      	ands	r3, r2
 800af8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	021b      	lsls	r3, r3, #8
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	4313      	orrs	r3, r2
 800afa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800afaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	031b      	lsls	r3, r3, #12
 800afb2:	693a      	ldr	r2, [r7, #16]
 800afb4:	4313      	orrs	r3, r2
 800afb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a19      	ldr	r2, [pc, #100]	; (800b020 <TIM_OC4_SetConfig+0xc0>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d00f      	beq.n	800afe0 <TIM_OC4_SetConfig+0x80>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	4a18      	ldr	r2, [pc, #96]	; (800b024 <TIM_OC4_SetConfig+0xc4>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d00b      	beq.n	800afe0 <TIM_OC4_SetConfig+0x80>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	4a17      	ldr	r2, [pc, #92]	; (800b028 <TIM_OC4_SetConfig+0xc8>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d007      	beq.n	800afe0 <TIM_OC4_SetConfig+0x80>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	4a16      	ldr	r2, [pc, #88]	; (800b02c <TIM_OC4_SetConfig+0xcc>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d003      	beq.n	800afe0 <TIM_OC4_SetConfig+0x80>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4a15      	ldr	r2, [pc, #84]	; (800b030 <TIM_OC4_SetConfig+0xd0>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d109      	bne.n	800aff4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afe6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	695b      	ldr	r3, [r3, #20]
 800afec:	019b      	lsls	r3, r3, #6
 800afee:	697a      	ldr	r2, [r7, #20]
 800aff0:	4313      	orrs	r3, r2
 800aff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	697a      	ldr	r2, [r7, #20]
 800aff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	685a      	ldr	r2, [r3, #4]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	693a      	ldr	r2, [r7, #16]
 800b00c:	621a      	str	r2, [r3, #32]
}
 800b00e:	bf00      	nop
 800b010:	371c      	adds	r7, #28
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop
 800b01c:	feff8fff 	.word	0xfeff8fff
 800b020:	40010000 	.word	0x40010000
 800b024:	40010400 	.word	0x40010400
 800b028:	40014000 	.word	0x40014000
 800b02c:	40014400 	.word	0x40014400
 800b030:	40014800 	.word	0x40014800

0800b034 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b034:	b480      	push	{r7}
 800b036:	b087      	sub	sp, #28
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a1b      	ldr	r3, [r3, #32]
 800b042:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a1b      	ldr	r3, [r3, #32]
 800b04e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b05a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	4b21      	ldr	r3, [pc, #132]	; (800b0e4 <TIM_OC5_SetConfig+0xb0>)
 800b060:	4013      	ands	r3, r2
 800b062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b074:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	041b      	lsls	r3, r3, #16
 800b07c:	693a      	ldr	r2, [r7, #16]
 800b07e:	4313      	orrs	r3, r2
 800b080:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	4a18      	ldr	r2, [pc, #96]	; (800b0e8 <TIM_OC5_SetConfig+0xb4>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d00f      	beq.n	800b0aa <TIM_OC5_SetConfig+0x76>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	4a17      	ldr	r2, [pc, #92]	; (800b0ec <TIM_OC5_SetConfig+0xb8>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d00b      	beq.n	800b0aa <TIM_OC5_SetConfig+0x76>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	4a16      	ldr	r2, [pc, #88]	; (800b0f0 <TIM_OC5_SetConfig+0xbc>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d007      	beq.n	800b0aa <TIM_OC5_SetConfig+0x76>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4a15      	ldr	r2, [pc, #84]	; (800b0f4 <TIM_OC5_SetConfig+0xc0>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d003      	beq.n	800b0aa <TIM_OC5_SetConfig+0x76>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	4a14      	ldr	r2, [pc, #80]	; (800b0f8 <TIM_OC5_SetConfig+0xc4>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d109      	bne.n	800b0be <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b0b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	695b      	ldr	r3, [r3, #20]
 800b0b6:	021b      	lsls	r3, r3, #8
 800b0b8:	697a      	ldr	r2, [r7, #20]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	697a      	ldr	r2, [r7, #20]
 800b0c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	685a      	ldr	r2, [r3, #4]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	693a      	ldr	r2, [r7, #16]
 800b0d6:	621a      	str	r2, [r3, #32]
}
 800b0d8:	bf00      	nop
 800b0da:	371c      	adds	r7, #28
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr
 800b0e4:	fffeff8f 	.word	0xfffeff8f
 800b0e8:	40010000 	.word	0x40010000
 800b0ec:	40010400 	.word	0x40010400
 800b0f0:	40014000 	.word	0x40014000
 800b0f4:	40014400 	.word	0x40014400
 800b0f8:	40014800 	.word	0x40014800

0800b0fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b087      	sub	sp, #28
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6a1b      	ldr	r3, [r3, #32]
 800b10a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6a1b      	ldr	r3, [r3, #32]
 800b116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b124:	68fa      	ldr	r2, [r7, #12]
 800b126:	4b22      	ldr	r3, [pc, #136]	; (800b1b0 <TIM_OC6_SetConfig+0xb4>)
 800b128:	4013      	ands	r3, r2
 800b12a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	021b      	lsls	r3, r3, #8
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	4313      	orrs	r3, r2
 800b136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b13e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	051b      	lsls	r3, r3, #20
 800b146:	693a      	ldr	r2, [r7, #16]
 800b148:	4313      	orrs	r3, r2
 800b14a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	4a19      	ldr	r2, [pc, #100]	; (800b1b4 <TIM_OC6_SetConfig+0xb8>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d00f      	beq.n	800b174 <TIM_OC6_SetConfig+0x78>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4a18      	ldr	r2, [pc, #96]	; (800b1b8 <TIM_OC6_SetConfig+0xbc>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d00b      	beq.n	800b174 <TIM_OC6_SetConfig+0x78>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	4a17      	ldr	r2, [pc, #92]	; (800b1bc <TIM_OC6_SetConfig+0xc0>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d007      	beq.n	800b174 <TIM_OC6_SetConfig+0x78>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	4a16      	ldr	r2, [pc, #88]	; (800b1c0 <TIM_OC6_SetConfig+0xc4>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d003      	beq.n	800b174 <TIM_OC6_SetConfig+0x78>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4a15      	ldr	r2, [pc, #84]	; (800b1c4 <TIM_OC6_SetConfig+0xc8>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d109      	bne.n	800b188 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b17a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	695b      	ldr	r3, [r3, #20]
 800b180:	029b      	lsls	r3, r3, #10
 800b182:	697a      	ldr	r2, [r7, #20]
 800b184:	4313      	orrs	r3, r2
 800b186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	697a      	ldr	r2, [r7, #20]
 800b18c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	685a      	ldr	r2, [r3, #4]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	693a      	ldr	r2, [r7, #16]
 800b1a0:	621a      	str	r2, [r3, #32]
}
 800b1a2:	bf00      	nop
 800b1a4:	371c      	adds	r7, #28
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	feff8fff 	.word	0xfeff8fff
 800b1b4:	40010000 	.word	0x40010000
 800b1b8:	40010400 	.word	0x40010400
 800b1bc:	40014000 	.word	0x40014000
 800b1c0:	40014400 	.word	0x40014400
 800b1c4:	40014800 	.word	0x40014800

0800b1c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b087      	sub	sp, #28
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6a1b      	ldr	r3, [r3, #32]
 800b1d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6a1b      	ldr	r3, [r3, #32]
 800b1de:	f023 0201 	bic.w	r2, r3, #1
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b1f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	011b      	lsls	r3, r3, #4
 800b1f8:	693a      	ldr	r2, [r7, #16]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	f023 030a 	bic.w	r3, r3, #10
 800b204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	693a      	ldr	r2, [r7, #16]
 800b212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	697a      	ldr	r2, [r7, #20]
 800b218:	621a      	str	r2, [r3, #32]
}
 800b21a:	bf00      	nop
 800b21c:	371c      	adds	r7, #28
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr

0800b226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b226:	b480      	push	{r7}
 800b228:	b087      	sub	sp, #28
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	60f8      	str	r0, [r7, #12]
 800b22e:	60b9      	str	r1, [r7, #8]
 800b230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6a1b      	ldr	r3, [r3, #32]
 800b236:	f023 0210 	bic.w	r2, r3, #16
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	699b      	ldr	r3, [r3, #24]
 800b242:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6a1b      	ldr	r3, [r3, #32]
 800b248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b250:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	031b      	lsls	r3, r3, #12
 800b256:	697a      	ldr	r2, [r7, #20]
 800b258:	4313      	orrs	r3, r2
 800b25a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b262:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	011b      	lsls	r3, r3, #4
 800b268:	693a      	ldr	r2, [r7, #16]
 800b26a:	4313      	orrs	r3, r2
 800b26c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	697a      	ldr	r2, [r7, #20]
 800b272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	693a      	ldr	r2, [r7, #16]
 800b278:	621a      	str	r2, [r3, #32]
}
 800b27a:	bf00      	nop
 800b27c:	371c      	adds	r7, #28
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr
	...

0800b288 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	4b09      	ldr	r3, [pc, #36]	; (800b2c0 <TIM_ITRx_SetConfig+0x38>)
 800b29c:	4013      	ands	r3, r2
 800b29e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b2a0:	683a      	ldr	r2, [r7, #0]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	f043 0307 	orr.w	r3, r3, #7
 800b2aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	609a      	str	r2, [r3, #8]
}
 800b2b2:	bf00      	nop
 800b2b4:	3714      	adds	r7, #20
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	ffcfff8f 	.word	0xffcfff8f

0800b2c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b087      	sub	sp, #28
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	607a      	str	r2, [r7, #4]
 800b2d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b2de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	021a      	lsls	r2, r3, #8
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	431a      	orrs	r2, r3
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	697a      	ldr	r2, [r7, #20]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	697a      	ldr	r2, [r7, #20]
 800b2f6:	609a      	str	r2, [r3, #8]
}
 800b2f8:	bf00      	nop
 800b2fa:	371c      	adds	r7, #28
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b304:	b480      	push	{r7}
 800b306:	b087      	sub	sp, #28
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	f003 031f 	and.w	r3, r3, #31
 800b316:	2201      	movs	r2, #1
 800b318:	fa02 f303 	lsl.w	r3, r2, r3
 800b31c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	6a1a      	ldr	r2, [r3, #32]
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	43db      	mvns	r3, r3
 800b326:	401a      	ands	r2, r3
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6a1a      	ldr	r2, [r3, #32]
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	f003 031f 	and.w	r3, r3, #31
 800b336:	6879      	ldr	r1, [r7, #4]
 800b338:	fa01 f303 	lsl.w	r3, r1, r3
 800b33c:	431a      	orrs	r2, r3
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	621a      	str	r2, [r3, #32]
}
 800b342:	bf00      	nop
 800b344:	371c      	adds	r7, #28
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr
	...

0800b350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b360:	2b01      	cmp	r3, #1
 800b362:	d101      	bne.n	800b368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b364:	2302      	movs	r3, #2
 800b366:	e077      	b.n	800b458 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2202      	movs	r2, #2
 800b374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a35      	ldr	r2, [pc, #212]	; (800b464 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d004      	beq.n	800b39c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a34      	ldr	r2, [pc, #208]	; (800b468 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d108      	bne.n	800b3ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b3a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	68fa      	ldr	r2, [r7, #12]
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a25      	ldr	r2, [pc, #148]	; (800b464 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d02c      	beq.n	800b42c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3da:	d027      	beq.n	800b42c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a22      	ldr	r2, [pc, #136]	; (800b46c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d022      	beq.n	800b42c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a21      	ldr	r2, [pc, #132]	; (800b470 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d01d      	beq.n	800b42c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4a1f      	ldr	r2, [pc, #124]	; (800b474 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d018      	beq.n	800b42c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a1a      	ldr	r2, [pc, #104]	; (800b468 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d013      	beq.n	800b42c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a1b      	ldr	r2, [pc, #108]	; (800b478 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d00e      	beq.n	800b42c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4a1a      	ldr	r2, [pc, #104]	; (800b47c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d009      	beq.n	800b42c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a18      	ldr	r2, [pc, #96]	; (800b480 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d004      	beq.n	800b42c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a17      	ldr	r2, [pc, #92]	; (800b484 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d10c      	bne.n	800b446 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b432:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	68ba      	ldr	r2, [r7, #8]
 800b444:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2201      	movs	r2, #1
 800b44a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b456:	2300      	movs	r3, #0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3714      	adds	r7, #20
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr
 800b464:	40010000 	.word	0x40010000
 800b468:	40010400 	.word	0x40010400
 800b46c:	40000400 	.word	0x40000400
 800b470:	40000800 	.word	0x40000800
 800b474:	40000c00 	.word	0x40000c00
 800b478:	40001800 	.word	0x40001800
 800b47c:	40014000 	.word	0x40014000
 800b480:	4000e000 	.word	0x4000e000
 800b484:	4000e400 	.word	0x4000e400

0800b488 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b488:	b480      	push	{r7}
 800b48a:	b085      	sub	sp, #20
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b492:	2300      	movs	r3, #0
 800b494:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d101      	bne.n	800b4a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b4a0:	2302      	movs	r3, #2
 800b4a2:	e087      	b.n	800b5b4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	691b      	ldr	r3, [r3, #16]
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	695b      	ldr	r3, [r3, #20]
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b50a:	4313      	orrs	r3, r2
 800b50c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	699b      	ldr	r3, [r3, #24]
 800b518:	041b      	lsls	r3, r3, #16
 800b51a:	4313      	orrs	r3, r2
 800b51c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	4a27      	ldr	r2, [pc, #156]	; (800b5c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d004      	beq.n	800b532 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a25      	ldr	r2, [pc, #148]	; (800b5c4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d106      	bne.n	800b540 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	69db      	ldr	r3, [r3, #28]
 800b53c:	4313      	orrs	r3, r2
 800b53e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a1e      	ldr	r2, [pc, #120]	; (800b5c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d004      	beq.n	800b554 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a1d      	ldr	r2, [pc, #116]	; (800b5c4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d126      	bne.n	800b5a2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b55e:	051b      	lsls	r3, r3, #20
 800b560:	4313      	orrs	r3, r2
 800b562:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	6a1b      	ldr	r3, [r3, #32]
 800b56e:	4313      	orrs	r3, r2
 800b570:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57c:	4313      	orrs	r3, r2
 800b57e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a0e      	ldr	r2, [pc, #56]	; (800b5c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d004      	beq.n	800b594 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a0d      	ldr	r2, [pc, #52]	; (800b5c4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d106      	bne.n	800b5a2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	68fa      	ldr	r2, [r7, #12]
 800b5a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b5b2:	2300      	movs	r3, #0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3714      	adds	r7, #20
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr
 800b5c0:	40010000 	.word	0x40010000
 800b5c4:	40010400 	.word	0x40010400

0800b5c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b5f8:	bf00      	nop
 800b5fa:	370c      	adds	r7, #12
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr

0800b604 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d101      	bne.n	800b616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b612:	2301      	movs	r3, #1
 800b614:	e042      	b.n	800b69c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d106      	bne.n	800b62e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f7f8 fa53 	bl	8003ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2224      	movs	r2, #36	; 0x24
 800b632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f022 0201 	bic.w	r2, r2, #1
 800b644:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 fce6 	bl	800c018 <UART_SetConfig>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d101      	bne.n	800b656 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b652:	2301      	movs	r3, #1
 800b654:	e022      	b.n	800b69c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d002      	beq.n	800b664 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f001 fb46 	bl	800ccf0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	685a      	ldr	r2, [r3, #4]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b672:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	689a      	ldr	r2, [r3, #8]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b682:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f042 0201 	orr.w	r2, r2, #1
 800b692:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f001 fbcd 	bl	800ce34 <UART_CheckIdleState>
 800b69a:	4603      	mov	r3, r0
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3708      	adds	r7, #8
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b08a      	sub	sp, #40	; 0x28
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	4613      	mov	r3, r2
 800b6b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6b8:	2b20      	cmp	r3, #32
 800b6ba:	d167      	bne.n	800b78c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d002      	beq.n	800b6c8 <HAL_UART_Transmit_DMA+0x24>
 800b6c2:	88fb      	ldrh	r3, [r7, #6]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d101      	bne.n	800b6cc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	e060      	b.n	800b78e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	68ba      	ldr	r2, [r7, #8]
 800b6d0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	88fa      	ldrh	r2, [r7, #6]
 800b6d6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	88fa      	ldrh	r2, [r7, #6]
 800b6de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2221      	movs	r2, #33	; 0x21
 800b6ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d028      	beq.n	800b74c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6fe:	4a26      	ldr	r2, [pc, #152]	; (800b798 <HAL_UART_Transmit_DMA+0xf4>)
 800b700:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b706:	4a25      	ldr	r2, [pc, #148]	; (800b79c <HAL_UART_Transmit_DMA+0xf8>)
 800b708:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b70e:	4a24      	ldr	r2, [pc, #144]	; (800b7a0 <HAL_UART_Transmit_DMA+0xfc>)
 800b710:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b716:	2200      	movs	r2, #0
 800b718:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b722:	4619      	mov	r1, r3
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	3328      	adds	r3, #40	; 0x28
 800b72a:	461a      	mov	r2, r3
 800b72c:	88fb      	ldrh	r3, [r7, #6]
 800b72e:	f7f9 f8f1 	bl	8004914 <HAL_DMA_Start_IT>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d009      	beq.n	800b74c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2210      	movs	r2, #16
 800b73c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2220      	movs	r2, #32
 800b744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800b748:	2301      	movs	r3, #1
 800b74a:	e020      	b.n	800b78e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2240      	movs	r2, #64	; 0x40
 800b752:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	3308      	adds	r3, #8
 800b75a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	e853 3f00 	ldrex	r3, [r3]
 800b762:	613b      	str	r3, [r7, #16]
   return(result);
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b76a:	627b      	str	r3, [r7, #36]	; 0x24
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	3308      	adds	r3, #8
 800b772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b774:	623a      	str	r2, [r7, #32]
 800b776:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b778:	69f9      	ldr	r1, [r7, #28]
 800b77a:	6a3a      	ldr	r2, [r7, #32]
 800b77c:	e841 2300 	strex	r3, r2, [r1]
 800b780:	61bb      	str	r3, [r7, #24]
   return(result);
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d1e5      	bne.n	800b754 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800b788:	2300      	movs	r3, #0
 800b78a:	e000      	b.n	800b78e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b78c:	2302      	movs	r3, #2
  }
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3728      	adds	r7, #40	; 0x28
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	0800d2f5 	.word	0x0800d2f5
 800b79c:	0800d38b 	.word	0x0800d38b
 800b7a0:	0800d50d 	.word	0x0800d50d

0800b7a4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b08a      	sub	sp, #40	; 0x28
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	4613      	mov	r3, r2
 800b7b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7b8:	2b20      	cmp	r3, #32
 800b7ba:	d137      	bne.n	800b82c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d002      	beq.n	800b7c8 <HAL_UART_Receive_DMA+0x24>
 800b7c2:	88fb      	ldrh	r3, [r7, #6]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d101      	bne.n	800b7cc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	e030      	b.n	800b82e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a18      	ldr	r2, [pc, #96]	; (800b838 <HAL_UART_Receive_DMA+0x94>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d01f      	beq.n	800b81c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d018      	beq.n	800b81c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	e853 3f00 	ldrex	r3, [r3]
 800b7f6:	613b      	str	r3, [r7, #16]
   return(result);
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b7fe:	627b      	str	r3, [r7, #36]	; 0x24
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	461a      	mov	r2, r3
 800b806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b808:	623b      	str	r3, [r7, #32]
 800b80a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80c:	69f9      	ldr	r1, [r7, #28]
 800b80e:	6a3a      	ldr	r2, [r7, #32]
 800b810:	e841 2300 	strex	r3, r2, [r1]
 800b814:	61bb      	str	r3, [r7, #24]
   return(result);
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d1e6      	bne.n	800b7ea <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b81c:	88fb      	ldrh	r3, [r7, #6]
 800b81e:	461a      	mov	r2, r3
 800b820:	68b9      	ldr	r1, [r7, #8]
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f001 fc18 	bl	800d058 <UART_Start_Receive_DMA>
 800b828:	4603      	mov	r3, r0
 800b82a:	e000      	b.n	800b82e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b82c:	2302      	movs	r3, #2
  }
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3728      	adds	r7, #40	; 0x28
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	58000c00 	.word	0x58000c00

0800b83c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b0ba      	sub	sp, #232	; 0xe8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	69db      	ldr	r3, [r3, #28]
 800b84a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b862:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b866:	f640 030f 	movw	r3, #2063	; 0x80f
 800b86a:	4013      	ands	r3, r2
 800b86c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b870:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b874:	2b00      	cmp	r3, #0
 800b876:	d11b      	bne.n	800b8b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b87c:	f003 0320 	and.w	r3, r3, #32
 800b880:	2b00      	cmp	r3, #0
 800b882:	d015      	beq.n	800b8b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b888:	f003 0320 	and.w	r3, r3, #32
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d105      	bne.n	800b89c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d009      	beq.n	800b8b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	f000 8377 	beq.w	800bf94 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	4798      	blx	r3
      }
      return;
 800b8ae:	e371      	b.n	800bf94 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b8b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	f000 8123 	beq.w	800bb00 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b8ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b8be:	4b8d      	ldr	r3, [pc, #564]	; (800baf4 <HAL_UART_IRQHandler+0x2b8>)
 800b8c0:	4013      	ands	r3, r2
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d106      	bne.n	800b8d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b8c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b8ca:	4b8b      	ldr	r3, [pc, #556]	; (800baf8 <HAL_UART_IRQHandler+0x2bc>)
 800b8cc:	4013      	ands	r3, r2
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	f000 8116 	beq.w	800bb00 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b8d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8d8:	f003 0301 	and.w	r3, r3, #1
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d011      	beq.n	800b904 <HAL_UART_IRQHandler+0xc8>
 800b8e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d00b      	beq.n	800b904 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8fa:	f043 0201 	orr.w	r2, r3, #1
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b908:	f003 0302 	and.w	r3, r3, #2
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d011      	beq.n	800b934 <HAL_UART_IRQHandler+0xf8>
 800b910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b914:	f003 0301 	and.w	r3, r3, #1
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00b      	beq.n	800b934 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	2202      	movs	r2, #2
 800b922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b92a:	f043 0204 	orr.w	r2, r3, #4
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b938:	f003 0304 	and.w	r3, r3, #4
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d011      	beq.n	800b964 <HAL_UART_IRQHandler+0x128>
 800b940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b944:	f003 0301 	and.w	r3, r3, #1
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00b      	beq.n	800b964 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	2204      	movs	r2, #4
 800b952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b95a:	f043 0202 	orr.w	r2, r3, #2
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b968:	f003 0308 	and.w	r3, r3, #8
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d017      	beq.n	800b9a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b974:	f003 0320 	and.w	r3, r3, #32
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d105      	bne.n	800b988 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b97c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b980:	4b5c      	ldr	r3, [pc, #368]	; (800baf4 <HAL_UART_IRQHandler+0x2b8>)
 800b982:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b984:	2b00      	cmp	r3, #0
 800b986:	d00b      	beq.n	800b9a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2208      	movs	r2, #8
 800b98e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b996:	f043 0208 	orr.w	r2, r3, #8
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b9a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d012      	beq.n	800b9d2 <HAL_UART_IRQHandler+0x196>
 800b9ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00c      	beq.n	800b9d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9c8:	f043 0220 	orr.w	r2, r3, #32
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	f000 82dd 	beq.w	800bf98 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b9de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9e2:	f003 0320 	and.w	r3, r3, #32
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d013      	beq.n	800ba12 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b9ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9ee:	f003 0320 	and.w	r3, r3, #32
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d105      	bne.n	800ba02 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b9f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d007      	beq.n	800ba12 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d003      	beq.n	800ba12 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba26:	2b40      	cmp	r3, #64	; 0x40
 800ba28:	d005      	beq.n	800ba36 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ba2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d054      	beq.n	800bae0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f001 fbf6 	bl	800d228 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba46:	2b40      	cmp	r3, #64	; 0x40
 800ba48:	d146      	bne.n	800bad8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	3308      	adds	r3, #8
 800ba50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ba58:	e853 3f00 	ldrex	r3, [r3]
 800ba5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ba60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	3308      	adds	r3, #8
 800ba72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ba76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ba7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ba82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ba86:	e841 2300 	strex	r3, r2, [r1]
 800ba8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ba8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1d9      	bne.n	800ba4a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d017      	beq.n	800bad0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800baa6:	4a15      	ldr	r2, [pc, #84]	; (800bafc <HAL_UART_IRQHandler+0x2c0>)
 800baa8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7f9 fcb7 	bl	8005424 <HAL_DMA_Abort_IT>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d019      	beq.n	800baf0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800baca:	4610      	mov	r0, r2
 800bacc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bace:	e00f      	b.n	800baf0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 fa8b 	bl	800bfec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bad6:	e00b      	b.n	800baf0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 fa87 	bl	800bfec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bade:	e007      	b.n	800baf0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 fa83 	bl	800bfec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800baee:	e253      	b.n	800bf98 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baf0:	bf00      	nop
    return;
 800baf2:	e251      	b.n	800bf98 <HAL_UART_IRQHandler+0x75c>
 800baf4:	10000001 	.word	0x10000001
 800baf8:	04000120 	.word	0x04000120
 800bafc:	0800d58d 	.word	0x0800d58d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	f040 81e7 	bne.w	800bed8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bb0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb0e:	f003 0310 	and.w	r3, r3, #16
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	f000 81e0 	beq.w	800bed8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bb18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb1c:	f003 0310 	and.w	r3, r3, #16
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f000 81d9 	beq.w	800bed8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	2210      	movs	r2, #16
 800bb2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb38:	2b40      	cmp	r3, #64	; 0x40
 800bb3a:	f040 8151 	bne.w	800bde0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a96      	ldr	r2, [pc, #600]	; (800bda0 <HAL_UART_IRQHandler+0x564>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d068      	beq.n	800bc1e <HAL_UART_IRQHandler+0x3e2>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4a93      	ldr	r2, [pc, #588]	; (800bda4 <HAL_UART_IRQHandler+0x568>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d061      	beq.n	800bc1e <HAL_UART_IRQHandler+0x3e2>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a91      	ldr	r2, [pc, #580]	; (800bda8 <HAL_UART_IRQHandler+0x56c>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d05a      	beq.n	800bc1e <HAL_UART_IRQHandler+0x3e2>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4a8e      	ldr	r2, [pc, #568]	; (800bdac <HAL_UART_IRQHandler+0x570>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d053      	beq.n	800bc1e <HAL_UART_IRQHandler+0x3e2>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a8c      	ldr	r2, [pc, #560]	; (800bdb0 <HAL_UART_IRQHandler+0x574>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d04c      	beq.n	800bc1e <HAL_UART_IRQHandler+0x3e2>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a89      	ldr	r2, [pc, #548]	; (800bdb4 <HAL_UART_IRQHandler+0x578>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d045      	beq.n	800bc1e <HAL_UART_IRQHandler+0x3e2>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a87      	ldr	r2, [pc, #540]	; (800bdb8 <HAL_UART_IRQHandler+0x57c>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d03e      	beq.n	800bc1e <HAL_UART_IRQHandler+0x3e2>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	4a84      	ldr	r2, [pc, #528]	; (800bdbc <HAL_UART_IRQHandler+0x580>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d037      	beq.n	800bc1e <HAL_UART_IRQHandler+0x3e2>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a82      	ldr	r2, [pc, #520]	; (800bdc0 <HAL_UART_IRQHandler+0x584>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d030      	beq.n	800bc1e <HAL_UART_IRQHandler+0x3e2>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4a7f      	ldr	r2, [pc, #508]	; (800bdc4 <HAL_UART_IRQHandler+0x588>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d029      	beq.n	800bc1e <HAL_UART_IRQHandler+0x3e2>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4a7d      	ldr	r2, [pc, #500]	; (800bdc8 <HAL_UART_IRQHandler+0x58c>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d022      	beq.n	800bc1e <HAL_UART_IRQHandler+0x3e2>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a7a      	ldr	r2, [pc, #488]	; (800bdcc <HAL_UART_IRQHandler+0x590>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d01b      	beq.n	800bc1e <HAL_UART_IRQHandler+0x3e2>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4a78      	ldr	r2, [pc, #480]	; (800bdd0 <HAL_UART_IRQHandler+0x594>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d014      	beq.n	800bc1e <HAL_UART_IRQHandler+0x3e2>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4a75      	ldr	r2, [pc, #468]	; (800bdd4 <HAL_UART_IRQHandler+0x598>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d00d      	beq.n	800bc1e <HAL_UART_IRQHandler+0x3e2>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a73      	ldr	r2, [pc, #460]	; (800bdd8 <HAL_UART_IRQHandler+0x59c>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d006      	beq.n	800bc1e <HAL_UART_IRQHandler+0x3e2>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4a70      	ldr	r2, [pc, #448]	; (800bddc <HAL_UART_IRQHandler+0x5a0>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d106      	bne.n	800bc2c <HAL_UART_IRQHandler+0x3f0>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	e005      	b.n	800bc38 <HAL_UART_IRQHandler+0x3fc>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	f000 81ab 	beq.w	800bf9c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bc4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc50:	429a      	cmp	r2, r3
 800bc52:	f080 81a3 	bcs.w	800bf9c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc66:	69db      	ldr	r3, [r3, #28]
 800bc68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc6c:	f000 8087 	beq.w	800bd7e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bc7c:	e853 3f00 	ldrex	r3, [r3]
 800bc80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bc84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	461a      	mov	r2, r3
 800bc96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bc9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bc9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bca6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bcaa:	e841 2300 	strex	r3, r2, [r1]
 800bcae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bcb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d1da      	bne.n	800bc70 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	3308      	adds	r3, #8
 800bcc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bcc4:	e853 3f00 	ldrex	r3, [r3]
 800bcc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bcca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bccc:	f023 0301 	bic.w	r3, r3, #1
 800bcd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	3308      	adds	r3, #8
 800bcda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bcde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bce2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bce6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bcea:	e841 2300 	strex	r3, r2, [r1]
 800bcee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bcf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d1e1      	bne.n	800bcba <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	3308      	adds	r3, #8
 800bcfc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd00:	e853 3f00 	ldrex	r3, [r3]
 800bd04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bd06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	3308      	adds	r3, #8
 800bd16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bd1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bd1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bd20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bd22:	e841 2300 	strex	r3, r2, [r1]
 800bd26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bd28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1e3      	bne.n	800bcf6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2220      	movs	r2, #32
 800bd32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd44:	e853 3f00 	ldrex	r3, [r3]
 800bd48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bd4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd4c:	f023 0310 	bic.w	r3, r3, #16
 800bd50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	461a      	mov	r2, r3
 800bd5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bd5e:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd60:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd66:	e841 2300 	strex	r3, r2, [r1]
 800bd6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bd6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d1e4      	bne.n	800bd3c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7f9 f835 	bl	8004de8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2202      	movs	r2, #2
 800bd82:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	1ad3      	subs	r3, r2, r3
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	4619      	mov	r1, r3
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 f931 	bl	800c000 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bd9e:	e0fd      	b.n	800bf9c <HAL_UART_IRQHandler+0x760>
 800bda0:	40020010 	.word	0x40020010
 800bda4:	40020028 	.word	0x40020028
 800bda8:	40020040 	.word	0x40020040
 800bdac:	40020058 	.word	0x40020058
 800bdb0:	40020070 	.word	0x40020070
 800bdb4:	40020088 	.word	0x40020088
 800bdb8:	400200a0 	.word	0x400200a0
 800bdbc:	400200b8 	.word	0x400200b8
 800bdc0:	40020410 	.word	0x40020410
 800bdc4:	40020428 	.word	0x40020428
 800bdc8:	40020440 	.word	0x40020440
 800bdcc:	40020458 	.word	0x40020458
 800bdd0:	40020470 	.word	0x40020470
 800bdd4:	40020488 	.word	0x40020488
 800bdd8:	400204a0 	.word	0x400204a0
 800bddc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	1ad3      	subs	r3, r2, r3
 800bdf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f000 80cf 	beq.w	800bfa0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800be02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be06:	2b00      	cmp	r3, #0
 800be08:	f000 80ca 	beq.w	800bfa0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be14:	e853 3f00 	ldrex	r3, [r3]
 800be18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	461a      	mov	r2, r3
 800be2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800be2e:	647b      	str	r3, [r7, #68]	; 0x44
 800be30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800be34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be36:	e841 2300 	strex	r3, r2, [r1]
 800be3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800be3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1e4      	bne.n	800be0c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	3308      	adds	r3, #8
 800be48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4c:	e853 3f00 	ldrex	r3, [r3]
 800be50:	623b      	str	r3, [r7, #32]
   return(result);
 800be52:	6a3a      	ldr	r2, [r7, #32]
 800be54:	4b55      	ldr	r3, [pc, #340]	; (800bfac <HAL_UART_IRQHandler+0x770>)
 800be56:	4013      	ands	r3, r2
 800be58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	3308      	adds	r3, #8
 800be62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800be66:	633a      	str	r2, [r7, #48]	; 0x30
 800be68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be6e:	e841 2300 	strex	r3, r2, [r1]
 800be72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1e3      	bne.n	800be42 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2220      	movs	r2, #32
 800be7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2200      	movs	r2, #0
 800be86:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	e853 3f00 	ldrex	r3, [r3]
 800be9a:	60fb      	str	r3, [r7, #12]
   return(result);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f023 0310 	bic.w	r3, r3, #16
 800bea2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	461a      	mov	r2, r3
 800beac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800beb0:	61fb      	str	r3, [r7, #28]
 800beb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb4:	69b9      	ldr	r1, [r7, #24]
 800beb6:	69fa      	ldr	r2, [r7, #28]
 800beb8:	e841 2300 	strex	r3, r2, [r1]
 800bebc:	617b      	str	r3, [r7, #20]
   return(result);
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1e4      	bne.n	800be8e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2202      	movs	r2, #2
 800bec8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800beca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bece:	4619      	mov	r1, r3
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 f895 	bl	800c000 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bed6:	e063      	b.n	800bfa0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bedc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00e      	beq.n	800bf02 <HAL_UART_IRQHandler+0x6c6>
 800bee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800beec:	2b00      	cmp	r3, #0
 800beee:	d008      	beq.n	800bf02 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bef8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f001 fb87 	bl	800d60e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf00:	e051      	b.n	800bfa6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bf02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d014      	beq.n	800bf38 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bf0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d105      	bne.n	800bf26 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bf1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d008      	beq.n	800bf38 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d03a      	beq.n	800bfa4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	4798      	blx	r3
    }
    return;
 800bf36:	e035      	b.n	800bfa4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bf38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d009      	beq.n	800bf58 <HAL_UART_IRQHandler+0x71c>
 800bf44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d003      	beq.n	800bf58 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f001 fb31 	bl	800d5b8 <UART_EndTransmit_IT>
    return;
 800bf56:	e026      	b.n	800bfa6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bf58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d009      	beq.n	800bf78 <HAL_UART_IRQHandler+0x73c>
 800bf64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d003      	beq.n	800bf78 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f001 fb60 	bl	800d636 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf76:	e016      	b.n	800bfa6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bf78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d010      	beq.n	800bfa6 <HAL_UART_IRQHandler+0x76a>
 800bf84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	da0c      	bge.n	800bfa6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f001 fb48 	bl	800d622 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf92:	e008      	b.n	800bfa6 <HAL_UART_IRQHandler+0x76a>
      return;
 800bf94:	bf00      	nop
 800bf96:	e006      	b.n	800bfa6 <HAL_UART_IRQHandler+0x76a>
    return;
 800bf98:	bf00      	nop
 800bf9a:	e004      	b.n	800bfa6 <HAL_UART_IRQHandler+0x76a>
      return;
 800bf9c:	bf00      	nop
 800bf9e:	e002      	b.n	800bfa6 <HAL_UART_IRQHandler+0x76a>
      return;
 800bfa0:	bf00      	nop
 800bfa2:	e000      	b.n	800bfa6 <HAL_UART_IRQHandler+0x76a>
    return;
 800bfa4:	bf00      	nop
  }
}
 800bfa6:	37e8      	adds	r7, #232	; 0xe8
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	effffffe 	.word	0xeffffffe

0800bfb0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bfb8:	bf00      	nop
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800bfcc:	bf00      	nop
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bfe0:	bf00      	nop
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b083      	sub	sp, #12
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bff4:	bf00      	nop
 800bff6:	370c      	adds	r7, #12
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr

0800c000 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	460b      	mov	r3, r1
 800c00a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c00c:	bf00      	nop
 800c00e:	370c      	adds	r7, #12
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c01c:	b092      	sub	sp, #72	; 0x48
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c022:	2300      	movs	r3, #0
 800c024:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	689a      	ldr	r2, [r3, #8]
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	691b      	ldr	r3, [r3, #16]
 800c030:	431a      	orrs	r2, r3
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	695b      	ldr	r3, [r3, #20]
 800c036:	431a      	orrs	r2, r3
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	69db      	ldr	r3, [r3, #28]
 800c03c:	4313      	orrs	r3, r2
 800c03e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	4bbe      	ldr	r3, [pc, #760]	; (800c340 <UART_SetConfig+0x328>)
 800c048:	4013      	ands	r3, r2
 800c04a:	697a      	ldr	r2, [r7, #20]
 800c04c:	6812      	ldr	r2, [r2, #0]
 800c04e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c050:	430b      	orrs	r3, r1
 800c052:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	68da      	ldr	r2, [r3, #12]
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	430a      	orrs	r2, r1
 800c068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	699b      	ldr	r3, [r3, #24]
 800c06e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4ab3      	ldr	r2, [pc, #716]	; (800c344 <UART_SetConfig+0x32c>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d004      	beq.n	800c084 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	6a1b      	ldr	r3, [r3, #32]
 800c07e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c080:	4313      	orrs	r3, r2
 800c082:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	689a      	ldr	r2, [r3, #8]
 800c08a:	4baf      	ldr	r3, [pc, #700]	; (800c348 <UART_SetConfig+0x330>)
 800c08c:	4013      	ands	r3, r2
 800c08e:	697a      	ldr	r2, [r7, #20]
 800c090:	6812      	ldr	r2, [r2, #0]
 800c092:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c094:	430b      	orrs	r3, r1
 800c096:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c09e:	f023 010f 	bic.w	r1, r3, #15
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	430a      	orrs	r2, r1
 800c0ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4aa6      	ldr	r2, [pc, #664]	; (800c34c <UART_SetConfig+0x334>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d177      	bne.n	800c1a8 <UART_SetConfig+0x190>
 800c0b8:	4ba5      	ldr	r3, [pc, #660]	; (800c350 <UART_SetConfig+0x338>)
 800c0ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c0c0:	2b28      	cmp	r3, #40	; 0x28
 800c0c2:	d86d      	bhi.n	800c1a0 <UART_SetConfig+0x188>
 800c0c4:	a201      	add	r2, pc, #4	; (adr r2, 800c0cc <UART_SetConfig+0xb4>)
 800c0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ca:	bf00      	nop
 800c0cc:	0800c171 	.word	0x0800c171
 800c0d0:	0800c1a1 	.word	0x0800c1a1
 800c0d4:	0800c1a1 	.word	0x0800c1a1
 800c0d8:	0800c1a1 	.word	0x0800c1a1
 800c0dc:	0800c1a1 	.word	0x0800c1a1
 800c0e0:	0800c1a1 	.word	0x0800c1a1
 800c0e4:	0800c1a1 	.word	0x0800c1a1
 800c0e8:	0800c1a1 	.word	0x0800c1a1
 800c0ec:	0800c179 	.word	0x0800c179
 800c0f0:	0800c1a1 	.word	0x0800c1a1
 800c0f4:	0800c1a1 	.word	0x0800c1a1
 800c0f8:	0800c1a1 	.word	0x0800c1a1
 800c0fc:	0800c1a1 	.word	0x0800c1a1
 800c100:	0800c1a1 	.word	0x0800c1a1
 800c104:	0800c1a1 	.word	0x0800c1a1
 800c108:	0800c1a1 	.word	0x0800c1a1
 800c10c:	0800c181 	.word	0x0800c181
 800c110:	0800c1a1 	.word	0x0800c1a1
 800c114:	0800c1a1 	.word	0x0800c1a1
 800c118:	0800c1a1 	.word	0x0800c1a1
 800c11c:	0800c1a1 	.word	0x0800c1a1
 800c120:	0800c1a1 	.word	0x0800c1a1
 800c124:	0800c1a1 	.word	0x0800c1a1
 800c128:	0800c1a1 	.word	0x0800c1a1
 800c12c:	0800c189 	.word	0x0800c189
 800c130:	0800c1a1 	.word	0x0800c1a1
 800c134:	0800c1a1 	.word	0x0800c1a1
 800c138:	0800c1a1 	.word	0x0800c1a1
 800c13c:	0800c1a1 	.word	0x0800c1a1
 800c140:	0800c1a1 	.word	0x0800c1a1
 800c144:	0800c1a1 	.word	0x0800c1a1
 800c148:	0800c1a1 	.word	0x0800c1a1
 800c14c:	0800c191 	.word	0x0800c191
 800c150:	0800c1a1 	.word	0x0800c1a1
 800c154:	0800c1a1 	.word	0x0800c1a1
 800c158:	0800c1a1 	.word	0x0800c1a1
 800c15c:	0800c1a1 	.word	0x0800c1a1
 800c160:	0800c1a1 	.word	0x0800c1a1
 800c164:	0800c1a1 	.word	0x0800c1a1
 800c168:	0800c1a1 	.word	0x0800c1a1
 800c16c:	0800c199 	.word	0x0800c199
 800c170:	2301      	movs	r3, #1
 800c172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c176:	e326      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c178:	2304      	movs	r3, #4
 800c17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c17e:	e322      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c180:	2308      	movs	r3, #8
 800c182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c186:	e31e      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c188:	2310      	movs	r3, #16
 800c18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c18e:	e31a      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c190:	2320      	movs	r3, #32
 800c192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c196:	e316      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c198:	2340      	movs	r3, #64	; 0x40
 800c19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c19e:	e312      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c1a0:	2380      	movs	r3, #128	; 0x80
 800c1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1a6:	e30e      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a69      	ldr	r2, [pc, #420]	; (800c354 <UART_SetConfig+0x33c>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d130      	bne.n	800c214 <UART_SetConfig+0x1fc>
 800c1b2:	4b67      	ldr	r3, [pc, #412]	; (800c350 <UART_SetConfig+0x338>)
 800c1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1b6:	f003 0307 	and.w	r3, r3, #7
 800c1ba:	2b05      	cmp	r3, #5
 800c1bc:	d826      	bhi.n	800c20c <UART_SetConfig+0x1f4>
 800c1be:	a201      	add	r2, pc, #4	; (adr r2, 800c1c4 <UART_SetConfig+0x1ac>)
 800c1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c4:	0800c1dd 	.word	0x0800c1dd
 800c1c8:	0800c1e5 	.word	0x0800c1e5
 800c1cc:	0800c1ed 	.word	0x0800c1ed
 800c1d0:	0800c1f5 	.word	0x0800c1f5
 800c1d4:	0800c1fd 	.word	0x0800c1fd
 800c1d8:	0800c205 	.word	0x0800c205
 800c1dc:	2300      	movs	r3, #0
 800c1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1e2:	e2f0      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c1e4:	2304      	movs	r3, #4
 800c1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ea:	e2ec      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c1ec:	2308      	movs	r3, #8
 800c1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1f2:	e2e8      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c1f4:	2310      	movs	r3, #16
 800c1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1fa:	e2e4      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c1fc:	2320      	movs	r3, #32
 800c1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c202:	e2e0      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c204:	2340      	movs	r3, #64	; 0x40
 800c206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c20a:	e2dc      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c20c:	2380      	movs	r3, #128	; 0x80
 800c20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c212:	e2d8      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a4f      	ldr	r2, [pc, #316]	; (800c358 <UART_SetConfig+0x340>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d130      	bne.n	800c280 <UART_SetConfig+0x268>
 800c21e:	4b4c      	ldr	r3, [pc, #304]	; (800c350 <UART_SetConfig+0x338>)
 800c220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c222:	f003 0307 	and.w	r3, r3, #7
 800c226:	2b05      	cmp	r3, #5
 800c228:	d826      	bhi.n	800c278 <UART_SetConfig+0x260>
 800c22a:	a201      	add	r2, pc, #4	; (adr r2, 800c230 <UART_SetConfig+0x218>)
 800c22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c230:	0800c249 	.word	0x0800c249
 800c234:	0800c251 	.word	0x0800c251
 800c238:	0800c259 	.word	0x0800c259
 800c23c:	0800c261 	.word	0x0800c261
 800c240:	0800c269 	.word	0x0800c269
 800c244:	0800c271 	.word	0x0800c271
 800c248:	2300      	movs	r3, #0
 800c24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c24e:	e2ba      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c250:	2304      	movs	r3, #4
 800c252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c256:	e2b6      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c258:	2308      	movs	r3, #8
 800c25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25e:	e2b2      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c260:	2310      	movs	r3, #16
 800c262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c266:	e2ae      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c268:	2320      	movs	r3, #32
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c26e:	e2aa      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c270:	2340      	movs	r3, #64	; 0x40
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c276:	e2a6      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c278:	2380      	movs	r3, #128	; 0x80
 800c27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c27e:	e2a2      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a35      	ldr	r2, [pc, #212]	; (800c35c <UART_SetConfig+0x344>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d130      	bne.n	800c2ec <UART_SetConfig+0x2d4>
 800c28a:	4b31      	ldr	r3, [pc, #196]	; (800c350 <UART_SetConfig+0x338>)
 800c28c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c28e:	f003 0307 	and.w	r3, r3, #7
 800c292:	2b05      	cmp	r3, #5
 800c294:	d826      	bhi.n	800c2e4 <UART_SetConfig+0x2cc>
 800c296:	a201      	add	r2, pc, #4	; (adr r2, 800c29c <UART_SetConfig+0x284>)
 800c298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29c:	0800c2b5 	.word	0x0800c2b5
 800c2a0:	0800c2bd 	.word	0x0800c2bd
 800c2a4:	0800c2c5 	.word	0x0800c2c5
 800c2a8:	0800c2cd 	.word	0x0800c2cd
 800c2ac:	0800c2d5 	.word	0x0800c2d5
 800c2b0:	0800c2dd 	.word	0x0800c2dd
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ba:	e284      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c2bc:	2304      	movs	r3, #4
 800c2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2c2:	e280      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c2c4:	2308      	movs	r3, #8
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ca:	e27c      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c2cc:	2310      	movs	r3, #16
 800c2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2d2:	e278      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c2d4:	2320      	movs	r3, #32
 800c2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2da:	e274      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c2dc:	2340      	movs	r3, #64	; 0x40
 800c2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2e2:	e270      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c2e4:	2380      	movs	r3, #128	; 0x80
 800c2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ea:	e26c      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a1b      	ldr	r2, [pc, #108]	; (800c360 <UART_SetConfig+0x348>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d142      	bne.n	800c37c <UART_SetConfig+0x364>
 800c2f6:	4b16      	ldr	r3, [pc, #88]	; (800c350 <UART_SetConfig+0x338>)
 800c2f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2fa:	f003 0307 	and.w	r3, r3, #7
 800c2fe:	2b05      	cmp	r3, #5
 800c300:	d838      	bhi.n	800c374 <UART_SetConfig+0x35c>
 800c302:	a201      	add	r2, pc, #4	; (adr r2, 800c308 <UART_SetConfig+0x2f0>)
 800c304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c308:	0800c321 	.word	0x0800c321
 800c30c:	0800c329 	.word	0x0800c329
 800c310:	0800c331 	.word	0x0800c331
 800c314:	0800c339 	.word	0x0800c339
 800c318:	0800c365 	.word	0x0800c365
 800c31c:	0800c36d 	.word	0x0800c36d
 800c320:	2300      	movs	r3, #0
 800c322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c326:	e24e      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c328:	2304      	movs	r3, #4
 800c32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c32e:	e24a      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c330:	2308      	movs	r3, #8
 800c332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c336:	e246      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c338:	2310      	movs	r3, #16
 800c33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c33e:	e242      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c340:	cfff69f3 	.word	0xcfff69f3
 800c344:	58000c00 	.word	0x58000c00
 800c348:	11fff4ff 	.word	0x11fff4ff
 800c34c:	40011000 	.word	0x40011000
 800c350:	58024400 	.word	0x58024400
 800c354:	40004400 	.word	0x40004400
 800c358:	40004800 	.word	0x40004800
 800c35c:	40004c00 	.word	0x40004c00
 800c360:	40005000 	.word	0x40005000
 800c364:	2320      	movs	r3, #32
 800c366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c36a:	e22c      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c36c:	2340      	movs	r3, #64	; 0x40
 800c36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c372:	e228      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c374:	2380      	movs	r3, #128	; 0x80
 800c376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c37a:	e224      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4ab1      	ldr	r2, [pc, #708]	; (800c648 <UART_SetConfig+0x630>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d176      	bne.n	800c474 <UART_SetConfig+0x45c>
 800c386:	4bb1      	ldr	r3, [pc, #708]	; (800c64c <UART_SetConfig+0x634>)
 800c388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c38a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c38e:	2b28      	cmp	r3, #40	; 0x28
 800c390:	d86c      	bhi.n	800c46c <UART_SetConfig+0x454>
 800c392:	a201      	add	r2, pc, #4	; (adr r2, 800c398 <UART_SetConfig+0x380>)
 800c394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c398:	0800c43d 	.word	0x0800c43d
 800c39c:	0800c46d 	.word	0x0800c46d
 800c3a0:	0800c46d 	.word	0x0800c46d
 800c3a4:	0800c46d 	.word	0x0800c46d
 800c3a8:	0800c46d 	.word	0x0800c46d
 800c3ac:	0800c46d 	.word	0x0800c46d
 800c3b0:	0800c46d 	.word	0x0800c46d
 800c3b4:	0800c46d 	.word	0x0800c46d
 800c3b8:	0800c445 	.word	0x0800c445
 800c3bc:	0800c46d 	.word	0x0800c46d
 800c3c0:	0800c46d 	.word	0x0800c46d
 800c3c4:	0800c46d 	.word	0x0800c46d
 800c3c8:	0800c46d 	.word	0x0800c46d
 800c3cc:	0800c46d 	.word	0x0800c46d
 800c3d0:	0800c46d 	.word	0x0800c46d
 800c3d4:	0800c46d 	.word	0x0800c46d
 800c3d8:	0800c44d 	.word	0x0800c44d
 800c3dc:	0800c46d 	.word	0x0800c46d
 800c3e0:	0800c46d 	.word	0x0800c46d
 800c3e4:	0800c46d 	.word	0x0800c46d
 800c3e8:	0800c46d 	.word	0x0800c46d
 800c3ec:	0800c46d 	.word	0x0800c46d
 800c3f0:	0800c46d 	.word	0x0800c46d
 800c3f4:	0800c46d 	.word	0x0800c46d
 800c3f8:	0800c455 	.word	0x0800c455
 800c3fc:	0800c46d 	.word	0x0800c46d
 800c400:	0800c46d 	.word	0x0800c46d
 800c404:	0800c46d 	.word	0x0800c46d
 800c408:	0800c46d 	.word	0x0800c46d
 800c40c:	0800c46d 	.word	0x0800c46d
 800c410:	0800c46d 	.word	0x0800c46d
 800c414:	0800c46d 	.word	0x0800c46d
 800c418:	0800c45d 	.word	0x0800c45d
 800c41c:	0800c46d 	.word	0x0800c46d
 800c420:	0800c46d 	.word	0x0800c46d
 800c424:	0800c46d 	.word	0x0800c46d
 800c428:	0800c46d 	.word	0x0800c46d
 800c42c:	0800c46d 	.word	0x0800c46d
 800c430:	0800c46d 	.word	0x0800c46d
 800c434:	0800c46d 	.word	0x0800c46d
 800c438:	0800c465 	.word	0x0800c465
 800c43c:	2301      	movs	r3, #1
 800c43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c442:	e1c0      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c444:	2304      	movs	r3, #4
 800c446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c44a:	e1bc      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c44c:	2308      	movs	r3, #8
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c452:	e1b8      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c454:	2310      	movs	r3, #16
 800c456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c45a:	e1b4      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c45c:	2320      	movs	r3, #32
 800c45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c462:	e1b0      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c464:	2340      	movs	r3, #64	; 0x40
 800c466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c46a:	e1ac      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c46c:	2380      	movs	r3, #128	; 0x80
 800c46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c472:	e1a8      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a75      	ldr	r2, [pc, #468]	; (800c650 <UART_SetConfig+0x638>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d130      	bne.n	800c4e0 <UART_SetConfig+0x4c8>
 800c47e:	4b73      	ldr	r3, [pc, #460]	; (800c64c <UART_SetConfig+0x634>)
 800c480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c482:	f003 0307 	and.w	r3, r3, #7
 800c486:	2b05      	cmp	r3, #5
 800c488:	d826      	bhi.n	800c4d8 <UART_SetConfig+0x4c0>
 800c48a:	a201      	add	r2, pc, #4	; (adr r2, 800c490 <UART_SetConfig+0x478>)
 800c48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c490:	0800c4a9 	.word	0x0800c4a9
 800c494:	0800c4b1 	.word	0x0800c4b1
 800c498:	0800c4b9 	.word	0x0800c4b9
 800c49c:	0800c4c1 	.word	0x0800c4c1
 800c4a0:	0800c4c9 	.word	0x0800c4c9
 800c4a4:	0800c4d1 	.word	0x0800c4d1
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ae:	e18a      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c4b0:	2304      	movs	r3, #4
 800c4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4b6:	e186      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c4b8:	2308      	movs	r3, #8
 800c4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4be:	e182      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c4c0:	2310      	movs	r3, #16
 800c4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4c6:	e17e      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c4c8:	2320      	movs	r3, #32
 800c4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ce:	e17a      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c4d0:	2340      	movs	r3, #64	; 0x40
 800c4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4d6:	e176      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c4d8:	2380      	movs	r3, #128	; 0x80
 800c4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4de:	e172      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4a5b      	ldr	r2, [pc, #364]	; (800c654 <UART_SetConfig+0x63c>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d130      	bne.n	800c54c <UART_SetConfig+0x534>
 800c4ea:	4b58      	ldr	r3, [pc, #352]	; (800c64c <UART_SetConfig+0x634>)
 800c4ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4ee:	f003 0307 	and.w	r3, r3, #7
 800c4f2:	2b05      	cmp	r3, #5
 800c4f4:	d826      	bhi.n	800c544 <UART_SetConfig+0x52c>
 800c4f6:	a201      	add	r2, pc, #4	; (adr r2, 800c4fc <UART_SetConfig+0x4e4>)
 800c4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4fc:	0800c515 	.word	0x0800c515
 800c500:	0800c51d 	.word	0x0800c51d
 800c504:	0800c525 	.word	0x0800c525
 800c508:	0800c52d 	.word	0x0800c52d
 800c50c:	0800c535 	.word	0x0800c535
 800c510:	0800c53d 	.word	0x0800c53d
 800c514:	2300      	movs	r3, #0
 800c516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c51a:	e154      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c51c:	2304      	movs	r3, #4
 800c51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c522:	e150      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c524:	2308      	movs	r3, #8
 800c526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c52a:	e14c      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c52c:	2310      	movs	r3, #16
 800c52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c532:	e148      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c534:	2320      	movs	r3, #32
 800c536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c53a:	e144      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c53c:	2340      	movs	r3, #64	; 0x40
 800c53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c542:	e140      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c544:	2380      	movs	r3, #128	; 0x80
 800c546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c54a:	e13c      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a41      	ldr	r2, [pc, #260]	; (800c658 <UART_SetConfig+0x640>)
 800c552:	4293      	cmp	r3, r2
 800c554:	f040 8082 	bne.w	800c65c <UART_SetConfig+0x644>
 800c558:	4b3c      	ldr	r3, [pc, #240]	; (800c64c <UART_SetConfig+0x634>)
 800c55a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c55c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c560:	2b28      	cmp	r3, #40	; 0x28
 800c562:	d86d      	bhi.n	800c640 <UART_SetConfig+0x628>
 800c564:	a201      	add	r2, pc, #4	; (adr r2, 800c56c <UART_SetConfig+0x554>)
 800c566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c56a:	bf00      	nop
 800c56c:	0800c611 	.word	0x0800c611
 800c570:	0800c641 	.word	0x0800c641
 800c574:	0800c641 	.word	0x0800c641
 800c578:	0800c641 	.word	0x0800c641
 800c57c:	0800c641 	.word	0x0800c641
 800c580:	0800c641 	.word	0x0800c641
 800c584:	0800c641 	.word	0x0800c641
 800c588:	0800c641 	.word	0x0800c641
 800c58c:	0800c619 	.word	0x0800c619
 800c590:	0800c641 	.word	0x0800c641
 800c594:	0800c641 	.word	0x0800c641
 800c598:	0800c641 	.word	0x0800c641
 800c59c:	0800c641 	.word	0x0800c641
 800c5a0:	0800c641 	.word	0x0800c641
 800c5a4:	0800c641 	.word	0x0800c641
 800c5a8:	0800c641 	.word	0x0800c641
 800c5ac:	0800c621 	.word	0x0800c621
 800c5b0:	0800c641 	.word	0x0800c641
 800c5b4:	0800c641 	.word	0x0800c641
 800c5b8:	0800c641 	.word	0x0800c641
 800c5bc:	0800c641 	.word	0x0800c641
 800c5c0:	0800c641 	.word	0x0800c641
 800c5c4:	0800c641 	.word	0x0800c641
 800c5c8:	0800c641 	.word	0x0800c641
 800c5cc:	0800c629 	.word	0x0800c629
 800c5d0:	0800c641 	.word	0x0800c641
 800c5d4:	0800c641 	.word	0x0800c641
 800c5d8:	0800c641 	.word	0x0800c641
 800c5dc:	0800c641 	.word	0x0800c641
 800c5e0:	0800c641 	.word	0x0800c641
 800c5e4:	0800c641 	.word	0x0800c641
 800c5e8:	0800c641 	.word	0x0800c641
 800c5ec:	0800c631 	.word	0x0800c631
 800c5f0:	0800c641 	.word	0x0800c641
 800c5f4:	0800c641 	.word	0x0800c641
 800c5f8:	0800c641 	.word	0x0800c641
 800c5fc:	0800c641 	.word	0x0800c641
 800c600:	0800c641 	.word	0x0800c641
 800c604:	0800c641 	.word	0x0800c641
 800c608:	0800c641 	.word	0x0800c641
 800c60c:	0800c639 	.word	0x0800c639
 800c610:	2301      	movs	r3, #1
 800c612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c616:	e0d6      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c618:	2304      	movs	r3, #4
 800c61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c61e:	e0d2      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c620:	2308      	movs	r3, #8
 800c622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c626:	e0ce      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c628:	2310      	movs	r3, #16
 800c62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c62e:	e0ca      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c630:	2320      	movs	r3, #32
 800c632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c636:	e0c6      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c638:	2340      	movs	r3, #64	; 0x40
 800c63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c63e:	e0c2      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c640:	2380      	movs	r3, #128	; 0x80
 800c642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c646:	e0be      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c648:	40011400 	.word	0x40011400
 800c64c:	58024400 	.word	0x58024400
 800c650:	40007800 	.word	0x40007800
 800c654:	40007c00 	.word	0x40007c00
 800c658:	40011800 	.word	0x40011800
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4aad      	ldr	r2, [pc, #692]	; (800c918 <UART_SetConfig+0x900>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d176      	bne.n	800c754 <UART_SetConfig+0x73c>
 800c666:	4bad      	ldr	r3, [pc, #692]	; (800c91c <UART_SetConfig+0x904>)
 800c668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c66a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c66e:	2b28      	cmp	r3, #40	; 0x28
 800c670:	d86c      	bhi.n	800c74c <UART_SetConfig+0x734>
 800c672:	a201      	add	r2, pc, #4	; (adr r2, 800c678 <UART_SetConfig+0x660>)
 800c674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c678:	0800c71d 	.word	0x0800c71d
 800c67c:	0800c74d 	.word	0x0800c74d
 800c680:	0800c74d 	.word	0x0800c74d
 800c684:	0800c74d 	.word	0x0800c74d
 800c688:	0800c74d 	.word	0x0800c74d
 800c68c:	0800c74d 	.word	0x0800c74d
 800c690:	0800c74d 	.word	0x0800c74d
 800c694:	0800c74d 	.word	0x0800c74d
 800c698:	0800c725 	.word	0x0800c725
 800c69c:	0800c74d 	.word	0x0800c74d
 800c6a0:	0800c74d 	.word	0x0800c74d
 800c6a4:	0800c74d 	.word	0x0800c74d
 800c6a8:	0800c74d 	.word	0x0800c74d
 800c6ac:	0800c74d 	.word	0x0800c74d
 800c6b0:	0800c74d 	.word	0x0800c74d
 800c6b4:	0800c74d 	.word	0x0800c74d
 800c6b8:	0800c72d 	.word	0x0800c72d
 800c6bc:	0800c74d 	.word	0x0800c74d
 800c6c0:	0800c74d 	.word	0x0800c74d
 800c6c4:	0800c74d 	.word	0x0800c74d
 800c6c8:	0800c74d 	.word	0x0800c74d
 800c6cc:	0800c74d 	.word	0x0800c74d
 800c6d0:	0800c74d 	.word	0x0800c74d
 800c6d4:	0800c74d 	.word	0x0800c74d
 800c6d8:	0800c735 	.word	0x0800c735
 800c6dc:	0800c74d 	.word	0x0800c74d
 800c6e0:	0800c74d 	.word	0x0800c74d
 800c6e4:	0800c74d 	.word	0x0800c74d
 800c6e8:	0800c74d 	.word	0x0800c74d
 800c6ec:	0800c74d 	.word	0x0800c74d
 800c6f0:	0800c74d 	.word	0x0800c74d
 800c6f4:	0800c74d 	.word	0x0800c74d
 800c6f8:	0800c73d 	.word	0x0800c73d
 800c6fc:	0800c74d 	.word	0x0800c74d
 800c700:	0800c74d 	.word	0x0800c74d
 800c704:	0800c74d 	.word	0x0800c74d
 800c708:	0800c74d 	.word	0x0800c74d
 800c70c:	0800c74d 	.word	0x0800c74d
 800c710:	0800c74d 	.word	0x0800c74d
 800c714:	0800c74d 	.word	0x0800c74d
 800c718:	0800c745 	.word	0x0800c745
 800c71c:	2301      	movs	r3, #1
 800c71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c722:	e050      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c724:	2304      	movs	r3, #4
 800c726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c72a:	e04c      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c72c:	2308      	movs	r3, #8
 800c72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c732:	e048      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c734:	2310      	movs	r3, #16
 800c736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c73a:	e044      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c73c:	2320      	movs	r3, #32
 800c73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c742:	e040      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c744:	2340      	movs	r3, #64	; 0x40
 800c746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c74a:	e03c      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c74c:	2380      	movs	r3, #128	; 0x80
 800c74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c752:	e038      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a71      	ldr	r2, [pc, #452]	; (800c920 <UART_SetConfig+0x908>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d130      	bne.n	800c7c0 <UART_SetConfig+0x7a8>
 800c75e:	4b6f      	ldr	r3, [pc, #444]	; (800c91c <UART_SetConfig+0x904>)
 800c760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c762:	f003 0307 	and.w	r3, r3, #7
 800c766:	2b05      	cmp	r3, #5
 800c768:	d826      	bhi.n	800c7b8 <UART_SetConfig+0x7a0>
 800c76a:	a201      	add	r2, pc, #4	; (adr r2, 800c770 <UART_SetConfig+0x758>)
 800c76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c770:	0800c789 	.word	0x0800c789
 800c774:	0800c791 	.word	0x0800c791
 800c778:	0800c799 	.word	0x0800c799
 800c77c:	0800c7a1 	.word	0x0800c7a1
 800c780:	0800c7a9 	.word	0x0800c7a9
 800c784:	0800c7b1 	.word	0x0800c7b1
 800c788:	2302      	movs	r3, #2
 800c78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c78e:	e01a      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c790:	2304      	movs	r3, #4
 800c792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c796:	e016      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c798:	2308      	movs	r3, #8
 800c79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c79e:	e012      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c7a0:	2310      	movs	r3, #16
 800c7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7a6:	e00e      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c7a8:	2320      	movs	r3, #32
 800c7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ae:	e00a      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c7b0:	2340      	movs	r3, #64	; 0x40
 800c7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7b6:	e006      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c7b8:	2380      	movs	r3, #128	; 0x80
 800c7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7be:	e002      	b.n	800c7c6 <UART_SetConfig+0x7ae>
 800c7c0:	2380      	movs	r3, #128	; 0x80
 800c7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a55      	ldr	r2, [pc, #340]	; (800c920 <UART_SetConfig+0x908>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	f040 80f8 	bne.w	800c9c2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c7d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c7d6:	2b20      	cmp	r3, #32
 800c7d8:	dc46      	bgt.n	800c868 <UART_SetConfig+0x850>
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	db75      	blt.n	800c8ca <UART_SetConfig+0x8b2>
 800c7de:	3b02      	subs	r3, #2
 800c7e0:	2b1e      	cmp	r3, #30
 800c7e2:	d872      	bhi.n	800c8ca <UART_SetConfig+0x8b2>
 800c7e4:	a201      	add	r2, pc, #4	; (adr r2, 800c7ec <UART_SetConfig+0x7d4>)
 800c7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ea:	bf00      	nop
 800c7ec:	0800c86f 	.word	0x0800c86f
 800c7f0:	0800c8cb 	.word	0x0800c8cb
 800c7f4:	0800c877 	.word	0x0800c877
 800c7f8:	0800c8cb 	.word	0x0800c8cb
 800c7fc:	0800c8cb 	.word	0x0800c8cb
 800c800:	0800c8cb 	.word	0x0800c8cb
 800c804:	0800c887 	.word	0x0800c887
 800c808:	0800c8cb 	.word	0x0800c8cb
 800c80c:	0800c8cb 	.word	0x0800c8cb
 800c810:	0800c8cb 	.word	0x0800c8cb
 800c814:	0800c8cb 	.word	0x0800c8cb
 800c818:	0800c8cb 	.word	0x0800c8cb
 800c81c:	0800c8cb 	.word	0x0800c8cb
 800c820:	0800c8cb 	.word	0x0800c8cb
 800c824:	0800c897 	.word	0x0800c897
 800c828:	0800c8cb 	.word	0x0800c8cb
 800c82c:	0800c8cb 	.word	0x0800c8cb
 800c830:	0800c8cb 	.word	0x0800c8cb
 800c834:	0800c8cb 	.word	0x0800c8cb
 800c838:	0800c8cb 	.word	0x0800c8cb
 800c83c:	0800c8cb 	.word	0x0800c8cb
 800c840:	0800c8cb 	.word	0x0800c8cb
 800c844:	0800c8cb 	.word	0x0800c8cb
 800c848:	0800c8cb 	.word	0x0800c8cb
 800c84c:	0800c8cb 	.word	0x0800c8cb
 800c850:	0800c8cb 	.word	0x0800c8cb
 800c854:	0800c8cb 	.word	0x0800c8cb
 800c858:	0800c8cb 	.word	0x0800c8cb
 800c85c:	0800c8cb 	.word	0x0800c8cb
 800c860:	0800c8cb 	.word	0x0800c8cb
 800c864:	0800c8bd 	.word	0x0800c8bd
 800c868:	2b40      	cmp	r3, #64	; 0x40
 800c86a:	d02a      	beq.n	800c8c2 <UART_SetConfig+0x8aa>
 800c86c:	e02d      	b.n	800c8ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c86e:	f7fc fe33 	bl	80094d8 <HAL_RCCEx_GetD3PCLK1Freq>
 800c872:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c874:	e02f      	b.n	800c8d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7fc fe42 	bl	8009504 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c884:	e027      	b.n	800c8d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c886:	f107 0318 	add.w	r3, r7, #24
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7fc ff8e 	bl	80097ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c890:	69fb      	ldr	r3, [r7, #28]
 800c892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c894:	e01f      	b.n	800c8d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c896:	4b21      	ldr	r3, [pc, #132]	; (800c91c <UART_SetConfig+0x904>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f003 0320 	and.w	r3, r3, #32
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d009      	beq.n	800c8b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c8a2:	4b1e      	ldr	r3, [pc, #120]	; (800c91c <UART_SetConfig+0x904>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	08db      	lsrs	r3, r3, #3
 800c8a8:	f003 0303 	and.w	r3, r3, #3
 800c8ac:	4a1d      	ldr	r2, [pc, #116]	; (800c924 <UART_SetConfig+0x90c>)
 800c8ae:	fa22 f303 	lsr.w	r3, r2, r3
 800c8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c8b4:	e00f      	b.n	800c8d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c8b6:	4b1b      	ldr	r3, [pc, #108]	; (800c924 <UART_SetConfig+0x90c>)
 800c8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ba:	e00c      	b.n	800c8d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c8bc:	4b1a      	ldr	r3, [pc, #104]	; (800c928 <UART_SetConfig+0x910>)
 800c8be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8c0:	e009      	b.n	800c8d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8c8:	e005      	b.n	800c8d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c8d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c8d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	f000 81ee 	beq.w	800ccba <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e2:	4a12      	ldr	r2, [pc, #72]	; (800c92c <UART_SetConfig+0x914>)
 800c8e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8f0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	685a      	ldr	r2, [r3, #4]
 800c8f6:	4613      	mov	r3, r2
 800c8f8:	005b      	lsls	r3, r3, #1
 800c8fa:	4413      	add	r3, r2
 800c8fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d305      	bcc.n	800c90e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d910      	bls.n	800c930 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800c90e:	2301      	movs	r3, #1
 800c910:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c914:	e1d1      	b.n	800ccba <UART_SetConfig+0xca2>
 800c916:	bf00      	nop
 800c918:	40011c00 	.word	0x40011c00
 800c91c:	58024400 	.word	0x58024400
 800c920:	58000c00 	.word	0x58000c00
 800c924:	03d09000 	.word	0x03d09000
 800c928:	003d0900 	.word	0x003d0900
 800c92c:	0800defc 	.word	0x0800defc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c932:	2200      	movs	r2, #0
 800c934:	60bb      	str	r3, [r7, #8]
 800c936:	60fa      	str	r2, [r7, #12]
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c93c:	4ac0      	ldr	r2, [pc, #768]	; (800cc40 <UART_SetConfig+0xc28>)
 800c93e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c942:	b29b      	uxth	r3, r3
 800c944:	2200      	movs	r2, #0
 800c946:	603b      	str	r3, [r7, #0]
 800c948:	607a      	str	r2, [r7, #4]
 800c94a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c94e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c952:	f7f3 fce3 	bl	800031c <__aeabi_uldivmod>
 800c956:	4602      	mov	r2, r0
 800c958:	460b      	mov	r3, r1
 800c95a:	4610      	mov	r0, r2
 800c95c:	4619      	mov	r1, r3
 800c95e:	f04f 0200 	mov.w	r2, #0
 800c962:	f04f 0300 	mov.w	r3, #0
 800c966:	020b      	lsls	r3, r1, #8
 800c968:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c96c:	0202      	lsls	r2, r0, #8
 800c96e:	6979      	ldr	r1, [r7, #20]
 800c970:	6849      	ldr	r1, [r1, #4]
 800c972:	0849      	lsrs	r1, r1, #1
 800c974:	2000      	movs	r0, #0
 800c976:	460c      	mov	r4, r1
 800c978:	4605      	mov	r5, r0
 800c97a:	eb12 0804 	adds.w	r8, r2, r4
 800c97e:	eb43 0905 	adc.w	r9, r3, r5
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	2200      	movs	r2, #0
 800c988:	469a      	mov	sl, r3
 800c98a:	4693      	mov	fp, r2
 800c98c:	4652      	mov	r2, sl
 800c98e:	465b      	mov	r3, fp
 800c990:	4640      	mov	r0, r8
 800c992:	4649      	mov	r1, r9
 800c994:	f7f3 fcc2 	bl	800031c <__aeabi_uldivmod>
 800c998:	4602      	mov	r2, r0
 800c99a:	460b      	mov	r3, r1
 800c99c:	4613      	mov	r3, r2
 800c99e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9a6:	d308      	bcc.n	800c9ba <UART_SetConfig+0x9a2>
 800c9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9ae:	d204      	bcs.n	800c9ba <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9b6:	60da      	str	r2, [r3, #12]
 800c9b8:	e17f      	b.n	800ccba <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c9c0:	e17b      	b.n	800ccba <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	69db      	ldr	r3, [r3, #28]
 800c9c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9ca:	f040 80bd 	bne.w	800cb48 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800c9ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c9d2:	2b20      	cmp	r3, #32
 800c9d4:	dc48      	bgt.n	800ca68 <UART_SetConfig+0xa50>
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	db7b      	blt.n	800cad2 <UART_SetConfig+0xaba>
 800c9da:	2b20      	cmp	r3, #32
 800c9dc:	d879      	bhi.n	800cad2 <UART_SetConfig+0xaba>
 800c9de:	a201      	add	r2, pc, #4	; (adr r2, 800c9e4 <UART_SetConfig+0x9cc>)
 800c9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9e4:	0800ca6f 	.word	0x0800ca6f
 800c9e8:	0800ca77 	.word	0x0800ca77
 800c9ec:	0800cad3 	.word	0x0800cad3
 800c9f0:	0800cad3 	.word	0x0800cad3
 800c9f4:	0800ca7f 	.word	0x0800ca7f
 800c9f8:	0800cad3 	.word	0x0800cad3
 800c9fc:	0800cad3 	.word	0x0800cad3
 800ca00:	0800cad3 	.word	0x0800cad3
 800ca04:	0800ca8f 	.word	0x0800ca8f
 800ca08:	0800cad3 	.word	0x0800cad3
 800ca0c:	0800cad3 	.word	0x0800cad3
 800ca10:	0800cad3 	.word	0x0800cad3
 800ca14:	0800cad3 	.word	0x0800cad3
 800ca18:	0800cad3 	.word	0x0800cad3
 800ca1c:	0800cad3 	.word	0x0800cad3
 800ca20:	0800cad3 	.word	0x0800cad3
 800ca24:	0800ca9f 	.word	0x0800ca9f
 800ca28:	0800cad3 	.word	0x0800cad3
 800ca2c:	0800cad3 	.word	0x0800cad3
 800ca30:	0800cad3 	.word	0x0800cad3
 800ca34:	0800cad3 	.word	0x0800cad3
 800ca38:	0800cad3 	.word	0x0800cad3
 800ca3c:	0800cad3 	.word	0x0800cad3
 800ca40:	0800cad3 	.word	0x0800cad3
 800ca44:	0800cad3 	.word	0x0800cad3
 800ca48:	0800cad3 	.word	0x0800cad3
 800ca4c:	0800cad3 	.word	0x0800cad3
 800ca50:	0800cad3 	.word	0x0800cad3
 800ca54:	0800cad3 	.word	0x0800cad3
 800ca58:	0800cad3 	.word	0x0800cad3
 800ca5c:	0800cad3 	.word	0x0800cad3
 800ca60:	0800cad3 	.word	0x0800cad3
 800ca64:	0800cac5 	.word	0x0800cac5
 800ca68:	2b40      	cmp	r3, #64	; 0x40
 800ca6a:	d02e      	beq.n	800caca <UART_SetConfig+0xab2>
 800ca6c:	e031      	b.n	800cad2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca6e:	f7fb fb67 	bl	8008140 <HAL_RCC_GetPCLK1Freq>
 800ca72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ca74:	e033      	b.n	800cade <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca76:	f7fb fb79 	bl	800816c <HAL_RCC_GetPCLK2Freq>
 800ca7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ca7c:	e02f      	b.n	800cade <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7fc fd3e 	bl	8009504 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca8c:	e027      	b.n	800cade <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca8e:	f107 0318 	add.w	r3, r7, #24
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7fc fe8a 	bl	80097ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca9c:	e01f      	b.n	800cade <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca9e:	4b69      	ldr	r3, [pc, #420]	; (800cc44 <UART_SetConfig+0xc2c>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f003 0320 	and.w	r3, r3, #32
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d009      	beq.n	800cabe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800caaa:	4b66      	ldr	r3, [pc, #408]	; (800cc44 <UART_SetConfig+0xc2c>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	08db      	lsrs	r3, r3, #3
 800cab0:	f003 0303 	and.w	r3, r3, #3
 800cab4:	4a64      	ldr	r2, [pc, #400]	; (800cc48 <UART_SetConfig+0xc30>)
 800cab6:	fa22 f303 	lsr.w	r3, r2, r3
 800caba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cabc:	e00f      	b.n	800cade <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cabe:	4b62      	ldr	r3, [pc, #392]	; (800cc48 <UART_SetConfig+0xc30>)
 800cac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cac2:	e00c      	b.n	800cade <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cac4:	4b61      	ldr	r3, [pc, #388]	; (800cc4c <UART_SetConfig+0xc34>)
 800cac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cac8:	e009      	b.n	800cade <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800caca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cad0:	e005      	b.n	800cade <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800cad2:	2300      	movs	r3, #0
 800cad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cad6:	2301      	movs	r3, #1
 800cad8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cadc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	f000 80ea 	beq.w	800ccba <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caea:	4a55      	ldr	r2, [pc, #340]	; (800cc40 <UART_SetConfig+0xc28>)
 800caec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800caf0:	461a      	mov	r2, r3
 800caf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caf4:	fbb3 f3f2 	udiv	r3, r3, r2
 800caf8:	005a      	lsls	r2, r3, #1
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	085b      	lsrs	r3, r3, #1
 800cb00:	441a      	add	r2, r3
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb0a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0e:	2b0f      	cmp	r3, #15
 800cb10:	d916      	bls.n	800cb40 <UART_SetConfig+0xb28>
 800cb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb18:	d212      	bcs.n	800cb40 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1c:	b29b      	uxth	r3, r3
 800cb1e:	f023 030f 	bic.w	r3, r3, #15
 800cb22:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb26:	085b      	lsrs	r3, r3, #1
 800cb28:	b29b      	uxth	r3, r3
 800cb2a:	f003 0307 	and.w	r3, r3, #7
 800cb2e:	b29a      	uxth	r2, r3
 800cb30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cb32:	4313      	orrs	r3, r2
 800cb34:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cb3c:	60da      	str	r2, [r3, #12]
 800cb3e:	e0bc      	b.n	800ccba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cb40:	2301      	movs	r3, #1
 800cb42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cb46:	e0b8      	b.n	800ccba <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cb48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cb4c:	2b20      	cmp	r3, #32
 800cb4e:	dc4b      	bgt.n	800cbe8 <UART_SetConfig+0xbd0>
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	f2c0 8087 	blt.w	800cc64 <UART_SetConfig+0xc4c>
 800cb56:	2b20      	cmp	r3, #32
 800cb58:	f200 8084 	bhi.w	800cc64 <UART_SetConfig+0xc4c>
 800cb5c:	a201      	add	r2, pc, #4	; (adr r2, 800cb64 <UART_SetConfig+0xb4c>)
 800cb5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb62:	bf00      	nop
 800cb64:	0800cbef 	.word	0x0800cbef
 800cb68:	0800cbf7 	.word	0x0800cbf7
 800cb6c:	0800cc65 	.word	0x0800cc65
 800cb70:	0800cc65 	.word	0x0800cc65
 800cb74:	0800cbff 	.word	0x0800cbff
 800cb78:	0800cc65 	.word	0x0800cc65
 800cb7c:	0800cc65 	.word	0x0800cc65
 800cb80:	0800cc65 	.word	0x0800cc65
 800cb84:	0800cc0f 	.word	0x0800cc0f
 800cb88:	0800cc65 	.word	0x0800cc65
 800cb8c:	0800cc65 	.word	0x0800cc65
 800cb90:	0800cc65 	.word	0x0800cc65
 800cb94:	0800cc65 	.word	0x0800cc65
 800cb98:	0800cc65 	.word	0x0800cc65
 800cb9c:	0800cc65 	.word	0x0800cc65
 800cba0:	0800cc65 	.word	0x0800cc65
 800cba4:	0800cc1f 	.word	0x0800cc1f
 800cba8:	0800cc65 	.word	0x0800cc65
 800cbac:	0800cc65 	.word	0x0800cc65
 800cbb0:	0800cc65 	.word	0x0800cc65
 800cbb4:	0800cc65 	.word	0x0800cc65
 800cbb8:	0800cc65 	.word	0x0800cc65
 800cbbc:	0800cc65 	.word	0x0800cc65
 800cbc0:	0800cc65 	.word	0x0800cc65
 800cbc4:	0800cc65 	.word	0x0800cc65
 800cbc8:	0800cc65 	.word	0x0800cc65
 800cbcc:	0800cc65 	.word	0x0800cc65
 800cbd0:	0800cc65 	.word	0x0800cc65
 800cbd4:	0800cc65 	.word	0x0800cc65
 800cbd8:	0800cc65 	.word	0x0800cc65
 800cbdc:	0800cc65 	.word	0x0800cc65
 800cbe0:	0800cc65 	.word	0x0800cc65
 800cbe4:	0800cc57 	.word	0x0800cc57
 800cbe8:	2b40      	cmp	r3, #64	; 0x40
 800cbea:	d037      	beq.n	800cc5c <UART_SetConfig+0xc44>
 800cbec:	e03a      	b.n	800cc64 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbee:	f7fb faa7 	bl	8008140 <HAL_RCC_GetPCLK1Freq>
 800cbf2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cbf4:	e03c      	b.n	800cc70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cbf6:	f7fb fab9 	bl	800816c <HAL_RCC_GetPCLK2Freq>
 800cbfa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cbfc:	e038      	b.n	800cc70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7fc fc7e 	bl	8009504 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc0c:	e030      	b.n	800cc70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc0e:	f107 0318 	add.w	r3, r7, #24
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7fc fdca 	bl	80097ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc1c:	e028      	b.n	800cc70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc1e:	4b09      	ldr	r3, [pc, #36]	; (800cc44 <UART_SetConfig+0xc2c>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f003 0320 	and.w	r3, r3, #32
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d012      	beq.n	800cc50 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cc2a:	4b06      	ldr	r3, [pc, #24]	; (800cc44 <UART_SetConfig+0xc2c>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	08db      	lsrs	r3, r3, #3
 800cc30:	f003 0303 	and.w	r3, r3, #3
 800cc34:	4a04      	ldr	r2, [pc, #16]	; (800cc48 <UART_SetConfig+0xc30>)
 800cc36:	fa22 f303 	lsr.w	r3, r2, r3
 800cc3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cc3c:	e018      	b.n	800cc70 <UART_SetConfig+0xc58>
 800cc3e:	bf00      	nop
 800cc40:	0800defc 	.word	0x0800defc
 800cc44:	58024400 	.word	0x58024400
 800cc48:	03d09000 	.word	0x03d09000
 800cc4c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800cc50:	4b24      	ldr	r3, [pc, #144]	; (800cce4 <UART_SetConfig+0xccc>)
 800cc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc54:	e00c      	b.n	800cc70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cc56:	4b24      	ldr	r3, [pc, #144]	; (800cce8 <UART_SetConfig+0xcd0>)
 800cc58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc5a:	e009      	b.n	800cc70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc62:	e005      	b.n	800cc70 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800cc64:	2300      	movs	r3, #0
 800cc66:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cc6e:	bf00      	nop
    }

    if (pclk != 0U)
 800cc70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d021      	beq.n	800ccba <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc7a:	4a1c      	ldr	r2, [pc, #112]	; (800ccec <UART_SetConfig+0xcd4>)
 800cc7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc80:	461a      	mov	r2, r3
 800cc82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc84:	fbb3 f2f2 	udiv	r2, r3, r2
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	085b      	lsrs	r3, r3, #1
 800cc8e:	441a      	add	r2, r3
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc98:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9c:	2b0f      	cmp	r3, #15
 800cc9e:	d909      	bls.n	800ccb4 <UART_SetConfig+0xc9c>
 800cca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cca6:	d205      	bcs.n	800ccb4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccaa:	b29a      	uxth	r2, r3
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	60da      	str	r2, [r3, #12]
 800ccb2:	e002      	b.n	800ccba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	2200      	movs	r2, #0
 800ccce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ccd6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3748      	adds	r7, #72	; 0x48
 800ccde:	46bd      	mov	sp, r7
 800cce0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cce4:	03d09000 	.word	0x03d09000
 800cce8:	003d0900 	.word	0x003d0900
 800ccec:	0800defc 	.word	0x0800defc

0800ccf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b083      	sub	sp, #12
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccfc:	f003 0301 	and.w	r3, r3, #1
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d00a      	beq.n	800cd1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	430a      	orrs	r2, r1
 800cd18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd1e:	f003 0302 	and.w	r3, r3, #2
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d00a      	beq.n	800cd3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	430a      	orrs	r2, r1
 800cd3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd40:	f003 0304 	and.w	r3, r3, #4
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d00a      	beq.n	800cd5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	430a      	orrs	r2, r1
 800cd5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd62:	f003 0308 	and.w	r3, r3, #8
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d00a      	beq.n	800cd80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	685b      	ldr	r3, [r3, #4]
 800cd70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	430a      	orrs	r2, r1
 800cd7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd84:	f003 0310 	and.w	r3, r3, #16
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d00a      	beq.n	800cda2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	689b      	ldr	r3, [r3, #8]
 800cd92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	430a      	orrs	r2, r1
 800cda0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cda6:	f003 0320 	and.w	r3, r3, #32
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00a      	beq.n	800cdc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	689b      	ldr	r3, [r3, #8]
 800cdb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	430a      	orrs	r2, r1
 800cdc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d01a      	beq.n	800ce06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	430a      	orrs	r2, r1
 800cde4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdee:	d10a      	bne.n	800ce06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	430a      	orrs	r2, r1
 800ce04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00a      	beq.n	800ce28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	430a      	orrs	r2, r1
 800ce26:	605a      	str	r2, [r3, #4]
  }
}
 800ce28:	bf00      	nop
 800ce2a:	370c      	adds	r7, #12
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b098      	sub	sp, #96	; 0x60
 800ce38:	af02      	add	r7, sp, #8
 800ce3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ce44:	f7f7 f8f0 	bl	8004028 <HAL_GetTick>
 800ce48:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f003 0308 	and.w	r3, r3, #8
 800ce54:	2b08      	cmp	r3, #8
 800ce56:	d12f      	bne.n	800ceb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ce5c:	9300      	str	r3, [sp, #0]
 800ce5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce60:	2200      	movs	r2, #0
 800ce62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f000 f88e 	bl	800cf88 <UART_WaitOnFlagUntilTimeout>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d022      	beq.n	800ceb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce7a:	e853 3f00 	ldrex	r3, [r3]
 800ce7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce86:	653b      	str	r3, [r7, #80]	; 0x50
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce90:	647b      	str	r3, [r7, #68]	; 0x44
 800ce92:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce98:	e841 2300 	strex	r3, r2, [r1]
 800ce9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d1e6      	bne.n	800ce72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2220      	movs	r2, #32
 800cea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ceb4:	2303      	movs	r3, #3
 800ceb6:	e063      	b.n	800cf80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f003 0304 	and.w	r3, r3, #4
 800cec2:	2b04      	cmp	r3, #4
 800cec4:	d149      	bne.n	800cf5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cec6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ceca:	9300      	str	r3, [sp, #0]
 800cecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cece:	2200      	movs	r2, #0
 800ced0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 f857 	bl	800cf88 <UART_WaitOnFlagUntilTimeout>
 800ceda:	4603      	mov	r3, r0
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d03c      	beq.n	800cf5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee8:	e853 3f00 	ldrex	r3, [r3]
 800ceec:	623b      	str	r3, [r7, #32]
   return(result);
 800ceee:	6a3b      	ldr	r3, [r7, #32]
 800cef0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cef4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	461a      	mov	r2, r3
 800cefc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cefe:	633b      	str	r3, [r7, #48]	; 0x30
 800cf00:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf06:	e841 2300 	strex	r3, r2, [r1]
 800cf0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cf0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d1e6      	bne.n	800cee0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	3308      	adds	r3, #8
 800cf18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	e853 3f00 	ldrex	r3, [r3]
 800cf20:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	f023 0301 	bic.w	r3, r3, #1
 800cf28:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	3308      	adds	r3, #8
 800cf30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf32:	61fa      	str	r2, [r7, #28]
 800cf34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf36:	69b9      	ldr	r1, [r7, #24]
 800cf38:	69fa      	ldr	r2, [r7, #28]
 800cf3a:	e841 2300 	strex	r3, r2, [r1]
 800cf3e:	617b      	str	r3, [r7, #20]
   return(result);
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d1e5      	bne.n	800cf12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2220      	movs	r2, #32
 800cf4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2200      	movs	r2, #0
 800cf52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf56:	2303      	movs	r3, #3
 800cf58:	e012      	b.n	800cf80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2220      	movs	r2, #32
 800cf5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2220      	movs	r2, #32
 800cf66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cf7e:	2300      	movs	r3, #0
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3758      	adds	r7, #88	; 0x58
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}

0800cf88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b084      	sub	sp, #16
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	60b9      	str	r1, [r7, #8]
 800cf92:	603b      	str	r3, [r7, #0]
 800cf94:	4613      	mov	r3, r2
 800cf96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf98:	e049      	b.n	800d02e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf9a:	69bb      	ldr	r3, [r7, #24]
 800cf9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa0:	d045      	beq.n	800d02e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cfa2:	f7f7 f841 	bl	8004028 <HAL_GetTick>
 800cfa6:	4602      	mov	r2, r0
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	1ad3      	subs	r3, r2, r3
 800cfac:	69ba      	ldr	r2, [r7, #24]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d302      	bcc.n	800cfb8 <UART_WaitOnFlagUntilTimeout+0x30>
 800cfb2:	69bb      	ldr	r3, [r7, #24]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d101      	bne.n	800cfbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cfb8:	2303      	movs	r3, #3
 800cfba:	e048      	b.n	800d04e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f003 0304 	and.w	r3, r3, #4
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d031      	beq.n	800d02e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	69db      	ldr	r3, [r3, #28]
 800cfd0:	f003 0308 	and.w	r3, r3, #8
 800cfd4:	2b08      	cmp	r3, #8
 800cfd6:	d110      	bne.n	800cffa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2208      	movs	r2, #8
 800cfde:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800cfe0:	68f8      	ldr	r0, [r7, #12]
 800cfe2:	f000 f921 	bl	800d228 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2208      	movs	r2, #8
 800cfea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2200      	movs	r2, #0
 800cff2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800cff6:	2301      	movs	r3, #1
 800cff8:	e029      	b.n	800d04e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	69db      	ldr	r3, [r3, #28]
 800d000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d008:	d111      	bne.n	800d02e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d012:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d014:	68f8      	ldr	r0, [r7, #12]
 800d016:	f000 f907 	bl	800d228 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2220      	movs	r2, #32
 800d01e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2200      	movs	r2, #0
 800d026:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d02a:	2303      	movs	r3, #3
 800d02c:	e00f      	b.n	800d04e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	69da      	ldr	r2, [r3, #28]
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	4013      	ands	r3, r2
 800d038:	68ba      	ldr	r2, [r7, #8]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	bf0c      	ite	eq
 800d03e:	2301      	moveq	r3, #1
 800d040:	2300      	movne	r3, #0
 800d042:	b2db      	uxtb	r3, r3
 800d044:	461a      	mov	r2, r3
 800d046:	79fb      	ldrb	r3, [r7, #7]
 800d048:	429a      	cmp	r2, r3
 800d04a:	d0a6      	beq.n	800cf9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3710      	adds	r7, #16
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
	...

0800d058 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b096      	sub	sp, #88	; 0x58
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	4613      	mov	r3, r2
 800d064:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	68ba      	ldr	r2, [r7, #8]
 800d06a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	88fa      	ldrh	r2, [r7, #6]
 800d070:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	2200      	movs	r2, #0
 800d078:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2222      	movs	r2, #34	; 0x22
 800d080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d02d      	beq.n	800d0ea <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d094:	4a40      	ldr	r2, [pc, #256]	; (800d198 <UART_Start_Receive_DMA+0x140>)
 800d096:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d09e:	4a3f      	ldr	r2, [pc, #252]	; (800d19c <UART_Start_Receive_DMA+0x144>)
 800d0a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0a8:	4a3d      	ldr	r2, [pc, #244]	; (800d1a0 <UART_Start_Receive_DMA+0x148>)
 800d0aa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	3324      	adds	r3, #36	; 0x24
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	88fb      	ldrh	r3, [r7, #6]
 800d0cc:	f7f7 fc22 	bl	8004914 <HAL_DMA_Start_IT>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d009      	beq.n	800d0ea <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2210      	movs	r2, #16
 800d0da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2220      	movs	r2, #32
 800d0e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	e051      	b.n	800d18e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	691b      	ldr	r3, [r3, #16]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d018      	beq.n	800d124 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0fa:	e853 3f00 	ldrex	r3, [r3]
 800d0fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d106:	657b      	str	r3, [r7, #84]	; 0x54
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	461a      	mov	r2, r3
 800d10e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d110:	64bb      	str	r3, [r7, #72]	; 0x48
 800d112:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d114:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d116:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d118:	e841 2300 	strex	r3, r2, [r1]
 800d11c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d11e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d120:	2b00      	cmp	r3, #0
 800d122:	d1e6      	bne.n	800d0f2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	3308      	adds	r3, #8
 800d12a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12e:	e853 3f00 	ldrex	r3, [r3]
 800d132:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d136:	f043 0301 	orr.w	r3, r3, #1
 800d13a:	653b      	str	r3, [r7, #80]	; 0x50
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	3308      	adds	r3, #8
 800d142:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d144:	637a      	str	r2, [r7, #52]	; 0x34
 800d146:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d148:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d14a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d14c:	e841 2300 	strex	r3, r2, [r1]
 800d150:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d154:	2b00      	cmp	r3, #0
 800d156:	d1e5      	bne.n	800d124 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	3308      	adds	r3, #8
 800d15e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	e853 3f00 	ldrex	r3, [r3]
 800d166:	613b      	str	r3, [r7, #16]
   return(result);
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d16e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	3308      	adds	r3, #8
 800d176:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d178:	623a      	str	r2, [r7, #32]
 800d17a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d17c:	69f9      	ldr	r1, [r7, #28]
 800d17e:	6a3a      	ldr	r2, [r7, #32]
 800d180:	e841 2300 	strex	r3, r2, [r1]
 800d184:	61bb      	str	r3, [r7, #24]
   return(result);
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d1e5      	bne.n	800d158 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3758      	adds	r7, #88	; 0x58
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop
 800d198:	0800d3a7 	.word	0x0800d3a7
 800d19c:	0800d4cf 	.word	0x0800d4cf
 800d1a0:	0800d50d 	.word	0x0800d50d

0800d1a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b08f      	sub	sp, #60	; 0x3c
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1b2:	6a3b      	ldr	r3, [r7, #32]
 800d1b4:	e853 3f00 	ldrex	r3, [r3]
 800d1b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1ba:	69fb      	ldr	r3, [r7, #28]
 800d1bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d1c0:	637b      	str	r3, [r7, #52]	; 0x34
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1cc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1d2:	e841 2300 	strex	r3, r2, [r1]
 800d1d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d1e6      	bne.n	800d1ac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	3308      	adds	r3, #8
 800d1e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	e853 3f00 	ldrex	r3, [r3]
 800d1ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d1f4:	633b      	str	r3, [r7, #48]	; 0x30
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	3308      	adds	r3, #8
 800d1fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1fe:	61ba      	str	r2, [r7, #24]
 800d200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d202:	6979      	ldr	r1, [r7, #20]
 800d204:	69ba      	ldr	r2, [r7, #24]
 800d206:	e841 2300 	strex	r3, r2, [r1]
 800d20a:	613b      	str	r3, [r7, #16]
   return(result);
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d1e5      	bne.n	800d1de <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2220      	movs	r2, #32
 800d216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800d21a:	bf00      	nop
 800d21c:	373c      	adds	r7, #60	; 0x3c
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr
	...

0800d228 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d228:	b480      	push	{r7}
 800d22a:	b095      	sub	sp, #84	; 0x54
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d238:	e853 3f00 	ldrex	r3, [r3]
 800d23c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d240:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d244:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	461a      	mov	r2, r3
 800d24c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d24e:	643b      	str	r3, [r7, #64]	; 0x40
 800d250:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d252:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d254:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d256:	e841 2300 	strex	r3, r2, [r1]
 800d25a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d1e6      	bne.n	800d230 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	3308      	adds	r3, #8
 800d268:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d26a:	6a3b      	ldr	r3, [r7, #32]
 800d26c:	e853 3f00 	ldrex	r3, [r3]
 800d270:	61fb      	str	r3, [r7, #28]
   return(result);
 800d272:	69fa      	ldr	r2, [r7, #28]
 800d274:	4b1e      	ldr	r3, [pc, #120]	; (800d2f0 <UART_EndRxTransfer+0xc8>)
 800d276:	4013      	ands	r3, r2
 800d278:	64bb      	str	r3, [r7, #72]	; 0x48
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	3308      	adds	r3, #8
 800d280:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d282:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d284:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d286:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d28a:	e841 2300 	strex	r3, r2, [r1]
 800d28e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d292:	2b00      	cmp	r3, #0
 800d294:	d1e5      	bne.n	800d262 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	d118      	bne.n	800d2d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	e853 3f00 	ldrex	r3, [r3]
 800d2aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	f023 0310 	bic.w	r3, r3, #16
 800d2b2:	647b      	str	r3, [r7, #68]	; 0x44
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2bc:	61bb      	str	r3, [r7, #24]
 800d2be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2c0:	6979      	ldr	r1, [r7, #20]
 800d2c2:	69ba      	ldr	r2, [r7, #24]
 800d2c4:	e841 2300 	strex	r3, r2, [r1]
 800d2c8:	613b      	str	r3, [r7, #16]
   return(result);
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d1e6      	bne.n	800d29e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2220      	movs	r2, #32
 800d2d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d2e4:	bf00      	nop
 800d2e6:	3754      	adds	r7, #84	; 0x54
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr
 800d2f0:	effffffe 	.word	0xeffffffe

0800d2f4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b090      	sub	sp, #64	; 0x40
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d300:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	69db      	ldr	r3, [r3, #28]
 800d306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d30a:	d037      	beq.n	800d37c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d30c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d30e:	2200      	movs	r2, #0
 800d310:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	3308      	adds	r3, #8
 800d31a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31e:	e853 3f00 	ldrex	r3, [r3]
 800d322:	623b      	str	r3, [r7, #32]
   return(result);
 800d324:	6a3b      	ldr	r3, [r7, #32]
 800d326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d32a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d32c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	3308      	adds	r3, #8
 800d332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d334:	633a      	str	r2, [r7, #48]	; 0x30
 800d336:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d338:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d33a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d33c:	e841 2300 	strex	r3, r2, [r1]
 800d340:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d344:	2b00      	cmp	r3, #0
 800d346:	d1e5      	bne.n	800d314 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	e853 3f00 	ldrex	r3, [r3]
 800d354:	60fb      	str	r3, [r7, #12]
   return(result);
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d35c:	637b      	str	r3, [r7, #52]	; 0x34
 800d35e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	461a      	mov	r2, r3
 800d364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d366:	61fb      	str	r3, [r7, #28]
 800d368:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d36a:	69b9      	ldr	r1, [r7, #24]
 800d36c:	69fa      	ldr	r2, [r7, #28]
 800d36e:	e841 2300 	strex	r3, r2, [r1]
 800d372:	617b      	str	r3, [r7, #20]
   return(result);
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d1e6      	bne.n	800d348 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d37a:	e002      	b.n	800d382 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d37c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d37e:	f7f5 fbaf 	bl	8002ae0 <HAL_UART_TxCpltCallback>
}
 800d382:	bf00      	nop
 800d384:	3740      	adds	r7, #64	; 0x40
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}

0800d38a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b084      	sub	sp, #16
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d396:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d398:	68f8      	ldr	r0, [r7, #12]
 800d39a:	f7fe fe09 	bl	800bfb0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d39e:	bf00      	nop
 800d3a0:	3710      	adds	r7, #16
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}

0800d3a6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b09c      	sub	sp, #112	; 0x70
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3b2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	69db      	ldr	r3, [r3, #28]
 800d3b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3bc:	d071      	beq.n	800d4a2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d3be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d3c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3ce:	e853 3f00 	ldrex	r3, [r3]
 800d3d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d3d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3da:	66bb      	str	r3, [r7, #104]	; 0x68
 800d3dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	461a      	mov	r2, r3
 800d3e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d3e4:	65bb      	str	r3, [r7, #88]	; 0x58
 800d3e6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d3ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d3ec:	e841 2300 	strex	r3, r2, [r1]
 800d3f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d3f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d1e6      	bne.n	800d3c6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	3308      	adds	r3, #8
 800d3fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d402:	e853 3f00 	ldrex	r3, [r3]
 800d406:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d40a:	f023 0301 	bic.w	r3, r3, #1
 800d40e:	667b      	str	r3, [r7, #100]	; 0x64
 800d410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	3308      	adds	r3, #8
 800d416:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d418:	647a      	str	r2, [r7, #68]	; 0x44
 800d41a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d41e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d420:	e841 2300 	strex	r3, r2, [r1]
 800d424:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1e5      	bne.n	800d3f8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d42c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	3308      	adds	r3, #8
 800d432:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d436:	e853 3f00 	ldrex	r3, [r3]
 800d43a:	623b      	str	r3, [r7, #32]
   return(result);
 800d43c:	6a3b      	ldr	r3, [r7, #32]
 800d43e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d442:	663b      	str	r3, [r7, #96]	; 0x60
 800d444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	3308      	adds	r3, #8
 800d44a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d44c:	633a      	str	r2, [r7, #48]	; 0x30
 800d44e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d450:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d454:	e841 2300 	strex	r3, r2, [r1]
 800d458:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d1e5      	bne.n	800d42c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d462:	2220      	movs	r2, #32
 800d464:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d118      	bne.n	800d4a2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	e853 3f00 	ldrex	r3, [r3]
 800d47c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f023 0310 	bic.w	r3, r3, #16
 800d484:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	461a      	mov	r2, r3
 800d48c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d48e:	61fb      	str	r3, [r7, #28]
 800d490:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d492:	69b9      	ldr	r1, [r7, #24]
 800d494:	69fa      	ldr	r2, [r7, #28]
 800d496:	e841 2300 	strex	r3, r2, [r1]
 800d49a:	617b      	str	r3, [r7, #20]
   return(result);
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d1e6      	bne.n	800d470 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d4a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d107      	bne.n	800d4c0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d4b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d4ba:	f7fe fda1 	bl	800c000 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d4be:	e002      	b.n	800d4c6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800d4c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d4c2:	f7fe fd7f 	bl	800bfc4 <HAL_UART_RxCpltCallback>
}
 800d4c6:	bf00      	nop
 800d4c8:	3770      	adds	r7, #112	; 0x70
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}

0800d4ce <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d4ce:	b580      	push	{r7, lr}
 800d4d0:	b084      	sub	sp, #16
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4da:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	d109      	bne.n	800d4fe <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d4f0:	085b      	lsrs	r3, r3, #1
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	68f8      	ldr	r0, [r7, #12]
 800d4f8:	f7fe fd82 	bl	800c000 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d4fc:	e002      	b.n	800d504 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d4fe:	68f8      	ldr	r0, [r7, #12]
 800d500:	f7fe fd6a 	bl	800bfd8 <HAL_UART_RxHalfCpltCallback>
}
 800d504:	bf00      	nop
 800d506:	3710      	adds	r7, #16
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b086      	sub	sp, #24
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d518:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d520:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d528:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	689b      	ldr	r3, [r3, #8]
 800d530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d534:	2b80      	cmp	r3, #128	; 0x80
 800d536:	d109      	bne.n	800d54c <UART_DMAError+0x40>
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	2b21      	cmp	r3, #33	; 0x21
 800d53c:	d106      	bne.n	800d54c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	2200      	movs	r2, #0
 800d542:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d546:	6978      	ldr	r0, [r7, #20]
 800d548:	f7ff fe2c 	bl	800d1a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	689b      	ldr	r3, [r3, #8]
 800d552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d556:	2b40      	cmp	r3, #64	; 0x40
 800d558:	d109      	bne.n	800d56e <UART_DMAError+0x62>
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	2b22      	cmp	r3, #34	; 0x22
 800d55e:	d106      	bne.n	800d56e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	2200      	movs	r2, #0
 800d564:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d568:	6978      	ldr	r0, [r7, #20]
 800d56a:	f7ff fe5d 	bl	800d228 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d574:	f043 0210 	orr.w	r2, r3, #16
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d57e:	6978      	ldr	r0, [r7, #20]
 800d580:	f7fe fd34 	bl	800bfec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d584:	bf00      	nop
 800d586:	3718      	adds	r7, #24
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d598:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2200      	movs	r2, #0
 800d59e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d5aa:	68f8      	ldr	r0, [r7, #12]
 800d5ac:	f7fe fd1e 	bl	800bfec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5b0:	bf00      	nop
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b088      	sub	sp, #32
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	e853 3f00 	ldrex	r3, [r3]
 800d5cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5d4:	61fb      	str	r3, [r7, #28]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	461a      	mov	r2, r3
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	61bb      	str	r3, [r7, #24]
 800d5e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e2:	6979      	ldr	r1, [r7, #20]
 800d5e4:	69ba      	ldr	r2, [r7, #24]
 800d5e6:	e841 2300 	strex	r3, r2, [r1]
 800d5ea:	613b      	str	r3, [r7, #16]
   return(result);
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d1e6      	bne.n	800d5c0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2220      	movs	r2, #32
 800d5f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f7f5 fa6d 	bl	8002ae0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d606:	bf00      	nop
 800d608:	3720      	adds	r7, #32
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}

0800d60e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d60e:	b480      	push	{r7}
 800d610:	b083      	sub	sp, #12
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d616:	bf00      	nop
 800d618:	370c      	adds	r7, #12
 800d61a:	46bd      	mov	sp, r7
 800d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d620:	4770      	bx	lr

0800d622 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d622:	b480      	push	{r7}
 800d624:	b083      	sub	sp, #12
 800d626:	af00      	add	r7, sp, #0
 800d628:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d62a:	bf00      	nop
 800d62c:	370c      	adds	r7, #12
 800d62e:	46bd      	mov	sp, r7
 800d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d634:	4770      	bx	lr

0800d636 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d636:	b480      	push	{r7}
 800d638:	b083      	sub	sp, #12
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d63e:	bf00      	nop
 800d640:	370c      	adds	r7, #12
 800d642:	46bd      	mov	sp, r7
 800d644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d648:	4770      	bx	lr

0800d64a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d64a:	b480      	push	{r7}
 800d64c:	b085      	sub	sp, #20
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d101      	bne.n	800d660 <HAL_UARTEx_DisableFifoMode+0x16>
 800d65c:	2302      	movs	r3, #2
 800d65e:	e027      	b.n	800d6b0 <HAL_UARTEx_DisableFifoMode+0x66>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2201      	movs	r2, #1
 800d664:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2224      	movs	r2, #36	; 0x24
 800d66c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f022 0201 	bic.w	r2, r2, #1
 800d686:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d68e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2200      	movs	r2, #0
 800d694:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	68fa      	ldr	r2, [r7, #12]
 800d69c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2220      	movs	r2, #32
 800d6a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d6ae:	2300      	movs	r3, #0
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3714      	adds	r7, #20
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr

0800d6bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	d101      	bne.n	800d6d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d6d0:	2302      	movs	r3, #2
 800d6d2:	e02d      	b.n	800d730 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2224      	movs	r2, #36	; 0x24
 800d6e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	681a      	ldr	r2, [r3, #0]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f022 0201 	bic.w	r2, r2, #1
 800d6fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	689b      	ldr	r3, [r3, #8]
 800d702:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	683a      	ldr	r2, [r7, #0]
 800d70c:	430a      	orrs	r2, r1
 800d70e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 f84f 	bl	800d7b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	68fa      	ldr	r2, [r7, #12]
 800d71c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2220      	movs	r2, #32
 800d722:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2200      	movs	r2, #0
 800d72a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d72e:	2300      	movs	r3, #0
}
 800d730:	4618      	mov	r0, r3
 800d732:	3710      	adds	r7, #16
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d101      	bne.n	800d750 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d74c:	2302      	movs	r3, #2
 800d74e:	e02d      	b.n	800d7ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2201      	movs	r2, #1
 800d754:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2224      	movs	r2, #36	; 0x24
 800d75c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	681a      	ldr	r2, [r3, #0]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f022 0201 	bic.w	r2, r2, #1
 800d776:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	689b      	ldr	r3, [r3, #8]
 800d77e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	683a      	ldr	r2, [r7, #0]
 800d788:	430a      	orrs	r2, r1
 800d78a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f000 f811 	bl	800d7b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	68fa      	ldr	r2, [r7, #12]
 800d798:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2220      	movs	r2, #32
 800d79e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3710      	adds	r7, #16
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b085      	sub	sp, #20
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d108      	bne.n	800d7d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d7d4:	e031      	b.n	800d83a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d7d6:	2310      	movs	r3, #16
 800d7d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d7da:	2310      	movs	r3, #16
 800d7dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	689b      	ldr	r3, [r3, #8]
 800d7e4:	0e5b      	lsrs	r3, r3, #25
 800d7e6:	b2db      	uxtb	r3, r3
 800d7e8:	f003 0307 	and.w	r3, r3, #7
 800d7ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	689b      	ldr	r3, [r3, #8]
 800d7f4:	0f5b      	lsrs	r3, r3, #29
 800d7f6:	b2db      	uxtb	r3, r3
 800d7f8:	f003 0307 	and.w	r3, r3, #7
 800d7fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d7fe:	7bbb      	ldrb	r3, [r7, #14]
 800d800:	7b3a      	ldrb	r2, [r7, #12]
 800d802:	4911      	ldr	r1, [pc, #68]	; (800d848 <UARTEx_SetNbDataToProcess+0x94>)
 800d804:	5c8a      	ldrb	r2, [r1, r2]
 800d806:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d80a:	7b3a      	ldrb	r2, [r7, #12]
 800d80c:	490f      	ldr	r1, [pc, #60]	; (800d84c <UARTEx_SetNbDataToProcess+0x98>)
 800d80e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d810:	fb93 f3f2 	sdiv	r3, r3, r2
 800d814:	b29a      	uxth	r2, r3
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d81c:	7bfb      	ldrb	r3, [r7, #15]
 800d81e:	7b7a      	ldrb	r2, [r7, #13]
 800d820:	4909      	ldr	r1, [pc, #36]	; (800d848 <UARTEx_SetNbDataToProcess+0x94>)
 800d822:	5c8a      	ldrb	r2, [r1, r2]
 800d824:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d828:	7b7a      	ldrb	r2, [r7, #13]
 800d82a:	4908      	ldr	r1, [pc, #32]	; (800d84c <UARTEx_SetNbDataToProcess+0x98>)
 800d82c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d82e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d832:	b29a      	uxth	r2, r3
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d83a:	bf00      	nop
 800d83c:	3714      	adds	r7, #20
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr
 800d846:	bf00      	nop
 800d848:	0800df14 	.word	0x0800df14
 800d84c:	0800df1c 	.word	0x0800df1c

0800d850 <__cxa_pure_virtual>:
 800d850:	b508      	push	{r3, lr}
 800d852:	f000 f80d 	bl	800d870 <_ZSt9terminatev>

0800d856 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d856:	b508      	push	{r3, lr}
 800d858:	4780      	blx	r0
 800d85a:	f000 f80e 	bl	800d87a <abort>
	...

0800d860 <_ZSt13get_terminatev>:
 800d860:	4b02      	ldr	r3, [pc, #8]	; (800d86c <_ZSt13get_terminatev+0xc>)
 800d862:	6818      	ldr	r0, [r3, #0]
 800d864:	f3bf 8f5b 	dmb	ish
 800d868:	4770      	bx	lr
 800d86a:	bf00      	nop
 800d86c:	24000010 	.word	0x24000010

0800d870 <_ZSt9terminatev>:
 800d870:	b508      	push	{r3, lr}
 800d872:	f7ff fff5 	bl	800d860 <_ZSt13get_terminatev>
 800d876:	f7ff ffee 	bl	800d856 <_ZN10__cxxabiv111__terminateEPFvvE>

0800d87a <abort>:
 800d87a:	b508      	push	{r3, lr}
 800d87c:	2006      	movs	r0, #6
 800d87e:	f000 f873 	bl	800d968 <raise>
 800d882:	2001      	movs	r0, #1
 800d884:	f7f6 fa68 	bl	8003d58 <_exit>

0800d888 <__errno>:
 800d888:	4b01      	ldr	r3, [pc, #4]	; (800d890 <__errno+0x8>)
 800d88a:	6818      	ldr	r0, [r3, #0]
 800d88c:	4770      	bx	lr
 800d88e:	bf00      	nop
 800d890:	24000014 	.word	0x24000014

0800d894 <__libc_init_array>:
 800d894:	b570      	push	{r4, r5, r6, lr}
 800d896:	4d0d      	ldr	r5, [pc, #52]	; (800d8cc <__libc_init_array+0x38>)
 800d898:	4c0d      	ldr	r4, [pc, #52]	; (800d8d0 <__libc_init_array+0x3c>)
 800d89a:	1b64      	subs	r4, r4, r5
 800d89c:	10a4      	asrs	r4, r4, #2
 800d89e:	2600      	movs	r6, #0
 800d8a0:	42a6      	cmp	r6, r4
 800d8a2:	d109      	bne.n	800d8b8 <__libc_init_array+0x24>
 800d8a4:	4d0b      	ldr	r5, [pc, #44]	; (800d8d4 <__libc_init_array+0x40>)
 800d8a6:	4c0c      	ldr	r4, [pc, #48]	; (800d8d8 <__libc_init_array+0x44>)
 800d8a8:	f000 f9b0 	bl	800dc0c <_init>
 800d8ac:	1b64      	subs	r4, r4, r5
 800d8ae:	10a4      	asrs	r4, r4, #2
 800d8b0:	2600      	movs	r6, #0
 800d8b2:	42a6      	cmp	r6, r4
 800d8b4:	d105      	bne.n	800d8c2 <__libc_init_array+0x2e>
 800d8b6:	bd70      	pop	{r4, r5, r6, pc}
 800d8b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8bc:	4798      	blx	r3
 800d8be:	3601      	adds	r6, #1
 800d8c0:	e7ee      	b.n	800d8a0 <__libc_init_array+0xc>
 800d8c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8c6:	4798      	blx	r3
 800d8c8:	3601      	adds	r6, #1
 800d8ca:	e7f2      	b.n	800d8b2 <__libc_init_array+0x1e>
 800d8cc:	0800df2c 	.word	0x0800df2c
 800d8d0:	0800df2c 	.word	0x0800df2c
 800d8d4:	0800df2c 	.word	0x0800df2c
 800d8d8:	0800df34 	.word	0x0800df34

0800d8dc <memcpy>:
 800d8dc:	440a      	add	r2, r1
 800d8de:	4291      	cmp	r1, r2
 800d8e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d8e4:	d100      	bne.n	800d8e8 <memcpy+0xc>
 800d8e6:	4770      	bx	lr
 800d8e8:	b510      	push	{r4, lr}
 800d8ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8f2:	4291      	cmp	r1, r2
 800d8f4:	d1f9      	bne.n	800d8ea <memcpy+0xe>
 800d8f6:	bd10      	pop	{r4, pc}

0800d8f8 <memset>:
 800d8f8:	4402      	add	r2, r0
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d100      	bne.n	800d902 <memset+0xa>
 800d900:	4770      	bx	lr
 800d902:	f803 1b01 	strb.w	r1, [r3], #1
 800d906:	e7f9      	b.n	800d8fc <memset+0x4>

0800d908 <realloc>:
 800d908:	4b02      	ldr	r3, [pc, #8]	; (800d914 <realloc+0xc>)
 800d90a:	460a      	mov	r2, r1
 800d90c:	4601      	mov	r1, r0
 800d90e:	6818      	ldr	r0, [r3, #0]
 800d910:	f000 b8da 	b.w	800dac8 <_realloc_r>
 800d914:	24000014 	.word	0x24000014

0800d918 <_raise_r>:
 800d918:	291f      	cmp	r1, #31
 800d91a:	b538      	push	{r3, r4, r5, lr}
 800d91c:	4604      	mov	r4, r0
 800d91e:	460d      	mov	r5, r1
 800d920:	d904      	bls.n	800d92c <_raise_r+0x14>
 800d922:	2316      	movs	r3, #22
 800d924:	6003      	str	r3, [r0, #0]
 800d926:	f04f 30ff 	mov.w	r0, #4294967295
 800d92a:	bd38      	pop	{r3, r4, r5, pc}
 800d92c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d92e:	b112      	cbz	r2, 800d936 <_raise_r+0x1e>
 800d930:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d934:	b94b      	cbnz	r3, 800d94a <_raise_r+0x32>
 800d936:	4620      	mov	r0, r4
 800d938:	f000 f830 	bl	800d99c <_getpid_r>
 800d93c:	462a      	mov	r2, r5
 800d93e:	4601      	mov	r1, r0
 800d940:	4620      	mov	r0, r4
 800d942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d946:	f000 b817 	b.w	800d978 <_kill_r>
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	d00a      	beq.n	800d964 <_raise_r+0x4c>
 800d94e:	1c59      	adds	r1, r3, #1
 800d950:	d103      	bne.n	800d95a <_raise_r+0x42>
 800d952:	2316      	movs	r3, #22
 800d954:	6003      	str	r3, [r0, #0]
 800d956:	2001      	movs	r0, #1
 800d958:	e7e7      	b.n	800d92a <_raise_r+0x12>
 800d95a:	2400      	movs	r4, #0
 800d95c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d960:	4628      	mov	r0, r5
 800d962:	4798      	blx	r3
 800d964:	2000      	movs	r0, #0
 800d966:	e7e0      	b.n	800d92a <_raise_r+0x12>

0800d968 <raise>:
 800d968:	4b02      	ldr	r3, [pc, #8]	; (800d974 <raise+0xc>)
 800d96a:	4601      	mov	r1, r0
 800d96c:	6818      	ldr	r0, [r3, #0]
 800d96e:	f7ff bfd3 	b.w	800d918 <_raise_r>
 800d972:	bf00      	nop
 800d974:	24000014 	.word	0x24000014

0800d978 <_kill_r>:
 800d978:	b538      	push	{r3, r4, r5, lr}
 800d97a:	4d07      	ldr	r5, [pc, #28]	; (800d998 <_kill_r+0x20>)
 800d97c:	2300      	movs	r3, #0
 800d97e:	4604      	mov	r4, r0
 800d980:	4608      	mov	r0, r1
 800d982:	4611      	mov	r1, r2
 800d984:	602b      	str	r3, [r5, #0]
 800d986:	f7f6 f9d7 	bl	8003d38 <_kill>
 800d98a:	1c43      	adds	r3, r0, #1
 800d98c:	d102      	bne.n	800d994 <_kill_r+0x1c>
 800d98e:	682b      	ldr	r3, [r5, #0]
 800d990:	b103      	cbz	r3, 800d994 <_kill_r+0x1c>
 800d992:	6023      	str	r3, [r4, #0]
 800d994:	bd38      	pop	{r3, r4, r5, pc}
 800d996:	bf00      	nop
 800d998:	24000e20 	.word	0x24000e20

0800d99c <_getpid_r>:
 800d99c:	f7f6 b9c4 	b.w	8003d28 <_getpid>

0800d9a0 <sbrk_aligned>:
 800d9a0:	b570      	push	{r4, r5, r6, lr}
 800d9a2:	4e0e      	ldr	r6, [pc, #56]	; (800d9dc <sbrk_aligned+0x3c>)
 800d9a4:	460c      	mov	r4, r1
 800d9a6:	6831      	ldr	r1, [r6, #0]
 800d9a8:	4605      	mov	r5, r0
 800d9aa:	b911      	cbnz	r1, 800d9b2 <sbrk_aligned+0x12>
 800d9ac:	f000 f8bc 	bl	800db28 <_sbrk_r>
 800d9b0:	6030      	str	r0, [r6, #0]
 800d9b2:	4621      	mov	r1, r4
 800d9b4:	4628      	mov	r0, r5
 800d9b6:	f000 f8b7 	bl	800db28 <_sbrk_r>
 800d9ba:	1c43      	adds	r3, r0, #1
 800d9bc:	d00a      	beq.n	800d9d4 <sbrk_aligned+0x34>
 800d9be:	1cc4      	adds	r4, r0, #3
 800d9c0:	f024 0403 	bic.w	r4, r4, #3
 800d9c4:	42a0      	cmp	r0, r4
 800d9c6:	d007      	beq.n	800d9d8 <sbrk_aligned+0x38>
 800d9c8:	1a21      	subs	r1, r4, r0
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	f000 f8ac 	bl	800db28 <_sbrk_r>
 800d9d0:	3001      	adds	r0, #1
 800d9d2:	d101      	bne.n	800d9d8 <sbrk_aligned+0x38>
 800d9d4:	f04f 34ff 	mov.w	r4, #4294967295
 800d9d8:	4620      	mov	r0, r4
 800d9da:	bd70      	pop	{r4, r5, r6, pc}
 800d9dc:	24000e1c 	.word	0x24000e1c

0800d9e0 <_malloc_r>:
 800d9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9e4:	1ccd      	adds	r5, r1, #3
 800d9e6:	f025 0503 	bic.w	r5, r5, #3
 800d9ea:	3508      	adds	r5, #8
 800d9ec:	2d0c      	cmp	r5, #12
 800d9ee:	bf38      	it	cc
 800d9f0:	250c      	movcc	r5, #12
 800d9f2:	2d00      	cmp	r5, #0
 800d9f4:	4607      	mov	r7, r0
 800d9f6:	db01      	blt.n	800d9fc <_malloc_r+0x1c>
 800d9f8:	42a9      	cmp	r1, r5
 800d9fa:	d905      	bls.n	800da08 <_malloc_r+0x28>
 800d9fc:	230c      	movs	r3, #12
 800d9fe:	603b      	str	r3, [r7, #0]
 800da00:	2600      	movs	r6, #0
 800da02:	4630      	mov	r0, r6
 800da04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da08:	4e2e      	ldr	r6, [pc, #184]	; (800dac4 <_malloc_r+0xe4>)
 800da0a:	f000 f89d 	bl	800db48 <__malloc_lock>
 800da0e:	6833      	ldr	r3, [r6, #0]
 800da10:	461c      	mov	r4, r3
 800da12:	bb34      	cbnz	r4, 800da62 <_malloc_r+0x82>
 800da14:	4629      	mov	r1, r5
 800da16:	4638      	mov	r0, r7
 800da18:	f7ff ffc2 	bl	800d9a0 <sbrk_aligned>
 800da1c:	1c43      	adds	r3, r0, #1
 800da1e:	4604      	mov	r4, r0
 800da20:	d14d      	bne.n	800dabe <_malloc_r+0xde>
 800da22:	6834      	ldr	r4, [r6, #0]
 800da24:	4626      	mov	r6, r4
 800da26:	2e00      	cmp	r6, #0
 800da28:	d140      	bne.n	800daac <_malloc_r+0xcc>
 800da2a:	6823      	ldr	r3, [r4, #0]
 800da2c:	4631      	mov	r1, r6
 800da2e:	4638      	mov	r0, r7
 800da30:	eb04 0803 	add.w	r8, r4, r3
 800da34:	f000 f878 	bl	800db28 <_sbrk_r>
 800da38:	4580      	cmp	r8, r0
 800da3a:	d13a      	bne.n	800dab2 <_malloc_r+0xd2>
 800da3c:	6821      	ldr	r1, [r4, #0]
 800da3e:	3503      	adds	r5, #3
 800da40:	1a6d      	subs	r5, r5, r1
 800da42:	f025 0503 	bic.w	r5, r5, #3
 800da46:	3508      	adds	r5, #8
 800da48:	2d0c      	cmp	r5, #12
 800da4a:	bf38      	it	cc
 800da4c:	250c      	movcc	r5, #12
 800da4e:	4629      	mov	r1, r5
 800da50:	4638      	mov	r0, r7
 800da52:	f7ff ffa5 	bl	800d9a0 <sbrk_aligned>
 800da56:	3001      	adds	r0, #1
 800da58:	d02b      	beq.n	800dab2 <_malloc_r+0xd2>
 800da5a:	6823      	ldr	r3, [r4, #0]
 800da5c:	442b      	add	r3, r5
 800da5e:	6023      	str	r3, [r4, #0]
 800da60:	e00e      	b.n	800da80 <_malloc_r+0xa0>
 800da62:	6822      	ldr	r2, [r4, #0]
 800da64:	1b52      	subs	r2, r2, r5
 800da66:	d41e      	bmi.n	800daa6 <_malloc_r+0xc6>
 800da68:	2a0b      	cmp	r2, #11
 800da6a:	d916      	bls.n	800da9a <_malloc_r+0xba>
 800da6c:	1961      	adds	r1, r4, r5
 800da6e:	42a3      	cmp	r3, r4
 800da70:	6025      	str	r5, [r4, #0]
 800da72:	bf18      	it	ne
 800da74:	6059      	strne	r1, [r3, #4]
 800da76:	6863      	ldr	r3, [r4, #4]
 800da78:	bf08      	it	eq
 800da7a:	6031      	streq	r1, [r6, #0]
 800da7c:	5162      	str	r2, [r4, r5]
 800da7e:	604b      	str	r3, [r1, #4]
 800da80:	4638      	mov	r0, r7
 800da82:	f104 060b 	add.w	r6, r4, #11
 800da86:	f000 f865 	bl	800db54 <__malloc_unlock>
 800da8a:	f026 0607 	bic.w	r6, r6, #7
 800da8e:	1d23      	adds	r3, r4, #4
 800da90:	1af2      	subs	r2, r6, r3
 800da92:	d0b6      	beq.n	800da02 <_malloc_r+0x22>
 800da94:	1b9b      	subs	r3, r3, r6
 800da96:	50a3      	str	r3, [r4, r2]
 800da98:	e7b3      	b.n	800da02 <_malloc_r+0x22>
 800da9a:	6862      	ldr	r2, [r4, #4]
 800da9c:	42a3      	cmp	r3, r4
 800da9e:	bf0c      	ite	eq
 800daa0:	6032      	streq	r2, [r6, #0]
 800daa2:	605a      	strne	r2, [r3, #4]
 800daa4:	e7ec      	b.n	800da80 <_malloc_r+0xa0>
 800daa6:	4623      	mov	r3, r4
 800daa8:	6864      	ldr	r4, [r4, #4]
 800daaa:	e7b2      	b.n	800da12 <_malloc_r+0x32>
 800daac:	4634      	mov	r4, r6
 800daae:	6876      	ldr	r6, [r6, #4]
 800dab0:	e7b9      	b.n	800da26 <_malloc_r+0x46>
 800dab2:	230c      	movs	r3, #12
 800dab4:	603b      	str	r3, [r7, #0]
 800dab6:	4638      	mov	r0, r7
 800dab8:	f000 f84c 	bl	800db54 <__malloc_unlock>
 800dabc:	e7a1      	b.n	800da02 <_malloc_r+0x22>
 800dabe:	6025      	str	r5, [r4, #0]
 800dac0:	e7de      	b.n	800da80 <_malloc_r+0xa0>
 800dac2:	bf00      	nop
 800dac4:	24000e18 	.word	0x24000e18

0800dac8 <_realloc_r>:
 800dac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dacc:	4680      	mov	r8, r0
 800dace:	4614      	mov	r4, r2
 800dad0:	460e      	mov	r6, r1
 800dad2:	b921      	cbnz	r1, 800dade <_realloc_r+0x16>
 800dad4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dad8:	4611      	mov	r1, r2
 800dada:	f7ff bf81 	b.w	800d9e0 <_malloc_r>
 800dade:	b92a      	cbnz	r2, 800daec <_realloc_r+0x24>
 800dae0:	f000 f83e 	bl	800db60 <_free_r>
 800dae4:	4625      	mov	r5, r4
 800dae6:	4628      	mov	r0, r5
 800dae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daec:	f000 f884 	bl	800dbf8 <_malloc_usable_size_r>
 800daf0:	4284      	cmp	r4, r0
 800daf2:	4607      	mov	r7, r0
 800daf4:	d802      	bhi.n	800dafc <_realloc_r+0x34>
 800daf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dafa:	d812      	bhi.n	800db22 <_realloc_r+0x5a>
 800dafc:	4621      	mov	r1, r4
 800dafe:	4640      	mov	r0, r8
 800db00:	f7ff ff6e 	bl	800d9e0 <_malloc_r>
 800db04:	4605      	mov	r5, r0
 800db06:	2800      	cmp	r0, #0
 800db08:	d0ed      	beq.n	800dae6 <_realloc_r+0x1e>
 800db0a:	42bc      	cmp	r4, r7
 800db0c:	4622      	mov	r2, r4
 800db0e:	4631      	mov	r1, r6
 800db10:	bf28      	it	cs
 800db12:	463a      	movcs	r2, r7
 800db14:	f7ff fee2 	bl	800d8dc <memcpy>
 800db18:	4631      	mov	r1, r6
 800db1a:	4640      	mov	r0, r8
 800db1c:	f000 f820 	bl	800db60 <_free_r>
 800db20:	e7e1      	b.n	800dae6 <_realloc_r+0x1e>
 800db22:	4635      	mov	r5, r6
 800db24:	e7df      	b.n	800dae6 <_realloc_r+0x1e>
	...

0800db28 <_sbrk_r>:
 800db28:	b538      	push	{r3, r4, r5, lr}
 800db2a:	4d06      	ldr	r5, [pc, #24]	; (800db44 <_sbrk_r+0x1c>)
 800db2c:	2300      	movs	r3, #0
 800db2e:	4604      	mov	r4, r0
 800db30:	4608      	mov	r0, r1
 800db32:	602b      	str	r3, [r5, #0]
 800db34:	f7f6 f91a 	bl	8003d6c <_sbrk>
 800db38:	1c43      	adds	r3, r0, #1
 800db3a:	d102      	bne.n	800db42 <_sbrk_r+0x1a>
 800db3c:	682b      	ldr	r3, [r5, #0]
 800db3e:	b103      	cbz	r3, 800db42 <_sbrk_r+0x1a>
 800db40:	6023      	str	r3, [r4, #0]
 800db42:	bd38      	pop	{r3, r4, r5, pc}
 800db44:	24000e20 	.word	0x24000e20

0800db48 <__malloc_lock>:
 800db48:	4801      	ldr	r0, [pc, #4]	; (800db50 <__malloc_lock+0x8>)
 800db4a:	f000 b85d 	b.w	800dc08 <__retarget_lock_acquire_recursive>
 800db4e:	bf00      	nop
 800db50:	24000e24 	.word	0x24000e24

0800db54 <__malloc_unlock>:
 800db54:	4801      	ldr	r0, [pc, #4]	; (800db5c <__malloc_unlock+0x8>)
 800db56:	f000 b858 	b.w	800dc0a <__retarget_lock_release_recursive>
 800db5a:	bf00      	nop
 800db5c:	24000e24 	.word	0x24000e24

0800db60 <_free_r>:
 800db60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db62:	2900      	cmp	r1, #0
 800db64:	d044      	beq.n	800dbf0 <_free_r+0x90>
 800db66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db6a:	9001      	str	r0, [sp, #4]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	f1a1 0404 	sub.w	r4, r1, #4
 800db72:	bfb8      	it	lt
 800db74:	18e4      	addlt	r4, r4, r3
 800db76:	f7ff ffe7 	bl	800db48 <__malloc_lock>
 800db7a:	4a1e      	ldr	r2, [pc, #120]	; (800dbf4 <_free_r+0x94>)
 800db7c:	9801      	ldr	r0, [sp, #4]
 800db7e:	6813      	ldr	r3, [r2, #0]
 800db80:	b933      	cbnz	r3, 800db90 <_free_r+0x30>
 800db82:	6063      	str	r3, [r4, #4]
 800db84:	6014      	str	r4, [r2, #0]
 800db86:	b003      	add	sp, #12
 800db88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db8c:	f7ff bfe2 	b.w	800db54 <__malloc_unlock>
 800db90:	42a3      	cmp	r3, r4
 800db92:	d908      	bls.n	800dba6 <_free_r+0x46>
 800db94:	6825      	ldr	r5, [r4, #0]
 800db96:	1961      	adds	r1, r4, r5
 800db98:	428b      	cmp	r3, r1
 800db9a:	bf01      	itttt	eq
 800db9c:	6819      	ldreq	r1, [r3, #0]
 800db9e:	685b      	ldreq	r3, [r3, #4]
 800dba0:	1949      	addeq	r1, r1, r5
 800dba2:	6021      	streq	r1, [r4, #0]
 800dba4:	e7ed      	b.n	800db82 <_free_r+0x22>
 800dba6:	461a      	mov	r2, r3
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	b10b      	cbz	r3, 800dbb0 <_free_r+0x50>
 800dbac:	42a3      	cmp	r3, r4
 800dbae:	d9fa      	bls.n	800dba6 <_free_r+0x46>
 800dbb0:	6811      	ldr	r1, [r2, #0]
 800dbb2:	1855      	adds	r5, r2, r1
 800dbb4:	42a5      	cmp	r5, r4
 800dbb6:	d10b      	bne.n	800dbd0 <_free_r+0x70>
 800dbb8:	6824      	ldr	r4, [r4, #0]
 800dbba:	4421      	add	r1, r4
 800dbbc:	1854      	adds	r4, r2, r1
 800dbbe:	42a3      	cmp	r3, r4
 800dbc0:	6011      	str	r1, [r2, #0]
 800dbc2:	d1e0      	bne.n	800db86 <_free_r+0x26>
 800dbc4:	681c      	ldr	r4, [r3, #0]
 800dbc6:	685b      	ldr	r3, [r3, #4]
 800dbc8:	6053      	str	r3, [r2, #4]
 800dbca:	4421      	add	r1, r4
 800dbcc:	6011      	str	r1, [r2, #0]
 800dbce:	e7da      	b.n	800db86 <_free_r+0x26>
 800dbd0:	d902      	bls.n	800dbd8 <_free_r+0x78>
 800dbd2:	230c      	movs	r3, #12
 800dbd4:	6003      	str	r3, [r0, #0]
 800dbd6:	e7d6      	b.n	800db86 <_free_r+0x26>
 800dbd8:	6825      	ldr	r5, [r4, #0]
 800dbda:	1961      	adds	r1, r4, r5
 800dbdc:	428b      	cmp	r3, r1
 800dbde:	bf04      	itt	eq
 800dbe0:	6819      	ldreq	r1, [r3, #0]
 800dbe2:	685b      	ldreq	r3, [r3, #4]
 800dbe4:	6063      	str	r3, [r4, #4]
 800dbe6:	bf04      	itt	eq
 800dbe8:	1949      	addeq	r1, r1, r5
 800dbea:	6021      	streq	r1, [r4, #0]
 800dbec:	6054      	str	r4, [r2, #4]
 800dbee:	e7ca      	b.n	800db86 <_free_r+0x26>
 800dbf0:	b003      	add	sp, #12
 800dbf2:	bd30      	pop	{r4, r5, pc}
 800dbf4:	24000e18 	.word	0x24000e18

0800dbf8 <_malloc_usable_size_r>:
 800dbf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbfc:	1f18      	subs	r0, r3, #4
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	bfbc      	itt	lt
 800dc02:	580b      	ldrlt	r3, [r1, r0]
 800dc04:	18c0      	addlt	r0, r0, r3
 800dc06:	4770      	bx	lr

0800dc08 <__retarget_lock_acquire_recursive>:
 800dc08:	4770      	bx	lr

0800dc0a <__retarget_lock_release_recursive>:
 800dc0a:	4770      	bx	lr

0800dc0c <_init>:
 800dc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc0e:	bf00      	nop
 800dc10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc12:	bc08      	pop	{r3}
 800dc14:	469e      	mov	lr, r3
 800dc16:	4770      	bx	lr

0800dc18 <_fini>:
 800dc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc1a:	bf00      	nop
 800dc1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc1e:	bc08      	pop	{r3}
 800dc20:	469e      	mov	lr, r3
 800dc22:	4770      	bx	lr
