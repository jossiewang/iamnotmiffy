
0527_peanuts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e454  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  0800e724  0800e724  0001e724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ea24  0800ea24  0001ea24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800ea2c  0800ea2c  0001ea2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ea34  0800ea34  0001ea34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  0800ea38  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e88  240000a0  0800ead8  000200a0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000f28  0800ead8  00020f28  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f4c1  00000000  00000000  000200ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003369  00000000  00000000  0003f58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001470  00000000  00000000  000428f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001380  00000000  00000000  00043d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034eda  00000000  00000000  000450e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a88a  00000000  00000000  00079fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153408  00000000  00000000  0009484c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e7c54  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c28  00000000  00000000  001e7ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000a0 	.word	0x240000a0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800e70c 	.word	0x0800e70c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000a4 	.word	0x240000a4
 800030c:	0800e70c 	.word	0x0800e70c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000680:	f004 f9d6 	bl	8004a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000684:	f000 f852 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000688:	f000 fbca 	bl	8000e20 <MX_GPIO_Init>
  MX_DMA_Init();
 800068c:	f000 fba0 	bl	8000dd0 <MX_DMA_Init>
  MX_TIM3_Init();
 8000690:	f000 f97a 	bl	8000988 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000694:	f000 f9c6 	bl	8000a24 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000698:	f000 fa6a 	bl	8000b70 <MX_TIM8_Init>
  MX_TIM23_Init();
 800069c:	f000 faf6 	bl	8000c8c <MX_TIM23_Init>
  MX_TIM1_Init();
 80006a0:	f000 f8b4 	bl	800080c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80006a4:	f000 fb48 	bl	8000d38 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80006a8:	f000 f90a 	bl	80008c0 <MX_TIM2_Init>
  MX_TIM5_Init();
 80006ac:	f000 fa10 	bl	8000ad0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80006b0:	4817      	ldr	r0, [pc, #92]	; (8000710 <main+0x94>)
 80006b2:	f00a f915 	bl	800a8e0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80006b6:	4817      	ldr	r0, [pc, #92]	; (8000714 <main+0x98>)
 80006b8:	f00a f912 	bl	800a8e0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(TIM_ENC_MF, TIM_CHANNEL_1);
 80006bc:	2100      	movs	r1, #0
 80006be:	4816      	ldr	r0, [pc, #88]	; (8000718 <main+0x9c>)
 80006c0:	f00a fbae 	bl	800ae20 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(TIM_ENC_MF, TIM_CHANNEL_2);
 80006c4:	2104      	movs	r1, #4
 80006c6:	4814      	ldr	r0, [pc, #80]	; (8000718 <main+0x9c>)
 80006c8:	f00a fbaa 	bl	800ae20 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_ML, TIM_CHANNEL_1);
 80006cc:	2100      	movs	r1, #0
 80006ce:	4813      	ldr	r0, [pc, #76]	; (800071c <main+0xa0>)
 80006d0:	f00a fba6 	bl	800ae20 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_ML, TIM_CHANNEL_2);
 80006d4:	2104      	movs	r1, #4
 80006d6:	4811      	ldr	r0, [pc, #68]	; (800071c <main+0xa0>)
 80006d8:	f00a fba2 	bl	800ae20 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_MR, TIM_CHANNEL_1);
 80006dc:	2100      	movs	r1, #0
 80006de:	4810      	ldr	r0, [pc, #64]	; (8000720 <main+0xa4>)
 80006e0:	f00a fb9e 	bl	800ae20 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_MR, TIM_CHANNEL_2);
 80006e4:	2104      	movs	r1, #4
 80006e6:	480e      	ldr	r0, [pc, #56]	; (8000720 <main+0xa4>)
 80006e8:	f00a fb9a 	bl	800ae20 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(TIM_PWM_MF, CH_PWM_MF);
 80006ec:	2100      	movs	r1, #0
 80006ee:	480d      	ldr	r0, [pc, #52]	; (8000724 <main+0xa8>)
 80006f0:	f00a f9d4 	bl	800aa9c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(TIM_PWM_ML, CH_PWM_ML);
 80006f4:	210c      	movs	r1, #12
 80006f6:	480b      	ldr	r0, [pc, #44]	; (8000724 <main+0xa8>)
 80006f8:	f00a f9d0 	bl	800aa9c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(TIM_PWM_MR, CH_PWM_MR);
 80006fc:	2108      	movs	r1, #8
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <main+0xac>)
 8000700:	f00a f9cc 	bl	800aa9c <HAL_TIM_PWM_Start>
  	setup();
 8000704:	f002 ff1a 	bl	800353c <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000708:	f002 ff2e 	bl	8003568 <loop>
 800070c:	e7fc      	b.n	8000708 <main+0x8c>
 800070e:	bf00      	nop
 8000710:	24000154 	.word	0x24000154
 8000714:	240001ec 	.word	0x240001ec
 8000718:	240000bc 	.word	0x240000bc
 800071c:	240001a0 	.word	0x240001a0
 8000720:	24000284 	.word	0x24000284
 8000724:	24000108 	.word	0x24000108
 8000728:	24000238 	.word	0x24000238

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b09c      	sub	sp, #112	; 0x70
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000736:	224c      	movs	r2, #76	; 0x4c
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f00d fe5c 	bl	800e3f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2220      	movs	r2, #32
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f00d fe56 	bl	800e3f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800074c:	2002      	movs	r0, #2
 800074e:	f007 fb0d 	bl	8007d6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b2c      	ldr	r3, [pc, #176]	; (8000808 <SystemClock_Config+0xdc>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800075e:	4a2a      	ldr	r2, [pc, #168]	; (8000808 <SystemClock_Config+0xdc>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6193      	str	r3, [r2, #24]
 8000766:	4b28      	ldr	r3, [pc, #160]	; (8000808 <SystemClock_Config+0xdc>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000772:	bf00      	nop
 8000774:	4b24      	ldr	r3, [pc, #144]	; (8000808 <SystemClock_Config+0xdc>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800077c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000780:	d1f8      	bne.n	8000774 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000782:	2301      	movs	r3, #1
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000786:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000790:	2302      	movs	r3, #2
 8000792:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000794:	2304      	movs	r3, #4
 8000796:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000798:	23a8      	movs	r3, #168	; 0xa8
 800079a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800079c:	2301      	movs	r3, #1
 800079e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80007a8:	2304      	movs	r3, #4
 80007aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b8:	4618      	mov	r0, r3
 80007ba:	f007 fb11 	bl	8007de0 <HAL_RCC_OscConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007c4:	f001 f87c 	bl	80018c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c8:	233f      	movs	r3, #63	; 0x3f
 80007ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	2303      	movs	r3, #3
 80007ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80007d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007d6:	2308      	movs	r3, #8
 80007d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007da:	2340      	movs	r3, #64	; 0x40
 80007dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007de:	2340      	movs	r3, #64	; 0x40
 80007e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007e8:	2340      	movs	r3, #64	; 0x40
 80007ea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2102      	movs	r1, #2
 80007f0:	4618      	mov	r0, r3
 80007f2:	f007 fecf 	bl	8008594 <HAL_RCC_ClockConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007fc:	f001 f860 	bl	80018c0 <Error_Handler>
  }
}
 8000800:	bf00      	nop
 8000802:	3770      	adds	r7, #112	; 0x70
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	58024800 	.word	0x58024800

0800080c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2224      	movs	r2, #36	; 0x24
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f00d fdec 	bl	800e3f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000820:	463b      	mov	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <MX_TIM1_Init+0xac>)
 800082c:	4a23      	ldr	r2, [pc, #140]	; (80008bc <MX_TIM1_Init+0xb0>)
 800082e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_TIM1_Init+0xac>)
 8000832:	2200      	movs	r2, #0
 8000834:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <MX_TIM1_Init+0xac>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_TIM1_Init+0xac>)
 800083e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000842:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_TIM1_Init+0xac>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800084a:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MX_TIM1_Init+0xac>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <MX_TIM1_Init+0xac>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000856:	2303      	movs	r3, #3
 8000858:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800085e:	2301      	movs	r3, #1
 8000860:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800086e:	2301      	movs	r3, #1
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	4619      	mov	r1, r3
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <MX_TIM1_Init+0xac>)
 8000882:	f00a fa27 	bl	800acd4 <HAL_TIM_Encoder_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800088c:	f001 f818 	bl	80018c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800089c:	463b      	mov	r3, r7
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_TIM1_Init+0xac>)
 80008a2:	f00b fadf 	bl	800be64 <HAL_TIMEx_MasterConfigSynchronization>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80008ac:	f001 f808 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	3730      	adds	r7, #48	; 0x30
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	240000bc 	.word	0x240000bc
 80008bc:	40010000 	.word	0x40010000

080008c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d2:	463b      	mov	r3, r7
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
 80008e0:	615a      	str	r2, [r3, #20]
 80008e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008e4:	4b27      	ldr	r3, [pc, #156]	; (8000984 <MX_TIM2_Init+0xc4>)
 80008e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80008ec:	4b25      	ldr	r3, [pc, #148]	; (8000984 <MX_TIM2_Init+0xc4>)
 80008ee:	2253      	movs	r2, #83	; 0x53
 80008f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f2:	4b24      	ldr	r3, [pc, #144]	; (8000984 <MX_TIM2_Init+0xc4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 80008f8:	4b22      	ldr	r3, [pc, #136]	; (8000984 <MX_TIM2_Init+0xc4>)
 80008fa:	2231      	movs	r2, #49	; 0x31
 80008fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fe:	4b21      	ldr	r3, [pc, #132]	; (8000984 <MX_TIM2_Init+0xc4>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000904:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <MX_TIM2_Init+0xc4>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800090a:	481e      	ldr	r0, [pc, #120]	; (8000984 <MX_TIM2_Init+0xc4>)
 800090c:	f00a f86e 	bl	800a9ec <HAL_TIM_PWM_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000916:	f000 ffd3 	bl	80018c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4816      	ldr	r0, [pc, #88]	; (8000984 <MX_TIM2_Init+0xc4>)
 800092a:	f00b fa9b 	bl	800be64 <HAL_TIMEx_MasterConfigSynchronization>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000934:	f000 ffc4 	bl	80018c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000938:	2360      	movs	r3, #96	; 0x60
 800093a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	4619      	mov	r1, r3
 800094e:	480d      	ldr	r0, [pc, #52]	; (8000984 <MX_TIM2_Init+0xc4>)
 8000950:	f00a fc14 	bl	800b17c <HAL_TIM_PWM_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800095a:	f000 ffb1 	bl	80018c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800095e:	463b      	mov	r3, r7
 8000960:	220c      	movs	r2, #12
 8000962:	4619      	mov	r1, r3
 8000964:	4807      	ldr	r0, [pc, #28]	; (8000984 <MX_TIM2_Init+0xc4>)
 8000966:	f00a fc09 	bl	800b17c <HAL_TIM_PWM_ConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000970:	f000 ffa6 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000974:	4803      	ldr	r0, [pc, #12]	; (8000984 <MX_TIM2_Init+0xc4>)
 8000976:	f003 fdc3 	bl	8004500 <HAL_TIM_MspPostInit>

}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	; 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	24000108 	.word	0x24000108

08000988 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800098e:	f107 0310 	add.w	r3, r7, #16
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <MX_TIM3_Init+0x94>)
 80009a8:	4a1d      	ldr	r2, [pc, #116]	; (8000a20 <MX_TIM3_Init+0x98>)
 80009aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MX_TIM3_Init+0x94>)
 80009ae:	f240 3247 	movw	r2, #839	; 0x347
 80009b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <MX_TIM3_Init+0x94>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_TIM3_Init+0x94>)
 80009bc:	2263      	movs	r2, #99	; 0x63
 80009be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_TIM3_Init+0x94>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_TIM3_Init+0x94>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009cc:	4813      	ldr	r0, [pc, #76]	; (8000a1c <MX_TIM3_Init+0x94>)
 80009ce:	f009 ff2f 	bl	800a830 <HAL_TIM_Base_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80009d8:	f000 ff72 	bl	80018c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009e2:	f107 0310 	add.w	r3, r7, #16
 80009e6:	4619      	mov	r1, r3
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <MX_TIM3_Init+0x94>)
 80009ea:	f00a fcdb 	bl	800b3a4 <HAL_TIM_ConfigClockSource>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80009f4:	f000 ff64 	bl	80018c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_TIM3_Init+0x94>)
 8000a06:	f00b fa2d 	bl	800be64 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a10:	f000 ff56 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3720      	adds	r7, #32
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	24000154 	.word	0x24000154
 8000a20:	40000400 	.word	0x40000400

08000a24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	2224      	movs	r2, #36	; 0x24
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f00d fce0 	bl	800e3f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_TIM4_Init+0xa4>)
 8000a44:	4a21      	ldr	r2, [pc, #132]	; (8000acc <MX_TIM4_Init+0xa8>)
 8000a46:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a48:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <MX_TIM4_Init+0xa4>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_TIM4_Init+0xa4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a54:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <MX_TIM4_Init+0xa4>)
 8000a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_TIM4_Init+0xa4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_TIM4_Init+0xa4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a70:	2301      	movs	r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a80:	2301      	movs	r3, #1
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	4619      	mov	r1, r3
 8000a92:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <MX_TIM4_Init+0xa4>)
 8000a94:	f00a f91e 	bl	800acd4 <HAL_TIM_Encoder_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000a9e:	f000 ff0f 	bl	80018c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MX_TIM4_Init+0xa4>)
 8000ab0:	f00b f9d8 	bl	800be64 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000aba:	f000 ff01 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	3730      	adds	r7, #48	; 0x30
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	240001a0 	.word	0x240001a0
 8000acc:	40000800 	.word	0x40000800

08000ad0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad6:	f107 0310 	add.w	r3, r7, #16
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000aee:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <MX_TIM5_Init+0x94>)
 8000af0:	4a1d      	ldr	r2, [pc, #116]	; (8000b68 <MX_TIM5_Init+0x98>)
 8000af2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <MX_TIM5_Init+0x94>)
 8000af6:	2253      	movs	r2, #83	; 0x53
 8000af8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <MX_TIM5_Init+0x94>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 8000b00:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_TIM5_Init+0x94>)
 8000b02:	4a1a      	ldr	r2, [pc, #104]	; (8000b6c <MX_TIM5_Init+0x9c>)
 8000b04:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b06:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <MX_TIM5_Init+0x94>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <MX_TIM5_Init+0x94>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000b12:	4814      	ldr	r0, [pc, #80]	; (8000b64 <MX_TIM5_Init+0x94>)
 8000b14:	f009 fe8c 	bl	800a830 <HAL_TIM_Base_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000b1e:	f000 fecf 	bl	80018c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	480d      	ldr	r0, [pc, #52]	; (8000b64 <MX_TIM5_Init+0x94>)
 8000b30:	f00a fc38 	bl	800b3a4 <HAL_TIM_ConfigClockSource>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000b3a:	f000 fec1 	bl	80018c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4806      	ldr	r0, [pc, #24]	; (8000b64 <MX_TIM5_Init+0x94>)
 8000b4c:	f00b f98a 	bl	800be64 <HAL_TIMEx_MasterConfigSynchronization>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000b56:	f000 feb3 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	3720      	adds	r7, #32
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	240001ec 	.word	0x240001ec
 8000b68:	40000c00 	.word	0x40000c00
 8000b6c:	0001869f 	.word	0x0001869f

08000b70 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b098      	sub	sp, #96	; 0x60
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
 8000b92:	615a      	str	r2, [r3, #20]
 8000b94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2234      	movs	r2, #52	; 0x34
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f00d fc2b 	bl	800e3f8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000ba2:	4b38      	ldr	r3, [pc, #224]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000ba4:	4a38      	ldr	r2, [pc, #224]	; (8000c88 <MX_TIM8_Init+0x118>)
 8000ba6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8000ba8:	4b36      	ldr	r3, [pc, #216]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000baa:	2253      	movs	r2, #83	; 0x53
 8000bac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bae:	4b35      	ldr	r3, [pc, #212]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8000bb4:	4b33      	ldr	r3, [pc, #204]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000bb6:	2231      	movs	r2, #49	; 0x31
 8000bb8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bba:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000bc0:	4b30      	ldr	r3, [pc, #192]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc6:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000bcc:	482d      	ldr	r0, [pc, #180]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000bce:	f009 ff0d 	bl	800a9ec <HAL_TIM_PWM_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000bd8:	f000 fe72 	bl	80018c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000be8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bec:	4619      	mov	r1, r3
 8000bee:	4825      	ldr	r0, [pc, #148]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000bf0:	f00b f938 	bl	800be64 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8000bfa:	f000 fe61 	bl	80018c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bfe:	2360      	movs	r3, #96	; 0x60
 8000c00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c06:	2300      	movs	r3, #0
 8000c08:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c1e:	2208      	movs	r2, #8
 8000c20:	4619      	mov	r1, r3
 8000c22:	4818      	ldr	r0, [pc, #96]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000c24:	f00a faaa 	bl	800b17c <HAL_TIM_PWM_ConfigChannel>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8000c2e:	f000 fe47 	bl	80018c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	4619      	mov	r1, r3
 8000c66:	4807      	ldr	r0, [pc, #28]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000c68:	f00b f998 	bl	800bf9c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8000c72:	f000 fe25 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000c76:	4803      	ldr	r0, [pc, #12]	; (8000c84 <MX_TIM8_Init+0x114>)
 8000c78:	f003 fc42 	bl	8004500 <HAL_TIM_MspPostInit>

}
 8000c7c:	bf00      	nop
 8000c7e:	3760      	adds	r7, #96	; 0x60
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	24000238 	.word	0x24000238
 8000c88:	40010400 	.word	0x40010400

08000c8c <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	2224      	movs	r2, #36	; 0x24
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f00d fbac 	bl	800e3f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000caa:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <MX_TIM23_Init+0xa4>)
 8000cac:	4a21      	ldr	r2, [pc, #132]	; (8000d34 <MX_TIM23_Init+0xa8>)
 8000cae:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <MX_TIM23_Init+0xa4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	; (8000d30 <MX_TIM23_Init+0xa4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <MX_TIM23_Init+0xa4>)
 8000cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc2:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <MX_TIM23_Init+0xa4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <MX_TIM23_Init+0xa4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <MX_TIM23_Init+0xa4>)
 8000cfc:	f009 ffea 	bl	800acd4 <HAL_TIM_Encoder_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 8000d06:	f000 fddb 	bl	80018c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8000d12:	463b      	mov	r3, r7
 8000d14:	4619      	mov	r1, r3
 8000d16:	4806      	ldr	r0, [pc, #24]	; (8000d30 <MX_TIM23_Init+0xa4>)
 8000d18:	f00b f8a4 	bl	800be64 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 8000d22:	f000 fdcd 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	3730      	adds	r7, #48	; 0x30
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	24000284 	.word	0x24000284
 8000d34:	4000e000 	.word	0x4000e000

08000d38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d3c:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d3e:	4a23      	ldr	r2, [pc, #140]	; (8000dcc <MX_USART3_UART_Init+0x94>)
 8000d40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d42:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4a:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d50:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d80:	4811      	ldr	r0, [pc, #68]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d82:	f00b f9c9 	bl	800c118 <HAL_UART_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d8c:	f000 fd98 	bl	80018c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d90:	2100      	movs	r1, #0
 8000d92:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000d94:	f00d fa12 	bl	800e1bc <HAL_UARTEx_SetTxFifoThreshold>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d9e:	f000 fd8f 	bl	80018c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da2:	2100      	movs	r1, #0
 8000da4:	4808      	ldr	r0, [pc, #32]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000da6:	f00d fa47 	bl	800e238 <HAL_UARTEx_SetRxFifoThreshold>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000db0:	f000 fd86 	bl	80018c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000db4:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <MX_USART3_UART_Init+0x90>)
 8000db6:	f00d f9c8 	bl	800e14a <HAL_UARTEx_DisableFifoMode>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dc0:	f000 fd7e 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	240002d0 	.word	0x240002d0
 8000dcc:	40004800 	.word	0x40004800

08000dd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_DMA_Init+0x4c>)
 8000dd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ddc:	4a0f      	ldr	r2, [pc, #60]	; (8000e1c <MX_DMA_Init+0x4c>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <MX_DMA_Init+0x4c>)
 8000de8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2100      	movs	r1, #0
 8000df8:	200b      	movs	r0, #11
 8000dfa:	f003 ff86 	bl	8004d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000dfe:	200b      	movs	r0, #11
 8000e00:	f003 ff9d 	bl	8004d3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	200c      	movs	r0, #12
 8000e0a:	f003 ff7e 	bl	8004d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e0e:	200c      	movs	r0, #12
 8000e10:	f003 ff95 	bl	8004d3e <HAL_NVIC_EnableIRQ>

}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	58024400 	.word	0x58024400

08000e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	; 0x30
 8000e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e36:	4b39      	ldr	r3, [pc, #228]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3c:	4a37      	ldr	r2, [pc, #220]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e3e:	f043 0310 	orr.w	r3, r3, #16
 8000e42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e46:	4b35      	ldr	r3, [pc, #212]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4c:	f003 0310 	and.w	r3, r3, #16
 8000e50:	61bb      	str	r3, [r7, #24]
 8000e52:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e54:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5a:	4a30      	ldr	r2, [pc, #192]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e64:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e72:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e78:	4a28      	ldr	r2, [pc, #160]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e7a:	f043 0320 	orr.w	r3, r3, #32
 8000e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e88:	f003 0320 	and.w	r3, r3, #32
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e90:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e96:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb4:	4a19      	ldr	r2, [pc, #100]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000ed4:	f043 0308 	orr.w	r3, r3, #8
 8000ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee2:	f003 0308 	and.w	r3, r3, #8
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8000eea:	2200      	movs	r2, #0
 8000eec:	f249 51c0 	movw	r1, #38336	; 0x95c0
 8000ef0:	480b      	ldr	r0, [pc, #44]	; (8000f20 <MX_GPIO_Init+0x100>)
 8000ef2:	f006 ff21 	bl	8007d38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8000ef6:	f249 53c0 	movw	r3, #38336	; 0x95c0
 8000efa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4804      	ldr	r0, [pc, #16]	; (8000f20 <MX_GPIO_Init+0x100>)
 8000f10:	f006 fd6a 	bl	80079e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f14:	bf00      	nop
 8000f16:	3730      	adds	r7, #48	; 0x30
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	58024400 	.word	0x58024400
 8000f20:	58021000 	.word	0x58021000

08000f24 <HAL_TIM_PeriodElapsedCallback>:
void PID_PWM();
void kinematics_model();

double WF, WR, WL;
int nnn=0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d108      	bne.n	8000f48 <HAL_TIM_PeriodElapsedCallback+0x24>
		inverse_kinematics_model();
 8000f36:	f000 f817 	bl	8000f68 <inverse_kinematics_model>
		Encoder();
 8000f3a:	f000 f8fd 	bl	8001138 <Encoder>
		PID_PWM();
 8000f3e:	f000 f977 	bl	8001230 <PID_PWM>
		kinematics_model();
 8000f42:	f000 fc25 	bl	8001790 <kinematics_model>
		//rVy = 1;
		//rW = 1;
		realspeed();
//		nnn++;
	}
}
 8000f46:	e006      	b.n	8000f56 <HAL_TIM_PeriodElapsedCallback+0x32>
	else if(htim->Instance == TIM5){
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d101      	bne.n	8000f56 <HAL_TIM_PeriodElapsedCallback+0x32>
		realspeed();
 8000f52:	f002 fb13 	bl	800357c <realspeed>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40000400 	.word	0x40000400
 8000f64:	40000c00 	.word	0x40000c00

08000f68 <inverse_kinematics_model>:
//		errcallback();
//		nnn++;
//    }
//}

void inverse_kinematics_model(){
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

	WL = (-Vx + sqrt(3) * Vy + LL * W) / 3;
 8000f6c:	4b66      	ldr	r3, [pc, #408]	; (8001108 <inverse_kinematics_model+0x1a0>)
 8000f6e:	edd3 7a00 	vldr	s15, [r3]
 8000f72:	eef1 7a67 	vneg.f32	s15, s15
 8000f76:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f7a:	4b64      	ldr	r3, [pc, #400]	; (800110c <inverse_kinematics_model+0x1a4>)
 8000f7c:	edd3 7a00 	vldr	s15, [r3]
 8000f80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f84:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 80010f8 <inverse_kinematics_model+0x190>
 8000f88:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f8c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000f90:	4b5f      	ldr	r3, [pc, #380]	; (8001110 <inverse_kinematics_model+0x1a8>)
 8000f92:	edd3 7a00 	vldr	s15, [r3]
 8000f96:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001114 <inverse_kinematics_model+0x1ac>
 8000f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fa2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000fa6:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000faa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fae:	4b5a      	ldr	r3, [pc, #360]	; (8001118 <inverse_kinematics_model+0x1b0>)
 8000fb0:	ed83 7b00 	vstr	d7, [r3]
	WR = (-Vx - sqrt(3) * Vy + LR * W) / 3;
 8000fb4:	4b54      	ldr	r3, [pc, #336]	; (8001108 <inverse_kinematics_model+0x1a0>)
 8000fb6:	edd3 7a00 	vldr	s15, [r3]
 8000fba:	eef1 7a67 	vneg.f32	s15, s15
 8000fbe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000fc2:	4b52      	ldr	r3, [pc, #328]	; (800110c <inverse_kinematics_model+0x1a4>)
 8000fc4:	edd3 7a00 	vldr	s15, [r3]
 8000fc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fcc:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 80010f8 <inverse_kinematics_model+0x190>
 8000fd0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000fd4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000fd8:	4b4d      	ldr	r3, [pc, #308]	; (8001110 <inverse_kinematics_model+0x1a8>)
 8000fda:	edd3 7a00 	vldr	s15, [r3]
 8000fde:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001114 <inverse_kinematics_model+0x1ac>
 8000fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fea:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000fee:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000ff2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ff6:	4b49      	ldr	r3, [pc, #292]	; (800111c <inverse_kinematics_model+0x1b4>)
 8000ff8:	ed83 7b00 	vstr	d7, [r3]
	WF = (2 * Vx + LF * W) / 3;
 8000ffc:	4b42      	ldr	r3, [pc, #264]	; (8001108 <inverse_kinematics_model+0x1a0>)
 8000ffe:	edd3 7a00 	vldr	s15, [r3]
 8001002:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001006:	4b42      	ldr	r3, [pc, #264]	; (8001110 <inverse_kinematics_model+0x1a8>)
 8001008:	edd3 7a00 	vldr	s15, [r3]
 800100c:	eddf 6a41 	vldr	s13, [pc, #260]	; 8001114 <inverse_kinematics_model+0x1ac>
 8001010:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001014:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001018:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800101c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001020:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001024:	4b3e      	ldr	r3, [pc, #248]	; (8001120 <inverse_kinematics_model+0x1b8>)
 8001026:	ed83 7b00 	vstr	d7, [r3]

	WF = WF * (-1);
 800102a:	4b3d      	ldr	r3, [pc, #244]	; (8001120 <inverse_kinematics_model+0x1b8>)
 800102c:	ed93 7b00 	vldr	d7, [r3]
 8001030:	eeb1 7b47 	vneg.f64	d7, d7
 8001034:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <inverse_kinematics_model+0x1b8>)
 8001036:	ed83 7b00 	vstr	d7, [r3]
	WL = WL * (-1);
 800103a:	4b37      	ldr	r3, [pc, #220]	; (8001118 <inverse_kinematics_model+0x1b0>)
 800103c:	ed93 7b00 	vldr	d7, [r3]
 8001040:	eeb1 7b47 	vneg.f64	d7, d7
 8001044:	4b34      	ldr	r3, [pc, #208]	; (8001118 <inverse_kinematics_model+0x1b0>)
 8001046:	ed83 7b00 	vstr	d7, [r3]
	WR = WR * (-1);
 800104a:	4b34      	ldr	r3, [pc, #208]	; (800111c <inverse_kinematics_model+0x1b4>)
 800104c:	ed93 7b00 	vldr	d7, [r3]
 8001050:	eeb1 7b47 	vneg.f64	d7, d7
 8001054:	4b31      	ldr	r3, [pc, #196]	; (800111c <inverse_kinematics_model+0x1b4>)
 8001056:	ed83 7b00 	vstr	d7, [r3]

	MF = (WF / wheel_radius) / ratio_motor2wheel / (2 * pi) * cmnspeed;
 800105a:	4b31      	ldr	r3, [pc, #196]	; (8001120 <inverse_kinematics_model+0x1b8>)
 800105c:	ed93 7b00 	vldr	d7, [r3]
 8001060:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 8001064:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001068:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800106c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001070:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8001100 <inverse_kinematics_model+0x198>
 8001074:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001078:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <inverse_kinematics_model+0x1bc>)
 800107a:	ed93 7b00 	vldr	d7, [r3]
 800107e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001082:	4b29      	ldr	r3, [pc, #164]	; (8001128 <inverse_kinematics_model+0x1c0>)
 8001084:	ed83 7b00 	vstr	d7, [r3]
	MR = (WR / wheel_radius) / ratio_motor2wheel / (2 * pi) * cmnspeed;
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <inverse_kinematics_model+0x1b4>)
 800108a:	ed93 7b00 	vldr	d7, [r3]
 800108e:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 8001092:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001096:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800109a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800109e:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8001100 <inverse_kinematics_model+0x198>
 80010a2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80010a6:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <inverse_kinematics_model+0x1bc>)
 80010a8:	ed93 7b00 	vldr	d7, [r3]
 80010ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010b0:	4b1e      	ldr	r3, [pc, #120]	; (800112c <inverse_kinematics_model+0x1c4>)
 80010b2:	ed83 7b00 	vstr	d7, [r3]
	ML = (WL / wheel_radius) / ratio_motor2wheel / (2 * pi) * cmnMF * cmnspeed;
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <inverse_kinematics_model+0x1b0>)
 80010b8:	ed93 7b00 	vldr	d7, [r3]
 80010bc:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 80010c0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80010c4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80010c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010cc:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8001100 <inverse_kinematics_model+0x198>
 80010d0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <inverse_kinematics_model+0x1c8>)
 80010d6:	ed93 7b00 	vldr	d7, [r3]
 80010da:	ee26 6b07 	vmul.f64	d6, d6, d7
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <inverse_kinematics_model+0x1bc>)
 80010e0:	ed93 7b00 	vldr	d7, [r3]
 80010e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <inverse_kinematics_model+0x1cc>)
 80010ea:	ed83 7b00 	vstr	d7, [r3]
	}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e8584caa 	.word	0xe8584caa
 80010fc:	3ffbb67a 	.word	0x3ffbb67a
 8001100:	54442eea 	.word	0x54442eea
 8001104:	401921fb 	.word	0x401921fb
 8001108:	240004fc 	.word	0x240004fc
 800110c:	24000500 	.word	0x24000500
 8001110:	24000504 	.word	0x24000504
 8001114:	42c80000 	.word	0x42c80000
 8001118:	240004d0 	.word	0x240004d0
 800111c:	240004c8 	.word	0x240004c8
 8001120:	240004c0 	.word	0x240004c0
 8001124:	24000020 	.word	0x24000020
 8001128:	24000458 	.word	0x24000458
 800112c:	24000460 	.word	0x24000460
 8001130:	24000018 	.word	0x24000018
 8001134:	24000468 	.word	0x24000468

08001138 <Encoder>:
void Encoder() {
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
	//front wheel motor
	enc_MF = __HAL_TIM_GetCounter(TIM_ENC_MF);
 800113c:	4b32      	ldr	r3, [pc, #200]	; (8001208 <Encoder+0xd0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	b21a      	sxth	r2, r3
 8001144:	4b31      	ldr	r3, [pc, #196]	; (800120c <Encoder+0xd4>)
 8001146:	801a      	strh	r2, [r3, #0]
	rMF = (double) enc_MF / (4 * resolution_MF * reductionratio_MF) / motor_span;//(2*pi);//rev/s = 2Pi/s
 8001148:	4b30      	ldr	r3, [pc, #192]	; (800120c <Encoder+0xd4>)
 800114a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001156:	ed9f 5b26 	vldr	d5, [pc, #152]	; 80011f0 <Encoder+0xb8>
 800115a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800115e:	ed9f 5b26 	vldr	d5, [pc, #152]	; 80011f8 <Encoder+0xc0>
 8001162:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001166:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <Encoder+0xd8>)
 8001168:	ed83 7b00 	vstr	d7, [r3]
	__HAL_TIM_SetCounter(TIM_ENC_MF, 0);
 800116c:	4b26      	ldr	r3, [pc, #152]	; (8001208 <Encoder+0xd0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24

	//right wheel motor
	enc_MR = __HAL_TIM_GetCounter(TIM_ENC_MR);
 8001174:	4b27      	ldr	r3, [pc, #156]	; (8001214 <Encoder+0xdc>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b26      	ldr	r3, [pc, #152]	; (8001218 <Encoder+0xe0>)
 800117e:	801a      	strh	r2, [r3, #0]
	rMR = (double) enc_MR / (4 * resolution_MR * reductionratio_MR) / motor_span;//(2*pi);
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <Encoder+0xe0>)
 8001182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001186:	ee07 3a90 	vmov	s15, r3
 800118a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800118e:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8001200 <Encoder+0xc8>
 8001192:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001196:	ed9f 5b18 	vldr	d5, [pc, #96]	; 80011f8 <Encoder+0xc0>
 800119a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800119e:	4b1f      	ldr	r3, [pc, #124]	; (800121c <Encoder+0xe4>)
 80011a0:	ed83 7b00 	vstr	d7, [r3]
	__HAL_TIM_SetCounter(TIM_ENC_MR, 0);
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <Encoder+0xdc>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24

	//left wheel motor
	enc_ML = __HAL_TIM_GetCounter(TIM_ENC_ML);
 80011ac:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <Encoder+0xe8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <Encoder+0xec>)
 80011b6:	801a      	strh	r2, [r3, #0]
	rML = (double) enc_ML / (4 * resolution_ML * reductionratio_ML) / motor_span;//(2*pi);
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <Encoder+0xec>)
 80011ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011c6:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8001200 <Encoder+0xc8>
 80011ca:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80011ce:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80011f8 <Encoder+0xc0>
 80011d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <Encoder+0xf0>)
 80011d8:	ed83 7b00 	vstr	d7, [r3]
	__HAL_TIM_SetCounter(TIM_ENC_ML, 0);
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <Encoder+0xe8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2200      	movs	r2, #0
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	00000000 	.word	0x00000000
 80011f4:	40e00000 	.word	0x40e00000
 80011f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80011fc:	3f50624d 	.word	0x3f50624d
 8001200:	00000000 	.word	0x00000000
 8001204:	40d9c800 	.word	0x40d9c800
 8001208:	240000bc 	.word	0x240000bc
 800120c:	24000470 	.word	0x24000470
 8001210:	24000478 	.word	0x24000478
 8001214:	24000284 	.word	0x24000284
 8001218:	24000472 	.word	0x24000472
 800121c:	24000480 	.word	0x24000480
 8001220:	240001a0 	.word	0x240001a0
 8001224:	24000474 	.word	0x24000474
 8001228:	24000488 	.word	0x24000488
 800122c:	00000000 	.word	0x00000000

08001230 <PID_PWM>:
int pulse_MR;
int pulse_ML;
float u_ML;
double bound_ML;

void PID_PWM(){
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0

	//PID_MF
	err_MF = MF - rMF;
 8001236:	4bb6      	ldr	r3, [pc, #728]	; (8001510 <PID_PWM+0x2e0>)
 8001238:	ed93 6b00 	vldr	d6, [r3]
 800123c:	4bb5      	ldr	r3, [pc, #724]	; (8001514 <PID_PWM+0x2e4>)
 800123e:	ed93 7b00 	vldr	d7, [r3]
 8001242:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001246:	4bb4      	ldr	r3, [pc, #720]	; (8001518 <PID_PWM+0x2e8>)
 8001248:	ed83 7b00 	vstr	d7, [r3]
	inte_MF += err_MF * motor_span;
 800124c:	4bb2      	ldr	r3, [pc, #712]	; (8001518 <PID_PWM+0x2e8>)
 800124e:	ed93 7b00 	vldr	d7, [r3]
 8001252:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8001508 <PID_PWM+0x2d8>
 8001256:	ee27 6b06 	vmul.f64	d6, d7, d6
 800125a:	4bb0      	ldr	r3, [pc, #704]	; (800151c <PID_PWM+0x2ec>)
 800125c:	ed93 7b00 	vldr	d7, [r3]
 8001260:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001264:	4bad      	ldr	r3, [pc, #692]	; (800151c <PID_PWM+0x2ec>)
 8001266:	ed83 7b00 	vstr	d7, [r3]
	double bound_MF = 1/ki_MF;
 800126a:	4bad      	ldr	r3, [pc, #692]	; (8001520 <PID_PWM+0x2f0>)
 800126c:	ed93 7a00 	vldr	s14, [r3]
 8001270:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001278:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800127c:	ed87 7b02 	vstr	d7, [r7, #8]
	if (ki_MF * inte_MF > 1) inte_MF = bound_MF;
 8001280:	4ba7      	ldr	r3, [pc, #668]	; (8001520 <PID_PWM+0x2f0>)
 8001282:	edd3 7a00 	vldr	s15, [r3]
 8001286:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800128a:	4ba4      	ldr	r3, [pc, #656]	; (800151c <PID_PWM+0x2ec>)
 800128c:	ed93 7b00 	vldr	d7, [r3]
 8001290:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001294:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001298:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800129c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a0:	dd05      	ble.n	80012ae <PID_PWM+0x7e>
 80012a2:	499e      	ldr	r1, [pc, #632]	; (800151c <PID_PWM+0x2ec>)
 80012a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012a8:	e9c1 2300 	strd	r2, r3, [r1]
 80012ac:	e017      	b.n	80012de <PID_PWM+0xae>
	else if (ki_MF * inte_MF < -1) inte_MF = -bound_MF;
 80012ae:	4b9c      	ldr	r3, [pc, #624]	; (8001520 <PID_PWM+0x2f0>)
 80012b0:	edd3 7a00 	vldr	s15, [r3]
 80012b4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80012b8:	4b98      	ldr	r3, [pc, #608]	; (800151c <PID_PWM+0x2ec>)
 80012ba:	ed93 7b00 	vldr	d7, [r3]
 80012be:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012c2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80012c6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80012ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ce:	d506      	bpl.n	80012de <PID_PWM+0xae>
 80012d0:	ed97 7b02 	vldr	d7, [r7, #8]
 80012d4:	eeb1 7b47 	vneg.f64	d7, d7
 80012d8:	4b90      	ldr	r3, [pc, #576]	; (800151c <PID_PWM+0x2ec>)
 80012da:	ed83 7b00 	vstr	d7, [r3]
	float u_MF = kp_MF * err_MF + ki_MF * inte_MF;
 80012de:	4b91      	ldr	r3, [pc, #580]	; (8001524 <PID_PWM+0x2f4>)
 80012e0:	edd3 7a00 	vldr	s15, [r3]
 80012e4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80012e8:	4b8b      	ldr	r3, [pc, #556]	; (8001518 <PID_PWM+0x2e8>)
 80012ea:	ed93 7b00 	vldr	d7, [r3]
 80012ee:	ee26 6b07 	vmul.f64	d6, d6, d7
 80012f2:	4b8b      	ldr	r3, [pc, #556]	; (8001520 <PID_PWM+0x2f0>)
 80012f4:	edd3 7a00 	vldr	s15, [r3]
 80012f8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80012fc:	4b87      	ldr	r3, [pc, #540]	; (800151c <PID_PWM+0x2ec>)
 80012fe:	ed93 7b00 	vldr	d7, [r3]
 8001302:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001306:	ee36 7b07 	vadd.f64	d7, d6, d7
 800130a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800130e:	edc7 7a05 	vstr	s15, [r7, #20]
	if (u_MF > 1) u_MF = 1;
 8001312:	edd7 7a05 	vldr	s15, [r7, #20]
 8001316:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800131a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800131e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001322:	dd03      	ble.n	800132c <PID_PWM+0xfc>
 8001324:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	e00a      	b.n	8001342 <PID_PWM+0x112>
	else if (u_MF < -1) u_MF = -1;
 800132c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001330:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133c:	d501      	bpl.n	8001342 <PID_PWM+0x112>
 800133e:	4b7a      	ldr	r3, [pc, #488]	; (8001528 <PID_PWM+0x2f8>)
 8001340:	617b      	str	r3, [r7, #20]

	//PWM_MF
	if (u_MF > 0) {
 8001342:	edd7 7a05 	vldr	s15, [r7, #20]
 8001346:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800134a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134e:	dd17      	ble.n	8001380 <PID_PWM+0x150>
		pulse_MF = (int) (u_MF * (motorARR + 1));
 8001350:	edd7 7a05 	vldr	s15, [r7, #20]
 8001354:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001554 <PID_PWM+0x324>
 8001358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001360:	ee17 2a90 	vmov	r2, s15
 8001364:	4b71      	ldr	r3, [pc, #452]	; (800152c <PID_PWM+0x2fc>)
 8001366:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(INA_MF_PORT, INA_MF_PIN, GPIO_PIN_SET); // INA
 8001368:	2201      	movs	r2, #1
 800136a:	2140      	movs	r1, #64	; 0x40
 800136c:	4870      	ldr	r0, [pc, #448]	; (8001530 <PID_PWM+0x300>)
 800136e:	f006 fce3 	bl	8007d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_MF_PORT, INB_MF_PIN, GPIO_PIN_RESET); // INB
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001378:	486d      	ldr	r0, [pc, #436]	; (8001530 <PID_PWM+0x300>)
 800137a:	f006 fcdd 	bl	8007d38 <HAL_GPIO_WritePin>
 800137e:	e018      	b.n	80013b2 <PID_PWM+0x182>
	} else {
		pulse_MF = (int) (-u_MF * (motorARR + 1));
 8001380:	edd7 7a05 	vldr	s15, [r7, #20]
 8001384:	eef1 7a67 	vneg.f32	s15, s15
 8001388:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001554 <PID_PWM+0x324>
 800138c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001394:	ee17 2a90 	vmov	r2, s15
 8001398:	4b64      	ldr	r3, [pc, #400]	; (800152c <PID_PWM+0x2fc>)
 800139a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(INA_MF_PORT, INA_MF_PIN, GPIO_PIN_RESET); // INA
 800139c:	2200      	movs	r2, #0
 800139e:	2140      	movs	r1, #64	; 0x40
 80013a0:	4863      	ldr	r0, [pc, #396]	; (8001530 <PID_PWM+0x300>)
 80013a2:	f006 fcc9 	bl	8007d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_MF_PORT, INB_MF_PIN, GPIO_PIN_SET); // INB
 80013a6:	2201      	movs	r2, #1
 80013a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ac:	4860      	ldr	r0, [pc, #384]	; (8001530 <PID_PWM+0x300>)
 80013ae:	f006 fcc3 	bl	8007d38 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(TIM_PWM_MF, CH_PWM_MF, pulse_MF); // PWM
 80013b2:	4b5e      	ldr	r3, [pc, #376]	; (800152c <PID_PWM+0x2fc>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <PID_PWM+0x304>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	635a      	str	r2, [r3, #52]	; 0x34

	//PID_MR
	err_MR = MR - rMR;
 80013bc:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <PID_PWM+0x308>)
 80013be:	ed93 6b00 	vldr	d6, [r3]
 80013c2:	4b5e      	ldr	r3, [pc, #376]	; (800153c <PID_PWM+0x30c>)
 80013c4:	ed93 7b00 	vldr	d7, [r3]
 80013c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80013cc:	4b5c      	ldr	r3, [pc, #368]	; (8001540 <PID_PWM+0x310>)
 80013ce:	ed83 7b00 	vstr	d7, [r3]
	inte_MR += err_MR * motor_span;
 80013d2:	4b5b      	ldr	r3, [pc, #364]	; (8001540 <PID_PWM+0x310>)
 80013d4:	ed93 7b00 	vldr	d7, [r3]
 80013d8:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8001508 <PID_PWM+0x2d8>
 80013dc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013e0:	4b58      	ldr	r3, [pc, #352]	; (8001544 <PID_PWM+0x314>)
 80013e2:	ed93 7b00 	vldr	d7, [r3]
 80013e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80013ea:	4b56      	ldr	r3, [pc, #344]	; (8001544 <PID_PWM+0x314>)
 80013ec:	ed83 7b00 	vstr	d7, [r3]
	double bound_MR = 1/ki_MR;
 80013f0:	4b55      	ldr	r3, [pc, #340]	; (8001548 <PID_PWM+0x318>)
 80013f2:	ed93 7a00 	vldr	s14, [r3]
 80013f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80013fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001402:	ed87 7b00 	vstr	d7, [r7]
	if (ki_MR * inte_MR > 1) inte_MR = bound_MR;
 8001406:	4b50      	ldr	r3, [pc, #320]	; (8001548 <PID_PWM+0x318>)
 8001408:	edd3 7a00 	vldr	s15, [r3]
 800140c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001410:	4b4c      	ldr	r3, [pc, #304]	; (8001544 <PID_PWM+0x314>)
 8001412:	ed93 7b00 	vldr	d7, [r3]
 8001416:	ee26 7b07 	vmul.f64	d7, d6, d7
 800141a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800141e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001426:	dd05      	ble.n	8001434 <PID_PWM+0x204>
 8001428:	4946      	ldr	r1, [pc, #280]	; (8001544 <PID_PWM+0x314>)
 800142a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800142e:	e9c1 2300 	strd	r2, r3, [r1]
 8001432:	e017      	b.n	8001464 <PID_PWM+0x234>
	else if (ki_MR * inte_MR < -1) inte_MR = -bound_MR;
 8001434:	4b44      	ldr	r3, [pc, #272]	; (8001548 <PID_PWM+0x318>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800143e:	4b41      	ldr	r3, [pc, #260]	; (8001544 <PID_PWM+0x314>)
 8001440:	ed93 7b00 	vldr	d7, [r3]
 8001444:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001448:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800144c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001454:	d506      	bpl.n	8001464 <PID_PWM+0x234>
 8001456:	ed97 7b00 	vldr	d7, [r7]
 800145a:	eeb1 7b47 	vneg.f64	d7, d7
 800145e:	4b39      	ldr	r3, [pc, #228]	; (8001544 <PID_PWM+0x314>)
 8001460:	ed83 7b00 	vstr	d7, [r3]
	float u_MR = kp_MR * err_MR + ki_MR * inte_MR;
 8001464:	4b39      	ldr	r3, [pc, #228]	; (800154c <PID_PWM+0x31c>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800146e:	4b34      	ldr	r3, [pc, #208]	; (8001540 <PID_PWM+0x310>)
 8001470:	ed93 7b00 	vldr	d7, [r3]
 8001474:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001478:	4b33      	ldr	r3, [pc, #204]	; (8001548 <PID_PWM+0x318>)
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001482:	4b30      	ldr	r3, [pc, #192]	; (8001544 <PID_PWM+0x314>)
 8001484:	ed93 7b00 	vldr	d7, [r3]
 8001488:	ee25 7b07 	vmul.f64	d7, d5, d7
 800148c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001490:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001494:	edc7 7a04 	vstr	s15, [r7, #16]
	if (u_MR > 1) u_MR = 1;
 8001498:	edd7 7a04 	vldr	s15, [r7, #16]
 800149c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a8:	dd03      	ble.n	80014b2 <PID_PWM+0x282>
 80014aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	e00a      	b.n	80014c8 <PID_PWM+0x298>
	else if (u_MR < -1) u_MR = -1;
 80014b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80014b6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80014ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c2:	d501      	bpl.n	80014c8 <PID_PWM+0x298>
 80014c4:	4b18      	ldr	r3, [pc, #96]	; (8001528 <PID_PWM+0x2f8>)
 80014c6:	613b      	str	r3, [r7, #16]
	//PWM_MR
	if (u_MR > 0) {
 80014c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80014cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d4:	dd40      	ble.n	8001558 <PID_PWM+0x328>
		pulse_MR = (int) (u_MR * (motorARR + 1));
 80014d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80014da:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001554 <PID_PWM+0x324>
 80014de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014e6:	ee17 2a90 	vmov	r2, s15
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <PID_PWM+0x320>)
 80014ec:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(INA_MR_PORT, INA_MR_PIN, GPIO_PIN_SET); // INA
 80014ee:	2201      	movs	r2, #1
 80014f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f4:	480e      	ldr	r0, [pc, #56]	; (8001530 <PID_PWM+0x300>)
 80014f6:	f006 fc1f 	bl	8007d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_MR_PORT, INB_MR_PIN, GPIO_PIN_RESET); // INB
 80014fa:	2200      	movs	r2, #0
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	480c      	ldr	r0, [pc, #48]	; (8001530 <PID_PWM+0x300>)
 8001500:	f006 fc1a 	bl	8007d38 <HAL_GPIO_WritePin>
 8001504:	e041      	b.n	800158a <PID_PWM+0x35a>
 8001506:	bf00      	nop
 8001508:	d2f1a9fc 	.word	0xd2f1a9fc
 800150c:	3f50624d 	.word	0x3f50624d
 8001510:	24000458 	.word	0x24000458
 8001514:	24000478 	.word	0x24000478
 8001518:	24000490 	.word	0x24000490
 800151c:	24000498 	.word	0x24000498
 8001520:	24000004 	.word	0x24000004
 8001524:	24000000 	.word	0x24000000
 8001528:	bf800000 	.word	0xbf800000
 800152c:	240004dc 	.word	0x240004dc
 8001530:	58021000 	.word	0x58021000
 8001534:	24000108 	.word	0x24000108
 8001538:	24000460 	.word	0x24000460
 800153c:	24000480 	.word	0x24000480
 8001540:	240004a0 	.word	0x240004a0
 8001544:	240004a8 	.word	0x240004a8
 8001548:	2400000c 	.word	0x2400000c
 800154c:	24000008 	.word	0x24000008
 8001550:	240004e0 	.word	0x240004e0
 8001554:	42480000 	.word	0x42480000
	} else {
		pulse_MR = (int) (-u_MR * (motorARR + 1));
 8001558:	edd7 7a04 	vldr	s15, [r7, #16]
 800155c:	eef1 7a67 	vneg.f32	s15, s15
 8001560:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8001554 <PID_PWM+0x324>
 8001564:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800156c:	ee17 2a90 	vmov	r2, s15
 8001570:	4b77      	ldr	r3, [pc, #476]	; (8001750 <PID_PWM+0x520>)
 8001572:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(INA_MR_PORT, INA_MR_PIN, GPIO_PIN_RESET); // INA
 8001574:	2200      	movs	r2, #0
 8001576:	f44f 7180 	mov.w	r1, #256	; 0x100
 800157a:	4876      	ldr	r0, [pc, #472]	; (8001754 <PID_PWM+0x524>)
 800157c:	f006 fbdc 	bl	8007d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_MR_PORT, INB_MR_PIN, GPIO_PIN_SET); // INB
 8001580:	2201      	movs	r2, #1
 8001582:	2180      	movs	r1, #128	; 0x80
 8001584:	4873      	ldr	r0, [pc, #460]	; (8001754 <PID_PWM+0x524>)
 8001586:	f006 fbd7 	bl	8007d38 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(TIM_PWM_MR, CH_PWM_MR, pulse_MR); // PWM
 800158a:	4b71      	ldr	r3, [pc, #452]	; (8001750 <PID_PWM+0x520>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b72      	ldr	r3, [pc, #456]	; (8001758 <PID_PWM+0x528>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	63da      	str	r2, [r3, #60]	; 0x3c

	//PID_ML
	err_ML = ML - rML;
 8001594:	4b71      	ldr	r3, [pc, #452]	; (800175c <PID_PWM+0x52c>)
 8001596:	ed93 6b00 	vldr	d6, [r3]
 800159a:	4b71      	ldr	r3, [pc, #452]	; (8001760 <PID_PWM+0x530>)
 800159c:	ed93 7b00 	vldr	d7, [r3]
 80015a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80015a4:	4b6f      	ldr	r3, [pc, #444]	; (8001764 <PID_PWM+0x534>)
 80015a6:	ed83 7b00 	vstr	d7, [r3]
	inte_ML += err_ML * motor_span;
 80015aa:	4b6e      	ldr	r3, [pc, #440]	; (8001764 <PID_PWM+0x534>)
 80015ac:	ed93 7b00 	vldr	d7, [r3]
 80015b0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8001748 <PID_PWM+0x518>
 80015b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015b8:	4b6b      	ldr	r3, [pc, #428]	; (8001768 <PID_PWM+0x538>)
 80015ba:	ed93 7b00 	vldr	d7, [r3]
 80015be:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015c2:	4b69      	ldr	r3, [pc, #420]	; (8001768 <PID_PWM+0x538>)
 80015c4:	ed83 7b00 	vstr	d7, [r3]
	bound_ML = 1/ki_ML;
 80015c8:	4b68      	ldr	r3, [pc, #416]	; (800176c <PID_PWM+0x53c>)
 80015ca:	ed93 7a00 	vldr	s14, [r3]
 80015ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015da:	4b65      	ldr	r3, [pc, #404]	; (8001770 <PID_PWM+0x540>)
 80015dc:	ed83 7b00 	vstr	d7, [r3]
	if (ki_ML * inte_ML > 1) inte_ML = bound_ML;
 80015e0:	4b62      	ldr	r3, [pc, #392]	; (800176c <PID_PWM+0x53c>)
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80015ea:	4b5f      	ldr	r3, [pc, #380]	; (8001768 <PID_PWM+0x538>)
 80015ec:	ed93 7b00 	vldr	d7, [r3]
 80015f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80015f8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80015fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001600:	dd06      	ble.n	8001610 <PID_PWM+0x3e0>
 8001602:	4b5b      	ldr	r3, [pc, #364]	; (8001770 <PID_PWM+0x540>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	4957      	ldr	r1, [pc, #348]	; (8001768 <PID_PWM+0x538>)
 800160a:	e9c1 2300 	strd	r2, r3, [r1]
 800160e:	e018      	b.n	8001642 <PID_PWM+0x412>
	else if (ki_ML * inte_ML < -1) inte_ML = -bound_ML;
 8001610:	4b56      	ldr	r3, [pc, #344]	; (800176c <PID_PWM+0x53c>)
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800161a:	4b53      	ldr	r3, [pc, #332]	; (8001768 <PID_PWM+0x538>)
 800161c:	ed93 7b00 	vldr	d7, [r3]
 8001620:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001624:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001628:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800162c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001630:	d507      	bpl.n	8001642 <PID_PWM+0x412>
 8001632:	4b4f      	ldr	r3, [pc, #316]	; (8001770 <PID_PWM+0x540>)
 8001634:	ed93 7b00 	vldr	d7, [r3]
 8001638:	eeb1 7b47 	vneg.f64	d7, d7
 800163c:	4b4a      	ldr	r3, [pc, #296]	; (8001768 <PID_PWM+0x538>)
 800163e:	ed83 7b00 	vstr	d7, [r3]
//	float u_ML = kp_ML * err_ML + ki_ML * inte_ML;
	u_ML = kp_ML * err_ML + ki_ML * inte_ML;
 8001642:	4b4c      	ldr	r3, [pc, #304]	; (8001774 <PID_PWM+0x544>)
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800164c:	4b45      	ldr	r3, [pc, #276]	; (8001764 <PID_PWM+0x534>)
 800164e:	ed93 7b00 	vldr	d7, [r3]
 8001652:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001656:	4b45      	ldr	r3, [pc, #276]	; (800176c <PID_PWM+0x53c>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001660:	4b41      	ldr	r3, [pc, #260]	; (8001768 <PID_PWM+0x538>)
 8001662:	ed93 7b00 	vldr	d7, [r3]
 8001666:	ee25 7b07 	vmul.f64	d7, d5, d7
 800166a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800166e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <PID_PWM+0x548>)
 8001674:	edc3 7a00 	vstr	s15, [r3]
	if (u_ML > 1) u_ML = 1;
 8001678:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <PID_PWM+0x548>)
 800167a:	edd3 7a00 	vldr	s15, [r3]
 800167e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001682:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168a:	dd04      	ble.n	8001696 <PID_PWM+0x466>
 800168c:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <PID_PWM+0x548>)
 800168e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	e00c      	b.n	80016b0 <PID_PWM+0x480>
	else if (u_ML < -1) u_ML = -1;
 8001696:	4b38      	ldr	r3, [pc, #224]	; (8001778 <PID_PWM+0x548>)
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80016a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a8:	d502      	bpl.n	80016b0 <PID_PWM+0x480>
 80016aa:	4b33      	ldr	r3, [pc, #204]	; (8001778 <PID_PWM+0x548>)
 80016ac:	4a33      	ldr	r2, [pc, #204]	; (800177c <PID_PWM+0x54c>)
 80016ae:	601a      	str	r2, [r3, #0]
	//PWM_ML
	if (u_ML > 0) {
 80016b0:	4b31      	ldr	r3, [pc, #196]	; (8001778 <PID_PWM+0x548>)
 80016b2:	edd3 7a00 	vldr	s15, [r3]
 80016b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016be:	dd19      	ble.n	80016f4 <PID_PWM+0x4c4>
		//nnn++;
		pulse_ML = (int) (u_ML * (motorARR + 1));
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <PID_PWM+0x548>)
 80016c2:	edd3 7a00 	vldr	s15, [r3]
 80016c6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001780 <PID_PWM+0x550>
 80016ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d2:	ee17 2a90 	vmov	r2, s15
 80016d6:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <PID_PWM+0x554>)
 80016d8:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(INA_ML_PORT, INA_ML_PIN, GPIO_PIN_SET); // INA
 80016da:	2201      	movs	r2, #1
 80016dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016e0:	481c      	ldr	r0, [pc, #112]	; (8001754 <PID_PWM+0x524>)
 80016e2:	f006 fb29 	bl	8007d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_ML_PORT, INB_ML_PIN, GPIO_PIN_RESET); // INB
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ec:	4819      	ldr	r0, [pc, #100]	; (8001754 <PID_PWM+0x524>)
 80016ee:	f006 fb23 	bl	8007d38 <HAL_GPIO_WritePin>
 80016f2:	e01f      	b.n	8001734 <PID_PWM+0x504>
	} else {
		pulse_ML = (int) (-u_ML * (motorARR + 1));
 80016f4:	4b20      	ldr	r3, [pc, #128]	; (8001778 <PID_PWM+0x548>)
 80016f6:	edd3 7a00 	vldr	s15, [r3]
 80016fa:	eef1 7a67 	vneg.f32	s15, s15
 80016fe:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001780 <PID_PWM+0x550>
 8001702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800170a:	ee17 2a90 	vmov	r2, s15
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <PID_PWM+0x554>)
 8001710:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(INA_ML_PORT, INA_ML_PIN, GPIO_PIN_RESET); // INA
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001718:	480e      	ldr	r0, [pc, #56]	; (8001754 <PID_PWM+0x524>)
 800171a:	f006 fb0d 	bl	8007d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB_ML_PORT, INB_ML_PIN, GPIO_PIN_SET); // INB
 800171e:	2201      	movs	r2, #1
 8001720:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001724:	480b      	ldr	r0, [pc, #44]	; (8001754 <PID_PWM+0x524>)
 8001726:	f006 fb07 	bl	8007d38 <HAL_GPIO_WritePin>
		nnn++;
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <PID_PWM+0x558>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	4a15      	ldr	r2, [pc, #84]	; (8001788 <PID_PWM+0x558>)
 8001732:	6013      	str	r3, [r2, #0]
	}
	__HAL_TIM_SET_COMPARE(TIM_PWM_ML, CH_PWM_ML, pulse_ML); // PWM
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <PID_PWM+0x554>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <PID_PWM+0x55c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	641a      	str	r2, [r3, #64]	; 0x40

	//nnn++;

}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	d2f1a9fc 	.word	0xd2f1a9fc
 800174c:	3f50624d 	.word	0x3f50624d
 8001750:	240004e0 	.word	0x240004e0
 8001754:	58021000 	.word	0x58021000
 8001758:	24000238 	.word	0x24000238
 800175c:	24000468 	.word	0x24000468
 8001760:	24000488 	.word	0x24000488
 8001764:	240004b0 	.word	0x240004b0
 8001768:	240004b8 	.word	0x240004b8
 800176c:	24000014 	.word	0x24000014
 8001770:	240004f0 	.word	0x240004f0
 8001774:	24000010 	.word	0x24000010
 8001778:	240004e8 	.word	0x240004e8
 800177c:	bf800000 	.word	0xbf800000
 8001780:	42480000 	.word	0x42480000
 8001784:	240004e4 	.word	0x240004e4
 8001788:	240004d8 	.word	0x240004d8
 800178c:	24000108 	.word	0x24000108

08001790 <kinematics_model>:
void kinematics_model(){
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
	double rWF = rMF*ratio_motor2wheel,
 8001796:	4b44      	ldr	r3, [pc, #272]	; (80018a8 <kinematics_model+0x118>)
 8001798:	ed93 7b00 	vldr	d7, [r3]
 800179c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80017a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017a4:	ed87 7b04 	vstr	d7, [r7, #16]
				 rWR = rMR*ratio_motor2wheel,
 80017a8:	4b40      	ldr	r3, [pc, #256]	; (80018ac <kinematics_model+0x11c>)
 80017aa:	ed93 7b00 	vldr	d7, [r3]
 80017ae:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80017b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017b6:	ed87 7b02 	vstr	d7, [r7, #8]
				 rWL = rML*ratio_motor2wheel;
 80017ba:	4b3d      	ldr	r3, [pc, #244]	; (80018b0 <kinematics_model+0x120>)
 80017bc:	ed93 7b00 	vldr	d7, [r3]
 80017c0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80017c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017c8:	ed87 7b00 	vstr	d7, [r7]

	rVx = 1/(LF+LR+LL)*((LR+LL)*rWF - LF*rWR - LF*rWL);
 80017cc:	ed97 7b04 	vldr	d7, [r7, #16]
 80017d0:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8001880 <kinematics_model+0xf0>
 80017d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80017d8:	ed97 7b02 	vldr	d7, [r7, #8]
 80017dc:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8001888 <kinematics_model+0xf8>
 80017e0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80017e4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80017e8:	ed97 7b00 	vldr	d7, [r7]
 80017ec:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8001888 <kinematics_model+0xf8>
 80017f0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80017f4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017f8:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8001890 <kinematics_model+0x100>
 80017fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001800:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001804:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <kinematics_model+0x124>)
 8001806:	edc3 7a00 	vstr	s15, [r3]
	rVy = 1/sqrt(3)/(LF+LR+LL)*((LR-LL)*rWF - (LF+2*LL)*rWR + (LF+2*LR)*rWL);
 800180a:	ed97 7b04 	vldr	d7, [r7, #16]
 800180e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8001890 <kinematics_model+0x100>
 8001812:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001816:	ed97 7b02 	vldr	d7, [r7, #8]
 800181a:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8001898 <kinematics_model+0x108>
 800181e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001822:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001826:	ed97 7b00 	vldr	d7, [r7]
 800182a:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8001898 <kinematics_model+0x108>
 800182e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001832:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001836:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80018a0 <kinematics_model+0x110>
 800183a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800183e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <kinematics_model+0x128>)
 8001844:	edc3 7a00 	vstr	s15, [r3]
	rW = -1/(LF+LR+LL)*(rWF + rWR + rWL);
 8001848:	ed97 6b04 	vldr	d6, [r7, #16]
 800184c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001850:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001854:	ed97 7b00 	vldr	d7, [r7]
 8001858:	ee36 7b07 	vadd.f64	d7, d6, d7
 800185c:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001890 <kinematics_model+0x100>
 8001860:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001864:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <kinematics_model+0x12c>)
 800186a:	edc3 7a00 	vstr	s15, [r3]
	/*alpha
	rVx = cos(A)*rVx - sin(A)*rVy;
	rVy = sin(A)*rVx + cos(A)*rVy;
	rA+=rW*motor_span;
	*/
}
 800186e:	bf00      	nop
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	f3af 8000 	nop.w
 8001880:	00000000 	.word	0x00000000
 8001884:	40690000 	.word	0x40690000
 8001888:	00000000 	.word	0x00000000
 800188c:	40590000 	.word	0x40590000
	...
 800189c:	4072c000 	.word	0x4072c000
 80018a0:	1a8fb365 	.word	0x1a8fb365
 80018a4:	3f5f87f1 	.word	0x3f5f87f1
 80018a8:	24000478 	.word	0x24000478
 80018ac:	24000480 	.word	0x24000480
 80018b0:	24000488 	.word	0x24000488
 80018b4:	24000508 	.word	0x24000508
 80018b8:	2400050c 	.word	0x2400050c
 80018bc:	24000510 	.word	0x24000510

080018c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c4:	b672      	cpsid	i
}
 80018c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <Error_Handler+0x8>

080018ca <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <_ZN3ros3MsgC1Ev+0x1c>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	0800e9d4 	.word	0x0800e9d4

0800190c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
      data()
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ffe8 	bl	80018ec <_ZN3ros3MsgC1Ev>
 800191c:	4a06      	ldr	r2, [pc, #24]	; (8001938 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3304      	adds	r3, #4
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ffcf 	bl	80018ca <_ZN3ros4TimeC1Ev>
    {
    }
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	0800e9bc 	.word	0x0800e9bc

0800193c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6859      	ldr	r1, [r3, #4]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	4413      	add	r3, r2
 8001954:	b2ca      	uxtb	r2, r1
 8001956:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	0a19      	lsrs	r1, r3, #8
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3301      	adds	r3, #1
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	4413      	add	r3, r2
 8001966:	b2ca      	uxtb	r2, r1
 8001968:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	0c19      	lsrs	r1, r3, #16
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3302      	adds	r3, #2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	b2ca      	uxtb	r2, r1
 800197a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	0e19      	lsrs	r1, r3, #24
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3303      	adds	r3, #3
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	4413      	add	r3, r2
 800198a:	b2ca      	uxtb	r2, r1
 800198c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	3304      	adds	r3, #4
 8001992:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6899      	ldr	r1, [r3, #8]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	4413      	add	r3, r2
 800199e:	b2ca      	uxtb	r2, r1
 80019a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	0a19      	lsrs	r1, r3, #8
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	3301      	adds	r3, #1
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	b2ca      	uxtb	r2, r1
 80019b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	0c19      	lsrs	r1, r3, #16
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	3302      	adds	r3, #2
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	4413      	add	r3, r2
 80019c2:	b2ca      	uxtb	r2, r1
 80019c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	0e19      	lsrs	r1, r3, #24
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	3303      	adds	r3, #3
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	b2ca      	uxtb	r2, r1
 80019d6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3304      	adds	r3, #4
 80019dc:	60fb      	str	r3, [r7, #12]
      return offset;
 80019de:	68fb      	ldr	r3, [r7, #12]
    }
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	6839      	ldr	r1, [r7, #0]
 8001a12:	440b      	add	r3, r1
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	021b      	lsls	r3, r3, #8
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3302      	adds	r3, #2
 8001a26:	6839      	ldr	r1, [r7, #0]
 8001a28:	440b      	add	r3, r1
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	041b      	lsls	r3, r3, #16
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3303      	adds	r3, #3
 8001a3c:	6839      	ldr	r1, [r7, #0]
 8001a3e:	440b      	add	r3, r1
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	061b      	lsls	r3, r3, #24
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	4413      	add	r3, r2
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3301      	adds	r3, #1
 8001a66:	6839      	ldr	r1, [r7, #0]
 8001a68:	440b      	add	r3, r1
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	021b      	lsls	r3, r3, #8
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	6839      	ldr	r1, [r7, #0]
 8001a7e:	440b      	add	r3, r1
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	041b      	lsls	r3, r3, #16
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	3303      	adds	r3, #3
 8001a92:	6839      	ldr	r1, [r7, #0]
 8001a94:	440b      	add	r3, r1
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	061b      	lsls	r3, r3, #24
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	60fb      	str	r3, [r7, #12]
     return offset;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
    }
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	4b03      	ldr	r3, [pc, #12]	; (8001acc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	0800e724 	.word	0x0800e724

08001ad0 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	0800e734 	.word	0x0800e734

08001aec <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fef8 	bl	80018ec <_ZN3ros3MsgC1Ev>
 8001afc:	4a0b      	ldr	r2, [pc, #44]	; (8001b2c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	809a      	strh	r2, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a09      	ldr	r2, [pc, #36]	; (8001b30 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a06      	ldr	r2, [pc, #24]	; (8001b30 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001b18:	611a      	str	r2, [r3, #16]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	615a      	str	r2, [r3, #20]
    {
    }
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	0800e9a4 	.word	0x0800e9a4
 8001b30:	0800e758 	.word	0x0800e758

08001b34 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	8899      	ldrh	r1, [r3, #4]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	b2ca      	uxtb	r2, r1
 8001b4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	889b      	ldrh	r3, [r3, #4]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	b299      	uxth	r1, r3
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	b2ca      	uxtb	r2, r1
 8001b62:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	3302      	adds	r3, #2
 8001b68:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fbce 	bl	8000310 <strlen>
 8001b74:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	69b9      	ldr	r1, [r7, #24]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f001 fd32 	bl	80035e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	3304      	adds	r3, #4
 8001b88:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	18d0      	adds	r0, r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4619      	mov	r1, r3
 8001b98:	f00c fc20 	bl	800e3dc <memcpy>
      offset += length_topic_name;
 8001b9c:	69fa      	ldr	r2, [r7, #28]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fbb1 	bl	8000310 <strlen>
 8001bae:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	6979      	ldr	r1, [r7, #20]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f001 fd15 	bl	80035e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	18d0      	adds	r0, r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f00c fc03 	bl	800e3dc <memcpy>
      offset += length_message_type;
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	4413      	add	r3, r2
 8001bdc:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fb94 	bl	8000310 <strlen>
 8001be8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	4413      	add	r3, r2
 8001bf0:	6939      	ldr	r1, [r7, #16]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f001 fcf8 	bl	80035e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	18d0      	adds	r0, r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f00c fbe6 	bl	800e3dc <memcpy>
      offset += length_md5sum;
 8001c10:	69fa      	ldr	r2, [r7, #28]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4413      	add	r3, r2
 8001c16:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001c1e:	68f9      	ldr	r1, [r7, #12]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	4413      	add	r3, r2
 8001c26:	b2ca      	uxtb	r2, r1
 8001c28:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	0a19      	lsrs	r1, r3, #8
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3301      	adds	r3, #1
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	4413      	add	r3, r2
 8001c36:	b2ca      	uxtb	r2, r1
 8001c38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	0c19      	lsrs	r1, r3, #16
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3302      	adds	r3, #2
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	4413      	add	r3, r2
 8001c46:	b2ca      	uxtb	r2, r1
 8001c48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	0e19      	lsrs	r1, r3, #24
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3303      	adds	r3, #3
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	4413      	add	r3, r2
 8001c56:	b2ca      	uxtb	r2, r1
 8001c58:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	61fb      	str	r3, [r7, #28]
      return offset;
 8001c60:	69fb      	ldr	r3, [r7, #28]
    }
 8001c62:	4618      	mov	r0, r3
 8001c64:	3720      	adds	r7, #32
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b08a      	sub	sp, #40	; 0x28
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	889b      	ldrh	r3, [r3, #4]
 8001c8a:	b21a      	sxth	r2, r3
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	6839      	ldr	r1, [r7, #0]
 8001c92:	440b      	add	r3, r1
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	b21b      	sxth	r3, r3
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	b21b      	sxth	r3, r3
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	441a      	add	r2, r3
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f001 fcb4 	bl	8003624 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	4413      	add	r3, r2
 8001ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d20c      	bcs.n	8001cec <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	441a      	add	r2, r3
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	6839      	ldr	r1, [r7, #0]
 8001cde:	440b      	add	r3, r1
 8001ce0:	7812      	ldrb	r2, [r2, #0]
 8001ce2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cea:	e7ec      	b.n	8001cc6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	441a      	add	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	441a      	add	r2, r3
 8001d16:	f107 0310 	add.w	r3, r7, #16
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f001 fc81 	bl	8003624 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	3304      	adds	r3, #4
 8001d26:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	623b      	str	r3, [r7, #32]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4413      	add	r3, r2
 8001d32:	6a3a      	ldr	r2, [r7, #32]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d20c      	bcs.n	8001d52 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	441a      	add	r2, r3
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	6839      	ldr	r1, [r7, #0]
 8001d44:	440b      	add	r3, r1
 8001d46:	7812      	ldrb	r2, [r2, #0]
 8001d48:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	623b      	str	r3, [r7, #32]
 8001d50:	e7ec      	b.n	8001d2c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4413      	add	r3, r2
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	441a      	add	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4413      	add	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	441a      	add	r2, r3
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 fc4e 	bl	8003624 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4413      	add	r3, r2
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d20c      	bcs.n	8001db8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	441a      	add	r2, r3
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	6839      	ldr	r1, [r7, #0]
 8001daa:	440b      	add	r3, r1
 8001dac:	7812      	ldrb	r2, [r2, #0]
 8001dae:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	3301      	adds	r3, #1
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	e7ec      	b.n	8001d92 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	441a      	add	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4413      	add	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	6839      	ldr	r1, [r7, #0]
 8001de6:	440a      	add	r2, r1
 8001de8:	7812      	ldrb	r2, [r2, #0]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	3301      	adds	r3, #1
 8001df4:	6839      	ldr	r1, [r7, #0]
 8001df6:	440b      	add	r3, r1
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	021b      	lsls	r3, r3, #8
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	3302      	adds	r3, #2
 8001e06:	6839      	ldr	r1, [r7, #0]
 8001e08:	440b      	add	r3, r1
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	041b      	lsls	r3, r3, #16
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	3303      	adds	r3, #3
 8001e18:	6839      	ldr	r1, [r7, #0]
 8001e1a:	440b      	add	r3, r1
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	061b      	lsls	r3, r3, #24
 8001e20:	4313      	orrs	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	61bb      	str	r3, [r7, #24]
     return offset;
 8001e30:	69bb      	ldr	r3, [r7, #24]
    }
 8001e32:	4618      	mov	r0, r3
 8001e34:	3728      	adds	r7, #40	; 0x28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	0800e75c 	.word	0x0800e75c

08001e58 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	0800e778 	.word	0x0800e778

08001e74 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fd34 	bl	80018ec <_ZN3ros3MsgC1Ev>
 8001e84:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	711a      	strb	r2, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001e94:	609a      	str	r2, [r3, #8]
    {
    }
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	0800e98c 	.word	0x0800e98c
 8001ea4:	0800e758 	.word	0x0800e758

08001ea8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	7912      	ldrb	r2, [r2, #4]
 8001ec0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fa1f 	bl	8000310 <strlen>
 8001ed2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	4413      	add	r3, r2
 8001eda:	68b9      	ldr	r1, [r7, #8]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f001 fb83 	bl	80035e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	18d0      	adds	r0, r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f00c fa71 	bl	800e3dc <memcpy>
      offset += length_msg;
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	4413      	add	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
      return offset;
 8001f02:	68fb      	ldr	r3, [r7, #12]
    }
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	781a      	ldrb	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	441a      	add	r2, r3
 8001f32:	f107 030c 	add.w	r3, r7, #12
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f001 fb73 	bl	8003624 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	3304      	adds	r3, #4
 8001f42:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d20c      	bcs.n	8001f6e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	441a      	add	r2, r3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	6839      	ldr	r1, [r7, #0]
 8001f60:	440b      	add	r3, r1
 8001f62:	7812      	ldrb	r2, [r2, #0]
 8001f64:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	e7ec      	b.n	8001f48 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	3b01      	subs	r3, #1
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	4413      	add	r3, r2
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	441a      	add	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4413      	add	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
     return offset;
 8001f92:	693b      	ldr	r3, [r7, #16]
    }
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	0800e79c 	.word	0x0800e79c

08001fb8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	0800e7b0 	.word	0x0800e7b0

08001fd4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fc84 	bl	80018ec <_ZN3ros3MsgC1Ev>
 8001fe4:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	61da      	str	r2, [r3, #28]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	0800e974 	.word	0x0800e974

0800201c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6859      	ldr	r1, [r3, #4]
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	4413      	add	r3, r2
 8002034:	b2ca      	uxtb	r2, r1
 8002036:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	0a19      	lsrs	r1, r3, #8
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	3301      	adds	r3, #1
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	4413      	add	r3, r2
 8002046:	b2ca      	uxtb	r2, r1
 8002048:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	0c19      	lsrs	r1, r3, #16
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	3302      	adds	r3, #2
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	4413      	add	r3, r2
 8002058:	b2ca      	uxtb	r2, r1
 800205a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	0e19      	lsrs	r1, r3, #24
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	3303      	adds	r3, #3
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	4413      	add	r3, r2
 800206a:	b2ca      	uxtb	r2, r1
 800206c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	3304      	adds	r3, #4
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	6a3a      	ldr	r2, [r7, #32]
 800207e:	429a      	cmp	r2, r3
 8002080:	d22b      	bcs.n	80020da <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002090:	6939      	ldr	r1, [r7, #16]
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	4413      	add	r3, r2
 8002098:	b2ca      	uxtb	r2, r1
 800209a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	0a19      	lsrs	r1, r3, #8
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	3301      	adds	r3, #1
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	b2ca      	uxtb	r2, r1
 80020aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	0c19      	lsrs	r1, r3, #16
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	3302      	adds	r3, #2
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	b2ca      	uxtb	r2, r1
 80020ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	0e19      	lsrs	r1, r3, #24
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	3303      	adds	r3, #3
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	b2ca      	uxtb	r2, r1
 80020ca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	3304      	adds	r3, #4
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	3301      	adds	r3, #1
 80020d6:	623b      	str	r3, [r7, #32]
 80020d8:	e7ce      	b.n	8002078 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6919      	ldr	r1, [r3, #16]
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	b2ca      	uxtb	r2, r1
 80020e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	0a19      	lsrs	r1, r3, #8
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	3301      	adds	r3, #1
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	4413      	add	r3, r2
 80020f6:	b2ca      	uxtb	r2, r1
 80020f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	0c19      	lsrs	r1, r3, #16
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	3302      	adds	r3, #2
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	4413      	add	r3, r2
 8002108:	b2ca      	uxtb	r2, r1
 800210a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	0e19      	lsrs	r1, r3, #24
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	3303      	adds	r3, #3
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	4413      	add	r3, r2
 800211a:	b2ca      	uxtb	r2, r1
 800211c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	3304      	adds	r3, #4
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	69fa      	ldr	r2, [r7, #28]
 800212e:	429a      	cmp	r2, r3
 8002130:	d22b      	bcs.n	800218a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699a      	ldr	r2, [r3, #24]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002140:	68f9      	ldr	r1, [r7, #12]
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	4413      	add	r3, r2
 8002148:	b2ca      	uxtb	r2, r1
 800214a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	0a19      	lsrs	r1, r3, #8
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	3301      	adds	r3, #1
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	4413      	add	r3, r2
 8002158:	b2ca      	uxtb	r2, r1
 800215a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	0c19      	lsrs	r1, r3, #16
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	3302      	adds	r3, #2
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	4413      	add	r3, r2
 8002168:	b2ca      	uxtb	r2, r1
 800216a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	0e19      	lsrs	r1, r3, #24
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	3303      	adds	r3, #3
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	4413      	add	r3, r2
 8002178:	b2ca      	uxtb	r2, r1
 800217a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	3304      	adds	r3, #4
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3301      	adds	r3, #1
 8002186:	61fb      	str	r3, [r7, #28]
 8002188:	e7ce      	b.n	8002128 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69d9      	ldr	r1, [r3, #28]
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	4413      	add	r3, r2
 8002194:	b2ca      	uxtb	r2, r1
 8002196:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	0a19      	lsrs	r1, r3, #8
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	3301      	adds	r3, #1
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	4413      	add	r3, r2
 80021a6:	b2ca      	uxtb	r2, r1
 80021a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	0c19      	lsrs	r1, r3, #16
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	3302      	adds	r3, #2
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	b2ca      	uxtb	r2, r1
 80021ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	0e19      	lsrs	r1, r3, #24
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	3303      	adds	r3, #3
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	4413      	add	r3, r2
 80021ca:	b2ca      	uxtb	r2, r1
 80021cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	3304      	adds	r3, #4
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80021d4:	2300      	movs	r3, #0
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d228      	bcs.n	8002234 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe f88e 	bl	8000310 <strlen>
 80021f4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	4413      	add	r3, r2
 80021fc:	6979      	ldr	r1, [r7, #20]
 80021fe:	4618      	mov	r0, r3
 8002200:	f001 f9f2 	bl	80035e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	3304      	adds	r3, #4
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	18d0      	adds	r0, r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	4619      	mov	r1, r3
 8002220:	f00c f8dc 	bl	800e3dc <memcpy>
      offset += length_stringsi;
 8002224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	4413      	add	r3, r2
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	3301      	adds	r3, #1
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	e7d1      	b.n	80021d8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002236:	4618      	mov	r0, r3
 8002238:	3728      	adds	r7, #40	; 0x28
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800223e:	b580      	push	{r7, lr}
 8002240:	b08e      	sub	sp, #56	; 0x38
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800224c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	4413      	add	r3, r2
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002258:	3301      	adds	r3, #1
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	4413      	add	r3, r2
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	6a3a      	ldr	r2, [r7, #32]
 8002264:	4313      	orrs	r3, r2
 8002266:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800226a:	3302      	adds	r3, #2
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	4413      	add	r3, r2
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	041b      	lsls	r3, r3, #16
 8002274:	6a3a      	ldr	r2, [r7, #32]
 8002276:	4313      	orrs	r3, r2
 8002278:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800227a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800227c:	3303      	adds	r3, #3
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	4413      	add	r3, r2
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	061b      	lsls	r3, r3, #24
 8002286:	6a3a      	ldr	r2, [r7, #32]
 8002288:	4313      	orrs	r3, r2
 800228a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800228c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228e:	3304      	adds	r3, #4
 8002290:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	6a3a      	ldr	r2, [r7, #32]
 8002298:	429a      	cmp	r2, r3
 800229a:	d90a      	bls.n	80022b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4619      	mov	r1, r3
 80022a6:	4610      	mov	r0, r2
 80022a8:	f00c f8ae 	bl	800e408 <realloc>
 80022ac:	4602      	mov	r2, r0
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a3a      	ldr	r2, [r7, #32]
 80022b6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80022b8:	2300      	movs	r3, #0
 80022ba:	633b      	str	r3, [r7, #48]	; 0x30
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d236      	bcs.n	8002334 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022ce:	6839      	ldr	r1, [r7, #0]
 80022d0:	440a      	add	r2, r1
 80022d2:	7812      	ldrb	r2, [r2, #0]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022dc:	3301      	adds	r3, #1
 80022de:	6839      	ldr	r1, [r7, #0]
 80022e0:	440b      	add	r3, r1
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	021b      	lsls	r3, r3, #8
 80022e6:	4313      	orrs	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ee:	3302      	adds	r3, #2
 80022f0:	6839      	ldr	r1, [r7, #0]
 80022f2:	440b      	add	r3, r1
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	041b      	lsls	r3, r3, #16
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002300:	3303      	adds	r3, #3
 8002302:	6839      	ldr	r1, [r7, #0]
 8002304:	440b      	add	r3, r1
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	061b      	lsls	r3, r3, #24
 800230a:	4313      	orrs	r3, r2
 800230c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002316:	3304      	adds	r3, #4
 8002318:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	3208      	adds	r2, #8
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800232c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232e:	3301      	adds	r3, #1
 8002330:	633b      	str	r3, [r7, #48]	; 0x30
 8002332:	e7c3      	b.n	80022bc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	4413      	add	r3, r2
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800233e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002340:	3301      	adds	r3, #1
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	4413      	add	r3, r2
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	69fa      	ldr	r2, [r7, #28]
 800234c:	4313      	orrs	r3, r2
 800234e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002352:	3302      	adds	r3, #2
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	4413      	add	r3, r2
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	041b      	lsls	r3, r3, #16
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	4313      	orrs	r3, r2
 8002360:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002364:	3303      	adds	r3, #3
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	4413      	add	r3, r2
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	061b      	lsls	r3, r3, #24
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	4313      	orrs	r3, r2
 8002372:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002376:	3304      	adds	r3, #4
 8002378:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	69fa      	ldr	r2, [r7, #28]
 8002380:	429a      	cmp	r2, r3
 8002382:	d90a      	bls.n	800239a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699a      	ldr	r2, [r3, #24]
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4619      	mov	r1, r3
 800238e:	4610      	mov	r0, r2
 8002390:	f00c f83a 	bl	800e408 <realloc>
 8002394:	4602      	mov	r2, r0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80023a0:	2300      	movs	r3, #0
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d236      	bcs.n	800241c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023b6:	6839      	ldr	r1, [r7, #0]
 80023b8:	440a      	add	r2, r1
 80023ba:	7812      	ldrb	r2, [r2, #0]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c4:	3301      	adds	r3, #1
 80023c6:	6839      	ldr	r1, [r7, #0]
 80023c8:	440b      	add	r3, r1
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d6:	3302      	adds	r3, #2
 80023d8:	6839      	ldr	r1, [r7, #0]
 80023da:	440b      	add	r3, r1
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	041b      	lsls	r3, r3, #16
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e8:	3303      	adds	r3, #3
 80023ea:	6839      	ldr	r1, [r7, #0]
 80023ec:	440b      	add	r3, r1
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	061b      	lsls	r3, r3, #24
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80023fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fe:	3304      	adds	r3, #4
 8002400:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	3214      	adds	r2, #20
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002416:	3301      	adds	r3, #1
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800241a:	e7c3      	b.n	80023a4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800241c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	4413      	add	r3, r2
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002428:	3301      	adds	r3, #1
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	4413      	add	r3, r2
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	021b      	lsls	r3, r3, #8
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243a:	3302      	adds	r3, #2
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	4413      	add	r3, r2
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	041b      	lsls	r3, r3, #16
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800244a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244c:	3303      	adds	r3, #3
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	4413      	add	r3, r2
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	061b      	lsls	r3, r3, #24
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800245c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245e:	3304      	adds	r3, #4
 8002460:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	429a      	cmp	r2, r3
 800246a:	d90a      	bls.n	8002482 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4619      	mov	r1, r3
 8002476:	4610      	mov	r0, r2
 8002478:	f00b ffc6 	bl	800e408 <realloc>
 800247c:	4602      	mov	r2, r0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002488:	2300      	movs	r3, #0
 800248a:	62bb      	str	r3, [r7, #40]	; 0x28
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002492:	429a      	cmp	r2, r3
 8002494:	d23f      	bcs.n	8002516 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	441a      	add	r2, r3
 800249c:	f107 030c 	add.w	r3, r7, #12
 80024a0:	4611      	mov	r1, r2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f001 f8be 	bl	8003624 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80024a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024aa:	3304      	adds	r3, #4
 80024ac:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80024ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
 80024b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4413      	add	r3, r2
 80024b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d20c      	bcs.n	80024d8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	441a      	add	r2, r3
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	3b01      	subs	r3, #1
 80024c8:	6839      	ldr	r1, [r7, #0]
 80024ca:	440b      	add	r3, r1
 80024cc:	7812      	ldrb	r2, [r2, #0]
 80024ce:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	3301      	adds	r3, #1
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
 80024d6:	e7ec      	b.n	80024b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80024d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4413      	add	r3, r2
 80024de:	3b01      	subs	r3, #1
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80024e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ea:	3b01      	subs	r3, #1
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	441a      	add	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80024f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4413      	add	r3, r2
 80024fa:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	3220      	adds	r2, #32
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	3301      	adds	r3, #1
 8002512:	62bb      	str	r3, [r7, #40]	; 0x28
 8002514:	e7ba      	b.n	800248c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002518:	4618      	mov	r0, r3
 800251a:	3738      	adds	r7, #56	; 0x38
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	0800e8c8 	.word	0x0800e8c8

0800253c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	4b03      	ldr	r3, [pc, #12]	; (8002554 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	0800e7d4 	.word	0x0800e7d4

08002558 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	611a      	str	r2, [r3, #16]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68d8      	ldr	r0, [r3, #12]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6891      	ldr	r1, [r2, #8]
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	4798      	blx	r3
 80025a4:	4603      	mov	r3, r0
  };
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
  }
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a4b      	ldr	r2, [pc, #300]	; (8002708 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d077      	beq.n	80026d0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a48      	ldr	r2, [pc, #288]	; (800270c <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d06f      	beq.n	80026d0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a45      	ldr	r2, [pc, #276]	; (8002710 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d067      	beq.n	80026d0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a42      	ldr	r2, [pc, #264]	; (8002714 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d05f      	beq.n	80026d0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a3f      	ldr	r2, [pc, #252]	; (8002718 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d057      	beq.n	80026d0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a3c      	ldr	r2, [pc, #240]	; (800271c <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d04f      	beq.n	80026d0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a39      	ldr	r2, [pc, #228]	; (8002720 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d047      	beq.n	80026d0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a36      	ldr	r2, [pc, #216]	; (8002724 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d03f      	beq.n	80026d0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a33      	ldr	r2, [pc, #204]	; (8002728 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d037      	beq.n	80026d0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a30      	ldr	r2, [pc, #192]	; (800272c <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d02f      	beq.n	80026d0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a2d      	ldr	r2, [pc, #180]	; (8002730 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d027      	beq.n	80026d0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a2a      	ldr	r2, [pc, #168]	; (8002734 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d01f      	beq.n	80026d0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a27      	ldr	r2, [pc, #156]	; (8002738 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d017      	beq.n	80026d0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a24      	ldr	r2, [pc, #144]	; (800273c <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d00f      	beq.n	80026d0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a21      	ldr	r2, [pc, #132]	; (8002740 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d007      	beq.n	80026d0 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1e      	ldr	r2, [pc, #120]	; (8002744 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d10a      	bne.n	80026e6 <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80026e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026e4:	e009      	b.n	80026fa <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80026f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40020010 	.word	0x40020010
 800270c:	40020028 	.word	0x40020028
 8002710:	40020040 	.word	0x40020040
 8002714:	40020058 	.word	0x40020058
 8002718:	40020070 	.word	0x40020070
 800271c:	40020088 	.word	0x40020088
 8002720:	400200a0 	.word	0x400200a0
 8002724:	400200b8 	.word	0x400200b8
 8002728:	40020410 	.word	0x40020410
 800272c:	40020428 	.word	0x40020428
 8002730:	40020440 	.word	0x40020440
 8002734:	40020458 	.word	0x40020458
 8002738:	40020470 	.word	0x40020470
 800273c:	40020488 	.word	0x40020488
 8002740:	400204a0 	.word	0x400204a0
 8002744:	400204b8 	.word	0x400204b8

08002748 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <_ZN13STM32HardwareC1Ev+0x34>)
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	240002d0 	.word	0x240002d0

08002780 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f804 	bl	8002796 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3304      	adds	r3, #4
 80027a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027aa:	4619      	mov	r1, r3
 80027ac:	f009 fd84 	bl	800c2b8 <HAL_UART_Receive_DMA>
    }
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <_ZN13STM32Hardware4readEv>:

    int read(){
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
      int c = -1;
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295
 80027c4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff fefb 	bl	80025c8 <_ZN13STM32Hardware10getRdmaIndEv>
 80027d2:	4603      	mov	r3, r0
 80027d4:	429c      	cmp	r4, r3
 80027d6:	bf14      	ite	ne
 80027d8:	2301      	movne	r3, #1
 80027da:	2300      	moveq	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d012      	beq.n	8002808 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80027e8:	1c59      	adds	r1, r3, #1
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	4413      	add	r3, r2
 80027f4:	791b      	ldrb	r3, [r3, #4]
 80027f6:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80027fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002808:	68fb      	ldr	r3, [r7, #12]
    }
 800280a:	4618      	mov	r0, r3
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	bd90      	pop	{r4, r7, pc}
	...

08002814 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002824:	2b20      	cmp	r3, #32
 8002826:	d108      	bne.n	800283a <_ZN13STM32Hardware5flushEv+0x26>
 8002828:	4b27      	ldr	r3, [pc, #156]	; (80028c8 <_ZN13STM32Hardware5flushEv+0xb4>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	f083 0301 	eor.w	r3, r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <_ZN13STM32Hardware5flushEv+0x26>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <_ZN13STM32Hardware5flushEv+0x28>
 800283a:	2300      	movs	r3, #0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d03f      	beq.n	80028c0 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002840:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002842:	2201      	movs	r2, #1
 8002844:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002852:	429a      	cmp	r2, r3
 8002854:	d031      	beq.n	80028ba <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002862:	429a      	cmp	r2, r3
 8002864:	d20a      	bcs.n	800287c <_ZN13STM32Hardware5flushEv+0x68>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800286c:	b29a      	uxth	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002874:	b29b      	uxth	r3, r3
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	b29b      	uxth	r3, r3
 800287a:	e006      	b.n	800288a <_ZN13STM32Hardware5flushEv+0x76>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002882:	b29b      	uxth	r3, r3
 8002884:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002888:	b29b      	uxth	r3, r3
 800288a:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002896:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	89fa      	ldrh	r2, [r7, #14]
 80028a0:	4619      	mov	r1, r3
 80028a2:	f009 fc89 	bl	800c1b8 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80028ac:	89fb      	ldrh	r3, [r7, #14]
 80028ae:	4413      	add	r3, r2
 80028b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80028ba:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <_ZN13STM32Hardware5flushEv+0xb4>)
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
      }
    }
 80028c0:	bf00      	nop
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	240004f8 	.word	0x240004f8

080028cc <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
      int n = length;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e2:	bfa8      	it	ge
 80028e4:	f44f 7300 	movge.w	r3, #512	; 0x200
 80028e8:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80028f0:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	4293      	cmp	r3, r2
 80028f8:	bf28      	it	cs
 80028fa:	4613      	movcs	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002904:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4413      	add	r3, r2
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	4618      	mov	r0, r3
 8002912:	f00b fd63 	bl	800e3dc <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	4413      	add	r3, r2
 8002920:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	429a      	cmp	r2, r3
 8002930:	d00b      	beq.n	800294a <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	18d1      	adds	r1, r2, r3
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	461a      	mov	r2, r3
 8002946:	f00b fd49 	bl	800e3dc <memcpy>
      }

      flush();
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f7ff ff62 	bl	8002814 <_ZN13STM32Hardware5flushEv>
    }
 8002950:	bf00      	nop
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	f002 f8ec 	bl	8004b3c <HAL_GetTick>
 8002964:	4603      	mov	r3, r0
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe ffb6 	bl	80018ec <_ZN3ros3MsgC1Ev>
 8002980:	4a0e      	ldr	r2, [pc, #56]	; (80029bc <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	0800e930 	.word	0x0800e930

080029c0 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80029c0:	b480      	push	{r7}
 80029c2:	b08b      	sub	sp, #44	; 0x2c
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80029d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80029d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029de:	6838      	ldr	r0, [r7, #0]
 80029e0:	4401      	add	r1, r0
 80029e2:	b2d3      	uxtb	r3, r2
 80029e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80029e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	0a02      	lsrs	r2, r0, #8
 80029f4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80029f8:	0a0b      	lsrs	r3, r1, #8
 80029fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029fc:	3101      	adds	r1, #1
 80029fe:	6838      	ldr	r0, [r7, #0]
 8002a00:	4401      	add	r1, r0
 8002a02:	b2d3      	uxtb	r3, r2
 8002a04:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002a06:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	0c02      	lsrs	r2, r0, #16
 8002a14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002a18:	0c0b      	lsrs	r3, r1, #16
 8002a1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a1c:	3102      	adds	r1, #2
 8002a1e:	6838      	ldr	r0, [r7, #0]
 8002a20:	4401      	add	r1, r0
 8002a22:	b2d3      	uxtb	r3, r2
 8002a24:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002a26:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	0e02      	lsrs	r2, r0, #24
 8002a34:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a38:	0e0b      	lsrs	r3, r1, #24
 8002a3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a3c:	3103      	adds	r1, #3
 8002a3e:	6838      	ldr	r0, [r7, #0]
 8002a40:	4401      	add	r1, r0
 8002a42:	b2d3      	uxtb	r3, r2
 8002a44:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002a46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	000a      	movs	r2, r1
 8002a54:	2300      	movs	r3, #0
 8002a56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a58:	3104      	adds	r1, #4
 8002a5a:	6838      	ldr	r0, [r7, #0]
 8002a5c:	4401      	add	r1, r0
 8002a5e:	b2d3      	uxtb	r3, r2
 8002a60:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002a62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	0a0a      	lsrs	r2, r1, #8
 8002a70:	2300      	movs	r3, #0
 8002a72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a74:	3105      	adds	r1, #5
 8002a76:	6838      	ldr	r0, [r7, #0]
 8002a78:	4401      	add	r1, r0
 8002a7a:	b2d3      	uxtb	r3, r2
 8002a7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002a7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	0c0a      	lsrs	r2, r1, #16
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a90:	3106      	adds	r1, #6
 8002a92:	6838      	ldr	r0, [r7, #0]
 8002a94:	4401      	add	r1, r0
 8002a96:	b2d3      	uxtb	r3, r2
 8002a98:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002a9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	0e0a      	lsrs	r2, r1, #24
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aac:	3107      	adds	r1, #7
 8002aae:	6838      	ldr	r0, [r7, #0]
 8002ab0:	4401      	add	r1, r0
 8002ab2:	b2d3      	uxtb	r3, r2
 8002ab4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	3308      	adds	r3, #8
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002ac2:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002ac6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002aca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002acc:	6838      	ldr	r0, [r7, #0]
 8002ace:	4401      	add	r1, r0
 8002ad0:	b2d3      	uxtb	r3, r2
 8002ad2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002ad4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	0a02      	lsrs	r2, r0, #8
 8002ae2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002ae6:	0a0b      	lsrs	r3, r1, #8
 8002ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aea:	3101      	adds	r1, #1
 8002aec:	6838      	ldr	r0, [r7, #0]
 8002aee:	4401      	add	r1, r0
 8002af0:	b2d3      	uxtb	r3, r2
 8002af2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002af4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	0c02      	lsrs	r2, r0, #16
 8002b02:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002b06:	0c0b      	lsrs	r3, r1, #16
 8002b08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b0a:	3102      	adds	r1, #2
 8002b0c:	6838      	ldr	r0, [r7, #0]
 8002b0e:	4401      	add	r1, r0
 8002b10:	b2d3      	uxtb	r3, r2
 8002b12:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002b14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	0e02      	lsrs	r2, r0, #24
 8002b22:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b26:	0e0b      	lsrs	r3, r1, #24
 8002b28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b2a:	3103      	adds	r1, #3
 8002b2c:	6838      	ldr	r0, [r7, #0]
 8002b2e:	4401      	add	r1, r0
 8002b30:	b2d3      	uxtb	r3, r2
 8002b32:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002b34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	000a      	movs	r2, r1
 8002b42:	2300      	movs	r3, #0
 8002b44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b46:	3104      	adds	r1, #4
 8002b48:	6838      	ldr	r0, [r7, #0]
 8002b4a:	4401      	add	r1, r0
 8002b4c:	b2d3      	uxtb	r3, r2
 8002b4e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002b50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	0a0a      	lsrs	r2, r1, #8
 8002b5e:	2300      	movs	r3, #0
 8002b60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b62:	3105      	adds	r1, #5
 8002b64:	6838      	ldr	r0, [r7, #0]
 8002b66:	4401      	add	r1, r0
 8002b68:	b2d3      	uxtb	r3, r2
 8002b6a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002b6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	0c0a      	lsrs	r2, r1, #16
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b7e:	3106      	adds	r1, #6
 8002b80:	6838      	ldr	r0, [r7, #0]
 8002b82:	4401      	add	r1, r0
 8002b84:	b2d3      	uxtb	r3, r2
 8002b86:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002b88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	0e0a      	lsrs	r2, r1, #24
 8002b96:	2300      	movs	r3, #0
 8002b98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b9a:	3107      	adds	r1, #7
 8002b9c:	6838      	ldr	r0, [r7, #0]
 8002b9e:	4401      	add	r1, r0
 8002ba0:	b2d3      	uxtb	r3, r2
 8002ba2:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002bb0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002bb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bba:	6838      	ldr	r0, [r7, #0]
 8002bbc:	4401      	add	r1, r0
 8002bbe:	b2d3      	uxtb	r3, r2
 8002bc0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002bc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	0a02      	lsrs	r2, r0, #8
 8002bd0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002bd4:	0a0b      	lsrs	r3, r1, #8
 8002bd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bd8:	3101      	adds	r1, #1
 8002bda:	6838      	ldr	r0, [r7, #0]
 8002bdc:	4401      	add	r1, r0
 8002bde:	b2d3      	uxtb	r3, r2
 8002be0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002be2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	0c02      	lsrs	r2, r0, #16
 8002bf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002bf4:	0c0b      	lsrs	r3, r1, #16
 8002bf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bf8:	3102      	adds	r1, #2
 8002bfa:	6838      	ldr	r0, [r7, #0]
 8002bfc:	4401      	add	r1, r0
 8002bfe:	b2d3      	uxtb	r3, r2
 8002c00:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002c02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	0e02      	lsrs	r2, r0, #24
 8002c10:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c14:	0e0b      	lsrs	r3, r1, #24
 8002c16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c18:	3103      	adds	r1, #3
 8002c1a:	6838      	ldr	r0, [r7, #0]
 8002c1c:	4401      	add	r1, r0
 8002c1e:	b2d3      	uxtb	r3, r2
 8002c20:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002c22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	000a      	movs	r2, r1
 8002c30:	2300      	movs	r3, #0
 8002c32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c34:	3104      	adds	r1, #4
 8002c36:	6838      	ldr	r0, [r7, #0]
 8002c38:	4401      	add	r1, r0
 8002c3a:	b2d3      	uxtb	r3, r2
 8002c3c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002c3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	0a0a      	lsrs	r2, r1, #8
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c50:	3105      	adds	r1, #5
 8002c52:	6838      	ldr	r0, [r7, #0]
 8002c54:	4401      	add	r1, r0
 8002c56:	b2d3      	uxtb	r3, r2
 8002c58:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002c5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	0c0a      	lsrs	r2, r1, #16
 8002c68:	2300      	movs	r3, #0
 8002c6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c6c:	3106      	adds	r1, #6
 8002c6e:	6838      	ldr	r0, [r7, #0]
 8002c70:	4401      	add	r1, r0
 8002c72:	b2d3      	uxtb	r3, r2
 8002c74:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002c76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	0e0a      	lsrs	r2, r1, #24
 8002c84:	2300      	movs	r3, #0
 8002c86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c88:	3107      	adds	r1, #7
 8002c8a:	6838      	ldr	r0, [r7, #0]
 8002c8c:	4401      	add	r1, r0
 8002c8e:	b2d3      	uxtb	r3, r2
 8002c90:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	3308      	adds	r3, #8
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	372c      	adds	r7, #44	; 0x2c
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002ca6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002caa:	b0eb      	sub	sp, #428	; 0x1ac
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002cb2:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002cc8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ccc:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002cd0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cd4:	4413      	add	r3, r2
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2200      	movs	r2, #0
 8002cdc:	461c      	mov	r4, r3
 8002cde:	4615      	mov	r5, r2
 8002ce0:	ea40 0804 	orr.w	r8, r0, r4
 8002ce4:	ea41 0905 	orr.w	r9, r1, r5
 8002ce8:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002cec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002cf0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cfa:	4413      	add	r3, r2
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2200      	movs	r2, #0
 8002d02:	469a      	mov	sl, r3
 8002d04:	4693      	mov	fp, r2
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002d12:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002d16:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002d1a:	ea40 0402 	orr.w	r4, r0, r2
 8002d1e:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002d22:	430b      	orrs	r3, r1
 8002d24:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d28:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002d2c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d30:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002d34:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d38:	1c9a      	adds	r2, r3, #2
 8002d3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d3e:	4413      	add	r3, r2
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2200      	movs	r2, #0
 8002d46:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002d4a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002d5a:	464c      	mov	r4, r9
 8002d5c:	0423      	lsls	r3, r4, #16
 8002d5e:	4644      	mov	r4, r8
 8002d60:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002d64:	4644      	mov	r4, r8
 8002d66:	0422      	lsls	r2, r4, #16
 8002d68:	ea40 0402 	orr.w	r4, r0, r2
 8002d6c:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002d70:	430b      	orrs	r3, r1
 8002d72:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002d76:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002d7a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d7e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002d82:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d86:	1cda      	adds	r2, r3, #3
 8002d88:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d8c:	4413      	add	r3, r2
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002d98:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002d9c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002da0:	4623      	mov	r3, r4
 8002da2:	0a1b      	lsrs	r3, r3, #8
 8002da4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002da8:	4623      	mov	r3, r4
 8002daa:	061b      	lsls	r3, r3, #24
 8002dac:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002db0:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002db4:	4623      	mov	r3, r4
 8002db6:	4303      	orrs	r3, r0
 8002db8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002dbc:	462b      	mov	r3, r5
 8002dbe:	430b      	orrs	r3, r1
 8002dc0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002dc4:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002dc8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002dcc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002dd0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dd4:	1d1a      	adds	r2, r3, #4
 8002dd6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dda:	4413      	add	r3, r2
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2200      	movs	r2, #0
 8002de2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002de6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002df6:	0023      	movs	r3, r4
 8002df8:	2200      	movs	r2, #0
 8002dfa:	ea40 0402 	orr.w	r4, r0, r2
 8002dfe:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002e02:	430b      	orrs	r3, r1
 8002e04:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002e08:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002e0c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002e10:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002e14:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e18:	1d5a      	adds	r2, r3, #5
 8002e1a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e1e:	4413      	add	r3, r2
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2200      	movs	r2, #0
 8002e26:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002e2a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002e3a:	0223      	lsls	r3, r4, #8
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	ea40 0402 	orr.w	r4, r0, r2
 8002e42:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002e46:	430b      	orrs	r3, r1
 8002e48:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002e4c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002e50:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002e54:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002e58:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e5c:	1d9a      	adds	r2, r3, #6
 8002e5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e62:	4413      	add	r3, r2
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002e6e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002e7e:	0423      	lsls	r3, r4, #16
 8002e80:	2200      	movs	r2, #0
 8002e82:	ea40 0402 	orr.w	r4, r0, r2
 8002e86:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002e90:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002e94:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002e98:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002e9c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ea0:	1dda      	adds	r2, r3, #7
 8002ea2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ea6:	4413      	add	r3, r2
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2200      	movs	r2, #0
 8002eae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002eb2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002ec2:	0623      	lsls	r3, r4, #24
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	ea40 0402 	orr.w	r4, r0, r2
 8002eca:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002ed4:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002ed8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002edc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ee0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002ee4:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002ee8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002eec:	3308      	adds	r3, #8
 8002eee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002efe:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002f02:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002f06:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f0a:	4413      	add	r3, r2
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2200      	movs	r2, #0
 8002f12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002f16:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002f1a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002f1e:	4623      	mov	r3, r4
 8002f20:	4303      	orrs	r3, r0
 8002f22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002f26:	462b      	mov	r3, r5
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f2e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002f32:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f36:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002f3a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f44:	4413      	add	r3, r2
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002f50:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002f60:	464c      	mov	r4, r9
 8002f62:	0223      	lsls	r3, r4, #8
 8002f64:	4644      	mov	r4, r8
 8002f66:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002f6a:	4644      	mov	r4, r8
 8002f6c:	0222      	lsls	r2, r4, #8
 8002f6e:	ea40 0402 	orr.w	r4, r0, r2
 8002f72:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002f76:	430b      	orrs	r3, r1
 8002f78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002f7c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002f80:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f84:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002f88:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f8c:	1c9a      	adds	r2, r3, #2
 8002f8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f92:	4413      	add	r3, r2
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002fae:	464c      	mov	r4, r9
 8002fb0:	0423      	lsls	r3, r4, #16
 8002fb2:	4644      	mov	r4, r8
 8002fb4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002fb8:	4644      	mov	r4, r8
 8002fba:	0422      	lsls	r2, r4, #16
 8002fbc:	ea40 0402 	orr.w	r4, r0, r2
 8002fc0:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fca:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002fce:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002fd2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002fd6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fda:	1cda      	adds	r2, r3, #3
 8002fdc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fe0:	4413      	add	r3, r2
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fec:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ff0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002ff4:	4623      	mov	r3, r4
 8002ff6:	0a1b      	lsrs	r3, r3, #8
 8002ff8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002ffc:	4623      	mov	r3, r4
 8002ffe:	061b      	lsls	r3, r3, #24
 8003000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003004:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003008:	4623      	mov	r3, r4
 800300a:	4303      	orrs	r3, r0
 800300c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003010:	462b      	mov	r3, r5
 8003012:	430b      	orrs	r3, r1
 8003014:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003018:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800301c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003020:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003024:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003028:	1d1a      	adds	r2, r3, #4
 800302a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800302e:	4413      	add	r3, r2
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2200      	movs	r2, #0
 8003036:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800303a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800304a:	0023      	movs	r3, r4
 800304c:	2200      	movs	r2, #0
 800304e:	ea40 0402 	orr.w	r4, r0, r2
 8003052:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003056:	430b      	orrs	r3, r1
 8003058:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800305c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003060:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003064:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003068:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800306c:	1d5a      	adds	r2, r3, #5
 800306e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003072:	4413      	add	r3, r2
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2200      	movs	r2, #0
 800307a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800307e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800308e:	0223      	lsls	r3, r4, #8
 8003090:	2200      	movs	r2, #0
 8003092:	ea40 0402 	orr.w	r4, r0, r2
 8003096:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800309a:	430b      	orrs	r3, r1
 800309c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030a0:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80030a4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80030a8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80030ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030b0:	1d9a      	adds	r2, r3, #6
 80030b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030b6:	4413      	add	r3, r2
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2200      	movs	r2, #0
 80030be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80030d2:	0423      	lsls	r3, r4, #16
 80030d4:	2200      	movs	r2, #0
 80030d6:	ea40 0402 	orr.w	r4, r0, r2
 80030da:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80030de:	430b      	orrs	r3, r1
 80030e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030e4:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80030e8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80030ec:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80030f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030f4:	1dda      	adds	r2, r3, #7
 80030f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030fa:	4413      	add	r3, r2
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2200      	movs	r2, #0
 8003102:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003106:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003116:	0623      	lsls	r3, r4, #24
 8003118:	2200      	movs	r2, #0
 800311a:	ea40 0402 	orr.w	r4, r0, r2
 800311e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003122:	430b      	orrs	r3, r1
 8003124:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003128:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800312c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003130:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003134:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003138:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 800313c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003140:	3308      	adds	r3, #8
 8003142:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003152:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003156:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800315a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800315e:	4413      	add	r3, r2
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2200      	movs	r2, #0
 8003166:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800316a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800316e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003172:	4623      	mov	r3, r4
 8003174:	4303      	orrs	r3, r0
 8003176:	67bb      	str	r3, [r7, #120]	; 0x78
 8003178:	462b      	mov	r3, r5
 800317a:	430b      	orrs	r3, r1
 800317c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800317e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003182:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003186:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800318a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003194:	4413      	add	r3, r2
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2200      	movs	r2, #0
 800319c:	673b      	str	r3, [r7, #112]	; 0x70
 800319e:	677a      	str	r2, [r7, #116]	; 0x74
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031ac:	464c      	mov	r4, r9
 80031ae:	0223      	lsls	r3, r4, #8
 80031b0:	4644      	mov	r4, r8
 80031b2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80031b6:	4644      	mov	r4, r8
 80031b8:	0222      	lsls	r2, r4, #8
 80031ba:	ea40 0402 	orr.w	r4, r0, r2
 80031be:	66bc      	str	r4, [r7, #104]	; 0x68
 80031c0:	430b      	orrs	r3, r1
 80031c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031c4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80031c8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80031cc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80031d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031d4:	1c9a      	adds	r2, r3, #2
 80031d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031da:	4413      	add	r3, r2
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2200      	movs	r2, #0
 80031e2:	663b      	str	r3, [r7, #96]	; 0x60
 80031e4:	667a      	str	r2, [r7, #100]	; 0x64
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031f2:	464c      	mov	r4, r9
 80031f4:	0423      	lsls	r3, r4, #16
 80031f6:	4644      	mov	r4, r8
 80031f8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80031fc:	4644      	mov	r4, r8
 80031fe:	0422      	lsls	r2, r4, #16
 8003200:	ea40 0402 	orr.w	r4, r0, r2
 8003204:	65bc      	str	r4, [r7, #88]	; 0x58
 8003206:	430b      	orrs	r3, r1
 8003208:	65fb      	str	r3, [r7, #92]	; 0x5c
 800320a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800320e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003212:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003216:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800321a:	1cda      	adds	r2, r3, #3
 800321c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003220:	4413      	add	r3, r2
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2200      	movs	r2, #0
 8003228:	653b      	str	r3, [r7, #80]	; 0x50
 800322a:	657a      	str	r2, [r7, #84]	; 0x54
 800322c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003230:	4623      	mov	r3, r4
 8003232:	0a1b      	lsrs	r3, r3, #8
 8003234:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003236:	4623      	mov	r3, r4
 8003238:	061b      	lsls	r3, r3, #24
 800323a:	64bb      	str	r3, [r7, #72]	; 0x48
 800323c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003240:	4623      	mov	r3, r4
 8003242:	4303      	orrs	r3, r0
 8003244:	643b      	str	r3, [r7, #64]	; 0x40
 8003246:	462b      	mov	r3, r5
 8003248:	430b      	orrs	r3, r1
 800324a:	647b      	str	r3, [r7, #68]	; 0x44
 800324c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003250:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003254:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003258:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800325c:	1d1a      	adds	r2, r3, #4
 800325e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003262:	4413      	add	r3, r2
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2200      	movs	r2, #0
 800326a:	63bb      	str	r3, [r7, #56]	; 0x38
 800326c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003278:	0023      	movs	r3, r4
 800327a:	2200      	movs	r2, #0
 800327c:	ea40 0402 	orr.w	r4, r0, r2
 8003280:	633c      	str	r4, [r7, #48]	; 0x30
 8003282:	430b      	orrs	r3, r1
 8003284:	637b      	str	r3, [r7, #52]	; 0x34
 8003286:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800328a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800328e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003292:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003296:	1d5a      	adds	r2, r3, #5
 8003298:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800329c:	4413      	add	r3, r2
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2200      	movs	r2, #0
 80032a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80032b2:	0223      	lsls	r3, r4, #8
 80032b4:	2200      	movs	r2, #0
 80032b6:	ea40 0402 	orr.w	r4, r0, r2
 80032ba:	623c      	str	r4, [r7, #32]
 80032bc:	430b      	orrs	r3, r1
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
 80032c0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80032c4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80032c8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80032cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032d0:	3306      	adds	r3, #6
 80032d2:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80032d6:	4413      	add	r3, r2
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2200      	movs	r2, #0
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	61fa      	str	r2, [r7, #28]
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	69bc      	ldr	r4, [r7, #24]
 80032ec:	0423      	lsls	r3, r4, #16
 80032ee:	2200      	movs	r2, #0
 80032f0:	ea40 0402 	orr.w	r4, r0, r2
 80032f4:	613c      	str	r4, [r7, #16]
 80032f6:	430b      	orrs	r3, r1
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80032fe:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003302:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003306:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800330a:	3307      	adds	r3, #7
 800330c:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003310:	4413      	add	r3, r2
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2200      	movs	r2, #0
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	60fa      	str	r2, [r7, #12]
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	68bc      	ldr	r4, [r7, #8]
 8003326:	0623      	lsls	r3, r4, #24
 8003328:	2200      	movs	r2, #0
 800332a:	ea40 0402 	orr.w	r4, r0, r2
 800332e:	603c      	str	r4, [r7, #0]
 8003330:	430b      	orrs	r3, r1
 8003332:	607b      	str	r3, [r7, #4]
 8003334:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003338:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 800333c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003340:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003344:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003348:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800334c:	3308      	adds	r3, #8
 800334e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003352:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003356:	4618      	mov	r0, r3
 8003358:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 800335c:	46bd      	mov	sp, r7
 800335e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003362:	4770      	bx	lr

08003364 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	4b03      	ldr	r3, [pc, #12]	; (800337c <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800336e:	4618      	mov	r0, r3
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	0800e7f8 	.word	0x0800e7f8

08003380 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	4b03      	ldr	r3, [pc, #12]	; (8003398 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	0800e810 	.word	0x0800e810

0800339c <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fe faa0 	bl	80018ec <_ZN3ros3MsgC1Ev>
 80033ac:	4a08      	ldr	r2, [pc, #32]	; (80033d0 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3308      	adds	r3, #8
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff fada 	bl	8002970 <_ZN13geometry_msgs7Vector3C1Ev>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3328      	adds	r3, #40	; 0x28
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fad5 	bl	8002970 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	0800e918 	.word	0x0800e918

080033d4 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f103 0008 	add.w	r0, r3, #8
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	4413      	add	r3, r2
 80033ee:	4619      	mov	r1, r3
 80033f0:	f7ff fae6 	bl	80029c0 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80033f4:	4602      	mov	r2, r0
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4413      	add	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	4413      	add	r3, r2
 8003408:	4619      	mov	r1, r3
 800340a:	f7ff fad9 	bl	80029c0 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800340e:	4602      	mov	r2, r0
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4413      	add	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
      return offset;
 8003416:	68fb      	ldr	r3, [r7, #12]
    }
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f103 0008 	add.w	r0, r3, #8
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	4413      	add	r3, r2
 800343a:	4619      	mov	r1, r3
 800343c:	f7ff fc33 	bl	8002ca6 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003440:	4602      	mov	r2, r0
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4413      	add	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	4413      	add	r3, r2
 8003454:	4619      	mov	r1, r3
 8003456:	f7ff fc26 	bl	8002ca6 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800345a:	4602      	mov	r2, r0
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4413      	add	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]
     return offset;
 8003462:	68fb      	ldr	r3, [r7, #12]
    }
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003476:	4618      	mov	r0, r3
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	0800e834 	.word	0x0800e834

08003488 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003492:	4618      	mov	r0, r3
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	0800e848 	.word	0x0800e848

080034a4 <_Z12vel_callbackRKN13geometry_msgs5TwistE>:
#include "stm32h7xx_hal.h"
#include "geometry_msgs/Twist.h"
float Vx, Vy, W;
float rVx, rVy, rW;
void vel_callback(const geometry_msgs::Twist &msg)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	ed93 7b04 	vldr	d7, [r3, #16]
 80034b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80034b6:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x44>)
 80034b8:	edc3 7a00 	vstr	s15, [r3]
	Vy = msg.linear.y;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	ed93 7b06 	vldr	d7, [r3, #24]
 80034c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x48>)
 80034c8:	edc3 7a00 	vstr	s15, [r3]
	W=msg.angular.z;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80034d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80034d6:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x4c>)
 80034d8:	edc3 7a00 	vstr	s15, [r3]
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	240004fc 	.word	0x240004fc
 80034ec:	24000500 	.word	0x24000500
 80034f0:	24000504 	.word	0x24000504

080034f4 <HAL_UART_TxCpltCallback>:
ros::Subscriber<geometry_msgs::Twist> sub("cmdvel_toSTM", vel_callback);
geometry_msgs::Twist speed;
ros::Publisher pub("speed_fromSTM",&speed);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 80034fc:	4805      	ldr	r0, [pc, #20]	; (8003514 <HAL_UART_TxCpltCallback+0x20>)
 80034fe:	f000 f97b 	bl	80037f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003502:	4603      	mov	r3, r0
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff f985 	bl	8002814 <_ZN13STM32Hardware5flushEv>
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	24000514 	.word	0x24000514

08003518 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003520:	4805      	ldr	r0, [pc, #20]	; (8003538 <HAL_UART_RxCpltCallback+0x20>)
 8003522:	f000 f969 	bl	80037f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003526:	4603      	mov	r3, r0
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff f934 	bl	8002796 <_ZN13STM32Hardware10reset_rbufEv>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	24000514 	.word	0x24000514

0800353c <setup>:
void setup(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
    nh.initNode();
 8003540:	4806      	ldr	r0, [pc, #24]	; (800355c <setup+0x20>)
 8003542:	f000 f965 	bl	8003810 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 8003546:	4906      	ldr	r1, [pc, #24]	; (8003560 <setup+0x24>)
 8003548:	4804      	ldr	r0, [pc, #16]	; (800355c <setup+0x20>)
 800354a:	f000 f97e 	bl	800384a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.advertise(pub);
 800354e:	4905      	ldr	r1, [pc, #20]	; (8003564 <setup+0x28>)
 8003550:	4802      	ldr	r0, [pc, #8]	; (800355c <setup+0x20>)
 8003552:	f000 f9a5 	bl	80038a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	24000514 	.word	0x24000514
 8003560:	24000e50 	.word	0x24000e50
 8003564:	24000ef8 	.word	0x24000ef8

08003568 <loop>:
void loop(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
    nh.spinOnce();
 800356c:	4802      	ldr	r0, [pc, #8]	; (8003578 <loop+0x10>)
 800356e:	f000 f9c7 	bl	8003900 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	24000514 	.word	0x24000514

0800357c <realspeed>:
void errcallback(void) {
	nh.getHardware()->init();
}

void realspeed(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b092      	sub	sp, #72	; 0x48
 8003580:	af00      	add	r7, sp, #0
	geometry_msgs::Twist speed_;
 8003582:	463b      	mov	r3, r7
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ff09 	bl	800339c <_ZN13geometry_msgs5TwistC1Ev>
	speed_.linear.x=rVx;
 800358a:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <realspeed+0x58>)
 800358c:	edd3 7a00 	vldr	s15, [r3]
 8003590:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003594:	ed87 7b04 	vstr	d7, [r7, #16]
	speed_.linear.y=rVy;
 8003598:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <realspeed+0x5c>)
 800359a:	edd3 7a00 	vldr	s15, [r3]
 800359e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035a2:	ed87 7b06 	vstr	d7, [r7, #24]
	speed_.angular.z=rW;
 80035a6:	4b0d      	ldr	r3, [pc, #52]	; (80035dc <realspeed+0x60>)
 80035a8:	edd3 7a00 	vldr	s15, [r3]
 80035ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035b0:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	static bool flag = false;
	if(flag) pub.publish(&speed_);
 80035b4:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <realspeed+0x64>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d004      	beq.n	80035c6 <realspeed+0x4a>
 80035bc:	463b      	mov	r3, r7
 80035be:	4619      	mov	r1, r3
 80035c0:	4808      	ldr	r0, [pc, #32]	; (80035e4 <realspeed+0x68>)
 80035c2:	f7fe ffe0 	bl	8002586 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	flag = true;
 80035c6:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <realspeed+0x64>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	701a      	strb	r2, [r3, #0]
}
 80035cc:	bf00      	nop
 80035ce:	3748      	adds	r7, #72	; 0x48
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	24000508 	.word	0x24000508
 80035d8:	2400050c 	.word	0x2400050c
 80035dc:	24000510 	.word	0x24000510
 80035e0:	24000f0c 	.word	0x24000f0c
 80035e4:	24000ef8 	.word	0x24000ef8

080035e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d80d      	bhi.n	8003618 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	fa22 f103 	lsr.w	r1, r2, r3
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	b2ca      	uxtb	r2, r1
 800360e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3301      	adds	r3, #1
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	e7ee      	b.n	80035f6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003618:	bf00      	nop
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b03      	cmp	r3, #3
 800363c:	d811      	bhi.n	8003662 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6839      	ldr	r1, [r7, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	440a      	add	r2, r1
 8003648:	7812      	ldrb	r2, [r2, #0]
 800364a:	4611      	mov	r1, r2
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	00d2      	lsls	r2, r2, #3
 8003650:	fa01 f202 	lsl.w	r2, r1, r2
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3301      	adds	r3, #1
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	e7ea      	b.n	8003638 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003662:	bf00      	nop
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	4a04      	ldr	r2, [pc, #16]	; (800368c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	0800e960 	.word	0x0800e960

08003690 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff ffe8 	bl	8003670 <_ZN3ros15NodeHandleBase_C1Ev>
 80036a0:	4a3a      	ldr	r2, [pc, #232]	; (800378c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3304      	adds	r3, #4
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff f84c 	bl	8002748 <_ZN13STM32HardwareC1Ev>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe fc88 	bl	8001fd4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2b18      	cmp	r3, #24
 80036cc:	d80b      	bhi.n	80036e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	2200      	movs	r2, #0
 80036dc:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	3301      	adds	r3, #1
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	e7f0      	b.n	80036c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b18      	cmp	r3, #24
 80036ee:	d80a      	bhi.n	8003706 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80036f8:	2100      	movs	r1, #0
 80036fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	3301      	adds	r3, #1
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	e7f1      	b.n	80036ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003710:	d20a      	bcs.n	8003728 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4413      	add	r3, r2
 8003718:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3301      	adds	r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	e7f0      	b.n	800370a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003728:	2300      	movs	r3, #0
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003732:	d20a      	bcs.n	800374a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4413      	add	r3, r2
 800373a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800373e:	2200      	movs	r2, #0
 8003740:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	3301      	adds	r3, #1
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	e7f0      	b.n	800372c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	0800e904 	.word	0x0800e904

08003790 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	4a04      	ldr	r2, [pc, #16]	; (80037ac <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4618      	mov	r0, r3
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	0800e948 	.word	0x0800e948

080037b0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff ffe5 	bl	8003790 <_ZN3ros11Subscriber_C1Ev>
 80037c6:	4a0b      	ldr	r2, [pc, #44]	; (80037f4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	3310      	adds	r3, #16
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff fde3 	bl	800339c <_ZN13geometry_msgs5TwistC1Ev>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	659a      	str	r2, [r3, #88]	; 0x58
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	609a      	str	r2, [r3, #8]
  };
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	0800e8ec 	.word	0x0800e8ec

080037f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3304      	adds	r3, #4
  }
 8003804:	4618      	mov	r0, r3
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3304      	adds	r3, #4
 800381c:	4618      	mov	r0, r3
 800381e:	f7fe ffaf 	bl	8002780 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800384a:	b480      	push	{r7}
 800384c:	b085      	sub	sp, #20
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b18      	cmp	r3, #24
 800385c:	dc19      	bgt.n	8003892 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10d      	bne.n	800388a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800386e:	6839      	ldr	r1, [r7, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	605a      	str	r2, [r3, #4]
        return true;
 8003886:	2301      	movs	r3, #1
 8003888:	e004      	b.n	8003894 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3301      	adds	r3, #1
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	e7e2      	b.n	8003858 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8003892:	2300      	movs	r3, #0
  }
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b18      	cmp	r3, #24
 80038b2:	dc1e      	bgt.n	80038f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d111      	bne.n	80038ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	60da      	str	r2, [r3, #12]
        return true;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e004      	b.n	80038f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	3301      	adds	r3, #1
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	e7dd      	b.n	80038ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 80038f2:	2300      	movs	r3, #0
  }
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3304      	adds	r3, #4
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff f823 	bl	8002958 <_ZN13STM32Hardware4timeEv>
 8003912:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003922:	4293      	cmp	r3, r2
 8003924:	d903      	bls.n	800392e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003934:	2b00      	cmp	r3, #0
 8003936:	d009      	beq.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	429a      	cmp	r2, r3
 8003942:	d903      	bls.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003952:	2b00      	cmp	r3, #0
 8003954:	d014      	beq.n	8003980 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3304      	adds	r3, #4
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe fffc 	bl	8002958 <_ZN13STM32Hardware4timeEv>
 8003960:	4602      	mov	r2, r0
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1ad2      	subs	r2, r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800396c:	429a      	cmp	r2, r3
 800396e:	bf8c      	ite	hi
 8003970:	2301      	movhi	r3, #1
 8003972:	2300      	movls	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800397a:	f06f 0301 	mvn.w	r3, #1
 800397e:	e194      	b.n	8003caa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3304      	adds	r3, #4
 8003984:	4618      	mov	r0, r3
 8003986:	f7fe ff17 	bl	80027b8 <_ZN13STM32Hardware4readEv>
 800398a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	f2c0 8174 	blt.w	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	441a      	add	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80039aa:	2b07      	cmp	r3, #7
 80039ac:	d11e      	bne.n	80039ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80039b4:	1c59      	adds	r1, r3, #1
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	b2d1      	uxtb	r1, r2
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	4413      	add	r3, r2
 80039c4:	460a      	mov	r2, r1
 80039c6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80039d0:	1e5a      	subs	r2, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1b4      	bne.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2208      	movs	r2, #8
 80039e6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80039ea:	e7af      	b.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d128      	bne.n	8003a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2bff      	cmp	r3, #255	; 0xff
 80039fa:	d10d      	bne.n	8003a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f103 0214 	add.w	r2, r3, #20
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003a16:	e799      	b.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fe ff9b 	bl	8002958 <_ZN13STM32Hardware4timeEv>
 8003a22:	4602      	mov	r2, r0
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	bf8c      	ite	hi
 8003a30:	2301      	movhi	r3, #1
 8003a32:	2300      	movls	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d088      	beq.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003a42:	f06f 0301 	mvn.w	r3, #1
 8003a46:	e130      	b.n	8003caa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d118      	bne.n	8003a84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2bfe      	cmp	r3, #254	; 0xfe
 8003a56:	d107      	bne.n	8003a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003a66:	e771      	b.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f47f af68 	bne.w	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f918 	bl	8003cb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003a82:	e763      	b.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d113      	bne.n	8003ab6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003ab4:	e74a      	b.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d110      	bne.n	8003ae2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	021b      	lsls	r3, r3, #8
 8003aca:	441a      	add	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003ae0:	e734      	b.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d116      	bne.n	8003b1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003af2:	425a      	negs	r2, r3
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	bf58      	it	pl
 8003afa:	4253      	negpl	r3, r2
 8003afc:	2bff      	cmp	r3, #255	; 0xff
 8003afe:	d107      	bne.n	8003b10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003b0e:	e71d      	b.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003b18:	e718      	b.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003b20:	2b05      	cmp	r3, #5
 8003b22:	d10f      	bne.n	8003b44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003b42:	e703      	b.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003b4a:	2b06      	cmp	r3, #6
 8003b4c:	d117      	bne.n	8003b7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	021b      	lsls	r3, r3, #8
 8003b58:	441a      	add	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2207      	movs	r2, #7
 8003b64:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f47f aeec 	bne.w	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2208      	movs	r2, #8
 8003b78:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003b7c:	e6e6      	b.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	f47f aee1 	bne.w	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003b98:	425a      	negs	r2, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	bf58      	it	pl
 8003ba0:	4253      	negpl	r3, r2
 8003ba2:	2bff      	cmp	r3, #255	; 0xff
 8003ba4:	f47f aed2 	bne.w	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d110      	bne.n	8003bd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f87d 	bl	8003cb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f898 	bl	8003cee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8003bce:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd2:	e06a      	b.n	8003caa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003bda:	2b0a      	cmp	r3, #10
 8003bdc:	d107      	bne.n	8003bee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003be4:	4619      	mov	r1, r3
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f960 	bl	8003eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003bec:	e6ae      	b.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003bf4:	2b06      	cmp	r3, #6
 8003bf6:	d10e      	bne.n	8003c16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003c04:	4619      	mov	r1, r3
 8003c06:	4610      	mov	r0, r2
 8003c08:	f7fe fb19 	bl	800223e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003c14:	e69a      	b.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003c1c:	2b0b      	cmp	r3, #11
 8003c1e:	d104      	bne.n	8003c2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003c28:	e690      	b.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003c30:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f43f ae84 	beq.w	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003c4a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003c54:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003c5e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003c76:	4611      	mov	r1, r2
 8003c78:	4798      	blx	r3
    while (true)
 8003c7a:	e667      	b.n	800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003c7c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00f      	beq.n	8003ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d906      	bls.n	8003ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f809 	bl	8003cb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8003ca8:	2300      	movs	r3, #0
  }
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b086      	sub	sp, #24
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003cba:	f107 030c 	add.w	r3, r7, #12
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fd fe24 	bl	800190c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f107 020c 	add.w	r2, r7, #12
 8003cce:	210a      	movs	r1, #10
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	4798      	blx	r3
    rt_time = hardware_.time();
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fe fe3d 	bl	8002958 <_ZN13STM32Hardware4timeEv>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003ce6:	bf00      	nop
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003cee:	b590      	push	{r4, r7, lr}
 8003cf0:	b08b      	sub	sp, #44	; 0x2c
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003cf6:	f107 030c 	add.w	r3, r7, #12
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fd fef6 	bl	8001aec <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003d00:	2300      	movs	r3, #0
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	2b18      	cmp	r3, #24
 8003d08:	dc63      	bgt.n	8003dd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d056      	beq.n	8003dca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	6859      	ldr	r1, [r3, #4]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3308      	adds	r3, #8
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4608      	mov	r0, r1
 8003d6a:	4798      	blx	r3
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	6859      	ldr	r1, [r3, #4]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	330c      	adds	r3, #12
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4608      	mov	r0, r1
 8003d98:	4798      	blx	r3
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003da2:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681c      	ldr	r4, [r3, #0]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fe fbf8 	bl	80025ae <_ZN3ros9Publisher15getEndpointTypeEv>
 8003dbe:	4601      	mov	r1, r0
 8003dc0:	f107 030c 	add.w	r3, r7, #12
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	3301      	adds	r3, #1
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd0:	e798      	b.n	8003d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	2b18      	cmp	r3, #24
 8003dda:	dc5f      	bgt.n	8003e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d053      	beq.n	8003e94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e02:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e12:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003e16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3308      	adds	r3, #8
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4608      	mov	r0, r1
 8003e2e:	4798      	blx	r3
 8003e30:	4603      	mov	r3, r0
 8003e32:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e38:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003e3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e44:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	330c      	adds	r3, #12
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4608      	mov	r0, r1
 8003e54:	4798      	blx	r3
 8003e56:	4603      	mov	r3, r0
 8003e58:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003e5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e5e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681c      	ldr	r4, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003e6e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e76:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3304      	adds	r3, #4
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4608      	mov	r0, r1
 8003e86:	4798      	blx	r3
 8003e88:	4601      	mov	r1, r0
 8003e8a:	f107 030c 	add.w	r3, r7, #12
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	3301      	adds	r3, #1
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9a:	e79c      	b.n	8003dd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003ea4:	bf00      	nop
 8003ea6:	372c      	adds	r7, #44	; 0x2c
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd90      	pop	{r4, r7, pc}

08003eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003eb6:	f107 0308 	add.w	r3, r7, #8
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fd fd26 	bl	800190c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fe fd47 	bl	8002958 <_ZN13STM32Hardware4timeEv>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003ed6:	f107 0308 	add.w	r3, r7, #8
 8003eda:	6839      	ldr	r1, [r7, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fd fd85 	bl	80019ec <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	4915      	ldr	r1, [pc, #84]	; (8003f3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003ee8:	fba1 1303 	umull	r1, r3, r1, r3
 8003eec:	099b      	lsrs	r3, r3, #6
 8003eee:	4413      	add	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003ef2:	6939      	ldr	r1, [r7, #16]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	4b11      	ldr	r3, [pc, #68]	; (8003f3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003ef8:	fba3 0302 	umull	r0, r3, r3, r2
 8003efc:	099b      	lsrs	r3, r3, #6
 8003efe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f02:	fb00 f303 	mul.w	r3, r0, r3
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	4a0d      	ldr	r2, [pc, #52]	; (8003f40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003f0a:	fb02 f303 	mul.w	r3, r2, r3
 8003f0e:	440b      	add	r3, r1
 8003f10:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003f12:	f107 0308 	add.w	r3, r7, #8
 8003f16:	3304      	adds	r3, #4
 8003f18:	4619      	mov	r1, r3
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f8a6 	bl	800406c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fe fd17 	bl	8002958 <_ZN13STM32Hardware4timeEv>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003f32:	bf00      	nop
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	10624dd3 	.word	0x10624dd3
 8003f40:	000f4240 	.word	0x000f4240

08003f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b63      	cmp	r3, #99	; 0x63
 8003f54:	dd09      	ble.n	8003f6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003f5c:	f083 0301 	eor.w	r3, r3, #1
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	e079      	b.n	800405e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003f76:	3207      	adds	r2, #7
 8003f78:	4611      	mov	r1, r2
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	4798      	blx	r3
 8003f7e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	22ff      	movs	r2, #255	; 0xff
 8003f84:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	22fe      	movs	r2, #254	; 0xfe
 8003f8c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	0a1b      	lsrs	r3, r3, #8
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003fb6:	4413      	add	r3, r2
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	b21b      	sxth	r3, r3
 8003fd2:	121b      	asrs	r3, r3, #8
 8003fd4:	b21b      	sxth	r3, r3
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003fe2:	2305      	movs	r3, #5
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	3306      	adds	r3, #6
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	dc0d      	bgt.n	800400c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	4413      	add	r3, r2
 8004002:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	3301      	adds	r3, #1
 8004008:	61bb      	str	r3, [r7, #24]
 800400a:	e7ec      	b.n	8003fe6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	3307      	adds	r3, #7
 8004010:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	425a      	negs	r2, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	bf58      	it	pl
 800401c:	4253      	negpl	r3, r2
 800401e:	b2da      	uxtb	r2, r3
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	1c59      	adds	r1, r3, #1
 8004024:	6179      	str	r1, [r7, #20]
 8004026:	43d2      	mvns	r2, r2
 8004028:	b2d1      	uxtb	r1, r2
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4413      	add	r3, r2
 800402e:	460a      	mov	r2, r1
 8004030:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800403a:	dc0a      	bgt.n	8004052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	1d18      	adds	r0, r3, #4
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4619      	mov	r1, r3
 800404a:	f7fe fc3f 	bl	80028cc <_ZN13STM32Hardware5writeEPhi>
      return l;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	e005      	b.n	800405e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004052:	4905      	ldr	r1, [pc, #20]	; (8004068 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f849 	bl	80040ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800405a:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800405e:	4618      	mov	r0, r3
 8004060:	3720      	adds	r7, #32
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	0800e86c 	.word	0x0800e86c

0800406c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3304      	adds	r3, #4
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe fc6c 	bl	8002958 <_ZN13STM32Hardware4timeEv>
 8004080:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4915      	ldr	r1, [pc, #84]	; (80040e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800408a:	fba1 1303 	umull	r1, r3, r1, r3
 800408e:	099b      	lsrs	r3, r3, #6
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	1e5a      	subs	r2, r3, #1
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6859      	ldr	r1, [r3, #4]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80040a2:	fba3 0302 	umull	r0, r3, r3, r2
 80040a6:	099b      	lsrs	r3, r3, #6
 80040a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040ac:	fb00 f303 	mul.w	r3, r0, r3
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	4a0c      	ldr	r2, [pc, #48]	; (80040e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80040b4:	fb02 f303 	mul.w	r3, r2, r3
 80040b8:	1aca      	subs	r2, r1, r3
 80040ba:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80040bc:	4413      	add	r3, r2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80040d0:	4619      	mov	r1, r3
 80040d2:	4610      	mov	r0, r2
 80040d4:	f7fc faa6 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80040d8:	bf00      	nop
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	10624dd3 	.word	0x10624dd3
 80040e4:	000f4240 	.word	0x000f4240
 80040e8:	3b9aca00 	.word	0x3b9aca00

080040ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	2103      	movs	r1, #3
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f804 	bl	8004108 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004100:	bf00      	nop
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	460b      	mov	r3, r1
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004116:	f107 0314 	add.w	r3, r7, #20
 800411a:	4618      	mov	r0, r3
 800411c:	f7fd feaa 	bl	8001e74 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004120:	7afb      	ldrb	r3, [r7, #11]
 8004122:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f107 0214 	add.w	r2, r7, #20
 8004132:	2107      	movs	r1, #7
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	4798      	blx	r3
  }
 8004138:	bf00      	nop
 800413a:	3720      	adds	r7, #32
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <_Z41__static_initialization_and_destruction_0ii>:
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d116      	bne.n	800417e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004156:	4293      	cmp	r3, r2
 8004158:	d111      	bne.n	800417e <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 800415a:	480b      	ldr	r0, [pc, #44]	; (8004188 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800415c:	f7ff fa98 	bl	8003690 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub("cmdvel_toSTM", vel_callback);
 8004160:	2301      	movs	r3, #1
 8004162:	4a0a      	ldr	r2, [pc, #40]	; (800418c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004164:	490a      	ldr	r1, [pc, #40]	; (8004190 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004166:	480b      	ldr	r0, [pc, #44]	; (8004194 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004168:	f7ff fb22 	bl	80037b0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
geometry_msgs::Twist speed;
 800416c:	480a      	ldr	r0, [pc, #40]	; (8004198 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800416e:	f7ff f915 	bl	800339c <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher pub("speed_fromSTM",&speed);
 8004172:	2300      	movs	r3, #0
 8004174:	4a08      	ldr	r2, [pc, #32]	; (8004198 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004176:	4909      	ldr	r1, [pc, #36]	; (800419c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004178:	4809      	ldr	r0, [pc, #36]	; (80041a0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800417a:	f7fe f9ed 	bl	8002558 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800417e:	bf00      	nop
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	24000514 	.word	0x24000514
 800418c:	080034a5 	.word	0x080034a5
 8004190:	0800e8a8 	.word	0x0800e8a8
 8004194:	24000e50 	.word	0x24000e50
 8004198:	24000eb0 	.word	0x24000eb0
 800419c:	0800e8b8 	.word	0x0800e8b8
 80041a0:	24000ef8 	.word	0x24000ef8

080041a4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3310      	adds	r3, #16
 80041b2:	6839      	ldr	r1, [r7, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff f933 	bl	8003420 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	3210      	adds	r2, #16
 80041c2:	4610      	mov	r0, r2
 80041c4:	4798      	blx	r3
  }
 80041c6:	bf00      	nop
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 80041da:	4618      	mov	r0, r3
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3310      	adds	r3, #16
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff f93a 	bl	800346c <_ZN13geometry_msgs5Twist7getTypeEv>
 80041f8:	4603      	mov	r3, r0
  }
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004202:	b580      	push	{r7, lr}
 8004204:	b082      	sub	sp, #8
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3310      	adds	r3, #16
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff f93a 	bl	8003488 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004214:	4603      	mov	r3, r0
  }
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
    return configured_;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800422c:	4618      	mov	r0, r3
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <_GLOBAL__sub_I_Vx>:
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
 800423c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004240:	2001      	movs	r0, #1
 8004242:	f7ff ff7d 	bl	8004140 <_Z41__static_initialization_and_destruction_0ii>
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800424e:	4b0d      	ldr	r3, [pc, #52]	; (8004284 <HAL_MspInit+0x3c>)
 8004250:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004254:	4a0b      	ldr	r2, [pc, #44]	; (8004284 <HAL_MspInit+0x3c>)
 8004256:	f043 0302 	orr.w	r3, r3, #2
 800425a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800425e:	4b09      	ldr	r3, [pc, #36]	; (8004284 <HAL_MspInit+0x3c>)
 8004260:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	607b      	str	r3, [r7, #4]
 800426a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800426c:	2200      	movs	r2, #0
 800426e:	2100      	movs	r1, #0
 8004270:	2005      	movs	r0, #5
 8004272:	f000 fd4a 	bl	8004d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004276:	2005      	movs	r0, #5
 8004278:	f000 fd61 	bl	8004d3e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	58024400 	.word	0x58024400

08004288 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08e      	sub	sp, #56	; 0x38
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	609a      	str	r2, [r3, #8]
 800429c:	60da      	str	r2, [r3, #12]
 800429e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a4f      	ldr	r2, [pc, #316]	; (80043e4 <HAL_TIM_Encoder_MspInit+0x15c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d12f      	bne.n	800430a <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042aa:	4b4f      	ldr	r3, [pc, #316]	; (80043e8 <HAL_TIM_Encoder_MspInit+0x160>)
 80042ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042b0:	4a4d      	ldr	r2, [pc, #308]	; (80043e8 <HAL_TIM_Encoder_MspInit+0x160>)
 80042b2:	f043 0301 	orr.w	r3, r3, #1
 80042b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80042ba:	4b4b      	ldr	r3, [pc, #300]	; (80043e8 <HAL_TIM_Encoder_MspInit+0x160>)
 80042bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	623b      	str	r3, [r7, #32]
 80042c6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042c8:	4b47      	ldr	r3, [pc, #284]	; (80043e8 <HAL_TIM_Encoder_MspInit+0x160>)
 80042ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042ce:	4a46      	ldr	r2, [pc, #280]	; (80043e8 <HAL_TIM_Encoder_MspInit+0x160>)
 80042d0:	f043 0310 	orr.w	r3, r3, #16
 80042d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042d8:	4b43      	ldr	r3, [pc, #268]	; (80043e8 <HAL_TIM_Encoder_MspInit+0x160>)
 80042da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042de:	f003 0310 	and.w	r3, r3, #16
 80042e2:	61fb      	str	r3, [r7, #28]
 80042e4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80042e6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ec:	2302      	movs	r3, #2
 80042ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f4:	2300      	movs	r3, #0
 80042f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80042f8:	2301      	movs	r3, #1
 80042fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004300:	4619      	mov	r1, r3
 8004302:	483a      	ldr	r0, [pc, #232]	; (80043ec <HAL_TIM_Encoder_MspInit+0x164>)
 8004304:	f003 fb70 	bl	80079e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8004308:	e067      	b.n	80043da <HAL_TIM_Encoder_MspInit+0x152>
  else if(htim_encoder->Instance==TIM4)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a38      	ldr	r2, [pc, #224]	; (80043f0 <HAL_TIM_Encoder_MspInit+0x168>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d12f      	bne.n	8004374 <HAL_TIM_Encoder_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004314:	4b34      	ldr	r3, [pc, #208]	; (80043e8 <HAL_TIM_Encoder_MspInit+0x160>)
 8004316:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800431a:	4a33      	ldr	r2, [pc, #204]	; (80043e8 <HAL_TIM_Encoder_MspInit+0x160>)
 800431c:	f043 0304 	orr.w	r3, r3, #4
 8004320:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004324:	4b30      	ldr	r3, [pc, #192]	; (80043e8 <HAL_TIM_Encoder_MspInit+0x160>)
 8004326:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	61bb      	str	r3, [r7, #24]
 8004330:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004332:	4b2d      	ldr	r3, [pc, #180]	; (80043e8 <HAL_TIM_Encoder_MspInit+0x160>)
 8004334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004338:	4a2b      	ldr	r2, [pc, #172]	; (80043e8 <HAL_TIM_Encoder_MspInit+0x160>)
 800433a:	f043 0308 	orr.w	r3, r3, #8
 800433e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004342:	4b29      	ldr	r3, [pc, #164]	; (80043e8 <HAL_TIM_Encoder_MspInit+0x160>)
 8004344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004350:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004356:	2302      	movs	r3, #2
 8004358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435a:	2300      	movs	r3, #0
 800435c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800435e:	2300      	movs	r3, #0
 8004360:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004362:	2302      	movs	r3, #2
 8004364:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800436a:	4619      	mov	r1, r3
 800436c:	4821      	ldr	r0, [pc, #132]	; (80043f4 <HAL_TIM_Encoder_MspInit+0x16c>)
 800436e:	f003 fb3b 	bl	80079e8 <HAL_GPIO_Init>
}
 8004372:	e032      	b.n	80043da <HAL_TIM_Encoder_MspInit+0x152>
  else if(htim_encoder->Instance==TIM23)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1f      	ldr	r2, [pc, #124]	; (80043f8 <HAL_TIM_Encoder_MspInit+0x170>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d12d      	bne.n	80043da <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800437e:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <HAL_TIM_Encoder_MspInit+0x160>)
 8004380:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004384:	4a18      	ldr	r2, [pc, #96]	; (80043e8 <HAL_TIM_Encoder_MspInit+0x160>)
 8004386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800438a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800438e:	4b16      	ldr	r3, [pc, #88]	; (80043e8 <HAL_TIM_Encoder_MspInit+0x160>)
 8004390:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800439c:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <HAL_TIM_Encoder_MspInit+0x160>)
 800439e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043a2:	4a11      	ldr	r2, [pc, #68]	; (80043e8 <HAL_TIM_Encoder_MspInit+0x160>)
 80043a4:	f043 0320 	orr.w	r3, r3, #32
 80043a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043ac:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <HAL_TIM_Encoder_MspInit+0x160>)
 80043ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80043ba:	2303      	movs	r3, #3
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043be:	2302      	movs	r3, #2
 80043c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c6:	2300      	movs	r3, #0
 80043c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 80043ca:	230d      	movs	r3, #13
 80043cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80043ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043d2:	4619      	mov	r1, r3
 80043d4:	4809      	ldr	r0, [pc, #36]	; (80043fc <HAL_TIM_Encoder_MspInit+0x174>)
 80043d6:	f003 fb07 	bl	80079e8 <HAL_GPIO_Init>
}
 80043da:	bf00      	nop
 80043dc:	3738      	adds	r7, #56	; 0x38
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40010000 	.word	0x40010000
 80043e8:	58024400 	.word	0x58024400
 80043ec:	58021000 	.word	0x58021000
 80043f0:	40000800 	.word	0x40000800
 80043f4:	58020c00 	.word	0x58020c00
 80043f8:	4000e000 	.word	0x4000e000
 80043fc:	58021400 	.word	0x58021400

08004400 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004410:	d10f      	bne.n	8004432 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004412:	4b15      	ldr	r3, [pc, #84]	; (8004468 <HAL_TIM_PWM_MspInit+0x68>)
 8004414:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004418:	4a13      	ldr	r2, [pc, #76]	; (8004468 <HAL_TIM_PWM_MspInit+0x68>)
 800441a:	f043 0301 	orr.w	r3, r3, #1
 800441e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004422:	4b11      	ldr	r3, [pc, #68]	; (8004468 <HAL_TIM_PWM_MspInit+0x68>)
 8004424:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004430:	e013      	b.n	800445a <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM8)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a0d      	ldr	r2, [pc, #52]	; (800446c <HAL_TIM_PWM_MspInit+0x6c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d10e      	bne.n	800445a <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800443c:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <HAL_TIM_PWM_MspInit+0x68>)
 800443e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004442:	4a09      	ldr	r2, [pc, #36]	; (8004468 <HAL_TIM_PWM_MspInit+0x68>)
 8004444:	f043 0302 	orr.w	r3, r3, #2
 8004448:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800444c:	4b06      	ldr	r3, [pc, #24]	; (8004468 <HAL_TIM_PWM_MspInit+0x68>)
 800444e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	60bb      	str	r3, [r7, #8]
 8004458:	68bb      	ldr	r3, [r7, #8]
}
 800445a:	bf00      	nop
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	58024400 	.word	0x58024400
 800446c:	40010400 	.word	0x40010400

08004470 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a1d      	ldr	r2, [pc, #116]	; (80044f4 <HAL_TIM_Base_MspInit+0x84>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d117      	bne.n	80044b2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004482:	4b1d      	ldr	r3, [pc, #116]	; (80044f8 <HAL_TIM_Base_MspInit+0x88>)
 8004484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004488:	4a1b      	ldr	r2, [pc, #108]	; (80044f8 <HAL_TIM_Base_MspInit+0x88>)
 800448a:	f043 0302 	orr.w	r3, r3, #2
 800448e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004492:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <HAL_TIM_Base_MspInit+0x88>)
 8004494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80044a0:	2200      	movs	r2, #0
 80044a2:	2100      	movs	r1, #0
 80044a4:	201d      	movs	r0, #29
 80044a6:	f000 fc30 	bl	8004d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80044aa:	201d      	movs	r0, #29
 80044ac:	f000 fc47 	bl	8004d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80044b0:	e01b      	b.n	80044ea <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a11      	ldr	r2, [pc, #68]	; (80044fc <HAL_TIM_Base_MspInit+0x8c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d116      	bne.n	80044ea <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80044bc:	4b0e      	ldr	r3, [pc, #56]	; (80044f8 <HAL_TIM_Base_MspInit+0x88>)
 80044be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044c2:	4a0d      	ldr	r2, [pc, #52]	; (80044f8 <HAL_TIM_Base_MspInit+0x88>)
 80044c4:	f043 0308 	orr.w	r3, r3, #8
 80044c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80044cc:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <HAL_TIM_Base_MspInit+0x88>)
 80044ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80044da:	2200      	movs	r2, #0
 80044dc:	2100      	movs	r1, #0
 80044de:	2032      	movs	r0, #50	; 0x32
 80044e0:	f000 fc13 	bl	8004d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80044e4:	2032      	movs	r0, #50	; 0x32
 80044e6:	f000 fc2a 	bl	8004d3e <HAL_NVIC_EnableIRQ>
}
 80044ea:	bf00      	nop
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40000400 	.word	0x40000400
 80044f8:	58024400 	.word	0x58024400
 80044fc:	40000c00 	.word	0x40000c00

08004500 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08a      	sub	sp, #40	; 0x28
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004508:	f107 0314 	add.w	r3, r7, #20
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	605a      	str	r2, [r3, #4]
 8004512:	609a      	str	r2, [r3, #8]
 8004514:	60da      	str	r2, [r3, #12]
 8004516:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004520:	d11f      	bne.n	8004562 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004522:	4b24      	ldr	r3, [pc, #144]	; (80045b4 <HAL_TIM_MspPostInit+0xb4>)
 8004524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004528:	4a22      	ldr	r2, [pc, #136]	; (80045b4 <HAL_TIM_MspPostInit+0xb4>)
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004532:	4b20      	ldr	r3, [pc, #128]	; (80045b4 <HAL_TIM_MspPostInit+0xb4>)
 8004534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8004540:	2309      	movs	r3, #9
 8004542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004544:	2302      	movs	r3, #2
 8004546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004548:	2300      	movs	r3, #0
 800454a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800454c:	2300      	movs	r3, #0
 800454e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004550:	2301      	movs	r3, #1
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004554:	f107 0314 	add.w	r3, r7, #20
 8004558:	4619      	mov	r1, r3
 800455a:	4817      	ldr	r0, [pc, #92]	; (80045b8 <HAL_TIM_MspPostInit+0xb8>)
 800455c:	f003 fa44 	bl	80079e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004560:	e024      	b.n	80045ac <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM8)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a15      	ldr	r2, [pc, #84]	; (80045bc <HAL_TIM_MspPostInit+0xbc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d11f      	bne.n	80045ac <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800456c:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <HAL_TIM_MspPostInit+0xb4>)
 800456e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004572:	4a10      	ldr	r2, [pc, #64]	; (80045b4 <HAL_TIM_MspPostInit+0xb4>)
 8004574:	f043 0304 	orr.w	r3, r3, #4
 8004578:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800457c:	4b0d      	ldr	r3, [pc, #52]	; (80045b4 <HAL_TIM_MspPostInit+0xb4>)
 800457e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800458a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800458e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004590:	2302      	movs	r3, #2
 8004592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004594:	2300      	movs	r3, #0
 8004596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004598:	2300      	movs	r3, #0
 800459a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800459c:	2303      	movs	r3, #3
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045a0:	f107 0314 	add.w	r3, r7, #20
 80045a4:	4619      	mov	r1, r3
 80045a6:	4806      	ldr	r0, [pc, #24]	; (80045c0 <HAL_TIM_MspPostInit+0xc0>)
 80045a8:	f003 fa1e 	bl	80079e8 <HAL_GPIO_Init>
}
 80045ac:	bf00      	nop
 80045ae:	3728      	adds	r7, #40	; 0x28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	58024400 	.word	0x58024400
 80045b8:	58020000 	.word	0x58020000
 80045bc:	40010400 	.word	0x40010400
 80045c0:	58020800 	.word	0x58020800

080045c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b0b8      	sub	sp, #224	; 0xe0
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	605a      	str	r2, [r3, #4]
 80045d6:	609a      	str	r2, [r3, #8]
 80045d8:	60da      	str	r2, [r3, #12]
 80045da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045dc:	f107 0310 	add.w	r3, r7, #16
 80045e0:	22b8      	movs	r2, #184	; 0xb8
 80045e2:	2100      	movs	r1, #0
 80045e4:	4618      	mov	r0, r3
 80045e6:	f009 ff07 	bl	800e3f8 <memset>
  if(huart->Instance==USART3)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a5a      	ldr	r2, [pc, #360]	; (8004758 <HAL_UART_MspInit+0x194>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	f040 80ac 	bne.w	800474e <HAL_UART_MspInit+0x18a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80045f6:	f04f 0202 	mov.w	r2, #2
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004602:	2300      	movs	r3, #0
 8004604:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004608:	f107 0310 	add.w	r3, r7, #16
 800460c:	4618      	mov	r0, r3
 800460e:	f004 fb4d 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8004618:	f7fd f952 	bl	80018c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800461c:	4b4f      	ldr	r3, [pc, #316]	; (800475c <HAL_UART_MspInit+0x198>)
 800461e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004622:	4a4e      	ldr	r2, [pc, #312]	; (800475c <HAL_UART_MspInit+0x198>)
 8004624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004628:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800462c:	4b4b      	ldr	r3, [pc, #300]	; (800475c <HAL_UART_MspInit+0x198>)
 800462e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800463a:	4b48      	ldr	r3, [pc, #288]	; (800475c <HAL_UART_MspInit+0x198>)
 800463c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004640:	4a46      	ldr	r2, [pc, #280]	; (800475c <HAL_UART_MspInit+0x198>)
 8004642:	f043 0304 	orr.w	r3, r3, #4
 8004646:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800464a:	4b44      	ldr	r3, [pc, #272]	; (800475c <HAL_UART_MspInit+0x198>)
 800464c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	60bb      	str	r3, [r7, #8]
 8004656:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004658:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800465c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004660:	2302      	movs	r3, #2
 8004662:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004666:	2300      	movs	r3, #0
 8004668:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800466c:	2300      	movs	r3, #0
 800466e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004672:	2307      	movs	r3, #7
 8004674:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004678:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800467c:	4619      	mov	r1, r3
 800467e:	4838      	ldr	r0, [pc, #224]	; (8004760 <HAL_UART_MspInit+0x19c>)
 8004680:	f003 f9b2 	bl	80079e8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8004684:	4b37      	ldr	r3, [pc, #220]	; (8004764 <HAL_UART_MspInit+0x1a0>)
 8004686:	4a38      	ldr	r2, [pc, #224]	; (8004768 <HAL_UART_MspInit+0x1a4>)
 8004688:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800468a:	4b36      	ldr	r3, [pc, #216]	; (8004764 <HAL_UART_MspInit+0x1a0>)
 800468c:	222d      	movs	r2, #45	; 0x2d
 800468e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004690:	4b34      	ldr	r3, [pc, #208]	; (8004764 <HAL_UART_MspInit+0x1a0>)
 8004692:	2200      	movs	r2, #0
 8004694:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004696:	4b33      	ldr	r3, [pc, #204]	; (8004764 <HAL_UART_MspInit+0x1a0>)
 8004698:	2200      	movs	r2, #0
 800469a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800469c:	4b31      	ldr	r3, [pc, #196]	; (8004764 <HAL_UART_MspInit+0x1a0>)
 800469e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046a2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046a4:	4b2f      	ldr	r3, [pc, #188]	; (8004764 <HAL_UART_MspInit+0x1a0>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046aa:	4b2e      	ldr	r3, [pc, #184]	; (8004764 <HAL_UART_MspInit+0x1a0>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80046b0:	4b2c      	ldr	r3, [pc, #176]	; (8004764 <HAL_UART_MspInit+0x1a0>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80046b6:	4b2b      	ldr	r3, [pc, #172]	; (8004764 <HAL_UART_MspInit+0x1a0>)
 80046b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046bc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046be:	4b29      	ldr	r3, [pc, #164]	; (8004764 <HAL_UART_MspInit+0x1a0>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80046c4:	4827      	ldr	r0, [pc, #156]	; (8004764 <HAL_UART_MspInit+0x1a0>)
 80046c6:	f000 fb55 	bl	8004d74 <HAL_DMA_Init>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80046d0:	f7fd f8f6 	bl	80018c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a23      	ldr	r2, [pc, #140]	; (8004764 <HAL_UART_MspInit+0x1a0>)
 80046d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80046dc:	4a21      	ldr	r2, [pc, #132]	; (8004764 <HAL_UART_MspInit+0x1a0>)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80046e2:	4b22      	ldr	r3, [pc, #136]	; (800476c <HAL_UART_MspInit+0x1a8>)
 80046e4:	4a22      	ldr	r2, [pc, #136]	; (8004770 <HAL_UART_MspInit+0x1ac>)
 80046e6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80046e8:	4b20      	ldr	r3, [pc, #128]	; (800476c <HAL_UART_MspInit+0x1a8>)
 80046ea:	222e      	movs	r2, #46	; 0x2e
 80046ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046ee:	4b1f      	ldr	r3, [pc, #124]	; (800476c <HAL_UART_MspInit+0x1a8>)
 80046f0:	2240      	movs	r2, #64	; 0x40
 80046f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046f4:	4b1d      	ldr	r3, [pc, #116]	; (800476c <HAL_UART_MspInit+0x1a8>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046fa:	4b1c      	ldr	r3, [pc, #112]	; (800476c <HAL_UART_MspInit+0x1a8>)
 80046fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004700:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004702:	4b1a      	ldr	r3, [pc, #104]	; (800476c <HAL_UART_MspInit+0x1a8>)
 8004704:	2200      	movs	r2, #0
 8004706:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004708:	4b18      	ldr	r3, [pc, #96]	; (800476c <HAL_UART_MspInit+0x1a8>)
 800470a:	2200      	movs	r2, #0
 800470c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800470e:	4b17      	ldr	r3, [pc, #92]	; (800476c <HAL_UART_MspInit+0x1a8>)
 8004710:	2200      	movs	r2, #0
 8004712:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004714:	4b15      	ldr	r3, [pc, #84]	; (800476c <HAL_UART_MspInit+0x1a8>)
 8004716:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800471a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800471c:	4b13      	ldr	r3, [pc, #76]	; (800476c <HAL_UART_MspInit+0x1a8>)
 800471e:	2200      	movs	r2, #0
 8004720:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004722:	4812      	ldr	r0, [pc, #72]	; (800476c <HAL_UART_MspInit+0x1a8>)
 8004724:	f000 fb26 	bl	8004d74 <HAL_DMA_Init>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 800472e:	f7fd f8c7 	bl	80018c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a0d      	ldr	r2, [pc, #52]	; (800476c <HAL_UART_MspInit+0x1a8>)
 8004736:	67da      	str	r2, [r3, #124]	; 0x7c
 8004738:	4a0c      	ldr	r2, [pc, #48]	; (800476c <HAL_UART_MspInit+0x1a8>)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800473e:	2200      	movs	r2, #0
 8004740:	2100      	movs	r1, #0
 8004742:	2027      	movs	r0, #39	; 0x27
 8004744:	f000 fae1 	bl	8004d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004748:	2027      	movs	r0, #39	; 0x27
 800474a:	f000 faf8 	bl	8004d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800474e:	bf00      	nop
 8004750:	37e0      	adds	r7, #224	; 0xe0
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40004800 	.word	0x40004800
 800475c:	58024400 	.word	0x58024400
 8004760:	58020800 	.word	0x58020800
 8004764:	24000364 	.word	0x24000364
 8004768:	40020010 	.word	0x40020010
 800476c:	240003dc 	.word	0x240003dc
 8004770:	40020028 	.word	0x40020028

08004774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004778:	e7fe      	b.n	8004778 <NMI_Handler+0x4>

0800477a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800477a:	b480      	push	{r7}
 800477c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800477e:	e7fe      	b.n	800477e <HardFault_Handler+0x4>

08004780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004784:	e7fe      	b.n	8004784 <MemManage_Handler+0x4>

08004786 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004786:	b480      	push	{r7}
 8004788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800478a:	e7fe      	b.n	800478a <BusFault_Handler+0x4>

0800478c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004790:	e7fe      	b.n	8004790 <UsageFault_Handler+0x4>

08004792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004792:	b480      	push	{r7}
 8004794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004796:	bf00      	nop
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047a4:	bf00      	nop
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047ae:	b480      	push	{r7}
 80047b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047b2:	bf00      	nop
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047c0:	f000 f9a8 	bl	8004b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047c4:	bf00      	nop
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80047cc:	bf00      	nop
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80047dc:	4802      	ldr	r0, [pc, #8]	; (80047e8 <DMA1_Stream0_IRQHandler+0x10>)
 80047de:	f001 fdf1 	bl	80063c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80047e2:	bf00      	nop
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	24000364 	.word	0x24000364

080047ec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80047f0:	4802      	ldr	r0, [pc, #8]	; (80047fc <DMA1_Stream1_IRQHandler+0x10>)
 80047f2:	f001 fde7 	bl	80063c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80047f6:	bf00      	nop
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	240003dc 	.word	0x240003dc

08004800 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004804:	4802      	ldr	r0, [pc, #8]	; (8004810 <TIM3_IRQHandler+0x10>)
 8004806:	f006 fb99 	bl	800af3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800480a:	bf00      	nop
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	24000154 	.word	0x24000154

08004814 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004818:	4802      	ldr	r0, [pc, #8]	; (8004824 <USART3_IRQHandler+0x10>)
 800481a:	f007 fd99 	bl	800c350 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800481e:	bf00      	nop
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	240002d0 	.word	0x240002d0

08004828 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800482c:	4802      	ldr	r0, [pc, #8]	; (8004838 <TIM5_IRQHandler+0x10>)
 800482e:	f006 fb85 	bl	800af3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004832:	bf00      	nop
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	240001ec 	.word	0x240001ec

0800483c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return 1;
 8004840:	2301      	movs	r3, #1
}
 8004842:	4618      	mov	r0, r3
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <_kill>:

int _kill(int pid, int sig)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004856:	f009 fd97 	bl	800e388 <__errno>
 800485a:	4603      	mov	r3, r0
 800485c:	2216      	movs	r2, #22
 800485e:	601a      	str	r2, [r3, #0]
  return -1;
 8004860:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <_exit>:

void _exit (int status)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004874:	f04f 31ff 	mov.w	r1, #4294967295
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7ff ffe7 	bl	800484c <_kill>
  while (1) {}    /* Make sure we hang here */
 800487e:	e7fe      	b.n	800487e <_exit+0x12>

08004880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004888:	4a14      	ldr	r2, [pc, #80]	; (80048dc <_sbrk+0x5c>)
 800488a:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <_sbrk+0x60>)
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004894:	4b13      	ldr	r3, [pc, #76]	; (80048e4 <_sbrk+0x64>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d102      	bne.n	80048a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800489c:	4b11      	ldr	r3, [pc, #68]	; (80048e4 <_sbrk+0x64>)
 800489e:	4a12      	ldr	r2, [pc, #72]	; (80048e8 <_sbrk+0x68>)
 80048a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048a2:	4b10      	ldr	r3, [pc, #64]	; (80048e4 <_sbrk+0x64>)
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4413      	add	r3, r2
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d207      	bcs.n	80048c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048b0:	f009 fd6a 	bl	800e388 <__errno>
 80048b4:	4603      	mov	r3, r0
 80048b6:	220c      	movs	r2, #12
 80048b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048ba:	f04f 33ff 	mov.w	r3, #4294967295
 80048be:	e009      	b.n	80048d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048c0:	4b08      	ldr	r3, [pc, #32]	; (80048e4 <_sbrk+0x64>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048c6:	4b07      	ldr	r3, [pc, #28]	; (80048e4 <_sbrk+0x64>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4413      	add	r3, r2
 80048ce:	4a05      	ldr	r2, [pc, #20]	; (80048e4 <_sbrk+0x64>)
 80048d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048d2:	68fb      	ldr	r3, [r7, #12]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	24050000 	.word	0x24050000
 80048e0:	00000400 	.word	0x00000400
 80048e4:	24000f10 	.word	0x24000f10
 80048e8:	24000f28 	.word	0x24000f28

080048ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80048f0:	4b32      	ldr	r3, [pc, #200]	; (80049bc <SystemInit+0xd0>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f6:	4a31      	ldr	r2, [pc, #196]	; (80049bc <SystemInit+0xd0>)
 80048f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004900:	4b2f      	ldr	r3, [pc, #188]	; (80049c0 <SystemInit+0xd4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	2b06      	cmp	r3, #6
 800490a:	d807      	bhi.n	800491c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800490c:	4b2c      	ldr	r3, [pc, #176]	; (80049c0 <SystemInit+0xd4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f023 030f 	bic.w	r3, r3, #15
 8004914:	4a2a      	ldr	r2, [pc, #168]	; (80049c0 <SystemInit+0xd4>)
 8004916:	f043 0307 	orr.w	r3, r3, #7
 800491a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800491c:	4b29      	ldr	r3, [pc, #164]	; (80049c4 <SystemInit+0xd8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a28      	ldr	r2, [pc, #160]	; (80049c4 <SystemInit+0xd8>)
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004928:	4b26      	ldr	r3, [pc, #152]	; (80049c4 <SystemInit+0xd8>)
 800492a:	2200      	movs	r2, #0
 800492c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800492e:	4b25      	ldr	r3, [pc, #148]	; (80049c4 <SystemInit+0xd8>)
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	4924      	ldr	r1, [pc, #144]	; (80049c4 <SystemInit+0xd8>)
 8004934:	4b24      	ldr	r3, [pc, #144]	; (80049c8 <SystemInit+0xdc>)
 8004936:	4013      	ands	r3, r2
 8004938:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800493a:	4b21      	ldr	r3, [pc, #132]	; (80049c0 <SystemInit+0xd4>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	2b00      	cmp	r3, #0
 8004944:	d007      	beq.n	8004956 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004946:	4b1e      	ldr	r3, [pc, #120]	; (80049c0 <SystemInit+0xd4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f023 030f 	bic.w	r3, r3, #15
 800494e:	4a1c      	ldr	r2, [pc, #112]	; (80049c0 <SystemInit+0xd4>)
 8004950:	f043 0307 	orr.w	r3, r3, #7
 8004954:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004956:	4b1b      	ldr	r3, [pc, #108]	; (80049c4 <SystemInit+0xd8>)
 8004958:	2200      	movs	r2, #0
 800495a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800495c:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <SystemInit+0xd8>)
 800495e:	2200      	movs	r2, #0
 8004960:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004962:	4b18      	ldr	r3, [pc, #96]	; (80049c4 <SystemInit+0xd8>)
 8004964:	2200      	movs	r2, #0
 8004966:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004968:	4b16      	ldr	r3, [pc, #88]	; (80049c4 <SystemInit+0xd8>)
 800496a:	4a18      	ldr	r2, [pc, #96]	; (80049cc <SystemInit+0xe0>)
 800496c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800496e:	4b15      	ldr	r3, [pc, #84]	; (80049c4 <SystemInit+0xd8>)
 8004970:	4a17      	ldr	r2, [pc, #92]	; (80049d0 <SystemInit+0xe4>)
 8004972:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004974:	4b13      	ldr	r3, [pc, #76]	; (80049c4 <SystemInit+0xd8>)
 8004976:	4a17      	ldr	r2, [pc, #92]	; (80049d4 <SystemInit+0xe8>)
 8004978:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800497a:	4b12      	ldr	r3, [pc, #72]	; (80049c4 <SystemInit+0xd8>)
 800497c:	2200      	movs	r2, #0
 800497e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004980:	4b10      	ldr	r3, [pc, #64]	; (80049c4 <SystemInit+0xd8>)
 8004982:	4a14      	ldr	r2, [pc, #80]	; (80049d4 <SystemInit+0xe8>)
 8004984:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004986:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <SystemInit+0xd8>)
 8004988:	2200      	movs	r2, #0
 800498a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800498c:	4b0d      	ldr	r3, [pc, #52]	; (80049c4 <SystemInit+0xd8>)
 800498e:	4a11      	ldr	r2, [pc, #68]	; (80049d4 <SystemInit+0xe8>)
 8004990:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004992:	4b0c      	ldr	r3, [pc, #48]	; (80049c4 <SystemInit+0xd8>)
 8004994:	2200      	movs	r2, #0
 8004996:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004998:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <SystemInit+0xd8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a09      	ldr	r2, [pc, #36]	; (80049c4 <SystemInit+0xd8>)
 800499e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80049a4:	4b07      	ldr	r3, [pc, #28]	; (80049c4 <SystemInit+0xd8>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80049aa:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <SystemInit+0xec>)
 80049ac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80049b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80049b2:	bf00      	nop
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	e000ed00 	.word	0xe000ed00
 80049c0:	52002000 	.word	0x52002000
 80049c4:	58024400 	.word	0x58024400
 80049c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80049cc:	02020200 	.word	0x02020200
 80049d0:	01ff0000 	.word	0x01ff0000
 80049d4:	01010280 	.word	0x01010280
 80049d8:	52004000 	.word	0x52004000

080049dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80049dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80049e0:	f7ff ff84 	bl	80048ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049e4:	480c      	ldr	r0, [pc, #48]	; (8004a18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80049e6:	490d      	ldr	r1, [pc, #52]	; (8004a1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80049e8:	4a0d      	ldr	r2, [pc, #52]	; (8004a20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80049ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049ec:	e002      	b.n	80049f4 <LoopCopyDataInit>

080049ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049f2:	3304      	adds	r3, #4

080049f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049f8:	d3f9      	bcc.n	80049ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049fa:	4a0a      	ldr	r2, [pc, #40]	; (8004a24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80049fc:	4c0a      	ldr	r4, [pc, #40]	; (8004a28 <LoopFillZerobss+0x22>)
  movs r3, #0
 80049fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a00:	e001      	b.n	8004a06 <LoopFillZerobss>

08004a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a04:	3204      	adds	r2, #4

08004a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a08:	d3fb      	bcc.n	8004a02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a0a:	f009 fcc3 	bl	800e394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a0e:	f7fb fe35 	bl	800067c <main>
  bx  lr
 8004a12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004a14:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004a18:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004a1c:	240000a0 	.word	0x240000a0
  ldr r2, =_sidata
 8004a20:	0800ea38 	.word	0x0800ea38
  ldr r2, =_sbss
 8004a24:	240000a0 	.word	0x240000a0
  ldr r4, =_ebss
 8004a28:	24000f28 	.word	0x24000f28

08004a2c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a2c:	e7fe      	b.n	8004a2c <ADC3_IRQHandler>
	...

08004a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a36:	2003      	movs	r0, #3
 8004a38:	f000 f95c 	bl	8004cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a3c:	f003 ff60 	bl	8008900 <HAL_RCC_GetSysClockFreq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4b15      	ldr	r3, [pc, #84]	; (8004a98 <HAL_Init+0x68>)
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	0a1b      	lsrs	r3, r3, #8
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	4913      	ldr	r1, [pc, #76]	; (8004a9c <HAL_Init+0x6c>)
 8004a4e:	5ccb      	ldrb	r3, [r1, r3]
 8004a50:	f003 031f 	and.w	r3, r3, #31
 8004a54:	fa22 f303 	lsr.w	r3, r2, r3
 8004a58:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a5a:	4b0f      	ldr	r3, [pc, #60]	; (8004a98 <HAL_Init+0x68>)
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	4a0e      	ldr	r2, [pc, #56]	; (8004a9c <HAL_Init+0x6c>)
 8004a64:	5cd3      	ldrb	r3, [r2, r3]
 8004a66:	f003 031f 	and.w	r3, r3, #31
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a70:	4a0b      	ldr	r2, [pc, #44]	; (8004aa0 <HAL_Init+0x70>)
 8004a72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a74:	4a0b      	ldr	r2, [pc, #44]	; (8004aa4 <HAL_Init+0x74>)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a7a:	200f      	movs	r0, #15
 8004a7c:	f000 f814 	bl	8004aa8 <HAL_InitTick>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e002      	b.n	8004a90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004a8a:	f7ff fbdd 	bl	8004248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	58024400 	.word	0x58024400
 8004a9c:	0800e9e4 	.word	0x0800e9e4
 8004aa0:	2400002c 	.word	0x2400002c
 8004aa4:	24000028 	.word	0x24000028

08004aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004ab0:	4b15      	ldr	r3, [pc, #84]	; (8004b08 <HAL_InitTick+0x60>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e021      	b.n	8004b00 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004abc:	4b13      	ldr	r3, [pc, #76]	; (8004b0c <HAL_InitTick+0x64>)
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	4b11      	ldr	r3, [pc, #68]	; (8004b08 <HAL_InitTick+0x60>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 f941 	bl	8004d5a <HAL_SYSTICK_Config>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e00e      	b.n	8004b00 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b0f      	cmp	r3, #15
 8004ae6:	d80a      	bhi.n	8004afe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ae8:	2200      	movs	r2, #0
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	f04f 30ff 	mov.w	r0, #4294967295
 8004af0:	f000 f90b 	bl	8004d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004af4:	4a06      	ldr	r2, [pc, #24]	; (8004b10 <HAL_InitTick+0x68>)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	e000      	b.n	8004b00 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	24000034 	.word	0x24000034
 8004b0c:	24000028 	.word	0x24000028
 8004b10:	24000030 	.word	0x24000030

08004b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004b18:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <HAL_IncTick+0x20>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <HAL_IncTick+0x24>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4413      	add	r3, r2
 8004b24:	4a04      	ldr	r2, [pc, #16]	; (8004b38 <HAL_IncTick+0x24>)
 8004b26:	6013      	str	r3, [r2, #0]
}
 8004b28:	bf00      	nop
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	24000034 	.word	0x24000034
 8004b38:	24000f14 	.word	0x24000f14

08004b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8004b40:	4b03      	ldr	r3, [pc, #12]	; (8004b50 <HAL_GetTick+0x14>)
 8004b42:	681b      	ldr	r3, [r3, #0]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	24000f14 	.word	0x24000f14

08004b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b64:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <__NVIC_SetPriorityGrouping+0x40>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b70:	4013      	ands	r3, r2
 8004b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <__NVIC_SetPriorityGrouping+0x44>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b82:	4a04      	ldr	r2, [pc, #16]	; (8004b94 <__NVIC_SetPriorityGrouping+0x40>)
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	60d3      	str	r3, [r2, #12]
}
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	e000ed00 	.word	0xe000ed00
 8004b98:	05fa0000 	.word	0x05fa0000

08004b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ba0:	4b04      	ldr	r3, [pc, #16]	; (8004bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	0a1b      	lsrs	r3, r3, #8
 8004ba6:	f003 0307 	and.w	r3, r3, #7
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	e000ed00 	.word	0xe000ed00

08004bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	db0b      	blt.n	8004be2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	f003 021f 	and.w	r2, r3, #31
 8004bd0:	4907      	ldr	r1, [pc, #28]	; (8004bf0 <__NVIC_EnableIRQ+0x38>)
 8004bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2001      	movs	r0, #1
 8004bda:	fa00 f202 	lsl.w	r2, r0, r2
 8004bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	e000e100 	.word	0xe000e100

08004bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	6039      	str	r1, [r7, #0]
 8004bfe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	db0a      	blt.n	8004c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	490c      	ldr	r1, [pc, #48]	; (8004c40 <__NVIC_SetPriority+0x4c>)
 8004c0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c12:	0112      	lsls	r2, r2, #4
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	440b      	add	r3, r1
 8004c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c1c:	e00a      	b.n	8004c34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	4908      	ldr	r1, [pc, #32]	; (8004c44 <__NVIC_SetPriority+0x50>)
 8004c24:	88fb      	ldrh	r3, [r7, #6]
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	3b04      	subs	r3, #4
 8004c2c:	0112      	lsls	r2, r2, #4
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	440b      	add	r3, r1
 8004c32:	761a      	strb	r2, [r3, #24]
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	e000e100 	.word	0xe000e100
 8004c44:	e000ed00 	.word	0xe000ed00

08004c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b089      	sub	sp, #36	; 0x24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	f1c3 0307 	rsb	r3, r3, #7
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	bf28      	it	cs
 8004c66:	2304      	movcs	r3, #4
 8004c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	2b06      	cmp	r3, #6
 8004c70:	d902      	bls.n	8004c78 <NVIC_EncodePriority+0x30>
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	3b03      	subs	r3, #3
 8004c76:	e000      	b.n	8004c7a <NVIC_EncodePriority+0x32>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	43da      	mvns	r2, r3
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	401a      	ands	r2, r3
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c90:	f04f 31ff 	mov.w	r1, #4294967295
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9a:	43d9      	mvns	r1, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca0:	4313      	orrs	r3, r2
         );
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3724      	adds	r7, #36	; 0x24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
	...

08004cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cc0:	d301      	bcc.n	8004cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e00f      	b.n	8004ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cc6:	4a0a      	ldr	r2, [pc, #40]	; (8004cf0 <SysTick_Config+0x40>)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cce:	210f      	movs	r1, #15
 8004cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd4:	f7ff ff8e 	bl	8004bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cd8:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <SysTick_Config+0x40>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cde:	4b04      	ldr	r3, [pc, #16]	; (8004cf0 <SysTick_Config+0x40>)
 8004ce0:	2207      	movs	r2, #7
 8004ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	e000e010 	.word	0xe000e010

08004cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff ff29 	bl	8004b54 <__NVIC_SetPriorityGrouping>
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b086      	sub	sp, #24
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	4603      	mov	r3, r0
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	607a      	str	r2, [r7, #4]
 8004d16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d18:	f7ff ff40 	bl	8004b9c <__NVIC_GetPriorityGrouping>
 8004d1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	68b9      	ldr	r1, [r7, #8]
 8004d22:	6978      	ldr	r0, [r7, #20]
 8004d24:	f7ff ff90 	bl	8004c48 <NVIC_EncodePriority>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d2e:	4611      	mov	r1, r2
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff ff5f 	bl	8004bf4 <__NVIC_SetPriority>
}
 8004d36:	bf00      	nop
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	4603      	mov	r3, r0
 8004d46:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff ff33 	bl	8004bb8 <__NVIC_EnableIRQ>
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7ff ffa4 	bl	8004cb0 <SysTick_Config>
 8004d68:	4603      	mov	r3, r0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004d7c:	f7ff fede 	bl	8004b3c <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e314      	b.n	80053b6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a66      	ldr	r2, [pc, #408]	; (8004f2c <HAL_DMA_Init+0x1b8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d04a      	beq.n	8004e2c <HAL_DMA_Init+0xb8>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a65      	ldr	r2, [pc, #404]	; (8004f30 <HAL_DMA_Init+0x1bc>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d045      	beq.n	8004e2c <HAL_DMA_Init+0xb8>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a63      	ldr	r2, [pc, #396]	; (8004f34 <HAL_DMA_Init+0x1c0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d040      	beq.n	8004e2c <HAL_DMA_Init+0xb8>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a62      	ldr	r2, [pc, #392]	; (8004f38 <HAL_DMA_Init+0x1c4>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d03b      	beq.n	8004e2c <HAL_DMA_Init+0xb8>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a60      	ldr	r2, [pc, #384]	; (8004f3c <HAL_DMA_Init+0x1c8>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d036      	beq.n	8004e2c <HAL_DMA_Init+0xb8>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a5f      	ldr	r2, [pc, #380]	; (8004f40 <HAL_DMA_Init+0x1cc>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d031      	beq.n	8004e2c <HAL_DMA_Init+0xb8>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a5d      	ldr	r2, [pc, #372]	; (8004f44 <HAL_DMA_Init+0x1d0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d02c      	beq.n	8004e2c <HAL_DMA_Init+0xb8>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a5c      	ldr	r2, [pc, #368]	; (8004f48 <HAL_DMA_Init+0x1d4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d027      	beq.n	8004e2c <HAL_DMA_Init+0xb8>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a5a      	ldr	r2, [pc, #360]	; (8004f4c <HAL_DMA_Init+0x1d8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d022      	beq.n	8004e2c <HAL_DMA_Init+0xb8>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a59      	ldr	r2, [pc, #356]	; (8004f50 <HAL_DMA_Init+0x1dc>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d01d      	beq.n	8004e2c <HAL_DMA_Init+0xb8>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a57      	ldr	r2, [pc, #348]	; (8004f54 <HAL_DMA_Init+0x1e0>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d018      	beq.n	8004e2c <HAL_DMA_Init+0xb8>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a56      	ldr	r2, [pc, #344]	; (8004f58 <HAL_DMA_Init+0x1e4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d013      	beq.n	8004e2c <HAL_DMA_Init+0xb8>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a54      	ldr	r2, [pc, #336]	; (8004f5c <HAL_DMA_Init+0x1e8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00e      	beq.n	8004e2c <HAL_DMA_Init+0xb8>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a53      	ldr	r2, [pc, #332]	; (8004f60 <HAL_DMA_Init+0x1ec>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d009      	beq.n	8004e2c <HAL_DMA_Init+0xb8>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a51      	ldr	r2, [pc, #324]	; (8004f64 <HAL_DMA_Init+0x1f0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d004      	beq.n	8004e2c <HAL_DMA_Init+0xb8>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a50      	ldr	r2, [pc, #320]	; (8004f68 <HAL_DMA_Init+0x1f4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d101      	bne.n	8004e30 <HAL_DMA_Init+0xbc>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e000      	b.n	8004e32 <HAL_DMA_Init+0xbe>
 8004e30:	2300      	movs	r3, #0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 813c 	beq.w	80050b0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a37      	ldr	r2, [pc, #220]	; (8004f2c <HAL_DMA_Init+0x1b8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d04a      	beq.n	8004ee8 <HAL_DMA_Init+0x174>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a36      	ldr	r2, [pc, #216]	; (8004f30 <HAL_DMA_Init+0x1bc>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d045      	beq.n	8004ee8 <HAL_DMA_Init+0x174>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a34      	ldr	r2, [pc, #208]	; (8004f34 <HAL_DMA_Init+0x1c0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d040      	beq.n	8004ee8 <HAL_DMA_Init+0x174>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a33      	ldr	r2, [pc, #204]	; (8004f38 <HAL_DMA_Init+0x1c4>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d03b      	beq.n	8004ee8 <HAL_DMA_Init+0x174>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a31      	ldr	r2, [pc, #196]	; (8004f3c <HAL_DMA_Init+0x1c8>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d036      	beq.n	8004ee8 <HAL_DMA_Init+0x174>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a30      	ldr	r2, [pc, #192]	; (8004f40 <HAL_DMA_Init+0x1cc>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d031      	beq.n	8004ee8 <HAL_DMA_Init+0x174>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a2e      	ldr	r2, [pc, #184]	; (8004f44 <HAL_DMA_Init+0x1d0>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d02c      	beq.n	8004ee8 <HAL_DMA_Init+0x174>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a2d      	ldr	r2, [pc, #180]	; (8004f48 <HAL_DMA_Init+0x1d4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d027      	beq.n	8004ee8 <HAL_DMA_Init+0x174>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a2b      	ldr	r2, [pc, #172]	; (8004f4c <HAL_DMA_Init+0x1d8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d022      	beq.n	8004ee8 <HAL_DMA_Init+0x174>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a2a      	ldr	r2, [pc, #168]	; (8004f50 <HAL_DMA_Init+0x1dc>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d01d      	beq.n	8004ee8 <HAL_DMA_Init+0x174>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a28      	ldr	r2, [pc, #160]	; (8004f54 <HAL_DMA_Init+0x1e0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d018      	beq.n	8004ee8 <HAL_DMA_Init+0x174>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a27      	ldr	r2, [pc, #156]	; (8004f58 <HAL_DMA_Init+0x1e4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d013      	beq.n	8004ee8 <HAL_DMA_Init+0x174>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a25      	ldr	r2, [pc, #148]	; (8004f5c <HAL_DMA_Init+0x1e8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00e      	beq.n	8004ee8 <HAL_DMA_Init+0x174>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a24      	ldr	r2, [pc, #144]	; (8004f60 <HAL_DMA_Init+0x1ec>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d009      	beq.n	8004ee8 <HAL_DMA_Init+0x174>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a22      	ldr	r2, [pc, #136]	; (8004f64 <HAL_DMA_Init+0x1f0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <HAL_DMA_Init+0x174>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a21      	ldr	r2, [pc, #132]	; (8004f68 <HAL_DMA_Init+0x1f4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d108      	bne.n	8004efa <HAL_DMA_Init+0x186>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0201 	bic.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	e007      	b.n	8004f0a <HAL_DMA_Init+0x196>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0201 	bic.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f0a:	e02f      	b.n	8004f6c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f0c:	f7ff fe16 	bl	8004b3c <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b05      	cmp	r3, #5
 8004f18:	d928      	bls.n	8004f6c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2203      	movs	r2, #3
 8004f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e244      	b.n	80053b6 <HAL_DMA_Init+0x642>
 8004f2c:	40020010 	.word	0x40020010
 8004f30:	40020028 	.word	0x40020028
 8004f34:	40020040 	.word	0x40020040
 8004f38:	40020058 	.word	0x40020058
 8004f3c:	40020070 	.word	0x40020070
 8004f40:	40020088 	.word	0x40020088
 8004f44:	400200a0 	.word	0x400200a0
 8004f48:	400200b8 	.word	0x400200b8
 8004f4c:	40020410 	.word	0x40020410
 8004f50:	40020428 	.word	0x40020428
 8004f54:	40020440 	.word	0x40020440
 8004f58:	40020458 	.word	0x40020458
 8004f5c:	40020470 	.word	0x40020470
 8004f60:	40020488 	.word	0x40020488
 8004f64:	400204a0 	.word	0x400204a0
 8004f68:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1c8      	bne.n	8004f0c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4b84      	ldr	r3, [pc, #528]	; (8005198 <HAL_DMA_Init+0x424>)
 8004f86:	4013      	ands	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004f92:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004faa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d107      	bne.n	8004fd0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b28      	cmp	r3, #40	; 0x28
 8004fd6:	d903      	bls.n	8004fe0 <HAL_DMA_Init+0x26c>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b2e      	cmp	r3, #46	; 0x2e
 8004fde:	d91f      	bls.n	8005020 <HAL_DMA_Init+0x2ac>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2b3e      	cmp	r3, #62	; 0x3e
 8004fe6:	d903      	bls.n	8004ff0 <HAL_DMA_Init+0x27c>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2b42      	cmp	r3, #66	; 0x42
 8004fee:	d917      	bls.n	8005020 <HAL_DMA_Init+0x2ac>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b46      	cmp	r3, #70	; 0x46
 8004ff6:	d903      	bls.n	8005000 <HAL_DMA_Init+0x28c>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2b48      	cmp	r3, #72	; 0x48
 8004ffe:	d90f      	bls.n	8005020 <HAL_DMA_Init+0x2ac>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b4e      	cmp	r3, #78	; 0x4e
 8005006:	d903      	bls.n	8005010 <HAL_DMA_Init+0x29c>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b52      	cmp	r3, #82	; 0x52
 800500e:	d907      	bls.n	8005020 <HAL_DMA_Init+0x2ac>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	2b73      	cmp	r3, #115	; 0x73
 8005016:	d905      	bls.n	8005024 <HAL_DMA_Init+0x2b0>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b77      	cmp	r3, #119	; 0x77
 800501e:	d801      	bhi.n	8005024 <HAL_DMA_Init+0x2b0>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <HAL_DMA_Init+0x2b2>
 8005024:	2300      	movs	r3, #0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005030:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f023 0307 	bic.w	r3, r3, #7
 8005048:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	2b04      	cmp	r3, #4
 800505a:	d117      	bne.n	800508c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00e      	beq.n	800508c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f002 fb30 	bl	80076d4 <DMA_CheckFifoParam>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d008      	beq.n	800508c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2240      	movs	r2, #64	; 0x40
 800507e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e194      	b.n	80053b6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f002 fa6b 	bl	8007570 <DMA_CalcBaseAndBitshift>
 800509a:	4603      	mov	r3, r0
 800509c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a2:	f003 031f 	and.w	r3, r3, #31
 80050a6:	223f      	movs	r2, #63	; 0x3f
 80050a8:	409a      	lsls	r2, r3
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	609a      	str	r2, [r3, #8]
 80050ae:	e0ca      	b.n	8005246 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a39      	ldr	r2, [pc, #228]	; (800519c <HAL_DMA_Init+0x428>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d022      	beq.n	8005100 <HAL_DMA_Init+0x38c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a38      	ldr	r2, [pc, #224]	; (80051a0 <HAL_DMA_Init+0x42c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d01d      	beq.n	8005100 <HAL_DMA_Init+0x38c>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a36      	ldr	r2, [pc, #216]	; (80051a4 <HAL_DMA_Init+0x430>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d018      	beq.n	8005100 <HAL_DMA_Init+0x38c>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a35      	ldr	r2, [pc, #212]	; (80051a8 <HAL_DMA_Init+0x434>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d013      	beq.n	8005100 <HAL_DMA_Init+0x38c>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a33      	ldr	r2, [pc, #204]	; (80051ac <HAL_DMA_Init+0x438>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00e      	beq.n	8005100 <HAL_DMA_Init+0x38c>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a32      	ldr	r2, [pc, #200]	; (80051b0 <HAL_DMA_Init+0x43c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d009      	beq.n	8005100 <HAL_DMA_Init+0x38c>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a30      	ldr	r2, [pc, #192]	; (80051b4 <HAL_DMA_Init+0x440>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d004      	beq.n	8005100 <HAL_DMA_Init+0x38c>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a2f      	ldr	r2, [pc, #188]	; (80051b8 <HAL_DMA_Init+0x444>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d101      	bne.n	8005104 <HAL_DMA_Init+0x390>
 8005100:	2301      	movs	r3, #1
 8005102:	e000      	b.n	8005106 <HAL_DMA_Init+0x392>
 8005104:	2300      	movs	r3, #0
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 8094 	beq.w	8005234 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a22      	ldr	r2, [pc, #136]	; (800519c <HAL_DMA_Init+0x428>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d021      	beq.n	800515a <HAL_DMA_Init+0x3e6>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a21      	ldr	r2, [pc, #132]	; (80051a0 <HAL_DMA_Init+0x42c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d01c      	beq.n	800515a <HAL_DMA_Init+0x3e6>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a1f      	ldr	r2, [pc, #124]	; (80051a4 <HAL_DMA_Init+0x430>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d017      	beq.n	800515a <HAL_DMA_Init+0x3e6>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a1e      	ldr	r2, [pc, #120]	; (80051a8 <HAL_DMA_Init+0x434>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d012      	beq.n	800515a <HAL_DMA_Init+0x3e6>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1c      	ldr	r2, [pc, #112]	; (80051ac <HAL_DMA_Init+0x438>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00d      	beq.n	800515a <HAL_DMA_Init+0x3e6>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1b      	ldr	r2, [pc, #108]	; (80051b0 <HAL_DMA_Init+0x43c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d008      	beq.n	800515a <HAL_DMA_Init+0x3e6>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a19      	ldr	r2, [pc, #100]	; (80051b4 <HAL_DMA_Init+0x440>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d003      	beq.n	800515a <HAL_DMA_Init+0x3e6>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a18      	ldr	r2, [pc, #96]	; (80051b8 <HAL_DMA_Init+0x444>)
 8005158:	4293      	cmp	r3, r2
 800515a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4b11      	ldr	r3, [pc, #68]	; (80051bc <HAL_DMA_Init+0x448>)
 8005178:	4013      	ands	r3, r2
 800517a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2b40      	cmp	r3, #64	; 0x40
 8005182:	d01d      	beq.n	80051c0 <HAL_DMA_Init+0x44c>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	2b80      	cmp	r3, #128	; 0x80
 800518a:	d102      	bne.n	8005192 <HAL_DMA_Init+0x41e>
 800518c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005190:	e017      	b.n	80051c2 <HAL_DMA_Init+0x44e>
 8005192:	2300      	movs	r3, #0
 8005194:	e015      	b.n	80051c2 <HAL_DMA_Init+0x44e>
 8005196:	bf00      	nop
 8005198:	fe10803f 	.word	0xfe10803f
 800519c:	58025408 	.word	0x58025408
 80051a0:	5802541c 	.word	0x5802541c
 80051a4:	58025430 	.word	0x58025430
 80051a8:	58025444 	.word	0x58025444
 80051ac:	58025458 	.word	0x58025458
 80051b0:	5802546c 	.word	0x5802546c
 80051b4:	58025480 	.word	0x58025480
 80051b8:	58025494 	.word	0x58025494
 80051bc:	fffe000f 	.word	0xfffe000f
 80051c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	68d2      	ldr	r2, [r2, #12]
 80051c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80051d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	4b6e      	ldr	r3, [pc, #440]	; (80053c0 <HAL_DMA_Init+0x64c>)
 8005208:	4413      	add	r3, r2
 800520a:	4a6e      	ldr	r2, [pc, #440]	; (80053c4 <HAL_DMA_Init+0x650>)
 800520c:	fba2 2303 	umull	r2, r3, r2, r3
 8005210:	091b      	lsrs	r3, r3, #4
 8005212:	009a      	lsls	r2, r3, #2
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f002 f9a9 	bl	8007570 <DMA_CalcBaseAndBitshift>
 800521e:	4603      	mov	r3, r0
 8005220:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005226:	f003 031f 	and.w	r3, r3, #31
 800522a:	2201      	movs	r2, #1
 800522c:	409a      	lsls	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	605a      	str	r2, [r3, #4]
 8005232:	e008      	b.n	8005246 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2240      	movs	r2, #64	; 0x40
 8005238:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2203      	movs	r2, #3
 800523e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e0b7      	b.n	80053b6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a5f      	ldr	r2, [pc, #380]	; (80053c8 <HAL_DMA_Init+0x654>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d072      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a5d      	ldr	r2, [pc, #372]	; (80053cc <HAL_DMA_Init+0x658>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d06d      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a5c      	ldr	r2, [pc, #368]	; (80053d0 <HAL_DMA_Init+0x65c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d068      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a5a      	ldr	r2, [pc, #360]	; (80053d4 <HAL_DMA_Init+0x660>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d063      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a59      	ldr	r2, [pc, #356]	; (80053d8 <HAL_DMA_Init+0x664>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d05e      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a57      	ldr	r2, [pc, #348]	; (80053dc <HAL_DMA_Init+0x668>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d059      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a56      	ldr	r2, [pc, #344]	; (80053e0 <HAL_DMA_Init+0x66c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d054      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a54      	ldr	r2, [pc, #336]	; (80053e4 <HAL_DMA_Init+0x670>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d04f      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a53      	ldr	r2, [pc, #332]	; (80053e8 <HAL_DMA_Init+0x674>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d04a      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a51      	ldr	r2, [pc, #324]	; (80053ec <HAL_DMA_Init+0x678>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d045      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a50      	ldr	r2, [pc, #320]	; (80053f0 <HAL_DMA_Init+0x67c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d040      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a4e      	ldr	r2, [pc, #312]	; (80053f4 <HAL_DMA_Init+0x680>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d03b      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a4d      	ldr	r2, [pc, #308]	; (80053f8 <HAL_DMA_Init+0x684>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d036      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a4b      	ldr	r2, [pc, #300]	; (80053fc <HAL_DMA_Init+0x688>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d031      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a4a      	ldr	r2, [pc, #296]	; (8005400 <HAL_DMA_Init+0x68c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d02c      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a48      	ldr	r2, [pc, #288]	; (8005404 <HAL_DMA_Init+0x690>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d027      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a47      	ldr	r2, [pc, #284]	; (8005408 <HAL_DMA_Init+0x694>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d022      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a45      	ldr	r2, [pc, #276]	; (800540c <HAL_DMA_Init+0x698>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d01d      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a44      	ldr	r2, [pc, #272]	; (8005410 <HAL_DMA_Init+0x69c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d018      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a42      	ldr	r2, [pc, #264]	; (8005414 <HAL_DMA_Init+0x6a0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d013      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a41      	ldr	r2, [pc, #260]	; (8005418 <HAL_DMA_Init+0x6a4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d00e      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a3f      	ldr	r2, [pc, #252]	; (800541c <HAL_DMA_Init+0x6a8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d009      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a3e      	ldr	r2, [pc, #248]	; (8005420 <HAL_DMA_Init+0x6ac>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d004      	beq.n	8005336 <HAL_DMA_Init+0x5c2>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a3c      	ldr	r2, [pc, #240]	; (8005424 <HAL_DMA_Init+0x6b0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d101      	bne.n	800533a <HAL_DMA_Init+0x5c6>
 8005336:	2301      	movs	r3, #1
 8005338:	e000      	b.n	800533c <HAL_DMA_Init+0x5c8>
 800533a:	2300      	movs	r3, #0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d032      	beq.n	80053a6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f002 fa43 	bl	80077cc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	2b80      	cmp	r3, #128	; 0x80
 800534c:	d102      	bne.n	8005354 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800535c:	b2d2      	uxtb	r2, r2
 800535e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005368:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d010      	beq.n	8005394 <HAL_DMA_Init+0x620>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b08      	cmp	r3, #8
 8005378:	d80c      	bhi.n	8005394 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f002 fac0 	bl	8007900 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005390:	605a      	str	r2, [r3, #4]
 8005392:	e008      	b.n	80053a6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	a7fdabf8 	.word	0xa7fdabf8
 80053c4:	cccccccd 	.word	0xcccccccd
 80053c8:	40020010 	.word	0x40020010
 80053cc:	40020028 	.word	0x40020028
 80053d0:	40020040 	.word	0x40020040
 80053d4:	40020058 	.word	0x40020058
 80053d8:	40020070 	.word	0x40020070
 80053dc:	40020088 	.word	0x40020088
 80053e0:	400200a0 	.word	0x400200a0
 80053e4:	400200b8 	.word	0x400200b8
 80053e8:	40020410 	.word	0x40020410
 80053ec:	40020428 	.word	0x40020428
 80053f0:	40020440 	.word	0x40020440
 80053f4:	40020458 	.word	0x40020458
 80053f8:	40020470 	.word	0x40020470
 80053fc:	40020488 	.word	0x40020488
 8005400:	400204a0 	.word	0x400204a0
 8005404:	400204b8 	.word	0x400204b8
 8005408:	58025408 	.word	0x58025408
 800540c:	5802541c 	.word	0x5802541c
 8005410:	58025430 	.word	0x58025430
 8005414:	58025444 	.word	0x58025444
 8005418:	58025458 	.word	0x58025458
 800541c:	5802546c 	.word	0x5802546c
 8005420:	58025480 	.word	0x58025480
 8005424:	58025494 	.word	0x58025494

08005428 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
 8005434:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e226      	b.n	8005892 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <HAL_DMA_Start_IT+0x2a>
 800544e:	2302      	movs	r3, #2
 8005450:	e21f      	b.n	8005892 <HAL_DMA_Start_IT+0x46a>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b01      	cmp	r3, #1
 8005464:	f040 820a 	bne.w	800587c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a68      	ldr	r2, [pc, #416]	; (800561c <HAL_DMA_Start_IT+0x1f4>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d04a      	beq.n	8005516 <HAL_DMA_Start_IT+0xee>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a66      	ldr	r2, [pc, #408]	; (8005620 <HAL_DMA_Start_IT+0x1f8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d045      	beq.n	8005516 <HAL_DMA_Start_IT+0xee>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a65      	ldr	r2, [pc, #404]	; (8005624 <HAL_DMA_Start_IT+0x1fc>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d040      	beq.n	8005516 <HAL_DMA_Start_IT+0xee>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a63      	ldr	r2, [pc, #396]	; (8005628 <HAL_DMA_Start_IT+0x200>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d03b      	beq.n	8005516 <HAL_DMA_Start_IT+0xee>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a62      	ldr	r2, [pc, #392]	; (800562c <HAL_DMA_Start_IT+0x204>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d036      	beq.n	8005516 <HAL_DMA_Start_IT+0xee>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a60      	ldr	r2, [pc, #384]	; (8005630 <HAL_DMA_Start_IT+0x208>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d031      	beq.n	8005516 <HAL_DMA_Start_IT+0xee>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a5f      	ldr	r2, [pc, #380]	; (8005634 <HAL_DMA_Start_IT+0x20c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d02c      	beq.n	8005516 <HAL_DMA_Start_IT+0xee>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a5d      	ldr	r2, [pc, #372]	; (8005638 <HAL_DMA_Start_IT+0x210>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d027      	beq.n	8005516 <HAL_DMA_Start_IT+0xee>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a5c      	ldr	r2, [pc, #368]	; (800563c <HAL_DMA_Start_IT+0x214>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d022      	beq.n	8005516 <HAL_DMA_Start_IT+0xee>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a5a      	ldr	r2, [pc, #360]	; (8005640 <HAL_DMA_Start_IT+0x218>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d01d      	beq.n	8005516 <HAL_DMA_Start_IT+0xee>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a59      	ldr	r2, [pc, #356]	; (8005644 <HAL_DMA_Start_IT+0x21c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d018      	beq.n	8005516 <HAL_DMA_Start_IT+0xee>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a57      	ldr	r2, [pc, #348]	; (8005648 <HAL_DMA_Start_IT+0x220>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d013      	beq.n	8005516 <HAL_DMA_Start_IT+0xee>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a56      	ldr	r2, [pc, #344]	; (800564c <HAL_DMA_Start_IT+0x224>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00e      	beq.n	8005516 <HAL_DMA_Start_IT+0xee>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a54      	ldr	r2, [pc, #336]	; (8005650 <HAL_DMA_Start_IT+0x228>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d009      	beq.n	8005516 <HAL_DMA_Start_IT+0xee>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a53      	ldr	r2, [pc, #332]	; (8005654 <HAL_DMA_Start_IT+0x22c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d004      	beq.n	8005516 <HAL_DMA_Start_IT+0xee>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a51      	ldr	r2, [pc, #324]	; (8005658 <HAL_DMA_Start_IT+0x230>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d108      	bne.n	8005528 <HAL_DMA_Start_IT+0x100>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0201 	bic.w	r2, r2, #1
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	e007      	b.n	8005538 <HAL_DMA_Start_IT+0x110>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0201 	bic.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	68b9      	ldr	r1, [r7, #8]
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f001 fe6a 	bl	8007218 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a34      	ldr	r2, [pc, #208]	; (800561c <HAL_DMA_Start_IT+0x1f4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d04a      	beq.n	80055e4 <HAL_DMA_Start_IT+0x1bc>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a33      	ldr	r2, [pc, #204]	; (8005620 <HAL_DMA_Start_IT+0x1f8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d045      	beq.n	80055e4 <HAL_DMA_Start_IT+0x1bc>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a31      	ldr	r2, [pc, #196]	; (8005624 <HAL_DMA_Start_IT+0x1fc>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d040      	beq.n	80055e4 <HAL_DMA_Start_IT+0x1bc>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a30      	ldr	r2, [pc, #192]	; (8005628 <HAL_DMA_Start_IT+0x200>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d03b      	beq.n	80055e4 <HAL_DMA_Start_IT+0x1bc>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a2e      	ldr	r2, [pc, #184]	; (800562c <HAL_DMA_Start_IT+0x204>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d036      	beq.n	80055e4 <HAL_DMA_Start_IT+0x1bc>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a2d      	ldr	r2, [pc, #180]	; (8005630 <HAL_DMA_Start_IT+0x208>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d031      	beq.n	80055e4 <HAL_DMA_Start_IT+0x1bc>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a2b      	ldr	r2, [pc, #172]	; (8005634 <HAL_DMA_Start_IT+0x20c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d02c      	beq.n	80055e4 <HAL_DMA_Start_IT+0x1bc>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a2a      	ldr	r2, [pc, #168]	; (8005638 <HAL_DMA_Start_IT+0x210>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d027      	beq.n	80055e4 <HAL_DMA_Start_IT+0x1bc>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a28      	ldr	r2, [pc, #160]	; (800563c <HAL_DMA_Start_IT+0x214>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d022      	beq.n	80055e4 <HAL_DMA_Start_IT+0x1bc>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a27      	ldr	r2, [pc, #156]	; (8005640 <HAL_DMA_Start_IT+0x218>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d01d      	beq.n	80055e4 <HAL_DMA_Start_IT+0x1bc>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a25      	ldr	r2, [pc, #148]	; (8005644 <HAL_DMA_Start_IT+0x21c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d018      	beq.n	80055e4 <HAL_DMA_Start_IT+0x1bc>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a24      	ldr	r2, [pc, #144]	; (8005648 <HAL_DMA_Start_IT+0x220>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d013      	beq.n	80055e4 <HAL_DMA_Start_IT+0x1bc>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a22      	ldr	r2, [pc, #136]	; (800564c <HAL_DMA_Start_IT+0x224>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d00e      	beq.n	80055e4 <HAL_DMA_Start_IT+0x1bc>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a21      	ldr	r2, [pc, #132]	; (8005650 <HAL_DMA_Start_IT+0x228>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d009      	beq.n	80055e4 <HAL_DMA_Start_IT+0x1bc>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a1f      	ldr	r2, [pc, #124]	; (8005654 <HAL_DMA_Start_IT+0x22c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d004      	beq.n	80055e4 <HAL_DMA_Start_IT+0x1bc>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a1e      	ldr	r2, [pc, #120]	; (8005658 <HAL_DMA_Start_IT+0x230>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d101      	bne.n	80055e8 <HAL_DMA_Start_IT+0x1c0>
 80055e4:	2301      	movs	r3, #1
 80055e6:	e000      	b.n	80055ea <HAL_DMA_Start_IT+0x1c2>
 80055e8:	2300      	movs	r3, #0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d036      	beq.n	800565c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f023 021e 	bic.w	r2, r3, #30
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0216 	orr.w	r2, r2, #22
 8005600:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	d03e      	beq.n	8005688 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0208 	orr.w	r2, r2, #8
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	e035      	b.n	8005688 <HAL_DMA_Start_IT+0x260>
 800561c:	40020010 	.word	0x40020010
 8005620:	40020028 	.word	0x40020028
 8005624:	40020040 	.word	0x40020040
 8005628:	40020058 	.word	0x40020058
 800562c:	40020070 	.word	0x40020070
 8005630:	40020088 	.word	0x40020088
 8005634:	400200a0 	.word	0x400200a0
 8005638:	400200b8 	.word	0x400200b8
 800563c:	40020410 	.word	0x40020410
 8005640:	40020428 	.word	0x40020428
 8005644:	40020440 	.word	0x40020440
 8005648:	40020458 	.word	0x40020458
 800564c:	40020470 	.word	0x40020470
 8005650:	40020488 	.word	0x40020488
 8005654:	400204a0 	.word	0x400204a0
 8005658:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f023 020e 	bic.w	r2, r3, #14
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 020a 	orr.w	r2, r2, #10
 800566e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	d007      	beq.n	8005688 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0204 	orr.w	r2, r2, #4
 8005686:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a83      	ldr	r2, [pc, #524]	; (800589c <HAL_DMA_Start_IT+0x474>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d072      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a82      	ldr	r2, [pc, #520]	; (80058a0 <HAL_DMA_Start_IT+0x478>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d06d      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a80      	ldr	r2, [pc, #512]	; (80058a4 <HAL_DMA_Start_IT+0x47c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d068      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a7f      	ldr	r2, [pc, #508]	; (80058a8 <HAL_DMA_Start_IT+0x480>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d063      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a7d      	ldr	r2, [pc, #500]	; (80058ac <HAL_DMA_Start_IT+0x484>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d05e      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a7c      	ldr	r2, [pc, #496]	; (80058b0 <HAL_DMA_Start_IT+0x488>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d059      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a7a      	ldr	r2, [pc, #488]	; (80058b4 <HAL_DMA_Start_IT+0x48c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d054      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a79      	ldr	r2, [pc, #484]	; (80058b8 <HAL_DMA_Start_IT+0x490>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d04f      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a77      	ldr	r2, [pc, #476]	; (80058bc <HAL_DMA_Start_IT+0x494>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d04a      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a76      	ldr	r2, [pc, #472]	; (80058c0 <HAL_DMA_Start_IT+0x498>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d045      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a74      	ldr	r2, [pc, #464]	; (80058c4 <HAL_DMA_Start_IT+0x49c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d040      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a73      	ldr	r2, [pc, #460]	; (80058c8 <HAL_DMA_Start_IT+0x4a0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d03b      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a71      	ldr	r2, [pc, #452]	; (80058cc <HAL_DMA_Start_IT+0x4a4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d036      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a70      	ldr	r2, [pc, #448]	; (80058d0 <HAL_DMA_Start_IT+0x4a8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d031      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a6e      	ldr	r2, [pc, #440]	; (80058d4 <HAL_DMA_Start_IT+0x4ac>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d02c      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a6d      	ldr	r2, [pc, #436]	; (80058d8 <HAL_DMA_Start_IT+0x4b0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d027      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a6b      	ldr	r2, [pc, #428]	; (80058dc <HAL_DMA_Start_IT+0x4b4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d022      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a6a      	ldr	r2, [pc, #424]	; (80058e0 <HAL_DMA_Start_IT+0x4b8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d01d      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a68      	ldr	r2, [pc, #416]	; (80058e4 <HAL_DMA_Start_IT+0x4bc>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d018      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a67      	ldr	r2, [pc, #412]	; (80058e8 <HAL_DMA_Start_IT+0x4c0>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d013      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a65      	ldr	r2, [pc, #404]	; (80058ec <HAL_DMA_Start_IT+0x4c4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00e      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a64      	ldr	r2, [pc, #400]	; (80058f0 <HAL_DMA_Start_IT+0x4c8>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d009      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a62      	ldr	r2, [pc, #392]	; (80058f4 <HAL_DMA_Start_IT+0x4cc>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d004      	beq.n	8005778 <HAL_DMA_Start_IT+0x350>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a61      	ldr	r2, [pc, #388]	; (80058f8 <HAL_DMA_Start_IT+0x4d0>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d101      	bne.n	800577c <HAL_DMA_Start_IT+0x354>
 8005778:	2301      	movs	r3, #1
 800577a:	e000      	b.n	800577e <HAL_DMA_Start_IT+0x356>
 800577c:	2300      	movs	r3, #0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d01a      	beq.n	80057b8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d007      	beq.n	80057a0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800579a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800579e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d007      	beq.n	80057b8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057b6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a37      	ldr	r2, [pc, #220]	; (800589c <HAL_DMA_Start_IT+0x474>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d04a      	beq.n	8005858 <HAL_DMA_Start_IT+0x430>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a36      	ldr	r2, [pc, #216]	; (80058a0 <HAL_DMA_Start_IT+0x478>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d045      	beq.n	8005858 <HAL_DMA_Start_IT+0x430>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a34      	ldr	r2, [pc, #208]	; (80058a4 <HAL_DMA_Start_IT+0x47c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d040      	beq.n	8005858 <HAL_DMA_Start_IT+0x430>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a33      	ldr	r2, [pc, #204]	; (80058a8 <HAL_DMA_Start_IT+0x480>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d03b      	beq.n	8005858 <HAL_DMA_Start_IT+0x430>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a31      	ldr	r2, [pc, #196]	; (80058ac <HAL_DMA_Start_IT+0x484>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d036      	beq.n	8005858 <HAL_DMA_Start_IT+0x430>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a30      	ldr	r2, [pc, #192]	; (80058b0 <HAL_DMA_Start_IT+0x488>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d031      	beq.n	8005858 <HAL_DMA_Start_IT+0x430>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a2e      	ldr	r2, [pc, #184]	; (80058b4 <HAL_DMA_Start_IT+0x48c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d02c      	beq.n	8005858 <HAL_DMA_Start_IT+0x430>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a2d      	ldr	r2, [pc, #180]	; (80058b8 <HAL_DMA_Start_IT+0x490>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d027      	beq.n	8005858 <HAL_DMA_Start_IT+0x430>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a2b      	ldr	r2, [pc, #172]	; (80058bc <HAL_DMA_Start_IT+0x494>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d022      	beq.n	8005858 <HAL_DMA_Start_IT+0x430>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a2a      	ldr	r2, [pc, #168]	; (80058c0 <HAL_DMA_Start_IT+0x498>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d01d      	beq.n	8005858 <HAL_DMA_Start_IT+0x430>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a28      	ldr	r2, [pc, #160]	; (80058c4 <HAL_DMA_Start_IT+0x49c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d018      	beq.n	8005858 <HAL_DMA_Start_IT+0x430>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a27      	ldr	r2, [pc, #156]	; (80058c8 <HAL_DMA_Start_IT+0x4a0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d013      	beq.n	8005858 <HAL_DMA_Start_IT+0x430>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a25      	ldr	r2, [pc, #148]	; (80058cc <HAL_DMA_Start_IT+0x4a4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00e      	beq.n	8005858 <HAL_DMA_Start_IT+0x430>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a24      	ldr	r2, [pc, #144]	; (80058d0 <HAL_DMA_Start_IT+0x4a8>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d009      	beq.n	8005858 <HAL_DMA_Start_IT+0x430>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a22      	ldr	r2, [pc, #136]	; (80058d4 <HAL_DMA_Start_IT+0x4ac>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d004      	beq.n	8005858 <HAL_DMA_Start_IT+0x430>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a21      	ldr	r2, [pc, #132]	; (80058d8 <HAL_DMA_Start_IT+0x4b0>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d108      	bne.n	800586a <HAL_DMA_Start_IT+0x442>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0201 	orr.w	r2, r2, #1
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	e012      	b.n	8005890 <HAL_DMA_Start_IT+0x468>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f042 0201 	orr.w	r2, r2, #1
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	e009      	b.n	8005890 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005882:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005890:	7dfb      	ldrb	r3, [r7, #23]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3718      	adds	r7, #24
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	40020010 	.word	0x40020010
 80058a0:	40020028 	.word	0x40020028
 80058a4:	40020040 	.word	0x40020040
 80058a8:	40020058 	.word	0x40020058
 80058ac:	40020070 	.word	0x40020070
 80058b0:	40020088 	.word	0x40020088
 80058b4:	400200a0 	.word	0x400200a0
 80058b8:	400200b8 	.word	0x400200b8
 80058bc:	40020410 	.word	0x40020410
 80058c0:	40020428 	.word	0x40020428
 80058c4:	40020440 	.word	0x40020440
 80058c8:	40020458 	.word	0x40020458
 80058cc:	40020470 	.word	0x40020470
 80058d0:	40020488 	.word	0x40020488
 80058d4:	400204a0 	.word	0x400204a0
 80058d8:	400204b8 	.word	0x400204b8
 80058dc:	58025408 	.word	0x58025408
 80058e0:	5802541c 	.word	0x5802541c
 80058e4:	58025430 	.word	0x58025430
 80058e8:	58025444 	.word	0x58025444
 80058ec:	58025458 	.word	0x58025458
 80058f0:	5802546c 	.word	0x5802546c
 80058f4:	58025480 	.word	0x58025480
 80058f8:	58025494 	.word	0x58025494

080058fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005904:	f7ff f91a 	bl	8004b3c <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e2dc      	b.n	8005ece <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b02      	cmp	r3, #2
 800591e:	d008      	beq.n	8005932 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2280      	movs	r2, #128	; 0x80
 8005924:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e2cd      	b.n	8005ece <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a76      	ldr	r2, [pc, #472]	; (8005b10 <HAL_DMA_Abort+0x214>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d04a      	beq.n	80059d2 <HAL_DMA_Abort+0xd6>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a74      	ldr	r2, [pc, #464]	; (8005b14 <HAL_DMA_Abort+0x218>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d045      	beq.n	80059d2 <HAL_DMA_Abort+0xd6>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a73      	ldr	r2, [pc, #460]	; (8005b18 <HAL_DMA_Abort+0x21c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d040      	beq.n	80059d2 <HAL_DMA_Abort+0xd6>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a71      	ldr	r2, [pc, #452]	; (8005b1c <HAL_DMA_Abort+0x220>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d03b      	beq.n	80059d2 <HAL_DMA_Abort+0xd6>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a70      	ldr	r2, [pc, #448]	; (8005b20 <HAL_DMA_Abort+0x224>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d036      	beq.n	80059d2 <HAL_DMA_Abort+0xd6>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a6e      	ldr	r2, [pc, #440]	; (8005b24 <HAL_DMA_Abort+0x228>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d031      	beq.n	80059d2 <HAL_DMA_Abort+0xd6>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a6d      	ldr	r2, [pc, #436]	; (8005b28 <HAL_DMA_Abort+0x22c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d02c      	beq.n	80059d2 <HAL_DMA_Abort+0xd6>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a6b      	ldr	r2, [pc, #428]	; (8005b2c <HAL_DMA_Abort+0x230>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d027      	beq.n	80059d2 <HAL_DMA_Abort+0xd6>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a6a      	ldr	r2, [pc, #424]	; (8005b30 <HAL_DMA_Abort+0x234>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d022      	beq.n	80059d2 <HAL_DMA_Abort+0xd6>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a68      	ldr	r2, [pc, #416]	; (8005b34 <HAL_DMA_Abort+0x238>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d01d      	beq.n	80059d2 <HAL_DMA_Abort+0xd6>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a67      	ldr	r2, [pc, #412]	; (8005b38 <HAL_DMA_Abort+0x23c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d018      	beq.n	80059d2 <HAL_DMA_Abort+0xd6>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a65      	ldr	r2, [pc, #404]	; (8005b3c <HAL_DMA_Abort+0x240>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d013      	beq.n	80059d2 <HAL_DMA_Abort+0xd6>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a64      	ldr	r2, [pc, #400]	; (8005b40 <HAL_DMA_Abort+0x244>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d00e      	beq.n	80059d2 <HAL_DMA_Abort+0xd6>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a62      	ldr	r2, [pc, #392]	; (8005b44 <HAL_DMA_Abort+0x248>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d009      	beq.n	80059d2 <HAL_DMA_Abort+0xd6>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a61      	ldr	r2, [pc, #388]	; (8005b48 <HAL_DMA_Abort+0x24c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d004      	beq.n	80059d2 <HAL_DMA_Abort+0xd6>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a5f      	ldr	r2, [pc, #380]	; (8005b4c <HAL_DMA_Abort+0x250>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d101      	bne.n	80059d6 <HAL_DMA_Abort+0xda>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <HAL_DMA_Abort+0xdc>
 80059d6:	2300      	movs	r3, #0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d013      	beq.n	8005a04 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 021e 	bic.w	r2, r2, #30
 80059ea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	695a      	ldr	r2, [r3, #20]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059fa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	617b      	str	r3, [r7, #20]
 8005a02:	e00a      	b.n	8005a1a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 020e 	bic.w	r2, r2, #14
 8005a12:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a3c      	ldr	r2, [pc, #240]	; (8005b10 <HAL_DMA_Abort+0x214>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d072      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a3a      	ldr	r2, [pc, #232]	; (8005b14 <HAL_DMA_Abort+0x218>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d06d      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a39      	ldr	r2, [pc, #228]	; (8005b18 <HAL_DMA_Abort+0x21c>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d068      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a37      	ldr	r2, [pc, #220]	; (8005b1c <HAL_DMA_Abort+0x220>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d063      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a36      	ldr	r2, [pc, #216]	; (8005b20 <HAL_DMA_Abort+0x224>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d05e      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a34      	ldr	r2, [pc, #208]	; (8005b24 <HAL_DMA_Abort+0x228>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d059      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a33      	ldr	r2, [pc, #204]	; (8005b28 <HAL_DMA_Abort+0x22c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d054      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a31      	ldr	r2, [pc, #196]	; (8005b2c <HAL_DMA_Abort+0x230>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d04f      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a30      	ldr	r2, [pc, #192]	; (8005b30 <HAL_DMA_Abort+0x234>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d04a      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a2e      	ldr	r2, [pc, #184]	; (8005b34 <HAL_DMA_Abort+0x238>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d045      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a2d      	ldr	r2, [pc, #180]	; (8005b38 <HAL_DMA_Abort+0x23c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d040      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a2b      	ldr	r2, [pc, #172]	; (8005b3c <HAL_DMA_Abort+0x240>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d03b      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a2a      	ldr	r2, [pc, #168]	; (8005b40 <HAL_DMA_Abort+0x244>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d036      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a28      	ldr	r2, [pc, #160]	; (8005b44 <HAL_DMA_Abort+0x248>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d031      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a27      	ldr	r2, [pc, #156]	; (8005b48 <HAL_DMA_Abort+0x24c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d02c      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a25      	ldr	r2, [pc, #148]	; (8005b4c <HAL_DMA_Abort+0x250>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d027      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a24      	ldr	r2, [pc, #144]	; (8005b50 <HAL_DMA_Abort+0x254>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d022      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a22      	ldr	r2, [pc, #136]	; (8005b54 <HAL_DMA_Abort+0x258>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d01d      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a21      	ldr	r2, [pc, #132]	; (8005b58 <HAL_DMA_Abort+0x25c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d018      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a1f      	ldr	r2, [pc, #124]	; (8005b5c <HAL_DMA_Abort+0x260>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d013      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a1e      	ldr	r2, [pc, #120]	; (8005b60 <HAL_DMA_Abort+0x264>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00e      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a1c      	ldr	r2, [pc, #112]	; (8005b64 <HAL_DMA_Abort+0x268>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d009      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a1b      	ldr	r2, [pc, #108]	; (8005b68 <HAL_DMA_Abort+0x26c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d004      	beq.n	8005b0a <HAL_DMA_Abort+0x20e>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a19      	ldr	r2, [pc, #100]	; (8005b6c <HAL_DMA_Abort+0x270>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d132      	bne.n	8005b70 <HAL_DMA_Abort+0x274>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e031      	b.n	8005b72 <HAL_DMA_Abort+0x276>
 8005b0e:	bf00      	nop
 8005b10:	40020010 	.word	0x40020010
 8005b14:	40020028 	.word	0x40020028
 8005b18:	40020040 	.word	0x40020040
 8005b1c:	40020058 	.word	0x40020058
 8005b20:	40020070 	.word	0x40020070
 8005b24:	40020088 	.word	0x40020088
 8005b28:	400200a0 	.word	0x400200a0
 8005b2c:	400200b8 	.word	0x400200b8
 8005b30:	40020410 	.word	0x40020410
 8005b34:	40020428 	.word	0x40020428
 8005b38:	40020440 	.word	0x40020440
 8005b3c:	40020458 	.word	0x40020458
 8005b40:	40020470 	.word	0x40020470
 8005b44:	40020488 	.word	0x40020488
 8005b48:	400204a0 	.word	0x400204a0
 8005b4c:	400204b8 	.word	0x400204b8
 8005b50:	58025408 	.word	0x58025408
 8005b54:	5802541c 	.word	0x5802541c
 8005b58:	58025430 	.word	0x58025430
 8005b5c:	58025444 	.word	0x58025444
 8005b60:	58025458 	.word	0x58025458
 8005b64:	5802546c 	.word	0x5802546c
 8005b68:	58025480 	.word	0x58025480
 8005b6c:	58025494 	.word	0x58025494
 8005b70:	2300      	movs	r3, #0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d007      	beq.n	8005b86 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b84:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a6d      	ldr	r2, [pc, #436]	; (8005d40 <HAL_DMA_Abort+0x444>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d04a      	beq.n	8005c26 <HAL_DMA_Abort+0x32a>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a6b      	ldr	r2, [pc, #428]	; (8005d44 <HAL_DMA_Abort+0x448>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d045      	beq.n	8005c26 <HAL_DMA_Abort+0x32a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a6a      	ldr	r2, [pc, #424]	; (8005d48 <HAL_DMA_Abort+0x44c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d040      	beq.n	8005c26 <HAL_DMA_Abort+0x32a>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a68      	ldr	r2, [pc, #416]	; (8005d4c <HAL_DMA_Abort+0x450>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d03b      	beq.n	8005c26 <HAL_DMA_Abort+0x32a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a67      	ldr	r2, [pc, #412]	; (8005d50 <HAL_DMA_Abort+0x454>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d036      	beq.n	8005c26 <HAL_DMA_Abort+0x32a>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a65      	ldr	r2, [pc, #404]	; (8005d54 <HAL_DMA_Abort+0x458>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d031      	beq.n	8005c26 <HAL_DMA_Abort+0x32a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a64      	ldr	r2, [pc, #400]	; (8005d58 <HAL_DMA_Abort+0x45c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d02c      	beq.n	8005c26 <HAL_DMA_Abort+0x32a>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a62      	ldr	r2, [pc, #392]	; (8005d5c <HAL_DMA_Abort+0x460>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d027      	beq.n	8005c26 <HAL_DMA_Abort+0x32a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a61      	ldr	r2, [pc, #388]	; (8005d60 <HAL_DMA_Abort+0x464>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d022      	beq.n	8005c26 <HAL_DMA_Abort+0x32a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a5f      	ldr	r2, [pc, #380]	; (8005d64 <HAL_DMA_Abort+0x468>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d01d      	beq.n	8005c26 <HAL_DMA_Abort+0x32a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a5e      	ldr	r2, [pc, #376]	; (8005d68 <HAL_DMA_Abort+0x46c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d018      	beq.n	8005c26 <HAL_DMA_Abort+0x32a>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a5c      	ldr	r2, [pc, #368]	; (8005d6c <HAL_DMA_Abort+0x470>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d013      	beq.n	8005c26 <HAL_DMA_Abort+0x32a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a5b      	ldr	r2, [pc, #364]	; (8005d70 <HAL_DMA_Abort+0x474>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00e      	beq.n	8005c26 <HAL_DMA_Abort+0x32a>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a59      	ldr	r2, [pc, #356]	; (8005d74 <HAL_DMA_Abort+0x478>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d009      	beq.n	8005c26 <HAL_DMA_Abort+0x32a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a58      	ldr	r2, [pc, #352]	; (8005d78 <HAL_DMA_Abort+0x47c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d004      	beq.n	8005c26 <HAL_DMA_Abort+0x32a>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a56      	ldr	r2, [pc, #344]	; (8005d7c <HAL_DMA_Abort+0x480>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d108      	bne.n	8005c38 <HAL_DMA_Abort+0x33c>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0201 	bic.w	r2, r2, #1
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	e007      	b.n	8005c48 <HAL_DMA_Abort+0x34c>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0201 	bic.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c48:	e013      	b.n	8005c72 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c4a:	f7fe ff77 	bl	8004b3c <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b05      	cmp	r3, #5
 8005c56:	d90c      	bls.n	8005c72 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2203      	movs	r2, #3
 8005c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e12d      	b.n	8005ece <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1e5      	bne.n	8005c4a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a2f      	ldr	r2, [pc, #188]	; (8005d40 <HAL_DMA_Abort+0x444>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d04a      	beq.n	8005d1e <HAL_DMA_Abort+0x422>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a2d      	ldr	r2, [pc, #180]	; (8005d44 <HAL_DMA_Abort+0x448>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d045      	beq.n	8005d1e <HAL_DMA_Abort+0x422>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a2c      	ldr	r2, [pc, #176]	; (8005d48 <HAL_DMA_Abort+0x44c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d040      	beq.n	8005d1e <HAL_DMA_Abort+0x422>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a2a      	ldr	r2, [pc, #168]	; (8005d4c <HAL_DMA_Abort+0x450>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d03b      	beq.n	8005d1e <HAL_DMA_Abort+0x422>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a29      	ldr	r2, [pc, #164]	; (8005d50 <HAL_DMA_Abort+0x454>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d036      	beq.n	8005d1e <HAL_DMA_Abort+0x422>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a27      	ldr	r2, [pc, #156]	; (8005d54 <HAL_DMA_Abort+0x458>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d031      	beq.n	8005d1e <HAL_DMA_Abort+0x422>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a26      	ldr	r2, [pc, #152]	; (8005d58 <HAL_DMA_Abort+0x45c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d02c      	beq.n	8005d1e <HAL_DMA_Abort+0x422>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a24      	ldr	r2, [pc, #144]	; (8005d5c <HAL_DMA_Abort+0x460>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d027      	beq.n	8005d1e <HAL_DMA_Abort+0x422>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a23      	ldr	r2, [pc, #140]	; (8005d60 <HAL_DMA_Abort+0x464>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d022      	beq.n	8005d1e <HAL_DMA_Abort+0x422>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a21      	ldr	r2, [pc, #132]	; (8005d64 <HAL_DMA_Abort+0x468>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d01d      	beq.n	8005d1e <HAL_DMA_Abort+0x422>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a20      	ldr	r2, [pc, #128]	; (8005d68 <HAL_DMA_Abort+0x46c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d018      	beq.n	8005d1e <HAL_DMA_Abort+0x422>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a1e      	ldr	r2, [pc, #120]	; (8005d6c <HAL_DMA_Abort+0x470>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d013      	beq.n	8005d1e <HAL_DMA_Abort+0x422>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a1d      	ldr	r2, [pc, #116]	; (8005d70 <HAL_DMA_Abort+0x474>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d00e      	beq.n	8005d1e <HAL_DMA_Abort+0x422>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a1b      	ldr	r2, [pc, #108]	; (8005d74 <HAL_DMA_Abort+0x478>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d009      	beq.n	8005d1e <HAL_DMA_Abort+0x422>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1a      	ldr	r2, [pc, #104]	; (8005d78 <HAL_DMA_Abort+0x47c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d004      	beq.n	8005d1e <HAL_DMA_Abort+0x422>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a18      	ldr	r2, [pc, #96]	; (8005d7c <HAL_DMA_Abort+0x480>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d101      	bne.n	8005d22 <HAL_DMA_Abort+0x426>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e000      	b.n	8005d24 <HAL_DMA_Abort+0x428>
 8005d22:	2300      	movs	r3, #0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d02b      	beq.n	8005d80 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d2c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d32:	f003 031f 	and.w	r3, r3, #31
 8005d36:	223f      	movs	r2, #63	; 0x3f
 8005d38:	409a      	lsls	r2, r3
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	609a      	str	r2, [r3, #8]
 8005d3e:	e02a      	b.n	8005d96 <HAL_DMA_Abort+0x49a>
 8005d40:	40020010 	.word	0x40020010
 8005d44:	40020028 	.word	0x40020028
 8005d48:	40020040 	.word	0x40020040
 8005d4c:	40020058 	.word	0x40020058
 8005d50:	40020070 	.word	0x40020070
 8005d54:	40020088 	.word	0x40020088
 8005d58:	400200a0 	.word	0x400200a0
 8005d5c:	400200b8 	.word	0x400200b8
 8005d60:	40020410 	.word	0x40020410
 8005d64:	40020428 	.word	0x40020428
 8005d68:	40020440 	.word	0x40020440
 8005d6c:	40020458 	.word	0x40020458
 8005d70:	40020470 	.word	0x40020470
 8005d74:	40020488 	.word	0x40020488
 8005d78:	400204a0 	.word	0x400204a0
 8005d7c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d84:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8a:	f003 031f 	and.w	r3, r3, #31
 8005d8e:	2201      	movs	r2, #1
 8005d90:	409a      	lsls	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a4f      	ldr	r2, [pc, #316]	; (8005ed8 <HAL_DMA_Abort+0x5dc>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d072      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a4d      	ldr	r2, [pc, #308]	; (8005edc <HAL_DMA_Abort+0x5e0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d06d      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a4c      	ldr	r2, [pc, #304]	; (8005ee0 <HAL_DMA_Abort+0x5e4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d068      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a4a      	ldr	r2, [pc, #296]	; (8005ee4 <HAL_DMA_Abort+0x5e8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d063      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a49      	ldr	r2, [pc, #292]	; (8005ee8 <HAL_DMA_Abort+0x5ec>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d05e      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a47      	ldr	r2, [pc, #284]	; (8005eec <HAL_DMA_Abort+0x5f0>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d059      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a46      	ldr	r2, [pc, #280]	; (8005ef0 <HAL_DMA_Abort+0x5f4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d054      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a44      	ldr	r2, [pc, #272]	; (8005ef4 <HAL_DMA_Abort+0x5f8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d04f      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a43      	ldr	r2, [pc, #268]	; (8005ef8 <HAL_DMA_Abort+0x5fc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d04a      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a41      	ldr	r2, [pc, #260]	; (8005efc <HAL_DMA_Abort+0x600>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d045      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a40      	ldr	r2, [pc, #256]	; (8005f00 <HAL_DMA_Abort+0x604>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d040      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a3e      	ldr	r2, [pc, #248]	; (8005f04 <HAL_DMA_Abort+0x608>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d03b      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a3d      	ldr	r2, [pc, #244]	; (8005f08 <HAL_DMA_Abort+0x60c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d036      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a3b      	ldr	r2, [pc, #236]	; (8005f0c <HAL_DMA_Abort+0x610>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d031      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a3a      	ldr	r2, [pc, #232]	; (8005f10 <HAL_DMA_Abort+0x614>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d02c      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a38      	ldr	r2, [pc, #224]	; (8005f14 <HAL_DMA_Abort+0x618>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d027      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a37      	ldr	r2, [pc, #220]	; (8005f18 <HAL_DMA_Abort+0x61c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d022      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a35      	ldr	r2, [pc, #212]	; (8005f1c <HAL_DMA_Abort+0x620>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d01d      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a34      	ldr	r2, [pc, #208]	; (8005f20 <HAL_DMA_Abort+0x624>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d018      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a32      	ldr	r2, [pc, #200]	; (8005f24 <HAL_DMA_Abort+0x628>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d013      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a31      	ldr	r2, [pc, #196]	; (8005f28 <HAL_DMA_Abort+0x62c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d00e      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a2f      	ldr	r2, [pc, #188]	; (8005f2c <HAL_DMA_Abort+0x630>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d009      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a2e      	ldr	r2, [pc, #184]	; (8005f30 <HAL_DMA_Abort+0x634>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d004      	beq.n	8005e86 <HAL_DMA_Abort+0x58a>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a2c      	ldr	r2, [pc, #176]	; (8005f34 <HAL_DMA_Abort+0x638>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d101      	bne.n	8005e8a <HAL_DMA_Abort+0x58e>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e000      	b.n	8005e8c <HAL_DMA_Abort+0x590>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d015      	beq.n	8005ebc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e98:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00c      	beq.n	8005ebc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005eb0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005eba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	40020010 	.word	0x40020010
 8005edc:	40020028 	.word	0x40020028
 8005ee0:	40020040 	.word	0x40020040
 8005ee4:	40020058 	.word	0x40020058
 8005ee8:	40020070 	.word	0x40020070
 8005eec:	40020088 	.word	0x40020088
 8005ef0:	400200a0 	.word	0x400200a0
 8005ef4:	400200b8 	.word	0x400200b8
 8005ef8:	40020410 	.word	0x40020410
 8005efc:	40020428 	.word	0x40020428
 8005f00:	40020440 	.word	0x40020440
 8005f04:	40020458 	.word	0x40020458
 8005f08:	40020470 	.word	0x40020470
 8005f0c:	40020488 	.word	0x40020488
 8005f10:	400204a0 	.word	0x400204a0
 8005f14:	400204b8 	.word	0x400204b8
 8005f18:	58025408 	.word	0x58025408
 8005f1c:	5802541c 	.word	0x5802541c
 8005f20:	58025430 	.word	0x58025430
 8005f24:	58025444 	.word	0x58025444
 8005f28:	58025458 	.word	0x58025458
 8005f2c:	5802546c 	.word	0x5802546c
 8005f30:	58025480 	.word	0x58025480
 8005f34:	58025494 	.word	0x58025494

08005f38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e237      	b.n	80063ba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d004      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2280      	movs	r2, #128	; 0x80
 8005f5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e22c      	b.n	80063ba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a5c      	ldr	r2, [pc, #368]	; (80060d8 <HAL_DMA_Abort_IT+0x1a0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d04a      	beq.n	8006000 <HAL_DMA_Abort_IT+0xc8>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a5b      	ldr	r2, [pc, #364]	; (80060dc <HAL_DMA_Abort_IT+0x1a4>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d045      	beq.n	8006000 <HAL_DMA_Abort_IT+0xc8>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a59      	ldr	r2, [pc, #356]	; (80060e0 <HAL_DMA_Abort_IT+0x1a8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d040      	beq.n	8006000 <HAL_DMA_Abort_IT+0xc8>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a58      	ldr	r2, [pc, #352]	; (80060e4 <HAL_DMA_Abort_IT+0x1ac>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d03b      	beq.n	8006000 <HAL_DMA_Abort_IT+0xc8>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a56      	ldr	r2, [pc, #344]	; (80060e8 <HAL_DMA_Abort_IT+0x1b0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d036      	beq.n	8006000 <HAL_DMA_Abort_IT+0xc8>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a55      	ldr	r2, [pc, #340]	; (80060ec <HAL_DMA_Abort_IT+0x1b4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d031      	beq.n	8006000 <HAL_DMA_Abort_IT+0xc8>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a53      	ldr	r2, [pc, #332]	; (80060f0 <HAL_DMA_Abort_IT+0x1b8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d02c      	beq.n	8006000 <HAL_DMA_Abort_IT+0xc8>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a52      	ldr	r2, [pc, #328]	; (80060f4 <HAL_DMA_Abort_IT+0x1bc>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d027      	beq.n	8006000 <HAL_DMA_Abort_IT+0xc8>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a50      	ldr	r2, [pc, #320]	; (80060f8 <HAL_DMA_Abort_IT+0x1c0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d022      	beq.n	8006000 <HAL_DMA_Abort_IT+0xc8>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a4f      	ldr	r2, [pc, #316]	; (80060fc <HAL_DMA_Abort_IT+0x1c4>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d01d      	beq.n	8006000 <HAL_DMA_Abort_IT+0xc8>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a4d      	ldr	r2, [pc, #308]	; (8006100 <HAL_DMA_Abort_IT+0x1c8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d018      	beq.n	8006000 <HAL_DMA_Abort_IT+0xc8>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a4c      	ldr	r2, [pc, #304]	; (8006104 <HAL_DMA_Abort_IT+0x1cc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d013      	beq.n	8006000 <HAL_DMA_Abort_IT+0xc8>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a4a      	ldr	r2, [pc, #296]	; (8006108 <HAL_DMA_Abort_IT+0x1d0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d00e      	beq.n	8006000 <HAL_DMA_Abort_IT+0xc8>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a49      	ldr	r2, [pc, #292]	; (800610c <HAL_DMA_Abort_IT+0x1d4>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d009      	beq.n	8006000 <HAL_DMA_Abort_IT+0xc8>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a47      	ldr	r2, [pc, #284]	; (8006110 <HAL_DMA_Abort_IT+0x1d8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d004      	beq.n	8006000 <HAL_DMA_Abort_IT+0xc8>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a46      	ldr	r2, [pc, #280]	; (8006114 <HAL_DMA_Abort_IT+0x1dc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d101      	bne.n	8006004 <HAL_DMA_Abort_IT+0xcc>
 8006000:	2301      	movs	r3, #1
 8006002:	e000      	b.n	8006006 <HAL_DMA_Abort_IT+0xce>
 8006004:	2300      	movs	r3, #0
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 8086 	beq.w	8006118 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2204      	movs	r2, #4
 8006010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a2f      	ldr	r2, [pc, #188]	; (80060d8 <HAL_DMA_Abort_IT+0x1a0>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d04a      	beq.n	80060b4 <HAL_DMA_Abort_IT+0x17c>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a2e      	ldr	r2, [pc, #184]	; (80060dc <HAL_DMA_Abort_IT+0x1a4>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d045      	beq.n	80060b4 <HAL_DMA_Abort_IT+0x17c>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a2c      	ldr	r2, [pc, #176]	; (80060e0 <HAL_DMA_Abort_IT+0x1a8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d040      	beq.n	80060b4 <HAL_DMA_Abort_IT+0x17c>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a2b      	ldr	r2, [pc, #172]	; (80060e4 <HAL_DMA_Abort_IT+0x1ac>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d03b      	beq.n	80060b4 <HAL_DMA_Abort_IT+0x17c>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a29      	ldr	r2, [pc, #164]	; (80060e8 <HAL_DMA_Abort_IT+0x1b0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d036      	beq.n	80060b4 <HAL_DMA_Abort_IT+0x17c>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a28      	ldr	r2, [pc, #160]	; (80060ec <HAL_DMA_Abort_IT+0x1b4>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d031      	beq.n	80060b4 <HAL_DMA_Abort_IT+0x17c>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a26      	ldr	r2, [pc, #152]	; (80060f0 <HAL_DMA_Abort_IT+0x1b8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d02c      	beq.n	80060b4 <HAL_DMA_Abort_IT+0x17c>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a25      	ldr	r2, [pc, #148]	; (80060f4 <HAL_DMA_Abort_IT+0x1bc>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d027      	beq.n	80060b4 <HAL_DMA_Abort_IT+0x17c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a23      	ldr	r2, [pc, #140]	; (80060f8 <HAL_DMA_Abort_IT+0x1c0>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d022      	beq.n	80060b4 <HAL_DMA_Abort_IT+0x17c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a22      	ldr	r2, [pc, #136]	; (80060fc <HAL_DMA_Abort_IT+0x1c4>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d01d      	beq.n	80060b4 <HAL_DMA_Abort_IT+0x17c>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a20      	ldr	r2, [pc, #128]	; (8006100 <HAL_DMA_Abort_IT+0x1c8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d018      	beq.n	80060b4 <HAL_DMA_Abort_IT+0x17c>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a1f      	ldr	r2, [pc, #124]	; (8006104 <HAL_DMA_Abort_IT+0x1cc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d013      	beq.n	80060b4 <HAL_DMA_Abort_IT+0x17c>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a1d      	ldr	r2, [pc, #116]	; (8006108 <HAL_DMA_Abort_IT+0x1d0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00e      	beq.n	80060b4 <HAL_DMA_Abort_IT+0x17c>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1c      	ldr	r2, [pc, #112]	; (800610c <HAL_DMA_Abort_IT+0x1d4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d009      	beq.n	80060b4 <HAL_DMA_Abort_IT+0x17c>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1a      	ldr	r2, [pc, #104]	; (8006110 <HAL_DMA_Abort_IT+0x1d8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d004      	beq.n	80060b4 <HAL_DMA_Abort_IT+0x17c>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a19      	ldr	r2, [pc, #100]	; (8006114 <HAL_DMA_Abort_IT+0x1dc>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d108      	bne.n	80060c6 <HAL_DMA_Abort_IT+0x18e>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 0201 	bic.w	r2, r2, #1
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	e178      	b.n	80063b8 <HAL_DMA_Abort_IT+0x480>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0201 	bic.w	r2, r2, #1
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	e16f      	b.n	80063b8 <HAL_DMA_Abort_IT+0x480>
 80060d8:	40020010 	.word	0x40020010
 80060dc:	40020028 	.word	0x40020028
 80060e0:	40020040 	.word	0x40020040
 80060e4:	40020058 	.word	0x40020058
 80060e8:	40020070 	.word	0x40020070
 80060ec:	40020088 	.word	0x40020088
 80060f0:	400200a0 	.word	0x400200a0
 80060f4:	400200b8 	.word	0x400200b8
 80060f8:	40020410 	.word	0x40020410
 80060fc:	40020428 	.word	0x40020428
 8006100:	40020440 	.word	0x40020440
 8006104:	40020458 	.word	0x40020458
 8006108:	40020470 	.word	0x40020470
 800610c:	40020488 	.word	0x40020488
 8006110:	400204a0 	.word	0x400204a0
 8006114:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 020e 	bic.w	r2, r2, #14
 8006126:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a6c      	ldr	r2, [pc, #432]	; (80062e0 <HAL_DMA_Abort_IT+0x3a8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d04a      	beq.n	80061c8 <HAL_DMA_Abort_IT+0x290>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a6b      	ldr	r2, [pc, #428]	; (80062e4 <HAL_DMA_Abort_IT+0x3ac>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d045      	beq.n	80061c8 <HAL_DMA_Abort_IT+0x290>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a69      	ldr	r2, [pc, #420]	; (80062e8 <HAL_DMA_Abort_IT+0x3b0>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d040      	beq.n	80061c8 <HAL_DMA_Abort_IT+0x290>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a68      	ldr	r2, [pc, #416]	; (80062ec <HAL_DMA_Abort_IT+0x3b4>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d03b      	beq.n	80061c8 <HAL_DMA_Abort_IT+0x290>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a66      	ldr	r2, [pc, #408]	; (80062f0 <HAL_DMA_Abort_IT+0x3b8>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d036      	beq.n	80061c8 <HAL_DMA_Abort_IT+0x290>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a65      	ldr	r2, [pc, #404]	; (80062f4 <HAL_DMA_Abort_IT+0x3bc>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d031      	beq.n	80061c8 <HAL_DMA_Abort_IT+0x290>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a63      	ldr	r2, [pc, #396]	; (80062f8 <HAL_DMA_Abort_IT+0x3c0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d02c      	beq.n	80061c8 <HAL_DMA_Abort_IT+0x290>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a62      	ldr	r2, [pc, #392]	; (80062fc <HAL_DMA_Abort_IT+0x3c4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d027      	beq.n	80061c8 <HAL_DMA_Abort_IT+0x290>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a60      	ldr	r2, [pc, #384]	; (8006300 <HAL_DMA_Abort_IT+0x3c8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d022      	beq.n	80061c8 <HAL_DMA_Abort_IT+0x290>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a5f      	ldr	r2, [pc, #380]	; (8006304 <HAL_DMA_Abort_IT+0x3cc>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d01d      	beq.n	80061c8 <HAL_DMA_Abort_IT+0x290>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a5d      	ldr	r2, [pc, #372]	; (8006308 <HAL_DMA_Abort_IT+0x3d0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d018      	beq.n	80061c8 <HAL_DMA_Abort_IT+0x290>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a5c      	ldr	r2, [pc, #368]	; (800630c <HAL_DMA_Abort_IT+0x3d4>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d013      	beq.n	80061c8 <HAL_DMA_Abort_IT+0x290>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a5a      	ldr	r2, [pc, #360]	; (8006310 <HAL_DMA_Abort_IT+0x3d8>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00e      	beq.n	80061c8 <HAL_DMA_Abort_IT+0x290>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a59      	ldr	r2, [pc, #356]	; (8006314 <HAL_DMA_Abort_IT+0x3dc>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d009      	beq.n	80061c8 <HAL_DMA_Abort_IT+0x290>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a57      	ldr	r2, [pc, #348]	; (8006318 <HAL_DMA_Abort_IT+0x3e0>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d004      	beq.n	80061c8 <HAL_DMA_Abort_IT+0x290>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a56      	ldr	r2, [pc, #344]	; (800631c <HAL_DMA_Abort_IT+0x3e4>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d108      	bne.n	80061da <HAL_DMA_Abort_IT+0x2a2>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0201 	bic.w	r2, r2, #1
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	e007      	b.n	80061ea <HAL_DMA_Abort_IT+0x2b2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0201 	bic.w	r2, r2, #1
 80061e8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a3c      	ldr	r2, [pc, #240]	; (80062e0 <HAL_DMA_Abort_IT+0x3a8>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d072      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a3a      	ldr	r2, [pc, #232]	; (80062e4 <HAL_DMA_Abort_IT+0x3ac>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d06d      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a39      	ldr	r2, [pc, #228]	; (80062e8 <HAL_DMA_Abort_IT+0x3b0>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d068      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a37      	ldr	r2, [pc, #220]	; (80062ec <HAL_DMA_Abort_IT+0x3b4>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d063      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a36      	ldr	r2, [pc, #216]	; (80062f0 <HAL_DMA_Abort_IT+0x3b8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d05e      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a34      	ldr	r2, [pc, #208]	; (80062f4 <HAL_DMA_Abort_IT+0x3bc>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d059      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a33      	ldr	r2, [pc, #204]	; (80062f8 <HAL_DMA_Abort_IT+0x3c0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d054      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a31      	ldr	r2, [pc, #196]	; (80062fc <HAL_DMA_Abort_IT+0x3c4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d04f      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a30      	ldr	r2, [pc, #192]	; (8006300 <HAL_DMA_Abort_IT+0x3c8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d04a      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a2e      	ldr	r2, [pc, #184]	; (8006304 <HAL_DMA_Abort_IT+0x3cc>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d045      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a2d      	ldr	r2, [pc, #180]	; (8006308 <HAL_DMA_Abort_IT+0x3d0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d040      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a2b      	ldr	r2, [pc, #172]	; (800630c <HAL_DMA_Abort_IT+0x3d4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d03b      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a2a      	ldr	r2, [pc, #168]	; (8006310 <HAL_DMA_Abort_IT+0x3d8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d036      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a28      	ldr	r2, [pc, #160]	; (8006314 <HAL_DMA_Abort_IT+0x3dc>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d031      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a27      	ldr	r2, [pc, #156]	; (8006318 <HAL_DMA_Abort_IT+0x3e0>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d02c      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a25      	ldr	r2, [pc, #148]	; (800631c <HAL_DMA_Abort_IT+0x3e4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d027      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a24      	ldr	r2, [pc, #144]	; (8006320 <HAL_DMA_Abort_IT+0x3e8>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d022      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a22      	ldr	r2, [pc, #136]	; (8006324 <HAL_DMA_Abort_IT+0x3ec>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d01d      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a21      	ldr	r2, [pc, #132]	; (8006328 <HAL_DMA_Abort_IT+0x3f0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d018      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a1f      	ldr	r2, [pc, #124]	; (800632c <HAL_DMA_Abort_IT+0x3f4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d013      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a1e      	ldr	r2, [pc, #120]	; (8006330 <HAL_DMA_Abort_IT+0x3f8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d00e      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a1c      	ldr	r2, [pc, #112]	; (8006334 <HAL_DMA_Abort_IT+0x3fc>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d009      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a1b      	ldr	r2, [pc, #108]	; (8006338 <HAL_DMA_Abort_IT+0x400>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d004      	beq.n	80062da <HAL_DMA_Abort_IT+0x3a2>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a19      	ldr	r2, [pc, #100]	; (800633c <HAL_DMA_Abort_IT+0x404>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d132      	bne.n	8006340 <HAL_DMA_Abort_IT+0x408>
 80062da:	2301      	movs	r3, #1
 80062dc:	e031      	b.n	8006342 <HAL_DMA_Abort_IT+0x40a>
 80062de:	bf00      	nop
 80062e0:	40020010 	.word	0x40020010
 80062e4:	40020028 	.word	0x40020028
 80062e8:	40020040 	.word	0x40020040
 80062ec:	40020058 	.word	0x40020058
 80062f0:	40020070 	.word	0x40020070
 80062f4:	40020088 	.word	0x40020088
 80062f8:	400200a0 	.word	0x400200a0
 80062fc:	400200b8 	.word	0x400200b8
 8006300:	40020410 	.word	0x40020410
 8006304:	40020428 	.word	0x40020428
 8006308:	40020440 	.word	0x40020440
 800630c:	40020458 	.word	0x40020458
 8006310:	40020470 	.word	0x40020470
 8006314:	40020488 	.word	0x40020488
 8006318:	400204a0 	.word	0x400204a0
 800631c:	400204b8 	.word	0x400204b8
 8006320:	58025408 	.word	0x58025408
 8006324:	5802541c 	.word	0x5802541c
 8006328:	58025430 	.word	0x58025430
 800632c:	58025444 	.word	0x58025444
 8006330:	58025458 	.word	0x58025458
 8006334:	5802546c 	.word	0x5802546c
 8006338:	58025480 	.word	0x58025480
 800633c:	58025494 	.word	0x58025494
 8006340:	2300      	movs	r3, #0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d028      	beq.n	8006398 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006350:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006354:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800635a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006360:	f003 031f 	and.w	r3, r3, #31
 8006364:	2201      	movs	r2, #1
 8006366:	409a      	lsls	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006374:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00c      	beq.n	8006398 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800638c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006396:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop

080063c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08a      	sub	sp, #40	; 0x28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063d0:	4b67      	ldr	r3, [pc, #412]	; (8006570 <HAL_DMA_IRQHandler+0x1ac>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a67      	ldr	r2, [pc, #412]	; (8006574 <HAL_DMA_IRQHandler+0x1b0>)
 80063d6:	fba2 2303 	umull	r2, r3, r2, r3
 80063da:	0a9b      	lsrs	r3, r3, #10
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a5f      	ldr	r2, [pc, #380]	; (8006578 <HAL_DMA_IRQHandler+0x1b4>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d04a      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a5d      	ldr	r2, [pc, #372]	; (800657c <HAL_DMA_IRQHandler+0x1b8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d045      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a5c      	ldr	r2, [pc, #368]	; (8006580 <HAL_DMA_IRQHandler+0x1bc>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d040      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a5a      	ldr	r2, [pc, #360]	; (8006584 <HAL_DMA_IRQHandler+0x1c0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d03b      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a59      	ldr	r2, [pc, #356]	; (8006588 <HAL_DMA_IRQHandler+0x1c4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d036      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a57      	ldr	r2, [pc, #348]	; (800658c <HAL_DMA_IRQHandler+0x1c8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d031      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a56      	ldr	r2, [pc, #344]	; (8006590 <HAL_DMA_IRQHandler+0x1cc>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d02c      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a54      	ldr	r2, [pc, #336]	; (8006594 <HAL_DMA_IRQHandler+0x1d0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d027      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a53      	ldr	r2, [pc, #332]	; (8006598 <HAL_DMA_IRQHandler+0x1d4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d022      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a51      	ldr	r2, [pc, #324]	; (800659c <HAL_DMA_IRQHandler+0x1d8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d01d      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a50      	ldr	r2, [pc, #320]	; (80065a0 <HAL_DMA_IRQHandler+0x1dc>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d018      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a4e      	ldr	r2, [pc, #312]	; (80065a4 <HAL_DMA_IRQHandler+0x1e0>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d013      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a4d      	ldr	r2, [pc, #308]	; (80065a8 <HAL_DMA_IRQHandler+0x1e4>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00e      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a4b      	ldr	r2, [pc, #300]	; (80065ac <HAL_DMA_IRQHandler+0x1e8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d009      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a4a      	ldr	r2, [pc, #296]	; (80065b0 <HAL_DMA_IRQHandler+0x1ec>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d004      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a48      	ldr	r2, [pc, #288]	; (80065b4 <HAL_DMA_IRQHandler+0x1f0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d101      	bne.n	800649a <HAL_DMA_IRQHandler+0xd6>
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <HAL_DMA_IRQHandler+0xd8>
 800649a:	2300      	movs	r3, #0
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 842b 	beq.w	8006cf8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a6:	f003 031f 	and.w	r3, r3, #31
 80064aa:	2208      	movs	r2, #8
 80064ac:	409a      	lsls	r2, r3
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	4013      	ands	r3, r2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 80a2 	beq.w	80065fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a2e      	ldr	r2, [pc, #184]	; (8006578 <HAL_DMA_IRQHandler+0x1b4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d04a      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a2d      	ldr	r2, [pc, #180]	; (800657c <HAL_DMA_IRQHandler+0x1b8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d045      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a2b      	ldr	r2, [pc, #172]	; (8006580 <HAL_DMA_IRQHandler+0x1bc>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d040      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a2a      	ldr	r2, [pc, #168]	; (8006584 <HAL_DMA_IRQHandler+0x1c0>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d03b      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a28      	ldr	r2, [pc, #160]	; (8006588 <HAL_DMA_IRQHandler+0x1c4>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d036      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a27      	ldr	r2, [pc, #156]	; (800658c <HAL_DMA_IRQHandler+0x1c8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d031      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a25      	ldr	r2, [pc, #148]	; (8006590 <HAL_DMA_IRQHandler+0x1cc>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d02c      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a24      	ldr	r2, [pc, #144]	; (8006594 <HAL_DMA_IRQHandler+0x1d0>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d027      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a22      	ldr	r2, [pc, #136]	; (8006598 <HAL_DMA_IRQHandler+0x1d4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d022      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a21      	ldr	r2, [pc, #132]	; (800659c <HAL_DMA_IRQHandler+0x1d8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d01d      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1f      	ldr	r2, [pc, #124]	; (80065a0 <HAL_DMA_IRQHandler+0x1dc>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d018      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1e      	ldr	r2, [pc, #120]	; (80065a4 <HAL_DMA_IRQHandler+0x1e0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d013      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a1c      	ldr	r2, [pc, #112]	; (80065a8 <HAL_DMA_IRQHandler+0x1e4>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d00e      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1b      	ldr	r2, [pc, #108]	; (80065ac <HAL_DMA_IRQHandler+0x1e8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d009      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a19      	ldr	r2, [pc, #100]	; (80065b0 <HAL_DMA_IRQHandler+0x1ec>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d004      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a18      	ldr	r2, [pc, #96]	; (80065b4 <HAL_DMA_IRQHandler+0x1f0>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d12f      	bne.n	80065b8 <HAL_DMA_IRQHandler+0x1f4>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0304 	and.w	r3, r3, #4
 8006562:	2b00      	cmp	r3, #0
 8006564:	bf14      	ite	ne
 8006566:	2301      	movne	r3, #1
 8006568:	2300      	moveq	r3, #0
 800656a:	b2db      	uxtb	r3, r3
 800656c:	e02e      	b.n	80065cc <HAL_DMA_IRQHandler+0x208>
 800656e:	bf00      	nop
 8006570:	24000028 	.word	0x24000028
 8006574:	1b4e81b5 	.word	0x1b4e81b5
 8006578:	40020010 	.word	0x40020010
 800657c:	40020028 	.word	0x40020028
 8006580:	40020040 	.word	0x40020040
 8006584:	40020058 	.word	0x40020058
 8006588:	40020070 	.word	0x40020070
 800658c:	40020088 	.word	0x40020088
 8006590:	400200a0 	.word	0x400200a0
 8006594:	400200b8 	.word	0x400200b8
 8006598:	40020410 	.word	0x40020410
 800659c:	40020428 	.word	0x40020428
 80065a0:	40020440 	.word	0x40020440
 80065a4:	40020458 	.word	0x40020458
 80065a8:	40020470 	.word	0x40020470
 80065ac:	40020488 	.word	0x40020488
 80065b0:	400204a0 	.word	0x400204a0
 80065b4:	400204b8 	.word	0x400204b8
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	bf14      	ite	ne
 80065c6:	2301      	movne	r3, #1
 80065c8:	2300      	moveq	r3, #0
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d015      	beq.n	80065fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0204 	bic.w	r2, r2, #4
 80065de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e4:	f003 031f 	and.w	r3, r3, #31
 80065e8:	2208      	movs	r2, #8
 80065ea:	409a      	lsls	r2, r3
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f4:	f043 0201 	orr.w	r2, r3, #1
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006600:	f003 031f 	and.w	r3, r3, #31
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	fa22 f303 	lsr.w	r3, r2, r3
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d06e      	beq.n	80066f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a69      	ldr	r2, [pc, #420]	; (80067bc <HAL_DMA_IRQHandler+0x3f8>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d04a      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a67      	ldr	r2, [pc, #412]	; (80067c0 <HAL_DMA_IRQHandler+0x3fc>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d045      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a66      	ldr	r2, [pc, #408]	; (80067c4 <HAL_DMA_IRQHandler+0x400>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d040      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a64      	ldr	r2, [pc, #400]	; (80067c8 <HAL_DMA_IRQHandler+0x404>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d03b      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a63      	ldr	r2, [pc, #396]	; (80067cc <HAL_DMA_IRQHandler+0x408>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d036      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a61      	ldr	r2, [pc, #388]	; (80067d0 <HAL_DMA_IRQHandler+0x40c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d031      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a60      	ldr	r2, [pc, #384]	; (80067d4 <HAL_DMA_IRQHandler+0x410>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d02c      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a5e      	ldr	r2, [pc, #376]	; (80067d8 <HAL_DMA_IRQHandler+0x414>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d027      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a5d      	ldr	r2, [pc, #372]	; (80067dc <HAL_DMA_IRQHandler+0x418>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d022      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a5b      	ldr	r2, [pc, #364]	; (80067e0 <HAL_DMA_IRQHandler+0x41c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d01d      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a5a      	ldr	r2, [pc, #360]	; (80067e4 <HAL_DMA_IRQHandler+0x420>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d018      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a58      	ldr	r2, [pc, #352]	; (80067e8 <HAL_DMA_IRQHandler+0x424>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d013      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a57      	ldr	r2, [pc, #348]	; (80067ec <HAL_DMA_IRQHandler+0x428>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00e      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a55      	ldr	r2, [pc, #340]	; (80067f0 <HAL_DMA_IRQHandler+0x42c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d009      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a54      	ldr	r2, [pc, #336]	; (80067f4 <HAL_DMA_IRQHandler+0x430>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d004      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a52      	ldr	r2, [pc, #328]	; (80067f8 <HAL_DMA_IRQHandler+0x434>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d10a      	bne.n	80066c8 <HAL_DMA_IRQHandler+0x304>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066bc:	2b00      	cmp	r3, #0
 80066be:	bf14      	ite	ne
 80066c0:	2301      	movne	r3, #1
 80066c2:	2300      	moveq	r3, #0
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	e003      	b.n	80066d0 <HAL_DMA_IRQHandler+0x30c>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2300      	movs	r3, #0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00d      	beq.n	80066f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d8:	f003 031f 	and.w	r3, r3, #31
 80066dc:	2201      	movs	r2, #1
 80066de:	409a      	lsls	r2, r3
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e8:	f043 0202 	orr.w	r2, r3, #2
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f4:	f003 031f 	and.w	r3, r3, #31
 80066f8:	2204      	movs	r2, #4
 80066fa:	409a      	lsls	r2, r3
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	4013      	ands	r3, r2
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 808f 	beq.w	8006824 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a2c      	ldr	r2, [pc, #176]	; (80067bc <HAL_DMA_IRQHandler+0x3f8>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d04a      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a2a      	ldr	r2, [pc, #168]	; (80067c0 <HAL_DMA_IRQHandler+0x3fc>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d045      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a29      	ldr	r2, [pc, #164]	; (80067c4 <HAL_DMA_IRQHandler+0x400>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d040      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a27      	ldr	r2, [pc, #156]	; (80067c8 <HAL_DMA_IRQHandler+0x404>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d03b      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a26      	ldr	r2, [pc, #152]	; (80067cc <HAL_DMA_IRQHandler+0x408>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d036      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a24      	ldr	r2, [pc, #144]	; (80067d0 <HAL_DMA_IRQHandler+0x40c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d031      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a23      	ldr	r2, [pc, #140]	; (80067d4 <HAL_DMA_IRQHandler+0x410>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d02c      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a21      	ldr	r2, [pc, #132]	; (80067d8 <HAL_DMA_IRQHandler+0x414>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d027      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a20      	ldr	r2, [pc, #128]	; (80067dc <HAL_DMA_IRQHandler+0x418>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d022      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a1e      	ldr	r2, [pc, #120]	; (80067e0 <HAL_DMA_IRQHandler+0x41c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d01d      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a1d      	ldr	r2, [pc, #116]	; (80067e4 <HAL_DMA_IRQHandler+0x420>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d018      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a1b      	ldr	r2, [pc, #108]	; (80067e8 <HAL_DMA_IRQHandler+0x424>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d013      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a1a      	ldr	r2, [pc, #104]	; (80067ec <HAL_DMA_IRQHandler+0x428>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d00e      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a18      	ldr	r2, [pc, #96]	; (80067f0 <HAL_DMA_IRQHandler+0x42c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d009      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a17      	ldr	r2, [pc, #92]	; (80067f4 <HAL_DMA_IRQHandler+0x430>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d004      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a15      	ldr	r2, [pc, #84]	; (80067f8 <HAL_DMA_IRQHandler+0x434>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d12a      	bne.n	80067fc <HAL_DMA_IRQHandler+0x438>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0302 	and.w	r3, r3, #2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	bf14      	ite	ne
 80067b4:	2301      	movne	r3, #1
 80067b6:	2300      	moveq	r3, #0
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	e023      	b.n	8006804 <HAL_DMA_IRQHandler+0x440>
 80067bc:	40020010 	.word	0x40020010
 80067c0:	40020028 	.word	0x40020028
 80067c4:	40020040 	.word	0x40020040
 80067c8:	40020058 	.word	0x40020058
 80067cc:	40020070 	.word	0x40020070
 80067d0:	40020088 	.word	0x40020088
 80067d4:	400200a0 	.word	0x400200a0
 80067d8:	400200b8 	.word	0x400200b8
 80067dc:	40020410 	.word	0x40020410
 80067e0:	40020428 	.word	0x40020428
 80067e4:	40020440 	.word	0x40020440
 80067e8:	40020458 	.word	0x40020458
 80067ec:	40020470 	.word	0x40020470
 80067f0:	40020488 	.word	0x40020488
 80067f4:	400204a0 	.word	0x400204a0
 80067f8:	400204b8 	.word	0x400204b8
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2300      	movs	r3, #0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00d      	beq.n	8006824 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800680c:	f003 031f 	and.w	r3, r3, #31
 8006810:	2204      	movs	r2, #4
 8006812:	409a      	lsls	r2, r3
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681c:	f043 0204 	orr.w	r2, r3, #4
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006828:	f003 031f 	and.w	r3, r3, #31
 800682c:	2210      	movs	r2, #16
 800682e:	409a      	lsls	r2, r3
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	4013      	ands	r3, r2
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 80a6 	beq.w	8006986 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a85      	ldr	r2, [pc, #532]	; (8006a54 <HAL_DMA_IRQHandler+0x690>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d04a      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a83      	ldr	r2, [pc, #524]	; (8006a58 <HAL_DMA_IRQHandler+0x694>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d045      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a82      	ldr	r2, [pc, #520]	; (8006a5c <HAL_DMA_IRQHandler+0x698>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d040      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a80      	ldr	r2, [pc, #512]	; (8006a60 <HAL_DMA_IRQHandler+0x69c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d03b      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a7f      	ldr	r2, [pc, #508]	; (8006a64 <HAL_DMA_IRQHandler+0x6a0>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d036      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a7d      	ldr	r2, [pc, #500]	; (8006a68 <HAL_DMA_IRQHandler+0x6a4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d031      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a7c      	ldr	r2, [pc, #496]	; (8006a6c <HAL_DMA_IRQHandler+0x6a8>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d02c      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a7a      	ldr	r2, [pc, #488]	; (8006a70 <HAL_DMA_IRQHandler+0x6ac>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d027      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a79      	ldr	r2, [pc, #484]	; (8006a74 <HAL_DMA_IRQHandler+0x6b0>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d022      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a77      	ldr	r2, [pc, #476]	; (8006a78 <HAL_DMA_IRQHandler+0x6b4>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d01d      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a76      	ldr	r2, [pc, #472]	; (8006a7c <HAL_DMA_IRQHandler+0x6b8>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d018      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a74      	ldr	r2, [pc, #464]	; (8006a80 <HAL_DMA_IRQHandler+0x6bc>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d013      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a73      	ldr	r2, [pc, #460]	; (8006a84 <HAL_DMA_IRQHandler+0x6c0>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00e      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a71      	ldr	r2, [pc, #452]	; (8006a88 <HAL_DMA_IRQHandler+0x6c4>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d009      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a70      	ldr	r2, [pc, #448]	; (8006a8c <HAL_DMA_IRQHandler+0x6c8>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d004      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a6e      	ldr	r2, [pc, #440]	; (8006a90 <HAL_DMA_IRQHandler+0x6cc>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d10a      	bne.n	80068f0 <HAL_DMA_IRQHandler+0x52c>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0308 	and.w	r3, r3, #8
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	bf14      	ite	ne
 80068e8:	2301      	movne	r3, #1
 80068ea:	2300      	moveq	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	e009      	b.n	8006904 <HAL_DMA_IRQHandler+0x540>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0304 	and.w	r3, r3, #4
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	bf14      	ite	ne
 80068fe:	2301      	movne	r3, #1
 8006900:	2300      	moveq	r3, #0
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d03e      	beq.n	8006986 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800690c:	f003 031f 	and.w	r3, r3, #31
 8006910:	2210      	movs	r2, #16
 8006912:	409a      	lsls	r2, r3
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d018      	beq.n	8006958 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d108      	bne.n	8006946 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006938:	2b00      	cmp	r3, #0
 800693a:	d024      	beq.n	8006986 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	4798      	blx	r3
 8006944:	e01f      	b.n	8006986 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800694a:	2b00      	cmp	r3, #0
 800694c:	d01b      	beq.n	8006986 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	4798      	blx	r3
 8006956:	e016      	b.n	8006986 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006962:	2b00      	cmp	r3, #0
 8006964:	d107      	bne.n	8006976 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0208 	bic.w	r2, r2, #8
 8006974:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800698a:	f003 031f 	and.w	r3, r3, #31
 800698e:	2220      	movs	r2, #32
 8006990:	409a      	lsls	r2, r3
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	4013      	ands	r3, r2
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 8110 	beq.w	8006bbc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a2c      	ldr	r2, [pc, #176]	; (8006a54 <HAL_DMA_IRQHandler+0x690>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d04a      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a2b      	ldr	r2, [pc, #172]	; (8006a58 <HAL_DMA_IRQHandler+0x694>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d045      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a29      	ldr	r2, [pc, #164]	; (8006a5c <HAL_DMA_IRQHandler+0x698>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d040      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a28      	ldr	r2, [pc, #160]	; (8006a60 <HAL_DMA_IRQHandler+0x69c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d03b      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a26      	ldr	r2, [pc, #152]	; (8006a64 <HAL_DMA_IRQHandler+0x6a0>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d036      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a25      	ldr	r2, [pc, #148]	; (8006a68 <HAL_DMA_IRQHandler+0x6a4>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d031      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a23      	ldr	r2, [pc, #140]	; (8006a6c <HAL_DMA_IRQHandler+0x6a8>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d02c      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a22      	ldr	r2, [pc, #136]	; (8006a70 <HAL_DMA_IRQHandler+0x6ac>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d027      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a20      	ldr	r2, [pc, #128]	; (8006a74 <HAL_DMA_IRQHandler+0x6b0>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d022      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a1f      	ldr	r2, [pc, #124]	; (8006a78 <HAL_DMA_IRQHandler+0x6b4>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d01d      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a1d      	ldr	r2, [pc, #116]	; (8006a7c <HAL_DMA_IRQHandler+0x6b8>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d018      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a1c      	ldr	r2, [pc, #112]	; (8006a80 <HAL_DMA_IRQHandler+0x6bc>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d013      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a1a      	ldr	r2, [pc, #104]	; (8006a84 <HAL_DMA_IRQHandler+0x6c0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d00e      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a19      	ldr	r2, [pc, #100]	; (8006a88 <HAL_DMA_IRQHandler+0x6c4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d009      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a17      	ldr	r2, [pc, #92]	; (8006a8c <HAL_DMA_IRQHandler+0x6c8>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d004      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a16      	ldr	r2, [pc, #88]	; (8006a90 <HAL_DMA_IRQHandler+0x6cc>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d12b      	bne.n	8006a94 <HAL_DMA_IRQHandler+0x6d0>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0310 	and.w	r3, r3, #16
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	bf14      	ite	ne
 8006a4a:	2301      	movne	r3, #1
 8006a4c:	2300      	moveq	r3, #0
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	e02a      	b.n	8006aa8 <HAL_DMA_IRQHandler+0x6e4>
 8006a52:	bf00      	nop
 8006a54:	40020010 	.word	0x40020010
 8006a58:	40020028 	.word	0x40020028
 8006a5c:	40020040 	.word	0x40020040
 8006a60:	40020058 	.word	0x40020058
 8006a64:	40020070 	.word	0x40020070
 8006a68:	40020088 	.word	0x40020088
 8006a6c:	400200a0 	.word	0x400200a0
 8006a70:	400200b8 	.word	0x400200b8
 8006a74:	40020410 	.word	0x40020410
 8006a78:	40020428 	.word	0x40020428
 8006a7c:	40020440 	.word	0x40020440
 8006a80:	40020458 	.word	0x40020458
 8006a84:	40020470 	.word	0x40020470
 8006a88:	40020488 	.word	0x40020488
 8006a8c:	400204a0 	.word	0x400204a0
 8006a90:	400204b8 	.word	0x400204b8
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	bf14      	ite	ne
 8006aa2:	2301      	movne	r3, #1
 8006aa4:	2300      	moveq	r3, #0
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 8087 	beq.w	8006bbc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab2:	f003 031f 	and.w	r3, r3, #31
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	409a      	lsls	r2, r3
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	d139      	bne.n	8006b3e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0216 	bic.w	r2, r2, #22
 8006ad8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	695a      	ldr	r2, [r3, #20]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ae8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d103      	bne.n	8006afa <HAL_DMA_IRQHandler+0x736>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d007      	beq.n	8006b0a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0208 	bic.w	r2, r2, #8
 8006b08:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b0e:	f003 031f 	and.w	r3, r3, #31
 8006b12:	223f      	movs	r2, #63	; 0x3f
 8006b14:	409a      	lsls	r2, r3
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 834a 	beq.w	80071c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	4798      	blx	r3
          }
          return;
 8006b3c:	e344      	b.n	80071c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d018      	beq.n	8006b7e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d108      	bne.n	8006b6c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d02c      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	4798      	blx	r3
 8006b6a:	e027      	b.n	8006bbc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d023      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	4798      	blx	r3
 8006b7c:	e01e      	b.n	8006bbc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10f      	bne.n	8006bac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0210 	bic.w	r2, r2, #16
 8006b9a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 8306 	beq.w	80071d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 8088 	beq.w	8006ce4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2204      	movs	r2, #4
 8006bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a7a      	ldr	r2, [pc, #488]	; (8006dcc <HAL_DMA_IRQHandler+0xa08>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d04a      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a79      	ldr	r2, [pc, #484]	; (8006dd0 <HAL_DMA_IRQHandler+0xa0c>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d045      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a77      	ldr	r2, [pc, #476]	; (8006dd4 <HAL_DMA_IRQHandler+0xa10>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d040      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a76      	ldr	r2, [pc, #472]	; (8006dd8 <HAL_DMA_IRQHandler+0xa14>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d03b      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a74      	ldr	r2, [pc, #464]	; (8006ddc <HAL_DMA_IRQHandler+0xa18>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d036      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a73      	ldr	r2, [pc, #460]	; (8006de0 <HAL_DMA_IRQHandler+0xa1c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d031      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a71      	ldr	r2, [pc, #452]	; (8006de4 <HAL_DMA_IRQHandler+0xa20>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d02c      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a70      	ldr	r2, [pc, #448]	; (8006de8 <HAL_DMA_IRQHandler+0xa24>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d027      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a6e      	ldr	r2, [pc, #440]	; (8006dec <HAL_DMA_IRQHandler+0xa28>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d022      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a6d      	ldr	r2, [pc, #436]	; (8006df0 <HAL_DMA_IRQHandler+0xa2c>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d01d      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a6b      	ldr	r2, [pc, #428]	; (8006df4 <HAL_DMA_IRQHandler+0xa30>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d018      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a6a      	ldr	r2, [pc, #424]	; (8006df8 <HAL_DMA_IRQHandler+0xa34>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d013      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a68      	ldr	r2, [pc, #416]	; (8006dfc <HAL_DMA_IRQHandler+0xa38>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00e      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a67      	ldr	r2, [pc, #412]	; (8006e00 <HAL_DMA_IRQHandler+0xa3c>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d009      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a65      	ldr	r2, [pc, #404]	; (8006e04 <HAL_DMA_IRQHandler+0xa40>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d004      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a64      	ldr	r2, [pc, #400]	; (8006e08 <HAL_DMA_IRQHandler+0xa44>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d108      	bne.n	8006c8e <HAL_DMA_IRQHandler+0x8ca>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 0201 	bic.w	r2, r2, #1
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	e007      	b.n	8006c9e <HAL_DMA_IRQHandler+0x8da>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0201 	bic.w	r2, r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d307      	bcc.n	8006cba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1f2      	bne.n	8006c9e <HAL_DMA_IRQHandler+0x8da>
 8006cb8:	e000      	b.n	8006cbc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006cba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d004      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2203      	movs	r2, #3
 8006cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006cd2:	e003      	b.n	8006cdc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 8272 	beq.w	80071d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	4798      	blx	r3
 8006cf6:	e26c      	b.n	80071d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a43      	ldr	r2, [pc, #268]	; (8006e0c <HAL_DMA_IRQHandler+0xa48>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d022      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x984>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a42      	ldr	r2, [pc, #264]	; (8006e10 <HAL_DMA_IRQHandler+0xa4c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d01d      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x984>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a40      	ldr	r2, [pc, #256]	; (8006e14 <HAL_DMA_IRQHandler+0xa50>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d018      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x984>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a3f      	ldr	r2, [pc, #252]	; (8006e18 <HAL_DMA_IRQHandler+0xa54>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d013      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x984>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a3d      	ldr	r2, [pc, #244]	; (8006e1c <HAL_DMA_IRQHandler+0xa58>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d00e      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x984>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a3c      	ldr	r2, [pc, #240]	; (8006e20 <HAL_DMA_IRQHandler+0xa5c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d009      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x984>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a3a      	ldr	r2, [pc, #232]	; (8006e24 <HAL_DMA_IRQHandler+0xa60>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d004      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x984>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a39      	ldr	r2, [pc, #228]	; (8006e28 <HAL_DMA_IRQHandler+0xa64>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d101      	bne.n	8006d4c <HAL_DMA_IRQHandler+0x988>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e000      	b.n	8006d4e <HAL_DMA_IRQHandler+0x98a>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 823f 	beq.w	80071d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d60:	f003 031f 	and.w	r3, r3, #31
 8006d64:	2204      	movs	r2, #4
 8006d66:	409a      	lsls	r2, r3
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 80cd 	beq.w	8006f0c <HAL_DMA_IRQHandler+0xb48>
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 80c7 	beq.w	8006f0c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d82:	f003 031f 	and.w	r3, r3, #31
 8006d86:	2204      	movs	r2, #4
 8006d88:	409a      	lsls	r2, r3
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d049      	beq.n	8006e2c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d109      	bne.n	8006db6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f000 8210 	beq.w	80071cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006db4:	e20a      	b.n	80071cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 8206 	beq.w	80071cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dc8:	e200      	b.n	80071cc <HAL_DMA_IRQHandler+0xe08>
 8006dca:	bf00      	nop
 8006dcc:	40020010 	.word	0x40020010
 8006dd0:	40020028 	.word	0x40020028
 8006dd4:	40020040 	.word	0x40020040
 8006dd8:	40020058 	.word	0x40020058
 8006ddc:	40020070 	.word	0x40020070
 8006de0:	40020088 	.word	0x40020088
 8006de4:	400200a0 	.word	0x400200a0
 8006de8:	400200b8 	.word	0x400200b8
 8006dec:	40020410 	.word	0x40020410
 8006df0:	40020428 	.word	0x40020428
 8006df4:	40020440 	.word	0x40020440
 8006df8:	40020458 	.word	0x40020458
 8006dfc:	40020470 	.word	0x40020470
 8006e00:	40020488 	.word	0x40020488
 8006e04:	400204a0 	.word	0x400204a0
 8006e08:	400204b8 	.word	0x400204b8
 8006e0c:	58025408 	.word	0x58025408
 8006e10:	5802541c 	.word	0x5802541c
 8006e14:	58025430 	.word	0x58025430
 8006e18:	58025444 	.word	0x58025444
 8006e1c:	58025458 	.word	0x58025458
 8006e20:	5802546c 	.word	0x5802546c
 8006e24:	58025480 	.word	0x58025480
 8006e28:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d160      	bne.n	8006ef8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a7f      	ldr	r2, [pc, #508]	; (8007038 <HAL_DMA_IRQHandler+0xc74>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d04a      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a7d      	ldr	r2, [pc, #500]	; (800703c <HAL_DMA_IRQHandler+0xc78>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d045      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a7c      	ldr	r2, [pc, #496]	; (8007040 <HAL_DMA_IRQHandler+0xc7c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d040      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a7a      	ldr	r2, [pc, #488]	; (8007044 <HAL_DMA_IRQHandler+0xc80>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d03b      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a79      	ldr	r2, [pc, #484]	; (8007048 <HAL_DMA_IRQHandler+0xc84>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d036      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a77      	ldr	r2, [pc, #476]	; (800704c <HAL_DMA_IRQHandler+0xc88>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d031      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a76      	ldr	r2, [pc, #472]	; (8007050 <HAL_DMA_IRQHandler+0xc8c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d02c      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a74      	ldr	r2, [pc, #464]	; (8007054 <HAL_DMA_IRQHandler+0xc90>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d027      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a73      	ldr	r2, [pc, #460]	; (8007058 <HAL_DMA_IRQHandler+0xc94>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d022      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a71      	ldr	r2, [pc, #452]	; (800705c <HAL_DMA_IRQHandler+0xc98>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d01d      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a70      	ldr	r2, [pc, #448]	; (8007060 <HAL_DMA_IRQHandler+0xc9c>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d018      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a6e      	ldr	r2, [pc, #440]	; (8007064 <HAL_DMA_IRQHandler+0xca0>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d013      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a6d      	ldr	r2, [pc, #436]	; (8007068 <HAL_DMA_IRQHandler+0xca4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00e      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a6b      	ldr	r2, [pc, #428]	; (800706c <HAL_DMA_IRQHandler+0xca8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d009      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a6a      	ldr	r2, [pc, #424]	; (8007070 <HAL_DMA_IRQHandler+0xcac>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d004      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a68      	ldr	r2, [pc, #416]	; (8007074 <HAL_DMA_IRQHandler+0xcb0>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d108      	bne.n	8006ee8 <HAL_DMA_IRQHandler+0xb24>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0208 	bic.w	r2, r2, #8
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	e007      	b.n	8006ef8 <HAL_DMA_IRQHandler+0xb34>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f022 0204 	bic.w	r2, r2, #4
 8006ef6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 8165 	beq.w	80071cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f0a:	e15f      	b.n	80071cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f10:	f003 031f 	and.w	r3, r3, #31
 8006f14:	2202      	movs	r2, #2
 8006f16:	409a      	lsls	r2, r3
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 80c5 	beq.w	80070ac <HAL_DMA_IRQHandler+0xce8>
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 80bf 	beq.w	80070ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f32:	f003 031f 	and.w	r3, r3, #31
 8006f36:	2202      	movs	r2, #2
 8006f38:	409a      	lsls	r2, r3
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d018      	beq.n	8006f7a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d109      	bne.n	8006f66 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 813a 	beq.w	80071d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f64:	e134      	b.n	80071d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 8130 	beq.w	80071d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f78:	e12a      	b.n	80071d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f003 0320 	and.w	r3, r3, #32
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f040 8089 	bne.w	8007098 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a2b      	ldr	r2, [pc, #172]	; (8007038 <HAL_DMA_IRQHandler+0xc74>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d04a      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a29      	ldr	r2, [pc, #164]	; (800703c <HAL_DMA_IRQHandler+0xc78>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d045      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a28      	ldr	r2, [pc, #160]	; (8007040 <HAL_DMA_IRQHandler+0xc7c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d040      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a26      	ldr	r2, [pc, #152]	; (8007044 <HAL_DMA_IRQHandler+0xc80>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d03b      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a25      	ldr	r2, [pc, #148]	; (8007048 <HAL_DMA_IRQHandler+0xc84>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d036      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a23      	ldr	r2, [pc, #140]	; (800704c <HAL_DMA_IRQHandler+0xc88>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d031      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a22      	ldr	r2, [pc, #136]	; (8007050 <HAL_DMA_IRQHandler+0xc8c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d02c      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a20      	ldr	r2, [pc, #128]	; (8007054 <HAL_DMA_IRQHandler+0xc90>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d027      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1f      	ldr	r2, [pc, #124]	; (8007058 <HAL_DMA_IRQHandler+0xc94>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d022      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a1d      	ldr	r2, [pc, #116]	; (800705c <HAL_DMA_IRQHandler+0xc98>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d01d      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1c      	ldr	r2, [pc, #112]	; (8007060 <HAL_DMA_IRQHandler+0xc9c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d018      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a1a      	ldr	r2, [pc, #104]	; (8007064 <HAL_DMA_IRQHandler+0xca0>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d013      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a19      	ldr	r2, [pc, #100]	; (8007068 <HAL_DMA_IRQHandler+0xca4>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d00e      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a17      	ldr	r2, [pc, #92]	; (800706c <HAL_DMA_IRQHandler+0xca8>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d009      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a16      	ldr	r2, [pc, #88]	; (8007070 <HAL_DMA_IRQHandler+0xcac>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d004      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a14      	ldr	r2, [pc, #80]	; (8007074 <HAL_DMA_IRQHandler+0xcb0>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d128      	bne.n	8007078 <HAL_DMA_IRQHandler+0xcb4>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0214 	bic.w	r2, r2, #20
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	e027      	b.n	8007088 <HAL_DMA_IRQHandler+0xcc4>
 8007038:	40020010 	.word	0x40020010
 800703c:	40020028 	.word	0x40020028
 8007040:	40020040 	.word	0x40020040
 8007044:	40020058 	.word	0x40020058
 8007048:	40020070 	.word	0x40020070
 800704c:	40020088 	.word	0x40020088
 8007050:	400200a0 	.word	0x400200a0
 8007054:	400200b8 	.word	0x400200b8
 8007058:	40020410 	.word	0x40020410
 800705c:	40020428 	.word	0x40020428
 8007060:	40020440 	.word	0x40020440
 8007064:	40020458 	.word	0x40020458
 8007068:	40020470 	.word	0x40020470
 800706c:	40020488 	.word	0x40020488
 8007070:	400204a0 	.word	0x400204a0
 8007074:	400204b8 	.word	0x400204b8
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 020a 	bic.w	r2, r2, #10
 8007086:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 8097 	beq.w	80071d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070aa:	e091      	b.n	80071d0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b0:	f003 031f 	and.w	r3, r3, #31
 80070b4:	2208      	movs	r2, #8
 80070b6:	409a      	lsls	r2, r3
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	4013      	ands	r3, r2
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 8088 	beq.w	80071d2 <HAL_DMA_IRQHandler+0xe0e>
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f003 0308 	and.w	r3, r3, #8
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 8082 	beq.w	80071d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a41      	ldr	r2, [pc, #260]	; (80071d8 <HAL_DMA_IRQHandler+0xe14>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d04a      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a3f      	ldr	r2, [pc, #252]	; (80071dc <HAL_DMA_IRQHandler+0xe18>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d045      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a3e      	ldr	r2, [pc, #248]	; (80071e0 <HAL_DMA_IRQHandler+0xe1c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d040      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a3c      	ldr	r2, [pc, #240]	; (80071e4 <HAL_DMA_IRQHandler+0xe20>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d03b      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a3b      	ldr	r2, [pc, #236]	; (80071e8 <HAL_DMA_IRQHandler+0xe24>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d036      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a39      	ldr	r2, [pc, #228]	; (80071ec <HAL_DMA_IRQHandler+0xe28>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d031      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a38      	ldr	r2, [pc, #224]	; (80071f0 <HAL_DMA_IRQHandler+0xe2c>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d02c      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a36      	ldr	r2, [pc, #216]	; (80071f4 <HAL_DMA_IRQHandler+0xe30>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d027      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a35      	ldr	r2, [pc, #212]	; (80071f8 <HAL_DMA_IRQHandler+0xe34>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d022      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a33      	ldr	r2, [pc, #204]	; (80071fc <HAL_DMA_IRQHandler+0xe38>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d01d      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a32      	ldr	r2, [pc, #200]	; (8007200 <HAL_DMA_IRQHandler+0xe3c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d018      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a30      	ldr	r2, [pc, #192]	; (8007204 <HAL_DMA_IRQHandler+0xe40>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d013      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a2f      	ldr	r2, [pc, #188]	; (8007208 <HAL_DMA_IRQHandler+0xe44>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d00e      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a2d      	ldr	r2, [pc, #180]	; (800720c <HAL_DMA_IRQHandler+0xe48>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d009      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a2c      	ldr	r2, [pc, #176]	; (8007210 <HAL_DMA_IRQHandler+0xe4c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d004      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a2a      	ldr	r2, [pc, #168]	; (8007214 <HAL_DMA_IRQHandler+0xe50>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d108      	bne.n	8007180 <HAL_DMA_IRQHandler+0xdbc>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 021c 	bic.w	r2, r2, #28
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	e007      	b.n	8007190 <HAL_DMA_IRQHandler+0xdcc>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 020e 	bic.w	r2, r2, #14
 800718e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007194:	f003 031f 	and.w	r3, r3, #31
 8007198:	2201      	movs	r2, #1
 800719a:	409a      	lsls	r2, r3
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d009      	beq.n	80071d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	4798      	blx	r3
 80071c6:	e004      	b.n	80071d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80071c8:	bf00      	nop
 80071ca:	e002      	b.n	80071d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071cc:	bf00      	nop
 80071ce:	e000      	b.n	80071d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80071d2:	3728      	adds	r7, #40	; 0x28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	40020010 	.word	0x40020010
 80071dc:	40020028 	.word	0x40020028
 80071e0:	40020040 	.word	0x40020040
 80071e4:	40020058 	.word	0x40020058
 80071e8:	40020070 	.word	0x40020070
 80071ec:	40020088 	.word	0x40020088
 80071f0:	400200a0 	.word	0x400200a0
 80071f4:	400200b8 	.word	0x400200b8
 80071f8:	40020410 	.word	0x40020410
 80071fc:	40020428 	.word	0x40020428
 8007200:	40020440 	.word	0x40020440
 8007204:	40020458 	.word	0x40020458
 8007208:	40020470 	.word	0x40020470
 800720c:	40020488 	.word	0x40020488
 8007210:	400204a0 	.word	0x400204a0
 8007214:	400204b8 	.word	0x400204b8

08007218 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
 8007224:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007230:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a7f      	ldr	r2, [pc, #508]	; (8007434 <DMA_SetConfig+0x21c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d072      	beq.n	8007322 <DMA_SetConfig+0x10a>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a7d      	ldr	r2, [pc, #500]	; (8007438 <DMA_SetConfig+0x220>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d06d      	beq.n	8007322 <DMA_SetConfig+0x10a>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a7c      	ldr	r2, [pc, #496]	; (800743c <DMA_SetConfig+0x224>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d068      	beq.n	8007322 <DMA_SetConfig+0x10a>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a7a      	ldr	r2, [pc, #488]	; (8007440 <DMA_SetConfig+0x228>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d063      	beq.n	8007322 <DMA_SetConfig+0x10a>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a79      	ldr	r2, [pc, #484]	; (8007444 <DMA_SetConfig+0x22c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d05e      	beq.n	8007322 <DMA_SetConfig+0x10a>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a77      	ldr	r2, [pc, #476]	; (8007448 <DMA_SetConfig+0x230>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d059      	beq.n	8007322 <DMA_SetConfig+0x10a>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a76      	ldr	r2, [pc, #472]	; (800744c <DMA_SetConfig+0x234>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d054      	beq.n	8007322 <DMA_SetConfig+0x10a>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a74      	ldr	r2, [pc, #464]	; (8007450 <DMA_SetConfig+0x238>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d04f      	beq.n	8007322 <DMA_SetConfig+0x10a>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a73      	ldr	r2, [pc, #460]	; (8007454 <DMA_SetConfig+0x23c>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d04a      	beq.n	8007322 <DMA_SetConfig+0x10a>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a71      	ldr	r2, [pc, #452]	; (8007458 <DMA_SetConfig+0x240>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d045      	beq.n	8007322 <DMA_SetConfig+0x10a>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a70      	ldr	r2, [pc, #448]	; (800745c <DMA_SetConfig+0x244>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d040      	beq.n	8007322 <DMA_SetConfig+0x10a>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a6e      	ldr	r2, [pc, #440]	; (8007460 <DMA_SetConfig+0x248>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d03b      	beq.n	8007322 <DMA_SetConfig+0x10a>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a6d      	ldr	r2, [pc, #436]	; (8007464 <DMA_SetConfig+0x24c>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d036      	beq.n	8007322 <DMA_SetConfig+0x10a>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a6b      	ldr	r2, [pc, #428]	; (8007468 <DMA_SetConfig+0x250>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d031      	beq.n	8007322 <DMA_SetConfig+0x10a>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a6a      	ldr	r2, [pc, #424]	; (800746c <DMA_SetConfig+0x254>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d02c      	beq.n	8007322 <DMA_SetConfig+0x10a>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a68      	ldr	r2, [pc, #416]	; (8007470 <DMA_SetConfig+0x258>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d027      	beq.n	8007322 <DMA_SetConfig+0x10a>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a67      	ldr	r2, [pc, #412]	; (8007474 <DMA_SetConfig+0x25c>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d022      	beq.n	8007322 <DMA_SetConfig+0x10a>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a65      	ldr	r2, [pc, #404]	; (8007478 <DMA_SetConfig+0x260>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d01d      	beq.n	8007322 <DMA_SetConfig+0x10a>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a64      	ldr	r2, [pc, #400]	; (800747c <DMA_SetConfig+0x264>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d018      	beq.n	8007322 <DMA_SetConfig+0x10a>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a62      	ldr	r2, [pc, #392]	; (8007480 <DMA_SetConfig+0x268>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d013      	beq.n	8007322 <DMA_SetConfig+0x10a>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a61      	ldr	r2, [pc, #388]	; (8007484 <DMA_SetConfig+0x26c>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d00e      	beq.n	8007322 <DMA_SetConfig+0x10a>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a5f      	ldr	r2, [pc, #380]	; (8007488 <DMA_SetConfig+0x270>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d009      	beq.n	8007322 <DMA_SetConfig+0x10a>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a5e      	ldr	r2, [pc, #376]	; (800748c <DMA_SetConfig+0x274>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d004      	beq.n	8007322 <DMA_SetConfig+0x10a>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a5c      	ldr	r2, [pc, #368]	; (8007490 <DMA_SetConfig+0x278>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d101      	bne.n	8007326 <DMA_SetConfig+0x10e>
 8007322:	2301      	movs	r3, #1
 8007324:	e000      	b.n	8007328 <DMA_SetConfig+0x110>
 8007326:	2300      	movs	r3, #0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00d      	beq.n	8007348 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007334:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800733a:	2b00      	cmp	r3, #0
 800733c:	d004      	beq.n	8007348 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007346:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a39      	ldr	r2, [pc, #228]	; (8007434 <DMA_SetConfig+0x21c>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d04a      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a38      	ldr	r2, [pc, #224]	; (8007438 <DMA_SetConfig+0x220>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d045      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a36      	ldr	r2, [pc, #216]	; (800743c <DMA_SetConfig+0x224>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d040      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a35      	ldr	r2, [pc, #212]	; (8007440 <DMA_SetConfig+0x228>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d03b      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a33      	ldr	r2, [pc, #204]	; (8007444 <DMA_SetConfig+0x22c>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d036      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a32      	ldr	r2, [pc, #200]	; (8007448 <DMA_SetConfig+0x230>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d031      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a30      	ldr	r2, [pc, #192]	; (800744c <DMA_SetConfig+0x234>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d02c      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a2f      	ldr	r2, [pc, #188]	; (8007450 <DMA_SetConfig+0x238>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d027      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a2d      	ldr	r2, [pc, #180]	; (8007454 <DMA_SetConfig+0x23c>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d022      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a2c      	ldr	r2, [pc, #176]	; (8007458 <DMA_SetConfig+0x240>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d01d      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a2a      	ldr	r2, [pc, #168]	; (800745c <DMA_SetConfig+0x244>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d018      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a29      	ldr	r2, [pc, #164]	; (8007460 <DMA_SetConfig+0x248>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d013      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a27      	ldr	r2, [pc, #156]	; (8007464 <DMA_SetConfig+0x24c>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d00e      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a26      	ldr	r2, [pc, #152]	; (8007468 <DMA_SetConfig+0x250>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d009      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a24      	ldr	r2, [pc, #144]	; (800746c <DMA_SetConfig+0x254>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d004      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a23      	ldr	r2, [pc, #140]	; (8007470 <DMA_SetConfig+0x258>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d101      	bne.n	80073ec <DMA_SetConfig+0x1d4>
 80073e8:	2301      	movs	r3, #1
 80073ea:	e000      	b.n	80073ee <DMA_SetConfig+0x1d6>
 80073ec:	2300      	movs	r3, #0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d059      	beq.n	80074a6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f6:	f003 031f 	and.w	r3, r3, #31
 80073fa:	223f      	movs	r2, #63	; 0x3f
 80073fc:	409a      	lsls	r2, r3
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007410:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	2b40      	cmp	r3, #64	; 0x40
 8007420:	d138      	bne.n	8007494 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007432:	e086      	b.n	8007542 <DMA_SetConfig+0x32a>
 8007434:	40020010 	.word	0x40020010
 8007438:	40020028 	.word	0x40020028
 800743c:	40020040 	.word	0x40020040
 8007440:	40020058 	.word	0x40020058
 8007444:	40020070 	.word	0x40020070
 8007448:	40020088 	.word	0x40020088
 800744c:	400200a0 	.word	0x400200a0
 8007450:	400200b8 	.word	0x400200b8
 8007454:	40020410 	.word	0x40020410
 8007458:	40020428 	.word	0x40020428
 800745c:	40020440 	.word	0x40020440
 8007460:	40020458 	.word	0x40020458
 8007464:	40020470 	.word	0x40020470
 8007468:	40020488 	.word	0x40020488
 800746c:	400204a0 	.word	0x400204a0
 8007470:	400204b8 	.word	0x400204b8
 8007474:	58025408 	.word	0x58025408
 8007478:	5802541c 	.word	0x5802541c
 800747c:	58025430 	.word	0x58025430
 8007480:	58025444 	.word	0x58025444
 8007484:	58025458 	.word	0x58025458
 8007488:	5802546c 	.word	0x5802546c
 800748c:	58025480 	.word	0x58025480
 8007490:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	60da      	str	r2, [r3, #12]
}
 80074a4:	e04d      	b.n	8007542 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a29      	ldr	r2, [pc, #164]	; (8007550 <DMA_SetConfig+0x338>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d022      	beq.n	80074f6 <DMA_SetConfig+0x2de>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a27      	ldr	r2, [pc, #156]	; (8007554 <DMA_SetConfig+0x33c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d01d      	beq.n	80074f6 <DMA_SetConfig+0x2de>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a26      	ldr	r2, [pc, #152]	; (8007558 <DMA_SetConfig+0x340>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d018      	beq.n	80074f6 <DMA_SetConfig+0x2de>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a24      	ldr	r2, [pc, #144]	; (800755c <DMA_SetConfig+0x344>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d013      	beq.n	80074f6 <DMA_SetConfig+0x2de>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a23      	ldr	r2, [pc, #140]	; (8007560 <DMA_SetConfig+0x348>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d00e      	beq.n	80074f6 <DMA_SetConfig+0x2de>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a21      	ldr	r2, [pc, #132]	; (8007564 <DMA_SetConfig+0x34c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d009      	beq.n	80074f6 <DMA_SetConfig+0x2de>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a20      	ldr	r2, [pc, #128]	; (8007568 <DMA_SetConfig+0x350>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d004      	beq.n	80074f6 <DMA_SetConfig+0x2de>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a1e      	ldr	r2, [pc, #120]	; (800756c <DMA_SetConfig+0x354>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d101      	bne.n	80074fa <DMA_SetConfig+0x2e2>
 80074f6:	2301      	movs	r3, #1
 80074f8:	e000      	b.n	80074fc <DMA_SetConfig+0x2e4>
 80074fa:	2300      	movs	r3, #0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d020      	beq.n	8007542 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007504:	f003 031f 	and.w	r3, r3, #31
 8007508:	2201      	movs	r2, #1
 800750a:	409a      	lsls	r2, r3
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	2b40      	cmp	r3, #64	; 0x40
 800751e:	d108      	bne.n	8007532 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	60da      	str	r2, [r3, #12]
}
 8007530:	e007      	b.n	8007542 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	60da      	str	r2, [r3, #12]
}
 8007542:	bf00      	nop
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	58025408 	.word	0x58025408
 8007554:	5802541c 	.word	0x5802541c
 8007558:	58025430 	.word	0x58025430
 800755c:	58025444 	.word	0x58025444
 8007560:	58025458 	.word	0x58025458
 8007564:	5802546c 	.word	0x5802546c
 8007568:	58025480 	.word	0x58025480
 800756c:	58025494 	.word	0x58025494

08007570 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a42      	ldr	r2, [pc, #264]	; (8007688 <DMA_CalcBaseAndBitshift+0x118>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d04a      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a41      	ldr	r2, [pc, #260]	; (800768c <DMA_CalcBaseAndBitshift+0x11c>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d045      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a3f      	ldr	r2, [pc, #252]	; (8007690 <DMA_CalcBaseAndBitshift+0x120>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d040      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a3e      	ldr	r2, [pc, #248]	; (8007694 <DMA_CalcBaseAndBitshift+0x124>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d03b      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a3c      	ldr	r2, [pc, #240]	; (8007698 <DMA_CalcBaseAndBitshift+0x128>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d036      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a3b      	ldr	r2, [pc, #236]	; (800769c <DMA_CalcBaseAndBitshift+0x12c>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d031      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a39      	ldr	r2, [pc, #228]	; (80076a0 <DMA_CalcBaseAndBitshift+0x130>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d02c      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a38      	ldr	r2, [pc, #224]	; (80076a4 <DMA_CalcBaseAndBitshift+0x134>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d027      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a36      	ldr	r2, [pc, #216]	; (80076a8 <DMA_CalcBaseAndBitshift+0x138>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d022      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a35      	ldr	r2, [pc, #212]	; (80076ac <DMA_CalcBaseAndBitshift+0x13c>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d01d      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a33      	ldr	r2, [pc, #204]	; (80076b0 <DMA_CalcBaseAndBitshift+0x140>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d018      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a32      	ldr	r2, [pc, #200]	; (80076b4 <DMA_CalcBaseAndBitshift+0x144>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d013      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a30      	ldr	r2, [pc, #192]	; (80076b8 <DMA_CalcBaseAndBitshift+0x148>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d00e      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a2f      	ldr	r2, [pc, #188]	; (80076bc <DMA_CalcBaseAndBitshift+0x14c>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d009      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a2d      	ldr	r2, [pc, #180]	; (80076c0 <DMA_CalcBaseAndBitshift+0x150>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d004      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a2c      	ldr	r2, [pc, #176]	; (80076c4 <DMA_CalcBaseAndBitshift+0x154>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d101      	bne.n	800761c <DMA_CalcBaseAndBitshift+0xac>
 8007618:	2301      	movs	r3, #1
 800761a:	e000      	b.n	800761e <DMA_CalcBaseAndBitshift+0xae>
 800761c:	2300      	movs	r3, #0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d024      	beq.n	800766c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	b2db      	uxtb	r3, r3
 8007628:	3b10      	subs	r3, #16
 800762a:	4a27      	ldr	r2, [pc, #156]	; (80076c8 <DMA_CalcBaseAndBitshift+0x158>)
 800762c:	fba2 2303 	umull	r2, r3, r2, r3
 8007630:	091b      	lsrs	r3, r3, #4
 8007632:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f003 0307 	and.w	r3, r3, #7
 800763a:	4a24      	ldr	r2, [pc, #144]	; (80076cc <DMA_CalcBaseAndBitshift+0x15c>)
 800763c:	5cd3      	ldrb	r3, [r2, r3]
 800763e:	461a      	mov	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2b03      	cmp	r3, #3
 8007648:	d908      	bls.n	800765c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	461a      	mov	r2, r3
 8007650:	4b1f      	ldr	r3, [pc, #124]	; (80076d0 <DMA_CalcBaseAndBitshift+0x160>)
 8007652:	4013      	ands	r3, r2
 8007654:	1d1a      	adds	r2, r3, #4
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	659a      	str	r2, [r3, #88]	; 0x58
 800765a:	e00d      	b.n	8007678 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	461a      	mov	r2, r3
 8007662:	4b1b      	ldr	r3, [pc, #108]	; (80076d0 <DMA_CalcBaseAndBitshift+0x160>)
 8007664:	4013      	ands	r3, r2
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	6593      	str	r3, [r2, #88]	; 0x58
 800766a:	e005      	b.n	8007678 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	40020010 	.word	0x40020010
 800768c:	40020028 	.word	0x40020028
 8007690:	40020040 	.word	0x40020040
 8007694:	40020058 	.word	0x40020058
 8007698:	40020070 	.word	0x40020070
 800769c:	40020088 	.word	0x40020088
 80076a0:	400200a0 	.word	0x400200a0
 80076a4:	400200b8 	.word	0x400200b8
 80076a8:	40020410 	.word	0x40020410
 80076ac:	40020428 	.word	0x40020428
 80076b0:	40020440 	.word	0x40020440
 80076b4:	40020458 	.word	0x40020458
 80076b8:	40020470 	.word	0x40020470
 80076bc:	40020488 	.word	0x40020488
 80076c0:	400204a0 	.word	0x400204a0
 80076c4:	400204b8 	.word	0x400204b8
 80076c8:	aaaaaaab 	.word	0xaaaaaaab
 80076cc:	0800e9f4 	.word	0x0800e9f4
 80076d0:	fffffc00 	.word	0xfffffc00

080076d4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d120      	bne.n	800772a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ec:	2b03      	cmp	r3, #3
 80076ee:	d858      	bhi.n	80077a2 <DMA_CheckFifoParam+0xce>
 80076f0:	a201      	add	r2, pc, #4	; (adr r2, 80076f8 <DMA_CheckFifoParam+0x24>)
 80076f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f6:	bf00      	nop
 80076f8:	08007709 	.word	0x08007709
 80076fc:	0800771b 	.word	0x0800771b
 8007700:	08007709 	.word	0x08007709
 8007704:	080077a3 	.word	0x080077a3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d048      	beq.n	80077a6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007718:	e045      	b.n	80077a6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007722:	d142      	bne.n	80077aa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007728:	e03f      	b.n	80077aa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007732:	d123      	bne.n	800777c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007738:	2b03      	cmp	r3, #3
 800773a:	d838      	bhi.n	80077ae <DMA_CheckFifoParam+0xda>
 800773c:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <DMA_CheckFifoParam+0x70>)
 800773e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007742:	bf00      	nop
 8007744:	08007755 	.word	0x08007755
 8007748:	0800775b 	.word	0x0800775b
 800774c:	08007755 	.word	0x08007755
 8007750:	0800776d 	.word	0x0800776d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	73fb      	strb	r3, [r7, #15]
        break;
 8007758:	e030      	b.n	80077bc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d025      	beq.n	80077b2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800776a:	e022      	b.n	80077b2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007774:	d11f      	bne.n	80077b6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800777a:	e01c      	b.n	80077b6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007780:	2b02      	cmp	r3, #2
 8007782:	d902      	bls.n	800778a <DMA_CheckFifoParam+0xb6>
 8007784:	2b03      	cmp	r3, #3
 8007786:	d003      	beq.n	8007790 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007788:	e018      	b.n	80077bc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	73fb      	strb	r3, [r7, #15]
        break;
 800778e:	e015      	b.n	80077bc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00e      	beq.n	80077ba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	73fb      	strb	r3, [r7, #15]
    break;
 80077a0:	e00b      	b.n	80077ba <DMA_CheckFifoParam+0xe6>
        break;
 80077a2:	bf00      	nop
 80077a4:	e00a      	b.n	80077bc <DMA_CheckFifoParam+0xe8>
        break;
 80077a6:	bf00      	nop
 80077a8:	e008      	b.n	80077bc <DMA_CheckFifoParam+0xe8>
        break;
 80077aa:	bf00      	nop
 80077ac:	e006      	b.n	80077bc <DMA_CheckFifoParam+0xe8>
        break;
 80077ae:	bf00      	nop
 80077b0:	e004      	b.n	80077bc <DMA_CheckFifoParam+0xe8>
        break;
 80077b2:	bf00      	nop
 80077b4:	e002      	b.n	80077bc <DMA_CheckFifoParam+0xe8>
        break;
 80077b6:	bf00      	nop
 80077b8:	e000      	b.n	80077bc <DMA_CheckFifoParam+0xe8>
    break;
 80077ba:	bf00      	nop
    }
  }

  return status;
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop

080077cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a38      	ldr	r2, [pc, #224]	; (80078c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d022      	beq.n	800782a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a36      	ldr	r2, [pc, #216]	; (80078c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d01d      	beq.n	800782a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a35      	ldr	r2, [pc, #212]	; (80078c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d018      	beq.n	800782a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a33      	ldr	r2, [pc, #204]	; (80078cc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d013      	beq.n	800782a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a32      	ldr	r2, [pc, #200]	; (80078d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d00e      	beq.n	800782a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a30      	ldr	r2, [pc, #192]	; (80078d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d009      	beq.n	800782a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a2f      	ldr	r2, [pc, #188]	; (80078d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d004      	beq.n	800782a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a2d      	ldr	r2, [pc, #180]	; (80078dc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d101      	bne.n	800782e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800782a:	2301      	movs	r3, #1
 800782c:	e000      	b.n	8007830 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800782e:	2300      	movs	r3, #0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d01a      	beq.n	800786a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	b2db      	uxtb	r3, r3
 800783a:	3b08      	subs	r3, #8
 800783c:	4a28      	ldr	r2, [pc, #160]	; (80078e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800783e:	fba2 2303 	umull	r2, r3, r2, r3
 8007842:	091b      	lsrs	r3, r3, #4
 8007844:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	4b26      	ldr	r3, [pc, #152]	; (80078e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800784a:	4413      	add	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	461a      	mov	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a24      	ldr	r2, [pc, #144]	; (80078e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007858:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f003 031f 	and.w	r3, r3, #31
 8007860:	2201      	movs	r2, #1
 8007862:	409a      	lsls	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007868:	e024      	b.n	80078b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	b2db      	uxtb	r3, r3
 8007870:	3b10      	subs	r3, #16
 8007872:	4a1e      	ldr	r2, [pc, #120]	; (80078ec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007874:	fba2 2303 	umull	r2, r3, r2, r3
 8007878:	091b      	lsrs	r3, r3, #4
 800787a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	4a1c      	ldr	r2, [pc, #112]	; (80078f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d806      	bhi.n	8007892 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	4a1b      	ldr	r2, [pc, #108]	; (80078f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d902      	bls.n	8007892 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	3308      	adds	r3, #8
 8007890:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	4b18      	ldr	r3, [pc, #96]	; (80078f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007896:	4413      	add	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	461a      	mov	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a16      	ldr	r2, [pc, #88]	; (80078fc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80078a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f003 031f 	and.w	r3, r3, #31
 80078ac:	2201      	movs	r2, #1
 80078ae:	409a      	lsls	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80078b4:	bf00      	nop
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	58025408 	.word	0x58025408
 80078c4:	5802541c 	.word	0x5802541c
 80078c8:	58025430 	.word	0x58025430
 80078cc:	58025444 	.word	0x58025444
 80078d0:	58025458 	.word	0x58025458
 80078d4:	5802546c 	.word	0x5802546c
 80078d8:	58025480 	.word	0x58025480
 80078dc:	58025494 	.word	0x58025494
 80078e0:	cccccccd 	.word	0xcccccccd
 80078e4:	16009600 	.word	0x16009600
 80078e8:	58025880 	.word	0x58025880
 80078ec:	aaaaaaab 	.word	0xaaaaaaab
 80078f0:	400204b8 	.word	0x400204b8
 80078f4:	4002040f 	.word	0x4002040f
 80078f8:	10008200 	.word	0x10008200
 80078fc:	40020880 	.word	0x40020880

08007900 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	b2db      	uxtb	r3, r3
 800790e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d04a      	beq.n	80079ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b08      	cmp	r3, #8
 800791a:	d847      	bhi.n	80079ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a25      	ldr	r2, [pc, #148]	; (80079b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d022      	beq.n	800796c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a24      	ldr	r2, [pc, #144]	; (80079bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d01d      	beq.n	800796c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a22      	ldr	r2, [pc, #136]	; (80079c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d018      	beq.n	800796c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a21      	ldr	r2, [pc, #132]	; (80079c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d013      	beq.n	800796c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a1f      	ldr	r2, [pc, #124]	; (80079c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d00e      	beq.n	800796c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a1e      	ldr	r2, [pc, #120]	; (80079cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d009      	beq.n	800796c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a1c      	ldr	r2, [pc, #112]	; (80079d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d004      	beq.n	800796c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a1b      	ldr	r2, [pc, #108]	; (80079d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d101      	bne.n	8007970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800796c:	2301      	movs	r3, #1
 800796e:	e000      	b.n	8007972 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007970:	2300      	movs	r3, #0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00a      	beq.n	800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	4b17      	ldr	r3, [pc, #92]	; (80079d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800797a:	4413      	add	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	461a      	mov	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a15      	ldr	r2, [pc, #84]	; (80079dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007988:	671a      	str	r2, [r3, #112]	; 0x70
 800798a:	e009      	b.n	80079a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	4b14      	ldr	r3, [pc, #80]	; (80079e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007990:	4413      	add	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	461a      	mov	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a11      	ldr	r2, [pc, #68]	; (80079e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800799e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	2201      	movs	r2, #1
 80079a6:	409a      	lsls	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80079ac:	bf00      	nop
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	58025408 	.word	0x58025408
 80079bc:	5802541c 	.word	0x5802541c
 80079c0:	58025430 	.word	0x58025430
 80079c4:	58025444 	.word	0x58025444
 80079c8:	58025458 	.word	0x58025458
 80079cc:	5802546c 	.word	0x5802546c
 80079d0:	58025480 	.word	0x58025480
 80079d4:	58025494 	.word	0x58025494
 80079d8:	1600963f 	.word	0x1600963f
 80079dc:	58025940 	.word	0x58025940
 80079e0:	1000823f 	.word	0x1000823f
 80079e4:	40020940 	.word	0x40020940

080079e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b089      	sub	sp, #36	; 0x24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80079f6:	4b86      	ldr	r3, [pc, #536]	; (8007c10 <HAL_GPIO_Init+0x228>)
 80079f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80079fa:	e18c      	b.n	8007d16 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	2101      	movs	r1, #1
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	fa01 f303 	lsl.w	r3, r1, r3
 8007a08:	4013      	ands	r3, r2
 8007a0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 817e 	beq.w	8007d10 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f003 0303 	and.w	r3, r3, #3
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d005      	beq.n	8007a2c <HAL_GPIO_Init+0x44>
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f003 0303 	and.w	r3, r3, #3
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d130      	bne.n	8007a8e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	005b      	lsls	r3, r3, #1
 8007a36:	2203      	movs	r2, #3
 8007a38:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3c:	43db      	mvns	r3, r3
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	4013      	ands	r3, r2
 8007a42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	005b      	lsls	r3, r3, #1
 8007a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a50:	69ba      	ldr	r2, [r7, #24]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a62:	2201      	movs	r2, #1
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6a:	43db      	mvns	r3, r3
 8007a6c:	69ba      	ldr	r2, [r7, #24]
 8007a6e:	4013      	ands	r3, r2
 8007a70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	091b      	lsrs	r3, r3, #4
 8007a78:	f003 0201 	and.w	r2, r3, #1
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f003 0303 	and.w	r3, r3, #3
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d017      	beq.n	8007aca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	005b      	lsls	r3, r3, #1
 8007aa4:	2203      	movs	r2, #3
 8007aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aaa:	43db      	mvns	r3, r3
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	4013      	ands	r3, r2
 8007ab0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	689a      	ldr	r2, [r3, #8]
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	005b      	lsls	r3, r3, #1
 8007aba:	fa02 f303 	lsl.w	r3, r2, r3
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d123      	bne.n	8007b1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	08da      	lsrs	r2, r3, #3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	3208      	adds	r2, #8
 8007ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	f003 0307 	and.w	r3, r3, #7
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	220f      	movs	r2, #15
 8007aee:	fa02 f303 	lsl.w	r3, r2, r3
 8007af2:	43db      	mvns	r3, r3
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	4013      	ands	r3, r2
 8007af8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	691a      	ldr	r2, [r3, #16]
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	f003 0307 	and.w	r3, r3, #7
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	08da      	lsrs	r2, r3, #3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3208      	adds	r2, #8
 8007b18:	69b9      	ldr	r1, [r7, #24]
 8007b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	005b      	lsls	r3, r3, #1
 8007b28:	2203      	movs	r2, #3
 8007b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2e:	43db      	mvns	r3, r3
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	4013      	ands	r3, r2
 8007b34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f003 0203 	and.w	r2, r3, #3
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	005b      	lsls	r3, r3, #1
 8007b42:	fa02 f303 	lsl.w	r3, r2, r3
 8007b46:	69ba      	ldr	r2, [r7, #24]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 80d8 	beq.w	8007d10 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b60:	4b2c      	ldr	r3, [pc, #176]	; (8007c14 <HAL_GPIO_Init+0x22c>)
 8007b62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b66:	4a2b      	ldr	r2, [pc, #172]	; (8007c14 <HAL_GPIO_Init+0x22c>)
 8007b68:	f043 0302 	orr.w	r3, r3, #2
 8007b6c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007b70:	4b28      	ldr	r3, [pc, #160]	; (8007c14 <HAL_GPIO_Init+0x22c>)
 8007b72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b7e:	4a26      	ldr	r2, [pc, #152]	; (8007c18 <HAL_GPIO_Init+0x230>)
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	089b      	lsrs	r3, r3, #2
 8007b84:	3302      	adds	r3, #2
 8007b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	f003 0303 	and.w	r3, r3, #3
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	220f      	movs	r2, #15
 8007b96:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9a:	43db      	mvns	r3, r3
 8007b9c:	69ba      	ldr	r2, [r7, #24]
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a1d      	ldr	r2, [pc, #116]	; (8007c1c <HAL_GPIO_Init+0x234>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d04a      	beq.n	8007c40 <HAL_GPIO_Init+0x258>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a1c      	ldr	r2, [pc, #112]	; (8007c20 <HAL_GPIO_Init+0x238>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d02b      	beq.n	8007c0a <HAL_GPIO_Init+0x222>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a1b      	ldr	r2, [pc, #108]	; (8007c24 <HAL_GPIO_Init+0x23c>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d025      	beq.n	8007c06 <HAL_GPIO_Init+0x21e>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a1a      	ldr	r2, [pc, #104]	; (8007c28 <HAL_GPIO_Init+0x240>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d01f      	beq.n	8007c02 <HAL_GPIO_Init+0x21a>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a19      	ldr	r2, [pc, #100]	; (8007c2c <HAL_GPIO_Init+0x244>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d019      	beq.n	8007bfe <HAL_GPIO_Init+0x216>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a18      	ldr	r2, [pc, #96]	; (8007c30 <HAL_GPIO_Init+0x248>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d013      	beq.n	8007bfa <HAL_GPIO_Init+0x212>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a17      	ldr	r2, [pc, #92]	; (8007c34 <HAL_GPIO_Init+0x24c>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d00d      	beq.n	8007bf6 <HAL_GPIO_Init+0x20e>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a16      	ldr	r2, [pc, #88]	; (8007c38 <HAL_GPIO_Init+0x250>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d007      	beq.n	8007bf2 <HAL_GPIO_Init+0x20a>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a15      	ldr	r2, [pc, #84]	; (8007c3c <HAL_GPIO_Init+0x254>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d101      	bne.n	8007bee <HAL_GPIO_Init+0x206>
 8007bea:	2309      	movs	r3, #9
 8007bec:	e029      	b.n	8007c42 <HAL_GPIO_Init+0x25a>
 8007bee:	230a      	movs	r3, #10
 8007bf0:	e027      	b.n	8007c42 <HAL_GPIO_Init+0x25a>
 8007bf2:	2307      	movs	r3, #7
 8007bf4:	e025      	b.n	8007c42 <HAL_GPIO_Init+0x25a>
 8007bf6:	2306      	movs	r3, #6
 8007bf8:	e023      	b.n	8007c42 <HAL_GPIO_Init+0x25a>
 8007bfa:	2305      	movs	r3, #5
 8007bfc:	e021      	b.n	8007c42 <HAL_GPIO_Init+0x25a>
 8007bfe:	2304      	movs	r3, #4
 8007c00:	e01f      	b.n	8007c42 <HAL_GPIO_Init+0x25a>
 8007c02:	2303      	movs	r3, #3
 8007c04:	e01d      	b.n	8007c42 <HAL_GPIO_Init+0x25a>
 8007c06:	2302      	movs	r3, #2
 8007c08:	e01b      	b.n	8007c42 <HAL_GPIO_Init+0x25a>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e019      	b.n	8007c42 <HAL_GPIO_Init+0x25a>
 8007c0e:	bf00      	nop
 8007c10:	58000080 	.word	0x58000080
 8007c14:	58024400 	.word	0x58024400
 8007c18:	58000400 	.word	0x58000400
 8007c1c:	58020000 	.word	0x58020000
 8007c20:	58020400 	.word	0x58020400
 8007c24:	58020800 	.word	0x58020800
 8007c28:	58020c00 	.word	0x58020c00
 8007c2c:	58021000 	.word	0x58021000
 8007c30:	58021400 	.word	0x58021400
 8007c34:	58021800 	.word	0x58021800
 8007c38:	58021c00 	.word	0x58021c00
 8007c3c:	58022400 	.word	0x58022400
 8007c40:	2300      	movs	r3, #0
 8007c42:	69fa      	ldr	r2, [r7, #28]
 8007c44:	f002 0203 	and.w	r2, r2, #3
 8007c48:	0092      	lsls	r2, r2, #2
 8007c4a:	4093      	lsls	r3, r2
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c52:	4938      	ldr	r1, [pc, #224]	; (8007d34 <HAL_GPIO_Init+0x34c>)
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	089b      	lsrs	r3, r3, #2
 8007c58:	3302      	adds	r3, #2
 8007c5a:	69ba      	ldr	r2, [r7, #24]
 8007c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	43db      	mvns	r3, r3
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	4013      	ands	r3, r2
 8007c70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	43db      	mvns	r3, r3
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d003      	beq.n	8007cb4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	43db      	mvns	r3, r3
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	4013      	ands	r3, r2
 8007cca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d003      	beq.n	8007ce0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007cd8:	69ba      	ldr	r2, [r7, #24]
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	43db      	mvns	r3, r3
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d003      	beq.n	8007d0a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007d02:	69ba      	ldr	r2, [r7, #24]
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	3301      	adds	r3, #1
 8007d14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f47f ae6b 	bne.w	80079fc <HAL_GPIO_Init+0x14>
  }
}
 8007d26:	bf00      	nop
 8007d28:	bf00      	nop
 8007d2a:	3724      	adds	r7, #36	; 0x24
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	58000400 	.word	0x58000400

08007d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	460b      	mov	r3, r1
 8007d42:	807b      	strh	r3, [r7, #2]
 8007d44:	4613      	mov	r3, r2
 8007d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d48:	787b      	ldrb	r3, [r7, #1]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d4e:	887a      	ldrh	r2, [r7, #2]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007d54:	e003      	b.n	8007d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007d56:	887b      	ldrh	r3, [r7, #2]
 8007d58:	041a      	lsls	r2, r3, #16
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	619a      	str	r2, [r3, #24]
}
 8007d5e:	bf00      	nop
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
	...

08007d6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007d74:	4b19      	ldr	r3, [pc, #100]	; (8007ddc <HAL_PWREx_ConfigSupply+0x70>)
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	f003 0304 	and.w	r3, r3, #4
 8007d7c:	2b04      	cmp	r3, #4
 8007d7e:	d00a      	beq.n	8007d96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007d80:	4b16      	ldr	r3, [pc, #88]	; (8007ddc <HAL_PWREx_ConfigSupply+0x70>)
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	f003 0307 	and.w	r3, r3, #7
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d001      	beq.n	8007d92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e01f      	b.n	8007dd2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	e01d      	b.n	8007dd2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d96:	4b11      	ldr	r3, [pc, #68]	; (8007ddc <HAL_PWREx_ConfigSupply+0x70>)
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	f023 0207 	bic.w	r2, r3, #7
 8007d9e:	490f      	ldr	r1, [pc, #60]	; (8007ddc <HAL_PWREx_ConfigSupply+0x70>)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007da6:	f7fc fec9 	bl	8004b3c <HAL_GetTick>
 8007daa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007dac:	e009      	b.n	8007dc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007dae:	f7fc fec5 	bl	8004b3c <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dbc:	d901      	bls.n	8007dc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e007      	b.n	8007dd2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007dc2:	4b06      	ldr	r3, [pc, #24]	; (8007ddc <HAL_PWREx_ConfigSupply+0x70>)
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dce:	d1ee      	bne.n	8007dae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	58024800 	.word	0x58024800

08007de0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b08c      	sub	sp, #48	; 0x30
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e3c8      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f000 8087 	beq.w	8007f0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e00:	4b88      	ldr	r3, [pc, #544]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e0a:	4b86      	ldr	r3, [pc, #536]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e12:	2b10      	cmp	r3, #16
 8007e14:	d007      	beq.n	8007e26 <HAL_RCC_OscConfig+0x46>
 8007e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e18:	2b18      	cmp	r3, #24
 8007e1a:	d110      	bne.n	8007e3e <HAL_RCC_OscConfig+0x5e>
 8007e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1e:	f003 0303 	and.w	r3, r3, #3
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d10b      	bne.n	8007e3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e26:	4b7f      	ldr	r3, [pc, #508]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d06c      	beq.n	8007f0c <HAL_RCC_OscConfig+0x12c>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d168      	bne.n	8007f0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e3a2      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e46:	d106      	bne.n	8007e56 <HAL_RCC_OscConfig+0x76>
 8007e48:	4b76      	ldr	r3, [pc, #472]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a75      	ldr	r2, [pc, #468]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e52:	6013      	str	r3, [r2, #0]
 8007e54:	e02e      	b.n	8007eb4 <HAL_RCC_OscConfig+0xd4>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10c      	bne.n	8007e78 <HAL_RCC_OscConfig+0x98>
 8007e5e:	4b71      	ldr	r3, [pc, #452]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a70      	ldr	r2, [pc, #448]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e68:	6013      	str	r3, [r2, #0]
 8007e6a:	4b6e      	ldr	r3, [pc, #440]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a6d      	ldr	r2, [pc, #436]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	e01d      	b.n	8007eb4 <HAL_RCC_OscConfig+0xd4>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e80:	d10c      	bne.n	8007e9c <HAL_RCC_OscConfig+0xbc>
 8007e82:	4b68      	ldr	r3, [pc, #416]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a67      	ldr	r2, [pc, #412]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e8c:	6013      	str	r3, [r2, #0]
 8007e8e:	4b65      	ldr	r3, [pc, #404]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a64      	ldr	r2, [pc, #400]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e98:	6013      	str	r3, [r2, #0]
 8007e9a:	e00b      	b.n	8007eb4 <HAL_RCC_OscConfig+0xd4>
 8007e9c:	4b61      	ldr	r3, [pc, #388]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a60      	ldr	r2, [pc, #384]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ea6:	6013      	str	r3, [r2, #0]
 8007ea8:	4b5e      	ldr	r3, [pc, #376]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a5d      	ldr	r2, [pc, #372]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d013      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ebc:	f7fc fe3e 	bl	8004b3c <HAL_GetTick>
 8007ec0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ec2:	e008      	b.n	8007ed6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ec4:	f7fc fe3a 	bl	8004b3c <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	2b64      	cmp	r3, #100	; 0x64
 8007ed0:	d901      	bls.n	8007ed6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e356      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ed6:	4b53      	ldr	r3, [pc, #332]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d0f0      	beq.n	8007ec4 <HAL_RCC_OscConfig+0xe4>
 8007ee2:	e014      	b.n	8007f0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee4:	f7fc fe2a 	bl	8004b3c <HAL_GetTick>
 8007ee8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007eea:	e008      	b.n	8007efe <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007eec:	f7fc fe26 	bl	8004b3c <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b64      	cmp	r3, #100	; 0x64
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e342      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007efe:	4b49      	ldr	r3, [pc, #292]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1f0      	bne.n	8007eec <HAL_RCC_OscConfig+0x10c>
 8007f0a:	e000      	b.n	8007f0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f000 808c 	beq.w	8008034 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f1c:	4b41      	ldr	r3, [pc, #260]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f26:	4b3f      	ldr	r3, [pc, #252]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f2c:	6a3b      	ldr	r3, [r7, #32]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d007      	beq.n	8007f42 <HAL_RCC_OscConfig+0x162>
 8007f32:	6a3b      	ldr	r3, [r7, #32]
 8007f34:	2b18      	cmp	r3, #24
 8007f36:	d137      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x1c8>
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	f003 0303 	and.w	r3, r3, #3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d132      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f42:	4b38      	ldr	r3, [pc, #224]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 0304 	and.w	r3, r3, #4
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d005      	beq.n	8007f5a <HAL_RCC_OscConfig+0x17a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e314      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f5a:	4b32      	ldr	r3, [pc, #200]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f023 0219 	bic.w	r2, r3, #25
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	492f      	ldr	r1, [pc, #188]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f6c:	f7fc fde6 	bl	8004b3c <HAL_GetTick>
 8007f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f72:	e008      	b.n	8007f86 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f74:	f7fc fde2 	bl	8004b3c <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d901      	bls.n	8007f86 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e2fe      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f86:	4b27      	ldr	r3, [pc, #156]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0304 	and.w	r3, r3, #4
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d0f0      	beq.n	8007f74 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f92:	4b24      	ldr	r3, [pc, #144]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	061b      	lsls	r3, r3, #24
 8007fa0:	4920      	ldr	r1, [pc, #128]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fa6:	e045      	b.n	8008034 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d026      	beq.n	8007ffe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007fb0:	4b1c      	ldr	r3, [pc, #112]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f023 0219 	bic.w	r2, r3, #25
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	4919      	ldr	r1, [pc, #100]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc2:	f7fc fdbb 	bl	8004b3c <HAL_GetTick>
 8007fc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fc8:	e008      	b.n	8007fdc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fca:	f7fc fdb7 	bl	8004b3c <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d901      	bls.n	8007fdc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e2d3      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fdc:	4b11      	ldr	r3, [pc, #68]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0304 	and.w	r3, r3, #4
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d0f0      	beq.n	8007fca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fe8:	4b0e      	ldr	r3, [pc, #56]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	061b      	lsls	r3, r3, #24
 8007ff6:	490b      	ldr	r1, [pc, #44]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	604b      	str	r3, [r1, #4]
 8007ffc:	e01a      	b.n	8008034 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ffe:	4b09      	ldr	r3, [pc, #36]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a08      	ldr	r2, [pc, #32]	; (8008024 <HAL_RCC_OscConfig+0x244>)
 8008004:	f023 0301 	bic.w	r3, r3, #1
 8008008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800800a:	f7fc fd97 	bl	8004b3c <HAL_GetTick>
 800800e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008010:	e00a      	b.n	8008028 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008012:	f7fc fd93 	bl	8004b3c <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	2b02      	cmp	r3, #2
 800801e:	d903      	bls.n	8008028 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e2af      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
 8008024:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008028:	4b96      	ldr	r3, [pc, #600]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0304 	and.w	r3, r3, #4
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1ee      	bne.n	8008012 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0310 	and.w	r3, r3, #16
 800803c:	2b00      	cmp	r3, #0
 800803e:	d06a      	beq.n	8008116 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008040:	4b90      	ldr	r3, [pc, #576]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008048:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800804a:	4b8e      	ldr	r3, [pc, #568]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 800804c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	2b08      	cmp	r3, #8
 8008054:	d007      	beq.n	8008066 <HAL_RCC_OscConfig+0x286>
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b18      	cmp	r3, #24
 800805a:	d11b      	bne.n	8008094 <HAL_RCC_OscConfig+0x2b4>
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	f003 0303 	and.w	r3, r3, #3
 8008062:	2b01      	cmp	r3, #1
 8008064:	d116      	bne.n	8008094 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008066:	4b87      	ldr	r3, [pc, #540]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806e:	2b00      	cmp	r3, #0
 8008070:	d005      	beq.n	800807e <HAL_RCC_OscConfig+0x29e>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	69db      	ldr	r3, [r3, #28]
 8008076:	2b80      	cmp	r3, #128	; 0x80
 8008078:	d001      	beq.n	800807e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e282      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800807e:	4b81      	ldr	r3, [pc, #516]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	061b      	lsls	r3, r3, #24
 800808c:	497d      	ldr	r1, [pc, #500]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 800808e:	4313      	orrs	r3, r2
 8008090:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008092:	e040      	b.n	8008116 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	69db      	ldr	r3, [r3, #28]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d023      	beq.n	80080e4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800809c:	4b79      	ldr	r3, [pc, #484]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a78      	ldr	r2, [pc, #480]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 80080a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080a8:	f7fc fd48 	bl	8004b3c <HAL_GetTick>
 80080ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080ae:	e008      	b.n	80080c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80080b0:	f7fc fd44 	bl	8004b3c <HAL_GetTick>
 80080b4:	4602      	mov	r2, r0
 80080b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d901      	bls.n	80080c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e260      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080c2:	4b70      	ldr	r3, [pc, #448]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d0f0      	beq.n	80080b0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080ce:	4b6d      	ldr	r3, [pc, #436]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a1b      	ldr	r3, [r3, #32]
 80080da:	061b      	lsls	r3, r3, #24
 80080dc:	4969      	ldr	r1, [pc, #420]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	60cb      	str	r3, [r1, #12]
 80080e2:	e018      	b.n	8008116 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80080e4:	4b67      	ldr	r3, [pc, #412]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a66      	ldr	r2, [pc, #408]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 80080ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080f0:	f7fc fd24 	bl	8004b3c <HAL_GetTick>
 80080f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080f6:	e008      	b.n	800810a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80080f8:	f7fc fd20 	bl	8004b3c <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b02      	cmp	r3, #2
 8008104:	d901      	bls.n	800810a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e23c      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800810a:	4b5e      	ldr	r3, [pc, #376]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1f0      	bne.n	80080f8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0308 	and.w	r3, r3, #8
 800811e:	2b00      	cmp	r3, #0
 8008120:	d036      	beq.n	8008190 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d019      	beq.n	800815e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800812a:	4b56      	ldr	r3, [pc, #344]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 800812c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800812e:	4a55      	ldr	r2, [pc, #340]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 8008130:	f043 0301 	orr.w	r3, r3, #1
 8008134:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008136:	f7fc fd01 	bl	8004b3c <HAL_GetTick>
 800813a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800813c:	e008      	b.n	8008150 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800813e:	f7fc fcfd 	bl	8004b3c <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	2b02      	cmp	r3, #2
 800814a:	d901      	bls.n	8008150 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e219      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008150:	4b4c      	ldr	r3, [pc, #304]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 8008152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008154:	f003 0302 	and.w	r3, r3, #2
 8008158:	2b00      	cmp	r3, #0
 800815a:	d0f0      	beq.n	800813e <HAL_RCC_OscConfig+0x35e>
 800815c:	e018      	b.n	8008190 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800815e:	4b49      	ldr	r3, [pc, #292]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 8008160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008162:	4a48      	ldr	r2, [pc, #288]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 8008164:	f023 0301 	bic.w	r3, r3, #1
 8008168:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800816a:	f7fc fce7 	bl	8004b3c <HAL_GetTick>
 800816e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008170:	e008      	b.n	8008184 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008172:	f7fc fce3 	bl	8004b3c <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d901      	bls.n	8008184 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e1ff      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008184:	4b3f      	ldr	r3, [pc, #252]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 8008186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008188:	f003 0302 	and.w	r3, r3, #2
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1f0      	bne.n	8008172 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0320 	and.w	r3, r3, #32
 8008198:	2b00      	cmp	r3, #0
 800819a:	d036      	beq.n	800820a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d019      	beq.n	80081d8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80081a4:	4b37      	ldr	r3, [pc, #220]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a36      	ldr	r2, [pc, #216]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 80081aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80081ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081b0:	f7fc fcc4 	bl	8004b3c <HAL_GetTick>
 80081b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80081b6:	e008      	b.n	80081ca <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081b8:	f7fc fcc0 	bl	8004b3c <HAL_GetTick>
 80081bc:	4602      	mov	r2, r0
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d901      	bls.n	80081ca <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80081c6:	2303      	movs	r3, #3
 80081c8:	e1dc      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80081ca:	4b2e      	ldr	r3, [pc, #184]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d0f0      	beq.n	80081b8 <HAL_RCC_OscConfig+0x3d8>
 80081d6:	e018      	b.n	800820a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80081d8:	4b2a      	ldr	r3, [pc, #168]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a29      	ldr	r2, [pc, #164]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 80081de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081e4:	f7fc fcaa 	bl	8004b3c <HAL_GetTick>
 80081e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081ea:	e008      	b.n	80081fe <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081ec:	f7fc fca6 	bl	8004b3c <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d901      	bls.n	80081fe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e1c2      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081fe:	4b21      	ldr	r3, [pc, #132]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1f0      	bne.n	80081ec <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0304 	and.w	r3, r3, #4
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 8086 	beq.w	8008324 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008218:	4b1b      	ldr	r3, [pc, #108]	; (8008288 <HAL_RCC_OscConfig+0x4a8>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a1a      	ldr	r2, [pc, #104]	; (8008288 <HAL_RCC_OscConfig+0x4a8>)
 800821e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008222:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008224:	f7fc fc8a 	bl	8004b3c <HAL_GetTick>
 8008228:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800822a:	e008      	b.n	800823e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800822c:	f7fc fc86 	bl	8004b3c <HAL_GetTick>
 8008230:	4602      	mov	r2, r0
 8008232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	2b64      	cmp	r3, #100	; 0x64
 8008238:	d901      	bls.n	800823e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e1a2      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800823e:	4b12      	ldr	r3, [pc, #72]	; (8008288 <HAL_RCC_OscConfig+0x4a8>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008246:	2b00      	cmp	r3, #0
 8008248:	d0f0      	beq.n	800822c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d106      	bne.n	8008260 <HAL_RCC_OscConfig+0x480>
 8008252:	4b0c      	ldr	r3, [pc, #48]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 8008254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008256:	4a0b      	ldr	r2, [pc, #44]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 8008258:	f043 0301 	orr.w	r3, r3, #1
 800825c:	6713      	str	r3, [r2, #112]	; 0x70
 800825e:	e032      	b.n	80082c6 <HAL_RCC_OscConfig+0x4e6>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d111      	bne.n	800828c <HAL_RCC_OscConfig+0x4ac>
 8008268:	4b06      	ldr	r3, [pc, #24]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 800826a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826c:	4a05      	ldr	r2, [pc, #20]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 800826e:	f023 0301 	bic.w	r3, r3, #1
 8008272:	6713      	str	r3, [r2, #112]	; 0x70
 8008274:	4b03      	ldr	r3, [pc, #12]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 8008276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008278:	4a02      	ldr	r2, [pc, #8]	; (8008284 <HAL_RCC_OscConfig+0x4a4>)
 800827a:	f023 0304 	bic.w	r3, r3, #4
 800827e:	6713      	str	r3, [r2, #112]	; 0x70
 8008280:	e021      	b.n	80082c6 <HAL_RCC_OscConfig+0x4e6>
 8008282:	bf00      	nop
 8008284:	58024400 	.word	0x58024400
 8008288:	58024800 	.word	0x58024800
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	2b05      	cmp	r3, #5
 8008292:	d10c      	bne.n	80082ae <HAL_RCC_OscConfig+0x4ce>
 8008294:	4b83      	ldr	r3, [pc, #524]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 8008296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008298:	4a82      	ldr	r2, [pc, #520]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 800829a:	f043 0304 	orr.w	r3, r3, #4
 800829e:	6713      	str	r3, [r2, #112]	; 0x70
 80082a0:	4b80      	ldr	r3, [pc, #512]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 80082a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082a4:	4a7f      	ldr	r2, [pc, #508]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 80082a6:	f043 0301 	orr.w	r3, r3, #1
 80082aa:	6713      	str	r3, [r2, #112]	; 0x70
 80082ac:	e00b      	b.n	80082c6 <HAL_RCC_OscConfig+0x4e6>
 80082ae:	4b7d      	ldr	r3, [pc, #500]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 80082b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082b2:	4a7c      	ldr	r2, [pc, #496]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 80082b4:	f023 0301 	bic.w	r3, r3, #1
 80082b8:	6713      	str	r3, [r2, #112]	; 0x70
 80082ba:	4b7a      	ldr	r3, [pc, #488]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 80082bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082be:	4a79      	ldr	r2, [pc, #484]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 80082c0:	f023 0304 	bic.w	r3, r3, #4
 80082c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d015      	beq.n	80082fa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ce:	f7fc fc35 	bl	8004b3c <HAL_GetTick>
 80082d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082d4:	e00a      	b.n	80082ec <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082d6:	f7fc fc31 	bl	8004b3c <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d901      	bls.n	80082ec <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e14b      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082ec:	4b6d      	ldr	r3, [pc, #436]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 80082ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f0:	f003 0302 	and.w	r3, r3, #2
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d0ee      	beq.n	80082d6 <HAL_RCC_OscConfig+0x4f6>
 80082f8:	e014      	b.n	8008324 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082fa:	f7fc fc1f 	bl	8004b3c <HAL_GetTick>
 80082fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008300:	e00a      	b.n	8008318 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008302:	f7fc fc1b 	bl	8004b3c <HAL_GetTick>
 8008306:	4602      	mov	r2, r0
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008310:	4293      	cmp	r3, r2
 8008312:	d901      	bls.n	8008318 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e135      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008318:	4b62      	ldr	r3, [pc, #392]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 800831a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831c:	f003 0302 	and.w	r3, r3, #2
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1ee      	bne.n	8008302 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 812a 	beq.w	8008582 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800832e:	4b5d      	ldr	r3, [pc, #372]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008336:	2b18      	cmp	r3, #24
 8008338:	f000 80ba 	beq.w	80084b0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008340:	2b02      	cmp	r3, #2
 8008342:	f040 8095 	bne.w	8008470 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008346:	4b57      	ldr	r3, [pc, #348]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a56      	ldr	r2, [pc, #344]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 800834c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008352:	f7fc fbf3 	bl	8004b3c <HAL_GetTick>
 8008356:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008358:	e008      	b.n	800836c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800835a:	f7fc fbef 	bl	8004b3c <HAL_GetTick>
 800835e:	4602      	mov	r2, r0
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	2b02      	cmp	r3, #2
 8008366:	d901      	bls.n	800836c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e10b      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800836c:	4b4d      	ldr	r3, [pc, #308]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1f0      	bne.n	800835a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008378:	4b4a      	ldr	r3, [pc, #296]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 800837a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800837c:	4b4a      	ldr	r3, [pc, #296]	; (80084a8 <HAL_RCC_OscConfig+0x6c8>)
 800837e:	4013      	ands	r3, r2
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008388:	0112      	lsls	r2, r2, #4
 800838a:	430a      	orrs	r2, r1
 800838c:	4945      	ldr	r1, [pc, #276]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 800838e:	4313      	orrs	r3, r2
 8008390:	628b      	str	r3, [r1, #40]	; 0x28
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008396:	3b01      	subs	r3, #1
 8008398:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a0:	3b01      	subs	r3, #1
 80083a2:	025b      	lsls	r3, r3, #9
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	431a      	orrs	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ac:	3b01      	subs	r3, #1
 80083ae:	041b      	lsls	r3, r3, #16
 80083b0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80083b4:	431a      	orrs	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ba:	3b01      	subs	r3, #1
 80083bc:	061b      	lsls	r3, r3, #24
 80083be:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80083c2:	4938      	ldr	r1, [pc, #224]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 80083c4:	4313      	orrs	r3, r2
 80083c6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80083c8:	4b36      	ldr	r3, [pc, #216]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 80083ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083cc:	4a35      	ldr	r2, [pc, #212]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 80083ce:	f023 0301 	bic.w	r3, r3, #1
 80083d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80083d4:	4b33      	ldr	r3, [pc, #204]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 80083d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083d8:	4b34      	ldr	r3, [pc, #208]	; (80084ac <HAL_RCC_OscConfig+0x6cc>)
 80083da:	4013      	ands	r3, r2
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80083e0:	00d2      	lsls	r2, r2, #3
 80083e2:	4930      	ldr	r1, [pc, #192]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 80083e4:	4313      	orrs	r3, r2
 80083e6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80083e8:	4b2e      	ldr	r3, [pc, #184]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 80083ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ec:	f023 020c 	bic.w	r2, r3, #12
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f4:	492b      	ldr	r1, [pc, #172]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80083fa:	4b2a      	ldr	r3, [pc, #168]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 80083fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fe:	f023 0202 	bic.w	r2, r3, #2
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008406:	4927      	ldr	r1, [pc, #156]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 8008408:	4313      	orrs	r3, r2
 800840a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800840c:	4b25      	ldr	r3, [pc, #148]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 800840e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008410:	4a24      	ldr	r2, [pc, #144]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 8008412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008416:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008418:	4b22      	ldr	r3, [pc, #136]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 800841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841c:	4a21      	ldr	r2, [pc, #132]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 800841e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008422:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008424:	4b1f      	ldr	r3, [pc, #124]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 8008426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008428:	4a1e      	ldr	r2, [pc, #120]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 800842a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800842e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008430:	4b1c      	ldr	r3, [pc, #112]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 8008432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008434:	4a1b      	ldr	r2, [pc, #108]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 8008436:	f043 0301 	orr.w	r3, r3, #1
 800843a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800843c:	4b19      	ldr	r3, [pc, #100]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a18      	ldr	r2, [pc, #96]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 8008442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008448:	f7fc fb78 	bl	8004b3c <HAL_GetTick>
 800844c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800844e:	e008      	b.n	8008462 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008450:	f7fc fb74 	bl	8004b3c <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	2b02      	cmp	r3, #2
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e090      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008462:	4b10      	ldr	r3, [pc, #64]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0f0      	beq.n	8008450 <HAL_RCC_OscConfig+0x670>
 800846e:	e088      	b.n	8008582 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008470:	4b0c      	ldr	r3, [pc, #48]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a0b      	ldr	r2, [pc, #44]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 8008476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800847a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800847c:	f7fc fb5e 	bl	8004b3c <HAL_GetTick>
 8008480:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008482:	e008      	b.n	8008496 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008484:	f7fc fb5a 	bl	8004b3c <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	2b02      	cmp	r3, #2
 8008490:	d901      	bls.n	8008496 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e076      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008496:	4b03      	ldr	r3, [pc, #12]	; (80084a4 <HAL_RCC_OscConfig+0x6c4>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1f0      	bne.n	8008484 <HAL_RCC_OscConfig+0x6a4>
 80084a2:	e06e      	b.n	8008582 <HAL_RCC_OscConfig+0x7a2>
 80084a4:	58024400 	.word	0x58024400
 80084a8:	fffffc0c 	.word	0xfffffc0c
 80084ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80084b0:	4b36      	ldr	r3, [pc, #216]	; (800858c <HAL_RCC_OscConfig+0x7ac>)
 80084b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80084b6:	4b35      	ldr	r3, [pc, #212]	; (800858c <HAL_RCC_OscConfig+0x7ac>)
 80084b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d031      	beq.n	8008528 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	f003 0203 	and.w	r2, r3, #3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d12a      	bne.n	8008528 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	091b      	lsrs	r3, r3, #4
 80084d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084de:	429a      	cmp	r2, r3
 80084e0:	d122      	bne.n	8008528 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d11a      	bne.n	8008528 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	0a5b      	lsrs	r3, r3, #9
 80084f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008500:	429a      	cmp	r2, r3
 8008502:	d111      	bne.n	8008528 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	0c1b      	lsrs	r3, r3, #16
 8008508:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008510:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008512:	429a      	cmp	r2, r3
 8008514:	d108      	bne.n	8008528 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	0e1b      	lsrs	r3, r3, #24
 800851a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008522:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008524:	429a      	cmp	r2, r3
 8008526:	d001      	beq.n	800852c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e02b      	b.n	8008584 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800852c:	4b17      	ldr	r3, [pc, #92]	; (800858c <HAL_RCC_OscConfig+0x7ac>)
 800852e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008530:	08db      	lsrs	r3, r3, #3
 8008532:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008536:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	429a      	cmp	r2, r3
 8008540:	d01f      	beq.n	8008582 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008542:	4b12      	ldr	r3, [pc, #72]	; (800858c <HAL_RCC_OscConfig+0x7ac>)
 8008544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008546:	4a11      	ldr	r2, [pc, #68]	; (800858c <HAL_RCC_OscConfig+0x7ac>)
 8008548:	f023 0301 	bic.w	r3, r3, #1
 800854c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800854e:	f7fc faf5 	bl	8004b3c <HAL_GetTick>
 8008552:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008554:	bf00      	nop
 8008556:	f7fc faf1 	bl	8004b3c <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	4293      	cmp	r3, r2
 8008560:	d0f9      	beq.n	8008556 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008562:	4b0a      	ldr	r3, [pc, #40]	; (800858c <HAL_RCC_OscConfig+0x7ac>)
 8008564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008566:	4b0a      	ldr	r3, [pc, #40]	; (8008590 <HAL_RCC_OscConfig+0x7b0>)
 8008568:	4013      	ands	r3, r2
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800856e:	00d2      	lsls	r2, r2, #3
 8008570:	4906      	ldr	r1, [pc, #24]	; (800858c <HAL_RCC_OscConfig+0x7ac>)
 8008572:	4313      	orrs	r3, r2
 8008574:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008576:	4b05      	ldr	r3, [pc, #20]	; (800858c <HAL_RCC_OscConfig+0x7ac>)
 8008578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857a:	4a04      	ldr	r2, [pc, #16]	; (800858c <HAL_RCC_OscConfig+0x7ac>)
 800857c:	f043 0301 	orr.w	r3, r3, #1
 8008580:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3730      	adds	r7, #48	; 0x30
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	58024400 	.word	0x58024400
 8008590:	ffff0007 	.word	0xffff0007

08008594 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e19c      	b.n	80088e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80085a8:	4b8a      	ldr	r3, [pc, #552]	; (80087d4 <HAL_RCC_ClockConfig+0x240>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 030f 	and.w	r3, r3, #15
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d910      	bls.n	80085d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085b6:	4b87      	ldr	r3, [pc, #540]	; (80087d4 <HAL_RCC_ClockConfig+0x240>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f023 020f 	bic.w	r2, r3, #15
 80085be:	4985      	ldr	r1, [pc, #532]	; (80087d4 <HAL_RCC_ClockConfig+0x240>)
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085c6:	4b83      	ldr	r3, [pc, #524]	; (80087d4 <HAL_RCC_ClockConfig+0x240>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 030f 	and.w	r3, r3, #15
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d001      	beq.n	80085d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	e184      	b.n	80088e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0304 	and.w	r3, r3, #4
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d010      	beq.n	8008606 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	691a      	ldr	r2, [r3, #16]
 80085e8:	4b7b      	ldr	r3, [pc, #492]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d908      	bls.n	8008606 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085f4:	4b78      	ldr	r3, [pc, #480]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	4975      	ldr	r1, [pc, #468]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 8008602:	4313      	orrs	r3, r2
 8008604:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 0308 	and.w	r3, r3, #8
 800860e:	2b00      	cmp	r3, #0
 8008610:	d010      	beq.n	8008634 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	695a      	ldr	r2, [r3, #20]
 8008616:	4b70      	ldr	r3, [pc, #448]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800861e:	429a      	cmp	r2, r3
 8008620:	d908      	bls.n	8008634 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008622:	4b6d      	ldr	r3, [pc, #436]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 8008624:	69db      	ldr	r3, [r3, #28]
 8008626:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	496a      	ldr	r1, [pc, #424]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 8008630:	4313      	orrs	r3, r2
 8008632:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0310 	and.w	r3, r3, #16
 800863c:	2b00      	cmp	r3, #0
 800863e:	d010      	beq.n	8008662 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	699a      	ldr	r2, [r3, #24]
 8008644:	4b64      	ldr	r3, [pc, #400]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800864c:	429a      	cmp	r2, r3
 800864e:	d908      	bls.n	8008662 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008650:	4b61      	ldr	r3, [pc, #388]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	495e      	ldr	r1, [pc, #376]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 800865e:	4313      	orrs	r3, r2
 8008660:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0320 	and.w	r3, r3, #32
 800866a:	2b00      	cmp	r3, #0
 800866c:	d010      	beq.n	8008690 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	69da      	ldr	r2, [r3, #28]
 8008672:	4b59      	ldr	r3, [pc, #356]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800867a:	429a      	cmp	r2, r3
 800867c:	d908      	bls.n	8008690 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800867e:	4b56      	ldr	r3, [pc, #344]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	69db      	ldr	r3, [r3, #28]
 800868a:	4953      	ldr	r1, [pc, #332]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 800868c:	4313      	orrs	r3, r2
 800868e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0302 	and.w	r3, r3, #2
 8008698:	2b00      	cmp	r3, #0
 800869a:	d010      	beq.n	80086be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68da      	ldr	r2, [r3, #12]
 80086a0:	4b4d      	ldr	r3, [pc, #308]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	f003 030f 	and.w	r3, r3, #15
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d908      	bls.n	80086be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086ac:	4b4a      	ldr	r3, [pc, #296]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	f023 020f 	bic.w	r2, r3, #15
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	4947      	ldr	r1, [pc, #284]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d055      	beq.n	8008776 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80086ca:	4b43      	ldr	r3, [pc, #268]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	4940      	ldr	r1, [pc, #256]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 80086d8:	4313      	orrs	r3, r2
 80086da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d107      	bne.n	80086f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086e4:	4b3c      	ldr	r3, [pc, #240]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d121      	bne.n	8008734 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e0f6      	b.n	80088e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	d107      	bne.n	800870c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086fc:	4b36      	ldr	r3, [pc, #216]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d115      	bne.n	8008734 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e0ea      	b.n	80088e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d107      	bne.n	8008724 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008714:	4b30      	ldr	r3, [pc, #192]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800871c:	2b00      	cmp	r3, #0
 800871e:	d109      	bne.n	8008734 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e0de      	b.n	80088e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008724:	4b2c      	ldr	r3, [pc, #176]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0304 	and.w	r3, r3, #4
 800872c:	2b00      	cmp	r3, #0
 800872e:	d101      	bne.n	8008734 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	e0d6      	b.n	80088e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008734:	4b28      	ldr	r3, [pc, #160]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	f023 0207 	bic.w	r2, r3, #7
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	4925      	ldr	r1, [pc, #148]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 8008742:	4313      	orrs	r3, r2
 8008744:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008746:	f7fc f9f9 	bl	8004b3c <HAL_GetTick>
 800874a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800874c:	e00a      	b.n	8008764 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800874e:	f7fc f9f5 	bl	8004b3c <HAL_GetTick>
 8008752:	4602      	mov	r2, r0
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	f241 3288 	movw	r2, #5000	; 0x1388
 800875c:	4293      	cmp	r3, r2
 800875e:	d901      	bls.n	8008764 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	e0be      	b.n	80088e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008764:	4b1c      	ldr	r3, [pc, #112]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	00db      	lsls	r3, r3, #3
 8008772:	429a      	cmp	r2, r3
 8008774:	d1eb      	bne.n	800874e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0302 	and.w	r3, r3, #2
 800877e:	2b00      	cmp	r3, #0
 8008780:	d010      	beq.n	80087a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	68da      	ldr	r2, [r3, #12]
 8008786:	4b14      	ldr	r3, [pc, #80]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	f003 030f 	and.w	r3, r3, #15
 800878e:	429a      	cmp	r2, r3
 8008790:	d208      	bcs.n	80087a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008792:	4b11      	ldr	r3, [pc, #68]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	f023 020f 	bic.w	r2, r3, #15
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	490e      	ldr	r1, [pc, #56]	; (80087d8 <HAL_RCC_ClockConfig+0x244>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80087a4:	4b0b      	ldr	r3, [pc, #44]	; (80087d4 <HAL_RCC_ClockConfig+0x240>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 030f 	and.w	r3, r3, #15
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d214      	bcs.n	80087dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087b2:	4b08      	ldr	r3, [pc, #32]	; (80087d4 <HAL_RCC_ClockConfig+0x240>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f023 020f 	bic.w	r2, r3, #15
 80087ba:	4906      	ldr	r1, [pc, #24]	; (80087d4 <HAL_RCC_ClockConfig+0x240>)
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	4313      	orrs	r3, r2
 80087c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087c2:	4b04      	ldr	r3, [pc, #16]	; (80087d4 <HAL_RCC_ClockConfig+0x240>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 030f 	and.w	r3, r3, #15
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d005      	beq.n	80087dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e086      	b.n	80088e2 <HAL_RCC_ClockConfig+0x34e>
 80087d4:	52002000 	.word	0x52002000
 80087d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0304 	and.w	r3, r3, #4
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d010      	beq.n	800880a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	691a      	ldr	r2, [r3, #16]
 80087ec:	4b3f      	ldr	r3, [pc, #252]	; (80088ec <HAL_RCC_ClockConfig+0x358>)
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d208      	bcs.n	800880a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80087f8:	4b3c      	ldr	r3, [pc, #240]	; (80088ec <HAL_RCC_ClockConfig+0x358>)
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	4939      	ldr	r1, [pc, #228]	; (80088ec <HAL_RCC_ClockConfig+0x358>)
 8008806:	4313      	orrs	r3, r2
 8008808:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0308 	and.w	r3, r3, #8
 8008812:	2b00      	cmp	r3, #0
 8008814:	d010      	beq.n	8008838 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	695a      	ldr	r2, [r3, #20]
 800881a:	4b34      	ldr	r3, [pc, #208]	; (80088ec <HAL_RCC_ClockConfig+0x358>)
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008822:	429a      	cmp	r2, r3
 8008824:	d208      	bcs.n	8008838 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008826:	4b31      	ldr	r3, [pc, #196]	; (80088ec <HAL_RCC_ClockConfig+0x358>)
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	492e      	ldr	r1, [pc, #184]	; (80088ec <HAL_RCC_ClockConfig+0x358>)
 8008834:	4313      	orrs	r3, r2
 8008836:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 0310 	and.w	r3, r3, #16
 8008840:	2b00      	cmp	r3, #0
 8008842:	d010      	beq.n	8008866 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	699a      	ldr	r2, [r3, #24]
 8008848:	4b28      	ldr	r3, [pc, #160]	; (80088ec <HAL_RCC_ClockConfig+0x358>)
 800884a:	69db      	ldr	r3, [r3, #28]
 800884c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008850:	429a      	cmp	r2, r3
 8008852:	d208      	bcs.n	8008866 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008854:	4b25      	ldr	r3, [pc, #148]	; (80088ec <HAL_RCC_ClockConfig+0x358>)
 8008856:	69db      	ldr	r3, [r3, #28]
 8008858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	4922      	ldr	r1, [pc, #136]	; (80088ec <HAL_RCC_ClockConfig+0x358>)
 8008862:	4313      	orrs	r3, r2
 8008864:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0320 	and.w	r3, r3, #32
 800886e:	2b00      	cmp	r3, #0
 8008870:	d010      	beq.n	8008894 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	69da      	ldr	r2, [r3, #28]
 8008876:	4b1d      	ldr	r3, [pc, #116]	; (80088ec <HAL_RCC_ClockConfig+0x358>)
 8008878:	6a1b      	ldr	r3, [r3, #32]
 800887a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800887e:	429a      	cmp	r2, r3
 8008880:	d208      	bcs.n	8008894 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008882:	4b1a      	ldr	r3, [pc, #104]	; (80088ec <HAL_RCC_ClockConfig+0x358>)
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	4917      	ldr	r1, [pc, #92]	; (80088ec <HAL_RCC_ClockConfig+0x358>)
 8008890:	4313      	orrs	r3, r2
 8008892:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008894:	f000 f834 	bl	8008900 <HAL_RCC_GetSysClockFreq>
 8008898:	4602      	mov	r2, r0
 800889a:	4b14      	ldr	r3, [pc, #80]	; (80088ec <HAL_RCC_ClockConfig+0x358>)
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	0a1b      	lsrs	r3, r3, #8
 80088a0:	f003 030f 	and.w	r3, r3, #15
 80088a4:	4912      	ldr	r1, [pc, #72]	; (80088f0 <HAL_RCC_ClockConfig+0x35c>)
 80088a6:	5ccb      	ldrb	r3, [r1, r3]
 80088a8:	f003 031f 	and.w	r3, r3, #31
 80088ac:	fa22 f303 	lsr.w	r3, r2, r3
 80088b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088b2:	4b0e      	ldr	r3, [pc, #56]	; (80088ec <HAL_RCC_ClockConfig+0x358>)
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	f003 030f 	and.w	r3, r3, #15
 80088ba:	4a0d      	ldr	r2, [pc, #52]	; (80088f0 <HAL_RCC_ClockConfig+0x35c>)
 80088bc:	5cd3      	ldrb	r3, [r2, r3]
 80088be:	f003 031f 	and.w	r3, r3, #31
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	fa22 f303 	lsr.w	r3, r2, r3
 80088c8:	4a0a      	ldr	r2, [pc, #40]	; (80088f4 <HAL_RCC_ClockConfig+0x360>)
 80088ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80088cc:	4a0a      	ldr	r2, [pc, #40]	; (80088f8 <HAL_RCC_ClockConfig+0x364>)
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80088d2:	4b0a      	ldr	r3, [pc, #40]	; (80088fc <HAL_RCC_ClockConfig+0x368>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fc f8e6 	bl	8004aa8 <HAL_InitTick>
 80088dc:	4603      	mov	r3, r0
 80088de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3718      	adds	r7, #24
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	58024400 	.word	0x58024400
 80088f0:	0800e9e4 	.word	0x0800e9e4
 80088f4:	2400002c 	.word	0x2400002c
 80088f8:	24000028 	.word	0x24000028
 80088fc:	24000030 	.word	0x24000030

08008900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008900:	b480      	push	{r7}
 8008902:	b089      	sub	sp, #36	; 0x24
 8008904:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008906:	4bb3      	ldr	r3, [pc, #716]	; (8008bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800890e:	2b18      	cmp	r3, #24
 8008910:	f200 8155 	bhi.w	8008bbe <HAL_RCC_GetSysClockFreq+0x2be>
 8008914:	a201      	add	r2, pc, #4	; (adr r2, 800891c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891a:	bf00      	nop
 800891c:	08008981 	.word	0x08008981
 8008920:	08008bbf 	.word	0x08008bbf
 8008924:	08008bbf 	.word	0x08008bbf
 8008928:	08008bbf 	.word	0x08008bbf
 800892c:	08008bbf 	.word	0x08008bbf
 8008930:	08008bbf 	.word	0x08008bbf
 8008934:	08008bbf 	.word	0x08008bbf
 8008938:	08008bbf 	.word	0x08008bbf
 800893c:	080089a7 	.word	0x080089a7
 8008940:	08008bbf 	.word	0x08008bbf
 8008944:	08008bbf 	.word	0x08008bbf
 8008948:	08008bbf 	.word	0x08008bbf
 800894c:	08008bbf 	.word	0x08008bbf
 8008950:	08008bbf 	.word	0x08008bbf
 8008954:	08008bbf 	.word	0x08008bbf
 8008958:	08008bbf 	.word	0x08008bbf
 800895c:	080089ad 	.word	0x080089ad
 8008960:	08008bbf 	.word	0x08008bbf
 8008964:	08008bbf 	.word	0x08008bbf
 8008968:	08008bbf 	.word	0x08008bbf
 800896c:	08008bbf 	.word	0x08008bbf
 8008970:	08008bbf 	.word	0x08008bbf
 8008974:	08008bbf 	.word	0x08008bbf
 8008978:	08008bbf 	.word	0x08008bbf
 800897c:	080089b3 	.word	0x080089b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008980:	4b94      	ldr	r3, [pc, #592]	; (8008bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0320 	and.w	r3, r3, #32
 8008988:	2b00      	cmp	r3, #0
 800898a:	d009      	beq.n	80089a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800898c:	4b91      	ldr	r3, [pc, #580]	; (8008bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	08db      	lsrs	r3, r3, #3
 8008992:	f003 0303 	and.w	r3, r3, #3
 8008996:	4a90      	ldr	r2, [pc, #576]	; (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008998:	fa22 f303 	lsr.w	r3, r2, r3
 800899c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800899e:	e111      	b.n	8008bc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80089a0:	4b8d      	ldr	r3, [pc, #564]	; (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089a2:	61bb      	str	r3, [r7, #24]
      break;
 80089a4:	e10e      	b.n	8008bc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80089a6:	4b8d      	ldr	r3, [pc, #564]	; (8008bdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80089a8:	61bb      	str	r3, [r7, #24]
      break;
 80089aa:	e10b      	b.n	8008bc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80089ac:	4b8c      	ldr	r3, [pc, #560]	; (8008be0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80089ae:	61bb      	str	r3, [r7, #24]
      break;
 80089b0:	e108      	b.n	8008bc4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089b2:	4b88      	ldr	r3, [pc, #544]	; (8008bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b6:	f003 0303 	and.w	r3, r3, #3
 80089ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80089bc:	4b85      	ldr	r3, [pc, #532]	; (8008bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c0:	091b      	lsrs	r3, r3, #4
 80089c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80089c8:	4b82      	ldr	r3, [pc, #520]	; (8008bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089cc:	f003 0301 	and.w	r3, r3, #1
 80089d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80089d2:	4b80      	ldr	r3, [pc, #512]	; (8008bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d6:	08db      	lsrs	r3, r3, #3
 80089d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	fb02 f303 	mul.w	r3, r2, r3
 80089e2:	ee07 3a90 	vmov	s15, r3
 80089e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 80e1 	beq.w	8008bb8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	f000 8083 	beq.w	8008b04 <HAL_RCC_GetSysClockFreq+0x204>
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	f200 80a1 	bhi.w	8008b48 <HAL_RCC_GetSysClockFreq+0x248>
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d003      	beq.n	8008a14 <HAL_RCC_GetSysClockFreq+0x114>
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d056      	beq.n	8008ac0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008a12:	e099      	b.n	8008b48 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a14:	4b6f      	ldr	r3, [pc, #444]	; (8008bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 0320 	and.w	r3, r3, #32
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d02d      	beq.n	8008a7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a20:	4b6c      	ldr	r3, [pc, #432]	; (8008bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	08db      	lsrs	r3, r3, #3
 8008a26:	f003 0303 	and.w	r3, r3, #3
 8008a2a:	4a6b      	ldr	r2, [pc, #428]	; (8008bd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	ee07 3a90 	vmov	s15, r3
 8008a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	ee07 3a90 	vmov	s15, r3
 8008a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a4a:	4b62      	ldr	r3, [pc, #392]	; (8008bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a52:	ee07 3a90 	vmov	s15, r3
 8008a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a5e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008a7a:	e087      	b.n	8008b8c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	ee07 3a90 	vmov	s15, r3
 8008a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a86:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008be8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a8e:	4b51      	ldr	r3, [pc, #324]	; (8008bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a96:	ee07 3a90 	vmov	s15, r3
 8008a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aa2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008abe:	e065      	b.n	8008b8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aca:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008bec <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ad2:	4b40      	ldr	r3, [pc, #256]	; (8008bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ada:	ee07 3a90 	vmov	s15, r3
 8008ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ae6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008afe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b02:	e043      	b.n	8008b8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	ee07 3a90 	vmov	s15, r3
 8008b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b0e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008bf0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b16:	4b2f      	ldr	r3, [pc, #188]	; (8008bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b1e:	ee07 3a90 	vmov	s15, r3
 8008b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b26:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b2a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b46:	e021      	b.n	8008b8c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	ee07 3a90 	vmov	s15, r3
 8008b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b52:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008bec <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b5a:	4b1e      	ldr	r3, [pc, #120]	; (8008bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b62:	ee07 3a90 	vmov	s15, r3
 8008b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b6e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b8a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008b8c:	4b11      	ldr	r3, [pc, #68]	; (8008bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b90:	0a5b      	lsrs	r3, r3, #9
 8008b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b96:	3301      	adds	r3, #1
 8008b98:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	ee07 3a90 	vmov	s15, r3
 8008ba0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ba4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bb0:	ee17 3a90 	vmov	r3, s15
 8008bb4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008bb6:	e005      	b.n	8008bc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	61bb      	str	r3, [r7, #24]
      break;
 8008bbc:	e002      	b.n	8008bc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008bbe:	4b07      	ldr	r3, [pc, #28]	; (8008bdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008bc0:	61bb      	str	r3, [r7, #24]
      break;
 8008bc2:	bf00      	nop
  }

  return sysclockfreq;
 8008bc4:	69bb      	ldr	r3, [r7, #24]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3724      	adds	r7, #36	; 0x24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	58024400 	.word	0x58024400
 8008bd8:	03d09000 	.word	0x03d09000
 8008bdc:	003d0900 	.word	0x003d0900
 8008be0:	007a1200 	.word	0x007a1200
 8008be4:	46000000 	.word	0x46000000
 8008be8:	4c742400 	.word	0x4c742400
 8008bec:	4a742400 	.word	0x4a742400
 8008bf0:	4af42400 	.word	0x4af42400

08008bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008bfa:	f7ff fe81 	bl	8008900 <HAL_RCC_GetSysClockFreq>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	4b10      	ldr	r3, [pc, #64]	; (8008c44 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	0a1b      	lsrs	r3, r3, #8
 8008c06:	f003 030f 	and.w	r3, r3, #15
 8008c0a:	490f      	ldr	r1, [pc, #60]	; (8008c48 <HAL_RCC_GetHCLKFreq+0x54>)
 8008c0c:	5ccb      	ldrb	r3, [r1, r3]
 8008c0e:	f003 031f 	and.w	r3, r3, #31
 8008c12:	fa22 f303 	lsr.w	r3, r2, r3
 8008c16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c18:	4b0a      	ldr	r3, [pc, #40]	; (8008c44 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	f003 030f 	and.w	r3, r3, #15
 8008c20:	4a09      	ldr	r2, [pc, #36]	; (8008c48 <HAL_RCC_GetHCLKFreq+0x54>)
 8008c22:	5cd3      	ldrb	r3, [r2, r3]
 8008c24:	f003 031f 	and.w	r3, r3, #31
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c2e:	4a07      	ldr	r2, [pc, #28]	; (8008c4c <HAL_RCC_GetHCLKFreq+0x58>)
 8008c30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c32:	4a07      	ldr	r2, [pc, #28]	; (8008c50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008c38:	4b04      	ldr	r3, [pc, #16]	; (8008c4c <HAL_RCC_GetHCLKFreq+0x58>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	58024400 	.word	0x58024400
 8008c48:	0800e9e4 	.word	0x0800e9e4
 8008c4c:	2400002c 	.word	0x2400002c
 8008c50:	24000028 	.word	0x24000028

08008c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008c58:	f7ff ffcc 	bl	8008bf4 <HAL_RCC_GetHCLKFreq>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	4b06      	ldr	r3, [pc, #24]	; (8008c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	091b      	lsrs	r3, r3, #4
 8008c64:	f003 0307 	and.w	r3, r3, #7
 8008c68:	4904      	ldr	r1, [pc, #16]	; (8008c7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c6a:	5ccb      	ldrb	r3, [r1, r3]
 8008c6c:	f003 031f 	and.w	r3, r3, #31
 8008c70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	58024400 	.word	0x58024400
 8008c7c:	0800e9e4 	.word	0x0800e9e4

08008c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008c84:	f7ff ffb6 	bl	8008bf4 <HAL_RCC_GetHCLKFreq>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	4b06      	ldr	r3, [pc, #24]	; (8008ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	0a1b      	lsrs	r3, r3, #8
 8008c90:	f003 0307 	and.w	r3, r3, #7
 8008c94:	4904      	ldr	r1, [pc, #16]	; (8008ca8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c96:	5ccb      	ldrb	r3, [r1, r3]
 8008c98:	f003 031f 	and.w	r3, r3, #31
 8008c9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	58024400 	.word	0x58024400
 8008ca8:	0800e9e4 	.word	0x0800e9e4

08008cac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cb0:	b0c6      	sub	sp, #280	; 0x118
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008cd0:	2500      	movs	r5, #0
 8008cd2:	ea54 0305 	orrs.w	r3, r4, r5
 8008cd6:	d049      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ce2:	d02f      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008ce4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ce8:	d828      	bhi.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008cea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cee:	d01a      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008cf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cf4:	d822      	bhi.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008cfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cfe:	d007      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008d00:	e01c      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d02:	4bab      	ldr	r3, [pc, #684]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d06:	4aaa      	ldr	r2, [pc, #680]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d0e:	e01a      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d14:	3308      	adds	r3, #8
 8008d16:	2102      	movs	r1, #2
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f001 fc25 	bl	800a568 <RCCEx_PLL2_Config>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d24:	e00f      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d2a:	3328      	adds	r3, #40	; 0x28
 8008d2c:	2102      	movs	r1, #2
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f001 fccc 	bl	800a6cc <RCCEx_PLL3_Config>
 8008d34:	4603      	mov	r3, r0
 8008d36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d3a:	e004      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008d42:	e000      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10a      	bne.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d4e:	4b98      	ldr	r3, [pc, #608]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d52:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d5c:	4a94      	ldr	r2, [pc, #592]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d5e:	430b      	orrs	r3, r1
 8008d60:	6513      	str	r3, [r2, #80]	; 0x50
 8008d62:	e003      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008d68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d74:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008d78:	f04f 0900 	mov.w	r9, #0
 8008d7c:	ea58 0309 	orrs.w	r3, r8, r9
 8008d80:	d047      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d88:	2b04      	cmp	r3, #4
 8008d8a:	d82a      	bhi.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008d8c:	a201      	add	r2, pc, #4	; (adr r2, 8008d94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d92:	bf00      	nop
 8008d94:	08008da9 	.word	0x08008da9
 8008d98:	08008db7 	.word	0x08008db7
 8008d9c:	08008dcd 	.word	0x08008dcd
 8008da0:	08008deb 	.word	0x08008deb
 8008da4:	08008deb 	.word	0x08008deb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008da8:	4b81      	ldr	r3, [pc, #516]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dac:	4a80      	ldr	r2, [pc, #512]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008db2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008db4:	e01a      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dba:	3308      	adds	r3, #8
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f001 fbd2 	bl	800a568 <RCCEx_PLL2_Config>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008dca:	e00f      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dd0:	3328      	adds	r3, #40	; 0x28
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f001 fc79 	bl	800a6cc <RCCEx_PLL3_Config>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008de0:	e004      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008de8:	e000      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d10a      	bne.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008df4:	4b6e      	ldr	r3, [pc, #440]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008df8:	f023 0107 	bic.w	r1, r3, #7
 8008dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e02:	4a6b      	ldr	r2, [pc, #428]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e04:	430b      	orrs	r3, r1
 8008e06:	6513      	str	r3, [r2, #80]	; 0x50
 8008e08:	e003      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e0e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8008e1e:	f04f 0b00 	mov.w	fp, #0
 8008e22:	ea5a 030b 	orrs.w	r3, sl, fp
 8008e26:	d05b      	beq.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e30:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008e34:	d03b      	beq.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008e36:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008e3a:	d834      	bhi.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e40:	d037      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008e42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e46:	d82e      	bhi.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e48:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e4c:	d033      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008e4e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e52:	d828      	bhi.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e58:	d01a      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e5e:	d822      	bhi.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d003      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008e64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e68:	d007      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008e6a:	e01c      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e6c:	4b50      	ldr	r3, [pc, #320]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e70:	4a4f      	ldr	r2, [pc, #316]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e78:	e01e      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e7e:	3308      	adds	r3, #8
 8008e80:	2100      	movs	r1, #0
 8008e82:	4618      	mov	r0, r3
 8008e84:	f001 fb70 	bl	800a568 <RCCEx_PLL2_Config>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008e8e:	e013      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e94:	3328      	adds	r3, #40	; 0x28
 8008e96:	2100      	movs	r1, #0
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f001 fc17 	bl	800a6cc <RCCEx_PLL3_Config>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ea4:	e008      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008eac:	e004      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008eae:	bf00      	nop
 8008eb0:	e002      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008eb2:	bf00      	nop
 8008eb4:	e000      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008eb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10b      	bne.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008ec0:	4b3b      	ldr	r3, [pc, #236]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ec4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ecc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008ed0:	4a37      	ldr	r2, [pc, #220]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ed2:	430b      	orrs	r3, r1
 8008ed4:	6593      	str	r3, [r2, #88]	; 0x58
 8008ed6:	e003      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ed8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008edc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008eec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008ef6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008efa:	460b      	mov	r3, r1
 8008efc:	4313      	orrs	r3, r2
 8008efe:	d05d      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f08:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008f0c:	d03b      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008f0e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008f12:	d834      	bhi.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f18:	d037      	beq.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008f1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f1e:	d82e      	bhi.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f24:	d033      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008f26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f2a:	d828      	bhi.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f30:	d01a      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008f32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f36:	d822      	bhi.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d003      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f40:	d007      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008f42:	e01c      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f44:	4b1a      	ldr	r3, [pc, #104]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f48:	4a19      	ldr	r2, [pc, #100]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f50:	e01e      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f56:	3308      	adds	r3, #8
 8008f58:	2100      	movs	r1, #0
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f001 fb04 	bl	800a568 <RCCEx_PLL2_Config>
 8008f60:	4603      	mov	r3, r0
 8008f62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008f66:	e013      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f6c:	3328      	adds	r3, #40	; 0x28
 8008f6e:	2100      	movs	r1, #0
 8008f70:	4618      	mov	r0, r3
 8008f72:	f001 fbab 	bl	800a6cc <RCCEx_PLL3_Config>
 8008f76:	4603      	mov	r3, r0
 8008f78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f7c:	e008      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008f84:	e004      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f86:	bf00      	nop
 8008f88:	e002      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f8a:	bf00      	nop
 8008f8c:	e000      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10d      	bne.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008f98:	4b05      	ldr	r3, [pc, #20]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f9c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fa4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008fa8:	4a01      	ldr	r2, [pc, #4]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008faa:	430b      	orrs	r3, r1
 8008fac:	6593      	str	r3, [r2, #88]	; 0x58
 8008fae:	e005      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008fb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008fb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008fc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008fd2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	d03a      	beq.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fe2:	2b30      	cmp	r3, #48	; 0x30
 8008fe4:	d01f      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008fe6:	2b30      	cmp	r3, #48	; 0x30
 8008fe8:	d819      	bhi.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008fea:	2b20      	cmp	r3, #32
 8008fec:	d00c      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008fee:	2b20      	cmp	r3, #32
 8008ff0:	d815      	bhi.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d019      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008ff6:	2b10      	cmp	r3, #16
 8008ff8:	d111      	bne.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ffa:	4baa      	ldr	r3, [pc, #680]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffe:	4aa9      	ldr	r2, [pc, #676]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009004:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009006:	e011      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800900c:	3308      	adds	r3, #8
 800900e:	2102      	movs	r1, #2
 8009010:	4618      	mov	r0, r3
 8009012:	f001 faa9 	bl	800a568 <RCCEx_PLL2_Config>
 8009016:	4603      	mov	r3, r0
 8009018:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800901c:	e006      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009024:	e002      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009026:	bf00      	nop
 8009028:	e000      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800902a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800902c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009030:	2b00      	cmp	r3, #0
 8009032:	d10a      	bne.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009034:	4b9b      	ldr	r3, [pc, #620]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009038:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800903c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009042:	4a98      	ldr	r2, [pc, #608]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009044:	430b      	orrs	r3, r1
 8009046:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009048:	e003      	b.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800904a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800904e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800905e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009062:	2300      	movs	r3, #0
 8009064:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009068:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800906c:	460b      	mov	r3, r1
 800906e:	4313      	orrs	r3, r2
 8009070:	d051      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800907c:	d035      	beq.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800907e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009082:	d82e      	bhi.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009084:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009088:	d031      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x442>
 800908a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800908e:	d828      	bhi.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009094:	d01a      	beq.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800909a:	d822      	bhi.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800909c:	2b00      	cmp	r3, #0
 800909e:	d003      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80090a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090a4:	d007      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80090a6:	e01c      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090a8:	4b7e      	ldr	r3, [pc, #504]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ac:	4a7d      	ldr	r2, [pc, #500]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090b4:	e01c      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090ba:	3308      	adds	r3, #8
 80090bc:	2100      	movs	r1, #0
 80090be:	4618      	mov	r0, r3
 80090c0:	f001 fa52 	bl	800a568 <RCCEx_PLL2_Config>
 80090c4:	4603      	mov	r3, r0
 80090c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090ca:	e011      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090d0:	3328      	adds	r3, #40	; 0x28
 80090d2:	2100      	movs	r1, #0
 80090d4:	4618      	mov	r0, r3
 80090d6:	f001 faf9 	bl	800a6cc <RCCEx_PLL3_Config>
 80090da:	4603      	mov	r3, r0
 80090dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090e0:	e006      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80090e8:	e002      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80090ea:	bf00      	nop
 80090ec:	e000      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80090ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10a      	bne.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80090f8:	4b6a      	ldr	r3, [pc, #424]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090fc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009106:	4a67      	ldr	r2, [pc, #412]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009108:	430b      	orrs	r3, r1
 800910a:	6513      	str	r3, [r2, #80]	; 0x50
 800910c:	e003      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800910e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009112:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009122:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009126:	2300      	movs	r3, #0
 8009128:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800912c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009130:	460b      	mov	r3, r1
 8009132:	4313      	orrs	r3, r2
 8009134:	d053      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009136:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800913a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800913c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009140:	d033      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009142:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009146:	d82c      	bhi.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009148:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800914c:	d02f      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x502>
 800914e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009152:	d826      	bhi.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009154:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009158:	d02b      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800915a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800915e:	d820      	bhi.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009160:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009164:	d012      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009166:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800916a:	d81a      	bhi.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800916c:	2b00      	cmp	r3, #0
 800916e:	d022      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009174:	d115      	bne.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800917a:	3308      	adds	r3, #8
 800917c:	2101      	movs	r1, #1
 800917e:	4618      	mov	r0, r3
 8009180:	f001 f9f2 	bl	800a568 <RCCEx_PLL2_Config>
 8009184:	4603      	mov	r3, r0
 8009186:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800918a:	e015      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800918c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009190:	3328      	adds	r3, #40	; 0x28
 8009192:	2101      	movs	r1, #1
 8009194:	4618      	mov	r0, r3
 8009196:	f001 fa99 	bl	800a6cc <RCCEx_PLL3_Config>
 800919a:	4603      	mov	r3, r0
 800919c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80091a0:	e00a      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80091a8:	e006      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091aa:	bf00      	nop
 80091ac:	e004      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091ae:	bf00      	nop
 80091b0:	e002      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091b2:	bf00      	nop
 80091b4:	e000      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10a      	bne.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80091c0:	4b38      	ldr	r3, [pc, #224]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091c4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80091c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091ce:	4a35      	ldr	r2, [pc, #212]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091d0:	430b      	orrs	r3, r1
 80091d2:	6513      	str	r3, [r2, #80]	; 0x50
 80091d4:	e003      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80091da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80091de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80091ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80091ee:	2300      	movs	r3, #0
 80091f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80091f4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80091f8:	460b      	mov	r3, r1
 80091fa:	4313      	orrs	r3, r2
 80091fc:	d058      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80091fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009202:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009206:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800920a:	d033      	beq.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800920c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009210:	d82c      	bhi.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009216:	d02f      	beq.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800921c:	d826      	bhi.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800921e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009222:	d02b      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009224:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009228:	d820      	bhi.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800922a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800922e:	d012      	beq.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009234:	d81a      	bhi.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009236:	2b00      	cmp	r3, #0
 8009238:	d022      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800923a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800923e:	d115      	bne.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009244:	3308      	adds	r3, #8
 8009246:	2101      	movs	r1, #1
 8009248:	4618      	mov	r0, r3
 800924a:	f001 f98d 	bl	800a568 <RCCEx_PLL2_Config>
 800924e:	4603      	mov	r3, r0
 8009250:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009254:	e015      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800925a:	3328      	adds	r3, #40	; 0x28
 800925c:	2101      	movs	r1, #1
 800925e:	4618      	mov	r0, r3
 8009260:	f001 fa34 	bl	800a6cc <RCCEx_PLL3_Config>
 8009264:	4603      	mov	r3, r0
 8009266:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800926a:	e00a      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009272:	e006      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009274:	bf00      	nop
 8009276:	e004      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009278:	bf00      	nop
 800927a:	e002      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800927c:	bf00      	nop
 800927e:	e000      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009282:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10e      	bne.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800928a:	4b06      	ldr	r3, [pc, #24]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800928c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800928e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009296:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800929a:	4a02      	ldr	r2, [pc, #8]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800929c:	430b      	orrs	r3, r1
 800929e:	6593      	str	r3, [r2, #88]	; 0x58
 80092a0:	e006      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80092a2:	bf00      	nop
 80092a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80092ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80092b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80092bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092c0:	2300      	movs	r3, #0
 80092c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80092c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80092ca:	460b      	mov	r3, r1
 80092cc:	4313      	orrs	r3, r2
 80092ce:	d037      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80092d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092da:	d00e      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80092dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092e0:	d816      	bhi.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d018      	beq.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80092e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092ea:	d111      	bne.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092ec:	4bc4      	ldr	r3, [pc, #784]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f0:	4ac3      	ldr	r2, [pc, #780]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80092f8:	e00f      	b.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092fe:	3308      	adds	r3, #8
 8009300:	2101      	movs	r1, #1
 8009302:	4618      	mov	r0, r3
 8009304:	f001 f930 	bl	800a568 <RCCEx_PLL2_Config>
 8009308:	4603      	mov	r3, r0
 800930a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800930e:	e004      	b.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009316:	e000      	b.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800931a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800931e:	2b00      	cmp	r3, #0
 8009320:	d10a      	bne.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009322:	4bb7      	ldr	r3, [pc, #732]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009326:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800932a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800932e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009330:	4ab3      	ldr	r2, [pc, #716]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009332:	430b      	orrs	r3, r1
 8009334:	6513      	str	r3, [r2, #80]	; 0x50
 8009336:	e003      	b.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009338:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800933c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009348:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800934c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009350:	2300      	movs	r3, #0
 8009352:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009356:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800935a:	460b      	mov	r3, r1
 800935c:	4313      	orrs	r3, r2
 800935e:	d039      	beq.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009366:	2b03      	cmp	r3, #3
 8009368:	d81c      	bhi.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800936a:	a201      	add	r2, pc, #4	; (adr r2, 8009370 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800936c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009370:	080093ad 	.word	0x080093ad
 8009374:	08009381 	.word	0x08009381
 8009378:	0800938f 	.word	0x0800938f
 800937c:	080093ad 	.word	0x080093ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009380:	4b9f      	ldr	r3, [pc, #636]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009384:	4a9e      	ldr	r2, [pc, #632]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800938a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800938c:	e00f      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800938e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009392:	3308      	adds	r3, #8
 8009394:	2102      	movs	r1, #2
 8009396:	4618      	mov	r0, r3
 8009398:	f001 f8e6 	bl	800a568 <RCCEx_PLL2_Config>
 800939c:	4603      	mov	r3, r0
 800939e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80093a2:	e004      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80093aa:	e000      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80093ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10a      	bne.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80093b6:	4b92      	ldr	r3, [pc, #584]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ba:	f023 0103 	bic.w	r1, r3, #3
 80093be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093c4:	4a8e      	ldr	r2, [pc, #568]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093c6:	430b      	orrs	r3, r1
 80093c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80093ca:	e003      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80093d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093dc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80093e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093e4:	2300      	movs	r3, #0
 80093e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80093ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4313      	orrs	r3, r2
 80093f2:	f000 8099 	beq.w	8009528 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80093f6:	4b83      	ldr	r3, [pc, #524]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a82      	ldr	r2, [pc, #520]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80093fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009400:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009402:	f7fb fb9b 	bl	8004b3c <HAL_GetTick>
 8009406:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800940a:	e00b      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800940c:	f7fb fb96 	bl	8004b3c <HAL_GetTick>
 8009410:	4602      	mov	r2, r0
 8009412:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009416:	1ad3      	subs	r3, r2, r3
 8009418:	2b64      	cmp	r3, #100	; 0x64
 800941a:	d903      	bls.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800941c:	2303      	movs	r3, #3
 800941e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009422:	e005      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009424:	4b77      	ldr	r3, [pc, #476]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800942c:	2b00      	cmp	r3, #0
 800942e:	d0ed      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009430:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009434:	2b00      	cmp	r3, #0
 8009436:	d173      	bne.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009438:	4b71      	ldr	r3, [pc, #452]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800943a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800943c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009440:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009444:	4053      	eors	r3, r2
 8009446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800944a:	2b00      	cmp	r3, #0
 800944c:	d015      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800944e:	4b6c      	ldr	r3, [pc, #432]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009456:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800945a:	4b69      	ldr	r3, [pc, #420]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800945c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800945e:	4a68      	ldr	r2, [pc, #416]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009464:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009466:	4b66      	ldr	r3, [pc, #408]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800946a:	4a65      	ldr	r2, [pc, #404]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800946c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009470:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009472:	4a63      	ldr	r2, [pc, #396]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009474:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009478:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800947a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800947e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009486:	d118      	bne.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009488:	f7fb fb58 	bl	8004b3c <HAL_GetTick>
 800948c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009490:	e00d      	b.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009492:	f7fb fb53 	bl	8004b3c <HAL_GetTick>
 8009496:	4602      	mov	r2, r0
 8009498:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800949c:	1ad2      	subs	r2, r2, r3
 800949e:	f241 3388 	movw	r3, #5000	; 0x1388
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d903      	bls.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80094a6:	2303      	movs	r3, #3
 80094a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80094ac:	e005      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094ae:	4b54      	ldr	r3, [pc, #336]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094b2:	f003 0302 	and.w	r3, r3, #2
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d0eb      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80094ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d129      	bne.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094d2:	d10e      	bne.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80094d4:	4b4a      	ldr	r3, [pc, #296]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80094dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094e4:	091a      	lsrs	r2, r3, #4
 80094e6:	4b48      	ldr	r3, [pc, #288]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80094e8:	4013      	ands	r3, r2
 80094ea:	4a45      	ldr	r2, [pc, #276]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094ec:	430b      	orrs	r3, r1
 80094ee:	6113      	str	r3, [r2, #16]
 80094f0:	e005      	b.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x852>
 80094f2:	4b43      	ldr	r3, [pc, #268]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	4a42      	ldr	r2, [pc, #264]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80094fc:	6113      	str	r3, [r2, #16]
 80094fe:	4b40      	ldr	r3, [pc, #256]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009500:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009506:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800950a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800950e:	4a3c      	ldr	r2, [pc, #240]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009510:	430b      	orrs	r3, r1
 8009512:	6713      	str	r3, [r2, #112]	; 0x70
 8009514:	e008      	b.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009516:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800951a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800951e:	e003      	b.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009520:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009524:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800952c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009530:	f002 0301 	and.w	r3, r2, #1
 8009534:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009538:	2300      	movs	r3, #0
 800953a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800953e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009542:	460b      	mov	r3, r1
 8009544:	4313      	orrs	r3, r2
 8009546:	f000 808f 	beq.w	8009668 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800954a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800954e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009550:	2b28      	cmp	r3, #40	; 0x28
 8009552:	d871      	bhi.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009554:	a201      	add	r2, pc, #4	; (adr r2, 800955c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955a:	bf00      	nop
 800955c:	08009641 	.word	0x08009641
 8009560:	08009639 	.word	0x08009639
 8009564:	08009639 	.word	0x08009639
 8009568:	08009639 	.word	0x08009639
 800956c:	08009639 	.word	0x08009639
 8009570:	08009639 	.word	0x08009639
 8009574:	08009639 	.word	0x08009639
 8009578:	08009639 	.word	0x08009639
 800957c:	0800960d 	.word	0x0800960d
 8009580:	08009639 	.word	0x08009639
 8009584:	08009639 	.word	0x08009639
 8009588:	08009639 	.word	0x08009639
 800958c:	08009639 	.word	0x08009639
 8009590:	08009639 	.word	0x08009639
 8009594:	08009639 	.word	0x08009639
 8009598:	08009639 	.word	0x08009639
 800959c:	08009623 	.word	0x08009623
 80095a0:	08009639 	.word	0x08009639
 80095a4:	08009639 	.word	0x08009639
 80095a8:	08009639 	.word	0x08009639
 80095ac:	08009639 	.word	0x08009639
 80095b0:	08009639 	.word	0x08009639
 80095b4:	08009639 	.word	0x08009639
 80095b8:	08009639 	.word	0x08009639
 80095bc:	08009641 	.word	0x08009641
 80095c0:	08009639 	.word	0x08009639
 80095c4:	08009639 	.word	0x08009639
 80095c8:	08009639 	.word	0x08009639
 80095cc:	08009639 	.word	0x08009639
 80095d0:	08009639 	.word	0x08009639
 80095d4:	08009639 	.word	0x08009639
 80095d8:	08009639 	.word	0x08009639
 80095dc:	08009641 	.word	0x08009641
 80095e0:	08009639 	.word	0x08009639
 80095e4:	08009639 	.word	0x08009639
 80095e8:	08009639 	.word	0x08009639
 80095ec:	08009639 	.word	0x08009639
 80095f0:	08009639 	.word	0x08009639
 80095f4:	08009639 	.word	0x08009639
 80095f8:	08009639 	.word	0x08009639
 80095fc:	08009641 	.word	0x08009641
 8009600:	58024400 	.word	0x58024400
 8009604:	58024800 	.word	0x58024800
 8009608:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800960c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009610:	3308      	adds	r3, #8
 8009612:	2101      	movs	r1, #1
 8009614:	4618      	mov	r0, r3
 8009616:	f000 ffa7 	bl	800a568 <RCCEx_PLL2_Config>
 800961a:	4603      	mov	r3, r0
 800961c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009620:	e00f      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009626:	3328      	adds	r3, #40	; 0x28
 8009628:	2101      	movs	r1, #1
 800962a:	4618      	mov	r0, r3
 800962c:	f001 f84e 	bl	800a6cc <RCCEx_PLL3_Config>
 8009630:	4603      	mov	r3, r0
 8009632:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009636:	e004      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800963e:	e000      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009642:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10a      	bne.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800964a:	4bbf      	ldr	r3, [pc, #764]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800964c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800964e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009656:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009658:	4abb      	ldr	r2, [pc, #748]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800965a:	430b      	orrs	r3, r1
 800965c:	6553      	str	r3, [r2, #84]	; 0x54
 800965e:	e003      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009660:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009664:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800966c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009670:	f002 0302 	and.w	r3, r2, #2
 8009674:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009678:	2300      	movs	r3, #0
 800967a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800967e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009682:	460b      	mov	r3, r1
 8009684:	4313      	orrs	r3, r2
 8009686:	d041      	beq.n	800970c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800968c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800968e:	2b05      	cmp	r3, #5
 8009690:	d824      	bhi.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009692:	a201      	add	r2, pc, #4	; (adr r2, 8009698 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009698:	080096e5 	.word	0x080096e5
 800969c:	080096b1 	.word	0x080096b1
 80096a0:	080096c7 	.word	0x080096c7
 80096a4:	080096e5 	.word	0x080096e5
 80096a8:	080096e5 	.word	0x080096e5
 80096ac:	080096e5 	.word	0x080096e5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096b4:	3308      	adds	r3, #8
 80096b6:	2101      	movs	r1, #1
 80096b8:	4618      	mov	r0, r3
 80096ba:	f000 ff55 	bl	800a568 <RCCEx_PLL2_Config>
 80096be:	4603      	mov	r3, r0
 80096c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80096c4:	e00f      	b.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096ca:	3328      	adds	r3, #40	; 0x28
 80096cc:	2101      	movs	r1, #1
 80096ce:	4618      	mov	r0, r3
 80096d0:	f000 fffc 	bl	800a6cc <RCCEx_PLL3_Config>
 80096d4:	4603      	mov	r3, r0
 80096d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80096da:	e004      	b.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80096e2:	e000      	b.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80096e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10a      	bne.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80096ee:	4b96      	ldr	r3, [pc, #600]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80096f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f2:	f023 0107 	bic.w	r1, r3, #7
 80096f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096fc:	4a92      	ldr	r2, [pc, #584]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80096fe:	430b      	orrs	r3, r1
 8009700:	6553      	str	r3, [r2, #84]	; 0x54
 8009702:	e003      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009704:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009708:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800970c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009714:	f002 0304 	and.w	r3, r2, #4
 8009718:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800971c:	2300      	movs	r3, #0
 800971e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009722:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009726:	460b      	mov	r3, r1
 8009728:	4313      	orrs	r3, r2
 800972a:	d044      	beq.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800972c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009734:	2b05      	cmp	r3, #5
 8009736:	d825      	bhi.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009738:	a201      	add	r2, pc, #4	; (adr r2, 8009740 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800973a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973e:	bf00      	nop
 8009740:	0800978d 	.word	0x0800978d
 8009744:	08009759 	.word	0x08009759
 8009748:	0800976f 	.word	0x0800976f
 800974c:	0800978d 	.word	0x0800978d
 8009750:	0800978d 	.word	0x0800978d
 8009754:	0800978d 	.word	0x0800978d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800975c:	3308      	adds	r3, #8
 800975e:	2101      	movs	r1, #1
 8009760:	4618      	mov	r0, r3
 8009762:	f000 ff01 	bl	800a568 <RCCEx_PLL2_Config>
 8009766:	4603      	mov	r3, r0
 8009768:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800976c:	e00f      	b.n	800978e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800976e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009772:	3328      	adds	r3, #40	; 0x28
 8009774:	2101      	movs	r1, #1
 8009776:	4618      	mov	r0, r3
 8009778:	f000 ffa8 	bl	800a6cc <RCCEx_PLL3_Config>
 800977c:	4603      	mov	r3, r0
 800977e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009782:	e004      	b.n	800978e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800978a:	e000      	b.n	800978e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800978c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800978e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10b      	bne.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009796:	4b6c      	ldr	r3, [pc, #432]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800979a:	f023 0107 	bic.w	r1, r3, #7
 800979e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097a6:	4a68      	ldr	r2, [pc, #416]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80097a8:	430b      	orrs	r3, r1
 80097aa:	6593      	str	r3, [r2, #88]	; 0x58
 80097ac:	e003      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80097b2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80097b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	f002 0320 	and.w	r3, r2, #32
 80097c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80097c6:	2300      	movs	r3, #0
 80097c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80097cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80097d0:	460b      	mov	r3, r1
 80097d2:	4313      	orrs	r3, r2
 80097d4:	d055      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80097d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097e2:	d033      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80097e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097e8:	d82c      	bhi.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80097ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ee:	d02f      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80097f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097f4:	d826      	bhi.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80097f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097fa:	d02b      	beq.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80097fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009800:	d820      	bhi.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009806:	d012      	beq.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800980c:	d81a      	bhi.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800980e:	2b00      	cmp	r3, #0
 8009810:	d022      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009816:	d115      	bne.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800981c:	3308      	adds	r3, #8
 800981e:	2100      	movs	r1, #0
 8009820:	4618      	mov	r0, r3
 8009822:	f000 fea1 	bl	800a568 <RCCEx_PLL2_Config>
 8009826:	4603      	mov	r3, r0
 8009828:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800982c:	e015      	b.n	800985a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800982e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009832:	3328      	adds	r3, #40	; 0x28
 8009834:	2102      	movs	r1, #2
 8009836:	4618      	mov	r0, r3
 8009838:	f000 ff48 	bl	800a6cc <RCCEx_PLL3_Config>
 800983c:	4603      	mov	r3, r0
 800983e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009842:	e00a      	b.n	800985a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800984a:	e006      	b.n	800985a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800984c:	bf00      	nop
 800984e:	e004      	b.n	800985a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009850:	bf00      	nop
 8009852:	e002      	b.n	800985a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009854:	bf00      	nop
 8009856:	e000      	b.n	800985a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800985a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10b      	bne.n	800987a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009862:	4b39      	ldr	r3, [pc, #228]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009866:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800986a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800986e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009872:	4a35      	ldr	r2, [pc, #212]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009874:	430b      	orrs	r3, r1
 8009876:	6553      	str	r3, [r2, #84]	; 0x54
 8009878:	e003      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800987a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800987e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800988e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009892:	2300      	movs	r3, #0
 8009894:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009898:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800989c:	460b      	mov	r3, r1
 800989e:	4313      	orrs	r3, r2
 80098a0:	d058      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80098a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80098aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80098ae:	d033      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80098b0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80098b4:	d82c      	bhi.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098ba:	d02f      	beq.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80098bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098c0:	d826      	bhi.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098c6:	d02b      	beq.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80098c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098cc:	d820      	bhi.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098d2:	d012      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80098d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098d8:	d81a      	bhi.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d022      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80098de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098e2:	d115      	bne.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098e8:	3308      	adds	r3, #8
 80098ea:	2100      	movs	r1, #0
 80098ec:	4618      	mov	r0, r3
 80098ee:	f000 fe3b 	bl	800a568 <RCCEx_PLL2_Config>
 80098f2:	4603      	mov	r3, r0
 80098f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80098f8:	e015      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098fe:	3328      	adds	r3, #40	; 0x28
 8009900:	2102      	movs	r1, #2
 8009902:	4618      	mov	r0, r3
 8009904:	f000 fee2 	bl	800a6cc <RCCEx_PLL3_Config>
 8009908:	4603      	mov	r3, r0
 800990a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800990e:	e00a      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009916:	e006      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009918:	bf00      	nop
 800991a:	e004      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800991c:	bf00      	nop
 800991e:	e002      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009920:	bf00      	nop
 8009922:	e000      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009926:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10e      	bne.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800992e:	4b06      	ldr	r3, [pc, #24]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009932:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800993a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800993e:	4a02      	ldr	r2, [pc, #8]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009940:	430b      	orrs	r3, r1
 8009942:	6593      	str	r3, [r2, #88]	; 0x58
 8009944:	e006      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009946:	bf00      	nop
 8009948:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800994c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009950:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009960:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009964:	2300      	movs	r3, #0
 8009966:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800996a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800996e:	460b      	mov	r3, r1
 8009970:	4313      	orrs	r3, r2
 8009972:	d055      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009978:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800997c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009980:	d033      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009982:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009986:	d82c      	bhi.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800998c:	d02f      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800998e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009992:	d826      	bhi.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009994:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009998:	d02b      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800999a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800999e:	d820      	bhi.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80099a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099a4:	d012      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80099a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099aa:	d81a      	bhi.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d022      	beq.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80099b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099b4:	d115      	bne.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ba:	3308      	adds	r3, #8
 80099bc:	2100      	movs	r1, #0
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 fdd2 	bl	800a568 <RCCEx_PLL2_Config>
 80099c4:	4603      	mov	r3, r0
 80099c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80099ca:	e015      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099d0:	3328      	adds	r3, #40	; 0x28
 80099d2:	2102      	movs	r1, #2
 80099d4:	4618      	mov	r0, r3
 80099d6:	f000 fe79 	bl	800a6cc <RCCEx_PLL3_Config>
 80099da:	4603      	mov	r3, r0
 80099dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80099e0:	e00a      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80099e8:	e006      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099ea:	bf00      	nop
 80099ec:	e004      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099ee:	bf00      	nop
 80099f0:	e002      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099f2:	bf00      	nop
 80099f4:	e000      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10b      	bne.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009a00:	4ba0      	ldr	r3, [pc, #640]	; (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a04:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a10:	4a9c      	ldr	r2, [pc, #624]	; (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a12:	430b      	orrs	r3, r1
 8009a14:	6593      	str	r3, [r2, #88]	; 0x58
 8009a16:	e003      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a28:	f002 0308 	and.w	r3, r2, #8
 8009a2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009a30:	2300      	movs	r3, #0
 8009a32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009a36:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	d01e      	beq.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a4c:	d10c      	bne.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a52:	3328      	adds	r3, #40	; 0x28
 8009a54:	2102      	movs	r1, #2
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 fe38 	bl	800a6cc <RCCEx_PLL3_Config>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d002      	beq.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009a68:	4b86      	ldr	r3, [pc, #536]	; (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a78:	4a82      	ldr	r2, [pc, #520]	; (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a7a:	430b      	orrs	r3, r1
 8009a7c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	f002 0310 	and.w	r3, r2, #16
 8009a8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a94:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009a98:	460b      	mov	r3, r1
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	d01e      	beq.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aaa:	d10c      	bne.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ab0:	3328      	adds	r3, #40	; 0x28
 8009ab2:	2102      	movs	r1, #2
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f000 fe09 	bl	800a6cc <RCCEx_PLL3_Config>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d002      	beq.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ac6:	4b6f      	ldr	r3, [pc, #444]	; (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ad6:	4a6b      	ldr	r2, [pc, #428]	; (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ad8:	430b      	orrs	r3, r1
 8009ada:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009ae8:	67bb      	str	r3, [r7, #120]	; 0x78
 8009aea:	2300      	movs	r3, #0
 8009aec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009aee:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009af2:	460b      	mov	r3, r1
 8009af4:	4313      	orrs	r3, r2
 8009af6:	d03e      	beq.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009afc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009b00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b04:	d022      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009b06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b0a:	d81b      	bhi.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d003      	beq.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b14:	d00b      	beq.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009b16:	e015      	b.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b1c:	3308      	adds	r3, #8
 8009b1e:	2100      	movs	r1, #0
 8009b20:	4618      	mov	r0, r3
 8009b22:	f000 fd21 	bl	800a568 <RCCEx_PLL2_Config>
 8009b26:	4603      	mov	r3, r0
 8009b28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b2c:	e00f      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b32:	3328      	adds	r3, #40	; 0x28
 8009b34:	2102      	movs	r1, #2
 8009b36:	4618      	mov	r0, r3
 8009b38:	f000 fdc8 	bl	800a6cc <RCCEx_PLL3_Config>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b42:	e004      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009b4a:	e000      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d10b      	bne.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009b56:	4b4b      	ldr	r3, [pc, #300]	; (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b5a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009b66:	4a47      	ldr	r2, [pc, #284]	; (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b68:	430b      	orrs	r3, r1
 8009b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8009b6c:	e003      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b72:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009b82:	673b      	str	r3, [r7, #112]	; 0x70
 8009b84:	2300      	movs	r3, #0
 8009b86:	677b      	str	r3, [r7, #116]	; 0x74
 8009b88:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	d03b      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b9e:	d01f      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009ba0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ba4:	d818      	bhi.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009baa:	d003      	beq.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009bac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bb0:	d007      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009bb2:	e011      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bb4:	4b33      	ldr	r3, [pc, #204]	; (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb8:	4a32      	ldr	r2, [pc, #200]	; (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009bc0:	e00f      	b.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bc6:	3328      	adds	r3, #40	; 0x28
 8009bc8:	2101      	movs	r1, #1
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 fd7e 	bl	800a6cc <RCCEx_PLL3_Config>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009bd6:	e004      	b.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009bde:	e000      	b.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009be2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10b      	bne.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009bea:	4b26      	ldr	r3, [pc, #152]	; (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bfa:	4a22      	ldr	r2, [pc, #136]	; (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bfc:	430b      	orrs	r3, r1
 8009bfe:	6553      	str	r3, [r2, #84]	; 0x54
 8009c00:	e003      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c06:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c12:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009c16:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c18:	2300      	movs	r3, #0
 8009c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c1c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009c20:	460b      	mov	r3, r1
 8009c22:	4313      	orrs	r3, r2
 8009c24:	d034      	beq.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d003      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c34:	d007      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009c36:	e011      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c38:	4b12      	ldr	r3, [pc, #72]	; (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3c:	4a11      	ldr	r2, [pc, #68]	; (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c44:	e00e      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c4a:	3308      	adds	r3, #8
 8009c4c:	2102      	movs	r1, #2
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f000 fc8a 	bl	800a568 <RCCEx_PLL2_Config>
 8009c54:	4603      	mov	r3, r0
 8009c56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c5a:	e003      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10d      	bne.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009c6c:	4b05      	ldr	r3, [pc, #20]	; (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c7a:	4a02      	ldr	r2, [pc, #8]	; (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c7c:	430b      	orrs	r3, r1
 8009c7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c80:	e006      	b.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009c82:	bf00      	nop
 8009c84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c98:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009c9c:	663b      	str	r3, [r7, #96]	; 0x60
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	667b      	str	r3, [r7, #100]	; 0x64
 8009ca2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	d00c      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cb0:	3328      	adds	r3, #40	; 0x28
 8009cb2:	2102      	movs	r1, #2
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f000 fd09 	bl	800a6cc <RCCEx_PLL3_Config>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d002      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cce:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009cd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cd8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009cdc:	460b      	mov	r3, r1
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	d036      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ce6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ce8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cec:	d018      	beq.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cf2:	d811      	bhi.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cf8:	d014      	beq.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009cfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cfe:	d80b      	bhi.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d011      	beq.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d08:	d106      	bne.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d0a:	4bb7      	ldr	r3, [pc, #732]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d0e:	4ab6      	ldr	r2, [pc, #728]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009d16:	e008      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009d1e:	e004      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d20:	bf00      	nop
 8009d22:	e002      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d24:	bf00      	nop
 8009d26:	e000      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d10a      	bne.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d32:	4bad      	ldr	r3, [pc, #692]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d40:	4aa9      	ldr	r2, [pc, #676]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d42:	430b      	orrs	r3, r1
 8009d44:	6553      	str	r3, [r2, #84]	; 0x54
 8009d46:	e003      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d58:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009d5c:	653b      	str	r3, [r7, #80]	; 0x50
 8009d5e:	2300      	movs	r3, #0
 8009d60:	657b      	str	r3, [r7, #84]	; 0x54
 8009d62:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009d66:	460b      	mov	r3, r1
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	d009      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009d6c:	4b9e      	ldr	r3, [pc, #632]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d7a:	4a9b      	ldr	r2, [pc, #620]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d7c:	430b      	orrs	r3, r1
 8009d7e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d88:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009d8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d8e:	2300      	movs	r3, #0
 8009d90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d92:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009d96:	460b      	mov	r3, r1
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	d009      	beq.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009d9c:	4b92      	ldr	r3, [pc, #584]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009da0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009da8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009daa:	4a8f      	ldr	r2, [pc, #572]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dac:	430b      	orrs	r3, r1
 8009dae:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009dbc:	643b      	str	r3, [r7, #64]	; 0x40
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8009dc2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	d00e      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009dcc:	4b86      	ldr	r3, [pc, #536]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dce:	691b      	ldr	r3, [r3, #16]
 8009dd0:	4a85      	ldr	r2, [pc, #532]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009dd6:	6113      	str	r3, [r2, #16]
 8009dd8:	4b83      	ldr	r3, [pc, #524]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dda:	6919      	ldr	r1, [r3, #16]
 8009ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009de0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009de4:	4a80      	ldr	r2, [pc, #512]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009de6:	430b      	orrs	r3, r1
 8009de8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009df6:	63bb      	str	r3, [r7, #56]	; 0x38
 8009df8:	2300      	movs	r3, #0
 8009dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dfc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009e00:	460b      	mov	r3, r1
 8009e02:	4313      	orrs	r3, r2
 8009e04:	d009      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009e06:	4b78      	ldr	r3, [pc, #480]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e0a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e14:	4a74      	ldr	r2, [pc, #464]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e16:	430b      	orrs	r3, r1
 8009e18:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e22:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009e26:	633b      	str	r3, [r7, #48]	; 0x30
 8009e28:	2300      	movs	r3, #0
 8009e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8009e2c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009e30:	460b      	mov	r3, r1
 8009e32:	4313      	orrs	r3, r2
 8009e34:	d00a      	beq.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009e36:	4b6c      	ldr	r3, [pc, #432]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e3a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e46:	4a68      	ldr	r2, [pc, #416]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e48:	430b      	orrs	r3, r1
 8009e4a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e54:	2100      	movs	r1, #0
 8009e56:	62b9      	str	r1, [r7, #40]	; 0x28
 8009e58:	f003 0301 	and.w	r3, r3, #1
 8009e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e5e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009e62:	460b      	mov	r3, r1
 8009e64:	4313      	orrs	r3, r2
 8009e66:	d011      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e6c:	3308      	adds	r3, #8
 8009e6e:	2100      	movs	r1, #0
 8009e70:	4618      	mov	r0, r3
 8009e72:	f000 fb79 	bl	800a568 <RCCEx_PLL2_Config>
 8009e76:	4603      	mov	r3, r0
 8009e78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009e7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d003      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	2100      	movs	r1, #0
 8009e96:	6239      	str	r1, [r7, #32]
 8009e98:	f003 0302 	and.w	r3, r3, #2
 8009e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e9e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	d011      	beq.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eac:	3308      	adds	r3, #8
 8009eae:	2101      	movs	r1, #1
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f000 fb59 	bl	800a568 <RCCEx_PLL2_Config>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009ebc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d003      	beq.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ec4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ec8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	61b9      	str	r1, [r7, #24]
 8009ed8:	f003 0304 	and.w	r3, r3, #4
 8009edc:	61fb      	str	r3, [r7, #28]
 8009ede:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	d011      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eec:	3308      	adds	r3, #8
 8009eee:	2102      	movs	r1, #2
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f000 fb39 	bl	800a568 <RCCEx_PLL2_Config>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009efc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d003      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f14:	2100      	movs	r1, #0
 8009f16:	6139      	str	r1, [r7, #16]
 8009f18:	f003 0308 	and.w	r3, r3, #8
 8009f1c:	617b      	str	r3, [r7, #20]
 8009f1e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009f22:	460b      	mov	r3, r1
 8009f24:	4313      	orrs	r3, r2
 8009f26:	d011      	beq.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f2c:	3328      	adds	r3, #40	; 0x28
 8009f2e:	2100      	movs	r1, #0
 8009f30:	4618      	mov	r0, r3
 8009f32:	f000 fbcb 	bl	800a6cc <RCCEx_PLL3_Config>
 8009f36:	4603      	mov	r3, r0
 8009f38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8009f3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d003      	beq.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f54:	2100      	movs	r1, #0
 8009f56:	60b9      	str	r1, [r7, #8]
 8009f58:	f003 0310 	and.w	r3, r3, #16
 8009f5c:	60fb      	str	r3, [r7, #12]
 8009f5e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009f62:	460b      	mov	r3, r1
 8009f64:	4313      	orrs	r3, r2
 8009f66:	d011      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f6c:	3328      	adds	r3, #40	; 0x28
 8009f6e:	2101      	movs	r1, #1
 8009f70:	4618      	mov	r0, r3
 8009f72:	f000 fbab 	bl	800a6cc <RCCEx_PLL3_Config>
 8009f76:	4603      	mov	r3, r0
 8009f78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009f7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d003      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f94:	2100      	movs	r1, #0
 8009f96:	6039      	str	r1, [r7, #0]
 8009f98:	f003 0320 	and.w	r3, r3, #32
 8009f9c:	607b      	str	r3, [r7, #4]
 8009f9e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	d011      	beq.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fac:	3328      	adds	r3, #40	; 0x28
 8009fae:	2102      	movs	r1, #2
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f000 fb8b 	bl	800a6cc <RCCEx_PLL3_Config>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d003      	beq.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fc8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8009fcc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d101      	bne.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	e000      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fe6:	bf00      	nop
 8009fe8:	58024400 	.word	0x58024400

08009fec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009ff0:	f7fe fe00 	bl	8008bf4 <HAL_RCC_GetHCLKFreq>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	4b06      	ldr	r3, [pc, #24]	; (800a010 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009ff8:	6a1b      	ldr	r3, [r3, #32]
 8009ffa:	091b      	lsrs	r3, r3, #4
 8009ffc:	f003 0307 	and.w	r3, r3, #7
 800a000:	4904      	ldr	r1, [pc, #16]	; (800a014 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a002:	5ccb      	ldrb	r3, [r1, r3]
 800a004:	f003 031f 	and.w	r3, r3, #31
 800a008:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	58024400 	.word	0x58024400
 800a014:	0800e9e4 	.word	0x0800e9e4

0800a018 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a018:	b480      	push	{r7}
 800a01a:	b089      	sub	sp, #36	; 0x24
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a020:	4ba1      	ldr	r3, [pc, #644]	; (800a2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a024:	f003 0303 	and.w	r3, r3, #3
 800a028:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a02a:	4b9f      	ldr	r3, [pc, #636]	; (800a2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02e:	0b1b      	lsrs	r3, r3, #12
 800a030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a034:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a036:	4b9c      	ldr	r3, [pc, #624]	; (800a2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03a:	091b      	lsrs	r3, r3, #4
 800a03c:	f003 0301 	and.w	r3, r3, #1
 800a040:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a042:	4b99      	ldr	r3, [pc, #612]	; (800a2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a046:	08db      	lsrs	r3, r3, #3
 800a048:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a04c:	693a      	ldr	r2, [r7, #16]
 800a04e:	fb02 f303 	mul.w	r3, r2, r3
 800a052:	ee07 3a90 	vmov	s15, r3
 800a056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a05a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	2b00      	cmp	r3, #0
 800a062:	f000 8111 	beq.w	800a288 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	2b02      	cmp	r3, #2
 800a06a:	f000 8083 	beq.w	800a174 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	2b02      	cmp	r3, #2
 800a072:	f200 80a1 	bhi.w	800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d003      	beq.n	800a084 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d056      	beq.n	800a130 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a082:	e099      	b.n	800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a084:	4b88      	ldr	r3, [pc, #544]	; (800a2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f003 0320 	and.w	r3, r3, #32
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d02d      	beq.n	800a0ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a090:	4b85      	ldr	r3, [pc, #532]	; (800a2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	08db      	lsrs	r3, r3, #3
 800a096:	f003 0303 	and.w	r3, r3, #3
 800a09a:	4a84      	ldr	r2, [pc, #528]	; (800a2ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a09c:	fa22 f303 	lsr.w	r3, r2, r3
 800a0a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	ee07 3a90 	vmov	s15, r3
 800a0a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	ee07 3a90 	vmov	s15, r3
 800a0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ba:	4b7b      	ldr	r3, [pc, #492]	; (800a2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c2:	ee07 3a90 	vmov	s15, r3
 800a0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a0ea:	e087      	b.n	800a1fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	ee07 3a90 	vmov	s15, r3
 800a0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a0fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0fe:	4b6a      	ldr	r3, [pc, #424]	; (800a2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a106:	ee07 3a90 	vmov	s15, r3
 800a10a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a10e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a112:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a11a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a11e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a12a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a12e:	e065      	b.n	800a1fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	ee07 3a90 	vmov	s15, r3
 800a136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a142:	4b59      	ldr	r3, [pc, #356]	; (800a2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a14a:	ee07 3a90 	vmov	s15, r3
 800a14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a152:	ed97 6a03 	vldr	s12, [r7, #12]
 800a156:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a15a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a15e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a16e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a172:	e043      	b.n	800a1fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	ee07 3a90 	vmov	s15, r3
 800a17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a17e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a2bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a186:	4b48      	ldr	r3, [pc, #288]	; (800a2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a18a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a18e:	ee07 3a90 	vmov	s15, r3
 800a192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a196:	ed97 6a03 	vldr	s12, [r7, #12]
 800a19a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a19e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1b6:	e021      	b.n	800a1fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	ee07 3a90 	vmov	s15, r3
 800a1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a1c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1ca:	4b37      	ldr	r3, [pc, #220]	; (800a2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1d2:	ee07 3a90 	vmov	s15, r3
 800a1d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1de:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a1fc:	4b2a      	ldr	r3, [pc, #168]	; (800a2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a200:	0a5b      	lsrs	r3, r3, #9
 800a202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a206:	ee07 3a90 	vmov	s15, r3
 800a20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a20e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a212:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a216:	edd7 6a07 	vldr	s13, [r7, #28]
 800a21a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a21e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a222:	ee17 2a90 	vmov	r2, s15
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a22a:	4b1f      	ldr	r3, [pc, #124]	; (800a2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a22e:	0c1b      	lsrs	r3, r3, #16
 800a230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a234:	ee07 3a90 	vmov	s15, r3
 800a238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a23c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a240:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a244:	edd7 6a07 	vldr	s13, [r7, #28]
 800a248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a24c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a250:	ee17 2a90 	vmov	r2, s15
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a258:	4b13      	ldr	r3, [pc, #76]	; (800a2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a25c:	0e1b      	lsrs	r3, r3, #24
 800a25e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a262:	ee07 3a90 	vmov	s15, r3
 800a266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a26a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a26e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a272:	edd7 6a07 	vldr	s13, [r7, #28]
 800a276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a27a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a27e:	ee17 2a90 	vmov	r2, s15
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a286:	e008      	b.n	800a29a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	609a      	str	r2, [r3, #8]
}
 800a29a:	bf00      	nop
 800a29c:	3724      	adds	r7, #36	; 0x24
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	58024400 	.word	0x58024400
 800a2ac:	03d09000 	.word	0x03d09000
 800a2b0:	46000000 	.word	0x46000000
 800a2b4:	4c742400 	.word	0x4c742400
 800a2b8:	4a742400 	.word	0x4a742400
 800a2bc:	4af42400 	.word	0x4af42400

0800a2c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b089      	sub	sp, #36	; 0x24
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a2c8:	4ba1      	ldr	r3, [pc, #644]	; (800a550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2cc:	f003 0303 	and.w	r3, r3, #3
 800a2d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a2d2:	4b9f      	ldr	r3, [pc, #636]	; (800a550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2d6:	0d1b      	lsrs	r3, r3, #20
 800a2d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a2de:	4b9c      	ldr	r3, [pc, #624]	; (800a550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e2:	0a1b      	lsrs	r3, r3, #8
 800a2e4:	f003 0301 	and.w	r3, r3, #1
 800a2e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a2ea:	4b99      	ldr	r3, [pc, #612]	; (800a550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2ee:	08db      	lsrs	r3, r3, #3
 800a2f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	fb02 f303 	mul.w	r3, r2, r3
 800a2fa:	ee07 3a90 	vmov	s15, r3
 800a2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a302:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f000 8111 	beq.w	800a530 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	2b02      	cmp	r3, #2
 800a312:	f000 8083 	beq.w	800a41c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	2b02      	cmp	r3, #2
 800a31a:	f200 80a1 	bhi.w	800a460 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d003      	beq.n	800a32c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d056      	beq.n	800a3d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a32a:	e099      	b.n	800a460 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a32c:	4b88      	ldr	r3, [pc, #544]	; (800a550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 0320 	and.w	r3, r3, #32
 800a334:	2b00      	cmp	r3, #0
 800a336:	d02d      	beq.n	800a394 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a338:	4b85      	ldr	r3, [pc, #532]	; (800a550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	08db      	lsrs	r3, r3, #3
 800a33e:	f003 0303 	and.w	r3, r3, #3
 800a342:	4a84      	ldr	r2, [pc, #528]	; (800a554 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a344:	fa22 f303 	lsr.w	r3, r2, r3
 800a348:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	ee07 3a90 	vmov	s15, r3
 800a350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	ee07 3a90 	vmov	s15, r3
 800a35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a35e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a362:	4b7b      	ldr	r3, [pc, #492]	; (800a550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a36a:	ee07 3a90 	vmov	s15, r3
 800a36e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a372:	ed97 6a03 	vldr	s12, [r7, #12]
 800a376:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a37a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a37e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a38a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a38e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a392:	e087      	b.n	800a4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	ee07 3a90 	vmov	s15, r3
 800a39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a39e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a55c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a3a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3a6:	4b6a      	ldr	r3, [pc, #424]	; (800a550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ae:	ee07 3a90 	vmov	s15, r3
 800a3b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3d6:	e065      	b.n	800a4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	ee07 3a90 	vmov	s15, r3
 800a3de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a3e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3ea:	4b59      	ldr	r3, [pc, #356]	; (800a550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3f2:	ee07 3a90 	vmov	s15, r3
 800a3f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a40a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a40e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a412:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a41a:	e043      	b.n	800a4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	ee07 3a90 	vmov	s15, r3
 800a422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a426:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a42a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a42e:	4b48      	ldr	r3, [pc, #288]	; (800a550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a436:	ee07 3a90 	vmov	s15, r3
 800a43a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a43e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a442:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a44a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a44e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a45a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a45e:	e021      	b.n	800a4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	ee07 3a90 	vmov	s15, r3
 800a466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a46a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a46e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a472:	4b37      	ldr	r3, [pc, #220]	; (800a550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a47a:	ee07 3a90 	vmov	s15, r3
 800a47e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a482:	ed97 6a03 	vldr	s12, [r7, #12]
 800a486:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a48a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a48e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a49a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a49e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a4a4:	4b2a      	ldr	r3, [pc, #168]	; (800a550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a8:	0a5b      	lsrs	r3, r3, #9
 800a4aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4ae:	ee07 3a90 	vmov	s15, r3
 800a4b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4be:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4ca:	ee17 2a90 	vmov	r2, s15
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a4d2:	4b1f      	ldr	r3, [pc, #124]	; (800a550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d6:	0c1b      	lsrs	r3, r3, #16
 800a4d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4dc:	ee07 3a90 	vmov	s15, r3
 800a4e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4f8:	ee17 2a90 	vmov	r2, s15
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a500:	4b13      	ldr	r3, [pc, #76]	; (800a550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a504:	0e1b      	lsrs	r3, r3, #24
 800a506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a50a:	ee07 3a90 	vmov	s15, r3
 800a50e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a51a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a51e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a526:	ee17 2a90 	vmov	r2, s15
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a52e:	e008      	b.n	800a542 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2200      	movs	r2, #0
 800a53a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	609a      	str	r2, [r3, #8]
}
 800a542:	bf00      	nop
 800a544:	3724      	adds	r7, #36	; 0x24
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	58024400 	.word	0x58024400
 800a554:	03d09000 	.word	0x03d09000
 800a558:	46000000 	.word	0x46000000
 800a55c:	4c742400 	.word	0x4c742400
 800a560:	4a742400 	.word	0x4a742400
 800a564:	4af42400 	.word	0x4af42400

0800a568 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a572:	2300      	movs	r3, #0
 800a574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a576:	4b53      	ldr	r3, [pc, #332]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a57a:	f003 0303 	and.w	r3, r3, #3
 800a57e:	2b03      	cmp	r3, #3
 800a580:	d101      	bne.n	800a586 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e099      	b.n	800a6ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a586:	4b4f      	ldr	r3, [pc, #316]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a4e      	ldr	r2, [pc, #312]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a58c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a592:	f7fa fad3 	bl	8004b3c <HAL_GetTick>
 800a596:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a598:	e008      	b.n	800a5ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a59a:	f7fa facf 	bl	8004b3c <HAL_GetTick>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	1ad3      	subs	r3, r2, r3
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d901      	bls.n	800a5ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	e086      	b.n	800a6ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a5ac:	4b45      	ldr	r3, [pc, #276]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1f0      	bne.n	800a59a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a5b8:	4b42      	ldr	r3, [pc, #264]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	031b      	lsls	r3, r3, #12
 800a5c6:	493f      	ldr	r1, [pc, #252]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	628b      	str	r3, [r1, #40]	; 0x28
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	025b      	lsls	r3, r3, #9
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	431a      	orrs	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	041b      	lsls	r3, r3, #16
 800a5ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a5ee:	431a      	orrs	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	691b      	ldr	r3, [r3, #16]
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	061b      	lsls	r3, r3, #24
 800a5f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a5fc:	4931      	ldr	r1, [pc, #196]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a5fe:	4313      	orrs	r3, r2
 800a600:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a602:	4b30      	ldr	r3, [pc, #192]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a606:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	695b      	ldr	r3, [r3, #20]
 800a60e:	492d      	ldr	r1, [pc, #180]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a610:	4313      	orrs	r3, r2
 800a612:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a614:	4b2b      	ldr	r3, [pc, #172]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a618:	f023 0220 	bic.w	r2, r3, #32
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	699b      	ldr	r3, [r3, #24]
 800a620:	4928      	ldr	r1, [pc, #160]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a622:	4313      	orrs	r3, r2
 800a624:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a626:	4b27      	ldr	r3, [pc, #156]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62a:	4a26      	ldr	r2, [pc, #152]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a62c:	f023 0310 	bic.w	r3, r3, #16
 800a630:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a632:	4b24      	ldr	r3, [pc, #144]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a634:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a636:	4b24      	ldr	r3, [pc, #144]	; (800a6c8 <RCCEx_PLL2_Config+0x160>)
 800a638:	4013      	ands	r3, r2
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	69d2      	ldr	r2, [r2, #28]
 800a63e:	00d2      	lsls	r2, r2, #3
 800a640:	4920      	ldr	r1, [pc, #128]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a642:	4313      	orrs	r3, r2
 800a644:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a646:	4b1f      	ldr	r3, [pc, #124]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64a:	4a1e      	ldr	r2, [pc, #120]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a64c:	f043 0310 	orr.w	r3, r3, #16
 800a650:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d106      	bne.n	800a666 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a658:	4b1a      	ldr	r3, [pc, #104]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65c:	4a19      	ldr	r2, [pc, #100]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a65e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a662:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a664:	e00f      	b.n	800a686 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d106      	bne.n	800a67a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a66c:	4b15      	ldr	r3, [pc, #84]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a670:	4a14      	ldr	r2, [pc, #80]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a676:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a678:	e005      	b.n	800a686 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a67a:	4b12      	ldr	r3, [pc, #72]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a67e:	4a11      	ldr	r2, [pc, #68]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a684:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a686:	4b0f      	ldr	r3, [pc, #60]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a0e      	ldr	r2, [pc, #56]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a68c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a692:	f7fa fa53 	bl	8004b3c <HAL_GetTick>
 800a696:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a698:	e008      	b.n	800a6ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a69a:	f7fa fa4f 	bl	8004b3c <HAL_GetTick>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	1ad3      	subs	r3, r2, r3
 800a6a4:	2b02      	cmp	r3, #2
 800a6a6:	d901      	bls.n	800a6ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	e006      	b.n	800a6ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a6ac:	4b05      	ldr	r3, [pc, #20]	; (800a6c4 <RCCEx_PLL2_Config+0x15c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d0f0      	beq.n	800a69a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	58024400 	.word	0x58024400
 800a6c8:	ffff0007 	.word	0xffff0007

0800a6cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a6da:	4b53      	ldr	r3, [pc, #332]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6de:	f003 0303 	and.w	r3, r3, #3
 800a6e2:	2b03      	cmp	r3, #3
 800a6e4:	d101      	bne.n	800a6ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e099      	b.n	800a81e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a6ea:	4b4f      	ldr	r3, [pc, #316]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a4e      	ldr	r2, [pc, #312]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a6f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6f6:	f7fa fa21 	bl	8004b3c <HAL_GetTick>
 800a6fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a6fc:	e008      	b.n	800a710 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a6fe:	f7fa fa1d 	bl	8004b3c <HAL_GetTick>
 800a702:	4602      	mov	r2, r0
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	2b02      	cmp	r3, #2
 800a70a:	d901      	bls.n	800a710 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a70c:	2303      	movs	r3, #3
 800a70e:	e086      	b.n	800a81e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a710:	4b45      	ldr	r3, [pc, #276]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1f0      	bne.n	800a6fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a71c:	4b42      	ldr	r3, [pc, #264]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a720:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	051b      	lsls	r3, r3, #20
 800a72a:	493f      	ldr	r1, [pc, #252]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a72c:	4313      	orrs	r3, r2
 800a72e:	628b      	str	r3, [r1, #40]	; 0x28
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	3b01      	subs	r3, #1
 800a736:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	3b01      	subs	r3, #1
 800a740:	025b      	lsls	r3, r3, #9
 800a742:	b29b      	uxth	r3, r3
 800a744:	431a      	orrs	r2, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	68db      	ldr	r3, [r3, #12]
 800a74a:	3b01      	subs	r3, #1
 800a74c:	041b      	lsls	r3, r3, #16
 800a74e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a752:	431a      	orrs	r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	3b01      	subs	r3, #1
 800a75a:	061b      	lsls	r3, r3, #24
 800a75c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a760:	4931      	ldr	r1, [pc, #196]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a762:	4313      	orrs	r3, r2
 800a764:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a766:	4b30      	ldr	r3, [pc, #192]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	695b      	ldr	r3, [r3, #20]
 800a772:	492d      	ldr	r1, [pc, #180]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a774:	4313      	orrs	r3, r2
 800a776:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a778:	4b2b      	ldr	r3, [pc, #172]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	699b      	ldr	r3, [r3, #24]
 800a784:	4928      	ldr	r1, [pc, #160]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a786:	4313      	orrs	r3, r2
 800a788:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a78a:	4b27      	ldr	r3, [pc, #156]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78e:	4a26      	ldr	r2, [pc, #152]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a794:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a796:	4b24      	ldr	r3, [pc, #144]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a79a:	4b24      	ldr	r3, [pc, #144]	; (800a82c <RCCEx_PLL3_Config+0x160>)
 800a79c:	4013      	ands	r3, r2
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	69d2      	ldr	r2, [r2, #28]
 800a7a2:	00d2      	lsls	r2, r2, #3
 800a7a4:	4920      	ldr	r1, [pc, #128]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a7aa:	4b1f      	ldr	r3, [pc, #124]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ae:	4a1e      	ldr	r2, [pc, #120]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a7b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d106      	bne.n	800a7ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a7bc:	4b1a      	ldr	r3, [pc, #104]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c0:	4a19      	ldr	r2, [pc, #100]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a7c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a7c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7c8:	e00f      	b.n	800a7ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d106      	bne.n	800a7de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a7d0:	4b15      	ldr	r3, [pc, #84]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d4:	4a14      	ldr	r2, [pc, #80]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a7d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a7da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7dc:	e005      	b.n	800a7ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a7de:	4b12      	ldr	r3, [pc, #72]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e2:	4a11      	ldr	r2, [pc, #68]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a7e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a7ea:	4b0f      	ldr	r3, [pc, #60]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a0e      	ldr	r2, [pc, #56]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a7f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7f6:	f7fa f9a1 	bl	8004b3c <HAL_GetTick>
 800a7fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a7fc:	e008      	b.n	800a810 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a7fe:	f7fa f99d 	bl	8004b3c <HAL_GetTick>
 800a802:	4602      	mov	r2, r0
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	1ad3      	subs	r3, r2, r3
 800a808:	2b02      	cmp	r3, #2
 800a80a:	d901      	bls.n	800a810 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a80c:	2303      	movs	r3, #3
 800a80e:	e006      	b.n	800a81e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a810:	4b05      	ldr	r3, [pc, #20]	; (800a828 <RCCEx_PLL3_Config+0x15c>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d0f0      	beq.n	800a7fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	58024400 	.word	0x58024400
 800a82c:	ffff0007 	.word	0xffff0007

0800a830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d101      	bne.n	800a842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a83e:	2301      	movs	r3, #1
 800a840:	e049      	b.n	800a8d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d106      	bne.n	800a85c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f7f9 fe0a 	bl	8004470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2202      	movs	r2, #2
 800a860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	3304      	adds	r3, #4
 800a86c:	4619      	mov	r1, r3
 800a86e:	4610      	mov	r0, r2
 800a870:	f000 feb8 	bl	800b5e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2201      	movs	r2, #1
 800a880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
	...

0800a8e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d001      	beq.n	800a8f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e05e      	b.n	800a9b6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2202      	movs	r2, #2
 800a8fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	68da      	ldr	r2, [r3, #12]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f042 0201 	orr.w	r2, r2, #1
 800a90e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a2b      	ldr	r2, [pc, #172]	; (800a9c4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d02c      	beq.n	800a974 <HAL_TIM_Base_Start_IT+0x94>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a922:	d027      	beq.n	800a974 <HAL_TIM_Base_Start_IT+0x94>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a27      	ldr	r2, [pc, #156]	; (800a9c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d022      	beq.n	800a974 <HAL_TIM_Base_Start_IT+0x94>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a26      	ldr	r2, [pc, #152]	; (800a9cc <HAL_TIM_Base_Start_IT+0xec>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d01d      	beq.n	800a974 <HAL_TIM_Base_Start_IT+0x94>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a24      	ldr	r2, [pc, #144]	; (800a9d0 <HAL_TIM_Base_Start_IT+0xf0>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d018      	beq.n	800a974 <HAL_TIM_Base_Start_IT+0x94>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a23      	ldr	r2, [pc, #140]	; (800a9d4 <HAL_TIM_Base_Start_IT+0xf4>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d013      	beq.n	800a974 <HAL_TIM_Base_Start_IT+0x94>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a21      	ldr	r2, [pc, #132]	; (800a9d8 <HAL_TIM_Base_Start_IT+0xf8>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d00e      	beq.n	800a974 <HAL_TIM_Base_Start_IT+0x94>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a20      	ldr	r2, [pc, #128]	; (800a9dc <HAL_TIM_Base_Start_IT+0xfc>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d009      	beq.n	800a974 <HAL_TIM_Base_Start_IT+0x94>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a1e      	ldr	r2, [pc, #120]	; (800a9e0 <HAL_TIM_Base_Start_IT+0x100>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d004      	beq.n	800a974 <HAL_TIM_Base_Start_IT+0x94>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a1d      	ldr	r2, [pc, #116]	; (800a9e4 <HAL_TIM_Base_Start_IT+0x104>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d115      	bne.n	800a9a0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	689a      	ldr	r2, [r3, #8]
 800a97a:	4b1b      	ldr	r3, [pc, #108]	; (800a9e8 <HAL_TIM_Base_Start_IT+0x108>)
 800a97c:	4013      	ands	r3, r2
 800a97e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2b06      	cmp	r3, #6
 800a984:	d015      	beq.n	800a9b2 <HAL_TIM_Base_Start_IT+0xd2>
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a98c:	d011      	beq.n	800a9b2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f042 0201 	orr.w	r2, r2, #1
 800a99c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a99e:	e008      	b.n	800a9b2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f042 0201 	orr.w	r2, r2, #1
 800a9ae:	601a      	str	r2, [r3, #0]
 800a9b0:	e000      	b.n	800a9b4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3714      	adds	r7, #20
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	40010000 	.word	0x40010000
 800a9c8:	40000400 	.word	0x40000400
 800a9cc:	40000800 	.word	0x40000800
 800a9d0:	40000c00 	.word	0x40000c00
 800a9d4:	40010400 	.word	0x40010400
 800a9d8:	40001800 	.word	0x40001800
 800a9dc:	40014000 	.word	0x40014000
 800a9e0:	4000e000 	.word	0x4000e000
 800a9e4:	4000e400 	.word	0x4000e400
 800a9e8:	00010007 	.word	0x00010007

0800a9ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d101      	bne.n	800a9fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e049      	b.n	800aa92 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d106      	bne.n	800aa18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7f9 fcf4 	bl	8004400 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2202      	movs	r2, #2
 800aa1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	3304      	adds	r3, #4
 800aa28:	4619      	mov	r1, r3
 800aa2a:	4610      	mov	r0, r2
 800aa2c:	f000 fdda 	bl	800b5e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2201      	movs	r2, #1
 800aa74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
	...

0800aa9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d109      	bne.n	800aac0 <HAL_TIM_PWM_Start+0x24>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	bf14      	ite	ne
 800aab8:	2301      	movne	r3, #1
 800aaba:	2300      	moveq	r3, #0
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	e03c      	b.n	800ab3a <HAL_TIM_PWM_Start+0x9e>
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	2b04      	cmp	r3, #4
 800aac4:	d109      	bne.n	800aada <HAL_TIM_PWM_Start+0x3e>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	2b01      	cmp	r3, #1
 800aad0:	bf14      	ite	ne
 800aad2:	2301      	movne	r3, #1
 800aad4:	2300      	moveq	r3, #0
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	e02f      	b.n	800ab3a <HAL_TIM_PWM_Start+0x9e>
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	2b08      	cmp	r3, #8
 800aade:	d109      	bne.n	800aaf4 <HAL_TIM_PWM_Start+0x58>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	bf14      	ite	ne
 800aaec:	2301      	movne	r3, #1
 800aaee:	2300      	moveq	r3, #0
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	e022      	b.n	800ab3a <HAL_TIM_PWM_Start+0x9e>
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	2b0c      	cmp	r3, #12
 800aaf8:	d109      	bne.n	800ab0e <HAL_TIM_PWM_Start+0x72>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	bf14      	ite	ne
 800ab06:	2301      	movne	r3, #1
 800ab08:	2300      	moveq	r3, #0
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	e015      	b.n	800ab3a <HAL_TIM_PWM_Start+0x9e>
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	2b10      	cmp	r3, #16
 800ab12:	d109      	bne.n	800ab28 <HAL_TIM_PWM_Start+0x8c>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	bf14      	ite	ne
 800ab20:	2301      	movne	r3, #1
 800ab22:	2300      	moveq	r3, #0
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	e008      	b.n	800ab3a <HAL_TIM_PWM_Start+0x9e>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	bf14      	ite	ne
 800ab34:	2301      	movne	r3, #1
 800ab36:	2300      	moveq	r3, #0
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d001      	beq.n	800ab42 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e0ab      	b.n	800ac9a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d104      	bne.n	800ab52 <HAL_TIM_PWM_Start+0xb6>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2202      	movs	r2, #2
 800ab4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab50:	e023      	b.n	800ab9a <HAL_TIM_PWM_Start+0xfe>
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b04      	cmp	r3, #4
 800ab56:	d104      	bne.n	800ab62 <HAL_TIM_PWM_Start+0xc6>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2202      	movs	r2, #2
 800ab5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab60:	e01b      	b.n	800ab9a <HAL_TIM_PWM_Start+0xfe>
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	2b08      	cmp	r3, #8
 800ab66:	d104      	bne.n	800ab72 <HAL_TIM_PWM_Start+0xd6>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2202      	movs	r2, #2
 800ab6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab70:	e013      	b.n	800ab9a <HAL_TIM_PWM_Start+0xfe>
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	2b0c      	cmp	r3, #12
 800ab76:	d104      	bne.n	800ab82 <HAL_TIM_PWM_Start+0xe6>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2202      	movs	r2, #2
 800ab7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab80:	e00b      	b.n	800ab9a <HAL_TIM_PWM_Start+0xfe>
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	2b10      	cmp	r3, #16
 800ab86:	d104      	bne.n	800ab92 <HAL_TIM_PWM_Start+0xf6>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2202      	movs	r2, #2
 800ab8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab90:	e003      	b.n	800ab9a <HAL_TIM_PWM_Start+0xfe>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2202      	movs	r2, #2
 800ab96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	6839      	ldr	r1, [r7, #0]
 800aba2:	4618      	mov	r0, r3
 800aba4:	f001 f938 	bl	800be18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a3d      	ldr	r2, [pc, #244]	; (800aca4 <HAL_TIM_PWM_Start+0x208>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d013      	beq.n	800abda <HAL_TIM_PWM_Start+0x13e>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a3c      	ldr	r2, [pc, #240]	; (800aca8 <HAL_TIM_PWM_Start+0x20c>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d00e      	beq.n	800abda <HAL_TIM_PWM_Start+0x13e>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a3a      	ldr	r2, [pc, #232]	; (800acac <HAL_TIM_PWM_Start+0x210>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d009      	beq.n	800abda <HAL_TIM_PWM_Start+0x13e>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a39      	ldr	r2, [pc, #228]	; (800acb0 <HAL_TIM_PWM_Start+0x214>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d004      	beq.n	800abda <HAL_TIM_PWM_Start+0x13e>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a37      	ldr	r2, [pc, #220]	; (800acb4 <HAL_TIM_PWM_Start+0x218>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d101      	bne.n	800abde <HAL_TIM_PWM_Start+0x142>
 800abda:	2301      	movs	r3, #1
 800abdc:	e000      	b.n	800abe0 <HAL_TIM_PWM_Start+0x144>
 800abde:	2300      	movs	r3, #0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d007      	beq.n	800abf4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800abf2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a2a      	ldr	r2, [pc, #168]	; (800aca4 <HAL_TIM_PWM_Start+0x208>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d02c      	beq.n	800ac58 <HAL_TIM_PWM_Start+0x1bc>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac06:	d027      	beq.n	800ac58 <HAL_TIM_PWM_Start+0x1bc>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a2a      	ldr	r2, [pc, #168]	; (800acb8 <HAL_TIM_PWM_Start+0x21c>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d022      	beq.n	800ac58 <HAL_TIM_PWM_Start+0x1bc>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a29      	ldr	r2, [pc, #164]	; (800acbc <HAL_TIM_PWM_Start+0x220>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d01d      	beq.n	800ac58 <HAL_TIM_PWM_Start+0x1bc>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a27      	ldr	r2, [pc, #156]	; (800acc0 <HAL_TIM_PWM_Start+0x224>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d018      	beq.n	800ac58 <HAL_TIM_PWM_Start+0x1bc>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a1f      	ldr	r2, [pc, #124]	; (800aca8 <HAL_TIM_PWM_Start+0x20c>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d013      	beq.n	800ac58 <HAL_TIM_PWM_Start+0x1bc>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a23      	ldr	r2, [pc, #140]	; (800acc4 <HAL_TIM_PWM_Start+0x228>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d00e      	beq.n	800ac58 <HAL_TIM_PWM_Start+0x1bc>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a1b      	ldr	r2, [pc, #108]	; (800acac <HAL_TIM_PWM_Start+0x210>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d009      	beq.n	800ac58 <HAL_TIM_PWM_Start+0x1bc>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a1f      	ldr	r2, [pc, #124]	; (800acc8 <HAL_TIM_PWM_Start+0x22c>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d004      	beq.n	800ac58 <HAL_TIM_PWM_Start+0x1bc>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a1e      	ldr	r2, [pc, #120]	; (800accc <HAL_TIM_PWM_Start+0x230>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d115      	bne.n	800ac84 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	689a      	ldr	r2, [r3, #8]
 800ac5e:	4b1c      	ldr	r3, [pc, #112]	; (800acd0 <HAL_TIM_PWM_Start+0x234>)
 800ac60:	4013      	ands	r3, r2
 800ac62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2b06      	cmp	r3, #6
 800ac68:	d015      	beq.n	800ac96 <HAL_TIM_PWM_Start+0x1fa>
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac70:	d011      	beq.n	800ac96 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f042 0201 	orr.w	r2, r2, #1
 800ac80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac82:	e008      	b.n	800ac96 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f042 0201 	orr.w	r2, r2, #1
 800ac92:	601a      	str	r2, [r3, #0]
 800ac94:	e000      	b.n	800ac98 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	40010000 	.word	0x40010000
 800aca8:	40010400 	.word	0x40010400
 800acac:	40014000 	.word	0x40014000
 800acb0:	40014400 	.word	0x40014400
 800acb4:	40014800 	.word	0x40014800
 800acb8:	40000400 	.word	0x40000400
 800acbc:	40000800 	.word	0x40000800
 800acc0:	40000c00 	.word	0x40000c00
 800acc4:	40001800 	.word	0x40001800
 800acc8:	4000e000 	.word	0x4000e000
 800accc:	4000e400 	.word	0x4000e400
 800acd0:	00010007 	.word	0x00010007

0800acd4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b086      	sub	sp, #24
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d101      	bne.n	800ace8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ace4:	2301      	movs	r3, #1
 800ace6:	e08f      	b.n	800ae08 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d106      	bne.n	800ad02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7f9 fac3 	bl	8004288 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2202      	movs	r2, #2
 800ad06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	6899      	ldr	r1, [r3, #8]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	4b3e      	ldr	r3, [pc, #248]	; (800ae10 <HAL_TIM_Encoder_Init+0x13c>)
 800ad16:	400b      	ands	r3, r1
 800ad18:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	3304      	adds	r3, #4
 800ad22:	4619      	mov	r1, r3
 800ad24:	4610      	mov	r0, r2
 800ad26:	f000 fc5d 	bl	800b5e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	6a1b      	ldr	r3, [r3, #32]
 800ad40:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	697a      	ldr	r2, [r7, #20]
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ad4c:	693a      	ldr	r2, [r7, #16]
 800ad4e:	4b31      	ldr	r3, [pc, #196]	; (800ae14 <HAL_TIM_Encoder_Init+0x140>)
 800ad50:	4013      	ands	r3, r2
 800ad52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	689a      	ldr	r2, [r3, #8]
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	699b      	ldr	r3, [r3, #24]
 800ad5c:	021b      	lsls	r3, r3, #8
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	693a      	ldr	r2, [r7, #16]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ad66:	693a      	ldr	r2, [r7, #16]
 800ad68:	4b2b      	ldr	r3, [pc, #172]	; (800ae18 <HAL_TIM_Encoder_Init+0x144>)
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ad6e:	693a      	ldr	r2, [r7, #16]
 800ad70:	4b2a      	ldr	r3, [pc, #168]	; (800ae1c <HAL_TIM_Encoder_Init+0x148>)
 800ad72:	4013      	ands	r3, r2
 800ad74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	68da      	ldr	r2, [r3, #12]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	69db      	ldr	r3, [r3, #28]
 800ad7e:	021b      	lsls	r3, r3, #8
 800ad80:	4313      	orrs	r3, r2
 800ad82:	693a      	ldr	r2, [r7, #16]
 800ad84:	4313      	orrs	r3, r2
 800ad86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	011a      	lsls	r2, r3, #4
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	6a1b      	ldr	r3, [r3, #32]
 800ad92:	031b      	lsls	r3, r3, #12
 800ad94:	4313      	orrs	r3, r2
 800ad96:	693a      	ldr	r2, [r7, #16]
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ada2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800adaa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	685a      	ldr	r2, [r3, #4]
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	695b      	ldr	r3, [r3, #20]
 800adb4:	011b      	lsls	r3, r3, #4
 800adb6:	4313      	orrs	r3, r2
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	4313      	orrs	r3, r2
 800adbc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	697a      	ldr	r2, [r7, #20]
 800adc4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	693a      	ldr	r2, [r7, #16]
 800adcc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	68fa      	ldr	r2, [r7, #12]
 800add4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2201      	movs	r2, #1
 800adda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2201      	movs	r2, #1
 800ade2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2201      	movs	r2, #1
 800adea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2201      	movs	r2, #1
 800adfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2201      	movs	r2, #1
 800ae02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3718      	adds	r7, #24
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	fffebff8 	.word	0xfffebff8
 800ae14:	fffffcfc 	.word	0xfffffcfc
 800ae18:	fffff3f3 	.word	0xfffff3f3
 800ae1c:	ffff0f0f 	.word	0xffff0f0f

0800ae20 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae30:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ae38:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae40:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae48:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d110      	bne.n	800ae72 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae50:	7bfb      	ldrb	r3, [r7, #15]
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d102      	bne.n	800ae5c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ae56:	7b7b      	ldrb	r3, [r7, #13]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d001      	beq.n	800ae60 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e069      	b.n	800af34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2202      	movs	r2, #2
 800ae64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2202      	movs	r2, #2
 800ae6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae70:	e031      	b.n	800aed6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	2b04      	cmp	r3, #4
 800ae76:	d110      	bne.n	800ae9a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae78:	7bbb      	ldrb	r3, [r7, #14]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d102      	bne.n	800ae84 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ae7e:	7b3b      	ldrb	r3, [r7, #12]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d001      	beq.n	800ae88 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	e055      	b.n	800af34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2202      	movs	r2, #2
 800ae8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2202      	movs	r2, #2
 800ae94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae98:	e01d      	b.n	800aed6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae9a:	7bfb      	ldrb	r3, [r7, #15]
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d108      	bne.n	800aeb2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800aea0:	7bbb      	ldrb	r3, [r7, #14]
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d105      	bne.n	800aeb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aea6:	7b7b      	ldrb	r3, [r7, #13]
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d102      	bne.n	800aeb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800aeac:	7b3b      	ldrb	r3, [r7, #12]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d001      	beq.n	800aeb6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e03e      	b.n	800af34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2202      	movs	r2, #2
 800aeba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2202      	movs	r2, #2
 800aec2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2202      	movs	r2, #2
 800aeca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2202      	movs	r2, #2
 800aed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d003      	beq.n	800aee4 <HAL_TIM_Encoder_Start+0xc4>
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	2b04      	cmp	r3, #4
 800aee0:	d008      	beq.n	800aef4 <HAL_TIM_Encoder_Start+0xd4>
 800aee2:	e00f      	b.n	800af04 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2201      	movs	r2, #1
 800aeea:	2100      	movs	r1, #0
 800aeec:	4618      	mov	r0, r3
 800aeee:	f000 ff93 	bl	800be18 <TIM_CCxChannelCmd>
      break;
 800aef2:	e016      	b.n	800af22 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2201      	movs	r2, #1
 800aefa:	2104      	movs	r1, #4
 800aefc:	4618      	mov	r0, r3
 800aefe:	f000 ff8b 	bl	800be18 <TIM_CCxChannelCmd>
      break;
 800af02:	e00e      	b.n	800af22 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2201      	movs	r2, #1
 800af0a:	2100      	movs	r1, #0
 800af0c:	4618      	mov	r0, r3
 800af0e:	f000 ff83 	bl	800be18 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2201      	movs	r2, #1
 800af18:	2104      	movs	r1, #4
 800af1a:	4618      	mov	r0, r3
 800af1c:	f000 ff7c 	bl	800be18 <TIM_CCxChannelCmd>
      break;
 800af20:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f042 0201 	orr.w	r2, r2, #1
 800af30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	f003 0302 	and.w	r3, r3, #2
 800af4e:	2b02      	cmp	r3, #2
 800af50:	d122      	bne.n	800af98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	f003 0302 	and.w	r3, r3, #2
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d11b      	bne.n	800af98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f06f 0202 	mvn.w	r2, #2
 800af68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2201      	movs	r2, #1
 800af6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	699b      	ldr	r3, [r3, #24]
 800af76:	f003 0303 	and.w	r3, r3, #3
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d003      	beq.n	800af86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 fb12 	bl	800b5a8 <HAL_TIM_IC_CaptureCallback>
 800af84:	e005      	b.n	800af92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 fb04 	bl	800b594 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 fb15 	bl	800b5bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	691b      	ldr	r3, [r3, #16]
 800af9e:	f003 0304 	and.w	r3, r3, #4
 800afa2:	2b04      	cmp	r3, #4
 800afa4:	d122      	bne.n	800afec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	f003 0304 	and.w	r3, r3, #4
 800afb0:	2b04      	cmp	r3, #4
 800afb2:	d11b      	bne.n	800afec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f06f 0204 	mvn.w	r2, #4
 800afbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2202      	movs	r2, #2
 800afc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	699b      	ldr	r3, [r3, #24]
 800afca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d003      	beq.n	800afda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 fae8 	bl	800b5a8 <HAL_TIM_IC_CaptureCallback>
 800afd8:	e005      	b.n	800afe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 fada 	bl	800b594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 faeb 	bl	800b5bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	f003 0308 	and.w	r3, r3, #8
 800aff6:	2b08      	cmp	r3, #8
 800aff8:	d122      	bne.n	800b040 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	f003 0308 	and.w	r3, r3, #8
 800b004:	2b08      	cmp	r3, #8
 800b006:	d11b      	bne.n	800b040 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f06f 0208 	mvn.w	r2, #8
 800b010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2204      	movs	r2, #4
 800b016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	69db      	ldr	r3, [r3, #28]
 800b01e:	f003 0303 	and.w	r3, r3, #3
 800b022:	2b00      	cmp	r3, #0
 800b024:	d003      	beq.n	800b02e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fabe 	bl	800b5a8 <HAL_TIM_IC_CaptureCallback>
 800b02c:	e005      	b.n	800b03a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 fab0 	bl	800b594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 fac1 	bl	800b5bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	f003 0310 	and.w	r3, r3, #16
 800b04a:	2b10      	cmp	r3, #16
 800b04c:	d122      	bne.n	800b094 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	f003 0310 	and.w	r3, r3, #16
 800b058:	2b10      	cmp	r3, #16
 800b05a:	d11b      	bne.n	800b094 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f06f 0210 	mvn.w	r2, #16
 800b064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2208      	movs	r2, #8
 800b06a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	69db      	ldr	r3, [r3, #28]
 800b072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b076:	2b00      	cmp	r3, #0
 800b078:	d003      	beq.n	800b082 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 fa94 	bl	800b5a8 <HAL_TIM_IC_CaptureCallback>
 800b080:	e005      	b.n	800b08e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 fa86 	bl	800b594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 fa97 	bl	800b5bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	691b      	ldr	r3, [r3, #16]
 800b09a:	f003 0301 	and.w	r3, r3, #1
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d10e      	bne.n	800b0c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	f003 0301 	and.w	r3, r3, #1
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d107      	bne.n	800b0c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f06f 0201 	mvn.w	r2, #1
 800b0b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7f5 ff32 	bl	8000f24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	691b      	ldr	r3, [r3, #16]
 800b0c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ca:	2b80      	cmp	r3, #128	; 0x80
 800b0cc:	d10e      	bne.n	800b0ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0d8:	2b80      	cmp	r3, #128	; 0x80
 800b0da:	d107      	bne.n	800b0ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b0e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f001 f802 	bl	800c0f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	691b      	ldr	r3, [r3, #16]
 800b0f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0fa:	d10e      	bne.n	800b11a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b106:	2b80      	cmp	r3, #128	; 0x80
 800b108:	d107      	bne.n	800b11a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 fff5 	bl	800c104 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	691b      	ldr	r3, [r3, #16]
 800b120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b124:	2b40      	cmp	r3, #64	; 0x40
 800b126:	d10e      	bne.n	800b146 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	68db      	ldr	r3, [r3, #12]
 800b12e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b132:	2b40      	cmp	r3, #64	; 0x40
 800b134:	d107      	bne.n	800b146 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b13e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 fa45 	bl	800b5d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	f003 0320 	and.w	r3, r3, #32
 800b150:	2b20      	cmp	r3, #32
 800b152:	d10e      	bne.n	800b172 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	f003 0320 	and.w	r3, r3, #32
 800b15e:	2b20      	cmp	r3, #32
 800b160:	d107      	bne.n	800b172 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f06f 0220 	mvn.w	r2, #32
 800b16a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 ffb5 	bl	800c0dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b172:	bf00      	nop
 800b174:	3708      	adds	r7, #8
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
	...

0800b17c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b086      	sub	sp, #24
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b188:	2300      	movs	r3, #0
 800b18a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b192:	2b01      	cmp	r3, #1
 800b194:	d101      	bne.n	800b19a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b196:	2302      	movs	r3, #2
 800b198:	e0ff      	b.n	800b39a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2201      	movs	r2, #1
 800b19e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2b14      	cmp	r3, #20
 800b1a6:	f200 80f0 	bhi.w	800b38a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b1aa:	a201      	add	r2, pc, #4	; (adr r2, 800b1b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b0:	0800b205 	.word	0x0800b205
 800b1b4:	0800b38b 	.word	0x0800b38b
 800b1b8:	0800b38b 	.word	0x0800b38b
 800b1bc:	0800b38b 	.word	0x0800b38b
 800b1c0:	0800b245 	.word	0x0800b245
 800b1c4:	0800b38b 	.word	0x0800b38b
 800b1c8:	0800b38b 	.word	0x0800b38b
 800b1cc:	0800b38b 	.word	0x0800b38b
 800b1d0:	0800b287 	.word	0x0800b287
 800b1d4:	0800b38b 	.word	0x0800b38b
 800b1d8:	0800b38b 	.word	0x0800b38b
 800b1dc:	0800b38b 	.word	0x0800b38b
 800b1e0:	0800b2c7 	.word	0x0800b2c7
 800b1e4:	0800b38b 	.word	0x0800b38b
 800b1e8:	0800b38b 	.word	0x0800b38b
 800b1ec:	0800b38b 	.word	0x0800b38b
 800b1f0:	0800b309 	.word	0x0800b309
 800b1f4:	0800b38b 	.word	0x0800b38b
 800b1f8:	0800b38b 	.word	0x0800b38b
 800b1fc:	0800b38b 	.word	0x0800b38b
 800b200:	0800b349 	.word	0x0800b349
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	68b9      	ldr	r1, [r7, #8]
 800b20a:	4618      	mov	r0, r3
 800b20c:	f000 fa90 	bl	800b730 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	699a      	ldr	r2, [r3, #24]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f042 0208 	orr.w	r2, r2, #8
 800b21e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	699a      	ldr	r2, [r3, #24]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f022 0204 	bic.w	r2, r2, #4
 800b22e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	6999      	ldr	r1, [r3, #24]
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	691a      	ldr	r2, [r3, #16]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	430a      	orrs	r2, r1
 800b240:	619a      	str	r2, [r3, #24]
      break;
 800b242:	e0a5      	b.n	800b390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	68b9      	ldr	r1, [r7, #8]
 800b24a:	4618      	mov	r0, r3
 800b24c:	f000 fb00 	bl	800b850 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	699a      	ldr	r2, [r3, #24]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b25e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	699a      	ldr	r2, [r3, #24]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b26e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	6999      	ldr	r1, [r3, #24]
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	021a      	lsls	r2, r3, #8
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	430a      	orrs	r2, r1
 800b282:	619a      	str	r2, [r3, #24]
      break;
 800b284:	e084      	b.n	800b390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	68b9      	ldr	r1, [r7, #8]
 800b28c:	4618      	mov	r0, r3
 800b28e:	f000 fb69 	bl	800b964 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	69da      	ldr	r2, [r3, #28]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f042 0208 	orr.w	r2, r2, #8
 800b2a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	69da      	ldr	r2, [r3, #28]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f022 0204 	bic.w	r2, r2, #4
 800b2b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	69d9      	ldr	r1, [r3, #28]
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	691a      	ldr	r2, [r3, #16]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	430a      	orrs	r2, r1
 800b2c2:	61da      	str	r2, [r3, #28]
      break;
 800b2c4:	e064      	b.n	800b390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	68b9      	ldr	r1, [r7, #8]
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f000 fbd1 	bl	800ba74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	69da      	ldr	r2, [r3, #28]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	69da      	ldr	r2, [r3, #28]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	69d9      	ldr	r1, [r3, #28]
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	021a      	lsls	r2, r3, #8
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	430a      	orrs	r2, r1
 800b304:	61da      	str	r2, [r3, #28]
      break;
 800b306:	e043      	b.n	800b390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	68b9      	ldr	r1, [r7, #8]
 800b30e:	4618      	mov	r0, r3
 800b310:	f000 fc1a 	bl	800bb48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f042 0208 	orr.w	r2, r2, #8
 800b322:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f022 0204 	bic.w	r2, r2, #4
 800b332:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	691a      	ldr	r2, [r3, #16]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	430a      	orrs	r2, r1
 800b344:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b346:	e023      	b.n	800b390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68b9      	ldr	r1, [r7, #8]
 800b34e:	4618      	mov	r0, r3
 800b350:	f000 fc5e 	bl	800bc10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b362:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b372:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	691b      	ldr	r3, [r3, #16]
 800b37e:	021a      	lsls	r2, r3, #8
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	430a      	orrs	r2, r1
 800b386:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b388:	e002      	b.n	800b390 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b38a:	2301      	movs	r3, #1
 800b38c:	75fb      	strb	r3, [r7, #23]
      break;
 800b38e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2200      	movs	r2, #0
 800b394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b398:	7dfb      	ldrb	r3, [r7, #23]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3718      	adds	r7, #24
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop

0800b3a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d101      	bne.n	800b3c0 <HAL_TIM_ConfigClockSource+0x1c>
 800b3bc:	2302      	movs	r3, #2
 800b3be:	e0dc      	b.n	800b57a <HAL_TIM_ConfigClockSource+0x1d6>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2202      	movs	r2, #2
 800b3cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b3d8:	68ba      	ldr	r2, [r7, #8]
 800b3da:	4b6a      	ldr	r3, [pc, #424]	; (800b584 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b3dc:	4013      	ands	r3, r2
 800b3de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	68ba      	ldr	r2, [r7, #8]
 800b3ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4a64      	ldr	r2, [pc, #400]	; (800b588 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	f000 80a9 	beq.w	800b54e <HAL_TIM_ConfigClockSource+0x1aa>
 800b3fc:	4a62      	ldr	r2, [pc, #392]	; (800b588 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	f200 80ae 	bhi.w	800b560 <HAL_TIM_ConfigClockSource+0x1bc>
 800b404:	4a61      	ldr	r2, [pc, #388]	; (800b58c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b406:	4293      	cmp	r3, r2
 800b408:	f000 80a1 	beq.w	800b54e <HAL_TIM_ConfigClockSource+0x1aa>
 800b40c:	4a5f      	ldr	r2, [pc, #380]	; (800b58c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	f200 80a6 	bhi.w	800b560 <HAL_TIM_ConfigClockSource+0x1bc>
 800b414:	4a5e      	ldr	r2, [pc, #376]	; (800b590 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b416:	4293      	cmp	r3, r2
 800b418:	f000 8099 	beq.w	800b54e <HAL_TIM_ConfigClockSource+0x1aa>
 800b41c:	4a5c      	ldr	r2, [pc, #368]	; (800b590 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	f200 809e 	bhi.w	800b560 <HAL_TIM_ConfigClockSource+0x1bc>
 800b424:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b428:	f000 8091 	beq.w	800b54e <HAL_TIM_ConfigClockSource+0x1aa>
 800b42c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b430:	f200 8096 	bhi.w	800b560 <HAL_TIM_ConfigClockSource+0x1bc>
 800b434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b438:	f000 8089 	beq.w	800b54e <HAL_TIM_ConfigClockSource+0x1aa>
 800b43c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b440:	f200 808e 	bhi.w	800b560 <HAL_TIM_ConfigClockSource+0x1bc>
 800b444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b448:	d03e      	beq.n	800b4c8 <HAL_TIM_ConfigClockSource+0x124>
 800b44a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b44e:	f200 8087 	bhi.w	800b560 <HAL_TIM_ConfigClockSource+0x1bc>
 800b452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b456:	f000 8086 	beq.w	800b566 <HAL_TIM_ConfigClockSource+0x1c2>
 800b45a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b45e:	d87f      	bhi.n	800b560 <HAL_TIM_ConfigClockSource+0x1bc>
 800b460:	2b70      	cmp	r3, #112	; 0x70
 800b462:	d01a      	beq.n	800b49a <HAL_TIM_ConfigClockSource+0xf6>
 800b464:	2b70      	cmp	r3, #112	; 0x70
 800b466:	d87b      	bhi.n	800b560 <HAL_TIM_ConfigClockSource+0x1bc>
 800b468:	2b60      	cmp	r3, #96	; 0x60
 800b46a:	d050      	beq.n	800b50e <HAL_TIM_ConfigClockSource+0x16a>
 800b46c:	2b60      	cmp	r3, #96	; 0x60
 800b46e:	d877      	bhi.n	800b560 <HAL_TIM_ConfigClockSource+0x1bc>
 800b470:	2b50      	cmp	r3, #80	; 0x50
 800b472:	d03c      	beq.n	800b4ee <HAL_TIM_ConfigClockSource+0x14a>
 800b474:	2b50      	cmp	r3, #80	; 0x50
 800b476:	d873      	bhi.n	800b560 <HAL_TIM_ConfigClockSource+0x1bc>
 800b478:	2b40      	cmp	r3, #64	; 0x40
 800b47a:	d058      	beq.n	800b52e <HAL_TIM_ConfigClockSource+0x18a>
 800b47c:	2b40      	cmp	r3, #64	; 0x40
 800b47e:	d86f      	bhi.n	800b560 <HAL_TIM_ConfigClockSource+0x1bc>
 800b480:	2b30      	cmp	r3, #48	; 0x30
 800b482:	d064      	beq.n	800b54e <HAL_TIM_ConfigClockSource+0x1aa>
 800b484:	2b30      	cmp	r3, #48	; 0x30
 800b486:	d86b      	bhi.n	800b560 <HAL_TIM_ConfigClockSource+0x1bc>
 800b488:	2b20      	cmp	r3, #32
 800b48a:	d060      	beq.n	800b54e <HAL_TIM_ConfigClockSource+0x1aa>
 800b48c:	2b20      	cmp	r3, #32
 800b48e:	d867      	bhi.n	800b560 <HAL_TIM_ConfigClockSource+0x1bc>
 800b490:	2b00      	cmp	r3, #0
 800b492:	d05c      	beq.n	800b54e <HAL_TIM_ConfigClockSource+0x1aa>
 800b494:	2b10      	cmp	r3, #16
 800b496:	d05a      	beq.n	800b54e <HAL_TIM_ConfigClockSource+0x1aa>
 800b498:	e062      	b.n	800b560 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6818      	ldr	r0, [r3, #0]
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	6899      	ldr	r1, [r3, #8]
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	685a      	ldr	r2, [r3, #4]
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	f000 fc95 	bl	800bdd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b4bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	609a      	str	r2, [r3, #8]
      break;
 800b4c6:	e04f      	b.n	800b568 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6818      	ldr	r0, [r3, #0]
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	6899      	ldr	r1, [r3, #8]
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	685a      	ldr	r2, [r3, #4]
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	68db      	ldr	r3, [r3, #12]
 800b4d8:	f000 fc7e 	bl	800bdd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	689a      	ldr	r2, [r3, #8]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4ea:	609a      	str	r2, [r3, #8]
      break;
 800b4ec:	e03c      	b.n	800b568 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6818      	ldr	r0, [r3, #0]
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	6859      	ldr	r1, [r3, #4]
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	f000 fbee 	bl	800bcdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2150      	movs	r1, #80	; 0x50
 800b506:	4618      	mov	r0, r3
 800b508:	f000 fc48 	bl	800bd9c <TIM_ITRx_SetConfig>
      break;
 800b50c:	e02c      	b.n	800b568 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6818      	ldr	r0, [r3, #0]
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	6859      	ldr	r1, [r3, #4]
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	461a      	mov	r2, r3
 800b51c:	f000 fc0d 	bl	800bd3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	2160      	movs	r1, #96	; 0x60
 800b526:	4618      	mov	r0, r3
 800b528:	f000 fc38 	bl	800bd9c <TIM_ITRx_SetConfig>
      break;
 800b52c:	e01c      	b.n	800b568 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6818      	ldr	r0, [r3, #0]
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	6859      	ldr	r1, [r3, #4]
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	461a      	mov	r2, r3
 800b53c:	f000 fbce 	bl	800bcdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2140      	movs	r1, #64	; 0x40
 800b546:	4618      	mov	r0, r3
 800b548:	f000 fc28 	bl	800bd9c <TIM_ITRx_SetConfig>
      break;
 800b54c:	e00c      	b.n	800b568 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681a      	ldr	r2, [r3, #0]
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4619      	mov	r1, r3
 800b558:	4610      	mov	r0, r2
 800b55a:	f000 fc1f 	bl	800bd9c <TIM_ITRx_SetConfig>
      break;
 800b55e:	e003      	b.n	800b568 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b560:	2301      	movs	r3, #1
 800b562:	73fb      	strb	r3, [r7, #15]
      break;
 800b564:	e000      	b.n	800b568 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b566:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2201      	movs	r2, #1
 800b56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b578:	7bfb      	ldrb	r3, [r7, #15]
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	ffceff88 	.word	0xffceff88
 800b588:	00100040 	.word	0x00100040
 800b58c:	00100030 	.word	0x00100030
 800b590:	00100020 	.word	0x00100020

0800b594 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b59c:	bf00      	nop
 800b59e:	370c      	adds	r7, #12
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr

0800b5a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5b0:	bf00      	nop
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr

0800b5bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b5c4:	bf00      	nop
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b5d8:	bf00      	nop
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b085      	sub	sp, #20
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	4a44      	ldr	r2, [pc, #272]	; (800b708 <TIM_Base_SetConfig+0x124>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d013      	beq.n	800b624 <TIM_Base_SetConfig+0x40>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b602:	d00f      	beq.n	800b624 <TIM_Base_SetConfig+0x40>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	4a41      	ldr	r2, [pc, #260]	; (800b70c <TIM_Base_SetConfig+0x128>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d00b      	beq.n	800b624 <TIM_Base_SetConfig+0x40>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	4a40      	ldr	r2, [pc, #256]	; (800b710 <TIM_Base_SetConfig+0x12c>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d007      	beq.n	800b624 <TIM_Base_SetConfig+0x40>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4a3f      	ldr	r2, [pc, #252]	; (800b714 <TIM_Base_SetConfig+0x130>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d003      	beq.n	800b624 <TIM_Base_SetConfig+0x40>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4a3e      	ldr	r2, [pc, #248]	; (800b718 <TIM_Base_SetConfig+0x134>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d108      	bne.n	800b636 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b62a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	68fa      	ldr	r2, [r7, #12]
 800b632:	4313      	orrs	r3, r2
 800b634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	4a33      	ldr	r2, [pc, #204]	; (800b708 <TIM_Base_SetConfig+0x124>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d027      	beq.n	800b68e <TIM_Base_SetConfig+0xaa>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b644:	d023      	beq.n	800b68e <TIM_Base_SetConfig+0xaa>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	4a30      	ldr	r2, [pc, #192]	; (800b70c <TIM_Base_SetConfig+0x128>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d01f      	beq.n	800b68e <TIM_Base_SetConfig+0xaa>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	4a2f      	ldr	r2, [pc, #188]	; (800b710 <TIM_Base_SetConfig+0x12c>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d01b      	beq.n	800b68e <TIM_Base_SetConfig+0xaa>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4a2e      	ldr	r2, [pc, #184]	; (800b714 <TIM_Base_SetConfig+0x130>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d017      	beq.n	800b68e <TIM_Base_SetConfig+0xaa>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4a2d      	ldr	r2, [pc, #180]	; (800b718 <TIM_Base_SetConfig+0x134>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d013      	beq.n	800b68e <TIM_Base_SetConfig+0xaa>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4a2c      	ldr	r2, [pc, #176]	; (800b71c <TIM_Base_SetConfig+0x138>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d00f      	beq.n	800b68e <TIM_Base_SetConfig+0xaa>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4a2b      	ldr	r2, [pc, #172]	; (800b720 <TIM_Base_SetConfig+0x13c>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d00b      	beq.n	800b68e <TIM_Base_SetConfig+0xaa>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4a2a      	ldr	r2, [pc, #168]	; (800b724 <TIM_Base_SetConfig+0x140>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d007      	beq.n	800b68e <TIM_Base_SetConfig+0xaa>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4a29      	ldr	r2, [pc, #164]	; (800b728 <TIM_Base_SetConfig+0x144>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d003      	beq.n	800b68e <TIM_Base_SetConfig+0xaa>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	4a28      	ldr	r2, [pc, #160]	; (800b72c <TIM_Base_SetConfig+0x148>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d108      	bne.n	800b6a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	68db      	ldr	r3, [r3, #12]
 800b69a:	68fa      	ldr	r2, [r7, #12]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	695b      	ldr	r3, [r3, #20]
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	68fa      	ldr	r2, [r7, #12]
 800b6b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	689a      	ldr	r2, [r3, #8]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	4a10      	ldr	r2, [pc, #64]	; (800b708 <TIM_Base_SetConfig+0x124>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d00f      	beq.n	800b6ec <TIM_Base_SetConfig+0x108>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4a12      	ldr	r2, [pc, #72]	; (800b718 <TIM_Base_SetConfig+0x134>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d00b      	beq.n	800b6ec <TIM_Base_SetConfig+0x108>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4a11      	ldr	r2, [pc, #68]	; (800b71c <TIM_Base_SetConfig+0x138>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d007      	beq.n	800b6ec <TIM_Base_SetConfig+0x108>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	4a10      	ldr	r2, [pc, #64]	; (800b720 <TIM_Base_SetConfig+0x13c>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d003      	beq.n	800b6ec <TIM_Base_SetConfig+0x108>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	4a0f      	ldr	r2, [pc, #60]	; (800b724 <TIM_Base_SetConfig+0x140>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d103      	bne.n	800b6f4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	691a      	ldr	r2, [r3, #16]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	615a      	str	r2, [r3, #20]
}
 800b6fa:	bf00      	nop
 800b6fc:	3714      	adds	r7, #20
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	40010000 	.word	0x40010000
 800b70c:	40000400 	.word	0x40000400
 800b710:	40000800 	.word	0x40000800
 800b714:	40000c00 	.word	0x40000c00
 800b718:	40010400 	.word	0x40010400
 800b71c:	40014000 	.word	0x40014000
 800b720:	40014400 	.word	0x40014400
 800b724:	40014800 	.word	0x40014800
 800b728:	4000e000 	.word	0x4000e000
 800b72c:	4000e400 	.word	0x4000e400

0800b730 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b730:	b480      	push	{r7}
 800b732:	b087      	sub	sp, #28
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6a1b      	ldr	r3, [r3, #32]
 800b73e:	f023 0201 	bic.w	r2, r3, #1
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6a1b      	ldr	r3, [r3, #32]
 800b74a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	699b      	ldr	r3, [r3, #24]
 800b756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	4b37      	ldr	r3, [pc, #220]	; (800b838 <TIM_OC1_SetConfig+0x108>)
 800b75c:	4013      	ands	r3, r2
 800b75e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f023 0303 	bic.w	r3, r3, #3
 800b766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	4313      	orrs	r3, r2
 800b770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	f023 0302 	bic.w	r3, r3, #2
 800b778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	697a      	ldr	r2, [r7, #20]
 800b780:	4313      	orrs	r3, r2
 800b782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a2d      	ldr	r2, [pc, #180]	; (800b83c <TIM_OC1_SetConfig+0x10c>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d00f      	beq.n	800b7ac <TIM_OC1_SetConfig+0x7c>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4a2c      	ldr	r2, [pc, #176]	; (800b840 <TIM_OC1_SetConfig+0x110>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d00b      	beq.n	800b7ac <TIM_OC1_SetConfig+0x7c>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4a2b      	ldr	r2, [pc, #172]	; (800b844 <TIM_OC1_SetConfig+0x114>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d007      	beq.n	800b7ac <TIM_OC1_SetConfig+0x7c>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4a2a      	ldr	r2, [pc, #168]	; (800b848 <TIM_OC1_SetConfig+0x118>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d003      	beq.n	800b7ac <TIM_OC1_SetConfig+0x7c>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	4a29      	ldr	r2, [pc, #164]	; (800b84c <TIM_OC1_SetConfig+0x11c>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d10c      	bne.n	800b7c6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	f023 0308 	bic.w	r3, r3, #8
 800b7b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	697a      	ldr	r2, [r7, #20]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	f023 0304 	bic.w	r3, r3, #4
 800b7c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4a1c      	ldr	r2, [pc, #112]	; (800b83c <TIM_OC1_SetConfig+0x10c>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d00f      	beq.n	800b7ee <TIM_OC1_SetConfig+0xbe>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4a1b      	ldr	r2, [pc, #108]	; (800b840 <TIM_OC1_SetConfig+0x110>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d00b      	beq.n	800b7ee <TIM_OC1_SetConfig+0xbe>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a1a      	ldr	r2, [pc, #104]	; (800b844 <TIM_OC1_SetConfig+0x114>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d007      	beq.n	800b7ee <TIM_OC1_SetConfig+0xbe>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a19      	ldr	r2, [pc, #100]	; (800b848 <TIM_OC1_SetConfig+0x118>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d003      	beq.n	800b7ee <TIM_OC1_SetConfig+0xbe>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a18      	ldr	r2, [pc, #96]	; (800b84c <TIM_OC1_SetConfig+0x11c>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d111      	bne.n	800b812 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b7fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	693a      	ldr	r2, [r7, #16]
 800b804:	4313      	orrs	r3, r2
 800b806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	699b      	ldr	r3, [r3, #24]
 800b80c:	693a      	ldr	r2, [r7, #16]
 800b80e:	4313      	orrs	r3, r2
 800b810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	693a      	ldr	r2, [r7, #16]
 800b816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	685a      	ldr	r2, [r3, #4]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	697a      	ldr	r2, [r7, #20]
 800b82a:	621a      	str	r2, [r3, #32]
}
 800b82c:	bf00      	nop
 800b82e:	371c      	adds	r7, #28
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr
 800b838:	fffeff8f 	.word	0xfffeff8f
 800b83c:	40010000 	.word	0x40010000
 800b840:	40010400 	.word	0x40010400
 800b844:	40014000 	.word	0x40014000
 800b848:	40014400 	.word	0x40014400
 800b84c:	40014800 	.word	0x40014800

0800b850 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b850:	b480      	push	{r7}
 800b852:	b087      	sub	sp, #28
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a1b      	ldr	r3, [r3, #32]
 800b85e:	f023 0210 	bic.w	r2, r3, #16
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6a1b      	ldr	r3, [r3, #32]
 800b86a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	699b      	ldr	r3, [r3, #24]
 800b876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	4b34      	ldr	r3, [pc, #208]	; (800b94c <TIM_OC2_SetConfig+0xfc>)
 800b87c:	4013      	ands	r3, r2
 800b87e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	021b      	lsls	r3, r3, #8
 800b88e:	68fa      	ldr	r2, [r7, #12]
 800b890:	4313      	orrs	r3, r2
 800b892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	f023 0320 	bic.w	r3, r3, #32
 800b89a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	011b      	lsls	r3, r3, #4
 800b8a2:	697a      	ldr	r2, [r7, #20]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	4a29      	ldr	r2, [pc, #164]	; (800b950 <TIM_OC2_SetConfig+0x100>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d003      	beq.n	800b8b8 <TIM_OC2_SetConfig+0x68>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	4a28      	ldr	r2, [pc, #160]	; (800b954 <TIM_OC2_SetConfig+0x104>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d10d      	bne.n	800b8d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	011b      	lsls	r3, r3, #4
 800b8c6:	697a      	ldr	r2, [r7, #20]
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4a1e      	ldr	r2, [pc, #120]	; (800b950 <TIM_OC2_SetConfig+0x100>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d00f      	beq.n	800b8fc <TIM_OC2_SetConfig+0xac>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a1d      	ldr	r2, [pc, #116]	; (800b954 <TIM_OC2_SetConfig+0x104>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d00b      	beq.n	800b8fc <TIM_OC2_SetConfig+0xac>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a1c      	ldr	r2, [pc, #112]	; (800b958 <TIM_OC2_SetConfig+0x108>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d007      	beq.n	800b8fc <TIM_OC2_SetConfig+0xac>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	4a1b      	ldr	r2, [pc, #108]	; (800b95c <TIM_OC2_SetConfig+0x10c>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d003      	beq.n	800b8fc <TIM_OC2_SetConfig+0xac>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	4a1a      	ldr	r2, [pc, #104]	; (800b960 <TIM_OC2_SetConfig+0x110>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d113      	bne.n	800b924 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b902:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b90a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	695b      	ldr	r3, [r3, #20]
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	693a      	ldr	r2, [r7, #16]
 800b914:	4313      	orrs	r3, r2
 800b916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	699b      	ldr	r3, [r3, #24]
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	693a      	ldr	r2, [r7, #16]
 800b920:	4313      	orrs	r3, r2
 800b922:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	693a      	ldr	r2, [r7, #16]
 800b928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	68fa      	ldr	r2, [r7, #12]
 800b92e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	685a      	ldr	r2, [r3, #4]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	697a      	ldr	r2, [r7, #20]
 800b93c:	621a      	str	r2, [r3, #32]
}
 800b93e:	bf00      	nop
 800b940:	371c      	adds	r7, #28
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr
 800b94a:	bf00      	nop
 800b94c:	feff8fff 	.word	0xfeff8fff
 800b950:	40010000 	.word	0x40010000
 800b954:	40010400 	.word	0x40010400
 800b958:	40014000 	.word	0x40014000
 800b95c:	40014400 	.word	0x40014400
 800b960:	40014800 	.word	0x40014800

0800b964 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b964:	b480      	push	{r7}
 800b966:	b087      	sub	sp, #28
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6a1b      	ldr	r3, [r3, #32]
 800b972:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a1b      	ldr	r3, [r3, #32]
 800b97e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	69db      	ldr	r3, [r3, #28]
 800b98a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b98c:	68fa      	ldr	r2, [r7, #12]
 800b98e:	4b33      	ldr	r3, [pc, #204]	; (800ba5c <TIM_OC3_SetConfig+0xf8>)
 800b990:	4013      	ands	r3, r2
 800b992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f023 0303 	bic.w	r3, r3, #3
 800b99a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b9ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	021b      	lsls	r3, r3, #8
 800b9b4:	697a      	ldr	r2, [r7, #20]
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4a28      	ldr	r2, [pc, #160]	; (800ba60 <TIM_OC3_SetConfig+0xfc>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d003      	beq.n	800b9ca <TIM_OC3_SetConfig+0x66>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a27      	ldr	r2, [pc, #156]	; (800ba64 <TIM_OC3_SetConfig+0x100>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d10d      	bne.n	800b9e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b9d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	021b      	lsls	r3, r3, #8
 800b9d8:	697a      	ldr	r2, [r7, #20]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b9e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4a1d      	ldr	r2, [pc, #116]	; (800ba60 <TIM_OC3_SetConfig+0xfc>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d00f      	beq.n	800ba0e <TIM_OC3_SetConfig+0xaa>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4a1c      	ldr	r2, [pc, #112]	; (800ba64 <TIM_OC3_SetConfig+0x100>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d00b      	beq.n	800ba0e <TIM_OC3_SetConfig+0xaa>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	4a1b      	ldr	r2, [pc, #108]	; (800ba68 <TIM_OC3_SetConfig+0x104>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d007      	beq.n	800ba0e <TIM_OC3_SetConfig+0xaa>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	4a1a      	ldr	r2, [pc, #104]	; (800ba6c <TIM_OC3_SetConfig+0x108>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d003      	beq.n	800ba0e <TIM_OC3_SetConfig+0xaa>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	4a19      	ldr	r2, [pc, #100]	; (800ba70 <TIM_OC3_SetConfig+0x10c>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d113      	bne.n	800ba36 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	695b      	ldr	r3, [r3, #20]
 800ba22:	011b      	lsls	r3, r3, #4
 800ba24:	693a      	ldr	r2, [r7, #16]
 800ba26:	4313      	orrs	r3, r2
 800ba28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	699b      	ldr	r3, [r3, #24]
 800ba2e:	011b      	lsls	r3, r3, #4
 800ba30:	693a      	ldr	r2, [r7, #16]
 800ba32:	4313      	orrs	r3, r2
 800ba34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	693a      	ldr	r2, [r7, #16]
 800ba3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	685a      	ldr	r2, [r3, #4]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	697a      	ldr	r2, [r7, #20]
 800ba4e:	621a      	str	r2, [r3, #32]
}
 800ba50:	bf00      	nop
 800ba52:	371c      	adds	r7, #28
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr
 800ba5c:	fffeff8f 	.word	0xfffeff8f
 800ba60:	40010000 	.word	0x40010000
 800ba64:	40010400 	.word	0x40010400
 800ba68:	40014000 	.word	0x40014000
 800ba6c:	40014400 	.word	0x40014400
 800ba70:	40014800 	.word	0x40014800

0800ba74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b087      	sub	sp, #28
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6a1b      	ldr	r3, [r3, #32]
 800ba82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6a1b      	ldr	r3, [r3, #32]
 800ba8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	69db      	ldr	r3, [r3, #28]
 800ba9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	4b24      	ldr	r3, [pc, #144]	; (800bb30 <TIM_OC4_SetConfig+0xbc>)
 800baa0:	4013      	ands	r3, r2
 800baa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800baaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	021b      	lsls	r3, r3, #8
 800bab2:	68fa      	ldr	r2, [r7, #12]
 800bab4:	4313      	orrs	r3, r2
 800bab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800babe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	031b      	lsls	r3, r3, #12
 800bac6:	693a      	ldr	r2, [r7, #16]
 800bac8:	4313      	orrs	r3, r2
 800baca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	4a19      	ldr	r2, [pc, #100]	; (800bb34 <TIM_OC4_SetConfig+0xc0>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d00f      	beq.n	800baf4 <TIM_OC4_SetConfig+0x80>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	4a18      	ldr	r2, [pc, #96]	; (800bb38 <TIM_OC4_SetConfig+0xc4>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d00b      	beq.n	800baf4 <TIM_OC4_SetConfig+0x80>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4a17      	ldr	r2, [pc, #92]	; (800bb3c <TIM_OC4_SetConfig+0xc8>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d007      	beq.n	800baf4 <TIM_OC4_SetConfig+0x80>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	4a16      	ldr	r2, [pc, #88]	; (800bb40 <TIM_OC4_SetConfig+0xcc>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d003      	beq.n	800baf4 <TIM_OC4_SetConfig+0x80>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	4a15      	ldr	r2, [pc, #84]	; (800bb44 <TIM_OC4_SetConfig+0xd0>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d109      	bne.n	800bb08 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bafa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	695b      	ldr	r3, [r3, #20]
 800bb00:	019b      	lsls	r3, r3, #6
 800bb02:	697a      	ldr	r2, [r7, #20]
 800bb04:	4313      	orrs	r3, r2
 800bb06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	697a      	ldr	r2, [r7, #20]
 800bb0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	68fa      	ldr	r2, [r7, #12]
 800bb12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	685a      	ldr	r2, [r3, #4]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	693a      	ldr	r2, [r7, #16]
 800bb20:	621a      	str	r2, [r3, #32]
}
 800bb22:	bf00      	nop
 800bb24:	371c      	adds	r7, #28
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr
 800bb2e:	bf00      	nop
 800bb30:	feff8fff 	.word	0xfeff8fff
 800bb34:	40010000 	.word	0x40010000
 800bb38:	40010400 	.word	0x40010400
 800bb3c:	40014000 	.word	0x40014000
 800bb40:	40014400 	.word	0x40014400
 800bb44:	40014800 	.word	0x40014800

0800bb48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b087      	sub	sp, #28
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6a1b      	ldr	r3, [r3, #32]
 800bb56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6a1b      	ldr	r3, [r3, #32]
 800bb62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bb70:	68fa      	ldr	r2, [r7, #12]
 800bb72:	4b21      	ldr	r3, [pc, #132]	; (800bbf8 <TIM_OC5_SetConfig+0xb0>)
 800bb74:	4013      	ands	r3, r2
 800bb76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	68fa      	ldr	r2, [r7, #12]
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bb88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	689b      	ldr	r3, [r3, #8]
 800bb8e:	041b      	lsls	r3, r3, #16
 800bb90:	693a      	ldr	r2, [r7, #16]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	4a18      	ldr	r2, [pc, #96]	; (800bbfc <TIM_OC5_SetConfig+0xb4>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d00f      	beq.n	800bbbe <TIM_OC5_SetConfig+0x76>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a17      	ldr	r2, [pc, #92]	; (800bc00 <TIM_OC5_SetConfig+0xb8>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d00b      	beq.n	800bbbe <TIM_OC5_SetConfig+0x76>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4a16      	ldr	r2, [pc, #88]	; (800bc04 <TIM_OC5_SetConfig+0xbc>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d007      	beq.n	800bbbe <TIM_OC5_SetConfig+0x76>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	4a15      	ldr	r2, [pc, #84]	; (800bc08 <TIM_OC5_SetConfig+0xc0>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d003      	beq.n	800bbbe <TIM_OC5_SetConfig+0x76>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4a14      	ldr	r2, [pc, #80]	; (800bc0c <TIM_OC5_SetConfig+0xc4>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d109      	bne.n	800bbd2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bbc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	695b      	ldr	r3, [r3, #20]
 800bbca:	021b      	lsls	r3, r3, #8
 800bbcc:	697a      	ldr	r2, [r7, #20]
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	697a      	ldr	r2, [r7, #20]
 800bbd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	685a      	ldr	r2, [r3, #4]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	693a      	ldr	r2, [r7, #16]
 800bbea:	621a      	str	r2, [r3, #32]
}
 800bbec:	bf00      	nop
 800bbee:	371c      	adds	r7, #28
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr
 800bbf8:	fffeff8f 	.word	0xfffeff8f
 800bbfc:	40010000 	.word	0x40010000
 800bc00:	40010400 	.word	0x40010400
 800bc04:	40014000 	.word	0x40014000
 800bc08:	40014400 	.word	0x40014400
 800bc0c:	40014800 	.word	0x40014800

0800bc10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b087      	sub	sp, #28
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6a1b      	ldr	r3, [r3, #32]
 800bc1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6a1b      	ldr	r3, [r3, #32]
 800bc2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bc38:	68fa      	ldr	r2, [r7, #12]
 800bc3a:	4b22      	ldr	r3, [pc, #136]	; (800bcc4 <TIM_OC6_SetConfig+0xb4>)
 800bc3c:	4013      	ands	r3, r2
 800bc3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	021b      	lsls	r3, r3, #8
 800bc46:	68fa      	ldr	r2, [r7, #12]
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bc52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	051b      	lsls	r3, r3, #20
 800bc5a:	693a      	ldr	r2, [r7, #16]
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	4a19      	ldr	r2, [pc, #100]	; (800bcc8 <TIM_OC6_SetConfig+0xb8>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d00f      	beq.n	800bc88 <TIM_OC6_SetConfig+0x78>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	4a18      	ldr	r2, [pc, #96]	; (800bccc <TIM_OC6_SetConfig+0xbc>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d00b      	beq.n	800bc88 <TIM_OC6_SetConfig+0x78>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	4a17      	ldr	r2, [pc, #92]	; (800bcd0 <TIM_OC6_SetConfig+0xc0>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d007      	beq.n	800bc88 <TIM_OC6_SetConfig+0x78>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4a16      	ldr	r2, [pc, #88]	; (800bcd4 <TIM_OC6_SetConfig+0xc4>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d003      	beq.n	800bc88 <TIM_OC6_SetConfig+0x78>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	4a15      	ldr	r2, [pc, #84]	; (800bcd8 <TIM_OC6_SetConfig+0xc8>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d109      	bne.n	800bc9c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	695b      	ldr	r3, [r3, #20]
 800bc94:	029b      	lsls	r3, r3, #10
 800bc96:	697a      	ldr	r2, [r7, #20]
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	697a      	ldr	r2, [r7, #20]
 800bca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	685a      	ldr	r2, [r3, #4]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	693a      	ldr	r2, [r7, #16]
 800bcb4:	621a      	str	r2, [r3, #32]
}
 800bcb6:	bf00      	nop
 800bcb8:	371c      	adds	r7, #28
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	feff8fff 	.word	0xfeff8fff
 800bcc8:	40010000 	.word	0x40010000
 800bccc:	40010400 	.word	0x40010400
 800bcd0:	40014000 	.word	0x40014000
 800bcd4:	40014400 	.word	0x40014400
 800bcd8:	40014800 	.word	0x40014800

0800bcdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b087      	sub	sp, #28
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6a1b      	ldr	r3, [r3, #32]
 800bcec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	6a1b      	ldr	r3, [r3, #32]
 800bcf2:	f023 0201 	bic.w	r2, r3, #1
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	699b      	ldr	r3, [r3, #24]
 800bcfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	011b      	lsls	r3, r3, #4
 800bd0c:	693a      	ldr	r2, [r7, #16]
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	f023 030a 	bic.w	r3, r3, #10
 800bd18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd1a:	697a      	ldr	r2, [r7, #20]
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	693a      	ldr	r2, [r7, #16]
 800bd26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	697a      	ldr	r2, [r7, #20]
 800bd2c:	621a      	str	r2, [r3, #32]
}
 800bd2e:	bf00      	nop
 800bd30:	371c      	adds	r7, #28
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr

0800bd3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd3a:	b480      	push	{r7}
 800bd3c:	b087      	sub	sp, #28
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	60f8      	str	r0, [r7, #12]
 800bd42:	60b9      	str	r1, [r7, #8]
 800bd44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6a1b      	ldr	r3, [r3, #32]
 800bd4a:	f023 0210 	bic.w	r2, r3, #16
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	699b      	ldr	r3, [r3, #24]
 800bd56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6a1b      	ldr	r3, [r3, #32]
 800bd5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bd64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	031b      	lsls	r3, r3, #12
 800bd6a:	697a      	ldr	r2, [r7, #20]
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bd76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	011b      	lsls	r3, r3, #4
 800bd7c:	693a      	ldr	r2, [r7, #16]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	697a      	ldr	r2, [r7, #20]
 800bd86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	693a      	ldr	r2, [r7, #16]
 800bd8c:	621a      	str	r2, [r3, #32]
}
 800bd8e:	bf00      	nop
 800bd90:	371c      	adds	r7, #28
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr
	...

0800bd9c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b085      	sub	sp, #20
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bdac:	68fa      	ldr	r2, [r7, #12]
 800bdae:	4b09      	ldr	r3, [pc, #36]	; (800bdd4 <TIM_ITRx_SetConfig+0x38>)
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bdb4:	683a      	ldr	r2, [r7, #0]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	f043 0307 	orr.w	r3, r3, #7
 800bdbe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	68fa      	ldr	r2, [r7, #12]
 800bdc4:	609a      	str	r2, [r3, #8]
}
 800bdc6:	bf00      	nop
 800bdc8:	3714      	adds	r7, #20
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr
 800bdd2:	bf00      	nop
 800bdd4:	ffcfff8f 	.word	0xffcfff8f

0800bdd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b087      	sub	sp, #28
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	60b9      	str	r1, [r7, #8]
 800bde2:	607a      	str	r2, [r7, #4]
 800bde4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bdf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	021a      	lsls	r2, r3, #8
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	431a      	orrs	r2, r3
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	4313      	orrs	r3, r2
 800be00:	697a      	ldr	r2, [r7, #20]
 800be02:	4313      	orrs	r3, r2
 800be04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	697a      	ldr	r2, [r7, #20]
 800be0a:	609a      	str	r2, [r3, #8]
}
 800be0c:	bf00      	nop
 800be0e:	371c      	adds	r7, #28
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800be18:	b480      	push	{r7}
 800be1a:	b087      	sub	sp, #28
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	f003 031f 	and.w	r3, r3, #31
 800be2a:	2201      	movs	r2, #1
 800be2c:	fa02 f303 	lsl.w	r3, r2, r3
 800be30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	6a1a      	ldr	r2, [r3, #32]
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	43db      	mvns	r3, r3
 800be3a:	401a      	ands	r2, r3
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6a1a      	ldr	r2, [r3, #32]
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	f003 031f 	and.w	r3, r3, #31
 800be4a:	6879      	ldr	r1, [r7, #4]
 800be4c:	fa01 f303 	lsl.w	r3, r1, r3
 800be50:	431a      	orrs	r2, r3
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	621a      	str	r2, [r3, #32]
}
 800be56:	bf00      	nop
 800be58:	371c      	adds	r7, #28
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr
	...

0800be64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be64:	b480      	push	{r7}
 800be66:	b085      	sub	sp, #20
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be74:	2b01      	cmp	r3, #1
 800be76:	d101      	bne.n	800be7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be78:	2302      	movs	r3, #2
 800be7a:	e077      	b.n	800bf6c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2201      	movs	r2, #1
 800be80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2202      	movs	r2, #2
 800be88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	689b      	ldr	r3, [r3, #8]
 800be9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a35      	ldr	r2, [pc, #212]	; (800bf78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d004      	beq.n	800beb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a34      	ldr	r2, [pc, #208]	; (800bf7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d108      	bne.n	800bec2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800beb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	68fa      	ldr	r2, [r7, #12]
 800bebe:	4313      	orrs	r3, r2
 800bec0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bec8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	4313      	orrs	r3, r2
 800bed2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	68fa      	ldr	r2, [r7, #12]
 800beda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4a25      	ldr	r2, [pc, #148]	; (800bf78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d02c      	beq.n	800bf40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800beee:	d027      	beq.n	800bf40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4a22      	ldr	r2, [pc, #136]	; (800bf80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d022      	beq.n	800bf40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4a21      	ldr	r2, [pc, #132]	; (800bf84 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d01d      	beq.n	800bf40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a1f      	ldr	r2, [pc, #124]	; (800bf88 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d018      	beq.n	800bf40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a1a      	ldr	r2, [pc, #104]	; (800bf7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d013      	beq.n	800bf40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4a1b      	ldr	r2, [pc, #108]	; (800bf8c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d00e      	beq.n	800bf40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a1a      	ldr	r2, [pc, #104]	; (800bf90 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d009      	beq.n	800bf40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a18      	ldr	r2, [pc, #96]	; (800bf94 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d004      	beq.n	800bf40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a17      	ldr	r2, [pc, #92]	; (800bf98 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d10c      	bne.n	800bf5a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	689b      	ldr	r3, [r3, #8]
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	68ba      	ldr	r2, [r7, #8]
 800bf58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2200      	movs	r2, #0
 800bf66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf6a:	2300      	movs	r3, #0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3714      	adds	r7, #20
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr
 800bf78:	40010000 	.word	0x40010000
 800bf7c:	40010400 	.word	0x40010400
 800bf80:	40000400 	.word	0x40000400
 800bf84:	40000800 	.word	0x40000800
 800bf88:	40000c00 	.word	0x40000c00
 800bf8c:	40001800 	.word	0x40001800
 800bf90:	40014000 	.word	0x40014000
 800bf94:	4000e000 	.word	0x4000e000
 800bf98:	4000e400 	.word	0x4000e400

0800bf9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d101      	bne.n	800bfb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bfb4:	2302      	movs	r3, #2
 800bfb6:	e087      	b.n	800c0c8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4313      	orrs	r3, r2
 800bff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	691b      	ldr	r3, [r3, #16]
 800c002:	4313      	orrs	r3, r2
 800c004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	695b      	ldr	r3, [r3, #20]
 800c010:	4313      	orrs	r3, r2
 800c012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c01e:	4313      	orrs	r3, r2
 800c020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	699b      	ldr	r3, [r3, #24]
 800c02c:	041b      	lsls	r3, r3, #16
 800c02e:	4313      	orrs	r3, r2
 800c030:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a27      	ldr	r2, [pc, #156]	; (800c0d4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d004      	beq.n	800c046 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4a25      	ldr	r2, [pc, #148]	; (800c0d8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d106      	bne.n	800c054 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	69db      	ldr	r3, [r3, #28]
 800c050:	4313      	orrs	r3, r2
 800c052:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4a1e      	ldr	r2, [pc, #120]	; (800c0d4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d004      	beq.n	800c068 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4a1d      	ldr	r2, [pc, #116]	; (800c0d8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d126      	bne.n	800c0b6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c072:	051b      	lsls	r3, r3, #20
 800c074:	4313      	orrs	r3, r2
 800c076:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	6a1b      	ldr	r3, [r3, #32]
 800c082:	4313      	orrs	r3, r2
 800c084:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c090:	4313      	orrs	r3, r2
 800c092:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a0e      	ldr	r2, [pc, #56]	; (800c0d4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d004      	beq.n	800c0a8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4a0d      	ldr	r2, [pc, #52]	; (800c0d8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d106      	bne.n	800c0b6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c0c6:	2300      	movs	r3, #0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3714      	adds	r7, #20
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr
 800c0d4:	40010000 	.word	0x40010000
 800c0d8:	40010400 	.word	0x40010400

0800c0dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c0e4:	bf00      	nop
 800c0e6:	370c      	adds	r7, #12
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr

0800c0f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c0f8:	bf00      	nop
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c10c:	bf00      	nop
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d101      	bne.n	800c12a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c126:	2301      	movs	r3, #1
 800c128:	e042      	b.n	800c1b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c130:	2b00      	cmp	r3, #0
 800c132:	d106      	bne.n	800c142 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f7f8 fa41 	bl	80045c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2224      	movs	r2, #36	; 0x24
 800c146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f022 0201 	bic.w	r2, r2, #1
 800c158:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 fcdc 	bl	800cb18 <UART_SetConfig>
 800c160:	4603      	mov	r3, r0
 800c162:	2b01      	cmp	r3, #1
 800c164:	d101      	bne.n	800c16a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c166:	2301      	movs	r3, #1
 800c168:	e022      	b.n	800c1b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d002      	beq.n	800c178 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f001 fb3c 	bl	800d7f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	685a      	ldr	r2, [r3, #4]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	689a      	ldr	r2, [r3, #8]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	681a      	ldr	r2, [r3, #0]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f042 0201 	orr.w	r2, r2, #1
 800c1a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f001 fbc3 	bl	800d934 <UART_CheckIdleState>
 800c1ae:	4603      	mov	r3, r0
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3708      	adds	r7, #8
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b08a      	sub	sp, #40	; 0x28
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	4613      	mov	r3, r2
 800c1c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1cc:	2b20      	cmp	r3, #32
 800c1ce:	d167      	bne.n	800c2a0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d002      	beq.n	800c1dc <HAL_UART_Transmit_DMA+0x24>
 800c1d6:	88fb      	ldrh	r3, [r7, #6]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d101      	bne.n	800c1e0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	e060      	b.n	800c2a2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	68ba      	ldr	r2, [r7, #8]
 800c1e4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	88fa      	ldrh	r2, [r7, #6]
 800c1ea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	88fa      	ldrh	r2, [r7, #6]
 800c1f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2221      	movs	r2, #33	; 0x21
 800c202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d028      	beq.n	800c260 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c212:	4a26      	ldr	r2, [pc, #152]	; (800c2ac <HAL_UART_Transmit_DMA+0xf4>)
 800c214:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c21a:	4a25      	ldr	r2, [pc, #148]	; (800c2b0 <HAL_UART_Transmit_DMA+0xf8>)
 800c21c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c222:	4a24      	ldr	r2, [pc, #144]	; (800c2b4 <HAL_UART_Transmit_DMA+0xfc>)
 800c224:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c22a:	2200      	movs	r2, #0
 800c22c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c236:	4619      	mov	r1, r3
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	3328      	adds	r3, #40	; 0x28
 800c23e:	461a      	mov	r2, r3
 800c240:	88fb      	ldrh	r3, [r7, #6]
 800c242:	f7f9 f8f1 	bl	8005428 <HAL_DMA_Start_IT>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d009      	beq.n	800c260 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2210      	movs	r2, #16
 800c250:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2220      	movs	r2, #32
 800c258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800c25c:	2301      	movs	r3, #1
 800c25e:	e020      	b.n	800c2a2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2240      	movs	r2, #64	; 0x40
 800c266:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	3308      	adds	r3, #8
 800c26e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	e853 3f00 	ldrex	r3, [r3]
 800c276:	613b      	str	r3, [r7, #16]
   return(result);
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c27e:	627b      	str	r3, [r7, #36]	; 0x24
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	3308      	adds	r3, #8
 800c286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c288:	623a      	str	r2, [r7, #32]
 800c28a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c28c:	69f9      	ldr	r1, [r7, #28]
 800c28e:	6a3a      	ldr	r2, [r7, #32]
 800c290:	e841 2300 	strex	r3, r2, [r1]
 800c294:	61bb      	str	r3, [r7, #24]
   return(result);
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1e5      	bne.n	800c268 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c29c:	2300      	movs	r3, #0
 800c29e:	e000      	b.n	800c2a2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c2a0:	2302      	movs	r3, #2
  }
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3728      	adds	r7, #40	; 0x28
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	0800ddf5 	.word	0x0800ddf5
 800c2b0:	0800de8b 	.word	0x0800de8b
 800c2b4:	0800e00d 	.word	0x0800e00d

0800c2b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b08a      	sub	sp, #40	; 0x28
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	4613      	mov	r3, r2
 800c2c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2cc:	2b20      	cmp	r3, #32
 800c2ce:	d137      	bne.n	800c340 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d002      	beq.n	800c2dc <HAL_UART_Receive_DMA+0x24>
 800c2d6:	88fb      	ldrh	r3, [r7, #6]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d101      	bne.n	800c2e0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c2dc:	2301      	movs	r3, #1
 800c2de:	e030      	b.n	800c342 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a18      	ldr	r2, [pc, #96]	; (800c34c <HAL_UART_Receive_DMA+0x94>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d01f      	beq.n	800c330 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d018      	beq.n	800c330 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	e853 3f00 	ldrex	r3, [r3]
 800c30a:	613b      	str	r3, [r7, #16]
   return(result);
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c312:	627b      	str	r3, [r7, #36]	; 0x24
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	461a      	mov	r2, r3
 800c31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31c:	623b      	str	r3, [r7, #32]
 800c31e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c320:	69f9      	ldr	r1, [r7, #28]
 800c322:	6a3a      	ldr	r2, [r7, #32]
 800c324:	e841 2300 	strex	r3, r2, [r1]
 800c328:	61bb      	str	r3, [r7, #24]
   return(result);
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d1e6      	bne.n	800c2fe <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c330:	88fb      	ldrh	r3, [r7, #6]
 800c332:	461a      	mov	r2, r3
 800c334:	68b9      	ldr	r1, [r7, #8]
 800c336:	68f8      	ldr	r0, [r7, #12]
 800c338:	f001 fc0e 	bl	800db58 <UART_Start_Receive_DMA>
 800c33c:	4603      	mov	r3, r0
 800c33e:	e000      	b.n	800c342 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c340:	2302      	movs	r3, #2
  }
}
 800c342:	4618      	mov	r0, r3
 800c344:	3728      	adds	r7, #40	; 0x28
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	58000c00 	.word	0x58000c00

0800c350 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b0ba      	sub	sp, #232	; 0xe8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	69db      	ldr	r3, [r3, #28]
 800c35e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	689b      	ldr	r3, [r3, #8]
 800c372:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c376:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c37a:	f640 030f 	movw	r3, #2063	; 0x80f
 800c37e:	4013      	ands	r3, r2
 800c380:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c384:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d11b      	bne.n	800c3c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c38c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c390:	f003 0320 	and.w	r3, r3, #32
 800c394:	2b00      	cmp	r3, #0
 800c396:	d015      	beq.n	800c3c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c39c:	f003 0320 	and.w	r3, r3, #32
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d105      	bne.n	800c3b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c3a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d009      	beq.n	800c3c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	f000 8377 	beq.w	800caa8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	4798      	blx	r3
      }
      return;
 800c3c2:	e371      	b.n	800caa8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c3c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	f000 8123 	beq.w	800c614 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c3ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c3d2:	4b8d      	ldr	r3, [pc, #564]	; (800c608 <HAL_UART_IRQHandler+0x2b8>)
 800c3d4:	4013      	ands	r3, r2
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d106      	bne.n	800c3e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c3da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c3de:	4b8b      	ldr	r3, [pc, #556]	; (800c60c <HAL_UART_IRQHandler+0x2bc>)
 800c3e0:	4013      	ands	r3, r2
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	f000 8116 	beq.w	800c614 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c3e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3ec:	f003 0301 	and.w	r3, r3, #1
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d011      	beq.n	800c418 <HAL_UART_IRQHandler+0xc8>
 800c3f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d00b      	beq.n	800c418 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2201      	movs	r2, #1
 800c406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c40e:	f043 0201 	orr.w	r2, r3, #1
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c41c:	f003 0302 	and.w	r3, r3, #2
 800c420:	2b00      	cmp	r3, #0
 800c422:	d011      	beq.n	800c448 <HAL_UART_IRQHandler+0xf8>
 800c424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c428:	f003 0301 	and.w	r3, r3, #1
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d00b      	beq.n	800c448 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2202      	movs	r2, #2
 800c436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c43e:	f043 0204 	orr.w	r2, r3, #4
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c44c:	f003 0304 	and.w	r3, r3, #4
 800c450:	2b00      	cmp	r3, #0
 800c452:	d011      	beq.n	800c478 <HAL_UART_IRQHandler+0x128>
 800c454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c458:	f003 0301 	and.w	r3, r3, #1
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00b      	beq.n	800c478 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2204      	movs	r2, #4
 800c466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c46e:	f043 0202 	orr.w	r2, r3, #2
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c47c:	f003 0308 	and.w	r3, r3, #8
 800c480:	2b00      	cmp	r3, #0
 800c482:	d017      	beq.n	800c4b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c488:	f003 0320 	and.w	r3, r3, #32
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d105      	bne.n	800c49c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c490:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c494:	4b5c      	ldr	r3, [pc, #368]	; (800c608 <HAL_UART_IRQHandler+0x2b8>)
 800c496:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d00b      	beq.n	800c4b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2208      	movs	r2, #8
 800c4a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4aa:	f043 0208 	orr.w	r2, r3, #8
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c4b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d012      	beq.n	800c4e6 <HAL_UART_IRQHandler+0x196>
 800c4c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d00c      	beq.n	800c4e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c4d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4dc:	f043 0220 	orr.w	r2, r3, #32
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	f000 82dd 	beq.w	800caac <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c4f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4f6:	f003 0320 	and.w	r3, r3, #32
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d013      	beq.n	800c526 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c4fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c502:	f003 0320 	and.w	r3, r3, #32
 800c506:	2b00      	cmp	r3, #0
 800c508:	d105      	bne.n	800c516 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c50a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c50e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c512:	2b00      	cmp	r3, #0
 800c514:	d007      	beq.n	800c526 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d003      	beq.n	800c526 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c52c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	689b      	ldr	r3, [r3, #8]
 800c536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c53a:	2b40      	cmp	r3, #64	; 0x40
 800c53c:	d005      	beq.n	800c54a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c53e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c542:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c546:	2b00      	cmp	r3, #0
 800c548:	d054      	beq.n	800c5f4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f001 fbec 	bl	800dd28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	689b      	ldr	r3, [r3, #8]
 800c556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c55a:	2b40      	cmp	r3, #64	; 0x40
 800c55c:	d146      	bne.n	800c5ec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	3308      	adds	r3, #8
 800c564:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c568:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c56c:	e853 3f00 	ldrex	r3, [r3]
 800c570:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c574:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c57c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	3308      	adds	r3, #8
 800c586:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c58a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c58e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c592:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c596:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c59a:	e841 2300 	strex	r3, r2, [r1]
 800c59e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c5a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d1d9      	bne.n	800c55e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d017      	beq.n	800c5e4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5ba:	4a15      	ldr	r2, [pc, #84]	; (800c610 <HAL_UART_IRQHandler+0x2c0>)
 800c5bc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7f9 fcb7 	bl	8005f38 <HAL_DMA_Abort_IT>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d019      	beq.n	800c604 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800c5de:	4610      	mov	r0, r2
 800c5e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5e2:	e00f      	b.n	800c604 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 fa81 	bl	800caec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5ea:	e00b      	b.n	800c604 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 fa7d 	bl	800caec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5f2:	e007      	b.n	800c604 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 fa79 	bl	800caec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800c602:	e253      	b.n	800caac <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c604:	bf00      	nop
    return;
 800c606:	e251      	b.n	800caac <HAL_UART_IRQHandler+0x75c>
 800c608:	10000001 	.word	0x10000001
 800c60c:	04000120 	.word	0x04000120
 800c610:	0800e08d 	.word	0x0800e08d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c618:	2b01      	cmp	r3, #1
 800c61a:	f040 81e7 	bne.w	800c9ec <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c61e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c622:	f003 0310 	and.w	r3, r3, #16
 800c626:	2b00      	cmp	r3, #0
 800c628:	f000 81e0 	beq.w	800c9ec <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c62c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c630:	f003 0310 	and.w	r3, r3, #16
 800c634:	2b00      	cmp	r3, #0
 800c636:	f000 81d9 	beq.w	800c9ec <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	2210      	movs	r2, #16
 800c640:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c64c:	2b40      	cmp	r3, #64	; 0x40
 800c64e:	f040 8151 	bne.w	800c8f4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4a96      	ldr	r2, [pc, #600]	; (800c8b4 <HAL_UART_IRQHandler+0x564>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d068      	beq.n	800c732 <HAL_UART_IRQHandler+0x3e2>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4a93      	ldr	r2, [pc, #588]	; (800c8b8 <HAL_UART_IRQHandler+0x568>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d061      	beq.n	800c732 <HAL_UART_IRQHandler+0x3e2>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	4a91      	ldr	r2, [pc, #580]	; (800c8bc <HAL_UART_IRQHandler+0x56c>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d05a      	beq.n	800c732 <HAL_UART_IRQHandler+0x3e2>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a8e      	ldr	r2, [pc, #568]	; (800c8c0 <HAL_UART_IRQHandler+0x570>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d053      	beq.n	800c732 <HAL_UART_IRQHandler+0x3e2>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4a8c      	ldr	r2, [pc, #560]	; (800c8c4 <HAL_UART_IRQHandler+0x574>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d04c      	beq.n	800c732 <HAL_UART_IRQHandler+0x3e2>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a89      	ldr	r2, [pc, #548]	; (800c8c8 <HAL_UART_IRQHandler+0x578>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d045      	beq.n	800c732 <HAL_UART_IRQHandler+0x3e2>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a87      	ldr	r2, [pc, #540]	; (800c8cc <HAL_UART_IRQHandler+0x57c>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d03e      	beq.n	800c732 <HAL_UART_IRQHandler+0x3e2>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a84      	ldr	r2, [pc, #528]	; (800c8d0 <HAL_UART_IRQHandler+0x580>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d037      	beq.n	800c732 <HAL_UART_IRQHandler+0x3e2>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a82      	ldr	r2, [pc, #520]	; (800c8d4 <HAL_UART_IRQHandler+0x584>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d030      	beq.n	800c732 <HAL_UART_IRQHandler+0x3e2>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a7f      	ldr	r2, [pc, #508]	; (800c8d8 <HAL_UART_IRQHandler+0x588>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d029      	beq.n	800c732 <HAL_UART_IRQHandler+0x3e2>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4a7d      	ldr	r2, [pc, #500]	; (800c8dc <HAL_UART_IRQHandler+0x58c>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d022      	beq.n	800c732 <HAL_UART_IRQHandler+0x3e2>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a7a      	ldr	r2, [pc, #488]	; (800c8e0 <HAL_UART_IRQHandler+0x590>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d01b      	beq.n	800c732 <HAL_UART_IRQHandler+0x3e2>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a78      	ldr	r2, [pc, #480]	; (800c8e4 <HAL_UART_IRQHandler+0x594>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d014      	beq.n	800c732 <HAL_UART_IRQHandler+0x3e2>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a75      	ldr	r2, [pc, #468]	; (800c8e8 <HAL_UART_IRQHandler+0x598>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d00d      	beq.n	800c732 <HAL_UART_IRQHandler+0x3e2>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4a73      	ldr	r2, [pc, #460]	; (800c8ec <HAL_UART_IRQHandler+0x59c>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d006      	beq.n	800c732 <HAL_UART_IRQHandler+0x3e2>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a70      	ldr	r2, [pc, #448]	; (800c8f0 <HAL_UART_IRQHandler+0x5a0>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d106      	bne.n	800c740 <HAL_UART_IRQHandler+0x3f0>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	e005      	b.n	800c74c <HAL_UART_IRQHandler+0x3fc>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c750:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c754:	2b00      	cmp	r3, #0
 800c756:	f000 81ab 	beq.w	800cab0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c760:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c764:	429a      	cmp	r2, r3
 800c766:	f080 81a3 	bcs.w	800cab0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c770:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c77a:	69db      	ldr	r3, [r3, #28]
 800c77c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c780:	f000 8087 	beq.w	800c892 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c78c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c790:	e853 3f00 	ldrex	r3, [r3]
 800c794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c798:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c79c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c7ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c7b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c7ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c7be:	e841 2300 	strex	r3, r2, [r1]
 800c7c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c7c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d1da      	bne.n	800c784 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	3308      	adds	r3, #8
 800c7d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7d8:	e853 3f00 	ldrex	r3, [r3]
 800c7dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c7de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c7e0:	f023 0301 	bic.w	r3, r3, #1
 800c7e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	3308      	adds	r3, #8
 800c7ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c7f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c7f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c7fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c7fe:	e841 2300 	strex	r3, r2, [r1]
 800c802:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1e1      	bne.n	800c7ce <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	3308      	adds	r3, #8
 800c810:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c814:	e853 3f00 	ldrex	r3, [r3]
 800c818:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c81a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c81c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	3308      	adds	r3, #8
 800c82a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c82e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c830:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c832:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c834:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c836:	e841 2300 	strex	r3, r2, [r1]
 800c83a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c83c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1e3      	bne.n	800c80a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2220      	movs	r2, #32
 800c846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2200      	movs	r2, #0
 800c84e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c858:	e853 3f00 	ldrex	r3, [r3]
 800c85c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c85e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c860:	f023 0310 	bic.w	r3, r3, #16
 800c864:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	461a      	mov	r2, r3
 800c86e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c872:	65bb      	str	r3, [r7, #88]	; 0x58
 800c874:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c876:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c878:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c87a:	e841 2300 	strex	r3, r2, [r1]
 800c87e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c882:	2b00      	cmp	r3, #0
 800c884:	d1e4      	bne.n	800c850 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7f9 f835 	bl	80058fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2202      	movs	r2, #2
 800c896:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	1ad3      	subs	r3, r2, r3
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f000 f927 	bl	800cb00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c8b2:	e0fd      	b.n	800cab0 <HAL_UART_IRQHandler+0x760>
 800c8b4:	40020010 	.word	0x40020010
 800c8b8:	40020028 	.word	0x40020028
 800c8bc:	40020040 	.word	0x40020040
 800c8c0:	40020058 	.word	0x40020058
 800c8c4:	40020070 	.word	0x40020070
 800c8c8:	40020088 	.word	0x40020088
 800c8cc:	400200a0 	.word	0x400200a0
 800c8d0:	400200b8 	.word	0x400200b8
 800c8d4:	40020410 	.word	0x40020410
 800c8d8:	40020428 	.word	0x40020428
 800c8dc:	40020440 	.word	0x40020440
 800c8e0:	40020458 	.word	0x40020458
 800c8e4:	40020470 	.word	0x40020470
 800c8e8:	40020488 	.word	0x40020488
 800c8ec:	400204a0 	.word	0x400204a0
 800c8f0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c900:	b29b      	uxth	r3, r3
 800c902:	1ad3      	subs	r3, r2, r3
 800c904:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c90e:	b29b      	uxth	r3, r3
 800c910:	2b00      	cmp	r3, #0
 800c912:	f000 80cf 	beq.w	800cab4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c916:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	f000 80ca 	beq.w	800cab4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c928:	e853 3f00 	ldrex	r3, [r3]
 800c92c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c92e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c930:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c934:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	461a      	mov	r2, r3
 800c93e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c942:	647b      	str	r3, [r7, #68]	; 0x44
 800c944:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c946:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c948:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c94a:	e841 2300 	strex	r3, r2, [r1]
 800c94e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c952:	2b00      	cmp	r3, #0
 800c954:	d1e4      	bne.n	800c920 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	3308      	adds	r3, #8
 800c95c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c960:	e853 3f00 	ldrex	r3, [r3]
 800c964:	623b      	str	r3, [r7, #32]
   return(result);
 800c966:	6a3a      	ldr	r2, [r7, #32]
 800c968:	4b55      	ldr	r3, [pc, #340]	; (800cac0 <HAL_UART_IRQHandler+0x770>)
 800c96a:	4013      	ands	r3, r2
 800c96c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	3308      	adds	r3, #8
 800c976:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c97a:	633a      	str	r2, [r7, #48]	; 0x30
 800c97c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c97e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c982:	e841 2300 	strex	r3, r2, [r1]
 800c986:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d1e3      	bne.n	800c956 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2220      	movs	r2, #32
 800c992:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2200      	movs	r2, #0
 800c99a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	e853 3f00 	ldrex	r3, [r3]
 800c9ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f023 0310 	bic.w	r3, r3, #16
 800c9b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	461a      	mov	r2, r3
 800c9c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c9c4:	61fb      	str	r3, [r7, #28]
 800c9c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9c8:	69b9      	ldr	r1, [r7, #24]
 800c9ca:	69fa      	ldr	r2, [r7, #28]
 800c9cc:	e841 2300 	strex	r3, r2, [r1]
 800c9d0:	617b      	str	r3, [r7, #20]
   return(result);
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d1e4      	bne.n	800c9a2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2202      	movs	r2, #2
 800c9dc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c9de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f000 f88b 	bl	800cb00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c9ea:	e063      	b.n	800cab4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c9ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d00e      	beq.n	800ca16 <HAL_UART_IRQHandler+0x6c6>
 800c9f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c9fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d008      	beq.n	800ca16 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ca0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f001 fb7d 	bl	800e10e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ca14:	e051      	b.n	800caba <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ca16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d014      	beq.n	800ca4c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ca22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d105      	bne.n	800ca3a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ca2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d008      	beq.n	800ca4c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d03a      	beq.n	800cab8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	4798      	blx	r3
    }
    return;
 800ca4a:	e035      	b.n	800cab8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ca4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d009      	beq.n	800ca6c <HAL_UART_IRQHandler+0x71c>
 800ca58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d003      	beq.n	800ca6c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f001 fb27 	bl	800e0b8 <UART_EndTransmit_IT>
    return;
 800ca6a:	e026      	b.n	800caba <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ca6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d009      	beq.n	800ca8c <HAL_UART_IRQHandler+0x73c>
 800ca78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d003      	beq.n	800ca8c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f001 fb56 	bl	800e136 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ca8a:	e016      	b.n	800caba <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ca8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d010      	beq.n	800caba <HAL_UART_IRQHandler+0x76a>
 800ca98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	da0c      	bge.n	800caba <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f001 fb3e 	bl	800e122 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800caa6:	e008      	b.n	800caba <HAL_UART_IRQHandler+0x76a>
      return;
 800caa8:	bf00      	nop
 800caaa:	e006      	b.n	800caba <HAL_UART_IRQHandler+0x76a>
    return;
 800caac:	bf00      	nop
 800caae:	e004      	b.n	800caba <HAL_UART_IRQHandler+0x76a>
      return;
 800cab0:	bf00      	nop
 800cab2:	e002      	b.n	800caba <HAL_UART_IRQHandler+0x76a>
      return;
 800cab4:	bf00      	nop
 800cab6:	e000      	b.n	800caba <HAL_UART_IRQHandler+0x76a>
    return;
 800cab8:	bf00      	nop
  }
}
 800caba:	37e8      	adds	r7, #232	; 0xe8
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}
 800cac0:	effffffe 	.word	0xeffffffe

0800cac4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cacc:	bf00      	nop
 800cace:	370c      	adds	r7, #12
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr

0800cad8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cad8:	b480      	push	{r7}
 800cada:	b083      	sub	sp, #12
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cae0:	bf00      	nop
 800cae2:	370c      	adds	r7, #12
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr

0800caec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800caf4:	bf00      	nop
 800caf6:	370c      	adds	r7, #12
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr

0800cb00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	460b      	mov	r3, r1
 800cb0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cb0c:	bf00      	nop
 800cb0e:	370c      	adds	r7, #12
 800cb10:	46bd      	mov	sp, r7
 800cb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb16:	4770      	bx	lr

0800cb18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb1c:	b092      	sub	sp, #72	; 0x48
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cb22:	2300      	movs	r3, #0
 800cb24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	689a      	ldr	r2, [r3, #8]
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	691b      	ldr	r3, [r3, #16]
 800cb30:	431a      	orrs	r2, r3
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	695b      	ldr	r3, [r3, #20]
 800cb36:	431a      	orrs	r2, r3
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	69db      	ldr	r3, [r3, #28]
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	4bbe      	ldr	r3, [pc, #760]	; (800ce40 <UART_SetConfig+0x328>)
 800cb48:	4013      	ands	r3, r2
 800cb4a:	697a      	ldr	r2, [r7, #20]
 800cb4c:	6812      	ldr	r2, [r2, #0]
 800cb4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cb50:	430b      	orrs	r3, r1
 800cb52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	68da      	ldr	r2, [r3, #12]
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	430a      	orrs	r2, r1
 800cb68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	699b      	ldr	r3, [r3, #24]
 800cb6e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4ab3      	ldr	r2, [pc, #716]	; (800ce44 <UART_SetConfig+0x32c>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d004      	beq.n	800cb84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	6a1b      	ldr	r3, [r3, #32]
 800cb7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb80:	4313      	orrs	r3, r2
 800cb82:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	689a      	ldr	r2, [r3, #8]
 800cb8a:	4baf      	ldr	r3, [pc, #700]	; (800ce48 <UART_SetConfig+0x330>)
 800cb8c:	4013      	ands	r3, r2
 800cb8e:	697a      	ldr	r2, [r7, #20]
 800cb90:	6812      	ldr	r2, [r2, #0]
 800cb92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cb94:	430b      	orrs	r3, r1
 800cb96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb9e:	f023 010f 	bic.w	r1, r3, #15
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	430a      	orrs	r2, r1
 800cbac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	4aa6      	ldr	r2, [pc, #664]	; (800ce4c <UART_SetConfig+0x334>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d177      	bne.n	800cca8 <UART_SetConfig+0x190>
 800cbb8:	4ba5      	ldr	r3, [pc, #660]	; (800ce50 <UART_SetConfig+0x338>)
 800cbba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cbc0:	2b28      	cmp	r3, #40	; 0x28
 800cbc2:	d86d      	bhi.n	800cca0 <UART_SetConfig+0x188>
 800cbc4:	a201      	add	r2, pc, #4	; (adr r2, 800cbcc <UART_SetConfig+0xb4>)
 800cbc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbca:	bf00      	nop
 800cbcc:	0800cc71 	.word	0x0800cc71
 800cbd0:	0800cca1 	.word	0x0800cca1
 800cbd4:	0800cca1 	.word	0x0800cca1
 800cbd8:	0800cca1 	.word	0x0800cca1
 800cbdc:	0800cca1 	.word	0x0800cca1
 800cbe0:	0800cca1 	.word	0x0800cca1
 800cbe4:	0800cca1 	.word	0x0800cca1
 800cbe8:	0800cca1 	.word	0x0800cca1
 800cbec:	0800cc79 	.word	0x0800cc79
 800cbf0:	0800cca1 	.word	0x0800cca1
 800cbf4:	0800cca1 	.word	0x0800cca1
 800cbf8:	0800cca1 	.word	0x0800cca1
 800cbfc:	0800cca1 	.word	0x0800cca1
 800cc00:	0800cca1 	.word	0x0800cca1
 800cc04:	0800cca1 	.word	0x0800cca1
 800cc08:	0800cca1 	.word	0x0800cca1
 800cc0c:	0800cc81 	.word	0x0800cc81
 800cc10:	0800cca1 	.word	0x0800cca1
 800cc14:	0800cca1 	.word	0x0800cca1
 800cc18:	0800cca1 	.word	0x0800cca1
 800cc1c:	0800cca1 	.word	0x0800cca1
 800cc20:	0800cca1 	.word	0x0800cca1
 800cc24:	0800cca1 	.word	0x0800cca1
 800cc28:	0800cca1 	.word	0x0800cca1
 800cc2c:	0800cc89 	.word	0x0800cc89
 800cc30:	0800cca1 	.word	0x0800cca1
 800cc34:	0800cca1 	.word	0x0800cca1
 800cc38:	0800cca1 	.word	0x0800cca1
 800cc3c:	0800cca1 	.word	0x0800cca1
 800cc40:	0800cca1 	.word	0x0800cca1
 800cc44:	0800cca1 	.word	0x0800cca1
 800cc48:	0800cca1 	.word	0x0800cca1
 800cc4c:	0800cc91 	.word	0x0800cc91
 800cc50:	0800cca1 	.word	0x0800cca1
 800cc54:	0800cca1 	.word	0x0800cca1
 800cc58:	0800cca1 	.word	0x0800cca1
 800cc5c:	0800cca1 	.word	0x0800cca1
 800cc60:	0800cca1 	.word	0x0800cca1
 800cc64:	0800cca1 	.word	0x0800cca1
 800cc68:	0800cca1 	.word	0x0800cca1
 800cc6c:	0800cc99 	.word	0x0800cc99
 800cc70:	2301      	movs	r3, #1
 800cc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc76:	e326      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cc78:	2304      	movs	r3, #4
 800cc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc7e:	e322      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cc80:	2308      	movs	r3, #8
 800cc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc86:	e31e      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cc88:	2310      	movs	r3, #16
 800cc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc8e:	e31a      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cc90:	2320      	movs	r3, #32
 800cc92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc96:	e316      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cc98:	2340      	movs	r3, #64	; 0x40
 800cc9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc9e:	e312      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cca0:	2380      	movs	r3, #128	; 0x80
 800cca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cca6:	e30e      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4a69      	ldr	r2, [pc, #420]	; (800ce54 <UART_SetConfig+0x33c>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d130      	bne.n	800cd14 <UART_SetConfig+0x1fc>
 800ccb2:	4b67      	ldr	r3, [pc, #412]	; (800ce50 <UART_SetConfig+0x338>)
 800ccb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccb6:	f003 0307 	and.w	r3, r3, #7
 800ccba:	2b05      	cmp	r3, #5
 800ccbc:	d826      	bhi.n	800cd0c <UART_SetConfig+0x1f4>
 800ccbe:	a201      	add	r2, pc, #4	; (adr r2, 800ccc4 <UART_SetConfig+0x1ac>)
 800ccc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc4:	0800ccdd 	.word	0x0800ccdd
 800ccc8:	0800cce5 	.word	0x0800cce5
 800cccc:	0800cced 	.word	0x0800cced
 800ccd0:	0800ccf5 	.word	0x0800ccf5
 800ccd4:	0800ccfd 	.word	0x0800ccfd
 800ccd8:	0800cd05 	.word	0x0800cd05
 800ccdc:	2300      	movs	r3, #0
 800ccde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cce2:	e2f0      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cce4:	2304      	movs	r3, #4
 800cce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccea:	e2ec      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800ccec:	2308      	movs	r3, #8
 800ccee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccf2:	e2e8      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800ccf4:	2310      	movs	r3, #16
 800ccf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccfa:	e2e4      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800ccfc:	2320      	movs	r3, #32
 800ccfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd02:	e2e0      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cd04:	2340      	movs	r3, #64	; 0x40
 800cd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd0a:	e2dc      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cd0c:	2380      	movs	r3, #128	; 0x80
 800cd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd12:	e2d8      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a4f      	ldr	r2, [pc, #316]	; (800ce58 <UART_SetConfig+0x340>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d130      	bne.n	800cd80 <UART_SetConfig+0x268>
 800cd1e:	4b4c      	ldr	r3, [pc, #304]	; (800ce50 <UART_SetConfig+0x338>)
 800cd20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd22:	f003 0307 	and.w	r3, r3, #7
 800cd26:	2b05      	cmp	r3, #5
 800cd28:	d826      	bhi.n	800cd78 <UART_SetConfig+0x260>
 800cd2a:	a201      	add	r2, pc, #4	; (adr r2, 800cd30 <UART_SetConfig+0x218>)
 800cd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd30:	0800cd49 	.word	0x0800cd49
 800cd34:	0800cd51 	.word	0x0800cd51
 800cd38:	0800cd59 	.word	0x0800cd59
 800cd3c:	0800cd61 	.word	0x0800cd61
 800cd40:	0800cd69 	.word	0x0800cd69
 800cd44:	0800cd71 	.word	0x0800cd71
 800cd48:	2300      	movs	r3, #0
 800cd4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd4e:	e2ba      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cd50:	2304      	movs	r3, #4
 800cd52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd56:	e2b6      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cd58:	2308      	movs	r3, #8
 800cd5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd5e:	e2b2      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cd60:	2310      	movs	r3, #16
 800cd62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd66:	e2ae      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cd68:	2320      	movs	r3, #32
 800cd6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd6e:	e2aa      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cd70:	2340      	movs	r3, #64	; 0x40
 800cd72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd76:	e2a6      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cd78:	2380      	movs	r3, #128	; 0x80
 800cd7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd7e:	e2a2      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a35      	ldr	r2, [pc, #212]	; (800ce5c <UART_SetConfig+0x344>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d130      	bne.n	800cdec <UART_SetConfig+0x2d4>
 800cd8a:	4b31      	ldr	r3, [pc, #196]	; (800ce50 <UART_SetConfig+0x338>)
 800cd8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd8e:	f003 0307 	and.w	r3, r3, #7
 800cd92:	2b05      	cmp	r3, #5
 800cd94:	d826      	bhi.n	800cde4 <UART_SetConfig+0x2cc>
 800cd96:	a201      	add	r2, pc, #4	; (adr r2, 800cd9c <UART_SetConfig+0x284>)
 800cd98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd9c:	0800cdb5 	.word	0x0800cdb5
 800cda0:	0800cdbd 	.word	0x0800cdbd
 800cda4:	0800cdc5 	.word	0x0800cdc5
 800cda8:	0800cdcd 	.word	0x0800cdcd
 800cdac:	0800cdd5 	.word	0x0800cdd5
 800cdb0:	0800cddd 	.word	0x0800cddd
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdba:	e284      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cdbc:	2304      	movs	r3, #4
 800cdbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdc2:	e280      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cdc4:	2308      	movs	r3, #8
 800cdc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdca:	e27c      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cdcc:	2310      	movs	r3, #16
 800cdce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdd2:	e278      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cdd4:	2320      	movs	r3, #32
 800cdd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdda:	e274      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cddc:	2340      	movs	r3, #64	; 0x40
 800cdde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cde2:	e270      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cde4:	2380      	movs	r3, #128	; 0x80
 800cde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdea:	e26c      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a1b      	ldr	r2, [pc, #108]	; (800ce60 <UART_SetConfig+0x348>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d142      	bne.n	800ce7c <UART_SetConfig+0x364>
 800cdf6:	4b16      	ldr	r3, [pc, #88]	; (800ce50 <UART_SetConfig+0x338>)
 800cdf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdfa:	f003 0307 	and.w	r3, r3, #7
 800cdfe:	2b05      	cmp	r3, #5
 800ce00:	d838      	bhi.n	800ce74 <UART_SetConfig+0x35c>
 800ce02:	a201      	add	r2, pc, #4	; (adr r2, 800ce08 <UART_SetConfig+0x2f0>)
 800ce04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce08:	0800ce21 	.word	0x0800ce21
 800ce0c:	0800ce29 	.word	0x0800ce29
 800ce10:	0800ce31 	.word	0x0800ce31
 800ce14:	0800ce39 	.word	0x0800ce39
 800ce18:	0800ce65 	.word	0x0800ce65
 800ce1c:	0800ce6d 	.word	0x0800ce6d
 800ce20:	2300      	movs	r3, #0
 800ce22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce26:	e24e      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800ce28:	2304      	movs	r3, #4
 800ce2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce2e:	e24a      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800ce30:	2308      	movs	r3, #8
 800ce32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce36:	e246      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800ce38:	2310      	movs	r3, #16
 800ce3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce3e:	e242      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800ce40:	cfff69f3 	.word	0xcfff69f3
 800ce44:	58000c00 	.word	0x58000c00
 800ce48:	11fff4ff 	.word	0x11fff4ff
 800ce4c:	40011000 	.word	0x40011000
 800ce50:	58024400 	.word	0x58024400
 800ce54:	40004400 	.word	0x40004400
 800ce58:	40004800 	.word	0x40004800
 800ce5c:	40004c00 	.word	0x40004c00
 800ce60:	40005000 	.word	0x40005000
 800ce64:	2320      	movs	r3, #32
 800ce66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce6a:	e22c      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800ce6c:	2340      	movs	r3, #64	; 0x40
 800ce6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce72:	e228      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800ce74:	2380      	movs	r3, #128	; 0x80
 800ce76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce7a:	e224      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4ab1      	ldr	r2, [pc, #708]	; (800d148 <UART_SetConfig+0x630>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d176      	bne.n	800cf74 <UART_SetConfig+0x45c>
 800ce86:	4bb1      	ldr	r3, [pc, #708]	; (800d14c <UART_SetConfig+0x634>)
 800ce88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ce8e:	2b28      	cmp	r3, #40	; 0x28
 800ce90:	d86c      	bhi.n	800cf6c <UART_SetConfig+0x454>
 800ce92:	a201      	add	r2, pc, #4	; (adr r2, 800ce98 <UART_SetConfig+0x380>)
 800ce94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce98:	0800cf3d 	.word	0x0800cf3d
 800ce9c:	0800cf6d 	.word	0x0800cf6d
 800cea0:	0800cf6d 	.word	0x0800cf6d
 800cea4:	0800cf6d 	.word	0x0800cf6d
 800cea8:	0800cf6d 	.word	0x0800cf6d
 800ceac:	0800cf6d 	.word	0x0800cf6d
 800ceb0:	0800cf6d 	.word	0x0800cf6d
 800ceb4:	0800cf6d 	.word	0x0800cf6d
 800ceb8:	0800cf45 	.word	0x0800cf45
 800cebc:	0800cf6d 	.word	0x0800cf6d
 800cec0:	0800cf6d 	.word	0x0800cf6d
 800cec4:	0800cf6d 	.word	0x0800cf6d
 800cec8:	0800cf6d 	.word	0x0800cf6d
 800cecc:	0800cf6d 	.word	0x0800cf6d
 800ced0:	0800cf6d 	.word	0x0800cf6d
 800ced4:	0800cf6d 	.word	0x0800cf6d
 800ced8:	0800cf4d 	.word	0x0800cf4d
 800cedc:	0800cf6d 	.word	0x0800cf6d
 800cee0:	0800cf6d 	.word	0x0800cf6d
 800cee4:	0800cf6d 	.word	0x0800cf6d
 800cee8:	0800cf6d 	.word	0x0800cf6d
 800ceec:	0800cf6d 	.word	0x0800cf6d
 800cef0:	0800cf6d 	.word	0x0800cf6d
 800cef4:	0800cf6d 	.word	0x0800cf6d
 800cef8:	0800cf55 	.word	0x0800cf55
 800cefc:	0800cf6d 	.word	0x0800cf6d
 800cf00:	0800cf6d 	.word	0x0800cf6d
 800cf04:	0800cf6d 	.word	0x0800cf6d
 800cf08:	0800cf6d 	.word	0x0800cf6d
 800cf0c:	0800cf6d 	.word	0x0800cf6d
 800cf10:	0800cf6d 	.word	0x0800cf6d
 800cf14:	0800cf6d 	.word	0x0800cf6d
 800cf18:	0800cf5d 	.word	0x0800cf5d
 800cf1c:	0800cf6d 	.word	0x0800cf6d
 800cf20:	0800cf6d 	.word	0x0800cf6d
 800cf24:	0800cf6d 	.word	0x0800cf6d
 800cf28:	0800cf6d 	.word	0x0800cf6d
 800cf2c:	0800cf6d 	.word	0x0800cf6d
 800cf30:	0800cf6d 	.word	0x0800cf6d
 800cf34:	0800cf6d 	.word	0x0800cf6d
 800cf38:	0800cf65 	.word	0x0800cf65
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf42:	e1c0      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cf44:	2304      	movs	r3, #4
 800cf46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf4a:	e1bc      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cf4c:	2308      	movs	r3, #8
 800cf4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf52:	e1b8      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cf54:	2310      	movs	r3, #16
 800cf56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf5a:	e1b4      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cf5c:	2320      	movs	r3, #32
 800cf5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf62:	e1b0      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cf64:	2340      	movs	r3, #64	; 0x40
 800cf66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf6a:	e1ac      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cf6c:	2380      	movs	r3, #128	; 0x80
 800cf6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf72:	e1a8      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4a75      	ldr	r2, [pc, #468]	; (800d150 <UART_SetConfig+0x638>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d130      	bne.n	800cfe0 <UART_SetConfig+0x4c8>
 800cf7e:	4b73      	ldr	r3, [pc, #460]	; (800d14c <UART_SetConfig+0x634>)
 800cf80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf82:	f003 0307 	and.w	r3, r3, #7
 800cf86:	2b05      	cmp	r3, #5
 800cf88:	d826      	bhi.n	800cfd8 <UART_SetConfig+0x4c0>
 800cf8a:	a201      	add	r2, pc, #4	; (adr r2, 800cf90 <UART_SetConfig+0x478>)
 800cf8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf90:	0800cfa9 	.word	0x0800cfa9
 800cf94:	0800cfb1 	.word	0x0800cfb1
 800cf98:	0800cfb9 	.word	0x0800cfb9
 800cf9c:	0800cfc1 	.word	0x0800cfc1
 800cfa0:	0800cfc9 	.word	0x0800cfc9
 800cfa4:	0800cfd1 	.word	0x0800cfd1
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfae:	e18a      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cfb0:	2304      	movs	r3, #4
 800cfb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfb6:	e186      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cfb8:	2308      	movs	r3, #8
 800cfba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfbe:	e182      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cfc0:	2310      	movs	r3, #16
 800cfc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfc6:	e17e      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cfc8:	2320      	movs	r3, #32
 800cfca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfce:	e17a      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cfd0:	2340      	movs	r3, #64	; 0x40
 800cfd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfd6:	e176      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cfd8:	2380      	movs	r3, #128	; 0x80
 800cfda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfde:	e172      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4a5b      	ldr	r2, [pc, #364]	; (800d154 <UART_SetConfig+0x63c>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d130      	bne.n	800d04c <UART_SetConfig+0x534>
 800cfea:	4b58      	ldr	r3, [pc, #352]	; (800d14c <UART_SetConfig+0x634>)
 800cfec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfee:	f003 0307 	and.w	r3, r3, #7
 800cff2:	2b05      	cmp	r3, #5
 800cff4:	d826      	bhi.n	800d044 <UART_SetConfig+0x52c>
 800cff6:	a201      	add	r2, pc, #4	; (adr r2, 800cffc <UART_SetConfig+0x4e4>)
 800cff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cffc:	0800d015 	.word	0x0800d015
 800d000:	0800d01d 	.word	0x0800d01d
 800d004:	0800d025 	.word	0x0800d025
 800d008:	0800d02d 	.word	0x0800d02d
 800d00c:	0800d035 	.word	0x0800d035
 800d010:	0800d03d 	.word	0x0800d03d
 800d014:	2300      	movs	r3, #0
 800d016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d01a:	e154      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d01c:	2304      	movs	r3, #4
 800d01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d022:	e150      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d024:	2308      	movs	r3, #8
 800d026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d02a:	e14c      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d02c:	2310      	movs	r3, #16
 800d02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d032:	e148      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d034:	2320      	movs	r3, #32
 800d036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d03a:	e144      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d03c:	2340      	movs	r3, #64	; 0x40
 800d03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d042:	e140      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d044:	2380      	movs	r3, #128	; 0x80
 800d046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d04a:	e13c      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a41      	ldr	r2, [pc, #260]	; (800d158 <UART_SetConfig+0x640>)
 800d052:	4293      	cmp	r3, r2
 800d054:	f040 8082 	bne.w	800d15c <UART_SetConfig+0x644>
 800d058:	4b3c      	ldr	r3, [pc, #240]	; (800d14c <UART_SetConfig+0x634>)
 800d05a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d05c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d060:	2b28      	cmp	r3, #40	; 0x28
 800d062:	d86d      	bhi.n	800d140 <UART_SetConfig+0x628>
 800d064:	a201      	add	r2, pc, #4	; (adr r2, 800d06c <UART_SetConfig+0x554>)
 800d066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d06a:	bf00      	nop
 800d06c:	0800d111 	.word	0x0800d111
 800d070:	0800d141 	.word	0x0800d141
 800d074:	0800d141 	.word	0x0800d141
 800d078:	0800d141 	.word	0x0800d141
 800d07c:	0800d141 	.word	0x0800d141
 800d080:	0800d141 	.word	0x0800d141
 800d084:	0800d141 	.word	0x0800d141
 800d088:	0800d141 	.word	0x0800d141
 800d08c:	0800d119 	.word	0x0800d119
 800d090:	0800d141 	.word	0x0800d141
 800d094:	0800d141 	.word	0x0800d141
 800d098:	0800d141 	.word	0x0800d141
 800d09c:	0800d141 	.word	0x0800d141
 800d0a0:	0800d141 	.word	0x0800d141
 800d0a4:	0800d141 	.word	0x0800d141
 800d0a8:	0800d141 	.word	0x0800d141
 800d0ac:	0800d121 	.word	0x0800d121
 800d0b0:	0800d141 	.word	0x0800d141
 800d0b4:	0800d141 	.word	0x0800d141
 800d0b8:	0800d141 	.word	0x0800d141
 800d0bc:	0800d141 	.word	0x0800d141
 800d0c0:	0800d141 	.word	0x0800d141
 800d0c4:	0800d141 	.word	0x0800d141
 800d0c8:	0800d141 	.word	0x0800d141
 800d0cc:	0800d129 	.word	0x0800d129
 800d0d0:	0800d141 	.word	0x0800d141
 800d0d4:	0800d141 	.word	0x0800d141
 800d0d8:	0800d141 	.word	0x0800d141
 800d0dc:	0800d141 	.word	0x0800d141
 800d0e0:	0800d141 	.word	0x0800d141
 800d0e4:	0800d141 	.word	0x0800d141
 800d0e8:	0800d141 	.word	0x0800d141
 800d0ec:	0800d131 	.word	0x0800d131
 800d0f0:	0800d141 	.word	0x0800d141
 800d0f4:	0800d141 	.word	0x0800d141
 800d0f8:	0800d141 	.word	0x0800d141
 800d0fc:	0800d141 	.word	0x0800d141
 800d100:	0800d141 	.word	0x0800d141
 800d104:	0800d141 	.word	0x0800d141
 800d108:	0800d141 	.word	0x0800d141
 800d10c:	0800d139 	.word	0x0800d139
 800d110:	2301      	movs	r3, #1
 800d112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d116:	e0d6      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d118:	2304      	movs	r3, #4
 800d11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d11e:	e0d2      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d120:	2308      	movs	r3, #8
 800d122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d126:	e0ce      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d128:	2310      	movs	r3, #16
 800d12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d12e:	e0ca      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d130:	2320      	movs	r3, #32
 800d132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d136:	e0c6      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d138:	2340      	movs	r3, #64	; 0x40
 800d13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d13e:	e0c2      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d140:	2380      	movs	r3, #128	; 0x80
 800d142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d146:	e0be      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d148:	40011400 	.word	0x40011400
 800d14c:	58024400 	.word	0x58024400
 800d150:	40007800 	.word	0x40007800
 800d154:	40007c00 	.word	0x40007c00
 800d158:	40011800 	.word	0x40011800
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4aad      	ldr	r2, [pc, #692]	; (800d418 <UART_SetConfig+0x900>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d176      	bne.n	800d254 <UART_SetConfig+0x73c>
 800d166:	4bad      	ldr	r3, [pc, #692]	; (800d41c <UART_SetConfig+0x904>)
 800d168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d16a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d16e:	2b28      	cmp	r3, #40	; 0x28
 800d170:	d86c      	bhi.n	800d24c <UART_SetConfig+0x734>
 800d172:	a201      	add	r2, pc, #4	; (adr r2, 800d178 <UART_SetConfig+0x660>)
 800d174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d178:	0800d21d 	.word	0x0800d21d
 800d17c:	0800d24d 	.word	0x0800d24d
 800d180:	0800d24d 	.word	0x0800d24d
 800d184:	0800d24d 	.word	0x0800d24d
 800d188:	0800d24d 	.word	0x0800d24d
 800d18c:	0800d24d 	.word	0x0800d24d
 800d190:	0800d24d 	.word	0x0800d24d
 800d194:	0800d24d 	.word	0x0800d24d
 800d198:	0800d225 	.word	0x0800d225
 800d19c:	0800d24d 	.word	0x0800d24d
 800d1a0:	0800d24d 	.word	0x0800d24d
 800d1a4:	0800d24d 	.word	0x0800d24d
 800d1a8:	0800d24d 	.word	0x0800d24d
 800d1ac:	0800d24d 	.word	0x0800d24d
 800d1b0:	0800d24d 	.word	0x0800d24d
 800d1b4:	0800d24d 	.word	0x0800d24d
 800d1b8:	0800d22d 	.word	0x0800d22d
 800d1bc:	0800d24d 	.word	0x0800d24d
 800d1c0:	0800d24d 	.word	0x0800d24d
 800d1c4:	0800d24d 	.word	0x0800d24d
 800d1c8:	0800d24d 	.word	0x0800d24d
 800d1cc:	0800d24d 	.word	0x0800d24d
 800d1d0:	0800d24d 	.word	0x0800d24d
 800d1d4:	0800d24d 	.word	0x0800d24d
 800d1d8:	0800d235 	.word	0x0800d235
 800d1dc:	0800d24d 	.word	0x0800d24d
 800d1e0:	0800d24d 	.word	0x0800d24d
 800d1e4:	0800d24d 	.word	0x0800d24d
 800d1e8:	0800d24d 	.word	0x0800d24d
 800d1ec:	0800d24d 	.word	0x0800d24d
 800d1f0:	0800d24d 	.word	0x0800d24d
 800d1f4:	0800d24d 	.word	0x0800d24d
 800d1f8:	0800d23d 	.word	0x0800d23d
 800d1fc:	0800d24d 	.word	0x0800d24d
 800d200:	0800d24d 	.word	0x0800d24d
 800d204:	0800d24d 	.word	0x0800d24d
 800d208:	0800d24d 	.word	0x0800d24d
 800d20c:	0800d24d 	.word	0x0800d24d
 800d210:	0800d24d 	.word	0x0800d24d
 800d214:	0800d24d 	.word	0x0800d24d
 800d218:	0800d245 	.word	0x0800d245
 800d21c:	2301      	movs	r3, #1
 800d21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d222:	e050      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d224:	2304      	movs	r3, #4
 800d226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d22a:	e04c      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d22c:	2308      	movs	r3, #8
 800d22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d232:	e048      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d234:	2310      	movs	r3, #16
 800d236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d23a:	e044      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d23c:	2320      	movs	r3, #32
 800d23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d242:	e040      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d244:	2340      	movs	r3, #64	; 0x40
 800d246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d24a:	e03c      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d24c:	2380      	movs	r3, #128	; 0x80
 800d24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d252:	e038      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a71      	ldr	r2, [pc, #452]	; (800d420 <UART_SetConfig+0x908>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d130      	bne.n	800d2c0 <UART_SetConfig+0x7a8>
 800d25e:	4b6f      	ldr	r3, [pc, #444]	; (800d41c <UART_SetConfig+0x904>)
 800d260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d262:	f003 0307 	and.w	r3, r3, #7
 800d266:	2b05      	cmp	r3, #5
 800d268:	d826      	bhi.n	800d2b8 <UART_SetConfig+0x7a0>
 800d26a:	a201      	add	r2, pc, #4	; (adr r2, 800d270 <UART_SetConfig+0x758>)
 800d26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d270:	0800d289 	.word	0x0800d289
 800d274:	0800d291 	.word	0x0800d291
 800d278:	0800d299 	.word	0x0800d299
 800d27c:	0800d2a1 	.word	0x0800d2a1
 800d280:	0800d2a9 	.word	0x0800d2a9
 800d284:	0800d2b1 	.word	0x0800d2b1
 800d288:	2302      	movs	r3, #2
 800d28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d28e:	e01a      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d290:	2304      	movs	r3, #4
 800d292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d296:	e016      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d298:	2308      	movs	r3, #8
 800d29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d29e:	e012      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d2a0:	2310      	movs	r3, #16
 800d2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2a6:	e00e      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d2a8:	2320      	movs	r3, #32
 800d2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ae:	e00a      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d2b0:	2340      	movs	r3, #64	; 0x40
 800d2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2b6:	e006      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d2b8:	2380      	movs	r3, #128	; 0x80
 800d2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2be:	e002      	b.n	800d2c6 <UART_SetConfig+0x7ae>
 800d2c0:	2380      	movs	r3, #128	; 0x80
 800d2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4a55      	ldr	r2, [pc, #340]	; (800d420 <UART_SetConfig+0x908>)
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	f040 80f8 	bne.w	800d4c2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d2d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d2d6:	2b20      	cmp	r3, #32
 800d2d8:	dc46      	bgt.n	800d368 <UART_SetConfig+0x850>
 800d2da:	2b02      	cmp	r3, #2
 800d2dc:	db75      	blt.n	800d3ca <UART_SetConfig+0x8b2>
 800d2de:	3b02      	subs	r3, #2
 800d2e0:	2b1e      	cmp	r3, #30
 800d2e2:	d872      	bhi.n	800d3ca <UART_SetConfig+0x8b2>
 800d2e4:	a201      	add	r2, pc, #4	; (adr r2, 800d2ec <UART_SetConfig+0x7d4>)
 800d2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ea:	bf00      	nop
 800d2ec:	0800d36f 	.word	0x0800d36f
 800d2f0:	0800d3cb 	.word	0x0800d3cb
 800d2f4:	0800d377 	.word	0x0800d377
 800d2f8:	0800d3cb 	.word	0x0800d3cb
 800d2fc:	0800d3cb 	.word	0x0800d3cb
 800d300:	0800d3cb 	.word	0x0800d3cb
 800d304:	0800d387 	.word	0x0800d387
 800d308:	0800d3cb 	.word	0x0800d3cb
 800d30c:	0800d3cb 	.word	0x0800d3cb
 800d310:	0800d3cb 	.word	0x0800d3cb
 800d314:	0800d3cb 	.word	0x0800d3cb
 800d318:	0800d3cb 	.word	0x0800d3cb
 800d31c:	0800d3cb 	.word	0x0800d3cb
 800d320:	0800d3cb 	.word	0x0800d3cb
 800d324:	0800d397 	.word	0x0800d397
 800d328:	0800d3cb 	.word	0x0800d3cb
 800d32c:	0800d3cb 	.word	0x0800d3cb
 800d330:	0800d3cb 	.word	0x0800d3cb
 800d334:	0800d3cb 	.word	0x0800d3cb
 800d338:	0800d3cb 	.word	0x0800d3cb
 800d33c:	0800d3cb 	.word	0x0800d3cb
 800d340:	0800d3cb 	.word	0x0800d3cb
 800d344:	0800d3cb 	.word	0x0800d3cb
 800d348:	0800d3cb 	.word	0x0800d3cb
 800d34c:	0800d3cb 	.word	0x0800d3cb
 800d350:	0800d3cb 	.word	0x0800d3cb
 800d354:	0800d3cb 	.word	0x0800d3cb
 800d358:	0800d3cb 	.word	0x0800d3cb
 800d35c:	0800d3cb 	.word	0x0800d3cb
 800d360:	0800d3cb 	.word	0x0800d3cb
 800d364:	0800d3bd 	.word	0x0800d3bd
 800d368:	2b40      	cmp	r3, #64	; 0x40
 800d36a:	d02a      	beq.n	800d3c2 <UART_SetConfig+0x8aa>
 800d36c:	e02d      	b.n	800d3ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d36e:	f7fc fe3d 	bl	8009fec <HAL_RCCEx_GetD3PCLK1Freq>
 800d372:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d374:	e02f      	b.n	800d3d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7fc fe4c 	bl	800a018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d384:	e027      	b.n	800d3d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d386:	f107 0318 	add.w	r3, r7, #24
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7fc ff98 	bl	800a2c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d390:	69fb      	ldr	r3, [r7, #28]
 800d392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d394:	e01f      	b.n	800d3d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d396:	4b21      	ldr	r3, [pc, #132]	; (800d41c <UART_SetConfig+0x904>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f003 0320 	and.w	r3, r3, #32
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d009      	beq.n	800d3b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d3a2:	4b1e      	ldr	r3, [pc, #120]	; (800d41c <UART_SetConfig+0x904>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	08db      	lsrs	r3, r3, #3
 800d3a8:	f003 0303 	and.w	r3, r3, #3
 800d3ac:	4a1d      	ldr	r2, [pc, #116]	; (800d424 <UART_SetConfig+0x90c>)
 800d3ae:	fa22 f303 	lsr.w	r3, r2, r3
 800d3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d3b4:	e00f      	b.n	800d3d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d3b6:	4b1b      	ldr	r3, [pc, #108]	; (800d424 <UART_SetConfig+0x90c>)
 800d3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3ba:	e00c      	b.n	800d3d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d3bc:	4b1a      	ldr	r3, [pc, #104]	; (800d428 <UART_SetConfig+0x910>)
 800d3be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3c0:	e009      	b.n	800d3d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d3c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3c8:	e005      	b.n	800d3d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d3d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d3d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	f000 81ee 	beq.w	800d7ba <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e2:	4a12      	ldr	r2, [pc, #72]	; (800d42c <UART_SetConfig+0x914>)
 800d3e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3f0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	685a      	ldr	r2, [r3, #4]
 800d3f6:	4613      	mov	r3, r2
 800d3f8:	005b      	lsls	r3, r3, #1
 800d3fa:	4413      	add	r3, r2
 800d3fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d305      	bcc.n	800d40e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d910      	bls.n	800d430 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d40e:	2301      	movs	r3, #1
 800d410:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d414:	e1d1      	b.n	800d7ba <UART_SetConfig+0xca2>
 800d416:	bf00      	nop
 800d418:	40011c00 	.word	0x40011c00
 800d41c:	58024400 	.word	0x58024400
 800d420:	58000c00 	.word	0x58000c00
 800d424:	03d09000 	.word	0x03d09000
 800d428:	003d0900 	.word	0x003d0900
 800d42c:	0800e9fc 	.word	0x0800e9fc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d432:	2200      	movs	r2, #0
 800d434:	60bb      	str	r3, [r7, #8]
 800d436:	60fa      	str	r2, [r7, #12]
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d43c:	4ac0      	ldr	r2, [pc, #768]	; (800d740 <UART_SetConfig+0xc28>)
 800d43e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d442:	b29b      	uxth	r3, r3
 800d444:	2200      	movs	r2, #0
 800d446:	603b      	str	r3, [r7, #0]
 800d448:	607a      	str	r2, [r7, #4]
 800d44a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d44e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d452:	f7f2 ff65 	bl	8000320 <__aeabi_uldivmod>
 800d456:	4602      	mov	r2, r0
 800d458:	460b      	mov	r3, r1
 800d45a:	4610      	mov	r0, r2
 800d45c:	4619      	mov	r1, r3
 800d45e:	f04f 0200 	mov.w	r2, #0
 800d462:	f04f 0300 	mov.w	r3, #0
 800d466:	020b      	lsls	r3, r1, #8
 800d468:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d46c:	0202      	lsls	r2, r0, #8
 800d46e:	6979      	ldr	r1, [r7, #20]
 800d470:	6849      	ldr	r1, [r1, #4]
 800d472:	0849      	lsrs	r1, r1, #1
 800d474:	2000      	movs	r0, #0
 800d476:	460c      	mov	r4, r1
 800d478:	4605      	mov	r5, r0
 800d47a:	eb12 0804 	adds.w	r8, r2, r4
 800d47e:	eb43 0905 	adc.w	r9, r3, r5
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	685b      	ldr	r3, [r3, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	469a      	mov	sl, r3
 800d48a:	4693      	mov	fp, r2
 800d48c:	4652      	mov	r2, sl
 800d48e:	465b      	mov	r3, fp
 800d490:	4640      	mov	r0, r8
 800d492:	4649      	mov	r1, r9
 800d494:	f7f2 ff44 	bl	8000320 <__aeabi_uldivmod>
 800d498:	4602      	mov	r2, r0
 800d49a:	460b      	mov	r3, r1
 800d49c:	4613      	mov	r3, r2
 800d49e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d4a6:	d308      	bcc.n	800d4ba <UART_SetConfig+0x9a2>
 800d4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d4ae:	d204      	bcs.n	800d4ba <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4b6:	60da      	str	r2, [r3, #12]
 800d4b8:	e17f      	b.n	800d7ba <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d4c0:	e17b      	b.n	800d7ba <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	69db      	ldr	r3, [r3, #28]
 800d4c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d4ca:	f040 80bd 	bne.w	800d648 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d4ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d4d2:	2b20      	cmp	r3, #32
 800d4d4:	dc48      	bgt.n	800d568 <UART_SetConfig+0xa50>
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	db7b      	blt.n	800d5d2 <UART_SetConfig+0xaba>
 800d4da:	2b20      	cmp	r3, #32
 800d4dc:	d879      	bhi.n	800d5d2 <UART_SetConfig+0xaba>
 800d4de:	a201      	add	r2, pc, #4	; (adr r2, 800d4e4 <UART_SetConfig+0x9cc>)
 800d4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e4:	0800d56f 	.word	0x0800d56f
 800d4e8:	0800d577 	.word	0x0800d577
 800d4ec:	0800d5d3 	.word	0x0800d5d3
 800d4f0:	0800d5d3 	.word	0x0800d5d3
 800d4f4:	0800d57f 	.word	0x0800d57f
 800d4f8:	0800d5d3 	.word	0x0800d5d3
 800d4fc:	0800d5d3 	.word	0x0800d5d3
 800d500:	0800d5d3 	.word	0x0800d5d3
 800d504:	0800d58f 	.word	0x0800d58f
 800d508:	0800d5d3 	.word	0x0800d5d3
 800d50c:	0800d5d3 	.word	0x0800d5d3
 800d510:	0800d5d3 	.word	0x0800d5d3
 800d514:	0800d5d3 	.word	0x0800d5d3
 800d518:	0800d5d3 	.word	0x0800d5d3
 800d51c:	0800d5d3 	.word	0x0800d5d3
 800d520:	0800d5d3 	.word	0x0800d5d3
 800d524:	0800d59f 	.word	0x0800d59f
 800d528:	0800d5d3 	.word	0x0800d5d3
 800d52c:	0800d5d3 	.word	0x0800d5d3
 800d530:	0800d5d3 	.word	0x0800d5d3
 800d534:	0800d5d3 	.word	0x0800d5d3
 800d538:	0800d5d3 	.word	0x0800d5d3
 800d53c:	0800d5d3 	.word	0x0800d5d3
 800d540:	0800d5d3 	.word	0x0800d5d3
 800d544:	0800d5d3 	.word	0x0800d5d3
 800d548:	0800d5d3 	.word	0x0800d5d3
 800d54c:	0800d5d3 	.word	0x0800d5d3
 800d550:	0800d5d3 	.word	0x0800d5d3
 800d554:	0800d5d3 	.word	0x0800d5d3
 800d558:	0800d5d3 	.word	0x0800d5d3
 800d55c:	0800d5d3 	.word	0x0800d5d3
 800d560:	0800d5d3 	.word	0x0800d5d3
 800d564:	0800d5c5 	.word	0x0800d5c5
 800d568:	2b40      	cmp	r3, #64	; 0x40
 800d56a:	d02e      	beq.n	800d5ca <UART_SetConfig+0xab2>
 800d56c:	e031      	b.n	800d5d2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d56e:	f7fb fb71 	bl	8008c54 <HAL_RCC_GetPCLK1Freq>
 800d572:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d574:	e033      	b.n	800d5de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d576:	f7fb fb83 	bl	8008c80 <HAL_RCC_GetPCLK2Freq>
 800d57a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d57c:	e02f      	b.n	800d5de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d57e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d582:	4618      	mov	r0, r3
 800d584:	f7fc fd48 	bl	800a018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d58c:	e027      	b.n	800d5de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d58e:	f107 0318 	add.w	r3, r7, #24
 800d592:	4618      	mov	r0, r3
 800d594:	f7fc fe94 	bl	800a2c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d598:	69fb      	ldr	r3, [r7, #28]
 800d59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d59c:	e01f      	b.n	800d5de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d59e:	4b69      	ldr	r3, [pc, #420]	; (800d744 <UART_SetConfig+0xc2c>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f003 0320 	and.w	r3, r3, #32
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d009      	beq.n	800d5be <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d5aa:	4b66      	ldr	r3, [pc, #408]	; (800d744 <UART_SetConfig+0xc2c>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	08db      	lsrs	r3, r3, #3
 800d5b0:	f003 0303 	and.w	r3, r3, #3
 800d5b4:	4a64      	ldr	r2, [pc, #400]	; (800d748 <UART_SetConfig+0xc30>)
 800d5b6:	fa22 f303 	lsr.w	r3, r2, r3
 800d5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d5bc:	e00f      	b.n	800d5de <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d5be:	4b62      	ldr	r3, [pc, #392]	; (800d748 <UART_SetConfig+0xc30>)
 800d5c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5c2:	e00c      	b.n	800d5de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d5c4:	4b61      	ldr	r3, [pc, #388]	; (800d74c <UART_SetConfig+0xc34>)
 800d5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5c8:	e009      	b.n	800d5de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5d0:	e005      	b.n	800d5de <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d5dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	f000 80ea 	beq.w	800d7ba <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ea:	4a55      	ldr	r2, [pc, #340]	; (800d740 <UART_SetConfig+0xc28>)
 800d5ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5f8:	005a      	lsls	r2, r3, #1
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	085b      	lsrs	r3, r3, #1
 800d600:	441a      	add	r2, r3
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	fbb2 f3f3 	udiv	r3, r2, r3
 800d60a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d60e:	2b0f      	cmp	r3, #15
 800d610:	d916      	bls.n	800d640 <UART_SetConfig+0xb28>
 800d612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d618:	d212      	bcs.n	800d640 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	f023 030f 	bic.w	r3, r3, #15
 800d622:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d626:	085b      	lsrs	r3, r3, #1
 800d628:	b29b      	uxth	r3, r3
 800d62a:	f003 0307 	and.w	r3, r3, #7
 800d62e:	b29a      	uxth	r2, r3
 800d630:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d632:	4313      	orrs	r3, r2
 800d634:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d63c:	60da      	str	r2, [r3, #12]
 800d63e:	e0bc      	b.n	800d7ba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d640:	2301      	movs	r3, #1
 800d642:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d646:	e0b8      	b.n	800d7ba <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d648:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d64c:	2b20      	cmp	r3, #32
 800d64e:	dc4b      	bgt.n	800d6e8 <UART_SetConfig+0xbd0>
 800d650:	2b00      	cmp	r3, #0
 800d652:	f2c0 8087 	blt.w	800d764 <UART_SetConfig+0xc4c>
 800d656:	2b20      	cmp	r3, #32
 800d658:	f200 8084 	bhi.w	800d764 <UART_SetConfig+0xc4c>
 800d65c:	a201      	add	r2, pc, #4	; (adr r2, 800d664 <UART_SetConfig+0xb4c>)
 800d65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d662:	bf00      	nop
 800d664:	0800d6ef 	.word	0x0800d6ef
 800d668:	0800d6f7 	.word	0x0800d6f7
 800d66c:	0800d765 	.word	0x0800d765
 800d670:	0800d765 	.word	0x0800d765
 800d674:	0800d6ff 	.word	0x0800d6ff
 800d678:	0800d765 	.word	0x0800d765
 800d67c:	0800d765 	.word	0x0800d765
 800d680:	0800d765 	.word	0x0800d765
 800d684:	0800d70f 	.word	0x0800d70f
 800d688:	0800d765 	.word	0x0800d765
 800d68c:	0800d765 	.word	0x0800d765
 800d690:	0800d765 	.word	0x0800d765
 800d694:	0800d765 	.word	0x0800d765
 800d698:	0800d765 	.word	0x0800d765
 800d69c:	0800d765 	.word	0x0800d765
 800d6a0:	0800d765 	.word	0x0800d765
 800d6a4:	0800d71f 	.word	0x0800d71f
 800d6a8:	0800d765 	.word	0x0800d765
 800d6ac:	0800d765 	.word	0x0800d765
 800d6b0:	0800d765 	.word	0x0800d765
 800d6b4:	0800d765 	.word	0x0800d765
 800d6b8:	0800d765 	.word	0x0800d765
 800d6bc:	0800d765 	.word	0x0800d765
 800d6c0:	0800d765 	.word	0x0800d765
 800d6c4:	0800d765 	.word	0x0800d765
 800d6c8:	0800d765 	.word	0x0800d765
 800d6cc:	0800d765 	.word	0x0800d765
 800d6d0:	0800d765 	.word	0x0800d765
 800d6d4:	0800d765 	.word	0x0800d765
 800d6d8:	0800d765 	.word	0x0800d765
 800d6dc:	0800d765 	.word	0x0800d765
 800d6e0:	0800d765 	.word	0x0800d765
 800d6e4:	0800d757 	.word	0x0800d757
 800d6e8:	2b40      	cmp	r3, #64	; 0x40
 800d6ea:	d037      	beq.n	800d75c <UART_SetConfig+0xc44>
 800d6ec:	e03a      	b.n	800d764 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d6ee:	f7fb fab1 	bl	8008c54 <HAL_RCC_GetPCLK1Freq>
 800d6f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d6f4:	e03c      	b.n	800d770 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d6f6:	f7fb fac3 	bl	8008c80 <HAL_RCC_GetPCLK2Freq>
 800d6fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d6fc:	e038      	b.n	800d770 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d6fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d702:	4618      	mov	r0, r3
 800d704:	f7fc fc88 	bl	800a018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d70c:	e030      	b.n	800d770 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d70e:	f107 0318 	add.w	r3, r7, #24
 800d712:	4618      	mov	r0, r3
 800d714:	f7fc fdd4 	bl	800a2c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d718:	69fb      	ldr	r3, [r7, #28]
 800d71a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d71c:	e028      	b.n	800d770 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d71e:	4b09      	ldr	r3, [pc, #36]	; (800d744 <UART_SetConfig+0xc2c>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f003 0320 	and.w	r3, r3, #32
 800d726:	2b00      	cmp	r3, #0
 800d728:	d012      	beq.n	800d750 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d72a:	4b06      	ldr	r3, [pc, #24]	; (800d744 <UART_SetConfig+0xc2c>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	08db      	lsrs	r3, r3, #3
 800d730:	f003 0303 	and.w	r3, r3, #3
 800d734:	4a04      	ldr	r2, [pc, #16]	; (800d748 <UART_SetConfig+0xc30>)
 800d736:	fa22 f303 	lsr.w	r3, r2, r3
 800d73a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d73c:	e018      	b.n	800d770 <UART_SetConfig+0xc58>
 800d73e:	bf00      	nop
 800d740:	0800e9fc 	.word	0x0800e9fc
 800d744:	58024400 	.word	0x58024400
 800d748:	03d09000 	.word	0x03d09000
 800d74c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d750:	4b24      	ldr	r3, [pc, #144]	; (800d7e4 <UART_SetConfig+0xccc>)
 800d752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d754:	e00c      	b.n	800d770 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d756:	4b24      	ldr	r3, [pc, #144]	; (800d7e8 <UART_SetConfig+0xcd0>)
 800d758:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d75a:	e009      	b.n	800d770 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d75c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d760:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d762:	e005      	b.n	800d770 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d764:	2300      	movs	r3, #0
 800d766:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d768:	2301      	movs	r3, #1
 800d76a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d76e:	bf00      	nop
    }

    if (pclk != 0U)
 800d770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d772:	2b00      	cmp	r3, #0
 800d774:	d021      	beq.n	800d7ba <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d77a:	4a1c      	ldr	r2, [pc, #112]	; (800d7ec <UART_SetConfig+0xcd4>)
 800d77c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d780:	461a      	mov	r2, r3
 800d782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d784:	fbb3 f2f2 	udiv	r2, r3, r2
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	685b      	ldr	r3, [r3, #4]
 800d78c:	085b      	lsrs	r3, r3, #1
 800d78e:	441a      	add	r2, r3
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	fbb2 f3f3 	udiv	r3, r2, r3
 800d798:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d79c:	2b0f      	cmp	r3, #15
 800d79e:	d909      	bls.n	800d7b4 <UART_SetConfig+0xc9c>
 800d7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7a6:	d205      	bcs.n	800d7b4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7aa:	b29a      	uxth	r2, r3
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	60da      	str	r2, [r3, #12]
 800d7b2:	e002      	b.n	800d7ba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	2201      	movs	r2, #1
 800d7be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d7d6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3748      	adds	r7, #72	; 0x48
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d7e4:	03d09000 	.word	0x03d09000
 800d7e8:	003d0900 	.word	0x003d0900
 800d7ec:	0800e9fc 	.word	0x0800e9fc

0800d7f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7fc:	f003 0301 	and.w	r3, r3, #1
 800d800:	2b00      	cmp	r3, #0
 800d802:	d00a      	beq.n	800d81a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	430a      	orrs	r2, r1
 800d818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d81e:	f003 0302 	and.w	r3, r3, #2
 800d822:	2b00      	cmp	r3, #0
 800d824:	d00a      	beq.n	800d83c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	430a      	orrs	r2, r1
 800d83a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d840:	f003 0304 	and.w	r3, r3, #4
 800d844:	2b00      	cmp	r3, #0
 800d846:	d00a      	beq.n	800d85e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	430a      	orrs	r2, r1
 800d85c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d862:	f003 0308 	and.w	r3, r3, #8
 800d866:	2b00      	cmp	r3, #0
 800d868:	d00a      	beq.n	800d880 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	430a      	orrs	r2, r1
 800d87e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d884:	f003 0310 	and.w	r3, r3, #16
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d00a      	beq.n	800d8a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	689b      	ldr	r3, [r3, #8]
 800d892:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	430a      	orrs	r2, r1
 800d8a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8a6:	f003 0320 	and.w	r3, r3, #32
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d00a      	beq.n	800d8c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	430a      	orrs	r2, r1
 800d8c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d01a      	beq.n	800d906 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	430a      	orrs	r2, r1
 800d8e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8ee:	d10a      	bne.n	800d906 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	685b      	ldr	r3, [r3, #4]
 800d8f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	430a      	orrs	r2, r1
 800d904:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d90a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d00a      	beq.n	800d928 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	685b      	ldr	r3, [r3, #4]
 800d918:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	430a      	orrs	r2, r1
 800d926:	605a      	str	r2, [r3, #4]
  }
}
 800d928:	bf00      	nop
 800d92a:	370c      	adds	r7, #12
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr

0800d934 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b098      	sub	sp, #96	; 0x60
 800d938:	af02      	add	r7, sp, #8
 800d93a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2200      	movs	r2, #0
 800d940:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d944:	f7f7 f8fa 	bl	8004b3c <HAL_GetTick>
 800d948:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f003 0308 	and.w	r3, r3, #8
 800d954:	2b08      	cmp	r3, #8
 800d956:	d12f      	bne.n	800d9b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d95c:	9300      	str	r3, [sp, #0]
 800d95e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d960:	2200      	movs	r2, #0
 800d962:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f000 f88e 	bl	800da88 <UART_WaitOnFlagUntilTimeout>
 800d96c:	4603      	mov	r3, r0
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d022      	beq.n	800d9b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d97a:	e853 3f00 	ldrex	r3, [r3]
 800d97e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d986:	653b      	str	r3, [r7, #80]	; 0x50
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	461a      	mov	r2, r3
 800d98e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d990:	647b      	str	r3, [r7, #68]	; 0x44
 800d992:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d994:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d998:	e841 2300 	strex	r3, r2, [r1]
 800d99c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d99e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d1e6      	bne.n	800d972 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2220      	movs	r2, #32
 800d9a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d9b4:	2303      	movs	r3, #3
 800d9b6:	e063      	b.n	800da80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f003 0304 	and.w	r3, r3, #4
 800d9c2:	2b04      	cmp	r3, #4
 800d9c4:	d149      	bne.n	800da5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d9c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 f857 	bl	800da88 <UART_WaitOnFlagUntilTimeout>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d03c      	beq.n	800da5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e8:	e853 3f00 	ldrex	r3, [r3]
 800d9ec:	623b      	str	r3, [r7, #32]
   return(result);
 800d9ee:	6a3b      	ldr	r3, [r7, #32]
 800d9f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d9f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9fe:	633b      	str	r3, [r7, #48]	; 0x30
 800da00:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da06:	e841 2300 	strex	r3, r2, [r1]
 800da0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800da0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d1e6      	bne.n	800d9e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	3308      	adds	r3, #8
 800da18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	e853 3f00 	ldrex	r3, [r3]
 800da20:	60fb      	str	r3, [r7, #12]
   return(result);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f023 0301 	bic.w	r3, r3, #1
 800da28:	64bb      	str	r3, [r7, #72]	; 0x48
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	3308      	adds	r3, #8
 800da30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da32:	61fa      	str	r2, [r7, #28]
 800da34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da36:	69b9      	ldr	r1, [r7, #24]
 800da38:	69fa      	ldr	r2, [r7, #28]
 800da3a:	e841 2300 	strex	r3, r2, [r1]
 800da3e:	617b      	str	r3, [r7, #20]
   return(result);
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d1e5      	bne.n	800da12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2220      	movs	r2, #32
 800da4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2200      	movs	r2, #0
 800da52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da56:	2303      	movs	r3, #3
 800da58:	e012      	b.n	800da80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2220      	movs	r2, #32
 800da5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2220      	movs	r2, #32
 800da66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2200      	movs	r2, #0
 800da6e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2200      	movs	r2, #0
 800da74:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2200      	movs	r2, #0
 800da7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800da7e:	2300      	movs	r3, #0
}
 800da80:	4618      	mov	r0, r3
 800da82:	3758      	adds	r7, #88	; 0x58
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b084      	sub	sp, #16
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	60b9      	str	r1, [r7, #8]
 800da92:	603b      	str	r3, [r7, #0]
 800da94:	4613      	mov	r3, r2
 800da96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da98:	e049      	b.n	800db2e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da9a:	69bb      	ldr	r3, [r7, #24]
 800da9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daa0:	d045      	beq.n	800db2e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800daa2:	f7f7 f84b 	bl	8004b3c <HAL_GetTick>
 800daa6:	4602      	mov	r2, r0
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	1ad3      	subs	r3, r2, r3
 800daac:	69ba      	ldr	r2, [r7, #24]
 800daae:	429a      	cmp	r2, r3
 800dab0:	d302      	bcc.n	800dab8 <UART_WaitOnFlagUntilTimeout+0x30>
 800dab2:	69bb      	ldr	r3, [r7, #24]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d101      	bne.n	800dabc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dab8:	2303      	movs	r3, #3
 800daba:	e048      	b.n	800db4e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f003 0304 	and.w	r3, r3, #4
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d031      	beq.n	800db2e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	69db      	ldr	r3, [r3, #28]
 800dad0:	f003 0308 	and.w	r3, r3, #8
 800dad4:	2b08      	cmp	r3, #8
 800dad6:	d110      	bne.n	800dafa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	2208      	movs	r2, #8
 800dade:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800dae0:	68f8      	ldr	r0, [r7, #12]
 800dae2:	f000 f921 	bl	800dd28 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	2208      	movs	r2, #8
 800daea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2200      	movs	r2, #0
 800daf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800daf6:	2301      	movs	r3, #1
 800daf8:	e029      	b.n	800db4e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	69db      	ldr	r3, [r3, #28]
 800db00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db08:	d111      	bne.n	800db2e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800db12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db14:	68f8      	ldr	r0, [r7, #12]
 800db16:	f000 f907 	bl	800dd28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	2220      	movs	r2, #32
 800db1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2200      	movs	r2, #0
 800db26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800db2a:	2303      	movs	r3, #3
 800db2c:	e00f      	b.n	800db4e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	69da      	ldr	r2, [r3, #28]
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	4013      	ands	r3, r2
 800db38:	68ba      	ldr	r2, [r7, #8]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	bf0c      	ite	eq
 800db3e:	2301      	moveq	r3, #1
 800db40:	2300      	movne	r3, #0
 800db42:	b2db      	uxtb	r3, r3
 800db44:	461a      	mov	r2, r3
 800db46:	79fb      	ldrb	r3, [r7, #7]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d0a6      	beq.n	800da9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db4c:	2300      	movs	r3, #0
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3710      	adds	r7, #16
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}
	...

0800db58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b096      	sub	sp, #88	; 0x58
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	60f8      	str	r0, [r7, #12]
 800db60:	60b9      	str	r1, [r7, #8]
 800db62:	4613      	mov	r3, r2
 800db64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	68ba      	ldr	r2, [r7, #8]
 800db6a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	88fa      	ldrh	r2, [r7, #6]
 800db70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	2200      	movs	r2, #0
 800db78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2222      	movs	r2, #34	; 0x22
 800db80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d02d      	beq.n	800dbea <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db94:	4a40      	ldr	r2, [pc, #256]	; (800dc98 <UART_Start_Receive_DMA+0x140>)
 800db96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db9e:	4a3f      	ldr	r2, [pc, #252]	; (800dc9c <UART_Start_Receive_DMA+0x144>)
 800dba0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dba8:	4a3d      	ldr	r2, [pc, #244]	; (800dca0 <UART_Start_Receive_DMA+0x148>)
 800dbaa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	3324      	adds	r3, #36	; 0x24
 800dbc2:	4619      	mov	r1, r3
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbc8:	461a      	mov	r2, r3
 800dbca:	88fb      	ldrh	r3, [r7, #6]
 800dbcc:	f7f7 fc2c 	bl	8005428 <HAL_DMA_Start_IT>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d009      	beq.n	800dbea <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2210      	movs	r2, #16
 800dbda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2220      	movs	r2, #32
 800dbe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	e051      	b.n	800dc8e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	691b      	ldr	r3, [r3, #16]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d018      	beq.n	800dc24 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbfa:	e853 3f00 	ldrex	r3, [r3]
 800dbfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc06:	657b      	str	r3, [r7, #84]	; 0x54
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc10:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc12:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dc16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc18:	e841 2300 	strex	r3, r2, [r1]
 800dc1c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dc1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d1e6      	bne.n	800dbf2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	3308      	adds	r3, #8
 800dc2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc2e:	e853 3f00 	ldrex	r3, [r3]
 800dc32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc36:	f043 0301 	orr.w	r3, r3, #1
 800dc3a:	653b      	str	r3, [r7, #80]	; 0x50
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	3308      	adds	r3, #8
 800dc42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc44:	637a      	str	r2, [r7, #52]	; 0x34
 800dc46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc4c:	e841 2300 	strex	r3, r2, [r1]
 800dc50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d1e5      	bne.n	800dc24 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	3308      	adds	r3, #8
 800dc5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	e853 3f00 	ldrex	r3, [r3]
 800dc66:	613b      	str	r3, [r7, #16]
   return(result);
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	3308      	adds	r3, #8
 800dc76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc78:	623a      	str	r2, [r7, #32]
 800dc7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc7c:	69f9      	ldr	r1, [r7, #28]
 800dc7e:	6a3a      	ldr	r2, [r7, #32]
 800dc80:	e841 2300 	strex	r3, r2, [r1]
 800dc84:	61bb      	str	r3, [r7, #24]
   return(result);
 800dc86:	69bb      	ldr	r3, [r7, #24]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d1e5      	bne.n	800dc58 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800dc8c:	2300      	movs	r3, #0
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3758      	adds	r7, #88	; 0x58
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop
 800dc98:	0800dea7 	.word	0x0800dea7
 800dc9c:	0800dfcf 	.word	0x0800dfcf
 800dca0:	0800e00d 	.word	0x0800e00d

0800dca4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b08f      	sub	sp, #60	; 0x3c
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcb2:	6a3b      	ldr	r3, [r7, #32]
 800dcb4:	e853 3f00 	ldrex	r3, [r3]
 800dcb8:	61fb      	str	r3, [r7, #28]
   return(result);
 800dcba:	69fb      	ldr	r3, [r7, #28]
 800dcbc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dcc0:	637b      	str	r3, [r7, #52]	; 0x34
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	461a      	mov	r2, r3
 800dcc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dccc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dcd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcd2:	e841 2300 	strex	r3, r2, [r1]
 800dcd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d1e6      	bne.n	800dcac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	3308      	adds	r3, #8
 800dce4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	e853 3f00 	ldrex	r3, [r3]
 800dcec:	60bb      	str	r3, [r7, #8]
   return(result);
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800dcf4:	633b      	str	r3, [r7, #48]	; 0x30
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	3308      	adds	r3, #8
 800dcfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcfe:	61ba      	str	r2, [r7, #24]
 800dd00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd02:	6979      	ldr	r1, [r7, #20]
 800dd04:	69ba      	ldr	r2, [r7, #24]
 800dd06:	e841 2300 	strex	r3, r2, [r1]
 800dd0a:	613b      	str	r3, [r7, #16]
   return(result);
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d1e5      	bne.n	800dcde <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2220      	movs	r2, #32
 800dd16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800dd1a:	bf00      	nop
 800dd1c:	373c      	adds	r7, #60	; 0x3c
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd24:	4770      	bx	lr
	...

0800dd28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b095      	sub	sp, #84	; 0x54
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd38:	e853 3f00 	ldrex	r3, [r3]
 800dd3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd44:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd4e:	643b      	str	r3, [r7, #64]	; 0x40
 800dd50:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dd54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd56:	e841 2300 	strex	r3, r2, [r1]
 800dd5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d1e6      	bne.n	800dd30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	3308      	adds	r3, #8
 800dd68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd6a:	6a3b      	ldr	r3, [r7, #32]
 800dd6c:	e853 3f00 	ldrex	r3, [r3]
 800dd70:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd72:	69fa      	ldr	r2, [r7, #28]
 800dd74:	4b1e      	ldr	r3, [pc, #120]	; (800ddf0 <UART_EndRxTransfer+0xc8>)
 800dd76:	4013      	ands	r3, r2
 800dd78:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	3308      	adds	r3, #8
 800dd80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd82:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dd84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd8a:	e841 2300 	strex	r3, r2, [r1]
 800dd8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d1e5      	bne.n	800dd62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d118      	bne.n	800ddd0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	e853 3f00 	ldrex	r3, [r3]
 800ddaa:	60bb      	str	r3, [r7, #8]
   return(result);
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	f023 0310 	bic.w	r3, r3, #16
 800ddb2:	647b      	str	r3, [r7, #68]	; 0x44
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	461a      	mov	r2, r3
 800ddba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddbc:	61bb      	str	r3, [r7, #24]
 800ddbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddc0:	6979      	ldr	r1, [r7, #20]
 800ddc2:	69ba      	ldr	r2, [r7, #24]
 800ddc4:	e841 2300 	strex	r3, r2, [r1]
 800ddc8:	613b      	str	r3, [r7, #16]
   return(result);
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d1e6      	bne.n	800dd9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2220      	movs	r2, #32
 800ddd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2200      	movs	r2, #0
 800dddc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2200      	movs	r2, #0
 800dde2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800dde4:	bf00      	nop
 800dde6:	3754      	adds	r7, #84	; 0x54
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr
 800ddf0:	effffffe 	.word	0xeffffffe

0800ddf4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b090      	sub	sp, #64	; 0x40
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de00:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	69db      	ldr	r3, [r3, #28]
 800de06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de0a:	d037      	beq.n	800de7c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800de0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de0e:	2200      	movs	r2, #0
 800de10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800de14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	3308      	adds	r3, #8
 800de1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1e:	e853 3f00 	ldrex	r3, [r3]
 800de22:	623b      	str	r3, [r7, #32]
   return(result);
 800de24:	6a3b      	ldr	r3, [r7, #32]
 800de26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de2a:	63bb      	str	r3, [r7, #56]	; 0x38
 800de2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	3308      	adds	r3, #8
 800de32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de34:	633a      	str	r2, [r7, #48]	; 0x30
 800de36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de3c:	e841 2300 	strex	r3, r2, [r1]
 800de40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800de42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de44:	2b00      	cmp	r3, #0
 800de46:	d1e5      	bne.n	800de14 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800de48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	e853 3f00 	ldrex	r3, [r3]
 800de54:	60fb      	str	r3, [r7, #12]
   return(result);
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de5c:	637b      	str	r3, [r7, #52]	; 0x34
 800de5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	461a      	mov	r2, r3
 800de64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de66:	61fb      	str	r3, [r7, #28]
 800de68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de6a:	69b9      	ldr	r1, [r7, #24]
 800de6c:	69fa      	ldr	r2, [r7, #28]
 800de6e:	e841 2300 	strex	r3, r2, [r1]
 800de72:	617b      	str	r3, [r7, #20]
   return(result);
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d1e6      	bne.n	800de48 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800de7a:	e002      	b.n	800de82 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800de7c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800de7e:	f7f5 fb39 	bl	80034f4 <HAL_UART_TxCpltCallback>
}
 800de82:	bf00      	nop
 800de84:	3740      	adds	r7, #64	; 0x40
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}

0800de8a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800de8a:	b580      	push	{r7, lr}
 800de8c:	b084      	sub	sp, #16
 800de8e:	af00      	add	r7, sp, #0
 800de90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de96:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800de98:	68f8      	ldr	r0, [r7, #12]
 800de9a:	f7fe fe13 	bl	800cac4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de9e:	bf00      	nop
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}

0800dea6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dea6:	b580      	push	{r7, lr}
 800dea8:	b09c      	sub	sp, #112	; 0x70
 800deaa:	af00      	add	r7, sp, #0
 800deac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deb2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	69db      	ldr	r3, [r3, #28]
 800deb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800debc:	d071      	beq.n	800dfa2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800debe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dec0:	2200      	movs	r2, #0
 800dec2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800decc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dece:	e853 3f00 	ldrex	r3, [r3]
 800ded2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ded4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ded6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800deda:	66bb      	str	r3, [r7, #104]	; 0x68
 800dedc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	461a      	mov	r2, r3
 800dee2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dee4:	65bb      	str	r3, [r7, #88]	; 0x58
 800dee6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dee8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800deea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800deec:	e841 2300 	strex	r3, r2, [r1]
 800def0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800def2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800def4:	2b00      	cmp	r3, #0
 800def6:	d1e6      	bne.n	800dec6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800def8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	3308      	adds	r3, #8
 800defe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df02:	e853 3f00 	ldrex	r3, [r3]
 800df06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800df08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df0a:	f023 0301 	bic.w	r3, r3, #1
 800df0e:	667b      	str	r3, [r7, #100]	; 0x64
 800df10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	3308      	adds	r3, #8
 800df16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800df18:	647a      	str	r2, [r7, #68]	; 0x44
 800df1a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800df1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df20:	e841 2300 	strex	r3, r2, [r1]
 800df24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800df26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d1e5      	bne.n	800def8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	3308      	adds	r3, #8
 800df32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df36:	e853 3f00 	ldrex	r3, [r3]
 800df3a:	623b      	str	r3, [r7, #32]
   return(result);
 800df3c:	6a3b      	ldr	r3, [r7, #32]
 800df3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df42:	663b      	str	r3, [r7, #96]	; 0x60
 800df44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	3308      	adds	r3, #8
 800df4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800df4c:	633a      	str	r2, [r7, #48]	; 0x30
 800df4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df54:	e841 2300 	strex	r3, r2, [r1]
 800df58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800df5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d1e5      	bne.n	800df2c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800df60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df62:	2220      	movs	r2, #32
 800df64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	d118      	bne.n	800dfa2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	e853 3f00 	ldrex	r3, [r3]
 800df7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f023 0310 	bic.w	r3, r3, #16
 800df84:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	461a      	mov	r2, r3
 800df8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df8e:	61fb      	str	r3, [r7, #28]
 800df90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df92:	69b9      	ldr	r1, [r7, #24]
 800df94:	69fa      	ldr	r2, [r7, #28]
 800df96:	e841 2300 	strex	r3, r2, [r1]
 800df9a:	617b      	str	r3, [r7, #20]
   return(result);
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d1e6      	bne.n	800df70 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dfa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfac:	2b01      	cmp	r3, #1
 800dfae:	d107      	bne.n	800dfc0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dfb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dfb6:	4619      	mov	r1, r3
 800dfb8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dfba:	f7fe fda1 	bl	800cb00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dfbe:	e002      	b.n	800dfc6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800dfc0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dfc2:	f7f5 faa9 	bl	8003518 <HAL_UART_RxCpltCallback>
}
 800dfc6:	bf00      	nop
 800dfc8:	3770      	adds	r7, #112	; 0x70
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}

0800dfce <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dfce:	b580      	push	{r7, lr}
 800dfd0:	b084      	sub	sp, #16
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfda:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2201      	movs	r2, #1
 800dfe0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d109      	bne.n	800dffe <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dff0:	085b      	lsrs	r3, r3, #1
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	4619      	mov	r1, r3
 800dff6:	68f8      	ldr	r0, [r7, #12]
 800dff8:	f7fe fd82 	bl	800cb00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dffc:	e002      	b.n	800e004 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800dffe:	68f8      	ldr	r0, [r7, #12]
 800e000:	f7fe fd6a 	bl	800cad8 <HAL_UART_RxHalfCpltCallback>
}
 800e004:	bf00      	nop
 800e006:	3710      	adds	r7, #16
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b086      	sub	sp, #24
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e018:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e020:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e028:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	689b      	ldr	r3, [r3, #8]
 800e030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e034:	2b80      	cmp	r3, #128	; 0x80
 800e036:	d109      	bne.n	800e04c <UART_DMAError+0x40>
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	2b21      	cmp	r3, #33	; 0x21
 800e03c:	d106      	bne.n	800e04c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	2200      	movs	r2, #0
 800e042:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e046:	6978      	ldr	r0, [r7, #20]
 800e048:	f7ff fe2c 	bl	800dca4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	689b      	ldr	r3, [r3, #8]
 800e052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e056:	2b40      	cmp	r3, #64	; 0x40
 800e058:	d109      	bne.n	800e06e <UART_DMAError+0x62>
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2b22      	cmp	r3, #34	; 0x22
 800e05e:	d106      	bne.n	800e06e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	2200      	movs	r2, #0
 800e064:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e068:	6978      	ldr	r0, [r7, #20]
 800e06a:	f7ff fe5d 	bl	800dd28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e074:	f043 0210 	orr.w	r2, r3, #16
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e07e:	6978      	ldr	r0, [r7, #20]
 800e080:	f7fe fd34 	bl	800caec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e084:	bf00      	nop
 800e086:	3718      	adds	r7, #24
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b084      	sub	sp, #16
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e098:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2200      	movs	r2, #0
 800e09e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e0aa:	68f8      	ldr	r0, [r7, #12]
 800e0ac:	f7fe fd1e 	bl	800caec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0b0:	bf00      	nop
 800e0b2:	3710      	adds	r7, #16
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}

0800e0b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b088      	sub	sp, #32
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	e853 3f00 	ldrex	r3, [r3]
 800e0cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0d4:	61fb      	str	r3, [r7, #28]
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	461a      	mov	r2, r3
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	61bb      	str	r3, [r7, #24]
 800e0e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0e2:	6979      	ldr	r1, [r7, #20]
 800e0e4:	69ba      	ldr	r2, [r7, #24]
 800e0e6:	e841 2300 	strex	r3, r2, [r1]
 800e0ea:	613b      	str	r3, [r7, #16]
   return(result);
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d1e6      	bne.n	800e0c0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2220      	movs	r2, #32
 800e0f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f7f5 f9f7 	bl	80034f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e106:	bf00      	nop
 800e108:	3720      	adds	r7, #32
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}

0800e10e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e10e:	b480      	push	{r7}
 800e110:	b083      	sub	sp, #12
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e116:	bf00      	nop
 800e118:	370c      	adds	r7, #12
 800e11a:	46bd      	mov	sp, r7
 800e11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e120:	4770      	bx	lr

0800e122 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e122:	b480      	push	{r7}
 800e124:	b083      	sub	sp, #12
 800e126:	af00      	add	r7, sp, #0
 800e128:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e12a:	bf00      	nop
 800e12c:	370c      	adds	r7, #12
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr

0800e136 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e136:	b480      	push	{r7}
 800e138:	b083      	sub	sp, #12
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e13e:	bf00      	nop
 800e140:	370c      	adds	r7, #12
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr

0800e14a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e14a:	b480      	push	{r7}
 800e14c:	b085      	sub	sp, #20
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d101      	bne.n	800e160 <HAL_UARTEx_DisableFifoMode+0x16>
 800e15c:	2302      	movs	r3, #2
 800e15e:	e027      	b.n	800e1b0 <HAL_UARTEx_DisableFifoMode+0x66>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2201      	movs	r2, #1
 800e164:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2224      	movs	r2, #36	; 0x24
 800e16c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	681a      	ldr	r2, [r3, #0]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	f022 0201 	bic.w	r2, r2, #1
 800e186:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e18e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2200      	movs	r2, #0
 800e194:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	68fa      	ldr	r2, [r7, #12]
 800e19c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2220      	movs	r2, #32
 800e1a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e1ae:	2300      	movs	r3, #0
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3714      	adds	r7, #20
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr

0800e1bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b084      	sub	sp, #16
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d101      	bne.n	800e1d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e1d0:	2302      	movs	r3, #2
 800e1d2:	e02d      	b.n	800e230 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2201      	movs	r2, #1
 800e1d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2224      	movs	r2, #36	; 0x24
 800e1e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	681a      	ldr	r2, [r3, #0]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	f022 0201 	bic.w	r2, r2, #1
 800e1fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	689b      	ldr	r3, [r3, #8]
 800e202:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	683a      	ldr	r2, [r7, #0]
 800e20c:	430a      	orrs	r2, r1
 800e20e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f000 f84f 	bl	800e2b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	68fa      	ldr	r2, [r7, #12]
 800e21c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2220      	movs	r2, #32
 800e222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2200      	movs	r2, #0
 800e22a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e22e:	2300      	movs	r3, #0
}
 800e230:	4618      	mov	r0, r3
 800e232:	3710      	adds	r7, #16
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e248:	2b01      	cmp	r3, #1
 800e24a:	d101      	bne.n	800e250 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e24c:	2302      	movs	r3, #2
 800e24e:	e02d      	b.n	800e2ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2201      	movs	r2, #1
 800e254:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2224      	movs	r2, #36	; 0x24
 800e25c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f022 0201 	bic.w	r2, r2, #1
 800e276:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	689b      	ldr	r3, [r3, #8]
 800e27e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	683a      	ldr	r2, [r7, #0]
 800e288:	430a      	orrs	r2, r1
 800e28a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f000 f811 	bl	800e2b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	68fa      	ldr	r2, [r7, #12]
 800e298:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2220      	movs	r2, #32
 800e29e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e2aa:	2300      	movs	r3, #0
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3710      	adds	r7, #16
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b085      	sub	sp, #20
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d108      	bne.n	800e2d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e2d4:	e031      	b.n	800e33a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e2d6:	2310      	movs	r3, #16
 800e2d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e2da:	2310      	movs	r3, #16
 800e2dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	689b      	ldr	r3, [r3, #8]
 800e2e4:	0e5b      	lsrs	r3, r3, #25
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	f003 0307 	and.w	r3, r3, #7
 800e2ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	689b      	ldr	r3, [r3, #8]
 800e2f4:	0f5b      	lsrs	r3, r3, #29
 800e2f6:	b2db      	uxtb	r3, r3
 800e2f8:	f003 0307 	and.w	r3, r3, #7
 800e2fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e2fe:	7bbb      	ldrb	r3, [r7, #14]
 800e300:	7b3a      	ldrb	r2, [r7, #12]
 800e302:	4911      	ldr	r1, [pc, #68]	; (800e348 <UARTEx_SetNbDataToProcess+0x94>)
 800e304:	5c8a      	ldrb	r2, [r1, r2]
 800e306:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e30a:	7b3a      	ldrb	r2, [r7, #12]
 800e30c:	490f      	ldr	r1, [pc, #60]	; (800e34c <UARTEx_SetNbDataToProcess+0x98>)
 800e30e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e310:	fb93 f3f2 	sdiv	r3, r3, r2
 800e314:	b29a      	uxth	r2, r3
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e31c:	7bfb      	ldrb	r3, [r7, #15]
 800e31e:	7b7a      	ldrb	r2, [r7, #13]
 800e320:	4909      	ldr	r1, [pc, #36]	; (800e348 <UARTEx_SetNbDataToProcess+0x94>)
 800e322:	5c8a      	ldrb	r2, [r1, r2]
 800e324:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e328:	7b7a      	ldrb	r2, [r7, #13]
 800e32a:	4908      	ldr	r1, [pc, #32]	; (800e34c <UARTEx_SetNbDataToProcess+0x98>)
 800e32c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e32e:	fb93 f3f2 	sdiv	r3, r3, r2
 800e332:	b29a      	uxth	r2, r3
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e33a:	bf00      	nop
 800e33c:	3714      	adds	r7, #20
 800e33e:	46bd      	mov	sp, r7
 800e340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e344:	4770      	bx	lr
 800e346:	bf00      	nop
 800e348:	0800ea14 	.word	0x0800ea14
 800e34c:	0800ea1c 	.word	0x0800ea1c

0800e350 <__cxa_pure_virtual>:
 800e350:	b508      	push	{r3, lr}
 800e352:	f000 f80d 	bl	800e370 <_ZSt9terminatev>

0800e356 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e356:	b508      	push	{r3, lr}
 800e358:	4780      	blx	r0
 800e35a:	f000 f80e 	bl	800e37a <abort>
	...

0800e360 <_ZSt13get_terminatev>:
 800e360:	4b02      	ldr	r3, [pc, #8]	; (800e36c <_ZSt13get_terminatev+0xc>)
 800e362:	6818      	ldr	r0, [r3, #0]
 800e364:	f3bf 8f5b 	dmb	ish
 800e368:	4770      	bx	lr
 800e36a:	bf00      	nop
 800e36c:	24000038 	.word	0x24000038

0800e370 <_ZSt9terminatev>:
 800e370:	b508      	push	{r3, lr}
 800e372:	f7ff fff5 	bl	800e360 <_ZSt13get_terminatev>
 800e376:	f7ff ffee 	bl	800e356 <_ZN10__cxxabiv111__terminateEPFvvE>

0800e37a <abort>:
 800e37a:	b508      	push	{r3, lr}
 800e37c:	2006      	movs	r0, #6
 800e37e:	f000 f873 	bl	800e468 <raise>
 800e382:	2001      	movs	r0, #1
 800e384:	f7f6 fa72 	bl	800486c <_exit>

0800e388 <__errno>:
 800e388:	4b01      	ldr	r3, [pc, #4]	; (800e390 <__errno+0x8>)
 800e38a:	6818      	ldr	r0, [r3, #0]
 800e38c:	4770      	bx	lr
 800e38e:	bf00      	nop
 800e390:	2400003c 	.word	0x2400003c

0800e394 <__libc_init_array>:
 800e394:	b570      	push	{r4, r5, r6, lr}
 800e396:	4d0d      	ldr	r5, [pc, #52]	; (800e3cc <__libc_init_array+0x38>)
 800e398:	4c0d      	ldr	r4, [pc, #52]	; (800e3d0 <__libc_init_array+0x3c>)
 800e39a:	1b64      	subs	r4, r4, r5
 800e39c:	10a4      	asrs	r4, r4, #2
 800e39e:	2600      	movs	r6, #0
 800e3a0:	42a6      	cmp	r6, r4
 800e3a2:	d109      	bne.n	800e3b8 <__libc_init_array+0x24>
 800e3a4:	4d0b      	ldr	r5, [pc, #44]	; (800e3d4 <__libc_init_array+0x40>)
 800e3a6:	4c0c      	ldr	r4, [pc, #48]	; (800e3d8 <__libc_init_array+0x44>)
 800e3a8:	f000 f9b0 	bl	800e70c <_init>
 800e3ac:	1b64      	subs	r4, r4, r5
 800e3ae:	10a4      	asrs	r4, r4, #2
 800e3b0:	2600      	movs	r6, #0
 800e3b2:	42a6      	cmp	r6, r4
 800e3b4:	d105      	bne.n	800e3c2 <__libc_init_array+0x2e>
 800e3b6:	bd70      	pop	{r4, r5, r6, pc}
 800e3b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3bc:	4798      	blx	r3
 800e3be:	3601      	adds	r6, #1
 800e3c0:	e7ee      	b.n	800e3a0 <__libc_init_array+0xc>
 800e3c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3c6:	4798      	blx	r3
 800e3c8:	3601      	adds	r6, #1
 800e3ca:	e7f2      	b.n	800e3b2 <__libc_init_array+0x1e>
 800e3cc:	0800ea2c 	.word	0x0800ea2c
 800e3d0:	0800ea2c 	.word	0x0800ea2c
 800e3d4:	0800ea2c 	.word	0x0800ea2c
 800e3d8:	0800ea34 	.word	0x0800ea34

0800e3dc <memcpy>:
 800e3dc:	440a      	add	r2, r1
 800e3de:	4291      	cmp	r1, r2
 800e3e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e3e4:	d100      	bne.n	800e3e8 <memcpy+0xc>
 800e3e6:	4770      	bx	lr
 800e3e8:	b510      	push	{r4, lr}
 800e3ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3f2:	4291      	cmp	r1, r2
 800e3f4:	d1f9      	bne.n	800e3ea <memcpy+0xe>
 800e3f6:	bd10      	pop	{r4, pc}

0800e3f8 <memset>:
 800e3f8:	4402      	add	r2, r0
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	d100      	bne.n	800e402 <memset+0xa>
 800e400:	4770      	bx	lr
 800e402:	f803 1b01 	strb.w	r1, [r3], #1
 800e406:	e7f9      	b.n	800e3fc <memset+0x4>

0800e408 <realloc>:
 800e408:	4b02      	ldr	r3, [pc, #8]	; (800e414 <realloc+0xc>)
 800e40a:	460a      	mov	r2, r1
 800e40c:	4601      	mov	r1, r0
 800e40e:	6818      	ldr	r0, [r3, #0]
 800e410:	f000 b8da 	b.w	800e5c8 <_realloc_r>
 800e414:	2400003c 	.word	0x2400003c

0800e418 <_raise_r>:
 800e418:	291f      	cmp	r1, #31
 800e41a:	b538      	push	{r3, r4, r5, lr}
 800e41c:	4604      	mov	r4, r0
 800e41e:	460d      	mov	r5, r1
 800e420:	d904      	bls.n	800e42c <_raise_r+0x14>
 800e422:	2316      	movs	r3, #22
 800e424:	6003      	str	r3, [r0, #0]
 800e426:	f04f 30ff 	mov.w	r0, #4294967295
 800e42a:	bd38      	pop	{r3, r4, r5, pc}
 800e42c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e42e:	b112      	cbz	r2, 800e436 <_raise_r+0x1e>
 800e430:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e434:	b94b      	cbnz	r3, 800e44a <_raise_r+0x32>
 800e436:	4620      	mov	r0, r4
 800e438:	f000 f830 	bl	800e49c <_getpid_r>
 800e43c:	462a      	mov	r2, r5
 800e43e:	4601      	mov	r1, r0
 800e440:	4620      	mov	r0, r4
 800e442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e446:	f000 b817 	b.w	800e478 <_kill_r>
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	d00a      	beq.n	800e464 <_raise_r+0x4c>
 800e44e:	1c59      	adds	r1, r3, #1
 800e450:	d103      	bne.n	800e45a <_raise_r+0x42>
 800e452:	2316      	movs	r3, #22
 800e454:	6003      	str	r3, [r0, #0]
 800e456:	2001      	movs	r0, #1
 800e458:	e7e7      	b.n	800e42a <_raise_r+0x12>
 800e45a:	2400      	movs	r4, #0
 800e45c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e460:	4628      	mov	r0, r5
 800e462:	4798      	blx	r3
 800e464:	2000      	movs	r0, #0
 800e466:	e7e0      	b.n	800e42a <_raise_r+0x12>

0800e468 <raise>:
 800e468:	4b02      	ldr	r3, [pc, #8]	; (800e474 <raise+0xc>)
 800e46a:	4601      	mov	r1, r0
 800e46c:	6818      	ldr	r0, [r3, #0]
 800e46e:	f7ff bfd3 	b.w	800e418 <_raise_r>
 800e472:	bf00      	nop
 800e474:	2400003c 	.word	0x2400003c

0800e478 <_kill_r>:
 800e478:	b538      	push	{r3, r4, r5, lr}
 800e47a:	4d07      	ldr	r5, [pc, #28]	; (800e498 <_kill_r+0x20>)
 800e47c:	2300      	movs	r3, #0
 800e47e:	4604      	mov	r4, r0
 800e480:	4608      	mov	r0, r1
 800e482:	4611      	mov	r1, r2
 800e484:	602b      	str	r3, [r5, #0]
 800e486:	f7f6 f9e1 	bl	800484c <_kill>
 800e48a:	1c43      	adds	r3, r0, #1
 800e48c:	d102      	bne.n	800e494 <_kill_r+0x1c>
 800e48e:	682b      	ldr	r3, [r5, #0]
 800e490:	b103      	cbz	r3, 800e494 <_kill_r+0x1c>
 800e492:	6023      	str	r3, [r4, #0]
 800e494:	bd38      	pop	{r3, r4, r5, pc}
 800e496:	bf00      	nop
 800e498:	24000f20 	.word	0x24000f20

0800e49c <_getpid_r>:
 800e49c:	f7f6 b9ce 	b.w	800483c <_getpid>

0800e4a0 <sbrk_aligned>:
 800e4a0:	b570      	push	{r4, r5, r6, lr}
 800e4a2:	4e0e      	ldr	r6, [pc, #56]	; (800e4dc <sbrk_aligned+0x3c>)
 800e4a4:	460c      	mov	r4, r1
 800e4a6:	6831      	ldr	r1, [r6, #0]
 800e4a8:	4605      	mov	r5, r0
 800e4aa:	b911      	cbnz	r1, 800e4b2 <sbrk_aligned+0x12>
 800e4ac:	f000 f8bc 	bl	800e628 <_sbrk_r>
 800e4b0:	6030      	str	r0, [r6, #0]
 800e4b2:	4621      	mov	r1, r4
 800e4b4:	4628      	mov	r0, r5
 800e4b6:	f000 f8b7 	bl	800e628 <_sbrk_r>
 800e4ba:	1c43      	adds	r3, r0, #1
 800e4bc:	d00a      	beq.n	800e4d4 <sbrk_aligned+0x34>
 800e4be:	1cc4      	adds	r4, r0, #3
 800e4c0:	f024 0403 	bic.w	r4, r4, #3
 800e4c4:	42a0      	cmp	r0, r4
 800e4c6:	d007      	beq.n	800e4d8 <sbrk_aligned+0x38>
 800e4c8:	1a21      	subs	r1, r4, r0
 800e4ca:	4628      	mov	r0, r5
 800e4cc:	f000 f8ac 	bl	800e628 <_sbrk_r>
 800e4d0:	3001      	adds	r0, #1
 800e4d2:	d101      	bne.n	800e4d8 <sbrk_aligned+0x38>
 800e4d4:	f04f 34ff 	mov.w	r4, #4294967295
 800e4d8:	4620      	mov	r0, r4
 800e4da:	bd70      	pop	{r4, r5, r6, pc}
 800e4dc:	24000f1c 	.word	0x24000f1c

0800e4e0 <_malloc_r>:
 800e4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4e4:	1ccd      	adds	r5, r1, #3
 800e4e6:	f025 0503 	bic.w	r5, r5, #3
 800e4ea:	3508      	adds	r5, #8
 800e4ec:	2d0c      	cmp	r5, #12
 800e4ee:	bf38      	it	cc
 800e4f0:	250c      	movcc	r5, #12
 800e4f2:	2d00      	cmp	r5, #0
 800e4f4:	4607      	mov	r7, r0
 800e4f6:	db01      	blt.n	800e4fc <_malloc_r+0x1c>
 800e4f8:	42a9      	cmp	r1, r5
 800e4fa:	d905      	bls.n	800e508 <_malloc_r+0x28>
 800e4fc:	230c      	movs	r3, #12
 800e4fe:	603b      	str	r3, [r7, #0]
 800e500:	2600      	movs	r6, #0
 800e502:	4630      	mov	r0, r6
 800e504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e508:	4e2e      	ldr	r6, [pc, #184]	; (800e5c4 <_malloc_r+0xe4>)
 800e50a:	f000 f89d 	bl	800e648 <__malloc_lock>
 800e50e:	6833      	ldr	r3, [r6, #0]
 800e510:	461c      	mov	r4, r3
 800e512:	bb34      	cbnz	r4, 800e562 <_malloc_r+0x82>
 800e514:	4629      	mov	r1, r5
 800e516:	4638      	mov	r0, r7
 800e518:	f7ff ffc2 	bl	800e4a0 <sbrk_aligned>
 800e51c:	1c43      	adds	r3, r0, #1
 800e51e:	4604      	mov	r4, r0
 800e520:	d14d      	bne.n	800e5be <_malloc_r+0xde>
 800e522:	6834      	ldr	r4, [r6, #0]
 800e524:	4626      	mov	r6, r4
 800e526:	2e00      	cmp	r6, #0
 800e528:	d140      	bne.n	800e5ac <_malloc_r+0xcc>
 800e52a:	6823      	ldr	r3, [r4, #0]
 800e52c:	4631      	mov	r1, r6
 800e52e:	4638      	mov	r0, r7
 800e530:	eb04 0803 	add.w	r8, r4, r3
 800e534:	f000 f878 	bl	800e628 <_sbrk_r>
 800e538:	4580      	cmp	r8, r0
 800e53a:	d13a      	bne.n	800e5b2 <_malloc_r+0xd2>
 800e53c:	6821      	ldr	r1, [r4, #0]
 800e53e:	3503      	adds	r5, #3
 800e540:	1a6d      	subs	r5, r5, r1
 800e542:	f025 0503 	bic.w	r5, r5, #3
 800e546:	3508      	adds	r5, #8
 800e548:	2d0c      	cmp	r5, #12
 800e54a:	bf38      	it	cc
 800e54c:	250c      	movcc	r5, #12
 800e54e:	4629      	mov	r1, r5
 800e550:	4638      	mov	r0, r7
 800e552:	f7ff ffa5 	bl	800e4a0 <sbrk_aligned>
 800e556:	3001      	adds	r0, #1
 800e558:	d02b      	beq.n	800e5b2 <_malloc_r+0xd2>
 800e55a:	6823      	ldr	r3, [r4, #0]
 800e55c:	442b      	add	r3, r5
 800e55e:	6023      	str	r3, [r4, #0]
 800e560:	e00e      	b.n	800e580 <_malloc_r+0xa0>
 800e562:	6822      	ldr	r2, [r4, #0]
 800e564:	1b52      	subs	r2, r2, r5
 800e566:	d41e      	bmi.n	800e5a6 <_malloc_r+0xc6>
 800e568:	2a0b      	cmp	r2, #11
 800e56a:	d916      	bls.n	800e59a <_malloc_r+0xba>
 800e56c:	1961      	adds	r1, r4, r5
 800e56e:	42a3      	cmp	r3, r4
 800e570:	6025      	str	r5, [r4, #0]
 800e572:	bf18      	it	ne
 800e574:	6059      	strne	r1, [r3, #4]
 800e576:	6863      	ldr	r3, [r4, #4]
 800e578:	bf08      	it	eq
 800e57a:	6031      	streq	r1, [r6, #0]
 800e57c:	5162      	str	r2, [r4, r5]
 800e57e:	604b      	str	r3, [r1, #4]
 800e580:	4638      	mov	r0, r7
 800e582:	f104 060b 	add.w	r6, r4, #11
 800e586:	f000 f865 	bl	800e654 <__malloc_unlock>
 800e58a:	f026 0607 	bic.w	r6, r6, #7
 800e58e:	1d23      	adds	r3, r4, #4
 800e590:	1af2      	subs	r2, r6, r3
 800e592:	d0b6      	beq.n	800e502 <_malloc_r+0x22>
 800e594:	1b9b      	subs	r3, r3, r6
 800e596:	50a3      	str	r3, [r4, r2]
 800e598:	e7b3      	b.n	800e502 <_malloc_r+0x22>
 800e59a:	6862      	ldr	r2, [r4, #4]
 800e59c:	42a3      	cmp	r3, r4
 800e59e:	bf0c      	ite	eq
 800e5a0:	6032      	streq	r2, [r6, #0]
 800e5a2:	605a      	strne	r2, [r3, #4]
 800e5a4:	e7ec      	b.n	800e580 <_malloc_r+0xa0>
 800e5a6:	4623      	mov	r3, r4
 800e5a8:	6864      	ldr	r4, [r4, #4]
 800e5aa:	e7b2      	b.n	800e512 <_malloc_r+0x32>
 800e5ac:	4634      	mov	r4, r6
 800e5ae:	6876      	ldr	r6, [r6, #4]
 800e5b0:	e7b9      	b.n	800e526 <_malloc_r+0x46>
 800e5b2:	230c      	movs	r3, #12
 800e5b4:	603b      	str	r3, [r7, #0]
 800e5b6:	4638      	mov	r0, r7
 800e5b8:	f000 f84c 	bl	800e654 <__malloc_unlock>
 800e5bc:	e7a1      	b.n	800e502 <_malloc_r+0x22>
 800e5be:	6025      	str	r5, [r4, #0]
 800e5c0:	e7de      	b.n	800e580 <_malloc_r+0xa0>
 800e5c2:	bf00      	nop
 800e5c4:	24000f18 	.word	0x24000f18

0800e5c8 <_realloc_r>:
 800e5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5cc:	4680      	mov	r8, r0
 800e5ce:	4614      	mov	r4, r2
 800e5d0:	460e      	mov	r6, r1
 800e5d2:	b921      	cbnz	r1, 800e5de <_realloc_r+0x16>
 800e5d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d8:	4611      	mov	r1, r2
 800e5da:	f7ff bf81 	b.w	800e4e0 <_malloc_r>
 800e5de:	b92a      	cbnz	r2, 800e5ec <_realloc_r+0x24>
 800e5e0:	f000 f83e 	bl	800e660 <_free_r>
 800e5e4:	4625      	mov	r5, r4
 800e5e6:	4628      	mov	r0, r5
 800e5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5ec:	f000 f884 	bl	800e6f8 <_malloc_usable_size_r>
 800e5f0:	4284      	cmp	r4, r0
 800e5f2:	4607      	mov	r7, r0
 800e5f4:	d802      	bhi.n	800e5fc <_realloc_r+0x34>
 800e5f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e5fa:	d812      	bhi.n	800e622 <_realloc_r+0x5a>
 800e5fc:	4621      	mov	r1, r4
 800e5fe:	4640      	mov	r0, r8
 800e600:	f7ff ff6e 	bl	800e4e0 <_malloc_r>
 800e604:	4605      	mov	r5, r0
 800e606:	2800      	cmp	r0, #0
 800e608:	d0ed      	beq.n	800e5e6 <_realloc_r+0x1e>
 800e60a:	42bc      	cmp	r4, r7
 800e60c:	4622      	mov	r2, r4
 800e60e:	4631      	mov	r1, r6
 800e610:	bf28      	it	cs
 800e612:	463a      	movcs	r2, r7
 800e614:	f7ff fee2 	bl	800e3dc <memcpy>
 800e618:	4631      	mov	r1, r6
 800e61a:	4640      	mov	r0, r8
 800e61c:	f000 f820 	bl	800e660 <_free_r>
 800e620:	e7e1      	b.n	800e5e6 <_realloc_r+0x1e>
 800e622:	4635      	mov	r5, r6
 800e624:	e7df      	b.n	800e5e6 <_realloc_r+0x1e>
	...

0800e628 <_sbrk_r>:
 800e628:	b538      	push	{r3, r4, r5, lr}
 800e62a:	4d06      	ldr	r5, [pc, #24]	; (800e644 <_sbrk_r+0x1c>)
 800e62c:	2300      	movs	r3, #0
 800e62e:	4604      	mov	r4, r0
 800e630:	4608      	mov	r0, r1
 800e632:	602b      	str	r3, [r5, #0]
 800e634:	f7f6 f924 	bl	8004880 <_sbrk>
 800e638:	1c43      	adds	r3, r0, #1
 800e63a:	d102      	bne.n	800e642 <_sbrk_r+0x1a>
 800e63c:	682b      	ldr	r3, [r5, #0]
 800e63e:	b103      	cbz	r3, 800e642 <_sbrk_r+0x1a>
 800e640:	6023      	str	r3, [r4, #0]
 800e642:	bd38      	pop	{r3, r4, r5, pc}
 800e644:	24000f20 	.word	0x24000f20

0800e648 <__malloc_lock>:
 800e648:	4801      	ldr	r0, [pc, #4]	; (800e650 <__malloc_lock+0x8>)
 800e64a:	f000 b85d 	b.w	800e708 <__retarget_lock_acquire_recursive>
 800e64e:	bf00      	nop
 800e650:	24000f24 	.word	0x24000f24

0800e654 <__malloc_unlock>:
 800e654:	4801      	ldr	r0, [pc, #4]	; (800e65c <__malloc_unlock+0x8>)
 800e656:	f000 b858 	b.w	800e70a <__retarget_lock_release_recursive>
 800e65a:	bf00      	nop
 800e65c:	24000f24 	.word	0x24000f24

0800e660 <_free_r>:
 800e660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e662:	2900      	cmp	r1, #0
 800e664:	d044      	beq.n	800e6f0 <_free_r+0x90>
 800e666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e66a:	9001      	str	r0, [sp, #4]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	f1a1 0404 	sub.w	r4, r1, #4
 800e672:	bfb8      	it	lt
 800e674:	18e4      	addlt	r4, r4, r3
 800e676:	f7ff ffe7 	bl	800e648 <__malloc_lock>
 800e67a:	4a1e      	ldr	r2, [pc, #120]	; (800e6f4 <_free_r+0x94>)
 800e67c:	9801      	ldr	r0, [sp, #4]
 800e67e:	6813      	ldr	r3, [r2, #0]
 800e680:	b933      	cbnz	r3, 800e690 <_free_r+0x30>
 800e682:	6063      	str	r3, [r4, #4]
 800e684:	6014      	str	r4, [r2, #0]
 800e686:	b003      	add	sp, #12
 800e688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e68c:	f7ff bfe2 	b.w	800e654 <__malloc_unlock>
 800e690:	42a3      	cmp	r3, r4
 800e692:	d908      	bls.n	800e6a6 <_free_r+0x46>
 800e694:	6825      	ldr	r5, [r4, #0]
 800e696:	1961      	adds	r1, r4, r5
 800e698:	428b      	cmp	r3, r1
 800e69a:	bf01      	itttt	eq
 800e69c:	6819      	ldreq	r1, [r3, #0]
 800e69e:	685b      	ldreq	r3, [r3, #4]
 800e6a0:	1949      	addeq	r1, r1, r5
 800e6a2:	6021      	streq	r1, [r4, #0]
 800e6a4:	e7ed      	b.n	800e682 <_free_r+0x22>
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	685b      	ldr	r3, [r3, #4]
 800e6aa:	b10b      	cbz	r3, 800e6b0 <_free_r+0x50>
 800e6ac:	42a3      	cmp	r3, r4
 800e6ae:	d9fa      	bls.n	800e6a6 <_free_r+0x46>
 800e6b0:	6811      	ldr	r1, [r2, #0]
 800e6b2:	1855      	adds	r5, r2, r1
 800e6b4:	42a5      	cmp	r5, r4
 800e6b6:	d10b      	bne.n	800e6d0 <_free_r+0x70>
 800e6b8:	6824      	ldr	r4, [r4, #0]
 800e6ba:	4421      	add	r1, r4
 800e6bc:	1854      	adds	r4, r2, r1
 800e6be:	42a3      	cmp	r3, r4
 800e6c0:	6011      	str	r1, [r2, #0]
 800e6c2:	d1e0      	bne.n	800e686 <_free_r+0x26>
 800e6c4:	681c      	ldr	r4, [r3, #0]
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	6053      	str	r3, [r2, #4]
 800e6ca:	4421      	add	r1, r4
 800e6cc:	6011      	str	r1, [r2, #0]
 800e6ce:	e7da      	b.n	800e686 <_free_r+0x26>
 800e6d0:	d902      	bls.n	800e6d8 <_free_r+0x78>
 800e6d2:	230c      	movs	r3, #12
 800e6d4:	6003      	str	r3, [r0, #0]
 800e6d6:	e7d6      	b.n	800e686 <_free_r+0x26>
 800e6d8:	6825      	ldr	r5, [r4, #0]
 800e6da:	1961      	adds	r1, r4, r5
 800e6dc:	428b      	cmp	r3, r1
 800e6de:	bf04      	itt	eq
 800e6e0:	6819      	ldreq	r1, [r3, #0]
 800e6e2:	685b      	ldreq	r3, [r3, #4]
 800e6e4:	6063      	str	r3, [r4, #4]
 800e6e6:	bf04      	itt	eq
 800e6e8:	1949      	addeq	r1, r1, r5
 800e6ea:	6021      	streq	r1, [r4, #0]
 800e6ec:	6054      	str	r4, [r2, #4]
 800e6ee:	e7ca      	b.n	800e686 <_free_r+0x26>
 800e6f0:	b003      	add	sp, #12
 800e6f2:	bd30      	pop	{r4, r5, pc}
 800e6f4:	24000f18 	.word	0x24000f18

0800e6f8 <_malloc_usable_size_r>:
 800e6f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6fc:	1f18      	subs	r0, r3, #4
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	bfbc      	itt	lt
 800e702:	580b      	ldrlt	r3, [r1, r0]
 800e704:	18c0      	addlt	r0, r0, r3
 800e706:	4770      	bx	lr

0800e708 <__retarget_lock_acquire_recursive>:
 800e708:	4770      	bx	lr

0800e70a <__retarget_lock_release_recursive>:
 800e70a:	4770      	bx	lr

0800e70c <_init>:
 800e70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e70e:	bf00      	nop
 800e710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e712:	bc08      	pop	{r3}
 800e714:	469e      	mov	lr, r3
 800e716:	4770      	bx	lr

0800e718 <_fini>:
 800e718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e71a:	bf00      	nop
 800e71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e71e:	bc08      	pop	{r3}
 800e720:	469e      	mov	lr, r3
 800e722:	4770      	bx	lr
