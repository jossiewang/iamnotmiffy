
0527_peanuts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1b8  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  0800e484  0800e484  0001e484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e784  0800e784  0001e784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800e78c  0800e78c  0001e78c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e794  0800e794  0001e794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800e798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000db8  24000078  0800e810  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000e30  0800e810  00020e30  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f4ad  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003361  00000000  00000000  0003f553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001460  00000000  00000000  000428b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001370  00000000  00000000  00043d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034ec6  00000000  00000000  00045088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a7f3  00000000  00000000  00079f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001533c3  00000000  00000000  00094741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e7b04  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005be4  00000000  00000000  001e7b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000078 	.word	0x24000078
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800e46c 	.word	0x0800e46c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400007c 	.word	0x2400007c
 8000308:	0800e46c 	.word	0x0800e46c

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295
 800032c:	f04f 30ff 	movne.w	r0, #4294967295
 8000330:	f000 b974 	b.w	800061c <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9d08      	ldr	r5, [sp, #32]
 8000352:	4604      	mov	r4, r0
 8000354:	468e      	mov	lr, r1
 8000356:	2b00      	cmp	r3, #0
 8000358:	d14d      	bne.n	80003f6 <__udivmoddi4+0xaa>
 800035a:	428a      	cmp	r2, r1
 800035c:	4694      	mov	ip, r2
 800035e:	d969      	bls.n	8000434 <__udivmoddi4+0xe8>
 8000360:	fab2 f282 	clz	r2, r2
 8000364:	b152      	cbz	r2, 800037c <__udivmoddi4+0x30>
 8000366:	fa01 f302 	lsl.w	r3, r1, r2
 800036a:	f1c2 0120 	rsb	r1, r2, #32
 800036e:	fa20 f101 	lsr.w	r1, r0, r1
 8000372:	fa0c fc02 	lsl.w	ip, ip, r2
 8000376:	ea41 0e03 	orr.w	lr, r1, r3
 800037a:	4094      	lsls	r4, r2
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	0c21      	lsrs	r1, r4, #16
 8000382:	fbbe f6f8 	udiv	r6, lr, r8
 8000386:	fa1f f78c 	uxth.w	r7, ip
 800038a:	fb08 e316 	mls	r3, r8, r6, lr
 800038e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000392:	fb06 f107 	mul.w	r1, r6, r7
 8000396:	4299      	cmp	r1, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x64>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 811f 	bcs.w	80005e4 <__udivmoddi4+0x298>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 811c 	bls.w	80005e4 <__udivmoddi4+0x298>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	4463      	add	r3, ip
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 f707 	mul.w	r7, r0, r7
 80003c4:	42a7      	cmp	r7, r4
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x92>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	f080 810a 	bcs.w	80005e8 <__udivmoddi4+0x29c>
 80003d4:	42a7      	cmp	r7, r4
 80003d6:	f240 8107 	bls.w	80005e8 <__udivmoddi4+0x29c>
 80003da:	4464      	add	r4, ip
 80003dc:	3802      	subs	r0, #2
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	1be4      	subs	r4, r4, r7
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa4>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0xc2>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80ef 	beq.w	80005de <__udivmoddi4+0x292>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x160>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0xd4>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80f9 	bhi.w	8000612 <__udivmoddi4+0x2c6>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0303 	sbc.w	r3, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	469e      	mov	lr, r3
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0e0      	beq.n	80003f0 <__udivmoddi4+0xa4>
 800042e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000432:	e7dd      	b.n	80003f0 <__udivmoddi4+0xa4>
 8000434:	b902      	cbnz	r2, 8000438 <__udivmoddi4+0xec>
 8000436:	deff      	udf	#255	; 0xff
 8000438:	fab2 f282 	clz	r2, r2
 800043c:	2a00      	cmp	r2, #0
 800043e:	f040 8092 	bne.w	8000566 <__udivmoddi4+0x21a>
 8000442:	eba1 010c 	sub.w	r1, r1, ip
 8000446:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	2601      	movs	r6, #1
 8000450:	0c20      	lsrs	r0, r4, #16
 8000452:	fbb1 f3f7 	udiv	r3, r1, r7
 8000456:	fb07 1113 	mls	r1, r7, r3, r1
 800045a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800045e:	fb0e f003 	mul.w	r0, lr, r3
 8000462:	4288      	cmp	r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x12c>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f103 38ff 	add.w	r8, r3, #4294967295
 800046e:	d202      	bcs.n	8000476 <__udivmoddi4+0x12a>
 8000470:	4288      	cmp	r0, r1
 8000472:	f200 80cb 	bhi.w	800060c <__udivmoddi4+0x2c0>
 8000476:	4643      	mov	r3, r8
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1110 	mls	r1, r7, r0, r1
 8000484:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000488:	fb0e fe00 	mul.w	lr, lr, r0
 800048c:	45a6      	cmp	lr, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x156>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f100 31ff 	add.w	r1, r0, #4294967295
 8000498:	d202      	bcs.n	80004a0 <__udivmoddi4+0x154>
 800049a:	45a6      	cmp	lr, r4
 800049c:	f200 80bb 	bhi.w	8000616 <__udivmoddi4+0x2ca>
 80004a0:	4608      	mov	r0, r1
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004aa:	e79c      	b.n	80003e6 <__udivmoddi4+0x9a>
 80004ac:	f1c6 0720 	rsb	r7, r6, #32
 80004b0:	40b3      	lsls	r3, r6
 80004b2:	fa22 fc07 	lsr.w	ip, r2, r7
 80004b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ba:	fa20 f407 	lsr.w	r4, r0, r7
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	431c      	orrs	r4, r3
 80004c4:	40f9      	lsrs	r1, r7
 80004c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ca:	fa00 f306 	lsl.w	r3, r0, r6
 80004ce:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d2:	0c20      	lsrs	r0, r4, #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fb09 1118 	mls	r1, r9, r8, r1
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	fb08 f00e 	mul.w	r0, r8, lr
 80004e4:	4288      	cmp	r0, r1
 80004e6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ea:	d90b      	bls.n	8000504 <__udivmoddi4+0x1b8>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f4:	f080 8088 	bcs.w	8000608 <__udivmoddi4+0x2bc>
 80004f8:	4288      	cmp	r0, r1
 80004fa:	f240 8085 	bls.w	8000608 <__udivmoddi4+0x2bc>
 80004fe:	f1a8 0802 	sub.w	r8, r8, #2
 8000502:	4461      	add	r1, ip
 8000504:	1a09      	subs	r1, r1, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb1 f0f9 	udiv	r0, r1, r9
 800050c:	fb09 1110 	mls	r1, r9, r0, r1
 8000510:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000514:	fb00 fe0e 	mul.w	lr, r0, lr
 8000518:	458e      	cmp	lr, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x1e2>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f100 34ff 	add.w	r4, r0, #4294967295
 8000524:	d26c      	bcs.n	8000600 <__udivmoddi4+0x2b4>
 8000526:	458e      	cmp	lr, r1
 8000528:	d96a      	bls.n	8000600 <__udivmoddi4+0x2b4>
 800052a:	3802      	subs	r0, #2
 800052c:	4461      	add	r1, ip
 800052e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000532:	fba0 9402 	umull	r9, r4, r0, r2
 8000536:	eba1 010e 	sub.w	r1, r1, lr
 800053a:	42a1      	cmp	r1, r4
 800053c:	46c8      	mov	r8, r9
 800053e:	46a6      	mov	lr, r4
 8000540:	d356      	bcc.n	80005f0 <__udivmoddi4+0x2a4>
 8000542:	d053      	beq.n	80005ec <__udivmoddi4+0x2a0>
 8000544:	b15d      	cbz	r5, 800055e <__udivmoddi4+0x212>
 8000546:	ebb3 0208 	subs.w	r2, r3, r8
 800054a:	eb61 010e 	sbc.w	r1, r1, lr
 800054e:	fa01 f707 	lsl.w	r7, r1, r7
 8000552:	fa22 f306 	lsr.w	r3, r2, r6
 8000556:	40f1      	lsrs	r1, r6
 8000558:	431f      	orrs	r7, r3
 800055a:	e9c5 7100 	strd	r7, r1, [r5]
 800055e:	2600      	movs	r6, #0
 8000560:	4631      	mov	r1, r6
 8000562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000566:	f1c2 0320 	rsb	r3, r2, #32
 800056a:	40d8      	lsrs	r0, r3
 800056c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000570:	fa21 f303 	lsr.w	r3, r1, r3
 8000574:	4091      	lsls	r1, r2
 8000576:	4301      	orrs	r1, r0
 8000578:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800057c:	fa1f fe8c 	uxth.w	lr, ip
 8000580:	fbb3 f0f7 	udiv	r0, r3, r7
 8000584:	fb07 3610 	mls	r6, r7, r0, r3
 8000588:	0c0b      	lsrs	r3, r1, #16
 800058a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800058e:	fb00 f60e 	mul.w	r6, r0, lr
 8000592:	429e      	cmp	r6, r3
 8000594:	fa04 f402 	lsl.w	r4, r4, r2
 8000598:	d908      	bls.n	80005ac <__udivmoddi4+0x260>
 800059a:	eb1c 0303 	adds.w	r3, ip, r3
 800059e:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a2:	d22f      	bcs.n	8000604 <__udivmoddi4+0x2b8>
 80005a4:	429e      	cmp	r6, r3
 80005a6:	d92d      	bls.n	8000604 <__udivmoddi4+0x2b8>
 80005a8:	3802      	subs	r0, #2
 80005aa:	4463      	add	r3, ip
 80005ac:	1b9b      	subs	r3, r3, r6
 80005ae:	b289      	uxth	r1, r1
 80005b0:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b4:	fb07 3316 	mls	r3, r7, r6, r3
 80005b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005bc:	fb06 f30e 	mul.w	r3, r6, lr
 80005c0:	428b      	cmp	r3, r1
 80005c2:	d908      	bls.n	80005d6 <__udivmoddi4+0x28a>
 80005c4:	eb1c 0101 	adds.w	r1, ip, r1
 80005c8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005cc:	d216      	bcs.n	80005fc <__udivmoddi4+0x2b0>
 80005ce:	428b      	cmp	r3, r1
 80005d0:	d914      	bls.n	80005fc <__udivmoddi4+0x2b0>
 80005d2:	3e02      	subs	r6, #2
 80005d4:	4461      	add	r1, ip
 80005d6:	1ac9      	subs	r1, r1, r3
 80005d8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005dc:	e738      	b.n	8000450 <__udivmoddi4+0x104>
 80005de:	462e      	mov	r6, r5
 80005e0:	4628      	mov	r0, r5
 80005e2:	e705      	b.n	80003f0 <__udivmoddi4+0xa4>
 80005e4:	4606      	mov	r6, r0
 80005e6:	e6e3      	b.n	80003b0 <__udivmoddi4+0x64>
 80005e8:	4618      	mov	r0, r3
 80005ea:	e6f8      	b.n	80003de <__udivmoddi4+0x92>
 80005ec:	454b      	cmp	r3, r9
 80005ee:	d2a9      	bcs.n	8000544 <__udivmoddi4+0x1f8>
 80005f0:	ebb9 0802 	subs.w	r8, r9, r2
 80005f4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005f8:	3801      	subs	r0, #1
 80005fa:	e7a3      	b.n	8000544 <__udivmoddi4+0x1f8>
 80005fc:	4646      	mov	r6, r8
 80005fe:	e7ea      	b.n	80005d6 <__udivmoddi4+0x28a>
 8000600:	4620      	mov	r0, r4
 8000602:	e794      	b.n	800052e <__udivmoddi4+0x1e2>
 8000604:	4640      	mov	r0, r8
 8000606:	e7d1      	b.n	80005ac <__udivmoddi4+0x260>
 8000608:	46d0      	mov	r8, sl
 800060a:	e77b      	b.n	8000504 <__udivmoddi4+0x1b8>
 800060c:	3b02      	subs	r3, #2
 800060e:	4461      	add	r1, ip
 8000610:	e732      	b.n	8000478 <__udivmoddi4+0x12c>
 8000612:	4630      	mov	r0, r6
 8000614:	e709      	b.n	800042a <__udivmoddi4+0xde>
 8000616:	4464      	add	r4, ip
 8000618:	3802      	subs	r0, #2
 800061a:	e742      	b.n	80004a2 <__udivmoddi4+0x156>

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	0a5a      	lsrs	r2, r3, #9
 8000630:	490f      	ldr	r1, [pc, #60]	; (8000670 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000632:	fba1 1202 	umull	r1, r2, r1, r2
 8000636:	09d2      	lsrs	r2, r2, #7
 8000638:	490e      	ldr	r1, [pc, #56]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063a:	fb01 f202 	mul.w	r2, r1, r2
 800063e:	1a9b      	subs	r3, r3, r2
 8000640:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	0a5b      	lsrs	r3, r3, #9
 8000648:	4a09      	ldr	r2, [pc, #36]	; (8000670 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064a:	fba2 2303 	umull	r2, r3, r2, r3
 800064e:	09db      	lsrs	r3, r3, #7
 8000650:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	441a      	add	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	68fa      	ldr	r2, [r7, #12]
 8000662:	601a      	str	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	00044b83 	.word	0x00044b83
 8000674:	3b9aca00 	.word	0x3b9aca00

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f003 fd5e 	bl	800413c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f84a 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f000 fb76 	bl	8000d74 <MX_GPIO_Init>
  MX_DMA_Init();
 8000688:	f000 fb4c 	bl	8000d24 <MX_DMA_Init>
  MX_TIM2_Init();
 800068c:	f000 f910 	bl	80008b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000690:	f000 f972 	bl	8000978 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000694:	f000 f9c0 	bl	8000a18 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000698:	f000 fa14 	bl	8000ac4 <MX_TIM8_Init>
  MX_TIM23_Init();
 800069c:	f000 faa0 	bl	8000be0 <MX_TIM23_Init>
  MX_USART3_UART_Init();
 80006a0:	f000 faf4 	bl	8000c8c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80006a4:	f000 f8aa 	bl	80007fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim3);
 80006a8:	4815      	ldr	r0, [pc, #84]	; (8000700 <main+0x88>)
 80006aa:	f009 ff89 	bl	800a5c0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Encoder_Start(TIM_ENC_MF, TIM_CHANNEL_1);
 80006ae:	2100      	movs	r1, #0
 80006b0:	4814      	ldr	r0, [pc, #80]	; (8000704 <main+0x8c>)
 80006b2:	f00a fa25 	bl	800ab00 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_MF, TIM_CHANNEL_2);
 80006b6:	2104      	movs	r1, #4
 80006b8:	4812      	ldr	r0, [pc, #72]	; (8000704 <main+0x8c>)
 80006ba:	f00a fa21 	bl	800ab00 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_ML, TIM_CHANNEL_1);
 80006be:	2100      	movs	r1, #0
 80006c0:	4811      	ldr	r0, [pc, #68]	; (8000708 <main+0x90>)
 80006c2:	f00a fa1d 	bl	800ab00 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_ML, TIM_CHANNEL_2);
 80006c6:	2104      	movs	r1, #4
 80006c8:	480f      	ldr	r0, [pc, #60]	; (8000708 <main+0x90>)
 80006ca:	f00a fa19 	bl	800ab00 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_MR, TIM_CHANNEL_1);
 80006ce:	2100      	movs	r1, #0
 80006d0:	480e      	ldr	r0, [pc, #56]	; (800070c <main+0x94>)
 80006d2:	f00a fa15 	bl	800ab00 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_MR, TIM_CHANNEL_2);
 80006d6:	2104      	movs	r1, #4
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <main+0x94>)
 80006da:	f00a fa11 	bl	800ab00 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(TIM_PWM_MF, CH_PWM_MF);
 80006de:	2100      	movs	r1, #0
 80006e0:	480b      	ldr	r0, [pc, #44]	; (8000710 <main+0x98>)
 80006e2:	f00a f84b 	bl	800a77c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(TIM_PWM_ML, CH_PWM_ML);
 80006e6:	210c      	movs	r1, #12
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <main+0x98>)
 80006ea:	f00a f847 	bl	800a77c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(TIM_PWM_MR, CH_PWM_MR);
 80006ee:	2108      	movs	r1, #8
 80006f0:	4808      	ldr	r0, [pc, #32]	; (8000714 <main+0x9c>)
 80006f2:	f00a f843 	bl	800a77c <HAL_TIM_PWM_Start>
  	setup();
 80006f6:	f002 fa49 	bl	8002b8c <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 80006fa:	f002 fa5d 	bl	8002bb8 <loop>
 80006fe:	e7fc      	b.n	80006fa <main+0x82>
 8000700:	2400012c 	.word	0x2400012c
 8000704:	24000094 	.word	0x24000094
 8000708:	24000178 	.word	0x24000178
 800070c:	24000210 	.word	0x24000210
 8000710:	240000e0 	.word	0x240000e0
 8000714:	240001c4 	.word	0x240001c4

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b09c      	sub	sp, #112	; 0x70
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000722:	224c      	movs	r2, #76	; 0x4c
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f00d fd16 	bl	800e158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2220      	movs	r2, #32
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f00d fd10 	bl	800e158 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000738:	2002      	movs	r0, #2
 800073a:	f007 f987 	bl	8007a4c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <SystemClock_Config+0xe0>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800074a:	4a2b      	ldr	r2, [pc, #172]	; (80007f8 <SystemClock_Config+0xe0>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6193      	str	r3, [r2, #24]
 8000752:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <SystemClock_Config+0xe0>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800075e:	bf00      	nop
 8000760:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <SystemClock_Config+0xe0>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800076c:	d1f8      	bne.n	8000760 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076e:	2302      	movs	r3, #2
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000772:	2301      	movs	r3, #1
 8000774:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000776:	2340      	movs	r3, #64	; 0x40
 8000778:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077e:	2300      	movs	r3, #0
 8000780:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000782:	2304      	movs	r3, #4
 8000784:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000786:	2315      	movs	r3, #21
 8000788:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800078e:	2302      	movs	r3, #2
 8000790:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000796:	230c      	movs	r3, #12
 8000798:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800079a:	2300      	movs	r3, #0
 800079c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a6:	4618      	mov	r0, r3
 80007a8:	f007 f98a 	bl	8007ac0 <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007b2:	f000 fb99 	bl	8000ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	233f      	movs	r3, #63	; 0x3f
 80007b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2303      	movs	r3, #3
 80007bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80007be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007c4:	2308      	movs	r3, #8
 80007c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007c8:	2340      	movs	r3, #64	; 0x40
 80007ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007cc:	2340      	movs	r3, #64	; 0x40
 80007ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007d6:	2340      	movs	r3, #64	; 0x40
 80007d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2102      	movs	r1, #2
 80007de:	4618      	mov	r0, r3
 80007e0:	f007 fd48 	bl	8008274 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80007ea:	f000 fb7d 	bl	8000ee8 <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3770      	adds	r7, #112	; 0x70
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	58024800 	.word	0x58024800

080007fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	; 0x30
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	2224      	movs	r2, #36	; 0x24
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f00d fca4 	bl	800e158 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000810:	463b      	mov	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800081a:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <MX_TIM1_Init+0xac>)
 800081c:	4a23      	ldr	r2, [pc, #140]	; (80008ac <MX_TIM1_Init+0xb0>)
 800081e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000820:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <MX_TIM1_Init+0xac>)
 8000822:	2200      	movs	r2, #0
 8000824:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <MX_TIM1_Init+0xac>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_TIM1_Init+0xac>)
 800082e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000832:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <MX_TIM1_Init+0xac>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800083a:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_TIM1_Init+0xac>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <MX_TIM1_Init+0xac>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000846:	2303      	movs	r3, #3
 8000848:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800084e:	2301      	movs	r3, #1
 8000850:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800085e:	2301      	movs	r3, #1
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	4619      	mov	r1, r3
 8000870:	480d      	ldr	r0, [pc, #52]	; (80008a8 <MX_TIM1_Init+0xac>)
 8000872:	f00a f89f 	bl	800a9b4 <HAL_TIM_Encoder_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800087c:	f000 fb34 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000880:	2300      	movs	r3, #0
 8000882:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800088c:	463b      	mov	r3, r7
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_TIM1_Init+0xac>)
 8000892:	f00b f957 	bl	800bb44 <HAL_TIMEx_MasterConfigSynchronization>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800089c:	f000 fb24 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3730      	adds	r7, #48	; 0x30
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	24000094 	.word	0x24000094
 80008ac:	40010000 	.word	0x40010000

080008b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c2:	463b      	mov	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
 80008d0:	615a      	str	r2, [r3, #20]
 80008d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d4:	4b27      	ldr	r3, [pc, #156]	; (8000974 <MX_TIM2_Init+0xc4>)
 80008d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80008dc:	4b25      	ldr	r3, [pc, #148]	; (8000974 <MX_TIM2_Init+0xc4>)
 80008de:	223f      	movs	r2, #63	; 0x3f
 80008e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e2:	4b24      	ldr	r3, [pc, #144]	; (8000974 <MX_TIM2_Init+0xc4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_TIM2_Init+0xc4>)
 80008ea:	2231      	movs	r2, #49	; 0x31
 80008ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_TIM2_Init+0xc4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_TIM2_Init+0xc4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008fa:	481e      	ldr	r0, [pc, #120]	; (8000974 <MX_TIM2_Init+0xc4>)
 80008fc:	f009 fee6 	bl	800a6cc <HAL_TIM_PWM_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000906:	f000 faef 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4816      	ldr	r0, [pc, #88]	; (8000974 <MX_TIM2_Init+0xc4>)
 800091a:	f00b f913 	bl	800bb44 <HAL_TIMEx_MasterConfigSynchronization>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000924:	f000 fae0 	bl	8000ee8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000928:	2360      	movs	r3, #96	; 0x60
 800092a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000938:	463b      	mov	r3, r7
 800093a:	2200      	movs	r2, #0
 800093c:	4619      	mov	r1, r3
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <MX_TIM2_Init+0xc4>)
 8000940:	f00a fa8c 	bl	800ae5c <HAL_TIM_PWM_ConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800094a:	f000 facd 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	220c      	movs	r2, #12
 8000952:	4619      	mov	r1, r3
 8000954:	4807      	ldr	r0, [pc, #28]	; (8000974 <MX_TIM2_Init+0xc4>)
 8000956:	f00a fa81 	bl	800ae5c <HAL_TIM_PWM_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000960:	f000 fac2 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000964:	4803      	ldr	r0, [pc, #12]	; (8000974 <MX_TIM2_Init+0xc4>)
 8000966:	f003 f935 	bl	8003bd4 <HAL_TIM_MspPostInit>

}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	; 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	240000e0 	.word	0x240000e0

08000978 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000996:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <MX_TIM3_Init+0x98>)
 8000998:	4a1e      	ldr	r2, [pc, #120]	; (8000a14 <MX_TIM3_Init+0x9c>)
 800099a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 800099c:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <MX_TIM3_Init+0x98>)
 800099e:	f240 3247 	movw	r2, #839	; 0x347
 80009a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_TIM3_Init+0x98>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <MX_TIM3_Init+0x98>)
 80009ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80009b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_TIM3_Init+0x98>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_TIM3_Init+0x98>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009be:	4814      	ldr	r0, [pc, #80]	; (8000a10 <MX_TIM3_Init+0x98>)
 80009c0:	f009 fda6 	bl	800a510 <HAL_TIM_Base_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80009ca:	f000 fa8d 	bl	8000ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	4619      	mov	r1, r3
 80009da:	480d      	ldr	r0, [pc, #52]	; (8000a10 <MX_TIM3_Init+0x98>)
 80009dc:	f00a fb52 	bl	800b084 <HAL_TIM_ConfigClockSource>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80009e6:	f000 fa7f 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	4619      	mov	r1, r3
 80009f6:	4806      	ldr	r0, [pc, #24]	; (8000a10 <MX_TIM3_Init+0x98>)
 80009f8:	f00b f8a4 	bl	800bb44 <HAL_TIMEx_MasterConfigSynchronization>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000a02:	f000 fa71 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	3720      	adds	r7, #32
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2400012c 	.word	0x2400012c
 8000a14:	40000400 	.word	0x40000400

08000a18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	2224      	movs	r2, #36	; 0x24
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f00d fb96 	bl	800e158 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_TIM4_Init+0xa4>)
 8000a38:	4a21      	ldr	r2, [pc, #132]	; (8000ac0 <MX_TIM4_Init+0xa8>)
 8000a3a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_TIM4_Init+0xa4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_TIM4_Init+0xa4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_TIM4_Init+0xa4>)
 8000a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a4e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_TIM4_Init+0xa4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_TIM4_Init+0xa4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a64:	2301      	movs	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a74:	2301      	movs	r3, #1
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_TIM4_Init+0xa4>)
 8000a88:	f009 ff94 	bl	800a9b4 <HAL_TIM_Encoder_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000a92:	f000 fa29 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a96:	2300      	movs	r3, #0
 8000a98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_TIM4_Init+0xa4>)
 8000aa4:	f00b f84e 	bl	800bb44 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000aae:	f000 fa1b 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3730      	adds	r7, #48	; 0x30
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	24000178 	.word	0x24000178
 8000ac0:	40000800 	.word	0x40000800

08000ac4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b098      	sub	sp, #96	; 0x60
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]
 8000ae6:	615a      	str	r2, [r3, #20]
 8000ae8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2234      	movs	r2, #52	; 0x34
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f00d fb31 	bl	800e158 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000af6:	4b38      	ldr	r3, [pc, #224]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000af8:	4a38      	ldr	r2, [pc, #224]	; (8000bdc <MX_TIM8_Init+0x118>)
 8000afa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 8000afc:	4b36      	ldr	r3, [pc, #216]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000afe:	223f      	movs	r2, #63	; 0x3f
 8000b00:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b02:	4b35      	ldr	r3, [pc, #212]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8000b08:	4b33      	ldr	r3, [pc, #204]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000b0a:	2231      	movs	r2, #49	; 0x31
 8000b0c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b32      	ldr	r3, [pc, #200]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b14:	4b30      	ldr	r3, [pc, #192]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b20:	482d      	ldr	r0, [pc, #180]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000b22:	f009 fdd3 	bl	800a6cc <HAL_TIM_PWM_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000b2c:	f000 f9dc 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b30:	2300      	movs	r3, #0
 8000b32:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b34:	2300      	movs	r3, #0
 8000b36:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b40:	4619      	mov	r1, r3
 8000b42:	4825      	ldr	r0, [pc, #148]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000b44:	f00a fffe 	bl	800bb44 <HAL_TIMEx_MasterConfigSynchronization>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8000b4e:	f000 f9cb 	bl	8000ee8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b52:	2360      	movs	r3, #96	; 0x60
 8000b54:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b72:	2208      	movs	r2, #8
 8000b74:	4619      	mov	r1, r3
 8000b76:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000b78:	f00a f970 	bl	800ae5c <HAL_TIM_PWM_ConfigChannel>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8000b82:	f000 f9b1 	bl	8000ee8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ba8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000bbc:	f00b f85e 	bl	800bc7c <HAL_TIMEx_ConfigBreakDeadTime>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8000bc6:	f000 f98f 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000bca:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <MX_TIM8_Init+0x114>)
 8000bcc:	f003 f802 	bl	8003bd4 <HAL_TIM_MspPostInit>

}
 8000bd0:	bf00      	nop
 8000bd2:	3760      	adds	r7, #96	; 0x60
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	240001c4 	.word	0x240001c4
 8000bdc:	40010400 	.word	0x40010400

08000be0 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	; 0x30
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	2224      	movs	r2, #36	; 0x24
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f00d fab2 	bl	800e158 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_TIM23_Init+0xa4>)
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <MX_TIM23_Init+0xa8>)
 8000c02:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_TIM23_Init+0xa4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_TIM23_Init+0xa4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_TIM23_Init+0xa4>)
 8000c12:	f04f 32ff 	mov.w	r2, #4294967295
 8000c16:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_TIM23_Init+0xa4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_TIM23_Init+0xa4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c24:	2303      	movs	r3, #3
 8000c26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_TIM23_Init+0xa4>)
 8000c50:	f009 feb0 	bl	800a9b4 <HAL_TIM_Encoder_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 8000c5a:	f000 f945 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8000c66:	463b      	mov	r3, r7
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <MX_TIM23_Init+0xa4>)
 8000c6c:	f00a ff6a 	bl	800bb44 <HAL_TIMEx_MasterConfigSynchronization>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 8000c76:	f000 f937 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	3730      	adds	r7, #48	; 0x30
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	24000210 	.word	0x24000210
 8000c88:	4000e000 	.word	0x4000e000

08000c8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c90:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000c92:	4a23      	ldr	r2, [pc, #140]	; (8000d20 <MX_USART3_UART_Init+0x94>)
 8000c94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000c98:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000c9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cd4:	4811      	ldr	r0, [pc, #68]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cd6:	f00b f88f 	bl	800bdf8 <HAL_UART_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ce0:	f000 f902 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	480d      	ldr	r0, [pc, #52]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000ce8:	f00d f918 	bl	800df1c <HAL_UARTEx_SetTxFifoThreshold>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cf2:	f000 f8f9 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4808      	ldr	r0, [pc, #32]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cfa:	f00d f94d 	bl	800df98 <HAL_UARTEx_SetRxFifoThreshold>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d04:	f000 f8f0 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000d0a:	f00d f8ce 	bl	800deaa <HAL_UARTEx_DisableFifoMode>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d14:	f000 f8e8 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2400025c 	.word	0x2400025c
 8000d20:	40004800 	.word	0x40004800

08000d24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_DMA_Init+0x4c>)
 8000d2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d30:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <MX_DMA_Init+0x4c>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <MX_DMA_Init+0x4c>)
 8000d3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	200b      	movs	r0, #11
 8000d4e:	f003 fb86 	bl	800445e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d52:	200b      	movs	r0, #11
 8000d54:	f003 fb9d 	bl	8004492 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	200c      	movs	r0, #12
 8000d5e:	f003 fb7e 	bl	800445e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d62:	200c      	movs	r0, #12
 8000d64:	f003 fb95 	bl	8004492 <HAL_NVIC_EnableIRQ>

}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	58024400 	.word	0x58024400

08000d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	; 0x30
 8000d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d8a:	4b39      	ldr	r3, [pc, #228]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d90:	4a37      	ldr	r2, [pc, #220]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000d92:	f043 0310 	orr.w	r3, r3, #16
 8000d96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9a:	4b35      	ldr	r3, [pc, #212]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da0:	f003 0310 	and.w	r3, r3, #16
 8000da4:	61bb      	str	r3, [r7, #24]
 8000da6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000da8:	4b31      	ldr	r3, [pc, #196]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dae:	4a30      	ldr	r2, [pc, #192]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000db0:	f043 0320 	orr.w	r3, r3, #32
 8000db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db8:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbe:	f003 0320 	and.w	r3, r3, #32
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dcc:	4a28      	ldr	r2, [pc, #160]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd6:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dea:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df4:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e08:	4a19      	ldr	r2, [pc, #100]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000e0a:	f043 0308 	orr.w	r3, r3, #8
 8000e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e18:	f003 0308 	and.w	r3, r3, #8
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e26:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_GPIO_Init+0xfc>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f249 51c0 	movw	r1, #38336	; 0x95c0
 8000e44:	480b      	ldr	r0, [pc, #44]	; (8000e74 <MX_GPIO_Init+0x100>)
 8000e46:	f006 fde7 	bl	8007a18 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8000e4a:	f249 53c0 	movw	r3, #38336	; 0x95c0
 8000e4e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e5c:	f107 031c 	add.w	r3, r7, #28
 8000e60:	4619      	mov	r1, r3
 8000e62:	4804      	ldr	r0, [pc, #16]	; (8000e74 <MX_GPIO_Init+0x100>)
 8000e64:	f006 fb2e 	bl	80074c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e68:	bf00      	nop
 8000e6a:	3730      	adds	r7, #48	; 0x30
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	58024400 	.word	0x58024400
 8000e74:	58021000 	.word	0x58021000

08000e78 <HAL_TIM_PeriodElapsedCallback>:
void inverse_kinematics_model();
void Encoder();
void PID_PWM();
void kinematics_model();

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d121      	bne.n	8000ece <HAL_TIM_PeriodElapsedCallback+0x56>
		loop();
 8000e8a:	f001 fe95 	bl	8002bb8 <loop>
		rVx++;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000e90:	ed93 7b00 	vldr	d7, [r3]
 8000e94:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e98:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000e9e:	ed83 7b00 	vstr	d7, [r3]
		rVy++;
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ea4:	ed93 7b00 	vldr	d7, [r3]
 8000ea8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000eac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000eb2:	ed83 7b00 	vstr	d7, [r3]
		rW++;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000eb8:	ed93 7b00 	vldr	d7, [r3]
 8000ebc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ec0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000ec6:	ed83 7b00 	vstr	d7, [r3]
		realspeed();
 8000eca:	f001 fe21 	bl	8002b10 <realspeed>
		//inverse_kinematics_model();
		//Encoder();
		//PID_PWM();
		//kinematics_model();
	}
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40000400 	.word	0x40000400
 8000edc:	240003f8 	.word	0x240003f8
 8000ee0:	24000400 	.word	0x24000400
 8000ee4:	24000408 	.word	0x24000408

08000ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eec:	b672      	cpsid	i
}
 8000eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <Error_Handler+0x8>

08000ef2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <_ZN3ros3MsgC1Ev+0x1c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	0800e734 	.word	0x0800e734

08000f34 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
      data()
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ffe8 	bl	8000f14 <_ZN3ros3MsgC1Ev>
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff ffcf 	bl	8000ef2 <_ZN3ros4TimeC1Ev>
    {
    }
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	0800e71c 	.word	0x0800e71c

08000f64 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6859      	ldr	r1, [r3, #4]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	b2ca      	uxtb	r2, r1
 8000f7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	0a19      	lsrs	r1, r3, #8
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	b2ca      	uxtb	r2, r1
 8000f90:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	0c19      	lsrs	r1, r3, #16
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	b2ca      	uxtb	r2, r1
 8000fa2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	0e19      	lsrs	r1, r3, #24
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3303      	adds	r3, #3
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	b2ca      	uxtb	r2, r1
 8000fb4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6899      	ldr	r1, [r3, #8]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	b2ca      	uxtb	r2, r1
 8000fc8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	0a19      	lsrs	r1, r3, #8
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	b2ca      	uxtb	r2, r1
 8000fda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	0c19      	lsrs	r1, r3, #16
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	4413      	add	r3, r2
 8000fea:	b2ca      	uxtb	r2, r1
 8000fec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	0e19      	lsrs	r1, r3, #24
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	3303      	adds	r3, #3
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	b2ca      	uxtb	r2, r1
 8000ffe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3304      	adds	r3, #4
 8001004:	60fb      	str	r3, [r7, #12]
      return offset;
 8001006:	68fb      	ldr	r3, [r7, #12]
    }
 8001008:	4618      	mov	r0, r3
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	4413      	add	r3, r2
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3301      	adds	r3, #1
 8001038:	6839      	ldr	r1, [r7, #0]
 800103a:	440b      	add	r3, r1
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	431a      	orrs	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3302      	adds	r3, #2
 800104e:	6839      	ldr	r1, [r7, #0]
 8001050:	440b      	add	r3, r1
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	041b      	lsls	r3, r3, #16
 8001056:	431a      	orrs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3303      	adds	r3, #3
 8001064:	6839      	ldr	r1, [r7, #0]
 8001066:	440b      	add	r3, r1
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	061b      	lsls	r3, r3, #24
 800106c:	431a      	orrs	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	3304      	adds	r3, #4
 8001076:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3301      	adds	r3, #1
 800108e:	6839      	ldr	r1, [r7, #0]
 8001090:	440b      	add	r3, r1
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3302      	adds	r3, #2
 80010a4:	6839      	ldr	r1, [r7, #0]
 80010a6:	440b      	add	r3, r1
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	041b      	lsls	r3, r3, #16
 80010ac:	431a      	orrs	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	3303      	adds	r3, #3
 80010ba:	6839      	ldr	r1, [r7, #0]
 80010bc:	440b      	add	r3, r1
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	061b      	lsls	r3, r3, #24
 80010c2:	431a      	orrs	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	3304      	adds	r3, #4
 80010cc:	60fb      	str	r3, [r7, #12]
     return offset;
 80010ce:	68fb      	ldr	r3, [r7, #12]
    }
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	0800e484 	.word	0x0800e484

080010f8 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	0800e494 	.word	0x0800e494

08001114 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fef8 	bl	8000f14 <_ZN3ros3MsgC1Ev>
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	809a      	strh	r2, [r3, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a09      	ldr	r2, [pc, #36]	; (8001158 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a07      	ldr	r2, [pc, #28]	; (8001158 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a06      	ldr	r2, [pc, #24]	; (8001158 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001140:	611a      	str	r2, [r3, #16]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
    {
    }
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	0800e704 	.word	0x0800e704
 8001158:	0800e4b8 	.word	0x0800e4b8

0800115c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	8899      	ldrh	r1, [r3, #4]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	4413      	add	r3, r2
 8001174:	b2ca      	uxtb	r2, r1
 8001176:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	889b      	ldrh	r3, [r3, #4]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	b299      	uxth	r1, r3
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	3301      	adds	r3, #1
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	4413      	add	r3, r2
 8001188:	b2ca      	uxtb	r2, r1
 800118a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	3302      	adds	r3, #2
 8001190:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f8b8 	bl	800030c <strlen>
 800119c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	69b9      	ldr	r1, [r7, #24]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f001 fdae 	bl	8002d08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	3304      	adds	r3, #4
 80011b0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	18d0      	adds	r0, r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4619      	mov	r1, r3
 80011c0:	f00c ffbc 	bl	800e13c <memcpy>
      offset += length_topic_name;
 80011c4:	69fa      	ldr	r2, [r7, #28]
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	4413      	add	r3, r2
 80011ca:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f89b 	bl	800030c <strlen>
 80011d6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	4413      	add	r3, r2
 80011de:	6979      	ldr	r1, [r7, #20]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 fd91 	bl	8002d08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	18d0      	adds	r0, r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	4619      	mov	r1, r3
 80011fa:	f00c ff9f 	bl	800e13c <memcpy>
      offset += length_message_type;
 80011fe:	69fa      	ldr	r2, [r7, #28]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	4413      	add	r3, r2
 8001204:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f87e 	bl	800030c <strlen>
 8001210:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	4413      	add	r3, r2
 8001218:	6939      	ldr	r1, [r7, #16]
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fd74 	bl	8002d08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	3304      	adds	r3, #4
 8001224:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	18d0      	adds	r0, r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4619      	mov	r1, r3
 8001234:	f00c ff82 	bl	800e13c <memcpy>
      offset += length_md5sum;
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4413      	add	r3, r2
 800123e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001246:	68f9      	ldr	r1, [r7, #12]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	4413      	add	r3, r2
 800124e:	b2ca      	uxtb	r2, r1
 8001250:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	0a19      	lsrs	r1, r3, #8
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3301      	adds	r3, #1
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	4413      	add	r3, r2
 800125e:	b2ca      	uxtb	r2, r1
 8001260:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	0c19      	lsrs	r1, r3, #16
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3302      	adds	r3, #2
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	4413      	add	r3, r2
 800126e:	b2ca      	uxtb	r2, r1
 8001270:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	0e19      	lsrs	r1, r3, #24
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3303      	adds	r3, #3
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	4413      	add	r3, r2
 800127e:	b2ca      	uxtb	r2, r1
 8001280:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3304      	adds	r3, #4
 8001286:	61fb      	str	r3, [r7, #28]
      return offset;
 8001288:	69fb      	ldr	r3, [r7, #28]
    }
 800128a:	4618      	mov	r0, r3
 800128c:	3720      	adds	r7, #32
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001292:	b580      	push	{r7, lr}
 8001294:	b08a      	sub	sp, #40	; 0x28
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	4413      	add	r3, r2
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	889b      	ldrh	r3, [r3, #4]
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	3301      	adds	r3, #1
 80012b8:	6839      	ldr	r1, [r7, #0]
 80012ba:	440b      	add	r3, r1
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	3302      	adds	r3, #2
 80012d0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	441a      	add	r2, r3
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4611      	mov	r1, r2
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 fd30 	bl	8002d44 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	3304      	adds	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	4413      	add	r3, r2
 80012f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d20c      	bcs.n	8001314 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	441a      	add	r2, r3
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	3b01      	subs	r3, #1
 8001304:	6839      	ldr	r1, [r7, #0]
 8001306:	440b      	add	r3, r1
 8001308:	7812      	ldrb	r2, [r2, #0]
 800130a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	3301      	adds	r3, #1
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
 8001312:	e7ec      	b.n	80012ee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	4413      	add	r3, r2
 800131a:	3b01      	subs	r3, #1
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	4413      	add	r3, r2
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	3b01      	subs	r3, #1
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	441a      	add	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	4413      	add	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	441a      	add	r2, r3
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f001 fcfd 	bl	8002d44 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	3304      	adds	r3, #4
 800134e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	623b      	str	r3, [r7, #32]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4413      	add	r3, r2
 800135a:	6a3a      	ldr	r2, [r7, #32]
 800135c:	429a      	cmp	r2, r3
 800135e:	d20c      	bcs.n	800137a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	441a      	add	r2, r3
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	3b01      	subs	r3, #1
 800136a:	6839      	ldr	r1, [r7, #0]
 800136c:	440b      	add	r3, r1
 800136e:	7812      	ldrb	r2, [r2, #0]
 8001370:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	3301      	adds	r3, #1
 8001376:	623b      	str	r3, [r7, #32]
 8001378:	e7ec      	b.n	8001354 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4413      	add	r3, r2
 8001380:	3b01      	subs	r3, #1
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	4413      	add	r3, r2
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	3b01      	subs	r3, #1
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	441a      	add	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4413      	add	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	441a      	add	r2, r3
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	4611      	mov	r1, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 fcca 	bl	8002d44 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	3304      	adds	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4413      	add	r3, r2
 80013c0:	69fa      	ldr	r2, [r7, #28]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d20c      	bcs.n	80013e0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	441a      	add	r2, r3
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	6839      	ldr	r1, [r7, #0]
 80013d2:	440b      	add	r3, r1
 80013d4:	7812      	ldrb	r2, [r2, #0]
 80013d6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	3301      	adds	r3, #1
 80013dc:	61fb      	str	r3, [r7, #28]
 80013de:	e7ec      	b.n	80013ba <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4413      	add	r3, r2
 80013e6:	3b01      	subs	r3, #1
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	441a      	add	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4413      	add	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	6839      	ldr	r1, [r7, #0]
 800140e:	440a      	add	r2, r1
 8001410:	7812      	ldrb	r2, [r2, #0]
 8001412:	4313      	orrs	r3, r2
 8001414:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	3301      	adds	r3, #1
 800141c:	6839      	ldr	r1, [r7, #0]
 800141e:	440b      	add	r3, r1
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	4313      	orrs	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	3302      	adds	r3, #2
 800142e:	6839      	ldr	r1, [r7, #0]
 8001430:	440b      	add	r3, r1
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	041b      	lsls	r3, r3, #16
 8001436:	4313      	orrs	r3, r2
 8001438:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	3303      	adds	r3, #3
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	440b      	add	r3, r1
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	061b      	lsls	r3, r3, #24
 8001448:	4313      	orrs	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	3304      	adds	r3, #4
 8001456:	61bb      	str	r3, [r7, #24]
     return offset;
 8001458:	69bb      	ldr	r3, [r7, #24]
    }
 800145a:	4618      	mov	r0, r3
 800145c:	3728      	adds	r7, #40	; 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	0800e4bc 	.word	0x0800e4bc

08001480 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	0800e4d8 	.word	0x0800e4d8

0800149c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fd34 	bl	8000f14 <_ZN3ros3MsgC1Ev>
 80014ac:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	711a      	strb	r2, [r3, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80014bc:	609a      	str	r2, [r3, #8]
    {
    }
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	0800e6ec 	.word	0x0800e6ec
 80014cc:	0800e4b8 	.word	0x0800e4b8

080014d0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	7912      	ldrb	r2, [r2, #4]
 80014e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3301      	adds	r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7fe ff09 	bl	800030c <strlen>
 80014fa:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	4413      	add	r3, r2
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f001 fbff 	bl	8002d08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3304      	adds	r3, #4
 800150e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	18d0      	adds	r0, r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	4619      	mov	r1, r3
 800151e:	f00c fe0d 	bl	800e13c <memcpy>
      offset += length_msg;
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
      return offset;
 800152a:	68fb      	ldr	r3, [r7, #12]
    }
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	4413      	add	r3, r2
 8001548:	781a      	ldrb	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	3301      	adds	r3, #1
 8001552:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	441a      	add	r2, r3
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f001 fbef 	bl	8002d44 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	3304      	adds	r3, #4
 800156a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4413      	add	r3, r2
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	429a      	cmp	r2, r3
 800157a:	d20c      	bcs.n	8001596 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	441a      	add	r2, r3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3b01      	subs	r3, #1
 8001586:	6839      	ldr	r1, [r7, #0]
 8001588:	440b      	add	r3, r1
 800158a:	7812      	ldrb	r2, [r2, #0]
 800158c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	e7ec      	b.n	8001570 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	3b01      	subs	r3, #1
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	4413      	add	r3, r2
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	441a      	add	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
     return offset;
 80015ba:	693b      	ldr	r3, [r7, #16]
    }
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	0800e4fc 	.word	0x0800e4fc

080015e0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	0800e510 	.word	0x0800e510

080015fc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fc84 	bl	8000f14 <_ZN3ros3MsgC1Ev>
 800160c:	4a0c      	ldr	r2, [pc, #48]	; (8001640 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	619a      	str	r2, [r3, #24]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	61da      	str	r2, [r3, #28]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	0800e6d4 	.word	0x0800e6d4

08001644 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	; 0x28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6859      	ldr	r1, [r3, #4]
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	4413      	add	r3, r2
 800165c:	b2ca      	uxtb	r2, r1
 800165e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	0a19      	lsrs	r1, r3, #8
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	3301      	adds	r3, #1
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	4413      	add	r3, r2
 800166e:	b2ca      	uxtb	r2, r1
 8001670:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	0c19      	lsrs	r1, r3, #16
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	3302      	adds	r3, #2
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	4413      	add	r3, r2
 8001680:	b2ca      	uxtb	r2, r1
 8001682:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	0e19      	lsrs	r1, r3, #24
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	3303      	adds	r3, #3
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	4413      	add	r3, r2
 8001692:	b2ca      	uxtb	r2, r1
 8001694:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	3304      	adds	r3, #4
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	6a3a      	ldr	r2, [r7, #32]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d22b      	bcs.n	8001702 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	6a3b      	ldr	r3, [r7, #32]
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80016b8:	6939      	ldr	r1, [r7, #16]
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	b2ca      	uxtb	r2, r1
 80016c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	0a19      	lsrs	r1, r3, #8
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	3301      	adds	r3, #1
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	b2ca      	uxtb	r2, r1
 80016d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	0c19      	lsrs	r1, r3, #16
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	3302      	adds	r3, #2
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	b2ca      	uxtb	r2, r1
 80016e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	0e19      	lsrs	r1, r3, #24
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	3303      	adds	r3, #3
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	b2ca      	uxtb	r2, r1
 80016f2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	3304      	adds	r3, #4
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	3301      	adds	r3, #1
 80016fe:	623b      	str	r3, [r7, #32]
 8001700:	e7ce      	b.n	80016a0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6919      	ldr	r1, [r3, #16]
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	4413      	add	r3, r2
 800170c:	b2ca      	uxtb	r2, r1
 800170e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	0a19      	lsrs	r1, r3, #8
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	3301      	adds	r3, #1
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	4413      	add	r3, r2
 800171e:	b2ca      	uxtb	r2, r1
 8001720:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	0c19      	lsrs	r1, r3, #16
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	3302      	adds	r3, #2
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	4413      	add	r3, r2
 8001730:	b2ca      	uxtb	r2, r1
 8001732:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	0e19      	lsrs	r1, r3, #24
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	3303      	adds	r3, #3
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	4413      	add	r3, r2
 8001742:	b2ca      	uxtb	r2, r1
 8001744:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	3304      	adds	r3, #4
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	429a      	cmp	r2, r3
 8001758:	d22b      	bcs.n	80017b2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699a      	ldr	r2, [r3, #24]
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001768:	68f9      	ldr	r1, [r7, #12]
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	4413      	add	r3, r2
 8001770:	b2ca      	uxtb	r2, r1
 8001772:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	0a19      	lsrs	r1, r3, #8
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	3301      	adds	r3, #1
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	4413      	add	r3, r2
 8001780:	b2ca      	uxtb	r2, r1
 8001782:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	0c19      	lsrs	r1, r3, #16
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	3302      	adds	r3, #2
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	4413      	add	r3, r2
 8001790:	b2ca      	uxtb	r2, r1
 8001792:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	0e19      	lsrs	r1, r3, #24
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	3303      	adds	r3, #3
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	b2ca      	uxtb	r2, r1
 80017a2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	3304      	adds	r3, #4
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3301      	adds	r3, #1
 80017ae:	61fb      	str	r3, [r7, #28]
 80017b0:	e7ce      	b.n	8001750 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69d9      	ldr	r1, [r3, #28]
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	b2ca      	uxtb	r2, r1
 80017be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	0a19      	lsrs	r1, r3, #8
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	3301      	adds	r3, #1
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	4413      	add	r3, r2
 80017ce:	b2ca      	uxtb	r2, r1
 80017d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	0c19      	lsrs	r1, r3, #16
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	3302      	adds	r3, #2
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	b2ca      	uxtb	r2, r1
 80017e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	0e19      	lsrs	r1, r3, #24
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	3303      	adds	r3, #3
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	4413      	add	r3, r2
 80017f2:	b2ca      	uxtb	r2, r1
 80017f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	3304      	adds	r3, #4
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80017fc:	2300      	movs	r3, #0
 80017fe:	61bb      	str	r3, [r7, #24]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	429a      	cmp	r2, r3
 8001808:	d228      	bcs.n	800185c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fd78 	bl	800030c <strlen>
 800181c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	4413      	add	r3, r2
 8001824:	6979      	ldr	r1, [r7, #20]
 8001826:	4618      	mov	r0, r3
 8001828:	f001 fa6e 	bl	8002d08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	3304      	adds	r3, #4
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	18d0      	adds	r0, r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	4619      	mov	r1, r3
 8001848:	f00c fc78 	bl	800e13c <memcpy>
      offset += length_stringsi;
 800184c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	4413      	add	r3, r2
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	3301      	adds	r3, #1
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	e7d1      	b.n	8001800 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800185e:	4618      	mov	r0, r3
 8001860:	3728      	adds	r7, #40	; 0x28
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001866:	b580      	push	{r7, lr}
 8001868:	b08e      	sub	sp, #56	; 0x38
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	4413      	add	r3, r2
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800187e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001880:	3301      	adds	r3, #1
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	4413      	add	r3, r2
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	6a3a      	ldr	r2, [r7, #32]
 800188c:	4313      	orrs	r3, r2
 800188e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001892:	3302      	adds	r3, #2
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	4413      	add	r3, r2
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	041b      	lsls	r3, r3, #16
 800189c:	6a3a      	ldr	r2, [r7, #32]
 800189e:	4313      	orrs	r3, r2
 80018a0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80018a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a4:	3303      	adds	r3, #3
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	4413      	add	r3, r2
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	061b      	lsls	r3, r3, #24
 80018ae:	6a3a      	ldr	r2, [r7, #32]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80018b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b6:	3304      	adds	r3, #4
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	6a3a      	ldr	r2, [r7, #32]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d90a      	bls.n	80018da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4619      	mov	r1, r3
 80018ce:	4610      	mov	r0, r2
 80018d0:	f00c fc4a 	bl	800e168 <realloc>
 80018d4:	4602      	mov	r2, r0
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a3a      	ldr	r2, [r7, #32]
 80018de:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80018e0:	2300      	movs	r3, #0
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d236      	bcs.n	800195c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018f6:	6839      	ldr	r1, [r7, #0]
 80018f8:	440a      	add	r2, r1
 80018fa:	7812      	ldrb	r2, [r2, #0]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001904:	3301      	adds	r3, #1
 8001906:	6839      	ldr	r1, [r7, #0]
 8001908:	440b      	add	r3, r1
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	4313      	orrs	r3, r2
 8001910:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001916:	3302      	adds	r3, #2
 8001918:	6839      	ldr	r1, [r7, #0]
 800191a:	440b      	add	r3, r1
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	041b      	lsls	r3, r3, #16
 8001920:	4313      	orrs	r3, r2
 8001922:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001928:	3303      	adds	r3, #3
 800192a:	6839      	ldr	r1, [r7, #0]
 800192c:	440b      	add	r3, r1
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	061b      	lsls	r3, r3, #24
 8001932:	4313      	orrs	r3, r2
 8001934:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800193c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193e:	3304      	adds	r3, #4
 8001940:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	3208      	adds	r2, #8
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001956:	3301      	adds	r3, #1
 8001958:	633b      	str	r3, [r7, #48]	; 0x30
 800195a:	e7c3      	b.n	80018e4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800195c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	4413      	add	r3, r2
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001968:	3301      	adds	r3, #1
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	4413      	add	r3, r2
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	4313      	orrs	r3, r2
 8001976:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197a:	3302      	adds	r3, #2
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	4413      	add	r3, r2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	041b      	lsls	r3, r3, #16
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	4313      	orrs	r3, r2
 8001988:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800198a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198c:	3303      	adds	r3, #3
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	4413      	add	r3, r2
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	061b      	lsls	r3, r3, #24
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	4313      	orrs	r3, r2
 800199a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800199c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800199e:	3304      	adds	r3, #4
 80019a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d90a      	bls.n	80019c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	699a      	ldr	r2, [r3, #24]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4619      	mov	r1, r3
 80019b6:	4610      	mov	r0, r2
 80019b8:	f00c fbd6 	bl	800e168 <realloc>
 80019bc:	4602      	mov	r2, r0
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d236      	bcs.n	8001a44 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019de:	6839      	ldr	r1, [r7, #0]
 80019e0:	440a      	add	r2, r1
 80019e2:	7812      	ldrb	r2, [r2, #0]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ec:	3301      	adds	r3, #1
 80019ee:	6839      	ldr	r1, [r7, #0]
 80019f0:	440b      	add	r3, r1
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	021b      	lsls	r3, r3, #8
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fe:	3302      	adds	r3, #2
 8001a00:	6839      	ldr	r1, [r7, #0]
 8001a02:	440b      	add	r3, r1
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	041b      	lsls	r3, r3, #16
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a10:	3303      	adds	r3, #3
 8001a12:	6839      	ldr	r1, [r7, #0]
 8001a14:	440b      	add	r3, r1
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	061b      	lsls	r3, r3, #24
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a26:	3304      	adds	r3, #4
 8001a28:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	3214      	adds	r2, #20
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3e:	3301      	adds	r3, #1
 8001a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a42:	e7c3      	b.n	80019cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	4413      	add	r3, r2
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a50:	3301      	adds	r3, #1
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	4413      	add	r3, r2
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a62:	3302      	adds	r3, #2
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	041b      	lsls	r3, r3, #16
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a74:	3303      	adds	r3, #3
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	4413      	add	r3, r2
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	061b      	lsls	r3, r3, #24
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a86:	3304      	adds	r3, #4
 8001a88:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d90a      	bls.n	8001aaa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	f00c fb62 	bl	800e168 <realloc>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d23f      	bcs.n	8001b3e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	441a      	add	r2, r3
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	4611      	mov	r1, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f001 f93a 	bl	8002d44 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8001ada:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d20c      	bcs.n	8001b00 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	441a      	add	r2, r3
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	3b01      	subs	r3, #1
 8001af0:	6839      	ldr	r1, [r7, #0]
 8001af2:	440b      	add	r3, r1
 8001af4:	7812      	ldrb	r2, [r2, #0]
 8001af6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	3301      	adds	r3, #1
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
 8001afe:	e7ec      	b.n	8001ada <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001b00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4413      	add	r3, r2
 8001b06:	3b01      	subs	r3, #1
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b12:	3b01      	subs	r3, #1
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	441a      	add	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001b1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4413      	add	r3, r2
 8001b22:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	3220      	adds	r2, #32
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b38:	3301      	adds	r3, #1
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b3c:	e7ba      	b.n	8001ab4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001b40:	4618      	mov	r0, r3
 8001b42:	3738      	adds	r7, #56	; 0x38
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	0800e628 	.word	0x0800e628

08001b64 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	0800e534 	.word	0x0800e534

08001b80 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	611a      	str	r2, [r3, #16]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68d8      	ldr	r0, [r3, #12]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6891      	ldr	r1, [r2, #8]
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	4798      	blx	r3
 8001bcc:	4603      	mov	r3, r0
  };
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
  }
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a4b      	ldr	r2, [pc, #300]	; (8001d30 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d077      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a48      	ldr	r2, [pc, #288]	; (8001d34 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d06f      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a45      	ldr	r2, [pc, #276]	; (8001d38 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d067      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a42      	ldr	r2, [pc, #264]	; (8001d3c <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d05f      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a3f      	ldr	r2, [pc, #252]	; (8001d40 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d057      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a3c      	ldr	r2, [pc, #240]	; (8001d44 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d04f      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a39      	ldr	r2, [pc, #228]	; (8001d48 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d047      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a36      	ldr	r2, [pc, #216]	; (8001d4c <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d03f      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a33      	ldr	r2, [pc, #204]	; (8001d50 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d037      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a30      	ldr	r2, [pc, #192]	; (8001d54 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d02f      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a2d      	ldr	r2, [pc, #180]	; (8001d58 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d027      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a2a      	ldr	r2, [pc, #168]	; (8001d5c <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d01f      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a27      	ldr	r2, [pc, #156]	; (8001d60 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d017      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a24      	ldr	r2, [pc, #144]	; (8001d64 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d00f      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a21      	ldr	r2, [pc, #132]	; (8001d68 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d007      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1e      	ldr	r2, [pc, #120]	; (8001d6c <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d10a      	bne.n	8001d0e <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d0c:	e009      	b.n	8001d22 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40020010 	.word	0x40020010
 8001d34:	40020028 	.word	0x40020028
 8001d38:	40020040 	.word	0x40020040
 8001d3c:	40020058 	.word	0x40020058
 8001d40:	40020070 	.word	0x40020070
 8001d44:	40020088 	.word	0x40020088
 8001d48:	400200a0 	.word	0x400200a0
 8001d4c:	400200b8 	.word	0x400200b8
 8001d50:	40020410 	.word	0x40020410
 8001d54:	40020428 	.word	0x40020428
 8001d58:	40020440 	.word	0x40020440
 8001d5c:	40020458 	.word	0x40020458
 8001d60:	40020470 	.word	0x40020470
 8001d64:	40020488 	.word	0x40020488
 8001d68:	400204a0 	.word	0x400204a0
 8001d6c:	400204b8 	.word	0x400204b8

08001d70 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <_ZN13STM32HardwareC1Ev+0x34>)
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	2400025c 	.word	0x2400025c

08001da8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f804 	bl	8001dbe <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f00a f920 	bl	800c018 <HAL_UART_Receive_DMA>
    }
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dec:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff fefb 	bl	8001bf0 <_ZN13STM32Hardware10getRdmaIndEv>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	429c      	cmp	r4, r3
 8001dfe:	bf14      	ite	ne
 8001e00:	2301      	movne	r3, #1
 8001e02:	2300      	moveq	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d012      	beq.n	8001e30 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e10:	1c59      	adds	r1, r3, #1
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	791b      	ldrb	r3, [r3, #4]
 8001e1e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001e30:	68fb      	ldr	r3, [r7, #12]
    }
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd90      	pop	{r4, r7, pc}
	...

08001e3c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	d108      	bne.n	8001e62 <_ZN13STM32Hardware5flushEv+0x26>
 8001e50:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <_ZN13STM32Hardware5flushEv+0xb4>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	f083 0301 	eor.w	r3, r3, #1
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <_ZN13STM32Hardware5flushEv+0x26>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <_ZN13STM32Hardware5flushEv+0x28>
 8001e62:	2300      	movs	r3, #0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d03f      	beq.n	8001ee8 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8001e68:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <_ZN13STM32Hardware5flushEv+0xb4>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d031      	beq.n	8001ee2 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d20a      	bcs.n	8001ea4 <_ZN13STM32Hardware5flushEv+0x68>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	e006      	b.n	8001eb2 <_ZN13STM32Hardware5flushEv+0x76>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001ebe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	89fa      	ldrh	r2, [r7, #14]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f00a f825 	bl	800bf18 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001ed4:	89fb      	ldrh	r3, [r7, #14]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001ee2:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <_ZN13STM32Hardware5flushEv+0xb4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
      }
    }
 8001ee8:	bf00      	nop
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	24000410 	.word	0x24000410

08001ef4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
      int n = length;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f0a:	bfa8      	it	ge
 8001f0c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001f10:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f18:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	bf28      	it	cs
 8001f22:	4613      	movcs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f00c f8ff 	bl	800e13c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	4413      	add	r3, r2
 8001f48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d00b      	beq.n	8001f72 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	18d1      	adds	r1, r2, r3
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f00c f8e5 	bl	800e13c <memcpy>
      }

      flush();
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f7ff ff62 	bl	8001e3c <_ZN13STM32Hardware5flushEv>
    }
 8001f78:	bf00      	nop
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	f002 f95e 	bl	8004248 <HAL_GetTick>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe ffb6 	bl	8000f14 <_ZN3ros3MsgC1Ev>
 8001fa8:	4a0e      	ldr	r2, [pc, #56]	; (8001fe4 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	0800e690 	.word	0x0800e690

08001fe8 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001fe8:	b480      	push	{r7}
 8001fea:	b08b      	sub	sp, #44	; 0x2c
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ffc:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002000:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002006:	6838      	ldr	r0, [r7, #0]
 8002008:	4401      	add	r1, r0
 800200a:	b2d3      	uxtb	r3, r2
 800200c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800200e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	0a02      	lsrs	r2, r0, #8
 800201c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002020:	0a0b      	lsrs	r3, r1, #8
 8002022:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002024:	3101      	adds	r1, #1
 8002026:	6838      	ldr	r0, [r7, #0]
 8002028:	4401      	add	r1, r0
 800202a:	b2d3      	uxtb	r3, r2
 800202c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800202e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	0c02      	lsrs	r2, r0, #16
 800203c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002040:	0c0b      	lsrs	r3, r1, #16
 8002042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002044:	3102      	adds	r1, #2
 8002046:	6838      	ldr	r0, [r7, #0]
 8002048:	4401      	add	r1, r0
 800204a:	b2d3      	uxtb	r3, r2
 800204c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800204e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	0e02      	lsrs	r2, r0, #24
 800205c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002060:	0e0b      	lsrs	r3, r1, #24
 8002062:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002064:	3103      	adds	r1, #3
 8002066:	6838      	ldr	r0, [r7, #0]
 8002068:	4401      	add	r1, r0
 800206a:	b2d3      	uxtb	r3, r2
 800206c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800206e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	000a      	movs	r2, r1
 800207c:	2300      	movs	r3, #0
 800207e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002080:	3104      	adds	r1, #4
 8002082:	6838      	ldr	r0, [r7, #0]
 8002084:	4401      	add	r1, r0
 8002086:	b2d3      	uxtb	r3, r2
 8002088:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800208a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	0a0a      	lsrs	r2, r1, #8
 8002098:	2300      	movs	r3, #0
 800209a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800209c:	3105      	adds	r1, #5
 800209e:	6838      	ldr	r0, [r7, #0]
 80020a0:	4401      	add	r1, r0
 80020a2:	b2d3      	uxtb	r3, r2
 80020a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80020a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	0c0a      	lsrs	r2, r1, #16
 80020b4:	2300      	movs	r3, #0
 80020b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b8:	3106      	adds	r1, #6
 80020ba:	6838      	ldr	r0, [r7, #0]
 80020bc:	4401      	add	r1, r0
 80020be:	b2d3      	uxtb	r3, r2
 80020c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80020c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	0e0a      	lsrs	r2, r1, #24
 80020d0:	2300      	movs	r3, #0
 80020d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020d4:	3107      	adds	r1, #7
 80020d6:	6838      	ldr	r0, [r7, #0]
 80020d8:	4401      	add	r1, r0
 80020da:	b2d3      	uxtb	r3, r2
 80020dc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	3308      	adds	r3, #8
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80020ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80020ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80020f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020f4:	6838      	ldr	r0, [r7, #0]
 80020f6:	4401      	add	r1, r0
 80020f8:	b2d3      	uxtb	r3, r2
 80020fa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80020fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	0a02      	lsrs	r2, r0, #8
 800210a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800210e:	0a0b      	lsrs	r3, r1, #8
 8002110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002112:	3101      	adds	r1, #1
 8002114:	6838      	ldr	r0, [r7, #0]
 8002116:	4401      	add	r1, r0
 8002118:	b2d3      	uxtb	r3, r2
 800211a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800211c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	0c02      	lsrs	r2, r0, #16
 800212a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800212e:	0c0b      	lsrs	r3, r1, #16
 8002130:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002132:	3102      	adds	r1, #2
 8002134:	6838      	ldr	r0, [r7, #0]
 8002136:	4401      	add	r1, r0
 8002138:	b2d3      	uxtb	r3, r2
 800213a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800213c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	0e02      	lsrs	r2, r0, #24
 800214a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800214e:	0e0b      	lsrs	r3, r1, #24
 8002150:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002152:	3103      	adds	r1, #3
 8002154:	6838      	ldr	r0, [r7, #0]
 8002156:	4401      	add	r1, r0
 8002158:	b2d3      	uxtb	r3, r2
 800215a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800215c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	000a      	movs	r2, r1
 800216a:	2300      	movs	r3, #0
 800216c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800216e:	3104      	adds	r1, #4
 8002170:	6838      	ldr	r0, [r7, #0]
 8002172:	4401      	add	r1, r0
 8002174:	b2d3      	uxtb	r3, r2
 8002176:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002178:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	0a0a      	lsrs	r2, r1, #8
 8002186:	2300      	movs	r3, #0
 8002188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800218a:	3105      	adds	r1, #5
 800218c:	6838      	ldr	r0, [r7, #0]
 800218e:	4401      	add	r1, r0
 8002190:	b2d3      	uxtb	r3, r2
 8002192:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002194:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	0c0a      	lsrs	r2, r1, #16
 80021a2:	2300      	movs	r3, #0
 80021a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021a6:	3106      	adds	r1, #6
 80021a8:	6838      	ldr	r0, [r7, #0]
 80021aa:	4401      	add	r1, r0
 80021ac:	b2d3      	uxtb	r3, r2
 80021ae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80021b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	0e0a      	lsrs	r2, r1, #24
 80021be:	2300      	movs	r3, #0
 80021c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021c2:	3107      	adds	r1, #7
 80021c4:	6838      	ldr	r0, [r7, #0]
 80021c6:	4401      	add	r1, r0
 80021c8:	b2d3      	uxtb	r3, r2
 80021ca:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	3308      	adds	r3, #8
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80021dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021e2:	6838      	ldr	r0, [r7, #0]
 80021e4:	4401      	add	r1, r0
 80021e6:	b2d3      	uxtb	r3, r2
 80021e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80021ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	0a02      	lsrs	r2, r0, #8
 80021f8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80021fc:	0a0b      	lsrs	r3, r1, #8
 80021fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002200:	3101      	adds	r1, #1
 8002202:	6838      	ldr	r0, [r7, #0]
 8002204:	4401      	add	r1, r0
 8002206:	b2d3      	uxtb	r3, r2
 8002208:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800220a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	0c02      	lsrs	r2, r0, #16
 8002218:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800221c:	0c0b      	lsrs	r3, r1, #16
 800221e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002220:	3102      	adds	r1, #2
 8002222:	6838      	ldr	r0, [r7, #0]
 8002224:	4401      	add	r1, r0
 8002226:	b2d3      	uxtb	r3, r2
 8002228:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800222a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	0e02      	lsrs	r2, r0, #24
 8002238:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800223c:	0e0b      	lsrs	r3, r1, #24
 800223e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002240:	3103      	adds	r1, #3
 8002242:	6838      	ldr	r0, [r7, #0]
 8002244:	4401      	add	r1, r0
 8002246:	b2d3      	uxtb	r3, r2
 8002248:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800224a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	000a      	movs	r2, r1
 8002258:	2300      	movs	r3, #0
 800225a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800225c:	3104      	adds	r1, #4
 800225e:	6838      	ldr	r0, [r7, #0]
 8002260:	4401      	add	r1, r0
 8002262:	b2d3      	uxtb	r3, r2
 8002264:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002266:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	0a0a      	lsrs	r2, r1, #8
 8002274:	2300      	movs	r3, #0
 8002276:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002278:	3105      	adds	r1, #5
 800227a:	6838      	ldr	r0, [r7, #0]
 800227c:	4401      	add	r1, r0
 800227e:	b2d3      	uxtb	r3, r2
 8002280:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002282:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	0c0a      	lsrs	r2, r1, #16
 8002290:	2300      	movs	r3, #0
 8002292:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002294:	3106      	adds	r1, #6
 8002296:	6838      	ldr	r0, [r7, #0]
 8002298:	4401      	add	r1, r0
 800229a:	b2d3      	uxtb	r3, r2
 800229c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800229e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	0e0a      	lsrs	r2, r1, #24
 80022ac:	2300      	movs	r3, #0
 80022ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022b0:	3107      	adds	r1, #7
 80022b2:	6838      	ldr	r0, [r7, #0]
 80022b4:	4401      	add	r1, r0
 80022b6:	b2d3      	uxtb	r3, r2
 80022b8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	3308      	adds	r3, #8
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80022c2:	4618      	mov	r0, r3
 80022c4:	372c      	adds	r7, #44	; 0x2c
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80022ce:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80022d2:	b0eb      	sub	sp, #428	; 0x1ac
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80022da:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022f0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80022f4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80022f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80022fc:	4413      	add	r3, r2
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2200      	movs	r2, #0
 8002304:	461c      	mov	r4, r3
 8002306:	4615      	mov	r5, r2
 8002308:	ea40 0804 	orr.w	r8, r0, r4
 800230c:	ea41 0905 	orr.w	r9, r1, r5
 8002310:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002314:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002318:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002322:	4413      	add	r3, r2
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2200      	movs	r2, #0
 800232a:	469a      	mov	sl, r3
 800232c:	4693      	mov	fp, r2
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800233a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800233e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002342:	ea40 0402 	orr.w	r4, r0, r2
 8002346:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800234a:	430b      	orrs	r3, r1
 800234c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002350:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002354:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002358:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800235c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002360:	1c9a      	adds	r2, r3, #2
 8002362:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002366:	4413      	add	r3, r2
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2200      	movs	r2, #0
 800236e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002372:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002382:	464c      	mov	r4, r9
 8002384:	0423      	lsls	r3, r4, #16
 8002386:	4644      	mov	r4, r8
 8002388:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800238c:	4644      	mov	r4, r8
 800238e:	0422      	lsls	r2, r4, #16
 8002390:	ea40 0402 	orr.w	r4, r0, r2
 8002394:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002398:	430b      	orrs	r3, r1
 800239a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800239e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80023a2:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80023a6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80023aa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80023ae:	1cda      	adds	r2, r3, #3
 80023b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023b4:	4413      	add	r3, r2
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2200      	movs	r2, #0
 80023bc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80023c0:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80023c4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80023c8:	4623      	mov	r3, r4
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80023d0:	4623      	mov	r3, r4
 80023d2:	061b      	lsls	r3, r3, #24
 80023d4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80023d8:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80023dc:	4623      	mov	r3, r4
 80023de:	4303      	orrs	r3, r0
 80023e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80023e4:	462b      	mov	r3, r5
 80023e6:	430b      	orrs	r3, r1
 80023e8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80023ec:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80023f0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80023f4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80023f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80023fc:	1d1a      	adds	r2, r3, #4
 80023fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002402:	4413      	add	r3, r2
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2200      	movs	r2, #0
 800240a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800240e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800241e:	0023      	movs	r3, r4
 8002420:	2200      	movs	r2, #0
 8002422:	ea40 0402 	orr.w	r4, r0, r2
 8002426:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800242a:	430b      	orrs	r3, r1
 800242c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002430:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002434:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002438:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800243c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002440:	1d5a      	adds	r2, r3, #5
 8002442:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002446:	4413      	add	r3, r2
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2200      	movs	r2, #0
 800244e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002452:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002462:	0223      	lsls	r3, r4, #8
 8002464:	2200      	movs	r2, #0
 8002466:	ea40 0402 	orr.w	r4, r0, r2
 800246a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800246e:	430b      	orrs	r3, r1
 8002470:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002474:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002478:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800247c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002480:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002484:	1d9a      	adds	r2, r3, #6
 8002486:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800248a:	4413      	add	r3, r2
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2200      	movs	r2, #0
 8002492:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002496:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80024a6:	0423      	lsls	r3, r4, #16
 80024a8:	2200      	movs	r2, #0
 80024aa:	ea40 0402 	orr.w	r4, r0, r2
 80024ae:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80024b2:	430b      	orrs	r3, r1
 80024b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80024b8:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80024bc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80024c0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80024c4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80024c8:	1dda      	adds	r2, r3, #7
 80024ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80024ce:	4413      	add	r3, r2
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2200      	movs	r2, #0
 80024d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80024da:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80024ea:	0623      	lsls	r3, r4, #24
 80024ec:	2200      	movs	r2, #0
 80024ee:	ea40 0402 	orr.w	r4, r0, r2
 80024f2:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80024f6:	430b      	orrs	r3, r1
 80024f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80024fc:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002500:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002504:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002508:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800250c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002510:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002514:	3308      	adds	r3, #8
 8002516:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002526:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800252a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800252e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002532:	4413      	add	r3, r2
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2200      	movs	r2, #0
 800253a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800253e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002542:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002546:	4623      	mov	r3, r4
 8002548:	4303      	orrs	r3, r0
 800254a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800254e:	462b      	mov	r3, r5
 8002550:	430b      	orrs	r3, r1
 8002552:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002556:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800255a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800255e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002562:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800256c:	4413      	add	r3, r2
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2200      	movs	r2, #0
 8002574:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002578:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002588:	464c      	mov	r4, r9
 800258a:	0223      	lsls	r3, r4, #8
 800258c:	4644      	mov	r4, r8
 800258e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002592:	4644      	mov	r4, r8
 8002594:	0222      	lsls	r2, r4, #8
 8002596:	ea40 0402 	orr.w	r4, r0, r2
 800259a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800259e:	430b      	orrs	r3, r1
 80025a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80025a4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80025a8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025ac:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80025b0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025b4:	1c9a      	adds	r2, r3, #2
 80025b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025ba:	4413      	add	r3, r2
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2200      	movs	r2, #0
 80025c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80025c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80025d6:	464c      	mov	r4, r9
 80025d8:	0423      	lsls	r3, r4, #16
 80025da:	4644      	mov	r4, r8
 80025dc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80025e0:	4644      	mov	r4, r8
 80025e2:	0422      	lsls	r2, r4, #16
 80025e4:	ea40 0402 	orr.w	r4, r0, r2
 80025e8:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80025ec:	430b      	orrs	r3, r1
 80025ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80025f2:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80025f6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025fa:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80025fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002602:	1cda      	adds	r2, r3, #3
 8002604:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002608:	4413      	add	r3, r2
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2200      	movs	r2, #0
 8002610:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002614:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002618:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800261c:	4623      	mov	r3, r4
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002624:	4623      	mov	r3, r4
 8002626:	061b      	lsls	r3, r3, #24
 8002628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800262c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002630:	4623      	mov	r3, r4
 8002632:	4303      	orrs	r3, r0
 8002634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002638:	462b      	mov	r3, r5
 800263a:	430b      	orrs	r3, r1
 800263c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002640:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002644:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002648:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800264c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002650:	1d1a      	adds	r2, r3, #4
 8002652:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002656:	4413      	add	r3, r2
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2200      	movs	r2, #0
 800265e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002662:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002672:	0023      	movs	r3, r4
 8002674:	2200      	movs	r2, #0
 8002676:	ea40 0402 	orr.w	r4, r0, r2
 800267a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800267e:	430b      	orrs	r3, r1
 8002680:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002684:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002688:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800268c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002690:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002694:	1d5a      	adds	r2, r3, #5
 8002696:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800269a:	4413      	add	r3, r2
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2200      	movs	r2, #0
 80026a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026a6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80026b6:	0223      	lsls	r3, r4, #8
 80026b8:	2200      	movs	r2, #0
 80026ba:	ea40 0402 	orr.w	r4, r0, r2
 80026be:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80026c2:	430b      	orrs	r3, r1
 80026c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80026c8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80026cc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80026d0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80026d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026d8:	1d9a      	adds	r2, r3, #6
 80026da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026de:	4413      	add	r3, r2
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2200      	movs	r2, #0
 80026e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80026fa:	0423      	lsls	r3, r4, #16
 80026fc:	2200      	movs	r2, #0
 80026fe:	ea40 0402 	orr.w	r4, r0, r2
 8002702:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002706:	430b      	orrs	r3, r1
 8002708:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800270c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002710:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002714:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002718:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800271c:	1dda      	adds	r2, r3, #7
 800271e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002722:	4413      	add	r3, r2
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2200      	movs	r2, #0
 800272a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800272e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800273e:	0623      	lsls	r3, r4, #24
 8002740:	2200      	movs	r2, #0
 8002742:	ea40 0402 	orr.w	r4, r0, r2
 8002746:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800274a:	430b      	orrs	r3, r1
 800274c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002750:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002754:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002758:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800275c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002760:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002764:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002768:	3308      	adds	r3, #8
 800276a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800277a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800277e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002782:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002786:	4413      	add	r3, r2
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2200      	movs	r2, #0
 800278e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002792:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002796:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800279a:	4623      	mov	r3, r4
 800279c:	4303      	orrs	r3, r0
 800279e:	67bb      	str	r3, [r7, #120]	; 0x78
 80027a0:	462b      	mov	r3, r5
 80027a2:	430b      	orrs	r3, r1
 80027a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027a6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80027aa:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027ae:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80027b2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027bc:	4413      	add	r3, r2
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2200      	movs	r2, #0
 80027c4:	673b      	str	r3, [r7, #112]	; 0x70
 80027c6:	677a      	str	r2, [r7, #116]	; 0x74
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80027d4:	464c      	mov	r4, r9
 80027d6:	0223      	lsls	r3, r4, #8
 80027d8:	4644      	mov	r4, r8
 80027da:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80027de:	4644      	mov	r4, r8
 80027e0:	0222      	lsls	r2, r4, #8
 80027e2:	ea40 0402 	orr.w	r4, r0, r2
 80027e6:	66bc      	str	r4, [r7, #104]	; 0x68
 80027e8:	430b      	orrs	r3, r1
 80027ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027ec:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80027f0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027f4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80027f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027fc:	1c9a      	adds	r2, r3, #2
 80027fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002802:	4413      	add	r3, r2
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2200      	movs	r2, #0
 800280a:	663b      	str	r3, [r7, #96]	; 0x60
 800280c:	667a      	str	r2, [r7, #100]	; 0x64
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800281a:	464c      	mov	r4, r9
 800281c:	0423      	lsls	r3, r4, #16
 800281e:	4644      	mov	r4, r8
 8002820:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002824:	4644      	mov	r4, r8
 8002826:	0422      	lsls	r2, r4, #16
 8002828:	ea40 0402 	orr.w	r4, r0, r2
 800282c:	65bc      	str	r4, [r7, #88]	; 0x58
 800282e:	430b      	orrs	r3, r1
 8002830:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002832:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002836:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800283a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800283e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002842:	1cda      	adds	r2, r3, #3
 8002844:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002848:	4413      	add	r3, r2
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2200      	movs	r2, #0
 8002850:	653b      	str	r3, [r7, #80]	; 0x50
 8002852:	657a      	str	r2, [r7, #84]	; 0x54
 8002854:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002858:	4623      	mov	r3, r4
 800285a:	0a1b      	lsrs	r3, r3, #8
 800285c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800285e:	4623      	mov	r3, r4
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	64bb      	str	r3, [r7, #72]	; 0x48
 8002864:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002868:	4623      	mov	r3, r4
 800286a:	4303      	orrs	r3, r0
 800286c:	643b      	str	r3, [r7, #64]	; 0x40
 800286e:	462b      	mov	r3, r5
 8002870:	430b      	orrs	r3, r1
 8002872:	647b      	str	r3, [r7, #68]	; 0x44
 8002874:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002878:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800287c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002880:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002884:	1d1a      	adds	r2, r3, #4
 8002886:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800288a:	4413      	add	r3, r2
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2200      	movs	r2, #0
 8002892:	63bb      	str	r3, [r7, #56]	; 0x38
 8002894:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80028a0:	0023      	movs	r3, r4
 80028a2:	2200      	movs	r2, #0
 80028a4:	ea40 0402 	orr.w	r4, r0, r2
 80028a8:	633c      	str	r4, [r7, #48]	; 0x30
 80028aa:	430b      	orrs	r3, r1
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
 80028ae:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80028b2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80028b6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80028ba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028be:	1d5a      	adds	r2, r3, #5
 80028c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028c4:	4413      	add	r3, r2
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2200      	movs	r2, #0
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80028da:	0223      	lsls	r3, r4, #8
 80028dc:	2200      	movs	r2, #0
 80028de:	ea40 0402 	orr.w	r4, r0, r2
 80028e2:	623c      	str	r4, [r7, #32]
 80028e4:	430b      	orrs	r3, r1
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
 80028e8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80028ec:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80028f0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80028f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028f8:	3306      	adds	r3, #6
 80028fa:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80028fe:	4413      	add	r3, r2
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2200      	movs	r2, #0
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	61fa      	str	r2, [r7, #28]
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	69bc      	ldr	r4, [r7, #24]
 8002914:	0423      	lsls	r3, r4, #16
 8002916:	2200      	movs	r2, #0
 8002918:	ea40 0402 	orr.w	r4, r0, r2
 800291c:	613c      	str	r4, [r7, #16]
 800291e:	430b      	orrs	r3, r1
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002926:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800292a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800292e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002932:	3307      	adds	r3, #7
 8002934:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002938:	4413      	add	r3, r2
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2200      	movs	r2, #0
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	60fa      	str	r2, [r7, #12]
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	68bc      	ldr	r4, [r7, #8]
 800294e:	0623      	lsls	r3, r4, #24
 8002950:	2200      	movs	r2, #0
 8002952:	ea40 0402 	orr.w	r4, r0, r2
 8002956:	603c      	str	r4, [r7, #0]
 8002958:	430b      	orrs	r3, r1
 800295a:	607b      	str	r3, [r7, #4]
 800295c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002960:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002964:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002968:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 800296c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002970:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002974:	3308      	adds	r3, #8
 8002976:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 800297a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 800297e:	4618      	mov	r0, r3
 8002980:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002984:	46bd      	mov	sp, r7
 8002986:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800298a:	4770      	bx	lr

0800298c <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002996:	4618      	mov	r0, r3
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	0800e558 	.word	0x0800e558

080029a8 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	0800e570 	.word	0x0800e570

080029c4 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe faa0 	bl	8000f14 <_ZN3ros3MsgC1Ev>
 80029d4:	4a08      	ldr	r2, [pc, #32]	; (80029f8 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3308      	adds	r3, #8
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fada 	bl	8001f98 <_ZN13geometry_msgs7Vector3C1Ev>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3328      	adds	r3, #40	; 0x28
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff fad5 	bl	8001f98 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	0800e678 	.word	0x0800e678

080029fc <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f103 0008 	add.w	r0, r3, #8
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	4413      	add	r3, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	f7ff fae6 	bl	8001fe8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4413      	add	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	4413      	add	r3, r2
 8002a30:	4619      	mov	r1, r3
 8002a32:	f7ff fad9 	bl	8001fe8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002a36:	4602      	mov	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
      return offset;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
    }
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f103 0008 	add.w	r0, r3, #8
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	4413      	add	r3, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	f7ff fc33 	bl	80022ce <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f7ff fc26 	bl	80022ce <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002a82:	4602      	mov	r2, r0
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
     return offset;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
    }
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	0800e594 	.word	0x0800e594

08002ab0 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	0800e5a8 	.word	0x0800e5a8

08002acc <_Z12vel_callbackRKN13geometry_msgs5TwistE>:
ros::NodeHandle nh;
int n=0;
geometry_msgs::Twist speed;
ros::Publisher pub("speed_fromSTM",&speed);
void vel_callback(const geometry_msgs::Twist &msg)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002ada:	490a      	ldr	r1, [pc, #40]	; (8002b04 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 8002adc:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002ae6:	4908      	ldr	r1, [pc, #32]	; (8002b08 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x3c>)
 8002ae8:	e9c1 2300 	strd	r2, r3, [r1]
	W=msg.angular.z;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002af2:	4906      	ldr	r1, [pc, #24]	; (8002b0c <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x40>)
 8002af4:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	240003e0 	.word	0x240003e0
 8002b08:	240003e8 	.word	0x240003e8
 8002b0c:	240003f0 	.word	0x240003f0

08002b10 <realspeed>:

void realspeed()
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
	speed.linear.x=rVx;
 8002b14:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <realspeed+0x40>)
 8002b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1a:	490e      	ldr	r1, [pc, #56]	; (8002b54 <realspeed+0x44>)
 8002b1c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	speed.linear.y=rVy;
 8002b20:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <realspeed+0x48>)
 8002b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b26:	490b      	ldr	r1, [pc, #44]	; (8002b54 <realspeed+0x44>)
 8002b28:	e9c1 2306 	strd	r2, r3, [r1, #24]
	speed.angular.z=rW;
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <realspeed+0x4c>)
 8002b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b32:	4908      	ldr	r1, [pc, #32]	; (8002b54 <realspeed+0x44>)
 8002b34:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pub.publish(&speed);
 8002b38:	4906      	ldr	r1, [pc, #24]	; (8002b54 <realspeed+0x44>)
 8002b3a:	4809      	ldr	r0, [pc, #36]	; (8002b60 <realspeed+0x50>)
 8002b3c:	f7ff f837 	bl	8001bae <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	n++;
 8002b40:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <realspeed+0x54>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3301      	adds	r3, #1
 8002b46:	4a07      	ldr	r2, [pc, #28]	; (8002b64 <realspeed+0x54>)
 8002b48:	6013      	str	r3, [r2, #0]
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	240003f8 	.word	0x240003f8
 8002b54:	24000d58 	.word	0x24000d58
 8002b58:	24000400 	.word	0x24000400
 8002b5c:	24000408 	.word	0x24000408
 8002b60:	24000da0 	.word	0x24000da0
 8002b64:	24000d50 	.word	0x24000d50

08002b68 <HAL_UART_TxCpltCallback>:

ros::Subscriber<geometry_msgs::Twist> sub("cmdvel_toSTM",vel_callback);


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
nh.getHardware()->flush();
 8002b70:	4805      	ldr	r0, [pc, #20]	; (8002b88 <HAL_UART_TxCpltCallback+0x20>)
 8002b72:	f000 f9d1 	bl	8002f18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002b76:	4603      	mov	r3, r0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff f95f 	bl	8001e3c <_ZN13STM32Hardware5flushEv>
 }
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	24000414 	.word	0x24000414

08002b8c <setup>:
 //void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 //{
 //nh.getHardware()->reset_rbuf();
 //}
 void setup(void)
 {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
 nh.initNode();
 8002b90:	4806      	ldr	r0, [pc, #24]	; (8002bac <setup+0x20>)
 8002b92:	f000 f9cd 	bl	8002f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
 nh.subscribe(sub);
 8002b96:	4906      	ldr	r1, [pc, #24]	; (8002bb0 <setup+0x24>)
 8002b98:	4804      	ldr	r0, [pc, #16]	; (8002bac <setup+0x20>)
 8002b9a:	f000 f9e6 	bl	8002f6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
 nh.advertise(pub);
 8002b9e:	4905      	ldr	r1, [pc, #20]	; (8002bb4 <setup+0x28>)
 8002ba0:	4802      	ldr	r0, [pc, #8]	; (8002bac <setup+0x20>)
 8002ba2:	f000 fa0d 	bl	8002fc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
 }
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	24000414 	.word	0x24000414
 8002bb0:	24000db8 	.word	0x24000db8
 8002bb4:	24000da0 	.word	0x24000da0

08002bb8 <loop>:
 void loop(void)
 {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
 //pub.publish(&speed);
 nh.spinOnce();
 8002bbc:	4802      	ldr	r0, [pc, #8]	; (8002bc8 <loop+0x10>)
 8002bbe:	f000 fa2f 	bl	8003020 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
 }
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	24000414 	.word	0x24000414

08002bcc <_Z13Error_Handlerv>:

 /* UART Communication */
 void Error_Handler(void)
 {
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd0:	b672      	cpsid	i
}
 8002bd2:	bf00      	nop
   /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while (1)
 8002bd4:	e7fe      	b.n	8002bd4 <_Z13Error_Handlerv+0x8>
	...

08002bd8 <_ZL19MX_USART3_UART_Initv>:
   }
   /* USER CODE END Error_Handler_Debug */
 }

 static void MX_USART3_UART_Init(void)
 {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
   /* USER CODE END USART3_Init 0 */

   /* USER CODE BEGIN USART3_Init 1 */

   /* USER CODE END USART3_Init 1 */
   huart3.Instance = USART3;
 8002bdc:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002bde:	4a2d      	ldr	r2, [pc, #180]	; (8002c94 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8002be0:	601a      	str	r2, [r3, #0]
   huart3.Init.BaudRate = 57600;
 8002be2:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002be4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002be8:	605a      	str	r2, [r3, #4]
   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bea:	4b29      	ldr	r3, [pc, #164]	; (8002c90 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	609a      	str	r2, [r3, #8]
   huart3.Init.StopBits = UART_STOPBITS_1;
 8002bf0:	4b27      	ldr	r3, [pc, #156]	; (8002c90 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	60da      	str	r2, [r3, #12]
   huart3.Init.Parity = UART_PARITY_NONE;
 8002bf6:	4b26      	ldr	r3, [pc, #152]	; (8002c90 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	611a      	str	r2, [r3, #16]
   huart3.Init.Mode = UART_MODE_TX_RX;
 8002bfc:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002bfe:	220c      	movs	r2, #12
 8002c00:	615a      	str	r2, [r3, #20]
   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c02:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	619a      	str	r2, [r3, #24]
   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c08:	4b21      	ldr	r3, [pc, #132]	; (8002c90 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	61da      	str	r2, [r3, #28]
   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c0e:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	621a      	str	r2, [r3, #32]
   huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c14:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24
   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c1a:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28
   if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c20:	481b      	ldr	r0, [pc, #108]	; (8002c90 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002c22:	f009 f8e9 	bl	800bdf8 <HAL_UART_Init>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf14      	ite	ne
 8002c2c:	2301      	movne	r3, #1
 8002c2e:	2300      	moveq	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <_ZL19MX_USART3_UART_Initv+0x62>
   {
     Error_Handler();
 8002c36:	f7ff ffc9 	bl	8002bcc <_Z13Error_Handlerv>
   }
   if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4814      	ldr	r0, [pc, #80]	; (8002c90 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002c3e:	f00b f96d 	bl	800df1c <HAL_UARTEx_SetTxFifoThreshold>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	bf14      	ite	ne
 8002c48:	2301      	movne	r3, #1
 8002c4a:	2300      	moveq	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <_ZL19MX_USART3_UART_Initv+0x7e>
   {
     Error_Handler();
 8002c52:	f7ff ffbb 	bl	8002bcc <_Z13Error_Handlerv>
   }
   if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c56:	2100      	movs	r1, #0
 8002c58:	480d      	ldr	r0, [pc, #52]	; (8002c90 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002c5a:	f00b f99d 	bl	800df98 <HAL_UARTEx_SetRxFifoThreshold>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf14      	ite	ne
 8002c64:	2301      	movne	r3, #1
 8002c66:	2300      	moveq	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <_ZL19MX_USART3_UART_Initv+0x9a>
   {
     Error_Handler();
 8002c6e:	f7ff ffad 	bl	8002bcc <_Z13Error_Handlerv>
   }
   if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002c72:	4807      	ldr	r0, [pc, #28]	; (8002c90 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002c74:	f00b f919 	bl	800deaa <HAL_UARTEx_DisableFifoMode>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	bf14      	ite	ne
 8002c7e:	2301      	movne	r3, #1
 8002c80:	2300      	moveq	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <_ZL19MX_USART3_UART_Initv+0xb4>
   {
     Error_Handler();
 8002c88:	f7ff ffa0 	bl	8002bcc <_Z13Error_Handlerv>
   }
   /* USER CODE BEGIN USART3_Init 2 */

   /* USER CODE END USART3_Init 2 */

 }
 8002c8c:	bf00      	nop
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	2400025c 	.word	0x2400025c
 8002c94:	40004800 	.word	0x40004800

08002c98 <HAL_UART_ErrorCallback>:
 void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
     if (huart == &huart3)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a14      	ldr	r2, [pc, #80]	; (8002cf4 <HAL_UART_ErrorCallback+0x5c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d120      	bne.n	8002cea <HAL_UART_ErrorCallback+0x52>
     {
         rVx = 0.0;
 8002ca8:	4913      	ldr	r1, [pc, #76]	; (8002cf8 <HAL_UART_ErrorCallback+0x60>)
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	e9c1 2300 	strd	r2, r3, [r1]
         rVy = 0.0;
 8002cb6:	4911      	ldr	r1, [pc, #68]	; (8002cfc <HAL_UART_ErrorCallback+0x64>)
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9c1 2300 	strd	r2, r3, [r1]
         rW = 0.0;
 8002cc4:	490e      	ldr	r1, [pc, #56]	; (8002d00 <HAL_UART_ErrorCallback+0x68>)
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	e9c1 2300 	strd	r2, r3, [r1]
         HAL_UART_DeInit(&huart3);
 8002cd2:	4808      	ldr	r0, [pc, #32]	; (8002cf4 <HAL_UART_ErrorCallback+0x5c>)
 8002cd4:	f009 f8e0 	bl	800be98 <HAL_UART_DeInit>
         MX_USART3_UART_Init();
 8002cd8:	f7ff ff7e 	bl	8002bd8 <_ZL19MX_USART3_UART_Initv>
         nh.getHardware()->init();
 8002cdc:	4809      	ldr	r0, [pc, #36]	; (8002d04 <HAL_UART_ErrorCallback+0x6c>)
 8002cde:	f000 f91b 	bl	8002f18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff f85f 	bl	8001da8 <_ZN13STM32Hardware4initEv>
     }
 }
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	2400025c 	.word	0x2400025c
 8002cf8:	240003f8 	.word	0x240003f8
 8002cfc:	24000400 	.word	0x24000400
 8002d00:	24000408 	.word	0x24000408
 8002d04:	24000414 	.word	0x24000414

08002d08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d80d      	bhi.n	8002d38 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	fa22 f103 	lsr.w	r1, r2, r3
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	b2ca      	uxtb	r2, r1
 8002d2e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3301      	adds	r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	e7ee      	b.n	8002d16 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	d811      	bhi.n	8002d82 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6839      	ldr	r1, [r7, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	440a      	add	r2, r1
 8002d68:	7812      	ldrb	r2, [r2, #0]
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	00d2      	lsls	r2, r2, #3
 8002d70:	fa01 f202 	lsl.w	r2, r1, r2
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	e7ea      	b.n	8002d58 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	4a04      	ldr	r2, [pc, #16]	; (8002dac <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4618      	mov	r0, r3
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	0800e6c0 	.word	0x0800e6c0

08002db0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff ffe8 	bl	8002d90 <_ZN3ros15NodeHandleBase_C1Ev>
 8002dc0:	4a3a      	ldr	r2, [pc, #232]	; (8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3304      	adds	r3, #4
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe ffd0 	bl	8001d70 <_ZN13STM32HardwareC1Ev>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe fc0c 	bl	80015fc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2b18      	cmp	r3, #24
 8002dec:	d80b      	bhi.n	8002e06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	3301      	adds	r3, #1
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	e7f0      	b.n	8002de8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b18      	cmp	r3, #24
 8002e0e:	d80a      	bhi.n	8002e26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002e18:	2100      	movs	r1, #0
 8002e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	3301      	adds	r3, #1
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	e7f1      	b.n	8002e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e30:	d20a      	bcs.n	8002e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4413      	add	r3, r2
 8002e38:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3301      	adds	r3, #1
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	e7f0      	b.n	8002e2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e52:	d20a      	bcs.n	8002e6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002e5e:	2200      	movs	r2, #0
 8002e60:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	3301      	adds	r3, #1
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	e7f0      	b.n	8002e4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	0800e664 	.word	0x0800e664

08002eb0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	0800e6a8 	.word	0x0800e6a8

08002ed0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ffe5 	bl	8002eb0 <_ZN3ros11Subscriber_C1Ev>
 8002ee6:	4a0b      	ldr	r2, [pc, #44]	; (8002f14 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3310      	adds	r3, #16
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff fd67 	bl	80029c4 <_ZN13geometry_msgs5TwistC1Ev>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	659a      	str	r2, [r3, #88]	; 0x58
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	609a      	str	r2, [r3, #8]
  };
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	0800e64c 	.word	0x0800e64c

08002f18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3304      	adds	r3, #4
  }
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fe ff33 	bl	8001da8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8002f6a:	b480      	push	{r7}
 8002f6c:	b085      	sub	sp, #20
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2b18      	cmp	r3, #24
 8002f7c:	dc19      	bgt.n	8002fb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10d      	bne.n	8002faa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8002f8e:	6839      	ldr	r1, [r7, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
        return true;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e004      	b.n	8002fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3301      	adds	r3, #1
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	e7e2      	b.n	8002f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8002fb2:	2300      	movs	r3, #0
  }
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b18      	cmp	r3, #24
 8002fd2:	dc1e      	bgt.n	8003012 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d111      	bne.n	800300a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	60da      	str	r2, [r3, #12]
        return true;
 8003006:	2301      	movs	r3, #1
 8003008:	e004      	b.n	8003014 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	3301      	adds	r3, #1
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	e7dd      	b.n	8002fce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8003012:	2300      	movs	r3, #0
  }
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3304      	adds	r3, #4
 800302c:	4618      	mov	r0, r3
 800302e:	f7fe ffa7 	bl	8001f80 <_ZN13STM32Hardware4timeEv>
 8003032:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003042:	4293      	cmp	r3, r2
 8003044:	d903      	bls.n	800304e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003054:	2b00      	cmp	r3, #0
 8003056:	d009      	beq.n	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	429a      	cmp	r2, r3
 8003062:	d903      	bls.n	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003072:	2b00      	cmp	r3, #0
 8003074:	d014      	beq.n	80030a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3304      	adds	r3, #4
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe ff80 	bl	8001f80 <_ZN13STM32Hardware4timeEv>
 8003080:	4602      	mov	r2, r0
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1ad2      	subs	r2, r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800308c:	429a      	cmp	r2, r3
 800308e:	bf8c      	ite	hi
 8003090:	2301      	movhi	r3, #1
 8003092:	2300      	movls	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800309a:	f06f 0301 	mvn.w	r3, #1
 800309e:	e194      	b.n	80033ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3304      	adds	r3, #4
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fe fe9b 	bl	8001de0 <_ZN13STM32Hardware4readEv>
 80030aa:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f2c0 8174 	blt.w	800339c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	441a      	add	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80030ca:	2b07      	cmp	r3, #7
 80030cc:	d11e      	bne.n	800310c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80030d4:	1c59      	adds	r1, r3, #1
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	b2d1      	uxtb	r1, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	4413      	add	r3, r2
 80030e4:	460a      	mov	r2, r1
 80030e6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80030f0:	1e5a      	subs	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1b4      	bne.n	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2208      	movs	r2, #8
 8003106:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800310a:	e7af      	b.n	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003112:	2b00      	cmp	r3, #0
 8003114:	d128      	bne.n	8003168 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2bff      	cmp	r3, #255	; 0xff
 800311a:	d10d      	bne.n	8003138 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f103 0214 	add.w	r2, r3, #20
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003136:	e799      	b.n	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3304      	adds	r3, #4
 800313c:	4618      	mov	r0, r3
 800313e:	f7fe ff1f 	bl	8001f80 <_ZN13STM32Hardware4timeEv>
 8003142:	4602      	mov	r2, r0
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	f241 3288 	movw	r2, #5000	; 0x1388
 800314c:	4293      	cmp	r3, r2
 800314e:	bf8c      	ite	hi
 8003150:	2301      	movhi	r3, #1
 8003152:	2300      	movls	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d088      	beq.n	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003162:	f06f 0301 	mvn.w	r3, #1
 8003166:	e130      	b.n	80033ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800316e:	2b01      	cmp	r3, #1
 8003170:	d118      	bne.n	80031a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2bfe      	cmp	r3, #254	; 0xfe
 8003176:	d107      	bne.n	8003188 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003186:	e771      	b.n	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003196:	2b00      	cmp	r3, #0
 8003198:	f47f af68 	bne.w	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f918 	bl	80033d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80031a2:	e763      	b.n	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d113      	bne.n	80031d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80031d4:	e74a      	b.n	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d110      	bne.n	8003202 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	021b      	lsls	r3, r3, #8
 80031ea:	441a      	add	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003200:	e734      	b.n	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003208:	2b04      	cmp	r3, #4
 800320a:	d116      	bne.n	800323a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003212:	425a      	negs	r2, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	bf58      	it	pl
 800321a:	4253      	negpl	r3, r2
 800321c:	2bff      	cmp	r3, #255	; 0xff
 800321e:	d107      	bne.n	8003230 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800322e:	e71d      	b.n	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003238:	e718      	b.n	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003240:	2b05      	cmp	r3, #5
 8003242:	d10f      	bne.n	8003264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003262:	e703      	b.n	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800326a:	2b06      	cmp	r3, #6
 800326c:	d117      	bne.n	800329e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	021b      	lsls	r3, r3, #8
 8003278:	441a      	add	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2207      	movs	r2, #7
 8003284:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800328e:	2b00      	cmp	r3, #0
 8003290:	f47f aeec 	bne.w	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2208      	movs	r2, #8
 8003298:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800329c:	e6e6      	b.n	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	f47f aee1 	bne.w	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80032b8:	425a      	negs	r2, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	bf58      	it	pl
 80032c0:	4253      	negpl	r3, r2
 80032c2:	2bff      	cmp	r3, #255	; 0xff
 80032c4:	f47f aed2 	bne.w	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d110      	bne.n	80032f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f87d 	bl	80033d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f898 	bl	800340e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295
 80032f2:	e06a      	b.n	80033ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80032fa:	2b0a      	cmp	r3, #10
 80032fc:	d107      	bne.n	800330e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003304:	4619      	mov	r1, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f960 	bl	80035cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800330c:	e6ae      	b.n	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003314:	2b06      	cmp	r3, #6
 8003316:	d10e      	bne.n	8003336 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003324:	4619      	mov	r1, r3
 8003326:	4610      	mov	r0, r2
 8003328:	f7fe fa9d 	bl	8001866 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003334:	e69a      	b.n	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800333c:	2b0b      	cmp	r3, #11
 800333e:	d104      	bne.n	800334a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003348:	e690      	b.n	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003350:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f202 2222 	addw	r2, r2, #546	; 0x222
 800335a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f43f ae84 	beq.w	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800336a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003374:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800337e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003396:	4611      	mov	r1, r2
 8003398:	4798      	blx	r3
    while (true)
 800339a:	e667      	b.n	800306c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 800339c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00f      	beq.n	80033c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d906      	bls.n	80033c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f809 	bl	80033d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80033c8:	2300      	movs	r3, #0
  }
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b086      	sub	sp, #24
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80033da:	f107 030c 	add.w	r3, r7, #12
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fd fda8 	bl	8000f34 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f107 020c 	add.w	r2, r7, #12
 80033ee:	210a      	movs	r1, #10
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	4798      	blx	r3
    rt_time = hardware_.time();
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3304      	adds	r3, #4
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fe fdc1 	bl	8001f80 <_ZN13STM32Hardware4timeEv>
 80033fe:	4602      	mov	r2, r0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003406:	bf00      	nop
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800340e:	b590      	push	{r4, r7, lr}
 8003410:	b08b      	sub	sp, #44	; 0x2c
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003416:	f107 030c 	add.w	r3, r7, #12
 800341a:	4618      	mov	r0, r3
 800341c:	f7fd fe7a 	bl	8001114 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003420:	2300      	movs	r3, #0
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	2b18      	cmp	r3, #24
 8003428:	dc63      	bgt.n	80034f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d056      	beq.n	80034ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	b29b      	uxth	r3, r3
 800344e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	6859      	ldr	r1, [r3, #4]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3308      	adds	r3, #8
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4608      	mov	r0, r1
 800348a:	4798      	blx	r3
 800348c:	4603      	mov	r3, r0
 800348e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	330c      	adds	r3, #12
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4608      	mov	r0, r1
 80034b8:	4798      	blx	r3
 80034ba:	4603      	mov	r3, r0
 80034bc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80034be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034c2:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681c      	ldr	r4, [r3, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fe fb7c 	bl	8001bd6 <_ZN3ros9Publisher15getEndpointTypeEv>
 80034de:	4601      	mov	r1, r0
 80034e0:	f107 030c 	add.w	r3, r7, #12
 80034e4:	461a      	mov	r2, r3
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	3301      	adds	r3, #1
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
 80034f0:	e798      	b.n	8003424 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80034f2:	2300      	movs	r3, #0
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	2b18      	cmp	r3, #24
 80034fa:	dc5f      	bgt.n	80035bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003500:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d053      	beq.n	80035b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003510:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	b29b      	uxth	r3, r3
 800351c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003522:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003532:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003536:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3308      	adds	r3, #8
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4608      	mov	r0, r1
 800354e:	4798      	blx	r3
 8003550:	4603      	mov	r3, r0
 8003552:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003558:	f202 2222 	addw	r2, r2, #546	; 0x222
 800355c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003564:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4608      	mov	r0, r1
 8003574:	4798      	blx	r3
 8003576:	4603      	mov	r3, r0
 8003578:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800357a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800357e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681c      	ldr	r4, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800358e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003596:	f202 2222 	addw	r2, r2, #546	; 0x222
 800359a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3304      	adds	r3, #4
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4608      	mov	r0, r1
 80035a6:	4798      	blx	r3
 80035a8:	4601      	mov	r1, r0
 80035aa:	f107 030c 	add.w	r3, r7, #12
 80035ae:	461a      	mov	r2, r3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	3301      	adds	r3, #1
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ba:	e79c      	b.n	80034f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80035c4:	bf00      	nop
 80035c6:	372c      	adds	r7, #44	; 0x2c
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd90      	pop	{r4, r7, pc}

080035cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80035d6:	f107 0308 	add.w	r3, r7, #8
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fd fcaa 	bl	8000f34 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3304      	adds	r3, #4
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fe fccb 	bl	8001f80 <_ZN13STM32Hardware4timeEv>
 80035ea:	4602      	mov	r2, r0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80035f6:	f107 0308 	add.w	r3, r7, #8
 80035fa:	6839      	ldr	r1, [r7, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fd fd09 	bl	8001014 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	4915      	ldr	r1, [pc, #84]	; (800365c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003608:	fba1 1303 	umull	r1, r3, r1, r3
 800360c:	099b      	lsrs	r3, r3, #6
 800360e:	4413      	add	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003612:	6939      	ldr	r1, [r7, #16]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4b11      	ldr	r3, [pc, #68]	; (800365c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003618:	fba3 0302 	umull	r0, r3, r3, r2
 800361c:	099b      	lsrs	r3, r3, #6
 800361e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003622:	fb00 f303 	mul.w	r3, r0, r3
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	4a0d      	ldr	r2, [pc, #52]	; (8003660 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800362a:	fb02 f303 	mul.w	r3, r2, r3
 800362e:	440b      	add	r3, r1
 8003630:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003632:	f107 0308 	add.w	r3, r7, #8
 8003636:	3304      	adds	r3, #4
 8003638:	4619      	mov	r1, r3
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f8a6 	bl	800378c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3304      	adds	r3, #4
 8003644:	4618      	mov	r0, r3
 8003646:	f7fe fc9b 	bl	8001f80 <_ZN13STM32Hardware4timeEv>
 800364a:	4602      	mov	r2, r0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003652:	bf00      	nop
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	10624dd3 	.word	0x10624dd3
 8003660:	000f4240 	.word	0x000f4240

08003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b63      	cmp	r3, #99	; 0x63
 8003674:	dd09      	ble.n	800368a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800367c:	f083 0301 	eor.w	r3, r3, #1
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003686:	2300      	movs	r3, #0
 8003688:	e079      	b.n	800377e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003696:	3207      	adds	r2, #7
 8003698:	4611      	mov	r1, r2
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	4798      	blx	r3
 800369e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	22ff      	movs	r2, #255	; 0xff
 80036a4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	22fe      	movs	r2, #254	; 0xfe
 80036ac:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	0a1b      	lsrs	r3, r3, #8
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80036d6:	4413      	add	r3, r2
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	b21b      	sxth	r3, r3
 80036f2:	121b      	asrs	r3, r3, #8
 80036f4:	b21b      	sxth	r3, r3
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003702:	2305      	movs	r3, #5
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	3306      	adds	r3, #6
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	429a      	cmp	r2, r3
 800370e:	dc0d      	bgt.n	800372c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	4413      	add	r3, r2
 8003716:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	4413      	add	r3, r2
 8003722:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	3301      	adds	r3, #1
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	e7ec      	b.n	8003706 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	3307      	adds	r3, #7
 8003730:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	425a      	negs	r2, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	bf58      	it	pl
 800373c:	4253      	negpl	r3, r2
 800373e:	b2da      	uxtb	r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	1c59      	adds	r1, r3, #1
 8003744:	6179      	str	r1, [r7, #20]
 8003746:	43d2      	mvns	r2, r2
 8003748:	b2d1      	uxtb	r1, r2
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4413      	add	r3, r2
 800374e:	460a      	mov	r2, r1
 8003750:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800375a:	dc0a      	bgt.n	8003772 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	1d18      	adds	r0, r3, #4
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4619      	mov	r1, r3
 800376a:	f7fe fbc3 	bl	8001ef4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	e005      	b.n	800377e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003772:	4905      	ldr	r1, [pc, #20]	; (8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f849 	bl	800380c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800377a:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800377e:	4618      	mov	r0, r3
 8003780:	3720      	adds	r7, #32
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	0800e5cc 	.word	0x0800e5cc

0800378c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3304      	adds	r3, #4
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe fbf0 	bl	8001f80 <_ZN13STM32Hardware4timeEv>
 80037a0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4915      	ldr	r1, [pc, #84]	; (8003800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80037aa:	fba1 1303 	umull	r1, r3, r1, r3
 80037ae:	099b      	lsrs	r3, r3, #6
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	1e5a      	subs	r2, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	6859      	ldr	r1, [r3, #4]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80037c2:	fba3 0302 	umull	r0, r3, r3, r2
 80037c6:	099b      	lsrs	r3, r3, #6
 80037c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037cc:	fb00 f303 	mul.w	r3, r0, r3
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	4a0c      	ldr	r2, [pc, #48]	; (8003804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80037d4:	fb02 f303 	mul.w	r3, r2, r3
 80037d8:	1aca      	subs	r2, r1, r3
 80037da:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80037dc:	4413      	add	r3, r2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f7fc ff14 	bl	8000620 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80037f8:	bf00      	nop
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	10624dd3 	.word	0x10624dd3
 8003804:	000f4240 	.word	0x000f4240
 8003808:	3b9aca00 	.word	0x3b9aca00

0800380c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	2103      	movs	r1, #3
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f804 	bl	8003828 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	460b      	mov	r3, r1
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003836:	f107 0314 	add.w	r3, r7, #20
 800383a:	4618      	mov	r0, r3
 800383c:	f7fd fe2e 	bl	800149c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003840:	7afb      	ldrb	r3, [r7, #11]
 8003842:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f107 0214 	add.w	r2, r7, #20
 8003852:	2107      	movs	r1, #7
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	4798      	blx	r3
  }
 8003858:	bf00      	nop
 800385a:	3720      	adds	r7, #32
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <_Z41__static_initialization_and_destruction_0ii>:
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d116      	bne.n	800389e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003876:	4293      	cmp	r3, r2
 8003878:	d111      	bne.n	800389e <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 800387a:	480b      	ldr	r0, [pc, #44]	; (80038a8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800387c:	f7ff fa98 	bl	8002db0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Twist speed;
 8003880:	480a      	ldr	r0, [pc, #40]	; (80038ac <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003882:	f7ff f89f 	bl	80029c4 <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher pub("speed_fromSTM",&speed);
 8003886:	2300      	movs	r3, #0
 8003888:	4a08      	ldr	r2, [pc, #32]	; (80038ac <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800388a:	4909      	ldr	r1, [pc, #36]	; (80038b0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800388c:	4809      	ldr	r0, [pc, #36]	; (80038b4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800388e:	f7fe f977 	bl	8001b80 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub("cmdvel_toSTM",vel_callback);
 8003892:	2301      	movs	r3, #1
 8003894:	4a08      	ldr	r2, [pc, #32]	; (80038b8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003896:	4909      	ldr	r1, [pc, #36]	; (80038bc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003898:	4809      	ldr	r0, [pc, #36]	; (80038c0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800389a:	f7ff fb19 	bl	8002ed0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
 }
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	24000414 	.word	0x24000414
 80038ac:	24000d58 	.word	0x24000d58
 80038b0:	0800e608 	.word	0x0800e608
 80038b4:	24000da0 	.word	0x24000da0
 80038b8:	08002acd 	.word	0x08002acd
 80038bc:	0800e618 	.word	0x0800e618
 80038c0:	24000db8 	.word	0x24000db8

080038c4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3310      	adds	r3, #16
 80038d2:	6839      	ldr	r1, [r7, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff f8b7 	bl	8002a48 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	3210      	adds	r2, #16
 80038e2:	4610      	mov	r0, r2
 80038e4:	4798      	blx	r3
  }
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 80038fa:	4618      	mov	r0, r3
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3310      	adds	r3, #16
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff f8be 	bl	8002a94 <_ZN13geometry_msgs5Twist7getTypeEv>
 8003918:	4603      	mov	r3, r0
  }
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3310      	adds	r3, #16
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff f8be 	bl	8002ab0 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8003934:	4603      	mov	r3, r0
  }
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
    return configured_;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <_GLOBAL__sub_I_nh>:
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
 800395c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003960:	2001      	movs	r0, #1
 8003962:	f7ff ff7d 	bl	8003860 <_Z41__static_initialization_and_destruction_0ii>
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800396e:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <HAL_MspInit+0x30>)
 8003970:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003974:	4a08      	ldr	r2, [pc, #32]	; (8003998 <HAL_MspInit+0x30>)
 8003976:	f043 0302 	orr.w	r3, r3, #2
 800397a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800397e:	4b06      	ldr	r3, [pc, #24]	; (8003998 <HAL_MspInit+0x30>)
 8003980:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	607b      	str	r3, [r7, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	58024400 	.word	0x58024400

0800399c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08e      	sub	sp, #56	; 0x38
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	609a      	str	r2, [r3, #8]
 80039b0:	60da      	str	r2, [r3, #12]
 80039b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a4f      	ldr	r2, [pc, #316]	; (8003af8 <HAL_TIM_Encoder_MspInit+0x15c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d12f      	bne.n	8003a1e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039be:	4b4f      	ldr	r3, [pc, #316]	; (8003afc <HAL_TIM_Encoder_MspInit+0x160>)
 80039c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039c4:	4a4d      	ldr	r2, [pc, #308]	; (8003afc <HAL_TIM_Encoder_MspInit+0x160>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80039ce:	4b4b      	ldr	r3, [pc, #300]	; (8003afc <HAL_TIM_Encoder_MspInit+0x160>)
 80039d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	623b      	str	r3, [r7, #32]
 80039da:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039dc:	4b47      	ldr	r3, [pc, #284]	; (8003afc <HAL_TIM_Encoder_MspInit+0x160>)
 80039de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039e2:	4a46      	ldr	r2, [pc, #280]	; (8003afc <HAL_TIM_Encoder_MspInit+0x160>)
 80039e4:	f043 0310 	orr.w	r3, r3, #16
 80039e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039ec:	4b43      	ldr	r3, [pc, #268]	; (8003afc <HAL_TIM_Encoder_MspInit+0x160>)
 80039ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80039fa:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a00:	2302      	movs	r3, #2
 8003a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a14:	4619      	mov	r1, r3
 8003a16:	483a      	ldr	r0, [pc, #232]	; (8003b00 <HAL_TIM_Encoder_MspInit+0x164>)
 8003a18:	f003 fd54 	bl	80074c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8003a1c:	e067      	b.n	8003aee <HAL_TIM_Encoder_MspInit+0x152>
  else if(htim_encoder->Instance==TIM4)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a38      	ldr	r2, [pc, #224]	; (8003b04 <HAL_TIM_Encoder_MspInit+0x168>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d12f      	bne.n	8003a88 <HAL_TIM_Encoder_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a28:	4b34      	ldr	r3, [pc, #208]	; (8003afc <HAL_TIM_Encoder_MspInit+0x160>)
 8003a2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a2e:	4a33      	ldr	r2, [pc, #204]	; (8003afc <HAL_TIM_Encoder_MspInit+0x160>)
 8003a30:	f043 0304 	orr.w	r3, r3, #4
 8003a34:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a38:	4b30      	ldr	r3, [pc, #192]	; (8003afc <HAL_TIM_Encoder_MspInit+0x160>)
 8003a3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	61bb      	str	r3, [r7, #24]
 8003a44:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a46:	4b2d      	ldr	r3, [pc, #180]	; (8003afc <HAL_TIM_Encoder_MspInit+0x160>)
 8003a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a4c:	4a2b      	ldr	r2, [pc, #172]	; (8003afc <HAL_TIM_Encoder_MspInit+0x160>)
 8003a4e:	f043 0308 	orr.w	r3, r3, #8
 8003a52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a56:	4b29      	ldr	r3, [pc, #164]	; (8003afc <HAL_TIM_Encoder_MspInit+0x160>)
 8003a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	617b      	str	r3, [r7, #20]
 8003a62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003a64:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a72:	2300      	movs	r3, #0
 8003a74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a76:	2302      	movs	r3, #2
 8003a78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4821      	ldr	r0, [pc, #132]	; (8003b08 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003a82:	f003 fd1f 	bl	80074c4 <HAL_GPIO_Init>
}
 8003a86:	e032      	b.n	8003aee <HAL_TIM_Encoder_MspInit+0x152>
  else if(htim_encoder->Instance==TIM23)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a1f      	ldr	r2, [pc, #124]	; (8003b0c <HAL_TIM_Encoder_MspInit+0x170>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d12d      	bne.n	8003aee <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8003a92:	4b1a      	ldr	r3, [pc, #104]	; (8003afc <HAL_TIM_Encoder_MspInit+0x160>)
 8003a94:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003a98:	4a18      	ldr	r2, [pc, #96]	; (8003afc <HAL_TIM_Encoder_MspInit+0x160>)
 8003a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a9e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003aa2:	4b16      	ldr	r3, [pc, #88]	; (8003afc <HAL_TIM_Encoder_MspInit+0x160>)
 8003aa4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ab0:	4b12      	ldr	r3, [pc, #72]	; (8003afc <HAL_TIM_Encoder_MspInit+0x160>)
 8003ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ab6:	4a11      	ldr	r2, [pc, #68]	; (8003afc <HAL_TIM_Encoder_MspInit+0x160>)
 8003ab8:	f043 0320 	orr.w	r3, r3, #32
 8003abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ac0:	4b0e      	ldr	r3, [pc, #56]	; (8003afc <HAL_TIM_Encoder_MspInit+0x160>)
 8003ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ada:	2300      	movs	r3, #0
 8003adc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8003ade:	230d      	movs	r3, #13
 8003ae0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4809      	ldr	r0, [pc, #36]	; (8003b10 <HAL_TIM_Encoder_MspInit+0x174>)
 8003aea:	f003 fceb 	bl	80074c4 <HAL_GPIO_Init>
}
 8003aee:	bf00      	nop
 8003af0:	3738      	adds	r7, #56	; 0x38
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40010000 	.word	0x40010000
 8003afc:	58024400 	.word	0x58024400
 8003b00:	58021000 	.word	0x58021000
 8003b04:	40000800 	.word	0x40000800
 8003b08:	58020c00 	.word	0x58020c00
 8003b0c:	4000e000 	.word	0x4000e000
 8003b10:	58021400 	.word	0x58021400

08003b14 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b24:	d10f      	bne.n	8003b46 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b26:	4b15      	ldr	r3, [pc, #84]	; (8003b7c <HAL_TIM_PWM_MspInit+0x68>)
 8003b28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b2c:	4a13      	ldr	r2, [pc, #76]	; (8003b7c <HAL_TIM_PWM_MspInit+0x68>)
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b36:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <HAL_TIM_PWM_MspInit+0x68>)
 8003b38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003b44:	e013      	b.n	8003b6e <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM8)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a0d      	ldr	r2, [pc, #52]	; (8003b80 <HAL_TIM_PWM_MspInit+0x6c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10e      	bne.n	8003b6e <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003b50:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <HAL_TIM_PWM_MspInit+0x68>)
 8003b52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b56:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <HAL_TIM_PWM_MspInit+0x68>)
 8003b58:	f043 0302 	orr.w	r3, r3, #2
 8003b5c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b60:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <HAL_TIM_PWM_MspInit+0x68>)
 8003b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	60bb      	str	r3, [r7, #8]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
}
 8003b6e:	bf00      	nop
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	58024400 	.word	0x58024400
 8003b80:	40010400 	.word	0x40010400

08003b84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a0e      	ldr	r2, [pc, #56]	; (8003bcc <HAL_TIM_Base_MspInit+0x48>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d116      	bne.n	8003bc4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b96:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <HAL_TIM_Base_MspInit+0x4c>)
 8003b98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b9c:	4a0c      	ldr	r2, [pc, #48]	; (8003bd0 <HAL_TIM_Base_MspInit+0x4c>)
 8003b9e:	f043 0302 	orr.w	r3, r3, #2
 8003ba2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <HAL_TIM_Base_MspInit+0x4c>)
 8003ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	201d      	movs	r0, #29
 8003bba:	f000 fc50 	bl	800445e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003bbe:	201d      	movs	r0, #29
 8003bc0:	f000 fc67 	bl	8004492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003bc4:	bf00      	nop
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40000400 	.word	0x40000400
 8003bd0:	58024400 	.word	0x58024400

08003bd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08a      	sub	sp, #40	; 0x28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bdc:	f107 0314 	add.w	r3, r7, #20
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	609a      	str	r2, [r3, #8]
 8003be8:	60da      	str	r2, [r3, #12]
 8003bea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf4:	d11f      	bne.n	8003c36 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf6:	4b24      	ldr	r3, [pc, #144]	; (8003c88 <HAL_TIM_MspPostInit+0xb4>)
 8003bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bfc:	4a22      	ldr	r2, [pc, #136]	; (8003c88 <HAL_TIM_MspPostInit+0xb4>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c06:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <HAL_TIM_MspPostInit+0xb4>)
 8003c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8003c14:	2309      	movs	r3, #9
 8003c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c18:	2302      	movs	r3, #2
 8003c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c20:	2300      	movs	r3, #0
 8003c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c24:	2301      	movs	r3, #1
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c28:	f107 0314 	add.w	r3, r7, #20
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4817      	ldr	r0, [pc, #92]	; (8003c8c <HAL_TIM_MspPostInit+0xb8>)
 8003c30:	f003 fc48 	bl	80074c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003c34:	e024      	b.n	8003c80 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM8)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a15      	ldr	r2, [pc, #84]	; (8003c90 <HAL_TIM_MspPostInit+0xbc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d11f      	bne.n	8003c80 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c40:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <HAL_TIM_MspPostInit+0xb4>)
 8003c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c46:	4a10      	ldr	r2, [pc, #64]	; (8003c88 <HAL_TIM_MspPostInit+0xb4>)
 8003c48:	f043 0304 	orr.w	r3, r3, #4
 8003c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c50:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <HAL_TIM_MspPostInit+0xb4>)
 8003c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c64:	2302      	movs	r3, #2
 8003c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003c70:	2303      	movs	r3, #3
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c74:	f107 0314 	add.w	r3, r7, #20
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4806      	ldr	r0, [pc, #24]	; (8003c94 <HAL_TIM_MspPostInit+0xc0>)
 8003c7c:	f003 fc22 	bl	80074c4 <HAL_GPIO_Init>
}
 8003c80:	bf00      	nop
 8003c82:	3728      	adds	r7, #40	; 0x28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	58024400 	.word	0x58024400
 8003c8c:	58020000 	.word	0x58020000
 8003c90:	40010400 	.word	0x40010400
 8003c94:	58020800 	.word	0x58020800

08003c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b0b8      	sub	sp, #224	; 0xe0
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cb0:	f107 0310 	add.w	r3, r7, #16
 8003cb4:	22b8      	movs	r2, #184	; 0xb8
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f00a fa4d 	bl	800e158 <memset>
  if(huart->Instance==USART3)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a5a      	ldr	r2, [pc, #360]	; (8003e2c <HAL_UART_MspInit+0x194>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	f040 80ac 	bne.w	8003e22 <HAL_UART_MspInit+0x18a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003cca:	f04f 0202 	mov.w	r2, #2
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cdc:	f107 0310 	add.w	r3, r7, #16
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f004 fe53 	bl	800898c <HAL_RCCEx_PeriphCLKConfig>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8003cec:	f7fd f8fc 	bl	8000ee8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cf0:	4b4f      	ldr	r3, [pc, #316]	; (8003e30 <HAL_UART_MspInit+0x198>)
 8003cf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cf6:	4a4e      	ldr	r2, [pc, #312]	; (8003e30 <HAL_UART_MspInit+0x198>)
 8003cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cfc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003d00:	4b4b      	ldr	r3, [pc, #300]	; (8003e30 <HAL_UART_MspInit+0x198>)
 8003d02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d0e:	4b48      	ldr	r3, [pc, #288]	; (8003e30 <HAL_UART_MspInit+0x198>)
 8003d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d14:	4a46      	ldr	r2, [pc, #280]	; (8003e30 <HAL_UART_MspInit+0x198>)
 8003d16:	f043 0304 	orr.w	r3, r3, #4
 8003d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d1e:	4b44      	ldr	r3, [pc, #272]	; (8003e30 <HAL_UART_MspInit+0x198>)
 8003d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d34:	2302      	movs	r3, #2
 8003d36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d40:	2300      	movs	r3, #0
 8003d42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d46:	2307      	movs	r3, #7
 8003d48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d4c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d50:	4619      	mov	r1, r3
 8003d52:	4838      	ldr	r0, [pc, #224]	; (8003e34 <HAL_UART_MspInit+0x19c>)
 8003d54:	f003 fbb6 	bl	80074c4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8003d58:	4b37      	ldr	r3, [pc, #220]	; (8003e38 <HAL_UART_MspInit+0x1a0>)
 8003d5a:	4a38      	ldr	r2, [pc, #224]	; (8003e3c <HAL_UART_MspInit+0x1a4>)
 8003d5c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003d5e:	4b36      	ldr	r3, [pc, #216]	; (8003e38 <HAL_UART_MspInit+0x1a0>)
 8003d60:	222d      	movs	r2, #45	; 0x2d
 8003d62:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d64:	4b34      	ldr	r3, [pc, #208]	; (8003e38 <HAL_UART_MspInit+0x1a0>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d6a:	4b33      	ldr	r3, [pc, #204]	; (8003e38 <HAL_UART_MspInit+0x1a0>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d70:	4b31      	ldr	r3, [pc, #196]	; (8003e38 <HAL_UART_MspInit+0x1a0>)
 8003d72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d76:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d78:	4b2f      	ldr	r3, [pc, #188]	; (8003e38 <HAL_UART_MspInit+0x1a0>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d7e:	4b2e      	ldr	r3, [pc, #184]	; (8003e38 <HAL_UART_MspInit+0x1a0>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003d84:	4b2c      	ldr	r3, [pc, #176]	; (8003e38 <HAL_UART_MspInit+0x1a0>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003d8a:	4b2b      	ldr	r3, [pc, #172]	; (8003e38 <HAL_UART_MspInit+0x1a0>)
 8003d8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d90:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d92:	4b29      	ldr	r3, [pc, #164]	; (8003e38 <HAL_UART_MspInit+0x1a0>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003d98:	4827      	ldr	r0, [pc, #156]	; (8003e38 <HAL_UART_MspInit+0x1a0>)
 8003d9a:	f000 fba3 	bl	80044e4 <HAL_DMA_Init>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8003da4:	f7fd f8a0 	bl	8000ee8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a23      	ldr	r2, [pc, #140]	; (8003e38 <HAL_UART_MspInit+0x1a0>)
 8003dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003db0:	4a21      	ldr	r2, [pc, #132]	; (8003e38 <HAL_UART_MspInit+0x1a0>)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8003db6:	4b22      	ldr	r3, [pc, #136]	; (8003e40 <HAL_UART_MspInit+0x1a8>)
 8003db8:	4a22      	ldr	r2, [pc, #136]	; (8003e44 <HAL_UART_MspInit+0x1ac>)
 8003dba:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003dbc:	4b20      	ldr	r3, [pc, #128]	; (8003e40 <HAL_UART_MspInit+0x1a8>)
 8003dbe:	222e      	movs	r2, #46	; 0x2e
 8003dc0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dc2:	4b1f      	ldr	r3, [pc, #124]	; (8003e40 <HAL_UART_MspInit+0x1a8>)
 8003dc4:	2240      	movs	r2, #64	; 0x40
 8003dc6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dc8:	4b1d      	ldr	r3, [pc, #116]	; (8003e40 <HAL_UART_MspInit+0x1a8>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003dce:	4b1c      	ldr	r3, [pc, #112]	; (8003e40 <HAL_UART_MspInit+0x1a8>)
 8003dd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dd4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dd6:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <HAL_UART_MspInit+0x1a8>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ddc:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <HAL_UART_MspInit+0x1a8>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003de2:	4b17      	ldr	r3, [pc, #92]	; (8003e40 <HAL_UART_MspInit+0x1a8>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003de8:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <HAL_UART_MspInit+0x1a8>)
 8003dea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003dee:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003df0:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <HAL_UART_MspInit+0x1a8>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003df6:	4812      	ldr	r0, [pc, #72]	; (8003e40 <HAL_UART_MspInit+0x1a8>)
 8003df8:	f000 fb74 	bl	80044e4 <HAL_DMA_Init>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 8003e02:	f7fd f871 	bl	8000ee8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a0d      	ldr	r2, [pc, #52]	; (8003e40 <HAL_UART_MspInit+0x1a8>)
 8003e0a:	67da      	str	r2, [r3, #124]	; 0x7c
 8003e0c:	4a0c      	ldr	r2, [pc, #48]	; (8003e40 <HAL_UART_MspInit+0x1a8>)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003e12:	2200      	movs	r2, #0
 8003e14:	2100      	movs	r1, #0
 8003e16:	2027      	movs	r0, #39	; 0x27
 8003e18:	f000 fb21 	bl	800445e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003e1c:	2027      	movs	r0, #39	; 0x27
 8003e1e:	f000 fb38 	bl	8004492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003e22:	bf00      	nop
 8003e24:	37e0      	adds	r7, #224	; 0xe0
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40004800 	.word	0x40004800
 8003e30:	58024400 	.word	0x58024400
 8003e34:	58020800 	.word	0x58020800
 8003e38:	240002f0 	.word	0x240002f0
 8003e3c:	40020010 	.word	0x40020010
 8003e40:	24000368 	.word	0x24000368
 8003e44:	40020028 	.word	0x40020028

08003e48 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART3)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a10      	ldr	r2, [pc, #64]	; (8003e98 <HAL_UART_MspDeInit+0x50>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d11a      	bne.n	8003e90 <HAL_UART_MspDeInit+0x48>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 8003e5a:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <HAL_UART_MspDeInit+0x54>)
 8003e5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e60:	4a0e      	ldr	r2, [pc, #56]	; (8003e9c <HAL_UART_MspDeInit+0x54>)
 8003e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 8003e6a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003e6e:	480c      	ldr	r0, [pc, #48]	; (8003ea0 <HAL_UART_MspDeInit+0x58>)
 8003e70:	f003 fcd0 	bl	8007814 <HAL_GPIO_DeInit>

    /* USART3 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fe8c 	bl	8004b98 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fe87 	bl	8004b98 <HAL_DMA_DeInit>

    /* USART3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8003e8a:	2027      	movs	r0, #39	; 0x27
 8003e8c:	f000 fb0f 	bl	80044ae <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8003e90:	bf00      	nop
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40004800 	.word	0x40004800
 8003e9c:	58024400 	.word	0x58024400
 8003ea0:	58020800 	.word	0x58020800

08003ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ea8:	e7fe      	b.n	8003ea8 <NMI_Handler+0x4>

08003eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eae:	e7fe      	b.n	8003eae <HardFault_Handler+0x4>

08003eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eb4:	e7fe      	b.n	8003eb4 <MemManage_Handler+0x4>

08003eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eba:	e7fe      	b.n	8003eba <BusFault_Handler+0x4>

08003ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ec0:	e7fe      	b.n	8003ec0 <UsageFault_Handler+0x4>

08003ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ec6:	bf00      	nop
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ee2:	bf00      	nop
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ef0:	f000 f996 	bl	8004220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ef4:	bf00      	nop
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003efc:	4802      	ldr	r0, [pc, #8]	; (8003f08 <DMA1_Stream0_IRQHandler+0x10>)
 8003efe:	f001 ffcf 	bl	8005ea0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003f02:	bf00      	nop
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	240002f0 	.word	0x240002f0

08003f0c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003f10:	4802      	ldr	r0, [pc, #8]	; (8003f1c <DMA1_Stream1_IRQHandler+0x10>)
 8003f12:	f001 ffc5 	bl	8005ea0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	24000368 	.word	0x24000368

08003f20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f24:	4802      	ldr	r0, [pc, #8]	; (8003f30 <TIM3_IRQHandler+0x10>)
 8003f26:	f006 fe79 	bl	800ac1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f2a:	bf00      	nop
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	2400012c 	.word	0x2400012c

08003f34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003f38:	4802      	ldr	r0, [pc, #8]	; (8003f44 <USART3_IRQHandler+0x10>)
 8003f3a:	f008 f8b9 	bl	800c0b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003f3e:	bf00      	nop
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	2400025c 	.word	0x2400025c

08003f48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return 1;
 8003f4c:	2301      	movs	r3, #1
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <_kill>:

int _kill(int pid, int sig)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f62:	f00a f8c1 	bl	800e0e8 <__errno>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2216      	movs	r2, #22
 8003f6a:	601a      	str	r2, [r3, #0]
  return -1;
 8003f6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <_exit>:

void _exit (int status)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f80:	f04f 31ff 	mov.w	r1, #4294967295
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7ff ffe7 	bl	8003f58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f8a:	e7fe      	b.n	8003f8a <_exit+0x12>

08003f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f94:	4a14      	ldr	r2, [pc, #80]	; (8003fe8 <_sbrk+0x5c>)
 8003f96:	4b15      	ldr	r3, [pc, #84]	; (8003fec <_sbrk+0x60>)
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fa0:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <_sbrk+0x64>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d102      	bne.n	8003fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fa8:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <_sbrk+0x64>)
 8003faa:	4a12      	ldr	r2, [pc, #72]	; (8003ff4 <_sbrk+0x68>)
 8003fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fae:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <_sbrk+0x64>)
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d207      	bcs.n	8003fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fbc:	f00a f894 	bl	800e0e8 <__errno>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	220c      	movs	r2, #12
 8003fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fca:	e009      	b.n	8003fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fcc:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <_sbrk+0x64>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fd2:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <_sbrk+0x64>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4413      	add	r3, r2
 8003fda:	4a05      	ldr	r2, [pc, #20]	; (8003ff0 <_sbrk+0x64>)
 8003fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fde:	68fb      	ldr	r3, [r7, #12]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	24050000 	.word	0x24050000
 8003fec:	00000400 	.word	0x00000400
 8003ff0:	24000e18 	.word	0x24000e18
 8003ff4:	24000e30 	.word	0x24000e30

08003ff8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ffc:	4b32      	ldr	r3, [pc, #200]	; (80040c8 <SystemInit+0xd0>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004002:	4a31      	ldr	r2, [pc, #196]	; (80040c8 <SystemInit+0xd0>)
 8004004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800400c:	4b2f      	ldr	r3, [pc, #188]	; (80040cc <SystemInit+0xd4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	2b06      	cmp	r3, #6
 8004016:	d807      	bhi.n	8004028 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004018:	4b2c      	ldr	r3, [pc, #176]	; (80040cc <SystemInit+0xd4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f023 030f 	bic.w	r3, r3, #15
 8004020:	4a2a      	ldr	r2, [pc, #168]	; (80040cc <SystemInit+0xd4>)
 8004022:	f043 0307 	orr.w	r3, r3, #7
 8004026:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004028:	4b29      	ldr	r3, [pc, #164]	; (80040d0 <SystemInit+0xd8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a28      	ldr	r2, [pc, #160]	; (80040d0 <SystemInit+0xd8>)
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004034:	4b26      	ldr	r3, [pc, #152]	; (80040d0 <SystemInit+0xd8>)
 8004036:	2200      	movs	r2, #0
 8004038:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800403a:	4b25      	ldr	r3, [pc, #148]	; (80040d0 <SystemInit+0xd8>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	4924      	ldr	r1, [pc, #144]	; (80040d0 <SystemInit+0xd8>)
 8004040:	4b24      	ldr	r3, [pc, #144]	; (80040d4 <SystemInit+0xdc>)
 8004042:	4013      	ands	r3, r2
 8004044:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004046:	4b21      	ldr	r3, [pc, #132]	; (80040cc <SystemInit+0xd4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d007      	beq.n	8004062 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004052:	4b1e      	ldr	r3, [pc, #120]	; (80040cc <SystemInit+0xd4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f023 030f 	bic.w	r3, r3, #15
 800405a:	4a1c      	ldr	r2, [pc, #112]	; (80040cc <SystemInit+0xd4>)
 800405c:	f043 0307 	orr.w	r3, r3, #7
 8004060:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004062:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <SystemInit+0xd8>)
 8004064:	2200      	movs	r2, #0
 8004066:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004068:	4b19      	ldr	r3, [pc, #100]	; (80040d0 <SystemInit+0xd8>)
 800406a:	2200      	movs	r2, #0
 800406c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800406e:	4b18      	ldr	r3, [pc, #96]	; (80040d0 <SystemInit+0xd8>)
 8004070:	2200      	movs	r2, #0
 8004072:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004074:	4b16      	ldr	r3, [pc, #88]	; (80040d0 <SystemInit+0xd8>)
 8004076:	4a18      	ldr	r2, [pc, #96]	; (80040d8 <SystemInit+0xe0>)
 8004078:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800407a:	4b15      	ldr	r3, [pc, #84]	; (80040d0 <SystemInit+0xd8>)
 800407c:	4a17      	ldr	r2, [pc, #92]	; (80040dc <SystemInit+0xe4>)
 800407e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004080:	4b13      	ldr	r3, [pc, #76]	; (80040d0 <SystemInit+0xd8>)
 8004082:	4a17      	ldr	r2, [pc, #92]	; (80040e0 <SystemInit+0xe8>)
 8004084:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004086:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <SystemInit+0xd8>)
 8004088:	2200      	movs	r2, #0
 800408a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800408c:	4b10      	ldr	r3, [pc, #64]	; (80040d0 <SystemInit+0xd8>)
 800408e:	4a14      	ldr	r2, [pc, #80]	; (80040e0 <SystemInit+0xe8>)
 8004090:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004092:	4b0f      	ldr	r3, [pc, #60]	; (80040d0 <SystemInit+0xd8>)
 8004094:	2200      	movs	r2, #0
 8004096:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004098:	4b0d      	ldr	r3, [pc, #52]	; (80040d0 <SystemInit+0xd8>)
 800409a:	4a11      	ldr	r2, [pc, #68]	; (80040e0 <SystemInit+0xe8>)
 800409c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800409e:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <SystemInit+0xd8>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80040a4:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <SystemInit+0xd8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a09      	ldr	r2, [pc, #36]	; (80040d0 <SystemInit+0xd8>)
 80040aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80040b0:	4b07      	ldr	r3, [pc, #28]	; (80040d0 <SystemInit+0xd8>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80040b6:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <SystemInit+0xec>)
 80040b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80040bc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80040be:	bf00      	nop
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	e000ed00 	.word	0xe000ed00
 80040cc:	52002000 	.word	0x52002000
 80040d0:	58024400 	.word	0x58024400
 80040d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80040d8:	02020200 	.word	0x02020200
 80040dc:	01ff0000 	.word	0x01ff0000
 80040e0:	01010280 	.word	0x01010280
 80040e4:	52004000 	.word	0x52004000

080040e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80040e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004120 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80040ec:	f7ff ff84 	bl	8003ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040f0:	480c      	ldr	r0, [pc, #48]	; (8004124 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80040f2:	490d      	ldr	r1, [pc, #52]	; (8004128 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80040f4:	4a0d      	ldr	r2, [pc, #52]	; (800412c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80040f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040f8:	e002      	b.n	8004100 <LoopCopyDataInit>

080040fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040fe:	3304      	adds	r3, #4

08004100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004104:	d3f9      	bcc.n	80040fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004106:	4a0a      	ldr	r2, [pc, #40]	; (8004130 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004108:	4c0a      	ldr	r4, [pc, #40]	; (8004134 <LoopFillZerobss+0x22>)
  movs r3, #0
 800410a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800410c:	e001      	b.n	8004112 <LoopFillZerobss>

0800410e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800410e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004110:	3204      	adds	r2, #4

08004112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004114:	d3fb      	bcc.n	800410e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004116:	f009 ffed 	bl	800e0f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800411a:	f7fc faad 	bl	8000678 <main>
  bx  lr
 800411e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004120:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004124:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004128:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 800412c:	0800e798 	.word	0x0800e798
  ldr r2, =_sbss
 8004130:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8004134:	24000e30 	.word	0x24000e30

08004138 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004138:	e7fe      	b.n	8004138 <ADC3_IRQHandler>
	...

0800413c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004142:	2003      	movs	r0, #3
 8004144:	f000 f980 	bl	8004448 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004148:	f004 fa4a 	bl	80085e0 <HAL_RCC_GetSysClockFreq>
 800414c:	4602      	mov	r2, r0
 800414e:	4b15      	ldr	r3, [pc, #84]	; (80041a4 <HAL_Init+0x68>)
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	f003 030f 	and.w	r3, r3, #15
 8004158:	4913      	ldr	r1, [pc, #76]	; (80041a8 <HAL_Init+0x6c>)
 800415a:	5ccb      	ldrb	r3, [r1, r3]
 800415c:	f003 031f 	and.w	r3, r3, #31
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
 8004164:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004166:	4b0f      	ldr	r3, [pc, #60]	; (80041a4 <HAL_Init+0x68>)
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	4a0e      	ldr	r2, [pc, #56]	; (80041a8 <HAL_Init+0x6c>)
 8004170:	5cd3      	ldrb	r3, [r2, r3]
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	fa22 f303 	lsr.w	r3, r2, r3
 800417c:	4a0b      	ldr	r2, [pc, #44]	; (80041ac <HAL_Init+0x70>)
 800417e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004180:	4a0b      	ldr	r2, [pc, #44]	; (80041b0 <HAL_Init+0x74>)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004186:	200f      	movs	r0, #15
 8004188:	f000 f814 	bl	80041b4 <HAL_InitTick>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e002      	b.n	800419c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004196:	f7ff fbe7 	bl	8003968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	58024400 	.word	0x58024400
 80041a8:	0800e744 	.word	0x0800e744
 80041ac:	24000004 	.word	0x24000004
 80041b0:	24000000 	.word	0x24000000

080041b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80041bc:	4b15      	ldr	r3, [pc, #84]	; (8004214 <HAL_InitTick+0x60>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e021      	b.n	800420c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80041c8:	4b13      	ldr	r3, [pc, #76]	; (8004218 <HAL_InitTick+0x64>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	4b11      	ldr	r3, [pc, #68]	; (8004214 <HAL_InitTick+0x60>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	4619      	mov	r1, r3
 80041d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80041da:	fbb2 f3f3 	udiv	r3, r2, r3
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f973 	bl	80044ca <HAL_SYSTICK_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e00e      	b.n	800420c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b0f      	cmp	r3, #15
 80041f2:	d80a      	bhi.n	800420a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041f4:	2200      	movs	r2, #0
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	f04f 30ff 	mov.w	r0, #4294967295
 80041fc:	f000 f92f 	bl	800445e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004200:	4a06      	ldr	r2, [pc, #24]	; (800421c <HAL_InitTick+0x68>)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	e000      	b.n	800420c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	2400000c 	.word	0x2400000c
 8004218:	24000000 	.word	0x24000000
 800421c:	24000008 	.word	0x24000008

08004220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004224:	4b06      	ldr	r3, [pc, #24]	; (8004240 <HAL_IncTick+0x20>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	4b06      	ldr	r3, [pc, #24]	; (8004244 <HAL_IncTick+0x24>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4413      	add	r3, r2
 8004230:	4a04      	ldr	r2, [pc, #16]	; (8004244 <HAL_IncTick+0x24>)
 8004232:	6013      	str	r3, [r2, #0]
}
 8004234:	bf00      	nop
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	2400000c 	.word	0x2400000c
 8004244:	24000e1c 	.word	0x24000e1c

08004248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  return uwTick;
 800424c:	4b03      	ldr	r3, [pc, #12]	; (800425c <HAL_GetTick+0x14>)
 800424e:	681b      	ldr	r3, [r3, #0]
}
 8004250:	4618      	mov	r0, r3
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	24000e1c 	.word	0x24000e1c

08004260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <__NVIC_SetPriorityGrouping+0x40>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800427c:	4013      	ands	r3, r2
 800427e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004288:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <__NVIC_SetPriorityGrouping+0x44>)
 800428a:	4313      	orrs	r3, r2
 800428c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800428e:	4a04      	ldr	r2, [pc, #16]	; (80042a0 <__NVIC_SetPriorityGrouping+0x40>)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	60d3      	str	r3, [r2, #12]
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	e000ed00 	.word	0xe000ed00
 80042a4:	05fa0000 	.word	0x05fa0000

080042a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042ac:	4b04      	ldr	r3, [pc, #16]	; (80042c0 <__NVIC_GetPriorityGrouping+0x18>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	0a1b      	lsrs	r3, r3, #8
 80042b2:	f003 0307 	and.w	r3, r3, #7
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	e000ed00 	.word	0xe000ed00

080042c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	db0b      	blt.n	80042ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042d6:	88fb      	ldrh	r3, [r7, #6]
 80042d8:	f003 021f 	and.w	r2, r3, #31
 80042dc:	4907      	ldr	r1, [pc, #28]	; (80042fc <__NVIC_EnableIRQ+0x38>)
 80042de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	2001      	movs	r0, #1
 80042e6:	fa00 f202 	lsl.w	r2, r0, r2
 80042ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	e000e100 	.word	0xe000e100

08004300 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800430a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800430e:	2b00      	cmp	r3, #0
 8004310:	db12      	blt.n	8004338 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	f003 021f 	and.w	r2, r3, #31
 8004318:	490a      	ldr	r1, [pc, #40]	; (8004344 <__NVIC_DisableIRQ+0x44>)
 800431a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	2001      	movs	r0, #1
 8004322:	fa00 f202 	lsl.w	r2, r0, r2
 8004326:	3320      	adds	r3, #32
 8004328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800432c:	f3bf 8f4f 	dsb	sy
}
 8004330:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004332:	f3bf 8f6f 	isb	sy
}
 8004336:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	e000e100 	.word	0xe000e100

08004348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	6039      	str	r1, [r7, #0]
 8004352:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004354:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004358:	2b00      	cmp	r3, #0
 800435a:	db0a      	blt.n	8004372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	b2da      	uxtb	r2, r3
 8004360:	490c      	ldr	r1, [pc, #48]	; (8004394 <__NVIC_SetPriority+0x4c>)
 8004362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004366:	0112      	lsls	r2, r2, #4
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	440b      	add	r3, r1
 800436c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004370:	e00a      	b.n	8004388 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	b2da      	uxtb	r2, r3
 8004376:	4908      	ldr	r1, [pc, #32]	; (8004398 <__NVIC_SetPriority+0x50>)
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	3b04      	subs	r3, #4
 8004380:	0112      	lsls	r2, r2, #4
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	440b      	add	r3, r1
 8004386:	761a      	strb	r2, [r3, #24]
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	e000e100 	.word	0xe000e100
 8004398:	e000ed00 	.word	0xe000ed00

0800439c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800439c:	b480      	push	{r7}
 800439e:	b089      	sub	sp, #36	; 0x24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f1c3 0307 	rsb	r3, r3, #7
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	bf28      	it	cs
 80043ba:	2304      	movcs	r3, #4
 80043bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	3304      	adds	r3, #4
 80043c2:	2b06      	cmp	r3, #6
 80043c4:	d902      	bls.n	80043cc <NVIC_EncodePriority+0x30>
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	3b03      	subs	r3, #3
 80043ca:	e000      	b.n	80043ce <NVIC_EncodePriority+0x32>
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d0:	f04f 32ff 	mov.w	r2, #4294967295
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	43da      	mvns	r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	401a      	ands	r2, r3
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043e4:	f04f 31ff 	mov.w	r1, #4294967295
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	fa01 f303 	lsl.w	r3, r1, r3
 80043ee:	43d9      	mvns	r1, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f4:	4313      	orrs	r3, r2
         );
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3724      	adds	r7, #36	; 0x24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
	...

08004404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3b01      	subs	r3, #1
 8004410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004414:	d301      	bcc.n	800441a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004416:	2301      	movs	r3, #1
 8004418:	e00f      	b.n	800443a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800441a:	4a0a      	ldr	r2, [pc, #40]	; (8004444 <SysTick_Config+0x40>)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3b01      	subs	r3, #1
 8004420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004422:	210f      	movs	r1, #15
 8004424:	f04f 30ff 	mov.w	r0, #4294967295
 8004428:	f7ff ff8e 	bl	8004348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800442c:	4b05      	ldr	r3, [pc, #20]	; (8004444 <SysTick_Config+0x40>)
 800442e:	2200      	movs	r2, #0
 8004430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004432:	4b04      	ldr	r3, [pc, #16]	; (8004444 <SysTick_Config+0x40>)
 8004434:	2207      	movs	r2, #7
 8004436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	e000e010 	.word	0xe000e010

08004448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff ff05 	bl	8004260 <__NVIC_SetPriorityGrouping>
}
 8004456:	bf00      	nop
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b086      	sub	sp, #24
 8004462:	af00      	add	r7, sp, #0
 8004464:	4603      	mov	r3, r0
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	607a      	str	r2, [r7, #4]
 800446a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800446c:	f7ff ff1c 	bl	80042a8 <__NVIC_GetPriorityGrouping>
 8004470:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	6978      	ldr	r0, [r7, #20]
 8004478:	f7ff ff90 	bl	800439c <NVIC_EncodePriority>
 800447c:	4602      	mov	r2, r0
 800447e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004482:	4611      	mov	r1, r2
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff ff5f 	bl	8004348 <__NVIC_SetPriority>
}
 800448a:	bf00      	nop
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	4603      	mov	r3, r0
 800449a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800449c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff ff0f 	bl	80042c4 <__NVIC_EnableIRQ>
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	4603      	mov	r3, r0
 80044b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80044b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff ff1f 	bl	8004300 <__NVIC_DisableIRQ>
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff ff96 	bl	8004404 <SysTick_Config>
 80044d8:	4603      	mov	r3, r0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80044ec:	f7ff feac 	bl	8004248 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e314      	b.n	8004b26 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a66      	ldr	r2, [pc, #408]	; (800469c <HAL_DMA_Init+0x1b8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d04a      	beq.n	800459c <HAL_DMA_Init+0xb8>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a65      	ldr	r2, [pc, #404]	; (80046a0 <HAL_DMA_Init+0x1bc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d045      	beq.n	800459c <HAL_DMA_Init+0xb8>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a63      	ldr	r2, [pc, #396]	; (80046a4 <HAL_DMA_Init+0x1c0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d040      	beq.n	800459c <HAL_DMA_Init+0xb8>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a62      	ldr	r2, [pc, #392]	; (80046a8 <HAL_DMA_Init+0x1c4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d03b      	beq.n	800459c <HAL_DMA_Init+0xb8>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a60      	ldr	r2, [pc, #384]	; (80046ac <HAL_DMA_Init+0x1c8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d036      	beq.n	800459c <HAL_DMA_Init+0xb8>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a5f      	ldr	r2, [pc, #380]	; (80046b0 <HAL_DMA_Init+0x1cc>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d031      	beq.n	800459c <HAL_DMA_Init+0xb8>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a5d      	ldr	r2, [pc, #372]	; (80046b4 <HAL_DMA_Init+0x1d0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d02c      	beq.n	800459c <HAL_DMA_Init+0xb8>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a5c      	ldr	r2, [pc, #368]	; (80046b8 <HAL_DMA_Init+0x1d4>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d027      	beq.n	800459c <HAL_DMA_Init+0xb8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a5a      	ldr	r2, [pc, #360]	; (80046bc <HAL_DMA_Init+0x1d8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d022      	beq.n	800459c <HAL_DMA_Init+0xb8>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a59      	ldr	r2, [pc, #356]	; (80046c0 <HAL_DMA_Init+0x1dc>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d01d      	beq.n	800459c <HAL_DMA_Init+0xb8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a57      	ldr	r2, [pc, #348]	; (80046c4 <HAL_DMA_Init+0x1e0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d018      	beq.n	800459c <HAL_DMA_Init+0xb8>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a56      	ldr	r2, [pc, #344]	; (80046c8 <HAL_DMA_Init+0x1e4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d013      	beq.n	800459c <HAL_DMA_Init+0xb8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a54      	ldr	r2, [pc, #336]	; (80046cc <HAL_DMA_Init+0x1e8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00e      	beq.n	800459c <HAL_DMA_Init+0xb8>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a53      	ldr	r2, [pc, #332]	; (80046d0 <HAL_DMA_Init+0x1ec>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d009      	beq.n	800459c <HAL_DMA_Init+0xb8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a51      	ldr	r2, [pc, #324]	; (80046d4 <HAL_DMA_Init+0x1f0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d004      	beq.n	800459c <HAL_DMA_Init+0xb8>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a50      	ldr	r2, [pc, #320]	; (80046d8 <HAL_DMA_Init+0x1f4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d101      	bne.n	80045a0 <HAL_DMA_Init+0xbc>
 800459c:	2301      	movs	r3, #1
 800459e:	e000      	b.n	80045a2 <HAL_DMA_Init+0xbe>
 80045a0:	2300      	movs	r3, #0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 813c 	beq.w	8004820 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a37      	ldr	r2, [pc, #220]	; (800469c <HAL_DMA_Init+0x1b8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d04a      	beq.n	8004658 <HAL_DMA_Init+0x174>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a36      	ldr	r2, [pc, #216]	; (80046a0 <HAL_DMA_Init+0x1bc>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d045      	beq.n	8004658 <HAL_DMA_Init+0x174>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a34      	ldr	r2, [pc, #208]	; (80046a4 <HAL_DMA_Init+0x1c0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d040      	beq.n	8004658 <HAL_DMA_Init+0x174>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a33      	ldr	r2, [pc, #204]	; (80046a8 <HAL_DMA_Init+0x1c4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d03b      	beq.n	8004658 <HAL_DMA_Init+0x174>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a31      	ldr	r2, [pc, #196]	; (80046ac <HAL_DMA_Init+0x1c8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d036      	beq.n	8004658 <HAL_DMA_Init+0x174>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a30      	ldr	r2, [pc, #192]	; (80046b0 <HAL_DMA_Init+0x1cc>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d031      	beq.n	8004658 <HAL_DMA_Init+0x174>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a2e      	ldr	r2, [pc, #184]	; (80046b4 <HAL_DMA_Init+0x1d0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d02c      	beq.n	8004658 <HAL_DMA_Init+0x174>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a2d      	ldr	r2, [pc, #180]	; (80046b8 <HAL_DMA_Init+0x1d4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d027      	beq.n	8004658 <HAL_DMA_Init+0x174>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a2b      	ldr	r2, [pc, #172]	; (80046bc <HAL_DMA_Init+0x1d8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d022      	beq.n	8004658 <HAL_DMA_Init+0x174>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a2a      	ldr	r2, [pc, #168]	; (80046c0 <HAL_DMA_Init+0x1dc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d01d      	beq.n	8004658 <HAL_DMA_Init+0x174>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a28      	ldr	r2, [pc, #160]	; (80046c4 <HAL_DMA_Init+0x1e0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d018      	beq.n	8004658 <HAL_DMA_Init+0x174>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a27      	ldr	r2, [pc, #156]	; (80046c8 <HAL_DMA_Init+0x1e4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d013      	beq.n	8004658 <HAL_DMA_Init+0x174>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a25      	ldr	r2, [pc, #148]	; (80046cc <HAL_DMA_Init+0x1e8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d00e      	beq.n	8004658 <HAL_DMA_Init+0x174>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a24      	ldr	r2, [pc, #144]	; (80046d0 <HAL_DMA_Init+0x1ec>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d009      	beq.n	8004658 <HAL_DMA_Init+0x174>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a22      	ldr	r2, [pc, #136]	; (80046d4 <HAL_DMA_Init+0x1f0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d004      	beq.n	8004658 <HAL_DMA_Init+0x174>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a21      	ldr	r2, [pc, #132]	; (80046d8 <HAL_DMA_Init+0x1f4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d108      	bne.n	800466a <HAL_DMA_Init+0x186>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0201 	bic.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	e007      	b.n	800467a <HAL_DMA_Init+0x196>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800467a:	e02f      	b.n	80046dc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800467c:	f7ff fde4 	bl	8004248 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b05      	cmp	r3, #5
 8004688:	d928      	bls.n	80046dc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2203      	movs	r2, #3
 8004694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e244      	b.n	8004b26 <HAL_DMA_Init+0x642>
 800469c:	40020010 	.word	0x40020010
 80046a0:	40020028 	.word	0x40020028
 80046a4:	40020040 	.word	0x40020040
 80046a8:	40020058 	.word	0x40020058
 80046ac:	40020070 	.word	0x40020070
 80046b0:	40020088 	.word	0x40020088
 80046b4:	400200a0 	.word	0x400200a0
 80046b8:	400200b8 	.word	0x400200b8
 80046bc:	40020410 	.word	0x40020410
 80046c0:	40020428 	.word	0x40020428
 80046c4:	40020440 	.word	0x40020440
 80046c8:	40020458 	.word	0x40020458
 80046cc:	40020470 	.word	0x40020470
 80046d0:	40020488 	.word	0x40020488
 80046d4:	400204a0 	.word	0x400204a0
 80046d8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1c8      	bne.n	800467c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	4b84      	ldr	r3, [pc, #528]	; (8004908 <HAL_DMA_Init+0x424>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004702:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800470e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800471a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	2b04      	cmp	r3, #4
 800472e:	d107      	bne.n	8004740 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	4313      	orrs	r3, r2
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b28      	cmp	r3, #40	; 0x28
 8004746:	d903      	bls.n	8004750 <HAL_DMA_Init+0x26c>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b2e      	cmp	r3, #46	; 0x2e
 800474e:	d91f      	bls.n	8004790 <HAL_DMA_Init+0x2ac>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b3e      	cmp	r3, #62	; 0x3e
 8004756:	d903      	bls.n	8004760 <HAL_DMA_Init+0x27c>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b42      	cmp	r3, #66	; 0x42
 800475e:	d917      	bls.n	8004790 <HAL_DMA_Init+0x2ac>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b46      	cmp	r3, #70	; 0x46
 8004766:	d903      	bls.n	8004770 <HAL_DMA_Init+0x28c>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b48      	cmp	r3, #72	; 0x48
 800476e:	d90f      	bls.n	8004790 <HAL_DMA_Init+0x2ac>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b4e      	cmp	r3, #78	; 0x4e
 8004776:	d903      	bls.n	8004780 <HAL_DMA_Init+0x29c>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b52      	cmp	r3, #82	; 0x52
 800477e:	d907      	bls.n	8004790 <HAL_DMA_Init+0x2ac>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b73      	cmp	r3, #115	; 0x73
 8004786:	d905      	bls.n	8004794 <HAL_DMA_Init+0x2b0>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b77      	cmp	r3, #119	; 0x77
 800478e:	d801      	bhi.n	8004794 <HAL_DMA_Init+0x2b0>
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <HAL_DMA_Init+0x2b2>
 8004794:	2300      	movs	r3, #0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047a0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f023 0307 	bic.w	r3, r3, #7
 80047b8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d117      	bne.n	80047fc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00e      	beq.n	80047fc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f002 fce6 	bl	80071b0 <DMA_CheckFifoParam>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d008      	beq.n	80047fc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2240      	movs	r2, #64	; 0x40
 80047ee:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e194      	b.n	8004b26 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f002 fc21 	bl	800704c <DMA_CalcBaseAndBitshift>
 800480a:	4603      	mov	r3, r0
 800480c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	223f      	movs	r2, #63	; 0x3f
 8004818:	409a      	lsls	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	609a      	str	r2, [r3, #8]
 800481e:	e0ca      	b.n	80049b6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a39      	ldr	r2, [pc, #228]	; (800490c <HAL_DMA_Init+0x428>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d022      	beq.n	8004870 <HAL_DMA_Init+0x38c>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a38      	ldr	r2, [pc, #224]	; (8004910 <HAL_DMA_Init+0x42c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d01d      	beq.n	8004870 <HAL_DMA_Init+0x38c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a36      	ldr	r2, [pc, #216]	; (8004914 <HAL_DMA_Init+0x430>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d018      	beq.n	8004870 <HAL_DMA_Init+0x38c>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a35      	ldr	r2, [pc, #212]	; (8004918 <HAL_DMA_Init+0x434>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d013      	beq.n	8004870 <HAL_DMA_Init+0x38c>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a33      	ldr	r2, [pc, #204]	; (800491c <HAL_DMA_Init+0x438>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00e      	beq.n	8004870 <HAL_DMA_Init+0x38c>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a32      	ldr	r2, [pc, #200]	; (8004920 <HAL_DMA_Init+0x43c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d009      	beq.n	8004870 <HAL_DMA_Init+0x38c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a30      	ldr	r2, [pc, #192]	; (8004924 <HAL_DMA_Init+0x440>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d004      	beq.n	8004870 <HAL_DMA_Init+0x38c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a2f      	ldr	r2, [pc, #188]	; (8004928 <HAL_DMA_Init+0x444>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d101      	bne.n	8004874 <HAL_DMA_Init+0x390>
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <HAL_DMA_Init+0x392>
 8004874:	2300      	movs	r3, #0
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 8094 	beq.w	80049a4 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a22      	ldr	r2, [pc, #136]	; (800490c <HAL_DMA_Init+0x428>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d021      	beq.n	80048ca <HAL_DMA_Init+0x3e6>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a21      	ldr	r2, [pc, #132]	; (8004910 <HAL_DMA_Init+0x42c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d01c      	beq.n	80048ca <HAL_DMA_Init+0x3e6>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a1f      	ldr	r2, [pc, #124]	; (8004914 <HAL_DMA_Init+0x430>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d017      	beq.n	80048ca <HAL_DMA_Init+0x3e6>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a1e      	ldr	r2, [pc, #120]	; (8004918 <HAL_DMA_Init+0x434>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d012      	beq.n	80048ca <HAL_DMA_Init+0x3e6>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a1c      	ldr	r2, [pc, #112]	; (800491c <HAL_DMA_Init+0x438>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00d      	beq.n	80048ca <HAL_DMA_Init+0x3e6>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a1b      	ldr	r2, [pc, #108]	; (8004920 <HAL_DMA_Init+0x43c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d008      	beq.n	80048ca <HAL_DMA_Init+0x3e6>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a19      	ldr	r2, [pc, #100]	; (8004924 <HAL_DMA_Init+0x440>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d003      	beq.n	80048ca <HAL_DMA_Init+0x3e6>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a18      	ldr	r2, [pc, #96]	; (8004928 <HAL_DMA_Init+0x444>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4b11      	ldr	r3, [pc, #68]	; (800492c <HAL_DMA_Init+0x448>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	2b40      	cmp	r3, #64	; 0x40
 80048f2:	d01d      	beq.n	8004930 <HAL_DMA_Init+0x44c>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	2b80      	cmp	r3, #128	; 0x80
 80048fa:	d102      	bne.n	8004902 <HAL_DMA_Init+0x41e>
 80048fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004900:	e017      	b.n	8004932 <HAL_DMA_Init+0x44e>
 8004902:	2300      	movs	r3, #0
 8004904:	e015      	b.n	8004932 <HAL_DMA_Init+0x44e>
 8004906:	bf00      	nop
 8004908:	fe10803f 	.word	0xfe10803f
 800490c:	58025408 	.word	0x58025408
 8004910:	5802541c 	.word	0x5802541c
 8004914:	58025430 	.word	0x58025430
 8004918:	58025444 	.word	0x58025444
 800491c:	58025458 	.word	0x58025458
 8004920:	5802546c 	.word	0x5802546c
 8004924:	58025480 	.word	0x58025480
 8004928:	58025494 	.word	0x58025494
 800492c:	fffe000f 	.word	0xfffe000f
 8004930:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68d2      	ldr	r2, [r2, #12]
 8004936:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004938:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004940:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004948:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004950:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004958:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004960:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	461a      	mov	r2, r3
 8004976:	4b6e      	ldr	r3, [pc, #440]	; (8004b30 <HAL_DMA_Init+0x64c>)
 8004978:	4413      	add	r3, r2
 800497a:	4a6e      	ldr	r2, [pc, #440]	; (8004b34 <HAL_DMA_Init+0x650>)
 800497c:	fba2 2303 	umull	r2, r3, r2, r3
 8004980:	091b      	lsrs	r3, r3, #4
 8004982:	009a      	lsls	r2, r3, #2
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f002 fb5f 	bl	800704c <DMA_CalcBaseAndBitshift>
 800498e:	4603      	mov	r3, r0
 8004990:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004996:	f003 031f 	and.w	r3, r3, #31
 800499a:	2201      	movs	r2, #1
 800499c:	409a      	lsls	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	605a      	str	r2, [r3, #4]
 80049a2:	e008      	b.n	80049b6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2240      	movs	r2, #64	; 0x40
 80049a8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2203      	movs	r2, #3
 80049ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e0b7      	b.n	8004b26 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a5f      	ldr	r2, [pc, #380]	; (8004b38 <HAL_DMA_Init+0x654>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d072      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a5d      	ldr	r2, [pc, #372]	; (8004b3c <HAL_DMA_Init+0x658>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d06d      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a5c      	ldr	r2, [pc, #368]	; (8004b40 <HAL_DMA_Init+0x65c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d068      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a5a      	ldr	r2, [pc, #360]	; (8004b44 <HAL_DMA_Init+0x660>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d063      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a59      	ldr	r2, [pc, #356]	; (8004b48 <HAL_DMA_Init+0x664>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d05e      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a57      	ldr	r2, [pc, #348]	; (8004b4c <HAL_DMA_Init+0x668>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d059      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a56      	ldr	r2, [pc, #344]	; (8004b50 <HAL_DMA_Init+0x66c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d054      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a54      	ldr	r2, [pc, #336]	; (8004b54 <HAL_DMA_Init+0x670>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d04f      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a53      	ldr	r2, [pc, #332]	; (8004b58 <HAL_DMA_Init+0x674>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d04a      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a51      	ldr	r2, [pc, #324]	; (8004b5c <HAL_DMA_Init+0x678>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d045      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a50      	ldr	r2, [pc, #320]	; (8004b60 <HAL_DMA_Init+0x67c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d040      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a4e      	ldr	r2, [pc, #312]	; (8004b64 <HAL_DMA_Init+0x680>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d03b      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a4d      	ldr	r2, [pc, #308]	; (8004b68 <HAL_DMA_Init+0x684>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d036      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a4b      	ldr	r2, [pc, #300]	; (8004b6c <HAL_DMA_Init+0x688>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d031      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a4a      	ldr	r2, [pc, #296]	; (8004b70 <HAL_DMA_Init+0x68c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d02c      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a48      	ldr	r2, [pc, #288]	; (8004b74 <HAL_DMA_Init+0x690>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d027      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a47      	ldr	r2, [pc, #284]	; (8004b78 <HAL_DMA_Init+0x694>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d022      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a45      	ldr	r2, [pc, #276]	; (8004b7c <HAL_DMA_Init+0x698>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d01d      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a44      	ldr	r2, [pc, #272]	; (8004b80 <HAL_DMA_Init+0x69c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d018      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a42      	ldr	r2, [pc, #264]	; (8004b84 <HAL_DMA_Init+0x6a0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d013      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a41      	ldr	r2, [pc, #260]	; (8004b88 <HAL_DMA_Init+0x6a4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00e      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a3f      	ldr	r2, [pc, #252]	; (8004b8c <HAL_DMA_Init+0x6a8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d009      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a3e      	ldr	r2, [pc, #248]	; (8004b90 <HAL_DMA_Init+0x6ac>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d004      	beq.n	8004aa6 <HAL_DMA_Init+0x5c2>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a3c      	ldr	r2, [pc, #240]	; (8004b94 <HAL_DMA_Init+0x6b0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d101      	bne.n	8004aaa <HAL_DMA_Init+0x5c6>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <HAL_DMA_Init+0x5c8>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d032      	beq.n	8004b16 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f002 fbf9 	bl	80072a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b80      	cmp	r3, #128	; 0x80
 8004abc:	d102      	bne.n	8004ac4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ad8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d010      	beq.n	8004b04 <HAL_DMA_Init+0x620>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d80c      	bhi.n	8004b04 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f002 fc76 	bl	80073dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b00:	605a      	str	r2, [r3, #4]
 8004b02:	e008      	b.n	8004b16 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	a7fdabf8 	.word	0xa7fdabf8
 8004b34:	cccccccd 	.word	0xcccccccd
 8004b38:	40020010 	.word	0x40020010
 8004b3c:	40020028 	.word	0x40020028
 8004b40:	40020040 	.word	0x40020040
 8004b44:	40020058 	.word	0x40020058
 8004b48:	40020070 	.word	0x40020070
 8004b4c:	40020088 	.word	0x40020088
 8004b50:	400200a0 	.word	0x400200a0
 8004b54:	400200b8 	.word	0x400200b8
 8004b58:	40020410 	.word	0x40020410
 8004b5c:	40020428 	.word	0x40020428
 8004b60:	40020440 	.word	0x40020440
 8004b64:	40020458 	.word	0x40020458
 8004b68:	40020470 	.word	0x40020470
 8004b6c:	40020488 	.word	0x40020488
 8004b70:	400204a0 	.word	0x400204a0
 8004b74:	400204b8 	.word	0x400204b8
 8004b78:	58025408 	.word	0x58025408
 8004b7c:	5802541c 	.word	0x5802541c
 8004b80:	58025430 	.word	0x58025430
 8004b84:	58025444 	.word	0x58025444
 8004b88:	58025458 	.word	0x58025458
 8004b8c:	5802546c 	.word	0x5802546c
 8004b90:	58025480 	.word	0x58025480
 8004b94:	58025494 	.word	0x58025494

08004b98 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e1a8      	b.n	8004efc <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a82      	ldr	r2, [pc, #520]	; (8004db8 <HAL_DMA_DeInit+0x220>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d04a      	beq.n	8004c4a <HAL_DMA_DeInit+0xb2>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a80      	ldr	r2, [pc, #512]	; (8004dbc <HAL_DMA_DeInit+0x224>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d045      	beq.n	8004c4a <HAL_DMA_DeInit+0xb2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a7f      	ldr	r2, [pc, #508]	; (8004dc0 <HAL_DMA_DeInit+0x228>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d040      	beq.n	8004c4a <HAL_DMA_DeInit+0xb2>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a7d      	ldr	r2, [pc, #500]	; (8004dc4 <HAL_DMA_DeInit+0x22c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d03b      	beq.n	8004c4a <HAL_DMA_DeInit+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a7c      	ldr	r2, [pc, #496]	; (8004dc8 <HAL_DMA_DeInit+0x230>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d036      	beq.n	8004c4a <HAL_DMA_DeInit+0xb2>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a7a      	ldr	r2, [pc, #488]	; (8004dcc <HAL_DMA_DeInit+0x234>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d031      	beq.n	8004c4a <HAL_DMA_DeInit+0xb2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a79      	ldr	r2, [pc, #484]	; (8004dd0 <HAL_DMA_DeInit+0x238>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d02c      	beq.n	8004c4a <HAL_DMA_DeInit+0xb2>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a77      	ldr	r2, [pc, #476]	; (8004dd4 <HAL_DMA_DeInit+0x23c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d027      	beq.n	8004c4a <HAL_DMA_DeInit+0xb2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a76      	ldr	r2, [pc, #472]	; (8004dd8 <HAL_DMA_DeInit+0x240>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d022      	beq.n	8004c4a <HAL_DMA_DeInit+0xb2>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a74      	ldr	r2, [pc, #464]	; (8004ddc <HAL_DMA_DeInit+0x244>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d01d      	beq.n	8004c4a <HAL_DMA_DeInit+0xb2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a73      	ldr	r2, [pc, #460]	; (8004de0 <HAL_DMA_DeInit+0x248>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d018      	beq.n	8004c4a <HAL_DMA_DeInit+0xb2>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a71      	ldr	r2, [pc, #452]	; (8004de4 <HAL_DMA_DeInit+0x24c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d013      	beq.n	8004c4a <HAL_DMA_DeInit+0xb2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a70      	ldr	r2, [pc, #448]	; (8004de8 <HAL_DMA_DeInit+0x250>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00e      	beq.n	8004c4a <HAL_DMA_DeInit+0xb2>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a6e      	ldr	r2, [pc, #440]	; (8004dec <HAL_DMA_DeInit+0x254>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d009      	beq.n	8004c4a <HAL_DMA_DeInit+0xb2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a6d      	ldr	r2, [pc, #436]	; (8004df0 <HAL_DMA_DeInit+0x258>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d004      	beq.n	8004c4a <HAL_DMA_DeInit+0xb2>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a6b      	ldr	r2, [pc, #428]	; (8004df4 <HAL_DMA_DeInit+0x25c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d108      	bne.n	8004c5c <HAL_DMA_DeInit+0xc4>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0201 	bic.w	r2, r2, #1
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	e007      	b.n	8004c6c <HAL_DMA_DeInit+0xd4>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0201 	bic.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a51      	ldr	r2, [pc, #324]	; (8004db8 <HAL_DMA_DeInit+0x220>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d04a      	beq.n	8004d0c <HAL_DMA_DeInit+0x174>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a50      	ldr	r2, [pc, #320]	; (8004dbc <HAL_DMA_DeInit+0x224>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d045      	beq.n	8004d0c <HAL_DMA_DeInit+0x174>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a4e      	ldr	r2, [pc, #312]	; (8004dc0 <HAL_DMA_DeInit+0x228>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d040      	beq.n	8004d0c <HAL_DMA_DeInit+0x174>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a4d      	ldr	r2, [pc, #308]	; (8004dc4 <HAL_DMA_DeInit+0x22c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d03b      	beq.n	8004d0c <HAL_DMA_DeInit+0x174>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a4b      	ldr	r2, [pc, #300]	; (8004dc8 <HAL_DMA_DeInit+0x230>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d036      	beq.n	8004d0c <HAL_DMA_DeInit+0x174>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a4a      	ldr	r2, [pc, #296]	; (8004dcc <HAL_DMA_DeInit+0x234>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d031      	beq.n	8004d0c <HAL_DMA_DeInit+0x174>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a48      	ldr	r2, [pc, #288]	; (8004dd0 <HAL_DMA_DeInit+0x238>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d02c      	beq.n	8004d0c <HAL_DMA_DeInit+0x174>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a47      	ldr	r2, [pc, #284]	; (8004dd4 <HAL_DMA_DeInit+0x23c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d027      	beq.n	8004d0c <HAL_DMA_DeInit+0x174>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a45      	ldr	r2, [pc, #276]	; (8004dd8 <HAL_DMA_DeInit+0x240>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d022      	beq.n	8004d0c <HAL_DMA_DeInit+0x174>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a44      	ldr	r2, [pc, #272]	; (8004ddc <HAL_DMA_DeInit+0x244>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d01d      	beq.n	8004d0c <HAL_DMA_DeInit+0x174>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a42      	ldr	r2, [pc, #264]	; (8004de0 <HAL_DMA_DeInit+0x248>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d018      	beq.n	8004d0c <HAL_DMA_DeInit+0x174>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a41      	ldr	r2, [pc, #260]	; (8004de4 <HAL_DMA_DeInit+0x24c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d013      	beq.n	8004d0c <HAL_DMA_DeInit+0x174>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a3f      	ldr	r2, [pc, #252]	; (8004de8 <HAL_DMA_DeInit+0x250>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00e      	beq.n	8004d0c <HAL_DMA_DeInit+0x174>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a3e      	ldr	r2, [pc, #248]	; (8004dec <HAL_DMA_DeInit+0x254>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d009      	beq.n	8004d0c <HAL_DMA_DeInit+0x174>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a3c      	ldr	r2, [pc, #240]	; (8004df0 <HAL_DMA_DeInit+0x258>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <HAL_DMA_DeInit+0x174>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a3b      	ldr	r2, [pc, #236]	; (8004df4 <HAL_DMA_DeInit+0x25c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d101      	bne.n	8004d10 <HAL_DMA_DeInit+0x178>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <HAL_DMA_DeInit+0x17a>
 8004d10:	2300      	movs	r3, #0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d025      	beq.n	8004d62 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2200      	movs	r2, #0
 8004d24:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2200      	movs	r2, #0
 8004d34:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2221      	movs	r2, #33	; 0x21
 8004d44:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f002 f980 	bl	800704c <DMA_CalcBaseAndBitshift>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	223f      	movs	r2, #63	; 0x3f
 8004d5a:	409a      	lsls	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	609a      	str	r2, [r3, #8]
 8004d60:	e081      	b.n	8004e66 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a24      	ldr	r2, [pc, #144]	; (8004df8 <HAL_DMA_DeInit+0x260>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d022      	beq.n	8004db2 <HAL_DMA_DeInit+0x21a>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a22      	ldr	r2, [pc, #136]	; (8004dfc <HAL_DMA_DeInit+0x264>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d01d      	beq.n	8004db2 <HAL_DMA_DeInit+0x21a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a21      	ldr	r2, [pc, #132]	; (8004e00 <HAL_DMA_DeInit+0x268>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d018      	beq.n	8004db2 <HAL_DMA_DeInit+0x21a>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <HAL_DMA_DeInit+0x26c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d013      	beq.n	8004db2 <HAL_DMA_DeInit+0x21a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1e      	ldr	r2, [pc, #120]	; (8004e08 <HAL_DMA_DeInit+0x270>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00e      	beq.n	8004db2 <HAL_DMA_DeInit+0x21a>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1c      	ldr	r2, [pc, #112]	; (8004e0c <HAL_DMA_DeInit+0x274>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <HAL_DMA_DeInit+0x21a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1b      	ldr	r2, [pc, #108]	; (8004e10 <HAL_DMA_DeInit+0x278>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <HAL_DMA_DeInit+0x21a>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a19      	ldr	r2, [pc, #100]	; (8004e14 <HAL_DMA_DeInit+0x27c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d132      	bne.n	8004e18 <HAL_DMA_DeInit+0x280>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e031      	b.n	8004e1a <HAL_DMA_DeInit+0x282>
 8004db6:	bf00      	nop
 8004db8:	40020010 	.word	0x40020010
 8004dbc:	40020028 	.word	0x40020028
 8004dc0:	40020040 	.word	0x40020040
 8004dc4:	40020058 	.word	0x40020058
 8004dc8:	40020070 	.word	0x40020070
 8004dcc:	40020088 	.word	0x40020088
 8004dd0:	400200a0 	.word	0x400200a0
 8004dd4:	400200b8 	.word	0x400200b8
 8004dd8:	40020410 	.word	0x40020410
 8004ddc:	40020428 	.word	0x40020428
 8004de0:	40020440 	.word	0x40020440
 8004de4:	40020458 	.word	0x40020458
 8004de8:	40020470 	.word	0x40020470
 8004dec:	40020488 	.word	0x40020488
 8004df0:	400204a0 	.word	0x400204a0
 8004df4:	400204b8 	.word	0x400204b8
 8004df8:	58025408 	.word	0x58025408
 8004dfc:	5802541c 	.word	0x5802541c
 8004e00:	58025430 	.word	0x58025430
 8004e04:	58025444 	.word	0x58025444
 8004e08:	58025458 	.word	0x58025458
 8004e0c:	5802546c 	.word	0x5802546c
 8004e10:	58025480 	.word	0x58025480
 8004e14:	58025494 	.word	0x58025494
 8004e18:	2300      	movs	r3, #0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d021      	beq.n	8004e62 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2200      	movs	r2, #0
 8004e34:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2200      	movs	r2, #0
 8004e44:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f002 f900 	bl	800704c <DMA_CalcBaseAndBitshift>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	2201      	movs	r2, #1
 8004e5a:	409a      	lsls	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	605a      	str	r2, [r3, #4]
 8004e60:	e001      	b.n	8004e66 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e04a      	b.n	8004efc <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f002 fa1e 	bl	80072a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d008      	beq.n	8004e86 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e84:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00f      	beq.n	8004eae <HAL_DMA_DeInit+0x316>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d80b      	bhi.n	8004eae <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f002 faa0 	bl	80073dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004eac:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e226      	b.n	800536e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d101      	bne.n	8004f2e <HAL_DMA_Start_IT+0x2a>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e21f      	b.n	800536e <HAL_DMA_Start_IT+0x46a>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	f040 820a 	bne.w	8005358 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a68      	ldr	r2, [pc, #416]	; (80050f8 <HAL_DMA_Start_IT+0x1f4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d04a      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a66      	ldr	r2, [pc, #408]	; (80050fc <HAL_DMA_Start_IT+0x1f8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d045      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a65      	ldr	r2, [pc, #404]	; (8005100 <HAL_DMA_Start_IT+0x1fc>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d040      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a63      	ldr	r2, [pc, #396]	; (8005104 <HAL_DMA_Start_IT+0x200>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d03b      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a62      	ldr	r2, [pc, #392]	; (8005108 <HAL_DMA_Start_IT+0x204>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d036      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a60      	ldr	r2, [pc, #384]	; (800510c <HAL_DMA_Start_IT+0x208>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d031      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a5f      	ldr	r2, [pc, #380]	; (8005110 <HAL_DMA_Start_IT+0x20c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d02c      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a5d      	ldr	r2, [pc, #372]	; (8005114 <HAL_DMA_Start_IT+0x210>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d027      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a5c      	ldr	r2, [pc, #368]	; (8005118 <HAL_DMA_Start_IT+0x214>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d022      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a5a      	ldr	r2, [pc, #360]	; (800511c <HAL_DMA_Start_IT+0x218>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d01d      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a59      	ldr	r2, [pc, #356]	; (8005120 <HAL_DMA_Start_IT+0x21c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d018      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a57      	ldr	r2, [pc, #348]	; (8005124 <HAL_DMA_Start_IT+0x220>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d013      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a56      	ldr	r2, [pc, #344]	; (8005128 <HAL_DMA_Start_IT+0x224>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d00e      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a54      	ldr	r2, [pc, #336]	; (800512c <HAL_DMA_Start_IT+0x228>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d009      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a53      	ldr	r2, [pc, #332]	; (8005130 <HAL_DMA_Start_IT+0x22c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d004      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a51      	ldr	r2, [pc, #324]	; (8005134 <HAL_DMA_Start_IT+0x230>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d108      	bne.n	8005004 <HAL_DMA_Start_IT+0x100>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0201 	bic.w	r2, r2, #1
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	e007      	b.n	8005014 <HAL_DMA_Start_IT+0x110>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0201 	bic.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	68b9      	ldr	r1, [r7, #8]
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f001 fe6a 	bl	8006cf4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a34      	ldr	r2, [pc, #208]	; (80050f8 <HAL_DMA_Start_IT+0x1f4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d04a      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a33      	ldr	r2, [pc, #204]	; (80050fc <HAL_DMA_Start_IT+0x1f8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d045      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a31      	ldr	r2, [pc, #196]	; (8005100 <HAL_DMA_Start_IT+0x1fc>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d040      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a30      	ldr	r2, [pc, #192]	; (8005104 <HAL_DMA_Start_IT+0x200>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d03b      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a2e      	ldr	r2, [pc, #184]	; (8005108 <HAL_DMA_Start_IT+0x204>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d036      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a2d      	ldr	r2, [pc, #180]	; (800510c <HAL_DMA_Start_IT+0x208>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d031      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a2b      	ldr	r2, [pc, #172]	; (8005110 <HAL_DMA_Start_IT+0x20c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d02c      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a2a      	ldr	r2, [pc, #168]	; (8005114 <HAL_DMA_Start_IT+0x210>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d027      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a28      	ldr	r2, [pc, #160]	; (8005118 <HAL_DMA_Start_IT+0x214>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d022      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a27      	ldr	r2, [pc, #156]	; (800511c <HAL_DMA_Start_IT+0x218>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d01d      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a25      	ldr	r2, [pc, #148]	; (8005120 <HAL_DMA_Start_IT+0x21c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d018      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a24      	ldr	r2, [pc, #144]	; (8005124 <HAL_DMA_Start_IT+0x220>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d013      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a22      	ldr	r2, [pc, #136]	; (8005128 <HAL_DMA_Start_IT+0x224>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00e      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a21      	ldr	r2, [pc, #132]	; (800512c <HAL_DMA_Start_IT+0x228>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d009      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a1f      	ldr	r2, [pc, #124]	; (8005130 <HAL_DMA_Start_IT+0x22c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d004      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1e      	ldr	r2, [pc, #120]	; (8005134 <HAL_DMA_Start_IT+0x230>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d101      	bne.n	80050c4 <HAL_DMA_Start_IT+0x1c0>
 80050c0:	2301      	movs	r3, #1
 80050c2:	e000      	b.n	80050c6 <HAL_DMA_Start_IT+0x1c2>
 80050c4:	2300      	movs	r3, #0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d036      	beq.n	8005138 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f023 021e 	bic.w	r2, r3, #30
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f042 0216 	orr.w	r2, r2, #22
 80050dc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d03e      	beq.n	8005164 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0208 	orr.w	r2, r2, #8
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	e035      	b.n	8005164 <HAL_DMA_Start_IT+0x260>
 80050f8:	40020010 	.word	0x40020010
 80050fc:	40020028 	.word	0x40020028
 8005100:	40020040 	.word	0x40020040
 8005104:	40020058 	.word	0x40020058
 8005108:	40020070 	.word	0x40020070
 800510c:	40020088 	.word	0x40020088
 8005110:	400200a0 	.word	0x400200a0
 8005114:	400200b8 	.word	0x400200b8
 8005118:	40020410 	.word	0x40020410
 800511c:	40020428 	.word	0x40020428
 8005120:	40020440 	.word	0x40020440
 8005124:	40020458 	.word	0x40020458
 8005128:	40020470 	.word	0x40020470
 800512c:	40020488 	.word	0x40020488
 8005130:	400204a0 	.word	0x400204a0
 8005134:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f023 020e 	bic.w	r2, r3, #14
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 020a 	orr.w	r2, r2, #10
 800514a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	2b00      	cmp	r3, #0
 8005152:	d007      	beq.n	8005164 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0204 	orr.w	r2, r2, #4
 8005162:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a83      	ldr	r2, [pc, #524]	; (8005378 <HAL_DMA_Start_IT+0x474>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d072      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a82      	ldr	r2, [pc, #520]	; (800537c <HAL_DMA_Start_IT+0x478>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d06d      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a80      	ldr	r2, [pc, #512]	; (8005380 <HAL_DMA_Start_IT+0x47c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d068      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a7f      	ldr	r2, [pc, #508]	; (8005384 <HAL_DMA_Start_IT+0x480>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d063      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a7d      	ldr	r2, [pc, #500]	; (8005388 <HAL_DMA_Start_IT+0x484>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d05e      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a7c      	ldr	r2, [pc, #496]	; (800538c <HAL_DMA_Start_IT+0x488>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d059      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a7a      	ldr	r2, [pc, #488]	; (8005390 <HAL_DMA_Start_IT+0x48c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d054      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a79      	ldr	r2, [pc, #484]	; (8005394 <HAL_DMA_Start_IT+0x490>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d04f      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a77      	ldr	r2, [pc, #476]	; (8005398 <HAL_DMA_Start_IT+0x494>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d04a      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a76      	ldr	r2, [pc, #472]	; (800539c <HAL_DMA_Start_IT+0x498>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d045      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a74      	ldr	r2, [pc, #464]	; (80053a0 <HAL_DMA_Start_IT+0x49c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d040      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a73      	ldr	r2, [pc, #460]	; (80053a4 <HAL_DMA_Start_IT+0x4a0>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d03b      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a71      	ldr	r2, [pc, #452]	; (80053a8 <HAL_DMA_Start_IT+0x4a4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d036      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a70      	ldr	r2, [pc, #448]	; (80053ac <HAL_DMA_Start_IT+0x4a8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d031      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a6e      	ldr	r2, [pc, #440]	; (80053b0 <HAL_DMA_Start_IT+0x4ac>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d02c      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a6d      	ldr	r2, [pc, #436]	; (80053b4 <HAL_DMA_Start_IT+0x4b0>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d027      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a6b      	ldr	r2, [pc, #428]	; (80053b8 <HAL_DMA_Start_IT+0x4b4>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d022      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a6a      	ldr	r2, [pc, #424]	; (80053bc <HAL_DMA_Start_IT+0x4b8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d01d      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a68      	ldr	r2, [pc, #416]	; (80053c0 <HAL_DMA_Start_IT+0x4bc>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d018      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a67      	ldr	r2, [pc, #412]	; (80053c4 <HAL_DMA_Start_IT+0x4c0>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d013      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a65      	ldr	r2, [pc, #404]	; (80053c8 <HAL_DMA_Start_IT+0x4c4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00e      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a64      	ldr	r2, [pc, #400]	; (80053cc <HAL_DMA_Start_IT+0x4c8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d009      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a62      	ldr	r2, [pc, #392]	; (80053d0 <HAL_DMA_Start_IT+0x4cc>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a61      	ldr	r2, [pc, #388]	; (80053d4 <HAL_DMA_Start_IT+0x4d0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d101      	bne.n	8005258 <HAL_DMA_Start_IT+0x354>
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <HAL_DMA_Start_IT+0x356>
 8005258:	2300      	movs	r3, #0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d01a      	beq.n	8005294 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d007      	beq.n	800527c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800527a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005280:	2b00      	cmp	r3, #0
 8005282:	d007      	beq.n	8005294 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800528e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005292:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a37      	ldr	r2, [pc, #220]	; (8005378 <HAL_DMA_Start_IT+0x474>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d04a      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a36      	ldr	r2, [pc, #216]	; (800537c <HAL_DMA_Start_IT+0x478>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d045      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a34      	ldr	r2, [pc, #208]	; (8005380 <HAL_DMA_Start_IT+0x47c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d040      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a33      	ldr	r2, [pc, #204]	; (8005384 <HAL_DMA_Start_IT+0x480>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d03b      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a31      	ldr	r2, [pc, #196]	; (8005388 <HAL_DMA_Start_IT+0x484>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d036      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a30      	ldr	r2, [pc, #192]	; (800538c <HAL_DMA_Start_IT+0x488>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d031      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a2e      	ldr	r2, [pc, #184]	; (8005390 <HAL_DMA_Start_IT+0x48c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d02c      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a2d      	ldr	r2, [pc, #180]	; (8005394 <HAL_DMA_Start_IT+0x490>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d027      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a2b      	ldr	r2, [pc, #172]	; (8005398 <HAL_DMA_Start_IT+0x494>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d022      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a2a      	ldr	r2, [pc, #168]	; (800539c <HAL_DMA_Start_IT+0x498>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d01d      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a28      	ldr	r2, [pc, #160]	; (80053a0 <HAL_DMA_Start_IT+0x49c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d018      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a27      	ldr	r2, [pc, #156]	; (80053a4 <HAL_DMA_Start_IT+0x4a0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d013      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a25      	ldr	r2, [pc, #148]	; (80053a8 <HAL_DMA_Start_IT+0x4a4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00e      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a24      	ldr	r2, [pc, #144]	; (80053ac <HAL_DMA_Start_IT+0x4a8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d009      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a22      	ldr	r2, [pc, #136]	; (80053b0 <HAL_DMA_Start_IT+0x4ac>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d004      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a21      	ldr	r2, [pc, #132]	; (80053b4 <HAL_DMA_Start_IT+0x4b0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d108      	bne.n	8005346 <HAL_DMA_Start_IT+0x442>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	e012      	b.n	800536c <HAL_DMA_Start_IT+0x468>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f042 0201 	orr.w	r2, r2, #1
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e009      	b.n	800536c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800535e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800536c:	7dfb      	ldrb	r3, [r7, #23]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	40020010 	.word	0x40020010
 800537c:	40020028 	.word	0x40020028
 8005380:	40020040 	.word	0x40020040
 8005384:	40020058 	.word	0x40020058
 8005388:	40020070 	.word	0x40020070
 800538c:	40020088 	.word	0x40020088
 8005390:	400200a0 	.word	0x400200a0
 8005394:	400200b8 	.word	0x400200b8
 8005398:	40020410 	.word	0x40020410
 800539c:	40020428 	.word	0x40020428
 80053a0:	40020440 	.word	0x40020440
 80053a4:	40020458 	.word	0x40020458
 80053a8:	40020470 	.word	0x40020470
 80053ac:	40020488 	.word	0x40020488
 80053b0:	400204a0 	.word	0x400204a0
 80053b4:	400204b8 	.word	0x400204b8
 80053b8:	58025408 	.word	0x58025408
 80053bc:	5802541c 	.word	0x5802541c
 80053c0:	58025430 	.word	0x58025430
 80053c4:	58025444 	.word	0x58025444
 80053c8:	58025458 	.word	0x58025458
 80053cc:	5802546c 	.word	0x5802546c
 80053d0:	58025480 	.word	0x58025480
 80053d4:	58025494 	.word	0x58025494

080053d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80053e0:	f7fe ff32 	bl	8004248 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e2dc      	b.n	80059aa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d008      	beq.n	800540e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2280      	movs	r2, #128	; 0x80
 8005400:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e2cd      	b.n	80059aa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a76      	ldr	r2, [pc, #472]	; (80055ec <HAL_DMA_Abort+0x214>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d04a      	beq.n	80054ae <HAL_DMA_Abort+0xd6>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a74      	ldr	r2, [pc, #464]	; (80055f0 <HAL_DMA_Abort+0x218>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d045      	beq.n	80054ae <HAL_DMA_Abort+0xd6>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a73      	ldr	r2, [pc, #460]	; (80055f4 <HAL_DMA_Abort+0x21c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d040      	beq.n	80054ae <HAL_DMA_Abort+0xd6>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a71      	ldr	r2, [pc, #452]	; (80055f8 <HAL_DMA_Abort+0x220>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d03b      	beq.n	80054ae <HAL_DMA_Abort+0xd6>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a70      	ldr	r2, [pc, #448]	; (80055fc <HAL_DMA_Abort+0x224>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d036      	beq.n	80054ae <HAL_DMA_Abort+0xd6>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a6e      	ldr	r2, [pc, #440]	; (8005600 <HAL_DMA_Abort+0x228>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d031      	beq.n	80054ae <HAL_DMA_Abort+0xd6>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a6d      	ldr	r2, [pc, #436]	; (8005604 <HAL_DMA_Abort+0x22c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d02c      	beq.n	80054ae <HAL_DMA_Abort+0xd6>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a6b      	ldr	r2, [pc, #428]	; (8005608 <HAL_DMA_Abort+0x230>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d027      	beq.n	80054ae <HAL_DMA_Abort+0xd6>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a6a      	ldr	r2, [pc, #424]	; (800560c <HAL_DMA_Abort+0x234>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d022      	beq.n	80054ae <HAL_DMA_Abort+0xd6>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a68      	ldr	r2, [pc, #416]	; (8005610 <HAL_DMA_Abort+0x238>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d01d      	beq.n	80054ae <HAL_DMA_Abort+0xd6>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a67      	ldr	r2, [pc, #412]	; (8005614 <HAL_DMA_Abort+0x23c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d018      	beq.n	80054ae <HAL_DMA_Abort+0xd6>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a65      	ldr	r2, [pc, #404]	; (8005618 <HAL_DMA_Abort+0x240>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d013      	beq.n	80054ae <HAL_DMA_Abort+0xd6>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a64      	ldr	r2, [pc, #400]	; (800561c <HAL_DMA_Abort+0x244>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00e      	beq.n	80054ae <HAL_DMA_Abort+0xd6>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a62      	ldr	r2, [pc, #392]	; (8005620 <HAL_DMA_Abort+0x248>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d009      	beq.n	80054ae <HAL_DMA_Abort+0xd6>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a61      	ldr	r2, [pc, #388]	; (8005624 <HAL_DMA_Abort+0x24c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d004      	beq.n	80054ae <HAL_DMA_Abort+0xd6>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a5f      	ldr	r2, [pc, #380]	; (8005628 <HAL_DMA_Abort+0x250>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d101      	bne.n	80054b2 <HAL_DMA_Abort+0xda>
 80054ae:	2301      	movs	r3, #1
 80054b0:	e000      	b.n	80054b4 <HAL_DMA_Abort+0xdc>
 80054b2:	2300      	movs	r3, #0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d013      	beq.n	80054e0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 021e 	bic.w	r2, r2, #30
 80054c6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	695a      	ldr	r2, [r3, #20]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054d6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	e00a      	b.n	80054f6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 020e 	bic.w	r2, r2, #14
 80054ee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a3c      	ldr	r2, [pc, #240]	; (80055ec <HAL_DMA_Abort+0x214>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d072      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a3a      	ldr	r2, [pc, #232]	; (80055f0 <HAL_DMA_Abort+0x218>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d06d      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a39      	ldr	r2, [pc, #228]	; (80055f4 <HAL_DMA_Abort+0x21c>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d068      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a37      	ldr	r2, [pc, #220]	; (80055f8 <HAL_DMA_Abort+0x220>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d063      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a36      	ldr	r2, [pc, #216]	; (80055fc <HAL_DMA_Abort+0x224>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d05e      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a34      	ldr	r2, [pc, #208]	; (8005600 <HAL_DMA_Abort+0x228>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d059      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a33      	ldr	r2, [pc, #204]	; (8005604 <HAL_DMA_Abort+0x22c>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d054      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a31      	ldr	r2, [pc, #196]	; (8005608 <HAL_DMA_Abort+0x230>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d04f      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a30      	ldr	r2, [pc, #192]	; (800560c <HAL_DMA_Abort+0x234>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d04a      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a2e      	ldr	r2, [pc, #184]	; (8005610 <HAL_DMA_Abort+0x238>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d045      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a2d      	ldr	r2, [pc, #180]	; (8005614 <HAL_DMA_Abort+0x23c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d040      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a2b      	ldr	r2, [pc, #172]	; (8005618 <HAL_DMA_Abort+0x240>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d03b      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a2a      	ldr	r2, [pc, #168]	; (800561c <HAL_DMA_Abort+0x244>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d036      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a28      	ldr	r2, [pc, #160]	; (8005620 <HAL_DMA_Abort+0x248>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d031      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a27      	ldr	r2, [pc, #156]	; (8005624 <HAL_DMA_Abort+0x24c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d02c      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a25      	ldr	r2, [pc, #148]	; (8005628 <HAL_DMA_Abort+0x250>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d027      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a24      	ldr	r2, [pc, #144]	; (800562c <HAL_DMA_Abort+0x254>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d022      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a22      	ldr	r2, [pc, #136]	; (8005630 <HAL_DMA_Abort+0x258>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d01d      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a21      	ldr	r2, [pc, #132]	; (8005634 <HAL_DMA_Abort+0x25c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d018      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a1f      	ldr	r2, [pc, #124]	; (8005638 <HAL_DMA_Abort+0x260>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d013      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a1e      	ldr	r2, [pc, #120]	; (800563c <HAL_DMA_Abort+0x264>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00e      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a1c      	ldr	r2, [pc, #112]	; (8005640 <HAL_DMA_Abort+0x268>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d009      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a1b      	ldr	r2, [pc, #108]	; (8005644 <HAL_DMA_Abort+0x26c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d004      	beq.n	80055e6 <HAL_DMA_Abort+0x20e>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a19      	ldr	r2, [pc, #100]	; (8005648 <HAL_DMA_Abort+0x270>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d132      	bne.n	800564c <HAL_DMA_Abort+0x274>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e031      	b.n	800564e <HAL_DMA_Abort+0x276>
 80055ea:	bf00      	nop
 80055ec:	40020010 	.word	0x40020010
 80055f0:	40020028 	.word	0x40020028
 80055f4:	40020040 	.word	0x40020040
 80055f8:	40020058 	.word	0x40020058
 80055fc:	40020070 	.word	0x40020070
 8005600:	40020088 	.word	0x40020088
 8005604:	400200a0 	.word	0x400200a0
 8005608:	400200b8 	.word	0x400200b8
 800560c:	40020410 	.word	0x40020410
 8005610:	40020428 	.word	0x40020428
 8005614:	40020440 	.word	0x40020440
 8005618:	40020458 	.word	0x40020458
 800561c:	40020470 	.word	0x40020470
 8005620:	40020488 	.word	0x40020488
 8005624:	400204a0 	.word	0x400204a0
 8005628:	400204b8 	.word	0x400204b8
 800562c:	58025408 	.word	0x58025408
 8005630:	5802541c 	.word	0x5802541c
 8005634:	58025430 	.word	0x58025430
 8005638:	58025444 	.word	0x58025444
 800563c:	58025458 	.word	0x58025458
 8005640:	5802546c 	.word	0x5802546c
 8005644:	58025480 	.word	0x58025480
 8005648:	58025494 	.word	0x58025494
 800564c:	2300      	movs	r3, #0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d007      	beq.n	8005662 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005660:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a6d      	ldr	r2, [pc, #436]	; (800581c <HAL_DMA_Abort+0x444>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d04a      	beq.n	8005702 <HAL_DMA_Abort+0x32a>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a6b      	ldr	r2, [pc, #428]	; (8005820 <HAL_DMA_Abort+0x448>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d045      	beq.n	8005702 <HAL_DMA_Abort+0x32a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a6a      	ldr	r2, [pc, #424]	; (8005824 <HAL_DMA_Abort+0x44c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d040      	beq.n	8005702 <HAL_DMA_Abort+0x32a>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a68      	ldr	r2, [pc, #416]	; (8005828 <HAL_DMA_Abort+0x450>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d03b      	beq.n	8005702 <HAL_DMA_Abort+0x32a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a67      	ldr	r2, [pc, #412]	; (800582c <HAL_DMA_Abort+0x454>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d036      	beq.n	8005702 <HAL_DMA_Abort+0x32a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a65      	ldr	r2, [pc, #404]	; (8005830 <HAL_DMA_Abort+0x458>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d031      	beq.n	8005702 <HAL_DMA_Abort+0x32a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a64      	ldr	r2, [pc, #400]	; (8005834 <HAL_DMA_Abort+0x45c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d02c      	beq.n	8005702 <HAL_DMA_Abort+0x32a>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a62      	ldr	r2, [pc, #392]	; (8005838 <HAL_DMA_Abort+0x460>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d027      	beq.n	8005702 <HAL_DMA_Abort+0x32a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a61      	ldr	r2, [pc, #388]	; (800583c <HAL_DMA_Abort+0x464>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d022      	beq.n	8005702 <HAL_DMA_Abort+0x32a>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a5f      	ldr	r2, [pc, #380]	; (8005840 <HAL_DMA_Abort+0x468>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d01d      	beq.n	8005702 <HAL_DMA_Abort+0x32a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a5e      	ldr	r2, [pc, #376]	; (8005844 <HAL_DMA_Abort+0x46c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d018      	beq.n	8005702 <HAL_DMA_Abort+0x32a>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a5c      	ldr	r2, [pc, #368]	; (8005848 <HAL_DMA_Abort+0x470>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d013      	beq.n	8005702 <HAL_DMA_Abort+0x32a>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a5b      	ldr	r2, [pc, #364]	; (800584c <HAL_DMA_Abort+0x474>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d00e      	beq.n	8005702 <HAL_DMA_Abort+0x32a>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a59      	ldr	r2, [pc, #356]	; (8005850 <HAL_DMA_Abort+0x478>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d009      	beq.n	8005702 <HAL_DMA_Abort+0x32a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a58      	ldr	r2, [pc, #352]	; (8005854 <HAL_DMA_Abort+0x47c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d004      	beq.n	8005702 <HAL_DMA_Abort+0x32a>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a56      	ldr	r2, [pc, #344]	; (8005858 <HAL_DMA_Abort+0x480>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d108      	bne.n	8005714 <HAL_DMA_Abort+0x33c>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0201 	bic.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	e007      	b.n	8005724 <HAL_DMA_Abort+0x34c>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0201 	bic.w	r2, r2, #1
 8005722:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005724:	e013      	b.n	800574e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005726:	f7fe fd8f 	bl	8004248 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b05      	cmp	r3, #5
 8005732:	d90c      	bls.n	800574e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2220      	movs	r2, #32
 8005738:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2203      	movs	r2, #3
 800573e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e12d      	b.n	80059aa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1e5      	bne.n	8005726 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a2f      	ldr	r2, [pc, #188]	; (800581c <HAL_DMA_Abort+0x444>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d04a      	beq.n	80057fa <HAL_DMA_Abort+0x422>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a2d      	ldr	r2, [pc, #180]	; (8005820 <HAL_DMA_Abort+0x448>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d045      	beq.n	80057fa <HAL_DMA_Abort+0x422>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a2c      	ldr	r2, [pc, #176]	; (8005824 <HAL_DMA_Abort+0x44c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d040      	beq.n	80057fa <HAL_DMA_Abort+0x422>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a2a      	ldr	r2, [pc, #168]	; (8005828 <HAL_DMA_Abort+0x450>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d03b      	beq.n	80057fa <HAL_DMA_Abort+0x422>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a29      	ldr	r2, [pc, #164]	; (800582c <HAL_DMA_Abort+0x454>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d036      	beq.n	80057fa <HAL_DMA_Abort+0x422>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a27      	ldr	r2, [pc, #156]	; (8005830 <HAL_DMA_Abort+0x458>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d031      	beq.n	80057fa <HAL_DMA_Abort+0x422>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a26      	ldr	r2, [pc, #152]	; (8005834 <HAL_DMA_Abort+0x45c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d02c      	beq.n	80057fa <HAL_DMA_Abort+0x422>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a24      	ldr	r2, [pc, #144]	; (8005838 <HAL_DMA_Abort+0x460>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d027      	beq.n	80057fa <HAL_DMA_Abort+0x422>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a23      	ldr	r2, [pc, #140]	; (800583c <HAL_DMA_Abort+0x464>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d022      	beq.n	80057fa <HAL_DMA_Abort+0x422>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a21      	ldr	r2, [pc, #132]	; (8005840 <HAL_DMA_Abort+0x468>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d01d      	beq.n	80057fa <HAL_DMA_Abort+0x422>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a20      	ldr	r2, [pc, #128]	; (8005844 <HAL_DMA_Abort+0x46c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d018      	beq.n	80057fa <HAL_DMA_Abort+0x422>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a1e      	ldr	r2, [pc, #120]	; (8005848 <HAL_DMA_Abort+0x470>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d013      	beq.n	80057fa <HAL_DMA_Abort+0x422>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a1d      	ldr	r2, [pc, #116]	; (800584c <HAL_DMA_Abort+0x474>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00e      	beq.n	80057fa <HAL_DMA_Abort+0x422>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a1b      	ldr	r2, [pc, #108]	; (8005850 <HAL_DMA_Abort+0x478>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d009      	beq.n	80057fa <HAL_DMA_Abort+0x422>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a1a      	ldr	r2, [pc, #104]	; (8005854 <HAL_DMA_Abort+0x47c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d004      	beq.n	80057fa <HAL_DMA_Abort+0x422>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a18      	ldr	r2, [pc, #96]	; (8005858 <HAL_DMA_Abort+0x480>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d101      	bne.n	80057fe <HAL_DMA_Abort+0x426>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <HAL_DMA_Abort+0x428>
 80057fe:	2300      	movs	r3, #0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d02b      	beq.n	800585c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005808:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580e:	f003 031f 	and.w	r3, r3, #31
 8005812:	223f      	movs	r2, #63	; 0x3f
 8005814:	409a      	lsls	r2, r3
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	609a      	str	r2, [r3, #8]
 800581a:	e02a      	b.n	8005872 <HAL_DMA_Abort+0x49a>
 800581c:	40020010 	.word	0x40020010
 8005820:	40020028 	.word	0x40020028
 8005824:	40020040 	.word	0x40020040
 8005828:	40020058 	.word	0x40020058
 800582c:	40020070 	.word	0x40020070
 8005830:	40020088 	.word	0x40020088
 8005834:	400200a0 	.word	0x400200a0
 8005838:	400200b8 	.word	0x400200b8
 800583c:	40020410 	.word	0x40020410
 8005840:	40020428 	.word	0x40020428
 8005844:	40020440 	.word	0x40020440
 8005848:	40020458 	.word	0x40020458
 800584c:	40020470 	.word	0x40020470
 8005850:	40020488 	.word	0x40020488
 8005854:	400204a0 	.word	0x400204a0
 8005858:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005860:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005866:	f003 031f 	and.w	r3, r3, #31
 800586a:	2201      	movs	r2, #1
 800586c:	409a      	lsls	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a4f      	ldr	r2, [pc, #316]	; (80059b4 <HAL_DMA_Abort+0x5dc>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d072      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a4d      	ldr	r2, [pc, #308]	; (80059b8 <HAL_DMA_Abort+0x5e0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d06d      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a4c      	ldr	r2, [pc, #304]	; (80059bc <HAL_DMA_Abort+0x5e4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d068      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a4a      	ldr	r2, [pc, #296]	; (80059c0 <HAL_DMA_Abort+0x5e8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d063      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a49      	ldr	r2, [pc, #292]	; (80059c4 <HAL_DMA_Abort+0x5ec>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d05e      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a47      	ldr	r2, [pc, #284]	; (80059c8 <HAL_DMA_Abort+0x5f0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d059      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a46      	ldr	r2, [pc, #280]	; (80059cc <HAL_DMA_Abort+0x5f4>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d054      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a44      	ldr	r2, [pc, #272]	; (80059d0 <HAL_DMA_Abort+0x5f8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d04f      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a43      	ldr	r2, [pc, #268]	; (80059d4 <HAL_DMA_Abort+0x5fc>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d04a      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a41      	ldr	r2, [pc, #260]	; (80059d8 <HAL_DMA_Abort+0x600>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d045      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a40      	ldr	r2, [pc, #256]	; (80059dc <HAL_DMA_Abort+0x604>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d040      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a3e      	ldr	r2, [pc, #248]	; (80059e0 <HAL_DMA_Abort+0x608>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d03b      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a3d      	ldr	r2, [pc, #244]	; (80059e4 <HAL_DMA_Abort+0x60c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d036      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a3b      	ldr	r2, [pc, #236]	; (80059e8 <HAL_DMA_Abort+0x610>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d031      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a3a      	ldr	r2, [pc, #232]	; (80059ec <HAL_DMA_Abort+0x614>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d02c      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a38      	ldr	r2, [pc, #224]	; (80059f0 <HAL_DMA_Abort+0x618>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d027      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a37      	ldr	r2, [pc, #220]	; (80059f4 <HAL_DMA_Abort+0x61c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d022      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a35      	ldr	r2, [pc, #212]	; (80059f8 <HAL_DMA_Abort+0x620>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d01d      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a34      	ldr	r2, [pc, #208]	; (80059fc <HAL_DMA_Abort+0x624>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d018      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a32      	ldr	r2, [pc, #200]	; (8005a00 <HAL_DMA_Abort+0x628>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a31      	ldr	r2, [pc, #196]	; (8005a04 <HAL_DMA_Abort+0x62c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00e      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a2f      	ldr	r2, [pc, #188]	; (8005a08 <HAL_DMA_Abort+0x630>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d009      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a2e      	ldr	r2, [pc, #184]	; (8005a0c <HAL_DMA_Abort+0x634>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d004      	beq.n	8005962 <HAL_DMA_Abort+0x58a>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a2c      	ldr	r2, [pc, #176]	; (8005a10 <HAL_DMA_Abort+0x638>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d101      	bne.n	8005966 <HAL_DMA_Abort+0x58e>
 8005962:	2301      	movs	r3, #1
 8005964:	e000      	b.n	8005968 <HAL_DMA_Abort+0x590>
 8005966:	2300      	movs	r3, #0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d015      	beq.n	8005998 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005974:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00c      	beq.n	8005998 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005988:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800598c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005996:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	40020010 	.word	0x40020010
 80059b8:	40020028 	.word	0x40020028
 80059bc:	40020040 	.word	0x40020040
 80059c0:	40020058 	.word	0x40020058
 80059c4:	40020070 	.word	0x40020070
 80059c8:	40020088 	.word	0x40020088
 80059cc:	400200a0 	.word	0x400200a0
 80059d0:	400200b8 	.word	0x400200b8
 80059d4:	40020410 	.word	0x40020410
 80059d8:	40020428 	.word	0x40020428
 80059dc:	40020440 	.word	0x40020440
 80059e0:	40020458 	.word	0x40020458
 80059e4:	40020470 	.word	0x40020470
 80059e8:	40020488 	.word	0x40020488
 80059ec:	400204a0 	.word	0x400204a0
 80059f0:	400204b8 	.word	0x400204b8
 80059f4:	58025408 	.word	0x58025408
 80059f8:	5802541c 	.word	0x5802541c
 80059fc:	58025430 	.word	0x58025430
 8005a00:	58025444 	.word	0x58025444
 8005a04:	58025458 	.word	0x58025458
 8005a08:	5802546c 	.word	0x5802546c
 8005a0c:	58025480 	.word	0x58025480
 8005a10:	58025494 	.word	0x58025494

08005a14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e237      	b.n	8005e96 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d004      	beq.n	8005a3c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2280      	movs	r2, #128	; 0x80
 8005a36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e22c      	b.n	8005e96 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a5c      	ldr	r2, [pc, #368]	; (8005bb4 <HAL_DMA_Abort_IT+0x1a0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d04a      	beq.n	8005adc <HAL_DMA_Abort_IT+0xc8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a5b      	ldr	r2, [pc, #364]	; (8005bb8 <HAL_DMA_Abort_IT+0x1a4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d045      	beq.n	8005adc <HAL_DMA_Abort_IT+0xc8>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a59      	ldr	r2, [pc, #356]	; (8005bbc <HAL_DMA_Abort_IT+0x1a8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d040      	beq.n	8005adc <HAL_DMA_Abort_IT+0xc8>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a58      	ldr	r2, [pc, #352]	; (8005bc0 <HAL_DMA_Abort_IT+0x1ac>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d03b      	beq.n	8005adc <HAL_DMA_Abort_IT+0xc8>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a56      	ldr	r2, [pc, #344]	; (8005bc4 <HAL_DMA_Abort_IT+0x1b0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d036      	beq.n	8005adc <HAL_DMA_Abort_IT+0xc8>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a55      	ldr	r2, [pc, #340]	; (8005bc8 <HAL_DMA_Abort_IT+0x1b4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d031      	beq.n	8005adc <HAL_DMA_Abort_IT+0xc8>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a53      	ldr	r2, [pc, #332]	; (8005bcc <HAL_DMA_Abort_IT+0x1b8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d02c      	beq.n	8005adc <HAL_DMA_Abort_IT+0xc8>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a52      	ldr	r2, [pc, #328]	; (8005bd0 <HAL_DMA_Abort_IT+0x1bc>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d027      	beq.n	8005adc <HAL_DMA_Abort_IT+0xc8>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a50      	ldr	r2, [pc, #320]	; (8005bd4 <HAL_DMA_Abort_IT+0x1c0>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d022      	beq.n	8005adc <HAL_DMA_Abort_IT+0xc8>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a4f      	ldr	r2, [pc, #316]	; (8005bd8 <HAL_DMA_Abort_IT+0x1c4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d01d      	beq.n	8005adc <HAL_DMA_Abort_IT+0xc8>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a4d      	ldr	r2, [pc, #308]	; (8005bdc <HAL_DMA_Abort_IT+0x1c8>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d018      	beq.n	8005adc <HAL_DMA_Abort_IT+0xc8>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a4c      	ldr	r2, [pc, #304]	; (8005be0 <HAL_DMA_Abort_IT+0x1cc>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d013      	beq.n	8005adc <HAL_DMA_Abort_IT+0xc8>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a4a      	ldr	r2, [pc, #296]	; (8005be4 <HAL_DMA_Abort_IT+0x1d0>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00e      	beq.n	8005adc <HAL_DMA_Abort_IT+0xc8>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a49      	ldr	r2, [pc, #292]	; (8005be8 <HAL_DMA_Abort_IT+0x1d4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d009      	beq.n	8005adc <HAL_DMA_Abort_IT+0xc8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a47      	ldr	r2, [pc, #284]	; (8005bec <HAL_DMA_Abort_IT+0x1d8>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d004      	beq.n	8005adc <HAL_DMA_Abort_IT+0xc8>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a46      	ldr	r2, [pc, #280]	; (8005bf0 <HAL_DMA_Abort_IT+0x1dc>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d101      	bne.n	8005ae0 <HAL_DMA_Abort_IT+0xcc>
 8005adc:	2301      	movs	r3, #1
 8005ade:	e000      	b.n	8005ae2 <HAL_DMA_Abort_IT+0xce>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 8086 	beq.w	8005bf4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2204      	movs	r2, #4
 8005aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a2f      	ldr	r2, [pc, #188]	; (8005bb4 <HAL_DMA_Abort_IT+0x1a0>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d04a      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x17c>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a2e      	ldr	r2, [pc, #184]	; (8005bb8 <HAL_DMA_Abort_IT+0x1a4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d045      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x17c>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a2c      	ldr	r2, [pc, #176]	; (8005bbc <HAL_DMA_Abort_IT+0x1a8>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d040      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x17c>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a2b      	ldr	r2, [pc, #172]	; (8005bc0 <HAL_DMA_Abort_IT+0x1ac>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d03b      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x17c>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a29      	ldr	r2, [pc, #164]	; (8005bc4 <HAL_DMA_Abort_IT+0x1b0>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d036      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x17c>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a28      	ldr	r2, [pc, #160]	; (8005bc8 <HAL_DMA_Abort_IT+0x1b4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d031      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x17c>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a26      	ldr	r2, [pc, #152]	; (8005bcc <HAL_DMA_Abort_IT+0x1b8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d02c      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x17c>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a25      	ldr	r2, [pc, #148]	; (8005bd0 <HAL_DMA_Abort_IT+0x1bc>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d027      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x17c>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a23      	ldr	r2, [pc, #140]	; (8005bd4 <HAL_DMA_Abort_IT+0x1c0>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d022      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x17c>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a22      	ldr	r2, [pc, #136]	; (8005bd8 <HAL_DMA_Abort_IT+0x1c4>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d01d      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x17c>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a20      	ldr	r2, [pc, #128]	; (8005bdc <HAL_DMA_Abort_IT+0x1c8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d018      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x17c>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a1f      	ldr	r2, [pc, #124]	; (8005be0 <HAL_DMA_Abort_IT+0x1cc>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d013      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x17c>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a1d      	ldr	r2, [pc, #116]	; (8005be4 <HAL_DMA_Abort_IT+0x1d0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d00e      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x17c>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a1c      	ldr	r2, [pc, #112]	; (8005be8 <HAL_DMA_Abort_IT+0x1d4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d009      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x17c>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1a      	ldr	r2, [pc, #104]	; (8005bec <HAL_DMA_Abort_IT+0x1d8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d004      	beq.n	8005b90 <HAL_DMA_Abort_IT+0x17c>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a19      	ldr	r2, [pc, #100]	; (8005bf0 <HAL_DMA_Abort_IT+0x1dc>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d108      	bne.n	8005ba2 <HAL_DMA_Abort_IT+0x18e>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0201 	bic.w	r2, r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	e178      	b.n	8005e94 <HAL_DMA_Abort_IT+0x480>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0201 	bic.w	r2, r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	e16f      	b.n	8005e94 <HAL_DMA_Abort_IT+0x480>
 8005bb4:	40020010 	.word	0x40020010
 8005bb8:	40020028 	.word	0x40020028
 8005bbc:	40020040 	.word	0x40020040
 8005bc0:	40020058 	.word	0x40020058
 8005bc4:	40020070 	.word	0x40020070
 8005bc8:	40020088 	.word	0x40020088
 8005bcc:	400200a0 	.word	0x400200a0
 8005bd0:	400200b8 	.word	0x400200b8
 8005bd4:	40020410 	.word	0x40020410
 8005bd8:	40020428 	.word	0x40020428
 8005bdc:	40020440 	.word	0x40020440
 8005be0:	40020458 	.word	0x40020458
 8005be4:	40020470 	.word	0x40020470
 8005be8:	40020488 	.word	0x40020488
 8005bec:	400204a0 	.word	0x400204a0
 8005bf0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 020e 	bic.w	r2, r2, #14
 8005c02:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a6c      	ldr	r2, [pc, #432]	; (8005dbc <HAL_DMA_Abort_IT+0x3a8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d04a      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0x290>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a6b      	ldr	r2, [pc, #428]	; (8005dc0 <HAL_DMA_Abort_IT+0x3ac>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d045      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0x290>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a69      	ldr	r2, [pc, #420]	; (8005dc4 <HAL_DMA_Abort_IT+0x3b0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d040      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0x290>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a68      	ldr	r2, [pc, #416]	; (8005dc8 <HAL_DMA_Abort_IT+0x3b4>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d03b      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0x290>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a66      	ldr	r2, [pc, #408]	; (8005dcc <HAL_DMA_Abort_IT+0x3b8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d036      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0x290>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a65      	ldr	r2, [pc, #404]	; (8005dd0 <HAL_DMA_Abort_IT+0x3bc>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d031      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0x290>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a63      	ldr	r2, [pc, #396]	; (8005dd4 <HAL_DMA_Abort_IT+0x3c0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d02c      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0x290>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a62      	ldr	r2, [pc, #392]	; (8005dd8 <HAL_DMA_Abort_IT+0x3c4>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d027      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0x290>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a60      	ldr	r2, [pc, #384]	; (8005ddc <HAL_DMA_Abort_IT+0x3c8>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d022      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0x290>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a5f      	ldr	r2, [pc, #380]	; (8005de0 <HAL_DMA_Abort_IT+0x3cc>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d01d      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0x290>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a5d      	ldr	r2, [pc, #372]	; (8005de4 <HAL_DMA_Abort_IT+0x3d0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d018      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0x290>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a5c      	ldr	r2, [pc, #368]	; (8005de8 <HAL_DMA_Abort_IT+0x3d4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d013      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0x290>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a5a      	ldr	r2, [pc, #360]	; (8005dec <HAL_DMA_Abort_IT+0x3d8>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00e      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0x290>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a59      	ldr	r2, [pc, #356]	; (8005df0 <HAL_DMA_Abort_IT+0x3dc>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d009      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0x290>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a57      	ldr	r2, [pc, #348]	; (8005df4 <HAL_DMA_Abort_IT+0x3e0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d004      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0x290>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a56      	ldr	r2, [pc, #344]	; (8005df8 <HAL_DMA_Abort_IT+0x3e4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d108      	bne.n	8005cb6 <HAL_DMA_Abort_IT+0x2a2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0201 	bic.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	e007      	b.n	8005cc6 <HAL_DMA_Abort_IT+0x2b2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0201 	bic.w	r2, r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a3c      	ldr	r2, [pc, #240]	; (8005dbc <HAL_DMA_Abort_IT+0x3a8>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d072      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a3a      	ldr	r2, [pc, #232]	; (8005dc0 <HAL_DMA_Abort_IT+0x3ac>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d06d      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a39      	ldr	r2, [pc, #228]	; (8005dc4 <HAL_DMA_Abort_IT+0x3b0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d068      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a37      	ldr	r2, [pc, #220]	; (8005dc8 <HAL_DMA_Abort_IT+0x3b4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d063      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a36      	ldr	r2, [pc, #216]	; (8005dcc <HAL_DMA_Abort_IT+0x3b8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d05e      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a34      	ldr	r2, [pc, #208]	; (8005dd0 <HAL_DMA_Abort_IT+0x3bc>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d059      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a33      	ldr	r2, [pc, #204]	; (8005dd4 <HAL_DMA_Abort_IT+0x3c0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d054      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a31      	ldr	r2, [pc, #196]	; (8005dd8 <HAL_DMA_Abort_IT+0x3c4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d04f      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a30      	ldr	r2, [pc, #192]	; (8005ddc <HAL_DMA_Abort_IT+0x3c8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d04a      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a2e      	ldr	r2, [pc, #184]	; (8005de0 <HAL_DMA_Abort_IT+0x3cc>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d045      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a2d      	ldr	r2, [pc, #180]	; (8005de4 <HAL_DMA_Abort_IT+0x3d0>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d040      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a2b      	ldr	r2, [pc, #172]	; (8005de8 <HAL_DMA_Abort_IT+0x3d4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d03b      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a2a      	ldr	r2, [pc, #168]	; (8005dec <HAL_DMA_Abort_IT+0x3d8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d036      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a28      	ldr	r2, [pc, #160]	; (8005df0 <HAL_DMA_Abort_IT+0x3dc>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d031      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a27      	ldr	r2, [pc, #156]	; (8005df4 <HAL_DMA_Abort_IT+0x3e0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d02c      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a25      	ldr	r2, [pc, #148]	; (8005df8 <HAL_DMA_Abort_IT+0x3e4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d027      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a24      	ldr	r2, [pc, #144]	; (8005dfc <HAL_DMA_Abort_IT+0x3e8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d022      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a22      	ldr	r2, [pc, #136]	; (8005e00 <HAL_DMA_Abort_IT+0x3ec>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d01d      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a21      	ldr	r2, [pc, #132]	; (8005e04 <HAL_DMA_Abort_IT+0x3f0>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d018      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a1f      	ldr	r2, [pc, #124]	; (8005e08 <HAL_DMA_Abort_IT+0x3f4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d013      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a1e      	ldr	r2, [pc, #120]	; (8005e0c <HAL_DMA_Abort_IT+0x3f8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00e      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a1c      	ldr	r2, [pc, #112]	; (8005e10 <HAL_DMA_Abort_IT+0x3fc>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d009      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a1b      	ldr	r2, [pc, #108]	; (8005e14 <HAL_DMA_Abort_IT+0x400>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d004      	beq.n	8005db6 <HAL_DMA_Abort_IT+0x3a2>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a19      	ldr	r2, [pc, #100]	; (8005e18 <HAL_DMA_Abort_IT+0x404>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d132      	bne.n	8005e1c <HAL_DMA_Abort_IT+0x408>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e031      	b.n	8005e1e <HAL_DMA_Abort_IT+0x40a>
 8005dba:	bf00      	nop
 8005dbc:	40020010 	.word	0x40020010
 8005dc0:	40020028 	.word	0x40020028
 8005dc4:	40020040 	.word	0x40020040
 8005dc8:	40020058 	.word	0x40020058
 8005dcc:	40020070 	.word	0x40020070
 8005dd0:	40020088 	.word	0x40020088
 8005dd4:	400200a0 	.word	0x400200a0
 8005dd8:	400200b8 	.word	0x400200b8
 8005ddc:	40020410 	.word	0x40020410
 8005de0:	40020428 	.word	0x40020428
 8005de4:	40020440 	.word	0x40020440
 8005de8:	40020458 	.word	0x40020458
 8005dec:	40020470 	.word	0x40020470
 8005df0:	40020488 	.word	0x40020488
 8005df4:	400204a0 	.word	0x400204a0
 8005df8:	400204b8 	.word	0x400204b8
 8005dfc:	58025408 	.word	0x58025408
 8005e00:	5802541c 	.word	0x5802541c
 8005e04:	58025430 	.word	0x58025430
 8005e08:	58025444 	.word	0x58025444
 8005e0c:	58025458 	.word	0x58025458
 8005e10:	5802546c 	.word	0x5802546c
 8005e14:	58025480 	.word	0x58025480
 8005e18:	58025494 	.word	0x58025494
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d028      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e30:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e36:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e3c:	f003 031f 	and.w	r3, r3, #31
 8005e40:	2201      	movs	r2, #1
 8005e42:	409a      	lsls	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e50:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00c      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e68:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e72:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop

08005ea0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b08a      	sub	sp, #40	; 0x28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005eac:	4b67      	ldr	r3, [pc, #412]	; (800604c <HAL_DMA_IRQHandler+0x1ac>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a67      	ldr	r2, [pc, #412]	; (8006050 <HAL_DMA_IRQHandler+0x1b0>)
 8005eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb6:	0a9b      	lsrs	r3, r3, #10
 8005eb8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ebe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a5f      	ldr	r2, [pc, #380]	; (8006054 <HAL_DMA_IRQHandler+0x1b4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d04a      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xd2>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a5d      	ldr	r2, [pc, #372]	; (8006058 <HAL_DMA_IRQHandler+0x1b8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d045      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xd2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a5c      	ldr	r2, [pc, #368]	; (800605c <HAL_DMA_IRQHandler+0x1bc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d040      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xd2>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a5a      	ldr	r2, [pc, #360]	; (8006060 <HAL_DMA_IRQHandler+0x1c0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d03b      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xd2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a59      	ldr	r2, [pc, #356]	; (8006064 <HAL_DMA_IRQHandler+0x1c4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d036      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xd2>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a57      	ldr	r2, [pc, #348]	; (8006068 <HAL_DMA_IRQHandler+0x1c8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d031      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xd2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a56      	ldr	r2, [pc, #344]	; (800606c <HAL_DMA_IRQHandler+0x1cc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d02c      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xd2>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a54      	ldr	r2, [pc, #336]	; (8006070 <HAL_DMA_IRQHandler+0x1d0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d027      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xd2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a53      	ldr	r2, [pc, #332]	; (8006074 <HAL_DMA_IRQHandler+0x1d4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d022      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xd2>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a51      	ldr	r2, [pc, #324]	; (8006078 <HAL_DMA_IRQHandler+0x1d8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d01d      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xd2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a50      	ldr	r2, [pc, #320]	; (800607c <HAL_DMA_IRQHandler+0x1dc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d018      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xd2>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a4e      	ldr	r2, [pc, #312]	; (8006080 <HAL_DMA_IRQHandler+0x1e0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d013      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xd2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a4d      	ldr	r2, [pc, #308]	; (8006084 <HAL_DMA_IRQHandler+0x1e4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00e      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xd2>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a4b      	ldr	r2, [pc, #300]	; (8006088 <HAL_DMA_IRQHandler+0x1e8>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d009      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xd2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a4a      	ldr	r2, [pc, #296]	; (800608c <HAL_DMA_IRQHandler+0x1ec>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d004      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xd2>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a48      	ldr	r2, [pc, #288]	; (8006090 <HAL_DMA_IRQHandler+0x1f0>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d101      	bne.n	8005f76 <HAL_DMA_IRQHandler+0xd6>
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <HAL_DMA_IRQHandler+0xd8>
 8005f76:	2300      	movs	r3, #0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 842b 	beq.w	80067d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f82:	f003 031f 	and.w	r3, r3, #31
 8005f86:	2208      	movs	r2, #8
 8005f88:	409a      	lsls	r2, r3
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 80a2 	beq.w	80060d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a2e      	ldr	r2, [pc, #184]	; (8006054 <HAL_DMA_IRQHandler+0x1b4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d04a      	beq.n	8006034 <HAL_DMA_IRQHandler+0x194>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a2d      	ldr	r2, [pc, #180]	; (8006058 <HAL_DMA_IRQHandler+0x1b8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d045      	beq.n	8006034 <HAL_DMA_IRQHandler+0x194>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a2b      	ldr	r2, [pc, #172]	; (800605c <HAL_DMA_IRQHandler+0x1bc>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d040      	beq.n	8006034 <HAL_DMA_IRQHandler+0x194>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a2a      	ldr	r2, [pc, #168]	; (8006060 <HAL_DMA_IRQHandler+0x1c0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d03b      	beq.n	8006034 <HAL_DMA_IRQHandler+0x194>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a28      	ldr	r2, [pc, #160]	; (8006064 <HAL_DMA_IRQHandler+0x1c4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d036      	beq.n	8006034 <HAL_DMA_IRQHandler+0x194>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a27      	ldr	r2, [pc, #156]	; (8006068 <HAL_DMA_IRQHandler+0x1c8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d031      	beq.n	8006034 <HAL_DMA_IRQHandler+0x194>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a25      	ldr	r2, [pc, #148]	; (800606c <HAL_DMA_IRQHandler+0x1cc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d02c      	beq.n	8006034 <HAL_DMA_IRQHandler+0x194>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a24      	ldr	r2, [pc, #144]	; (8006070 <HAL_DMA_IRQHandler+0x1d0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d027      	beq.n	8006034 <HAL_DMA_IRQHandler+0x194>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a22      	ldr	r2, [pc, #136]	; (8006074 <HAL_DMA_IRQHandler+0x1d4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d022      	beq.n	8006034 <HAL_DMA_IRQHandler+0x194>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a21      	ldr	r2, [pc, #132]	; (8006078 <HAL_DMA_IRQHandler+0x1d8>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d01d      	beq.n	8006034 <HAL_DMA_IRQHandler+0x194>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a1f      	ldr	r2, [pc, #124]	; (800607c <HAL_DMA_IRQHandler+0x1dc>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d018      	beq.n	8006034 <HAL_DMA_IRQHandler+0x194>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a1e      	ldr	r2, [pc, #120]	; (8006080 <HAL_DMA_IRQHandler+0x1e0>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d013      	beq.n	8006034 <HAL_DMA_IRQHandler+0x194>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a1c      	ldr	r2, [pc, #112]	; (8006084 <HAL_DMA_IRQHandler+0x1e4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00e      	beq.n	8006034 <HAL_DMA_IRQHandler+0x194>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a1b      	ldr	r2, [pc, #108]	; (8006088 <HAL_DMA_IRQHandler+0x1e8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d009      	beq.n	8006034 <HAL_DMA_IRQHandler+0x194>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a19      	ldr	r2, [pc, #100]	; (800608c <HAL_DMA_IRQHandler+0x1ec>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d004      	beq.n	8006034 <HAL_DMA_IRQHandler+0x194>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a18      	ldr	r2, [pc, #96]	; (8006090 <HAL_DMA_IRQHandler+0x1f0>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d12f      	bne.n	8006094 <HAL_DMA_IRQHandler+0x1f4>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0304 	and.w	r3, r3, #4
 800603e:	2b00      	cmp	r3, #0
 8006040:	bf14      	ite	ne
 8006042:	2301      	movne	r3, #1
 8006044:	2300      	moveq	r3, #0
 8006046:	b2db      	uxtb	r3, r3
 8006048:	e02e      	b.n	80060a8 <HAL_DMA_IRQHandler+0x208>
 800604a:	bf00      	nop
 800604c:	24000000 	.word	0x24000000
 8006050:	1b4e81b5 	.word	0x1b4e81b5
 8006054:	40020010 	.word	0x40020010
 8006058:	40020028 	.word	0x40020028
 800605c:	40020040 	.word	0x40020040
 8006060:	40020058 	.word	0x40020058
 8006064:	40020070 	.word	0x40020070
 8006068:	40020088 	.word	0x40020088
 800606c:	400200a0 	.word	0x400200a0
 8006070:	400200b8 	.word	0x400200b8
 8006074:	40020410 	.word	0x40020410
 8006078:	40020428 	.word	0x40020428
 800607c:	40020440 	.word	0x40020440
 8006080:	40020458 	.word	0x40020458
 8006084:	40020470 	.word	0x40020470
 8006088:	40020488 	.word	0x40020488
 800608c:	400204a0 	.word	0x400204a0
 8006090:	400204b8 	.word	0x400204b8
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0308 	and.w	r3, r3, #8
 800609e:	2b00      	cmp	r3, #0
 80060a0:	bf14      	ite	ne
 80060a2:	2301      	movne	r3, #1
 80060a4:	2300      	moveq	r3, #0
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d015      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0204 	bic.w	r2, r2, #4
 80060ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c0:	f003 031f 	and.w	r3, r3, #31
 80060c4:	2208      	movs	r2, #8
 80060c6:	409a      	lsls	r2, r3
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d0:	f043 0201 	orr.w	r2, r3, #1
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060dc:	f003 031f 	and.w	r3, r3, #31
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	fa22 f303 	lsr.w	r3, r2, r3
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d06e      	beq.n	80061cc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a69      	ldr	r2, [pc, #420]	; (8006298 <HAL_DMA_IRQHandler+0x3f8>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d04a      	beq.n	800618e <HAL_DMA_IRQHandler+0x2ee>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a67      	ldr	r2, [pc, #412]	; (800629c <HAL_DMA_IRQHandler+0x3fc>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d045      	beq.n	800618e <HAL_DMA_IRQHandler+0x2ee>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a66      	ldr	r2, [pc, #408]	; (80062a0 <HAL_DMA_IRQHandler+0x400>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d040      	beq.n	800618e <HAL_DMA_IRQHandler+0x2ee>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a64      	ldr	r2, [pc, #400]	; (80062a4 <HAL_DMA_IRQHandler+0x404>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d03b      	beq.n	800618e <HAL_DMA_IRQHandler+0x2ee>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a63      	ldr	r2, [pc, #396]	; (80062a8 <HAL_DMA_IRQHandler+0x408>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d036      	beq.n	800618e <HAL_DMA_IRQHandler+0x2ee>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a61      	ldr	r2, [pc, #388]	; (80062ac <HAL_DMA_IRQHandler+0x40c>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d031      	beq.n	800618e <HAL_DMA_IRQHandler+0x2ee>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a60      	ldr	r2, [pc, #384]	; (80062b0 <HAL_DMA_IRQHandler+0x410>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d02c      	beq.n	800618e <HAL_DMA_IRQHandler+0x2ee>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a5e      	ldr	r2, [pc, #376]	; (80062b4 <HAL_DMA_IRQHandler+0x414>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d027      	beq.n	800618e <HAL_DMA_IRQHandler+0x2ee>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a5d      	ldr	r2, [pc, #372]	; (80062b8 <HAL_DMA_IRQHandler+0x418>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d022      	beq.n	800618e <HAL_DMA_IRQHandler+0x2ee>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a5b      	ldr	r2, [pc, #364]	; (80062bc <HAL_DMA_IRQHandler+0x41c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d01d      	beq.n	800618e <HAL_DMA_IRQHandler+0x2ee>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a5a      	ldr	r2, [pc, #360]	; (80062c0 <HAL_DMA_IRQHandler+0x420>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d018      	beq.n	800618e <HAL_DMA_IRQHandler+0x2ee>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a58      	ldr	r2, [pc, #352]	; (80062c4 <HAL_DMA_IRQHandler+0x424>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d013      	beq.n	800618e <HAL_DMA_IRQHandler+0x2ee>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a57      	ldr	r2, [pc, #348]	; (80062c8 <HAL_DMA_IRQHandler+0x428>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d00e      	beq.n	800618e <HAL_DMA_IRQHandler+0x2ee>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a55      	ldr	r2, [pc, #340]	; (80062cc <HAL_DMA_IRQHandler+0x42c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d009      	beq.n	800618e <HAL_DMA_IRQHandler+0x2ee>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a54      	ldr	r2, [pc, #336]	; (80062d0 <HAL_DMA_IRQHandler+0x430>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d004      	beq.n	800618e <HAL_DMA_IRQHandler+0x2ee>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a52      	ldr	r2, [pc, #328]	; (80062d4 <HAL_DMA_IRQHandler+0x434>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d10a      	bne.n	80061a4 <HAL_DMA_IRQHandler+0x304>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006198:	2b00      	cmp	r3, #0
 800619a:	bf14      	ite	ne
 800619c:	2301      	movne	r3, #1
 800619e:	2300      	moveq	r3, #0
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	e003      	b.n	80061ac <HAL_DMA_IRQHandler+0x30c>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2300      	movs	r3, #0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00d      	beq.n	80061cc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b4:	f003 031f 	and.w	r3, r3, #31
 80061b8:	2201      	movs	r2, #1
 80061ba:	409a      	lsls	r2, r3
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c4:	f043 0202 	orr.w	r2, r3, #2
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d0:	f003 031f 	and.w	r3, r3, #31
 80061d4:	2204      	movs	r2, #4
 80061d6:	409a      	lsls	r2, r3
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	4013      	ands	r3, r2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 808f 	beq.w	8006300 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a2c      	ldr	r2, [pc, #176]	; (8006298 <HAL_DMA_IRQHandler+0x3f8>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d04a      	beq.n	8006282 <HAL_DMA_IRQHandler+0x3e2>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a2a      	ldr	r2, [pc, #168]	; (800629c <HAL_DMA_IRQHandler+0x3fc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d045      	beq.n	8006282 <HAL_DMA_IRQHandler+0x3e2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a29      	ldr	r2, [pc, #164]	; (80062a0 <HAL_DMA_IRQHandler+0x400>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d040      	beq.n	8006282 <HAL_DMA_IRQHandler+0x3e2>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a27      	ldr	r2, [pc, #156]	; (80062a4 <HAL_DMA_IRQHandler+0x404>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d03b      	beq.n	8006282 <HAL_DMA_IRQHandler+0x3e2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a26      	ldr	r2, [pc, #152]	; (80062a8 <HAL_DMA_IRQHandler+0x408>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d036      	beq.n	8006282 <HAL_DMA_IRQHandler+0x3e2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a24      	ldr	r2, [pc, #144]	; (80062ac <HAL_DMA_IRQHandler+0x40c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d031      	beq.n	8006282 <HAL_DMA_IRQHandler+0x3e2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a23      	ldr	r2, [pc, #140]	; (80062b0 <HAL_DMA_IRQHandler+0x410>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d02c      	beq.n	8006282 <HAL_DMA_IRQHandler+0x3e2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a21      	ldr	r2, [pc, #132]	; (80062b4 <HAL_DMA_IRQHandler+0x414>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d027      	beq.n	8006282 <HAL_DMA_IRQHandler+0x3e2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a20      	ldr	r2, [pc, #128]	; (80062b8 <HAL_DMA_IRQHandler+0x418>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d022      	beq.n	8006282 <HAL_DMA_IRQHandler+0x3e2>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a1e      	ldr	r2, [pc, #120]	; (80062bc <HAL_DMA_IRQHandler+0x41c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d01d      	beq.n	8006282 <HAL_DMA_IRQHandler+0x3e2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a1d      	ldr	r2, [pc, #116]	; (80062c0 <HAL_DMA_IRQHandler+0x420>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d018      	beq.n	8006282 <HAL_DMA_IRQHandler+0x3e2>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a1b      	ldr	r2, [pc, #108]	; (80062c4 <HAL_DMA_IRQHandler+0x424>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <HAL_DMA_IRQHandler+0x3e2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a1a      	ldr	r2, [pc, #104]	; (80062c8 <HAL_DMA_IRQHandler+0x428>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d00e      	beq.n	8006282 <HAL_DMA_IRQHandler+0x3e2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a18      	ldr	r2, [pc, #96]	; (80062cc <HAL_DMA_IRQHandler+0x42c>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d009      	beq.n	8006282 <HAL_DMA_IRQHandler+0x3e2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a17      	ldr	r2, [pc, #92]	; (80062d0 <HAL_DMA_IRQHandler+0x430>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d004      	beq.n	8006282 <HAL_DMA_IRQHandler+0x3e2>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a15      	ldr	r2, [pc, #84]	; (80062d4 <HAL_DMA_IRQHandler+0x434>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d12a      	bne.n	80062d8 <HAL_DMA_IRQHandler+0x438>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	bf14      	ite	ne
 8006290:	2301      	movne	r3, #1
 8006292:	2300      	moveq	r3, #0
 8006294:	b2db      	uxtb	r3, r3
 8006296:	e023      	b.n	80062e0 <HAL_DMA_IRQHandler+0x440>
 8006298:	40020010 	.word	0x40020010
 800629c:	40020028 	.word	0x40020028
 80062a0:	40020040 	.word	0x40020040
 80062a4:	40020058 	.word	0x40020058
 80062a8:	40020070 	.word	0x40020070
 80062ac:	40020088 	.word	0x40020088
 80062b0:	400200a0 	.word	0x400200a0
 80062b4:	400200b8 	.word	0x400200b8
 80062b8:	40020410 	.word	0x40020410
 80062bc:	40020428 	.word	0x40020428
 80062c0:	40020440 	.word	0x40020440
 80062c4:	40020458 	.word	0x40020458
 80062c8:	40020470 	.word	0x40020470
 80062cc:	40020488 	.word	0x40020488
 80062d0:	400204a0 	.word	0x400204a0
 80062d4:	400204b8 	.word	0x400204b8
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2300      	movs	r3, #0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00d      	beq.n	8006300 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e8:	f003 031f 	and.w	r3, r3, #31
 80062ec:	2204      	movs	r2, #4
 80062ee:	409a      	lsls	r2, r3
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f8:	f043 0204 	orr.w	r2, r3, #4
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006304:	f003 031f 	and.w	r3, r3, #31
 8006308:	2210      	movs	r2, #16
 800630a:	409a      	lsls	r2, r3
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	4013      	ands	r3, r2
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 80a6 	beq.w	8006462 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a85      	ldr	r2, [pc, #532]	; (8006530 <HAL_DMA_IRQHandler+0x690>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d04a      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x516>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a83      	ldr	r2, [pc, #524]	; (8006534 <HAL_DMA_IRQHandler+0x694>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d045      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x516>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a82      	ldr	r2, [pc, #520]	; (8006538 <HAL_DMA_IRQHandler+0x698>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d040      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x516>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a80      	ldr	r2, [pc, #512]	; (800653c <HAL_DMA_IRQHandler+0x69c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d03b      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x516>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a7f      	ldr	r2, [pc, #508]	; (8006540 <HAL_DMA_IRQHandler+0x6a0>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d036      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x516>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a7d      	ldr	r2, [pc, #500]	; (8006544 <HAL_DMA_IRQHandler+0x6a4>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d031      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x516>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a7c      	ldr	r2, [pc, #496]	; (8006548 <HAL_DMA_IRQHandler+0x6a8>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d02c      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x516>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a7a      	ldr	r2, [pc, #488]	; (800654c <HAL_DMA_IRQHandler+0x6ac>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d027      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x516>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a79      	ldr	r2, [pc, #484]	; (8006550 <HAL_DMA_IRQHandler+0x6b0>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d022      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x516>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a77      	ldr	r2, [pc, #476]	; (8006554 <HAL_DMA_IRQHandler+0x6b4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d01d      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x516>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a76      	ldr	r2, [pc, #472]	; (8006558 <HAL_DMA_IRQHandler+0x6b8>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d018      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x516>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a74      	ldr	r2, [pc, #464]	; (800655c <HAL_DMA_IRQHandler+0x6bc>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d013      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x516>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a73      	ldr	r2, [pc, #460]	; (8006560 <HAL_DMA_IRQHandler+0x6c0>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d00e      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x516>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a71      	ldr	r2, [pc, #452]	; (8006564 <HAL_DMA_IRQHandler+0x6c4>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d009      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x516>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a70      	ldr	r2, [pc, #448]	; (8006568 <HAL_DMA_IRQHandler+0x6c8>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d004      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x516>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a6e      	ldr	r2, [pc, #440]	; (800656c <HAL_DMA_IRQHandler+0x6cc>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d10a      	bne.n	80063cc <HAL_DMA_IRQHandler+0x52c>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0308 	and.w	r3, r3, #8
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	bf14      	ite	ne
 80063c4:	2301      	movne	r3, #1
 80063c6:	2300      	moveq	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	e009      	b.n	80063e0 <HAL_DMA_IRQHandler+0x540>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	bf14      	ite	ne
 80063da:	2301      	movne	r3, #1
 80063dc:	2300      	moveq	r3, #0
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d03e      	beq.n	8006462 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e8:	f003 031f 	and.w	r3, r3, #31
 80063ec:	2210      	movs	r2, #16
 80063ee:	409a      	lsls	r2, r3
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d018      	beq.n	8006434 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d108      	bne.n	8006422 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006414:	2b00      	cmp	r3, #0
 8006416:	d024      	beq.n	8006462 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	4798      	blx	r3
 8006420:	e01f      	b.n	8006462 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006426:	2b00      	cmp	r3, #0
 8006428:	d01b      	beq.n	8006462 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	4798      	blx	r3
 8006432:	e016      	b.n	8006462 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643e:	2b00      	cmp	r3, #0
 8006440:	d107      	bne.n	8006452 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 0208 	bic.w	r2, r2, #8
 8006450:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006466:	f003 031f 	and.w	r3, r3, #31
 800646a:	2220      	movs	r2, #32
 800646c:	409a      	lsls	r2, r3
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	4013      	ands	r3, r2
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 8110 	beq.w	8006698 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a2c      	ldr	r2, [pc, #176]	; (8006530 <HAL_DMA_IRQHandler+0x690>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d04a      	beq.n	8006518 <HAL_DMA_IRQHandler+0x678>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a2b      	ldr	r2, [pc, #172]	; (8006534 <HAL_DMA_IRQHandler+0x694>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d045      	beq.n	8006518 <HAL_DMA_IRQHandler+0x678>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a29      	ldr	r2, [pc, #164]	; (8006538 <HAL_DMA_IRQHandler+0x698>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d040      	beq.n	8006518 <HAL_DMA_IRQHandler+0x678>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a28      	ldr	r2, [pc, #160]	; (800653c <HAL_DMA_IRQHandler+0x69c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d03b      	beq.n	8006518 <HAL_DMA_IRQHandler+0x678>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a26      	ldr	r2, [pc, #152]	; (8006540 <HAL_DMA_IRQHandler+0x6a0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d036      	beq.n	8006518 <HAL_DMA_IRQHandler+0x678>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a25      	ldr	r2, [pc, #148]	; (8006544 <HAL_DMA_IRQHandler+0x6a4>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d031      	beq.n	8006518 <HAL_DMA_IRQHandler+0x678>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a23      	ldr	r2, [pc, #140]	; (8006548 <HAL_DMA_IRQHandler+0x6a8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d02c      	beq.n	8006518 <HAL_DMA_IRQHandler+0x678>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a22      	ldr	r2, [pc, #136]	; (800654c <HAL_DMA_IRQHandler+0x6ac>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d027      	beq.n	8006518 <HAL_DMA_IRQHandler+0x678>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a20      	ldr	r2, [pc, #128]	; (8006550 <HAL_DMA_IRQHandler+0x6b0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d022      	beq.n	8006518 <HAL_DMA_IRQHandler+0x678>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a1f      	ldr	r2, [pc, #124]	; (8006554 <HAL_DMA_IRQHandler+0x6b4>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d01d      	beq.n	8006518 <HAL_DMA_IRQHandler+0x678>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a1d      	ldr	r2, [pc, #116]	; (8006558 <HAL_DMA_IRQHandler+0x6b8>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d018      	beq.n	8006518 <HAL_DMA_IRQHandler+0x678>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a1c      	ldr	r2, [pc, #112]	; (800655c <HAL_DMA_IRQHandler+0x6bc>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d013      	beq.n	8006518 <HAL_DMA_IRQHandler+0x678>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a1a      	ldr	r2, [pc, #104]	; (8006560 <HAL_DMA_IRQHandler+0x6c0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d00e      	beq.n	8006518 <HAL_DMA_IRQHandler+0x678>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a19      	ldr	r2, [pc, #100]	; (8006564 <HAL_DMA_IRQHandler+0x6c4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d009      	beq.n	8006518 <HAL_DMA_IRQHandler+0x678>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a17      	ldr	r2, [pc, #92]	; (8006568 <HAL_DMA_IRQHandler+0x6c8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d004      	beq.n	8006518 <HAL_DMA_IRQHandler+0x678>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a16      	ldr	r2, [pc, #88]	; (800656c <HAL_DMA_IRQHandler+0x6cc>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d12b      	bne.n	8006570 <HAL_DMA_IRQHandler+0x6d0>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0310 	and.w	r3, r3, #16
 8006522:	2b00      	cmp	r3, #0
 8006524:	bf14      	ite	ne
 8006526:	2301      	movne	r3, #1
 8006528:	2300      	moveq	r3, #0
 800652a:	b2db      	uxtb	r3, r3
 800652c:	e02a      	b.n	8006584 <HAL_DMA_IRQHandler+0x6e4>
 800652e:	bf00      	nop
 8006530:	40020010 	.word	0x40020010
 8006534:	40020028 	.word	0x40020028
 8006538:	40020040 	.word	0x40020040
 800653c:	40020058 	.word	0x40020058
 8006540:	40020070 	.word	0x40020070
 8006544:	40020088 	.word	0x40020088
 8006548:	400200a0 	.word	0x400200a0
 800654c:	400200b8 	.word	0x400200b8
 8006550:	40020410 	.word	0x40020410
 8006554:	40020428 	.word	0x40020428
 8006558:	40020440 	.word	0x40020440
 800655c:	40020458 	.word	0x40020458
 8006560:	40020470 	.word	0x40020470
 8006564:	40020488 	.word	0x40020488
 8006568:	400204a0 	.word	0x400204a0
 800656c:	400204b8 	.word	0x400204b8
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	bf14      	ite	ne
 800657e:	2301      	movne	r3, #1
 8006580:	2300      	moveq	r3, #0
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 8087 	beq.w	8006698 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800658e:	f003 031f 	and.w	r3, r3, #31
 8006592:	2220      	movs	r2, #32
 8006594:	409a      	lsls	r2, r3
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b04      	cmp	r3, #4
 80065a4:	d139      	bne.n	800661a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0216 	bic.w	r2, r2, #22
 80065b4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695a      	ldr	r2, [r3, #20]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065c4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d103      	bne.n	80065d6 <HAL_DMA_IRQHandler+0x736>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d007      	beq.n	80065e6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0208 	bic.w	r2, r2, #8
 80065e4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ea:	f003 031f 	and.w	r3, r3, #31
 80065ee:	223f      	movs	r2, #63	; 0x3f
 80065f0:	409a      	lsls	r2, r3
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800660a:	2b00      	cmp	r3, #0
 800660c:	f000 834a 	beq.w	8006ca4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	4798      	blx	r3
          }
          return;
 8006618:	e344      	b.n	8006ca4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d018      	beq.n	800665a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d108      	bne.n	8006648 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663a:	2b00      	cmp	r3, #0
 800663c:	d02c      	beq.n	8006698 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	4798      	blx	r3
 8006646:	e027      	b.n	8006698 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664c:	2b00      	cmp	r3, #0
 800664e:	d023      	beq.n	8006698 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	4798      	blx	r3
 8006658:	e01e      	b.n	8006698 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10f      	bne.n	8006688 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0210 	bic.w	r2, r2, #16
 8006676:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 8306 	beq.w	8006cae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 8088 	beq.w	80067c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2204      	movs	r2, #4
 80066b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a7a      	ldr	r2, [pc, #488]	; (80068a8 <HAL_DMA_IRQHandler+0xa08>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d04a      	beq.n	8006758 <HAL_DMA_IRQHandler+0x8b8>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a79      	ldr	r2, [pc, #484]	; (80068ac <HAL_DMA_IRQHandler+0xa0c>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d045      	beq.n	8006758 <HAL_DMA_IRQHandler+0x8b8>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a77      	ldr	r2, [pc, #476]	; (80068b0 <HAL_DMA_IRQHandler+0xa10>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d040      	beq.n	8006758 <HAL_DMA_IRQHandler+0x8b8>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a76      	ldr	r2, [pc, #472]	; (80068b4 <HAL_DMA_IRQHandler+0xa14>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d03b      	beq.n	8006758 <HAL_DMA_IRQHandler+0x8b8>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a74      	ldr	r2, [pc, #464]	; (80068b8 <HAL_DMA_IRQHandler+0xa18>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d036      	beq.n	8006758 <HAL_DMA_IRQHandler+0x8b8>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a73      	ldr	r2, [pc, #460]	; (80068bc <HAL_DMA_IRQHandler+0xa1c>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d031      	beq.n	8006758 <HAL_DMA_IRQHandler+0x8b8>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a71      	ldr	r2, [pc, #452]	; (80068c0 <HAL_DMA_IRQHandler+0xa20>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d02c      	beq.n	8006758 <HAL_DMA_IRQHandler+0x8b8>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a70      	ldr	r2, [pc, #448]	; (80068c4 <HAL_DMA_IRQHandler+0xa24>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d027      	beq.n	8006758 <HAL_DMA_IRQHandler+0x8b8>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a6e      	ldr	r2, [pc, #440]	; (80068c8 <HAL_DMA_IRQHandler+0xa28>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d022      	beq.n	8006758 <HAL_DMA_IRQHandler+0x8b8>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a6d      	ldr	r2, [pc, #436]	; (80068cc <HAL_DMA_IRQHandler+0xa2c>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d01d      	beq.n	8006758 <HAL_DMA_IRQHandler+0x8b8>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a6b      	ldr	r2, [pc, #428]	; (80068d0 <HAL_DMA_IRQHandler+0xa30>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d018      	beq.n	8006758 <HAL_DMA_IRQHandler+0x8b8>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a6a      	ldr	r2, [pc, #424]	; (80068d4 <HAL_DMA_IRQHandler+0xa34>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d013      	beq.n	8006758 <HAL_DMA_IRQHandler+0x8b8>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a68      	ldr	r2, [pc, #416]	; (80068d8 <HAL_DMA_IRQHandler+0xa38>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d00e      	beq.n	8006758 <HAL_DMA_IRQHandler+0x8b8>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a67      	ldr	r2, [pc, #412]	; (80068dc <HAL_DMA_IRQHandler+0xa3c>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d009      	beq.n	8006758 <HAL_DMA_IRQHandler+0x8b8>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a65      	ldr	r2, [pc, #404]	; (80068e0 <HAL_DMA_IRQHandler+0xa40>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d004      	beq.n	8006758 <HAL_DMA_IRQHandler+0x8b8>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a64      	ldr	r2, [pc, #400]	; (80068e4 <HAL_DMA_IRQHandler+0xa44>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d108      	bne.n	800676a <HAL_DMA_IRQHandler+0x8ca>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0201 	bic.w	r2, r2, #1
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	e007      	b.n	800677a <HAL_DMA_IRQHandler+0x8da>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 0201 	bic.w	r2, r2, #1
 8006778:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3301      	adds	r3, #1
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006782:	429a      	cmp	r2, r3
 8006784:	d307      	bcc.n	8006796 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1f2      	bne.n	800677a <HAL_DMA_IRQHandler+0x8da>
 8006794:	e000      	b.n	8006798 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006796:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d004      	beq.n	80067b0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2203      	movs	r2, #3
 80067aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80067ae:	e003      	b.n	80067b8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 8272 	beq.w	8006cae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	4798      	blx	r3
 80067d2:	e26c      	b.n	8006cae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a43      	ldr	r2, [pc, #268]	; (80068e8 <HAL_DMA_IRQHandler+0xa48>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d022      	beq.n	8006824 <HAL_DMA_IRQHandler+0x984>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a42      	ldr	r2, [pc, #264]	; (80068ec <HAL_DMA_IRQHandler+0xa4c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d01d      	beq.n	8006824 <HAL_DMA_IRQHandler+0x984>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a40      	ldr	r2, [pc, #256]	; (80068f0 <HAL_DMA_IRQHandler+0xa50>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d018      	beq.n	8006824 <HAL_DMA_IRQHandler+0x984>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a3f      	ldr	r2, [pc, #252]	; (80068f4 <HAL_DMA_IRQHandler+0xa54>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d013      	beq.n	8006824 <HAL_DMA_IRQHandler+0x984>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a3d      	ldr	r2, [pc, #244]	; (80068f8 <HAL_DMA_IRQHandler+0xa58>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d00e      	beq.n	8006824 <HAL_DMA_IRQHandler+0x984>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a3c      	ldr	r2, [pc, #240]	; (80068fc <HAL_DMA_IRQHandler+0xa5c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d009      	beq.n	8006824 <HAL_DMA_IRQHandler+0x984>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a3a      	ldr	r2, [pc, #232]	; (8006900 <HAL_DMA_IRQHandler+0xa60>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d004      	beq.n	8006824 <HAL_DMA_IRQHandler+0x984>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a39      	ldr	r2, [pc, #228]	; (8006904 <HAL_DMA_IRQHandler+0xa64>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d101      	bne.n	8006828 <HAL_DMA_IRQHandler+0x988>
 8006824:	2301      	movs	r3, #1
 8006826:	e000      	b.n	800682a <HAL_DMA_IRQHandler+0x98a>
 8006828:	2300      	movs	r3, #0
 800682a:	2b00      	cmp	r3, #0
 800682c:	f000 823f 	beq.w	8006cae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683c:	f003 031f 	and.w	r3, r3, #31
 8006840:	2204      	movs	r2, #4
 8006842:	409a      	lsls	r2, r3
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	4013      	ands	r3, r2
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 80cd 	beq.w	80069e8 <HAL_DMA_IRQHandler+0xb48>
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 80c7 	beq.w	80069e8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800685e:	f003 031f 	and.w	r3, r3, #31
 8006862:	2204      	movs	r2, #4
 8006864:	409a      	lsls	r2, r3
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d049      	beq.n	8006908 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d109      	bne.n	8006892 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 8210 	beq.w	8006ca8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006890:	e20a      	b.n	8006ca8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 8206 	beq.w	8006ca8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068a4:	e200      	b.n	8006ca8 <HAL_DMA_IRQHandler+0xe08>
 80068a6:	bf00      	nop
 80068a8:	40020010 	.word	0x40020010
 80068ac:	40020028 	.word	0x40020028
 80068b0:	40020040 	.word	0x40020040
 80068b4:	40020058 	.word	0x40020058
 80068b8:	40020070 	.word	0x40020070
 80068bc:	40020088 	.word	0x40020088
 80068c0:	400200a0 	.word	0x400200a0
 80068c4:	400200b8 	.word	0x400200b8
 80068c8:	40020410 	.word	0x40020410
 80068cc:	40020428 	.word	0x40020428
 80068d0:	40020440 	.word	0x40020440
 80068d4:	40020458 	.word	0x40020458
 80068d8:	40020470 	.word	0x40020470
 80068dc:	40020488 	.word	0x40020488
 80068e0:	400204a0 	.word	0x400204a0
 80068e4:	400204b8 	.word	0x400204b8
 80068e8:	58025408 	.word	0x58025408
 80068ec:	5802541c 	.word	0x5802541c
 80068f0:	58025430 	.word	0x58025430
 80068f4:	58025444 	.word	0x58025444
 80068f8:	58025458 	.word	0x58025458
 80068fc:	5802546c 	.word	0x5802546c
 8006900:	58025480 	.word	0x58025480
 8006904:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f003 0320 	and.w	r3, r3, #32
 800690e:	2b00      	cmp	r3, #0
 8006910:	d160      	bne.n	80069d4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a7f      	ldr	r2, [pc, #508]	; (8006b14 <HAL_DMA_IRQHandler+0xc74>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d04a      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb12>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a7d      	ldr	r2, [pc, #500]	; (8006b18 <HAL_DMA_IRQHandler+0xc78>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d045      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb12>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a7c      	ldr	r2, [pc, #496]	; (8006b1c <HAL_DMA_IRQHandler+0xc7c>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d040      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb12>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a7a      	ldr	r2, [pc, #488]	; (8006b20 <HAL_DMA_IRQHandler+0xc80>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d03b      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb12>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a79      	ldr	r2, [pc, #484]	; (8006b24 <HAL_DMA_IRQHandler+0xc84>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d036      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb12>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a77      	ldr	r2, [pc, #476]	; (8006b28 <HAL_DMA_IRQHandler+0xc88>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d031      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb12>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a76      	ldr	r2, [pc, #472]	; (8006b2c <HAL_DMA_IRQHandler+0xc8c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d02c      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb12>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a74      	ldr	r2, [pc, #464]	; (8006b30 <HAL_DMA_IRQHandler+0xc90>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d027      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb12>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a73      	ldr	r2, [pc, #460]	; (8006b34 <HAL_DMA_IRQHandler+0xc94>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d022      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb12>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a71      	ldr	r2, [pc, #452]	; (8006b38 <HAL_DMA_IRQHandler+0xc98>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d01d      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb12>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a70      	ldr	r2, [pc, #448]	; (8006b3c <HAL_DMA_IRQHandler+0xc9c>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d018      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb12>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a6e      	ldr	r2, [pc, #440]	; (8006b40 <HAL_DMA_IRQHandler+0xca0>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d013      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb12>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a6d      	ldr	r2, [pc, #436]	; (8006b44 <HAL_DMA_IRQHandler+0xca4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00e      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb12>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a6b      	ldr	r2, [pc, #428]	; (8006b48 <HAL_DMA_IRQHandler+0xca8>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d009      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb12>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a6a      	ldr	r2, [pc, #424]	; (8006b4c <HAL_DMA_IRQHandler+0xcac>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d004      	beq.n	80069b2 <HAL_DMA_IRQHandler+0xb12>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a68      	ldr	r2, [pc, #416]	; (8006b50 <HAL_DMA_IRQHandler+0xcb0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d108      	bne.n	80069c4 <HAL_DMA_IRQHandler+0xb24>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f022 0208 	bic.w	r2, r2, #8
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	e007      	b.n	80069d4 <HAL_DMA_IRQHandler+0xb34>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 0204 	bic.w	r2, r2, #4
 80069d2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 8165 	beq.w	8006ca8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069e6:	e15f      	b.n	8006ca8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ec:	f003 031f 	and.w	r3, r3, #31
 80069f0:	2202      	movs	r2, #2
 80069f2:	409a      	lsls	r2, r3
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	4013      	ands	r3, r2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 80c5 	beq.w	8006b88 <HAL_DMA_IRQHandler+0xce8>
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 80bf 	beq.w	8006b88 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a0e:	f003 031f 	and.w	r3, r3, #31
 8006a12:	2202      	movs	r2, #2
 8006a14:	409a      	lsls	r2, r3
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d018      	beq.n	8006a56 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d109      	bne.n	8006a42 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 813a 	beq.w	8006cac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a40:	e134      	b.n	8006cac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 8130 	beq.w	8006cac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a54:	e12a      	b.n	8006cac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f040 8089 	bne.w	8006b74 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a2b      	ldr	r2, [pc, #172]	; (8006b14 <HAL_DMA_IRQHandler+0xc74>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d04a      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xc62>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a29      	ldr	r2, [pc, #164]	; (8006b18 <HAL_DMA_IRQHandler+0xc78>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d045      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xc62>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a28      	ldr	r2, [pc, #160]	; (8006b1c <HAL_DMA_IRQHandler+0xc7c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d040      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xc62>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a26      	ldr	r2, [pc, #152]	; (8006b20 <HAL_DMA_IRQHandler+0xc80>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d03b      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xc62>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a25      	ldr	r2, [pc, #148]	; (8006b24 <HAL_DMA_IRQHandler+0xc84>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d036      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xc62>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a23      	ldr	r2, [pc, #140]	; (8006b28 <HAL_DMA_IRQHandler+0xc88>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d031      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xc62>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a22      	ldr	r2, [pc, #136]	; (8006b2c <HAL_DMA_IRQHandler+0xc8c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d02c      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xc62>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a20      	ldr	r2, [pc, #128]	; (8006b30 <HAL_DMA_IRQHandler+0xc90>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d027      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xc62>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a1f      	ldr	r2, [pc, #124]	; (8006b34 <HAL_DMA_IRQHandler+0xc94>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d022      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xc62>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a1d      	ldr	r2, [pc, #116]	; (8006b38 <HAL_DMA_IRQHandler+0xc98>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d01d      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xc62>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a1c      	ldr	r2, [pc, #112]	; (8006b3c <HAL_DMA_IRQHandler+0xc9c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d018      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xc62>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a1a      	ldr	r2, [pc, #104]	; (8006b40 <HAL_DMA_IRQHandler+0xca0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d013      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xc62>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a19      	ldr	r2, [pc, #100]	; (8006b44 <HAL_DMA_IRQHandler+0xca4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00e      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xc62>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a17      	ldr	r2, [pc, #92]	; (8006b48 <HAL_DMA_IRQHandler+0xca8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d009      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xc62>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a16      	ldr	r2, [pc, #88]	; (8006b4c <HAL_DMA_IRQHandler+0xcac>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d004      	beq.n	8006b02 <HAL_DMA_IRQHandler+0xc62>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a14      	ldr	r2, [pc, #80]	; (8006b50 <HAL_DMA_IRQHandler+0xcb0>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d128      	bne.n	8006b54 <HAL_DMA_IRQHandler+0xcb4>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f022 0214 	bic.w	r2, r2, #20
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	e027      	b.n	8006b64 <HAL_DMA_IRQHandler+0xcc4>
 8006b14:	40020010 	.word	0x40020010
 8006b18:	40020028 	.word	0x40020028
 8006b1c:	40020040 	.word	0x40020040
 8006b20:	40020058 	.word	0x40020058
 8006b24:	40020070 	.word	0x40020070
 8006b28:	40020088 	.word	0x40020088
 8006b2c:	400200a0 	.word	0x400200a0
 8006b30:	400200b8 	.word	0x400200b8
 8006b34:	40020410 	.word	0x40020410
 8006b38:	40020428 	.word	0x40020428
 8006b3c:	40020440 	.word	0x40020440
 8006b40:	40020458 	.word	0x40020458
 8006b44:	40020470 	.word	0x40020470
 8006b48:	40020488 	.word	0x40020488
 8006b4c:	400204a0 	.word	0x400204a0
 8006b50:	400204b8 	.word	0x400204b8
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 020a 	bic.w	r2, r2, #10
 8006b62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 8097 	beq.w	8006cac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b86:	e091      	b.n	8006cac <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b8c:	f003 031f 	and.w	r3, r3, #31
 8006b90:	2208      	movs	r2, #8
 8006b92:	409a      	lsls	r2, r3
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	4013      	ands	r3, r2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 8088 	beq.w	8006cae <HAL_DMA_IRQHandler+0xe0e>
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f003 0308 	and.w	r3, r3, #8
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 8082 	beq.w	8006cae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a41      	ldr	r2, [pc, #260]	; (8006cb4 <HAL_DMA_IRQHandler+0xe14>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d04a      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xdaa>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a3f      	ldr	r2, [pc, #252]	; (8006cb8 <HAL_DMA_IRQHandler+0xe18>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d045      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xdaa>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a3e      	ldr	r2, [pc, #248]	; (8006cbc <HAL_DMA_IRQHandler+0xe1c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d040      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xdaa>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a3c      	ldr	r2, [pc, #240]	; (8006cc0 <HAL_DMA_IRQHandler+0xe20>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d03b      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xdaa>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a3b      	ldr	r2, [pc, #236]	; (8006cc4 <HAL_DMA_IRQHandler+0xe24>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d036      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xdaa>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a39      	ldr	r2, [pc, #228]	; (8006cc8 <HAL_DMA_IRQHandler+0xe28>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d031      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xdaa>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a38      	ldr	r2, [pc, #224]	; (8006ccc <HAL_DMA_IRQHandler+0xe2c>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d02c      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xdaa>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a36      	ldr	r2, [pc, #216]	; (8006cd0 <HAL_DMA_IRQHandler+0xe30>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d027      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xdaa>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a35      	ldr	r2, [pc, #212]	; (8006cd4 <HAL_DMA_IRQHandler+0xe34>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d022      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xdaa>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a33      	ldr	r2, [pc, #204]	; (8006cd8 <HAL_DMA_IRQHandler+0xe38>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d01d      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xdaa>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a32      	ldr	r2, [pc, #200]	; (8006cdc <HAL_DMA_IRQHandler+0xe3c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d018      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xdaa>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a30      	ldr	r2, [pc, #192]	; (8006ce0 <HAL_DMA_IRQHandler+0xe40>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d013      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xdaa>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a2f      	ldr	r2, [pc, #188]	; (8006ce4 <HAL_DMA_IRQHandler+0xe44>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d00e      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xdaa>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a2d      	ldr	r2, [pc, #180]	; (8006ce8 <HAL_DMA_IRQHandler+0xe48>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d009      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xdaa>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a2c      	ldr	r2, [pc, #176]	; (8006cec <HAL_DMA_IRQHandler+0xe4c>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d004      	beq.n	8006c4a <HAL_DMA_IRQHandler+0xdaa>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a2a      	ldr	r2, [pc, #168]	; (8006cf0 <HAL_DMA_IRQHandler+0xe50>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d108      	bne.n	8006c5c <HAL_DMA_IRQHandler+0xdbc>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 021c 	bic.w	r2, r2, #28
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	e007      	b.n	8006c6c <HAL_DMA_IRQHandler+0xdcc>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 020e 	bic.w	r2, r2, #14
 8006c6a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c70:	f003 031f 	and.w	r3, r3, #31
 8006c74:	2201      	movs	r2, #1
 8006c76:	409a      	lsls	r2, r3
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d009      	beq.n	8006cae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	4798      	blx	r3
 8006ca2:	e004      	b.n	8006cae <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006ca4:	bf00      	nop
 8006ca6:	e002      	b.n	8006cae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ca8:	bf00      	nop
 8006caa:	e000      	b.n	8006cae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006cae:	3728      	adds	r7, #40	; 0x28
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	40020010 	.word	0x40020010
 8006cb8:	40020028 	.word	0x40020028
 8006cbc:	40020040 	.word	0x40020040
 8006cc0:	40020058 	.word	0x40020058
 8006cc4:	40020070 	.word	0x40020070
 8006cc8:	40020088 	.word	0x40020088
 8006ccc:	400200a0 	.word	0x400200a0
 8006cd0:	400200b8 	.word	0x400200b8
 8006cd4:	40020410 	.word	0x40020410
 8006cd8:	40020428 	.word	0x40020428
 8006cdc:	40020440 	.word	0x40020440
 8006ce0:	40020458 	.word	0x40020458
 8006ce4:	40020470 	.word	0x40020470
 8006ce8:	40020488 	.word	0x40020488
 8006cec:	400204a0 	.word	0x400204a0
 8006cf0:	400204b8 	.word	0x400204b8

08006cf4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d06:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d0c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a7f      	ldr	r2, [pc, #508]	; (8006f10 <DMA_SetConfig+0x21c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d072      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a7d      	ldr	r2, [pc, #500]	; (8006f14 <DMA_SetConfig+0x220>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d06d      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a7c      	ldr	r2, [pc, #496]	; (8006f18 <DMA_SetConfig+0x224>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d068      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a7a      	ldr	r2, [pc, #488]	; (8006f1c <DMA_SetConfig+0x228>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d063      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a79      	ldr	r2, [pc, #484]	; (8006f20 <DMA_SetConfig+0x22c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d05e      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a77      	ldr	r2, [pc, #476]	; (8006f24 <DMA_SetConfig+0x230>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d059      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a76      	ldr	r2, [pc, #472]	; (8006f28 <DMA_SetConfig+0x234>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d054      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a74      	ldr	r2, [pc, #464]	; (8006f2c <DMA_SetConfig+0x238>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d04f      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a73      	ldr	r2, [pc, #460]	; (8006f30 <DMA_SetConfig+0x23c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d04a      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a71      	ldr	r2, [pc, #452]	; (8006f34 <DMA_SetConfig+0x240>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d045      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a70      	ldr	r2, [pc, #448]	; (8006f38 <DMA_SetConfig+0x244>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d040      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a6e      	ldr	r2, [pc, #440]	; (8006f3c <DMA_SetConfig+0x248>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d03b      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a6d      	ldr	r2, [pc, #436]	; (8006f40 <DMA_SetConfig+0x24c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d036      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a6b      	ldr	r2, [pc, #428]	; (8006f44 <DMA_SetConfig+0x250>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d031      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a6a      	ldr	r2, [pc, #424]	; (8006f48 <DMA_SetConfig+0x254>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d02c      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a68      	ldr	r2, [pc, #416]	; (8006f4c <DMA_SetConfig+0x258>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d027      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a67      	ldr	r2, [pc, #412]	; (8006f50 <DMA_SetConfig+0x25c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d022      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a65      	ldr	r2, [pc, #404]	; (8006f54 <DMA_SetConfig+0x260>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d01d      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a64      	ldr	r2, [pc, #400]	; (8006f58 <DMA_SetConfig+0x264>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d018      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a62      	ldr	r2, [pc, #392]	; (8006f5c <DMA_SetConfig+0x268>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d013      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a61      	ldr	r2, [pc, #388]	; (8006f60 <DMA_SetConfig+0x26c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d00e      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a5f      	ldr	r2, [pc, #380]	; (8006f64 <DMA_SetConfig+0x270>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d009      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a5e      	ldr	r2, [pc, #376]	; (8006f68 <DMA_SetConfig+0x274>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d004      	beq.n	8006dfe <DMA_SetConfig+0x10a>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a5c      	ldr	r2, [pc, #368]	; (8006f6c <DMA_SetConfig+0x278>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d101      	bne.n	8006e02 <DMA_SetConfig+0x10e>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e000      	b.n	8006e04 <DMA_SetConfig+0x110>
 8006e02:	2300      	movs	r3, #0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00d      	beq.n	8006e24 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e10:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d004      	beq.n	8006e24 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e22:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a39      	ldr	r2, [pc, #228]	; (8006f10 <DMA_SetConfig+0x21c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d04a      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a38      	ldr	r2, [pc, #224]	; (8006f14 <DMA_SetConfig+0x220>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d045      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a36      	ldr	r2, [pc, #216]	; (8006f18 <DMA_SetConfig+0x224>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d040      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a35      	ldr	r2, [pc, #212]	; (8006f1c <DMA_SetConfig+0x228>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d03b      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a33      	ldr	r2, [pc, #204]	; (8006f20 <DMA_SetConfig+0x22c>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d036      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a32      	ldr	r2, [pc, #200]	; (8006f24 <DMA_SetConfig+0x230>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d031      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a30      	ldr	r2, [pc, #192]	; (8006f28 <DMA_SetConfig+0x234>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d02c      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a2f      	ldr	r2, [pc, #188]	; (8006f2c <DMA_SetConfig+0x238>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d027      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a2d      	ldr	r2, [pc, #180]	; (8006f30 <DMA_SetConfig+0x23c>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d022      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a2c      	ldr	r2, [pc, #176]	; (8006f34 <DMA_SetConfig+0x240>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d01d      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a2a      	ldr	r2, [pc, #168]	; (8006f38 <DMA_SetConfig+0x244>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d018      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a29      	ldr	r2, [pc, #164]	; (8006f3c <DMA_SetConfig+0x248>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d013      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a27      	ldr	r2, [pc, #156]	; (8006f40 <DMA_SetConfig+0x24c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d00e      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a26      	ldr	r2, [pc, #152]	; (8006f44 <DMA_SetConfig+0x250>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d009      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a24      	ldr	r2, [pc, #144]	; (8006f48 <DMA_SetConfig+0x254>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d004      	beq.n	8006ec4 <DMA_SetConfig+0x1d0>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a23      	ldr	r2, [pc, #140]	; (8006f4c <DMA_SetConfig+0x258>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d101      	bne.n	8006ec8 <DMA_SetConfig+0x1d4>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e000      	b.n	8006eca <DMA_SetConfig+0x1d6>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d059      	beq.n	8006f82 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed2:	f003 031f 	and.w	r3, r3, #31
 8006ed6:	223f      	movs	r2, #63	; 0x3f
 8006ed8:	409a      	lsls	r2, r3
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006eec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	2b40      	cmp	r3, #64	; 0x40
 8006efc:	d138      	bne.n	8006f70 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f0e:	e086      	b.n	800701e <DMA_SetConfig+0x32a>
 8006f10:	40020010 	.word	0x40020010
 8006f14:	40020028 	.word	0x40020028
 8006f18:	40020040 	.word	0x40020040
 8006f1c:	40020058 	.word	0x40020058
 8006f20:	40020070 	.word	0x40020070
 8006f24:	40020088 	.word	0x40020088
 8006f28:	400200a0 	.word	0x400200a0
 8006f2c:	400200b8 	.word	0x400200b8
 8006f30:	40020410 	.word	0x40020410
 8006f34:	40020428 	.word	0x40020428
 8006f38:	40020440 	.word	0x40020440
 8006f3c:	40020458 	.word	0x40020458
 8006f40:	40020470 	.word	0x40020470
 8006f44:	40020488 	.word	0x40020488
 8006f48:	400204a0 	.word	0x400204a0
 8006f4c:	400204b8 	.word	0x400204b8
 8006f50:	58025408 	.word	0x58025408
 8006f54:	5802541c 	.word	0x5802541c
 8006f58:	58025430 	.word	0x58025430
 8006f5c:	58025444 	.word	0x58025444
 8006f60:	58025458 	.word	0x58025458
 8006f64:	5802546c 	.word	0x5802546c
 8006f68:	58025480 	.word	0x58025480
 8006f6c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	60da      	str	r2, [r3, #12]
}
 8006f80:	e04d      	b.n	800701e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a29      	ldr	r2, [pc, #164]	; (800702c <DMA_SetConfig+0x338>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d022      	beq.n	8006fd2 <DMA_SetConfig+0x2de>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a27      	ldr	r2, [pc, #156]	; (8007030 <DMA_SetConfig+0x33c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d01d      	beq.n	8006fd2 <DMA_SetConfig+0x2de>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a26      	ldr	r2, [pc, #152]	; (8007034 <DMA_SetConfig+0x340>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d018      	beq.n	8006fd2 <DMA_SetConfig+0x2de>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a24      	ldr	r2, [pc, #144]	; (8007038 <DMA_SetConfig+0x344>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d013      	beq.n	8006fd2 <DMA_SetConfig+0x2de>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a23      	ldr	r2, [pc, #140]	; (800703c <DMA_SetConfig+0x348>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00e      	beq.n	8006fd2 <DMA_SetConfig+0x2de>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a21      	ldr	r2, [pc, #132]	; (8007040 <DMA_SetConfig+0x34c>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d009      	beq.n	8006fd2 <DMA_SetConfig+0x2de>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a20      	ldr	r2, [pc, #128]	; (8007044 <DMA_SetConfig+0x350>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d004      	beq.n	8006fd2 <DMA_SetConfig+0x2de>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a1e      	ldr	r2, [pc, #120]	; (8007048 <DMA_SetConfig+0x354>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d101      	bne.n	8006fd6 <DMA_SetConfig+0x2e2>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e000      	b.n	8006fd8 <DMA_SetConfig+0x2e4>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d020      	beq.n	800701e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe0:	f003 031f 	and.w	r3, r3, #31
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	409a      	lsls	r2, r3
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	2b40      	cmp	r3, #64	; 0x40
 8006ffa:	d108      	bne.n	800700e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	60da      	str	r2, [r3, #12]
}
 800700c:	e007      	b.n	800701e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	60da      	str	r2, [r3, #12]
}
 800701e:	bf00      	nop
 8007020:	371c      	adds	r7, #28
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	58025408 	.word	0x58025408
 8007030:	5802541c 	.word	0x5802541c
 8007034:	58025430 	.word	0x58025430
 8007038:	58025444 	.word	0x58025444
 800703c:	58025458 	.word	0x58025458
 8007040:	5802546c 	.word	0x5802546c
 8007044:	58025480 	.word	0x58025480
 8007048:	58025494 	.word	0x58025494

0800704c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a42      	ldr	r2, [pc, #264]	; (8007164 <DMA_CalcBaseAndBitshift+0x118>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d04a      	beq.n	80070f4 <DMA_CalcBaseAndBitshift+0xa8>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a41      	ldr	r2, [pc, #260]	; (8007168 <DMA_CalcBaseAndBitshift+0x11c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d045      	beq.n	80070f4 <DMA_CalcBaseAndBitshift+0xa8>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a3f      	ldr	r2, [pc, #252]	; (800716c <DMA_CalcBaseAndBitshift+0x120>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d040      	beq.n	80070f4 <DMA_CalcBaseAndBitshift+0xa8>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a3e      	ldr	r2, [pc, #248]	; (8007170 <DMA_CalcBaseAndBitshift+0x124>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d03b      	beq.n	80070f4 <DMA_CalcBaseAndBitshift+0xa8>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a3c      	ldr	r2, [pc, #240]	; (8007174 <DMA_CalcBaseAndBitshift+0x128>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d036      	beq.n	80070f4 <DMA_CalcBaseAndBitshift+0xa8>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a3b      	ldr	r2, [pc, #236]	; (8007178 <DMA_CalcBaseAndBitshift+0x12c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d031      	beq.n	80070f4 <DMA_CalcBaseAndBitshift+0xa8>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a39      	ldr	r2, [pc, #228]	; (800717c <DMA_CalcBaseAndBitshift+0x130>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d02c      	beq.n	80070f4 <DMA_CalcBaseAndBitshift+0xa8>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a38      	ldr	r2, [pc, #224]	; (8007180 <DMA_CalcBaseAndBitshift+0x134>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d027      	beq.n	80070f4 <DMA_CalcBaseAndBitshift+0xa8>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a36      	ldr	r2, [pc, #216]	; (8007184 <DMA_CalcBaseAndBitshift+0x138>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d022      	beq.n	80070f4 <DMA_CalcBaseAndBitshift+0xa8>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a35      	ldr	r2, [pc, #212]	; (8007188 <DMA_CalcBaseAndBitshift+0x13c>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d01d      	beq.n	80070f4 <DMA_CalcBaseAndBitshift+0xa8>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a33      	ldr	r2, [pc, #204]	; (800718c <DMA_CalcBaseAndBitshift+0x140>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d018      	beq.n	80070f4 <DMA_CalcBaseAndBitshift+0xa8>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a32      	ldr	r2, [pc, #200]	; (8007190 <DMA_CalcBaseAndBitshift+0x144>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d013      	beq.n	80070f4 <DMA_CalcBaseAndBitshift+0xa8>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a30      	ldr	r2, [pc, #192]	; (8007194 <DMA_CalcBaseAndBitshift+0x148>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d00e      	beq.n	80070f4 <DMA_CalcBaseAndBitshift+0xa8>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a2f      	ldr	r2, [pc, #188]	; (8007198 <DMA_CalcBaseAndBitshift+0x14c>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d009      	beq.n	80070f4 <DMA_CalcBaseAndBitshift+0xa8>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a2d      	ldr	r2, [pc, #180]	; (800719c <DMA_CalcBaseAndBitshift+0x150>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d004      	beq.n	80070f4 <DMA_CalcBaseAndBitshift+0xa8>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a2c      	ldr	r2, [pc, #176]	; (80071a0 <DMA_CalcBaseAndBitshift+0x154>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d101      	bne.n	80070f8 <DMA_CalcBaseAndBitshift+0xac>
 80070f4:	2301      	movs	r3, #1
 80070f6:	e000      	b.n	80070fa <DMA_CalcBaseAndBitshift+0xae>
 80070f8:	2300      	movs	r3, #0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d024      	beq.n	8007148 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	3b10      	subs	r3, #16
 8007106:	4a27      	ldr	r2, [pc, #156]	; (80071a4 <DMA_CalcBaseAndBitshift+0x158>)
 8007108:	fba2 2303 	umull	r2, r3, r2, r3
 800710c:	091b      	lsrs	r3, r3, #4
 800710e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f003 0307 	and.w	r3, r3, #7
 8007116:	4a24      	ldr	r2, [pc, #144]	; (80071a8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007118:	5cd3      	ldrb	r3, [r2, r3]
 800711a:	461a      	mov	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2b03      	cmp	r3, #3
 8007124:	d908      	bls.n	8007138 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	4b1f      	ldr	r3, [pc, #124]	; (80071ac <DMA_CalcBaseAndBitshift+0x160>)
 800712e:	4013      	ands	r3, r2
 8007130:	1d1a      	adds	r2, r3, #4
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	659a      	str	r2, [r3, #88]	; 0x58
 8007136:	e00d      	b.n	8007154 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	461a      	mov	r2, r3
 800713e:	4b1b      	ldr	r3, [pc, #108]	; (80071ac <DMA_CalcBaseAndBitshift+0x160>)
 8007140:	4013      	ands	r3, r2
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	6593      	str	r3, [r2, #88]	; 0x58
 8007146:	e005      	b.n	8007154 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007158:	4618      	mov	r0, r3
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	40020010 	.word	0x40020010
 8007168:	40020028 	.word	0x40020028
 800716c:	40020040 	.word	0x40020040
 8007170:	40020058 	.word	0x40020058
 8007174:	40020070 	.word	0x40020070
 8007178:	40020088 	.word	0x40020088
 800717c:	400200a0 	.word	0x400200a0
 8007180:	400200b8 	.word	0x400200b8
 8007184:	40020410 	.word	0x40020410
 8007188:	40020428 	.word	0x40020428
 800718c:	40020440 	.word	0x40020440
 8007190:	40020458 	.word	0x40020458
 8007194:	40020470 	.word	0x40020470
 8007198:	40020488 	.word	0x40020488
 800719c:	400204a0 	.word	0x400204a0
 80071a0:	400204b8 	.word	0x400204b8
 80071a4:	aaaaaaab 	.word	0xaaaaaaab
 80071a8:	0800e754 	.word	0x0800e754
 80071ac:	fffffc00 	.word	0xfffffc00

080071b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d120      	bne.n	8007206 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d858      	bhi.n	800727e <DMA_CheckFifoParam+0xce>
 80071cc:	a201      	add	r2, pc, #4	; (adr r2, 80071d4 <DMA_CheckFifoParam+0x24>)
 80071ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d2:	bf00      	nop
 80071d4:	080071e5 	.word	0x080071e5
 80071d8:	080071f7 	.word	0x080071f7
 80071dc:	080071e5 	.word	0x080071e5
 80071e0:	0800727f 	.word	0x0800727f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d048      	beq.n	8007282 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071f4:	e045      	b.n	8007282 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071fe:	d142      	bne.n	8007286 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007204:	e03f      	b.n	8007286 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800720e:	d123      	bne.n	8007258 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007214:	2b03      	cmp	r3, #3
 8007216:	d838      	bhi.n	800728a <DMA_CheckFifoParam+0xda>
 8007218:	a201      	add	r2, pc, #4	; (adr r2, 8007220 <DMA_CheckFifoParam+0x70>)
 800721a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721e:	bf00      	nop
 8007220:	08007231 	.word	0x08007231
 8007224:	08007237 	.word	0x08007237
 8007228:	08007231 	.word	0x08007231
 800722c:	08007249 	.word	0x08007249
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	73fb      	strb	r3, [r7, #15]
        break;
 8007234:	e030      	b.n	8007298 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d025      	beq.n	800728e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007246:	e022      	b.n	800728e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007250:	d11f      	bne.n	8007292 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007256:	e01c      	b.n	8007292 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725c:	2b02      	cmp	r3, #2
 800725e:	d902      	bls.n	8007266 <DMA_CheckFifoParam+0xb6>
 8007260:	2b03      	cmp	r3, #3
 8007262:	d003      	beq.n	800726c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007264:	e018      	b.n	8007298 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	73fb      	strb	r3, [r7, #15]
        break;
 800726a:	e015      	b.n	8007298 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00e      	beq.n	8007296 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	73fb      	strb	r3, [r7, #15]
    break;
 800727c:	e00b      	b.n	8007296 <DMA_CheckFifoParam+0xe6>
        break;
 800727e:	bf00      	nop
 8007280:	e00a      	b.n	8007298 <DMA_CheckFifoParam+0xe8>
        break;
 8007282:	bf00      	nop
 8007284:	e008      	b.n	8007298 <DMA_CheckFifoParam+0xe8>
        break;
 8007286:	bf00      	nop
 8007288:	e006      	b.n	8007298 <DMA_CheckFifoParam+0xe8>
        break;
 800728a:	bf00      	nop
 800728c:	e004      	b.n	8007298 <DMA_CheckFifoParam+0xe8>
        break;
 800728e:	bf00      	nop
 8007290:	e002      	b.n	8007298 <DMA_CheckFifoParam+0xe8>
        break;
 8007292:	bf00      	nop
 8007294:	e000      	b.n	8007298 <DMA_CheckFifoParam+0xe8>
    break;
 8007296:	bf00      	nop
    }
  }

  return status;
 8007298:	7bfb      	ldrb	r3, [r7, #15]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop

080072a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a38      	ldr	r2, [pc, #224]	; (800739c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d022      	beq.n	8007306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a36      	ldr	r2, [pc, #216]	; (80073a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d01d      	beq.n	8007306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a35      	ldr	r2, [pc, #212]	; (80073a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d018      	beq.n	8007306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a33      	ldr	r2, [pc, #204]	; (80073a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d013      	beq.n	8007306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a32      	ldr	r2, [pc, #200]	; (80073ac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d00e      	beq.n	8007306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a30      	ldr	r2, [pc, #192]	; (80073b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d009      	beq.n	8007306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a2f      	ldr	r2, [pc, #188]	; (80073b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d004      	beq.n	8007306 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a2d      	ldr	r2, [pc, #180]	; (80073b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d101      	bne.n	800730a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007306:	2301      	movs	r3, #1
 8007308:	e000      	b.n	800730c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800730a:	2300      	movs	r3, #0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d01a      	beq.n	8007346 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	3b08      	subs	r3, #8
 8007318:	4a28      	ldr	r2, [pc, #160]	; (80073bc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800731a:	fba2 2303 	umull	r2, r3, r2, r3
 800731e:	091b      	lsrs	r3, r3, #4
 8007320:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	4b26      	ldr	r3, [pc, #152]	; (80073c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007326:	4413      	add	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	461a      	mov	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a24      	ldr	r2, [pc, #144]	; (80073c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007334:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f003 031f 	and.w	r3, r3, #31
 800733c:	2201      	movs	r2, #1
 800733e:	409a      	lsls	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007344:	e024      	b.n	8007390 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	3b10      	subs	r3, #16
 800734e:	4a1e      	ldr	r2, [pc, #120]	; (80073c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007350:	fba2 2303 	umull	r2, r3, r2, r3
 8007354:	091b      	lsrs	r3, r3, #4
 8007356:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	4a1c      	ldr	r2, [pc, #112]	; (80073cc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d806      	bhi.n	800736e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	4a1b      	ldr	r2, [pc, #108]	; (80073d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d902      	bls.n	800736e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	3308      	adds	r3, #8
 800736c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	4b18      	ldr	r3, [pc, #96]	; (80073d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007372:	4413      	add	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	461a      	mov	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a16      	ldr	r2, [pc, #88]	; (80073d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007380:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f003 031f 	and.w	r3, r3, #31
 8007388:	2201      	movs	r2, #1
 800738a:	409a      	lsls	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007390:	bf00      	nop
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	58025408 	.word	0x58025408
 80073a0:	5802541c 	.word	0x5802541c
 80073a4:	58025430 	.word	0x58025430
 80073a8:	58025444 	.word	0x58025444
 80073ac:	58025458 	.word	0x58025458
 80073b0:	5802546c 	.word	0x5802546c
 80073b4:	58025480 	.word	0x58025480
 80073b8:	58025494 	.word	0x58025494
 80073bc:	cccccccd 	.word	0xcccccccd
 80073c0:	16009600 	.word	0x16009600
 80073c4:	58025880 	.word	0x58025880
 80073c8:	aaaaaaab 	.word	0xaaaaaaab
 80073cc:	400204b8 	.word	0x400204b8
 80073d0:	4002040f 	.word	0x4002040f
 80073d4:	10008200 	.word	0x10008200
 80073d8:	40020880 	.word	0x40020880

080073dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d04a      	beq.n	8007488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2b08      	cmp	r3, #8
 80073f6:	d847      	bhi.n	8007488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a25      	ldr	r2, [pc, #148]	; (8007494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d022      	beq.n	8007448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a24      	ldr	r2, [pc, #144]	; (8007498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d01d      	beq.n	8007448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a22      	ldr	r2, [pc, #136]	; (800749c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d018      	beq.n	8007448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a21      	ldr	r2, [pc, #132]	; (80074a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d013      	beq.n	8007448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a1f      	ldr	r2, [pc, #124]	; (80074a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d00e      	beq.n	8007448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a1e      	ldr	r2, [pc, #120]	; (80074a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d009      	beq.n	8007448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a1c      	ldr	r2, [pc, #112]	; (80074ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d004      	beq.n	8007448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a1b      	ldr	r2, [pc, #108]	; (80074b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d101      	bne.n	800744c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007448:	2301      	movs	r3, #1
 800744a:	e000      	b.n	800744e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800744c:	2300      	movs	r3, #0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00a      	beq.n	8007468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	4b17      	ldr	r3, [pc, #92]	; (80074b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007456:	4413      	add	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	461a      	mov	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a15      	ldr	r2, [pc, #84]	; (80074b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007464:	671a      	str	r2, [r3, #112]	; 0x70
 8007466:	e009      	b.n	800747c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	4b14      	ldr	r3, [pc, #80]	; (80074bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800746c:	4413      	add	r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	461a      	mov	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a11      	ldr	r2, [pc, #68]	; (80074c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800747a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3b01      	subs	r3, #1
 8007480:	2201      	movs	r2, #1
 8007482:	409a      	lsls	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007488:	bf00      	nop
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	58025408 	.word	0x58025408
 8007498:	5802541c 	.word	0x5802541c
 800749c:	58025430 	.word	0x58025430
 80074a0:	58025444 	.word	0x58025444
 80074a4:	58025458 	.word	0x58025458
 80074a8:	5802546c 	.word	0x5802546c
 80074ac:	58025480 	.word	0x58025480
 80074b0:	58025494 	.word	0x58025494
 80074b4:	1600963f 	.word	0x1600963f
 80074b8:	58025940 	.word	0x58025940
 80074bc:	1000823f 	.word	0x1000823f
 80074c0:	40020940 	.word	0x40020940

080074c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b089      	sub	sp, #36	; 0x24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80074d2:	4b86      	ldr	r3, [pc, #536]	; (80076ec <HAL_GPIO_Init+0x228>)
 80074d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80074d6:	e18c      	b.n	80077f2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	2101      	movs	r1, #1
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	fa01 f303 	lsl.w	r3, r1, r3
 80074e4:	4013      	ands	r3, r2
 80074e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 817e 	beq.w	80077ec <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f003 0303 	and.w	r3, r3, #3
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d005      	beq.n	8007508 <HAL_GPIO_Init+0x44>
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f003 0303 	and.w	r3, r3, #3
 8007504:	2b02      	cmp	r3, #2
 8007506:	d130      	bne.n	800756a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	2203      	movs	r2, #3
 8007514:	fa02 f303 	lsl.w	r3, r2, r3
 8007518:	43db      	mvns	r3, r3
 800751a:	69ba      	ldr	r2, [r7, #24]
 800751c:	4013      	ands	r3, r2
 800751e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	005b      	lsls	r3, r3, #1
 8007528:	fa02 f303 	lsl.w	r3, r2, r3
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	4313      	orrs	r3, r2
 8007530:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	69ba      	ldr	r2, [r7, #24]
 8007536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800753e:	2201      	movs	r2, #1
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	fa02 f303 	lsl.w	r3, r2, r3
 8007546:	43db      	mvns	r3, r3
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	4013      	ands	r3, r2
 800754c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	091b      	lsrs	r3, r3, #4
 8007554:	f003 0201 	and.w	r2, r3, #1
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	fa02 f303 	lsl.w	r3, r2, r3
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	4313      	orrs	r3, r2
 8007562:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	69ba      	ldr	r2, [r7, #24]
 8007568:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f003 0303 	and.w	r3, r3, #3
 8007572:	2b03      	cmp	r3, #3
 8007574:	d017      	beq.n	80075a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	2203      	movs	r2, #3
 8007582:	fa02 f303 	lsl.w	r3, r2, r3
 8007586:	43db      	mvns	r3, r3
 8007588:	69ba      	ldr	r2, [r7, #24]
 800758a:	4013      	ands	r3, r2
 800758c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	689a      	ldr	r2, [r3, #8]
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	005b      	lsls	r3, r3, #1
 8007596:	fa02 f303 	lsl.w	r3, r2, r3
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	4313      	orrs	r3, r2
 800759e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f003 0303 	and.w	r3, r3, #3
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d123      	bne.n	80075fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	08da      	lsrs	r2, r3, #3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3208      	adds	r2, #8
 80075ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	f003 0307 	and.w	r3, r3, #7
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	220f      	movs	r2, #15
 80075ca:	fa02 f303 	lsl.w	r3, r2, r3
 80075ce:	43db      	mvns	r3, r3
 80075d0:	69ba      	ldr	r2, [r7, #24]
 80075d2:	4013      	ands	r3, r2
 80075d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	691a      	ldr	r2, [r3, #16]
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	f003 0307 	and.w	r3, r3, #7
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	fa02 f303 	lsl.w	r3, r2, r3
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	08da      	lsrs	r2, r3, #3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	3208      	adds	r2, #8
 80075f4:	69b9      	ldr	r1, [r7, #24]
 80075f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	2203      	movs	r2, #3
 8007606:	fa02 f303 	lsl.w	r3, r2, r3
 800760a:	43db      	mvns	r3, r3
 800760c:	69ba      	ldr	r2, [r7, #24]
 800760e:	4013      	ands	r3, r2
 8007610:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f003 0203 	and.w	r2, r3, #3
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	fa02 f303 	lsl.w	r3, r2, r3
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	4313      	orrs	r3, r2
 8007626:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	69ba      	ldr	r2, [r7, #24]
 800762c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007636:	2b00      	cmp	r3, #0
 8007638:	f000 80d8 	beq.w	80077ec <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800763c:	4b2c      	ldr	r3, [pc, #176]	; (80076f0 <HAL_GPIO_Init+0x22c>)
 800763e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007642:	4a2b      	ldr	r2, [pc, #172]	; (80076f0 <HAL_GPIO_Init+0x22c>)
 8007644:	f043 0302 	orr.w	r3, r3, #2
 8007648:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800764c:	4b28      	ldr	r3, [pc, #160]	; (80076f0 <HAL_GPIO_Init+0x22c>)
 800764e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	60fb      	str	r3, [r7, #12]
 8007658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800765a:	4a26      	ldr	r2, [pc, #152]	; (80076f4 <HAL_GPIO_Init+0x230>)
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	089b      	lsrs	r3, r3, #2
 8007660:	3302      	adds	r3, #2
 8007662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	f003 0303 	and.w	r3, r3, #3
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	220f      	movs	r2, #15
 8007672:	fa02 f303 	lsl.w	r3, r2, r3
 8007676:	43db      	mvns	r3, r3
 8007678:	69ba      	ldr	r2, [r7, #24]
 800767a:	4013      	ands	r3, r2
 800767c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a1d      	ldr	r2, [pc, #116]	; (80076f8 <HAL_GPIO_Init+0x234>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d04a      	beq.n	800771c <HAL_GPIO_Init+0x258>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a1c      	ldr	r2, [pc, #112]	; (80076fc <HAL_GPIO_Init+0x238>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d02b      	beq.n	80076e6 <HAL_GPIO_Init+0x222>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a1b      	ldr	r2, [pc, #108]	; (8007700 <HAL_GPIO_Init+0x23c>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d025      	beq.n	80076e2 <HAL_GPIO_Init+0x21e>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a1a      	ldr	r2, [pc, #104]	; (8007704 <HAL_GPIO_Init+0x240>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d01f      	beq.n	80076de <HAL_GPIO_Init+0x21a>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a19      	ldr	r2, [pc, #100]	; (8007708 <HAL_GPIO_Init+0x244>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d019      	beq.n	80076da <HAL_GPIO_Init+0x216>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a18      	ldr	r2, [pc, #96]	; (800770c <HAL_GPIO_Init+0x248>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d013      	beq.n	80076d6 <HAL_GPIO_Init+0x212>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a17      	ldr	r2, [pc, #92]	; (8007710 <HAL_GPIO_Init+0x24c>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d00d      	beq.n	80076d2 <HAL_GPIO_Init+0x20e>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a16      	ldr	r2, [pc, #88]	; (8007714 <HAL_GPIO_Init+0x250>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d007      	beq.n	80076ce <HAL_GPIO_Init+0x20a>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a15      	ldr	r2, [pc, #84]	; (8007718 <HAL_GPIO_Init+0x254>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d101      	bne.n	80076ca <HAL_GPIO_Init+0x206>
 80076c6:	2309      	movs	r3, #9
 80076c8:	e029      	b.n	800771e <HAL_GPIO_Init+0x25a>
 80076ca:	230a      	movs	r3, #10
 80076cc:	e027      	b.n	800771e <HAL_GPIO_Init+0x25a>
 80076ce:	2307      	movs	r3, #7
 80076d0:	e025      	b.n	800771e <HAL_GPIO_Init+0x25a>
 80076d2:	2306      	movs	r3, #6
 80076d4:	e023      	b.n	800771e <HAL_GPIO_Init+0x25a>
 80076d6:	2305      	movs	r3, #5
 80076d8:	e021      	b.n	800771e <HAL_GPIO_Init+0x25a>
 80076da:	2304      	movs	r3, #4
 80076dc:	e01f      	b.n	800771e <HAL_GPIO_Init+0x25a>
 80076de:	2303      	movs	r3, #3
 80076e0:	e01d      	b.n	800771e <HAL_GPIO_Init+0x25a>
 80076e2:	2302      	movs	r3, #2
 80076e4:	e01b      	b.n	800771e <HAL_GPIO_Init+0x25a>
 80076e6:	2301      	movs	r3, #1
 80076e8:	e019      	b.n	800771e <HAL_GPIO_Init+0x25a>
 80076ea:	bf00      	nop
 80076ec:	58000080 	.word	0x58000080
 80076f0:	58024400 	.word	0x58024400
 80076f4:	58000400 	.word	0x58000400
 80076f8:	58020000 	.word	0x58020000
 80076fc:	58020400 	.word	0x58020400
 8007700:	58020800 	.word	0x58020800
 8007704:	58020c00 	.word	0x58020c00
 8007708:	58021000 	.word	0x58021000
 800770c:	58021400 	.word	0x58021400
 8007710:	58021800 	.word	0x58021800
 8007714:	58021c00 	.word	0x58021c00
 8007718:	58022400 	.word	0x58022400
 800771c:	2300      	movs	r3, #0
 800771e:	69fa      	ldr	r2, [r7, #28]
 8007720:	f002 0203 	and.w	r2, r2, #3
 8007724:	0092      	lsls	r2, r2, #2
 8007726:	4093      	lsls	r3, r2
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	4313      	orrs	r3, r2
 800772c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800772e:	4938      	ldr	r1, [pc, #224]	; (8007810 <HAL_GPIO_Init+0x34c>)
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	089b      	lsrs	r3, r3, #2
 8007734:	3302      	adds	r3, #2
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800773c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	43db      	mvns	r3, r3
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	4013      	ands	r3, r2
 800774c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d003      	beq.n	8007762 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800775a:	69ba      	ldr	r2, [r7, #24]
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	4313      	orrs	r3, r2
 8007760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800776a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	43db      	mvns	r3, r3
 8007776:	69ba      	ldr	r2, [r7, #24]
 8007778:	4013      	ands	r3, r2
 800777a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d003      	beq.n	8007790 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007788:	69ba      	ldr	r2, [r7, #24]
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	4313      	orrs	r3, r2
 800778e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007790:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	43db      	mvns	r3, r3
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	4013      	ands	r3, r2
 80077a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d003      	beq.n	80077bc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80077b4:	69ba      	ldr	r2, [r7, #24]
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	69ba      	ldr	r2, [r7, #24]
 80077c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	43db      	mvns	r3, r3
 80077cc:	69ba      	ldr	r2, [r7, #24]
 80077ce:	4013      	ands	r3, r2
 80077d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80077de:	69ba      	ldr	r2, [r7, #24]
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	3301      	adds	r3, #1
 80077f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	fa22 f303 	lsr.w	r3, r2, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f47f ae6b 	bne.w	80074d8 <HAL_GPIO_Init+0x14>
  }
}
 8007802:	bf00      	nop
 8007804:	bf00      	nop
 8007806:	3724      	adds	r7, #36	; 0x24
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	58000400 	.word	0x58000400

08007814 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800781e:	2300      	movs	r3, #0
 8007820:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007822:	4b72      	ldr	r3, [pc, #456]	; (80079ec <HAL_GPIO_DeInit+0x1d8>)
 8007824:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8007826:	e0d3      	b.n	80079d0 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007828:	2201      	movs	r2, #1
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	fa02 f303 	lsl.w	r3, r2, r3
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	4013      	ands	r3, r2
 8007834:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 80c6 	beq.w	80079ca <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800783e:	4a6c      	ldr	r2, [pc, #432]	; (80079f0 <HAL_GPIO_DeInit+0x1dc>)
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	089b      	lsrs	r3, r3, #2
 8007844:	3302      	adds	r3, #2
 8007846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800784a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	220f      	movs	r2, #15
 8007856:	fa02 f303 	lsl.w	r3, r2, r3
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	4013      	ands	r3, r2
 800785e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a64      	ldr	r2, [pc, #400]	; (80079f4 <HAL_GPIO_DeInit+0x1e0>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d031      	beq.n	80078cc <HAL_GPIO_DeInit+0xb8>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a63      	ldr	r2, [pc, #396]	; (80079f8 <HAL_GPIO_DeInit+0x1e4>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d02b      	beq.n	80078c8 <HAL_GPIO_DeInit+0xb4>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a62      	ldr	r2, [pc, #392]	; (80079fc <HAL_GPIO_DeInit+0x1e8>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d025      	beq.n	80078c4 <HAL_GPIO_DeInit+0xb0>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a61      	ldr	r2, [pc, #388]	; (8007a00 <HAL_GPIO_DeInit+0x1ec>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d01f      	beq.n	80078c0 <HAL_GPIO_DeInit+0xac>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a60      	ldr	r2, [pc, #384]	; (8007a04 <HAL_GPIO_DeInit+0x1f0>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d019      	beq.n	80078bc <HAL_GPIO_DeInit+0xa8>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a5f      	ldr	r2, [pc, #380]	; (8007a08 <HAL_GPIO_DeInit+0x1f4>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d013      	beq.n	80078b8 <HAL_GPIO_DeInit+0xa4>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a5e      	ldr	r2, [pc, #376]	; (8007a0c <HAL_GPIO_DeInit+0x1f8>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d00d      	beq.n	80078b4 <HAL_GPIO_DeInit+0xa0>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a5d      	ldr	r2, [pc, #372]	; (8007a10 <HAL_GPIO_DeInit+0x1fc>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d007      	beq.n	80078b0 <HAL_GPIO_DeInit+0x9c>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a5c      	ldr	r2, [pc, #368]	; (8007a14 <HAL_GPIO_DeInit+0x200>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d101      	bne.n	80078ac <HAL_GPIO_DeInit+0x98>
 80078a8:	2309      	movs	r3, #9
 80078aa:	e010      	b.n	80078ce <HAL_GPIO_DeInit+0xba>
 80078ac:	230a      	movs	r3, #10
 80078ae:	e00e      	b.n	80078ce <HAL_GPIO_DeInit+0xba>
 80078b0:	2307      	movs	r3, #7
 80078b2:	e00c      	b.n	80078ce <HAL_GPIO_DeInit+0xba>
 80078b4:	2306      	movs	r3, #6
 80078b6:	e00a      	b.n	80078ce <HAL_GPIO_DeInit+0xba>
 80078b8:	2305      	movs	r3, #5
 80078ba:	e008      	b.n	80078ce <HAL_GPIO_DeInit+0xba>
 80078bc:	2304      	movs	r3, #4
 80078be:	e006      	b.n	80078ce <HAL_GPIO_DeInit+0xba>
 80078c0:	2303      	movs	r3, #3
 80078c2:	e004      	b.n	80078ce <HAL_GPIO_DeInit+0xba>
 80078c4:	2302      	movs	r3, #2
 80078c6:	e002      	b.n	80078ce <HAL_GPIO_DeInit+0xba>
 80078c8:	2301      	movs	r3, #1
 80078ca:	e000      	b.n	80078ce <HAL_GPIO_DeInit+0xba>
 80078cc:	2300      	movs	r3, #0
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	f002 0203 	and.w	r2, r2, #3
 80078d4:	0092      	lsls	r2, r2, #2
 80078d6:	4093      	lsls	r3, r2
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d136      	bne.n	800794c <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	43db      	mvns	r3, r3
 80078e6:	401a      	ands	r2, r3
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	43db      	mvns	r3, r3
 80078f4:	401a      	ands	r2, r3
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80078fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	43db      	mvns	r3, r3
 8007904:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007908:	4013      	ands	r3, r2
 800790a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800790c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	43db      	mvns	r3, r3
 8007916:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800791a:	4013      	ands	r3, r2
 800791c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f003 0303 	and.w	r3, r3, #3
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	220f      	movs	r2, #15
 8007928:	fa02 f303 	lsl.w	r3, r2, r3
 800792c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800792e:	4a30      	ldr	r2, [pc, #192]	; (80079f0 <HAL_GPIO_DeInit+0x1dc>)
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	089b      	lsrs	r3, r3, #2
 8007934:	3302      	adds	r3, #2
 8007936:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	43da      	mvns	r2, r3
 800793e:	482c      	ldr	r0, [pc, #176]	; (80079f0 <HAL_GPIO_DeInit+0x1dc>)
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	089b      	lsrs	r3, r3, #2
 8007944:	400a      	ands	r2, r1
 8007946:	3302      	adds	r3, #2
 8007948:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	005b      	lsls	r3, r3, #1
 8007954:	2103      	movs	r1, #3
 8007956:	fa01 f303 	lsl.w	r3, r1, r3
 800795a:	431a      	orrs	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	08da      	lsrs	r2, r3, #3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3208      	adds	r2, #8
 8007968:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f003 0307 	and.w	r3, r3, #7
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	220f      	movs	r2, #15
 8007976:	fa02 f303 	lsl.w	r3, r2, r3
 800797a:	43db      	mvns	r3, r3
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	08d2      	lsrs	r2, r2, #3
 8007980:	4019      	ands	r1, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	3208      	adds	r2, #8
 8007986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	68da      	ldr	r2, [r3, #12]
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	005b      	lsls	r3, r3, #1
 8007992:	2103      	movs	r1, #3
 8007994:	fa01 f303 	lsl.w	r3, r1, r3
 8007998:	43db      	mvns	r3, r3
 800799a:	401a      	ands	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	2101      	movs	r1, #1
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	fa01 f303 	lsl.w	r3, r1, r3
 80079ac:	43db      	mvns	r3, r3
 80079ae:	401a      	ands	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	689a      	ldr	r2, [r3, #8]
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	005b      	lsls	r3, r3, #1
 80079bc:	2103      	movs	r1, #3
 80079be:	fa01 f303 	lsl.w	r3, r1, r3
 80079c2:	43db      	mvns	r3, r3
 80079c4:	401a      	ands	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	609a      	str	r2, [r3, #8]
    }

    position++;
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	3301      	adds	r3, #1
 80079ce:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	fa22 f303 	lsr.w	r3, r2, r3
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f47f af25 	bne.w	8007828 <HAL_GPIO_DeInit+0x14>
  }
}
 80079de:	bf00      	nop
 80079e0:	bf00      	nop
 80079e2:	371c      	adds	r7, #28
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr
 80079ec:	58000080 	.word	0x58000080
 80079f0:	58000400 	.word	0x58000400
 80079f4:	58020000 	.word	0x58020000
 80079f8:	58020400 	.word	0x58020400
 80079fc:	58020800 	.word	0x58020800
 8007a00:	58020c00 	.word	0x58020c00
 8007a04:	58021000 	.word	0x58021000
 8007a08:	58021400 	.word	0x58021400
 8007a0c:	58021800 	.word	0x58021800
 8007a10:	58021c00 	.word	0x58021c00
 8007a14:	58022400 	.word	0x58022400

08007a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	460b      	mov	r3, r1
 8007a22:	807b      	strh	r3, [r7, #2]
 8007a24:	4613      	mov	r3, r2
 8007a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a28:	787b      	ldrb	r3, [r7, #1]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a2e:	887a      	ldrh	r2, [r7, #2]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007a34:	e003      	b.n	8007a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007a36:	887b      	ldrh	r3, [r7, #2]
 8007a38:	041a      	lsls	r2, r3, #16
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	619a      	str	r2, [r3, #24]
}
 8007a3e:	bf00      	nop
 8007a40:	370c      	adds	r7, #12
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
	...

08007a4c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007a54:	4b19      	ldr	r3, [pc, #100]	; (8007abc <HAL_PWREx_ConfigSupply+0x70>)
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	2b04      	cmp	r3, #4
 8007a5e:	d00a      	beq.n	8007a76 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007a60:	4b16      	ldr	r3, [pc, #88]	; (8007abc <HAL_PWREx_ConfigSupply+0x70>)
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	f003 0307 	and.w	r3, r3, #7
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d001      	beq.n	8007a72 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e01f      	b.n	8007ab2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	e01d      	b.n	8007ab2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007a76:	4b11      	ldr	r3, [pc, #68]	; (8007abc <HAL_PWREx_ConfigSupply+0x70>)
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	f023 0207 	bic.w	r2, r3, #7
 8007a7e:	490f      	ldr	r1, [pc, #60]	; (8007abc <HAL_PWREx_ConfigSupply+0x70>)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007a86:	f7fc fbdf 	bl	8004248 <HAL_GetTick>
 8007a8a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a8c:	e009      	b.n	8007aa2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007a8e:	f7fc fbdb 	bl	8004248 <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a9c:	d901      	bls.n	8007aa2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e007      	b.n	8007ab2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007aa2:	4b06      	ldr	r3, [pc, #24]	; (8007abc <HAL_PWREx_ConfigSupply+0x70>)
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aae:	d1ee      	bne.n	8007a8e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	58024800 	.word	0x58024800

08007ac0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08c      	sub	sp, #48	; 0x30
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e3c8      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 8087 	beq.w	8007bee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ae0:	4b88      	ldr	r3, [pc, #544]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007aea:	4b86      	ldr	r3, [pc, #536]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aee:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af2:	2b10      	cmp	r3, #16
 8007af4:	d007      	beq.n	8007b06 <HAL_RCC_OscConfig+0x46>
 8007af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af8:	2b18      	cmp	r3, #24
 8007afa:	d110      	bne.n	8007b1e <HAL_RCC_OscConfig+0x5e>
 8007afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afe:	f003 0303 	and.w	r3, r3, #3
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d10b      	bne.n	8007b1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b06:	4b7f      	ldr	r3, [pc, #508]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d06c      	beq.n	8007bec <HAL_RCC_OscConfig+0x12c>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d168      	bne.n	8007bec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e3a2      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b26:	d106      	bne.n	8007b36 <HAL_RCC_OscConfig+0x76>
 8007b28:	4b76      	ldr	r3, [pc, #472]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a75      	ldr	r2, [pc, #468]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b32:	6013      	str	r3, [r2, #0]
 8007b34:	e02e      	b.n	8007b94 <HAL_RCC_OscConfig+0xd4>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10c      	bne.n	8007b58 <HAL_RCC_OscConfig+0x98>
 8007b3e:	4b71      	ldr	r3, [pc, #452]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a70      	ldr	r2, [pc, #448]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b48:	6013      	str	r3, [r2, #0]
 8007b4a:	4b6e      	ldr	r3, [pc, #440]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a6d      	ldr	r2, [pc, #436]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007b50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b54:	6013      	str	r3, [r2, #0]
 8007b56:	e01d      	b.n	8007b94 <HAL_RCC_OscConfig+0xd4>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b60:	d10c      	bne.n	8007b7c <HAL_RCC_OscConfig+0xbc>
 8007b62:	4b68      	ldr	r3, [pc, #416]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a67      	ldr	r2, [pc, #412]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b6c:	6013      	str	r3, [r2, #0]
 8007b6e:	4b65      	ldr	r3, [pc, #404]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a64      	ldr	r2, [pc, #400]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	e00b      	b.n	8007b94 <HAL_RCC_OscConfig+0xd4>
 8007b7c:	4b61      	ldr	r3, [pc, #388]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a60      	ldr	r2, [pc, #384]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	4b5e      	ldr	r3, [pc, #376]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a5d      	ldr	r2, [pc, #372]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d013      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b9c:	f7fc fb54 	bl	8004248 <HAL_GetTick>
 8007ba0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ba2:	e008      	b.n	8007bb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ba4:	f7fc fb50 	bl	8004248 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	2b64      	cmp	r3, #100	; 0x64
 8007bb0:	d901      	bls.n	8007bb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e356      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007bb6:	4b53      	ldr	r3, [pc, #332]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d0f0      	beq.n	8007ba4 <HAL_RCC_OscConfig+0xe4>
 8007bc2:	e014      	b.n	8007bee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc4:	f7fc fb40 	bl	8004248 <HAL_GetTick>
 8007bc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007bca:	e008      	b.n	8007bde <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bcc:	f7fc fb3c 	bl	8004248 <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	2b64      	cmp	r3, #100	; 0x64
 8007bd8:	d901      	bls.n	8007bde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e342      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007bde:	4b49      	ldr	r3, [pc, #292]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1f0      	bne.n	8007bcc <HAL_RCC_OscConfig+0x10c>
 8007bea:	e000      	b.n	8007bee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 808c 	beq.w	8007d14 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bfc:	4b41      	ldr	r3, [pc, #260]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c04:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c06:	4b3f      	ldr	r3, [pc, #252]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d007      	beq.n	8007c22 <HAL_RCC_OscConfig+0x162>
 8007c12:	6a3b      	ldr	r3, [r7, #32]
 8007c14:	2b18      	cmp	r3, #24
 8007c16:	d137      	bne.n	8007c88 <HAL_RCC_OscConfig+0x1c8>
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d132      	bne.n	8007c88 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c22:	4b38      	ldr	r3, [pc, #224]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0304 	and.w	r3, r3, #4
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d005      	beq.n	8007c3a <HAL_RCC_OscConfig+0x17a>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e314      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c3a:	4b32      	ldr	r3, [pc, #200]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f023 0219 	bic.w	r2, r3, #25
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	492f      	ldr	r1, [pc, #188]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c4c:	f7fc fafc 	bl	8004248 <HAL_GetTick>
 8007c50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c52:	e008      	b.n	8007c66 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c54:	f7fc faf8 	bl	8004248 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d901      	bls.n	8007c66 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e2fe      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c66:	4b27      	ldr	r3, [pc, #156]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0304 	and.w	r3, r3, #4
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0f0      	beq.n	8007c54 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c72:	4b24      	ldr	r3, [pc, #144]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	061b      	lsls	r3, r3, #24
 8007c80:	4920      	ldr	r1, [pc, #128]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c86:	e045      	b.n	8007d14 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d026      	beq.n	8007cde <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c90:	4b1c      	ldr	r3, [pc, #112]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f023 0219 	bic.w	r2, r3, #25
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	4919      	ldr	r1, [pc, #100]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca2:	f7fc fad1 	bl	8004248 <HAL_GetTick>
 8007ca6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ca8:	e008      	b.n	8007cbc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007caa:	f7fc facd 	bl	8004248 <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d901      	bls.n	8007cbc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e2d3      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cbc:	4b11      	ldr	r3, [pc, #68]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0304 	and.w	r3, r3, #4
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d0f0      	beq.n	8007caa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cc8:	4b0e      	ldr	r3, [pc, #56]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	061b      	lsls	r3, r3, #24
 8007cd6:	490b      	ldr	r1, [pc, #44]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	604b      	str	r3, [r1, #4]
 8007cdc:	e01a      	b.n	8007d14 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007cde:	4b09      	ldr	r3, [pc, #36]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a08      	ldr	r2, [pc, #32]	; (8007d04 <HAL_RCC_OscConfig+0x244>)
 8007ce4:	f023 0301 	bic.w	r3, r3, #1
 8007ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cea:	f7fc faad 	bl	8004248 <HAL_GetTick>
 8007cee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007cf0:	e00a      	b.n	8007d08 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cf2:	f7fc faa9 	bl	8004248 <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d903      	bls.n	8007d08 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e2af      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
 8007d04:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d08:	4b96      	ldr	r3, [pc, #600]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0304 	and.w	r3, r3, #4
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1ee      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0310 	and.w	r3, r3, #16
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d06a      	beq.n	8007df6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d20:	4b90      	ldr	r3, [pc, #576]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d28:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d2a:	4b8e      	ldr	r3, [pc, #568]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	2b08      	cmp	r3, #8
 8007d34:	d007      	beq.n	8007d46 <HAL_RCC_OscConfig+0x286>
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	2b18      	cmp	r3, #24
 8007d3a:	d11b      	bne.n	8007d74 <HAL_RCC_OscConfig+0x2b4>
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f003 0303 	and.w	r3, r3, #3
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d116      	bne.n	8007d74 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d46:	4b87      	ldr	r3, [pc, #540]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d005      	beq.n	8007d5e <HAL_RCC_OscConfig+0x29e>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	2b80      	cmp	r3, #128	; 0x80
 8007d58:	d001      	beq.n	8007d5e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e282      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d5e:	4b81      	ldr	r3, [pc, #516]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	061b      	lsls	r3, r3, #24
 8007d6c:	497d      	ldr	r1, [pc, #500]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d72:	e040      	b.n	8007df6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	69db      	ldr	r3, [r3, #28]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d023      	beq.n	8007dc4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007d7c:	4b79      	ldr	r3, [pc, #484]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a78      	ldr	r2, [pc, #480]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d88:	f7fc fa5e 	bl	8004248 <HAL_GetTick>
 8007d8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d8e:	e008      	b.n	8007da2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007d90:	f7fc fa5a 	bl	8004248 <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d901      	bls.n	8007da2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e260      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007da2:	4b70      	ldr	r3, [pc, #448]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d0f0      	beq.n	8007d90 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007dae:	4b6d      	ldr	r3, [pc, #436]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	061b      	lsls	r3, r3, #24
 8007dbc:	4969      	ldr	r1, [pc, #420]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	60cb      	str	r3, [r1, #12]
 8007dc2:	e018      	b.n	8007df6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007dc4:	4b67      	ldr	r3, [pc, #412]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a66      	ldr	r2, [pc, #408]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd0:	f7fc fa3a 	bl	8004248 <HAL_GetTick>
 8007dd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007dd6:	e008      	b.n	8007dea <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007dd8:	f7fc fa36 	bl	8004248 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d901      	bls.n	8007dea <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e23c      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007dea:	4b5e      	ldr	r3, [pc, #376]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1f0      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0308 	and.w	r3, r3, #8
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d036      	beq.n	8007e70 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d019      	beq.n	8007e3e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e0a:	4b56      	ldr	r3, [pc, #344]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e0e:	4a55      	ldr	r2, [pc, #340]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007e10:	f043 0301 	orr.w	r3, r3, #1
 8007e14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e16:	f7fc fa17 	bl	8004248 <HAL_GetTick>
 8007e1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e1c:	e008      	b.n	8007e30 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e1e:	f7fc fa13 	bl	8004248 <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d901      	bls.n	8007e30 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e219      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e30:	4b4c      	ldr	r3, [pc, #304]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e34:	f003 0302 	and.w	r3, r3, #2
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d0f0      	beq.n	8007e1e <HAL_RCC_OscConfig+0x35e>
 8007e3c:	e018      	b.n	8007e70 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e3e:	4b49      	ldr	r3, [pc, #292]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e42:	4a48      	ldr	r2, [pc, #288]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007e44:	f023 0301 	bic.w	r3, r3, #1
 8007e48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e4a:	f7fc f9fd 	bl	8004248 <HAL_GetTick>
 8007e4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e50:	e008      	b.n	8007e64 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e52:	f7fc f9f9 	bl	8004248 <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d901      	bls.n	8007e64 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e1ff      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e64:	4b3f      	ldr	r3, [pc, #252]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1f0      	bne.n	8007e52 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0320 	and.w	r3, r3, #32
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d036      	beq.n	8007eea <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d019      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007e84:	4b37      	ldr	r3, [pc, #220]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a36      	ldr	r2, [pc, #216]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007e8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007e90:	f7fc f9da 	bl	8004248 <HAL_GetTick>
 8007e94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007e96:	e008      	b.n	8007eaa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e98:	f7fc f9d6 	bl	8004248 <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d901      	bls.n	8007eaa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e1dc      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007eaa:	4b2e      	ldr	r3, [pc, #184]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0f0      	beq.n	8007e98 <HAL_RCC_OscConfig+0x3d8>
 8007eb6:	e018      	b.n	8007eea <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007eb8:	4b2a      	ldr	r3, [pc, #168]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a29      	ldr	r2, [pc, #164]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007ebe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ec2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007ec4:	f7fc f9c0 	bl	8004248 <HAL_GetTick>
 8007ec8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007eca:	e008      	b.n	8007ede <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ecc:	f7fc f9bc 	bl	8004248 <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d901      	bls.n	8007ede <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e1c2      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007ede:	4b21      	ldr	r3, [pc, #132]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1f0      	bne.n	8007ecc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0304 	and.w	r3, r3, #4
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f000 8086 	beq.w	8008004 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007ef8:	4b1b      	ldr	r3, [pc, #108]	; (8007f68 <HAL_RCC_OscConfig+0x4a8>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a1a      	ldr	r2, [pc, #104]	; (8007f68 <HAL_RCC_OscConfig+0x4a8>)
 8007efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f04:	f7fc f9a0 	bl	8004248 <HAL_GetTick>
 8007f08:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f0a:	e008      	b.n	8007f1e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f0c:	f7fc f99c 	bl	8004248 <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	2b64      	cmp	r3, #100	; 0x64
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e1a2      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f1e:	4b12      	ldr	r3, [pc, #72]	; (8007f68 <HAL_RCC_OscConfig+0x4a8>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0f0      	beq.n	8007f0c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d106      	bne.n	8007f40 <HAL_RCC_OscConfig+0x480>
 8007f32:	4b0c      	ldr	r3, [pc, #48]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f36:	4a0b      	ldr	r2, [pc, #44]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007f38:	f043 0301 	orr.w	r3, r3, #1
 8007f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8007f3e:	e032      	b.n	8007fa6 <HAL_RCC_OscConfig+0x4e6>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d111      	bne.n	8007f6c <HAL_RCC_OscConfig+0x4ac>
 8007f48:	4b06      	ldr	r3, [pc, #24]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4c:	4a05      	ldr	r2, [pc, #20]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007f4e:	f023 0301 	bic.w	r3, r3, #1
 8007f52:	6713      	str	r3, [r2, #112]	; 0x70
 8007f54:	4b03      	ldr	r3, [pc, #12]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f58:	4a02      	ldr	r2, [pc, #8]	; (8007f64 <HAL_RCC_OscConfig+0x4a4>)
 8007f5a:	f023 0304 	bic.w	r3, r3, #4
 8007f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8007f60:	e021      	b.n	8007fa6 <HAL_RCC_OscConfig+0x4e6>
 8007f62:	bf00      	nop
 8007f64:	58024400 	.word	0x58024400
 8007f68:	58024800 	.word	0x58024800
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	2b05      	cmp	r3, #5
 8007f72:	d10c      	bne.n	8007f8e <HAL_RCC_OscConfig+0x4ce>
 8007f74:	4b83      	ldr	r3, [pc, #524]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 8007f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f78:	4a82      	ldr	r2, [pc, #520]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 8007f7a:	f043 0304 	orr.w	r3, r3, #4
 8007f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8007f80:	4b80      	ldr	r3, [pc, #512]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 8007f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f84:	4a7f      	ldr	r2, [pc, #508]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 8007f86:	f043 0301 	orr.w	r3, r3, #1
 8007f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8007f8c:	e00b      	b.n	8007fa6 <HAL_RCC_OscConfig+0x4e6>
 8007f8e:	4b7d      	ldr	r3, [pc, #500]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 8007f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f92:	4a7c      	ldr	r2, [pc, #496]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 8007f94:	f023 0301 	bic.w	r3, r3, #1
 8007f98:	6713      	str	r3, [r2, #112]	; 0x70
 8007f9a:	4b7a      	ldr	r3, [pc, #488]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 8007f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f9e:	4a79      	ldr	r2, [pc, #484]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 8007fa0:	f023 0304 	bic.w	r3, r3, #4
 8007fa4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d015      	beq.n	8007fda <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fae:	f7fc f94b 	bl	8004248 <HAL_GetTick>
 8007fb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fb4:	e00a      	b.n	8007fcc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fb6:	f7fc f947 	bl	8004248 <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d901      	bls.n	8007fcc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e14b      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fcc:	4b6d      	ldr	r3, [pc, #436]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 8007fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd0:	f003 0302 	and.w	r3, r3, #2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d0ee      	beq.n	8007fb6 <HAL_RCC_OscConfig+0x4f6>
 8007fd8:	e014      	b.n	8008004 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fda:	f7fc f935 	bl	8004248 <HAL_GetTick>
 8007fde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007fe0:	e00a      	b.n	8007ff8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fe2:	f7fc f931 	bl	8004248 <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d901      	bls.n	8007ff8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e135      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ff8:	4b62      	ldr	r3, [pc, #392]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 8007ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffc:	f003 0302 	and.w	r3, r3, #2
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1ee      	bne.n	8007fe2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 812a 	beq.w	8008262 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800800e:	4b5d      	ldr	r3, [pc, #372]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008016:	2b18      	cmp	r3, #24
 8008018:	f000 80ba 	beq.w	8008190 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008020:	2b02      	cmp	r3, #2
 8008022:	f040 8095 	bne.w	8008150 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008026:	4b57      	ldr	r3, [pc, #348]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a56      	ldr	r2, [pc, #344]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 800802c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008032:	f7fc f909 	bl	8004248 <HAL_GetTick>
 8008036:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008038:	e008      	b.n	800804c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800803a:	f7fc f905 	bl	8004248 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	2b02      	cmp	r3, #2
 8008046:	d901      	bls.n	800804c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e10b      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800804c:	4b4d      	ldr	r3, [pc, #308]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1f0      	bne.n	800803a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008058:	4b4a      	ldr	r3, [pc, #296]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 800805a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800805c:	4b4a      	ldr	r3, [pc, #296]	; (8008188 <HAL_RCC_OscConfig+0x6c8>)
 800805e:	4013      	ands	r3, r2
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008068:	0112      	lsls	r2, r2, #4
 800806a:	430a      	orrs	r2, r1
 800806c:	4945      	ldr	r1, [pc, #276]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 800806e:	4313      	orrs	r3, r2
 8008070:	628b      	str	r3, [r1, #40]	; 0x28
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008076:	3b01      	subs	r3, #1
 8008078:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008080:	3b01      	subs	r3, #1
 8008082:	025b      	lsls	r3, r3, #9
 8008084:	b29b      	uxth	r3, r3
 8008086:	431a      	orrs	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808c:	3b01      	subs	r3, #1
 800808e:	041b      	lsls	r3, r3, #16
 8008090:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008094:	431a      	orrs	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809a:	3b01      	subs	r3, #1
 800809c:	061b      	lsls	r3, r3, #24
 800809e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80080a2:	4938      	ldr	r1, [pc, #224]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80080a8:	4b36      	ldr	r3, [pc, #216]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 80080aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ac:	4a35      	ldr	r2, [pc, #212]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 80080ae:	f023 0301 	bic.w	r3, r3, #1
 80080b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80080b4:	4b33      	ldr	r3, [pc, #204]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 80080b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080b8:	4b34      	ldr	r3, [pc, #208]	; (800818c <HAL_RCC_OscConfig+0x6cc>)
 80080ba:	4013      	ands	r3, r2
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80080c0:	00d2      	lsls	r2, r2, #3
 80080c2:	4930      	ldr	r1, [pc, #192]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 80080c4:	4313      	orrs	r3, r2
 80080c6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80080c8:	4b2e      	ldr	r3, [pc, #184]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 80080ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080cc:	f023 020c 	bic.w	r2, r3, #12
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d4:	492b      	ldr	r1, [pc, #172]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80080da:	4b2a      	ldr	r3, [pc, #168]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 80080dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080de:	f023 0202 	bic.w	r2, r3, #2
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080e6:	4927      	ldr	r1, [pc, #156]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80080ec:	4b25      	ldr	r3, [pc, #148]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 80080ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f0:	4a24      	ldr	r2, [pc, #144]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 80080f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080f8:	4b22      	ldr	r3, [pc, #136]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 80080fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fc:	4a21      	ldr	r2, [pc, #132]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 80080fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008102:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008104:	4b1f      	ldr	r3, [pc, #124]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 8008106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008108:	4a1e      	ldr	r2, [pc, #120]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 800810a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800810e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008110:	4b1c      	ldr	r3, [pc, #112]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 8008112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008114:	4a1b      	ldr	r2, [pc, #108]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 8008116:	f043 0301 	orr.w	r3, r3, #1
 800811a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800811c:	4b19      	ldr	r3, [pc, #100]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a18      	ldr	r2, [pc, #96]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 8008122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008128:	f7fc f88e 	bl	8004248 <HAL_GetTick>
 800812c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800812e:	e008      	b.n	8008142 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008130:	f7fc f88a 	bl	8004248 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	2b02      	cmp	r3, #2
 800813c:	d901      	bls.n	8008142 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e090      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008142:	4b10      	ldr	r3, [pc, #64]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d0f0      	beq.n	8008130 <HAL_RCC_OscConfig+0x670>
 800814e:	e088      	b.n	8008262 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008150:	4b0c      	ldr	r3, [pc, #48]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a0b      	ldr	r2, [pc, #44]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 8008156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800815a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800815c:	f7fc f874 	bl	8004248 <HAL_GetTick>
 8008160:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008162:	e008      	b.n	8008176 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008164:	f7fc f870 	bl	8004248 <HAL_GetTick>
 8008168:	4602      	mov	r2, r0
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	2b02      	cmp	r3, #2
 8008170:	d901      	bls.n	8008176 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e076      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008176:	4b03      	ldr	r3, [pc, #12]	; (8008184 <HAL_RCC_OscConfig+0x6c4>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1f0      	bne.n	8008164 <HAL_RCC_OscConfig+0x6a4>
 8008182:	e06e      	b.n	8008262 <HAL_RCC_OscConfig+0x7a2>
 8008184:	58024400 	.word	0x58024400
 8008188:	fffffc0c 	.word	0xfffffc0c
 800818c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008190:	4b36      	ldr	r3, [pc, #216]	; (800826c <HAL_RCC_OscConfig+0x7ac>)
 8008192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008194:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008196:	4b35      	ldr	r3, [pc, #212]	; (800826c <HAL_RCC_OscConfig+0x7ac>)
 8008198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d031      	beq.n	8008208 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	f003 0203 	and.w	r2, r3, #3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d12a      	bne.n	8008208 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	091b      	lsrs	r3, r3, #4
 80081b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081be:	429a      	cmp	r2, r3
 80081c0:	d122      	bne.n	8008208 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d11a      	bne.n	8008208 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	0a5b      	lsrs	r3, r3, #9
 80081d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d111      	bne.n	8008208 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	0c1b      	lsrs	r3, r3, #16
 80081e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d108      	bne.n	8008208 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	0e1b      	lsrs	r3, r3, #24
 80081fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008202:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008204:	429a      	cmp	r2, r3
 8008206:	d001      	beq.n	800820c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e02b      	b.n	8008264 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800820c:	4b17      	ldr	r3, [pc, #92]	; (800826c <HAL_RCC_OscConfig+0x7ac>)
 800820e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008210:	08db      	lsrs	r3, r3, #3
 8008212:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008216:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	429a      	cmp	r2, r3
 8008220:	d01f      	beq.n	8008262 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008222:	4b12      	ldr	r3, [pc, #72]	; (800826c <HAL_RCC_OscConfig+0x7ac>)
 8008224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008226:	4a11      	ldr	r2, [pc, #68]	; (800826c <HAL_RCC_OscConfig+0x7ac>)
 8008228:	f023 0301 	bic.w	r3, r3, #1
 800822c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800822e:	f7fc f80b 	bl	8004248 <HAL_GetTick>
 8008232:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008234:	bf00      	nop
 8008236:	f7fc f807 	bl	8004248 <HAL_GetTick>
 800823a:	4602      	mov	r2, r0
 800823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823e:	4293      	cmp	r3, r2
 8008240:	d0f9      	beq.n	8008236 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008242:	4b0a      	ldr	r3, [pc, #40]	; (800826c <HAL_RCC_OscConfig+0x7ac>)
 8008244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008246:	4b0a      	ldr	r3, [pc, #40]	; (8008270 <HAL_RCC_OscConfig+0x7b0>)
 8008248:	4013      	ands	r3, r2
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800824e:	00d2      	lsls	r2, r2, #3
 8008250:	4906      	ldr	r1, [pc, #24]	; (800826c <HAL_RCC_OscConfig+0x7ac>)
 8008252:	4313      	orrs	r3, r2
 8008254:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008256:	4b05      	ldr	r3, [pc, #20]	; (800826c <HAL_RCC_OscConfig+0x7ac>)
 8008258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825a:	4a04      	ldr	r2, [pc, #16]	; (800826c <HAL_RCC_OscConfig+0x7ac>)
 800825c:	f043 0301 	orr.w	r3, r3, #1
 8008260:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3730      	adds	r7, #48	; 0x30
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	58024400 	.word	0x58024400
 8008270:	ffff0007 	.word	0xffff0007

08008274 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e19c      	b.n	80085c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008288:	4b8a      	ldr	r3, [pc, #552]	; (80084b4 <HAL_RCC_ClockConfig+0x240>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 030f 	and.w	r3, r3, #15
 8008290:	683a      	ldr	r2, [r7, #0]
 8008292:	429a      	cmp	r2, r3
 8008294:	d910      	bls.n	80082b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008296:	4b87      	ldr	r3, [pc, #540]	; (80084b4 <HAL_RCC_ClockConfig+0x240>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f023 020f 	bic.w	r2, r3, #15
 800829e:	4985      	ldr	r1, [pc, #532]	; (80084b4 <HAL_RCC_ClockConfig+0x240>)
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082a6:	4b83      	ldr	r3, [pc, #524]	; (80084b4 <HAL_RCC_ClockConfig+0x240>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 030f 	and.w	r3, r3, #15
 80082ae:	683a      	ldr	r2, [r7, #0]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d001      	beq.n	80082b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e184      	b.n	80085c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0304 	and.w	r3, r3, #4
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d010      	beq.n	80082e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	691a      	ldr	r2, [r3, #16]
 80082c8:	4b7b      	ldr	r3, [pc, #492]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d908      	bls.n	80082e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80082d4:	4b78      	ldr	r3, [pc, #480]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	4975      	ldr	r1, [pc, #468]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0308 	and.w	r3, r3, #8
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d010      	beq.n	8008314 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	695a      	ldr	r2, [r3, #20]
 80082f6:	4b70      	ldr	r3, [pc, #448]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082fe:	429a      	cmp	r2, r3
 8008300:	d908      	bls.n	8008314 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008302:	4b6d      	ldr	r3, [pc, #436]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	496a      	ldr	r1, [pc, #424]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 8008310:	4313      	orrs	r3, r2
 8008312:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0310 	and.w	r3, r3, #16
 800831c:	2b00      	cmp	r3, #0
 800831e:	d010      	beq.n	8008342 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	699a      	ldr	r2, [r3, #24]
 8008324:	4b64      	ldr	r3, [pc, #400]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800832c:	429a      	cmp	r2, r3
 800832e:	d908      	bls.n	8008342 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008330:	4b61      	ldr	r3, [pc, #388]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 8008332:	69db      	ldr	r3, [r3, #28]
 8008334:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	495e      	ldr	r1, [pc, #376]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 800833e:	4313      	orrs	r3, r2
 8008340:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 0320 	and.w	r3, r3, #32
 800834a:	2b00      	cmp	r3, #0
 800834c:	d010      	beq.n	8008370 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	69da      	ldr	r2, [r3, #28]
 8008352:	4b59      	ldr	r3, [pc, #356]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800835a:	429a      	cmp	r2, r3
 800835c:	d908      	bls.n	8008370 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800835e:	4b56      	ldr	r3, [pc, #344]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	4953      	ldr	r1, [pc, #332]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 800836c:	4313      	orrs	r3, r2
 800836e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0302 	and.w	r3, r3, #2
 8008378:	2b00      	cmp	r3, #0
 800837a:	d010      	beq.n	800839e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	68da      	ldr	r2, [r3, #12]
 8008380:	4b4d      	ldr	r3, [pc, #308]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	f003 030f 	and.w	r3, r3, #15
 8008388:	429a      	cmp	r2, r3
 800838a:	d908      	bls.n	800839e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800838c:	4b4a      	ldr	r3, [pc, #296]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	f023 020f 	bic.w	r2, r3, #15
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	4947      	ldr	r1, [pc, #284]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 800839a:	4313      	orrs	r3, r2
 800839c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d055      	beq.n	8008456 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80083aa:	4b43      	ldr	r3, [pc, #268]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	4940      	ldr	r1, [pc, #256]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 80083b8:	4313      	orrs	r3, r2
 80083ba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d107      	bne.n	80083d4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083c4:	4b3c      	ldr	r3, [pc, #240]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d121      	bne.n	8008414 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e0f6      	b.n	80085c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d107      	bne.n	80083ec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083dc:	4b36      	ldr	r3, [pc, #216]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d115      	bne.n	8008414 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e0ea      	b.n	80085c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d107      	bne.n	8008404 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083f4:	4b30      	ldr	r3, [pc, #192]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d109      	bne.n	8008414 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e0de      	b.n	80085c2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008404:	4b2c      	ldr	r3, [pc, #176]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0304 	and.w	r3, r3, #4
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e0d6      	b.n	80085c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008414:	4b28      	ldr	r3, [pc, #160]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	f023 0207 	bic.w	r2, r3, #7
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	4925      	ldr	r1, [pc, #148]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 8008422:	4313      	orrs	r3, r2
 8008424:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008426:	f7fb ff0f 	bl	8004248 <HAL_GetTick>
 800842a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800842c:	e00a      	b.n	8008444 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800842e:	f7fb ff0b 	bl	8004248 <HAL_GetTick>
 8008432:	4602      	mov	r2, r0
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	f241 3288 	movw	r2, #5000	; 0x1388
 800843c:	4293      	cmp	r3, r2
 800843e:	d901      	bls.n	8008444 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e0be      	b.n	80085c2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008444:	4b1c      	ldr	r3, [pc, #112]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	00db      	lsls	r3, r3, #3
 8008452:	429a      	cmp	r2, r3
 8008454:	d1eb      	bne.n	800842e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0302 	and.w	r3, r3, #2
 800845e:	2b00      	cmp	r3, #0
 8008460:	d010      	beq.n	8008484 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68da      	ldr	r2, [r3, #12]
 8008466:	4b14      	ldr	r3, [pc, #80]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	f003 030f 	and.w	r3, r3, #15
 800846e:	429a      	cmp	r2, r3
 8008470:	d208      	bcs.n	8008484 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008472:	4b11      	ldr	r3, [pc, #68]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	f023 020f 	bic.w	r2, r3, #15
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	490e      	ldr	r1, [pc, #56]	; (80084b8 <HAL_RCC_ClockConfig+0x244>)
 8008480:	4313      	orrs	r3, r2
 8008482:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008484:	4b0b      	ldr	r3, [pc, #44]	; (80084b4 <HAL_RCC_ClockConfig+0x240>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 030f 	and.w	r3, r3, #15
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	429a      	cmp	r2, r3
 8008490:	d214      	bcs.n	80084bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008492:	4b08      	ldr	r3, [pc, #32]	; (80084b4 <HAL_RCC_ClockConfig+0x240>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f023 020f 	bic.w	r2, r3, #15
 800849a:	4906      	ldr	r1, [pc, #24]	; (80084b4 <HAL_RCC_ClockConfig+0x240>)
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	4313      	orrs	r3, r2
 80084a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084a2:	4b04      	ldr	r3, [pc, #16]	; (80084b4 <HAL_RCC_ClockConfig+0x240>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 030f 	and.w	r3, r3, #15
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d005      	beq.n	80084bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e086      	b.n	80085c2 <HAL_RCC_ClockConfig+0x34e>
 80084b4:	52002000 	.word	0x52002000
 80084b8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0304 	and.w	r3, r3, #4
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d010      	beq.n	80084ea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	691a      	ldr	r2, [r3, #16]
 80084cc:	4b3f      	ldr	r3, [pc, #252]	; (80085cc <HAL_RCC_ClockConfig+0x358>)
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d208      	bcs.n	80084ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80084d8:	4b3c      	ldr	r3, [pc, #240]	; (80085cc <HAL_RCC_ClockConfig+0x358>)
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	4939      	ldr	r1, [pc, #228]	; (80085cc <HAL_RCC_ClockConfig+0x358>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0308 	and.w	r3, r3, #8
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d010      	beq.n	8008518 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	695a      	ldr	r2, [r3, #20]
 80084fa:	4b34      	ldr	r3, [pc, #208]	; (80085cc <HAL_RCC_ClockConfig+0x358>)
 80084fc:	69db      	ldr	r3, [r3, #28]
 80084fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008502:	429a      	cmp	r2, r3
 8008504:	d208      	bcs.n	8008518 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008506:	4b31      	ldr	r3, [pc, #196]	; (80085cc <HAL_RCC_ClockConfig+0x358>)
 8008508:	69db      	ldr	r3, [r3, #28]
 800850a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	492e      	ldr	r1, [pc, #184]	; (80085cc <HAL_RCC_ClockConfig+0x358>)
 8008514:	4313      	orrs	r3, r2
 8008516:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0310 	and.w	r3, r3, #16
 8008520:	2b00      	cmp	r3, #0
 8008522:	d010      	beq.n	8008546 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	699a      	ldr	r2, [r3, #24]
 8008528:	4b28      	ldr	r3, [pc, #160]	; (80085cc <HAL_RCC_ClockConfig+0x358>)
 800852a:	69db      	ldr	r3, [r3, #28]
 800852c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008530:	429a      	cmp	r2, r3
 8008532:	d208      	bcs.n	8008546 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008534:	4b25      	ldr	r3, [pc, #148]	; (80085cc <HAL_RCC_ClockConfig+0x358>)
 8008536:	69db      	ldr	r3, [r3, #28]
 8008538:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	4922      	ldr	r1, [pc, #136]	; (80085cc <HAL_RCC_ClockConfig+0x358>)
 8008542:	4313      	orrs	r3, r2
 8008544:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0320 	and.w	r3, r3, #32
 800854e:	2b00      	cmp	r3, #0
 8008550:	d010      	beq.n	8008574 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	69da      	ldr	r2, [r3, #28]
 8008556:	4b1d      	ldr	r3, [pc, #116]	; (80085cc <HAL_RCC_ClockConfig+0x358>)
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800855e:	429a      	cmp	r2, r3
 8008560:	d208      	bcs.n	8008574 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008562:	4b1a      	ldr	r3, [pc, #104]	; (80085cc <HAL_RCC_ClockConfig+0x358>)
 8008564:	6a1b      	ldr	r3, [r3, #32]
 8008566:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	69db      	ldr	r3, [r3, #28]
 800856e:	4917      	ldr	r1, [pc, #92]	; (80085cc <HAL_RCC_ClockConfig+0x358>)
 8008570:	4313      	orrs	r3, r2
 8008572:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008574:	f000 f834 	bl	80085e0 <HAL_RCC_GetSysClockFreq>
 8008578:	4602      	mov	r2, r0
 800857a:	4b14      	ldr	r3, [pc, #80]	; (80085cc <HAL_RCC_ClockConfig+0x358>)
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	0a1b      	lsrs	r3, r3, #8
 8008580:	f003 030f 	and.w	r3, r3, #15
 8008584:	4912      	ldr	r1, [pc, #72]	; (80085d0 <HAL_RCC_ClockConfig+0x35c>)
 8008586:	5ccb      	ldrb	r3, [r1, r3]
 8008588:	f003 031f 	and.w	r3, r3, #31
 800858c:	fa22 f303 	lsr.w	r3, r2, r3
 8008590:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008592:	4b0e      	ldr	r3, [pc, #56]	; (80085cc <HAL_RCC_ClockConfig+0x358>)
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	f003 030f 	and.w	r3, r3, #15
 800859a:	4a0d      	ldr	r2, [pc, #52]	; (80085d0 <HAL_RCC_ClockConfig+0x35c>)
 800859c:	5cd3      	ldrb	r3, [r2, r3]
 800859e:	f003 031f 	and.w	r3, r3, #31
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	fa22 f303 	lsr.w	r3, r2, r3
 80085a8:	4a0a      	ldr	r2, [pc, #40]	; (80085d4 <HAL_RCC_ClockConfig+0x360>)
 80085aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80085ac:	4a0a      	ldr	r2, [pc, #40]	; (80085d8 <HAL_RCC_ClockConfig+0x364>)
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80085b2:	4b0a      	ldr	r3, [pc, #40]	; (80085dc <HAL_RCC_ClockConfig+0x368>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fb fdfc 	bl	80041b4 <HAL_InitTick>
 80085bc:	4603      	mov	r3, r0
 80085be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3718      	adds	r7, #24
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	58024400 	.word	0x58024400
 80085d0:	0800e744 	.word	0x0800e744
 80085d4:	24000004 	.word	0x24000004
 80085d8:	24000000 	.word	0x24000000
 80085dc:	24000008 	.word	0x24000008

080085e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b089      	sub	sp, #36	; 0x24
 80085e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085e6:	4bb3      	ldr	r3, [pc, #716]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085ee:	2b18      	cmp	r3, #24
 80085f0:	f200 8155 	bhi.w	800889e <HAL_RCC_GetSysClockFreq+0x2be>
 80085f4:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80085f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fa:	bf00      	nop
 80085fc:	08008661 	.word	0x08008661
 8008600:	0800889f 	.word	0x0800889f
 8008604:	0800889f 	.word	0x0800889f
 8008608:	0800889f 	.word	0x0800889f
 800860c:	0800889f 	.word	0x0800889f
 8008610:	0800889f 	.word	0x0800889f
 8008614:	0800889f 	.word	0x0800889f
 8008618:	0800889f 	.word	0x0800889f
 800861c:	08008687 	.word	0x08008687
 8008620:	0800889f 	.word	0x0800889f
 8008624:	0800889f 	.word	0x0800889f
 8008628:	0800889f 	.word	0x0800889f
 800862c:	0800889f 	.word	0x0800889f
 8008630:	0800889f 	.word	0x0800889f
 8008634:	0800889f 	.word	0x0800889f
 8008638:	0800889f 	.word	0x0800889f
 800863c:	0800868d 	.word	0x0800868d
 8008640:	0800889f 	.word	0x0800889f
 8008644:	0800889f 	.word	0x0800889f
 8008648:	0800889f 	.word	0x0800889f
 800864c:	0800889f 	.word	0x0800889f
 8008650:	0800889f 	.word	0x0800889f
 8008654:	0800889f 	.word	0x0800889f
 8008658:	0800889f 	.word	0x0800889f
 800865c:	08008693 	.word	0x08008693
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008660:	4b94      	ldr	r3, [pc, #592]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0320 	and.w	r3, r3, #32
 8008668:	2b00      	cmp	r3, #0
 800866a:	d009      	beq.n	8008680 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800866c:	4b91      	ldr	r3, [pc, #580]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	08db      	lsrs	r3, r3, #3
 8008672:	f003 0303 	and.w	r3, r3, #3
 8008676:	4a90      	ldr	r2, [pc, #576]	; (80088b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008678:	fa22 f303 	lsr.w	r3, r2, r3
 800867c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800867e:	e111      	b.n	80088a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008680:	4b8d      	ldr	r3, [pc, #564]	; (80088b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008682:	61bb      	str	r3, [r7, #24]
      break;
 8008684:	e10e      	b.n	80088a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008686:	4b8d      	ldr	r3, [pc, #564]	; (80088bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008688:	61bb      	str	r3, [r7, #24]
      break;
 800868a:	e10b      	b.n	80088a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800868c:	4b8c      	ldr	r3, [pc, #560]	; (80088c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800868e:	61bb      	str	r3, [r7, #24]
      break;
 8008690:	e108      	b.n	80088a4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008692:	4b88      	ldr	r3, [pc, #544]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008696:	f003 0303 	and.w	r3, r3, #3
 800869a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800869c:	4b85      	ldr	r3, [pc, #532]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800869e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a0:	091b      	lsrs	r3, r3, #4
 80086a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80086a8:	4b82      	ldr	r3, [pc, #520]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80086b2:	4b80      	ldr	r3, [pc, #512]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b6:	08db      	lsrs	r3, r3, #3
 80086b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	fb02 f303 	mul.w	r3, r2, r3
 80086c2:	ee07 3a90 	vmov	s15, r3
 80086c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f000 80e1 	beq.w	8008898 <HAL_RCC_GetSysClockFreq+0x2b8>
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	2b02      	cmp	r3, #2
 80086da:	f000 8083 	beq.w	80087e4 <HAL_RCC_GetSysClockFreq+0x204>
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	f200 80a1 	bhi.w	8008828 <HAL_RCC_GetSysClockFreq+0x248>
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d003      	beq.n	80086f4 <HAL_RCC_GetSysClockFreq+0x114>
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d056      	beq.n	80087a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80086f2:	e099      	b.n	8008828 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086f4:	4b6f      	ldr	r3, [pc, #444]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 0320 	and.w	r3, r3, #32
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d02d      	beq.n	800875c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008700:	4b6c      	ldr	r3, [pc, #432]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	08db      	lsrs	r3, r3, #3
 8008706:	f003 0303 	and.w	r3, r3, #3
 800870a:	4a6b      	ldr	r2, [pc, #428]	; (80088b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800870c:	fa22 f303 	lsr.w	r3, r2, r3
 8008710:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	ee07 3a90 	vmov	s15, r3
 8008718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	ee07 3a90 	vmov	s15, r3
 8008722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800872a:	4b62      	ldr	r3, [pc, #392]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800872c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008732:	ee07 3a90 	vmov	s15, r3
 8008736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800873a:	ed97 6a02 	vldr	s12, [r7, #8]
 800873e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80088c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800874a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800874e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008756:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800875a:	e087      	b.n	800886c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	ee07 3a90 	vmov	s15, r3
 8008762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008766:	eddf 6a58 	vldr	s13, [pc, #352]	; 80088c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800876a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800876e:	4b51      	ldr	r3, [pc, #324]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008776:	ee07 3a90 	vmov	s15, r3
 800877a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800877e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008782:	eddf 5a50 	vldr	s11, [pc, #320]	; 80088c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800878a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800878e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800879a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800879e:	e065      	b.n	800886c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80088cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80087ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087b2:	4b40      	ldr	r3, [pc, #256]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ba:	ee07 3a90 	vmov	s15, r3
 80087be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80087c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80088c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80087e2:	e043      	b.n	800886c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	ee07 3a90 	vmov	s15, r3
 80087ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80088d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80087f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087f6:	4b2f      	ldr	r3, [pc, #188]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087fe:	ee07 3a90 	vmov	s15, r3
 8008802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008806:	ed97 6a02 	vldr	s12, [r7, #8]
 800880a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80088c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800880e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800881a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800881e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008822:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008826:	e021      	b.n	800886c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	ee07 3a90 	vmov	s15, r3
 800882e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008832:	eddf 6a26 	vldr	s13, [pc, #152]	; 80088cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800883a:	4b1e      	ldr	r3, [pc, #120]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800883c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008842:	ee07 3a90 	vmov	s15, r3
 8008846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800884a:	ed97 6a02 	vldr	s12, [r7, #8]
 800884e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80088c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800885a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800885e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008866:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800886a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800886c:	4b11      	ldr	r3, [pc, #68]	; (80088b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800886e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008870:	0a5b      	lsrs	r3, r3, #9
 8008872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008876:	3301      	adds	r3, #1
 8008878:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	ee07 3a90 	vmov	s15, r3
 8008880:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008884:	edd7 6a07 	vldr	s13, [r7, #28]
 8008888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800888c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008890:	ee17 3a90 	vmov	r3, s15
 8008894:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008896:	e005      	b.n	80088a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008898:	2300      	movs	r3, #0
 800889a:	61bb      	str	r3, [r7, #24]
      break;
 800889c:	e002      	b.n	80088a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800889e:	4b07      	ldr	r3, [pc, #28]	; (80088bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80088a0:	61bb      	str	r3, [r7, #24]
      break;
 80088a2:	bf00      	nop
  }

  return sysclockfreq;
 80088a4:	69bb      	ldr	r3, [r7, #24]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3724      	adds	r7, #36	; 0x24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	58024400 	.word	0x58024400
 80088b8:	03d09000 	.word	0x03d09000
 80088bc:	003d0900 	.word	0x003d0900
 80088c0:	017d7840 	.word	0x017d7840
 80088c4:	46000000 	.word	0x46000000
 80088c8:	4c742400 	.word	0x4c742400
 80088cc:	4a742400 	.word	0x4a742400
 80088d0:	4bbebc20 	.word	0x4bbebc20

080088d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80088da:	f7ff fe81 	bl	80085e0 <HAL_RCC_GetSysClockFreq>
 80088de:	4602      	mov	r2, r0
 80088e0:	4b10      	ldr	r3, [pc, #64]	; (8008924 <HAL_RCC_GetHCLKFreq+0x50>)
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	0a1b      	lsrs	r3, r3, #8
 80088e6:	f003 030f 	and.w	r3, r3, #15
 80088ea:	490f      	ldr	r1, [pc, #60]	; (8008928 <HAL_RCC_GetHCLKFreq+0x54>)
 80088ec:	5ccb      	ldrb	r3, [r1, r3]
 80088ee:	f003 031f 	and.w	r3, r3, #31
 80088f2:	fa22 f303 	lsr.w	r3, r2, r3
 80088f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088f8:	4b0a      	ldr	r3, [pc, #40]	; (8008924 <HAL_RCC_GetHCLKFreq+0x50>)
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	f003 030f 	and.w	r3, r3, #15
 8008900:	4a09      	ldr	r2, [pc, #36]	; (8008928 <HAL_RCC_GetHCLKFreq+0x54>)
 8008902:	5cd3      	ldrb	r3, [r2, r3]
 8008904:	f003 031f 	and.w	r3, r3, #31
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	fa22 f303 	lsr.w	r3, r2, r3
 800890e:	4a07      	ldr	r2, [pc, #28]	; (800892c <HAL_RCC_GetHCLKFreq+0x58>)
 8008910:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008912:	4a07      	ldr	r2, [pc, #28]	; (8008930 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008918:	4b04      	ldr	r3, [pc, #16]	; (800892c <HAL_RCC_GetHCLKFreq+0x58>)
 800891a:	681b      	ldr	r3, [r3, #0]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	58024400 	.word	0x58024400
 8008928:	0800e744 	.word	0x0800e744
 800892c:	24000004 	.word	0x24000004
 8008930:	24000000 	.word	0x24000000

08008934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008938:	f7ff ffcc 	bl	80088d4 <HAL_RCC_GetHCLKFreq>
 800893c:	4602      	mov	r2, r0
 800893e:	4b06      	ldr	r3, [pc, #24]	; (8008958 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008940:	69db      	ldr	r3, [r3, #28]
 8008942:	091b      	lsrs	r3, r3, #4
 8008944:	f003 0307 	and.w	r3, r3, #7
 8008948:	4904      	ldr	r1, [pc, #16]	; (800895c <HAL_RCC_GetPCLK1Freq+0x28>)
 800894a:	5ccb      	ldrb	r3, [r1, r3]
 800894c:	f003 031f 	and.w	r3, r3, #31
 8008950:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008954:	4618      	mov	r0, r3
 8008956:	bd80      	pop	{r7, pc}
 8008958:	58024400 	.word	0x58024400
 800895c:	0800e744 	.word	0x0800e744

08008960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008964:	f7ff ffb6 	bl	80088d4 <HAL_RCC_GetHCLKFreq>
 8008968:	4602      	mov	r2, r0
 800896a:	4b06      	ldr	r3, [pc, #24]	; (8008984 <HAL_RCC_GetPCLK2Freq+0x24>)
 800896c:	69db      	ldr	r3, [r3, #28]
 800896e:	0a1b      	lsrs	r3, r3, #8
 8008970:	f003 0307 	and.w	r3, r3, #7
 8008974:	4904      	ldr	r1, [pc, #16]	; (8008988 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008976:	5ccb      	ldrb	r3, [r1, r3]
 8008978:	f003 031f 	and.w	r3, r3, #31
 800897c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008980:	4618      	mov	r0, r3
 8008982:	bd80      	pop	{r7, pc}
 8008984:	58024400 	.word	0x58024400
 8008988:	0800e744 	.word	0x0800e744

0800898c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800898c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008990:	b0c6      	sub	sp, #280	; 0x118
 8008992:	af00      	add	r7, sp, #0
 8008994:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008998:	2300      	movs	r3, #0
 800899a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800899e:	2300      	movs	r3, #0
 80089a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80089a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ac:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80089b0:	2500      	movs	r5, #0
 80089b2:	ea54 0305 	orrs.w	r3, r4, r5
 80089b6:	d049      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80089b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089c2:	d02f      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80089c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089c8:	d828      	bhi.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80089ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089ce:	d01a      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80089d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089d4:	d822      	bhi.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80089da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089de:	d007      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80089e0:	e01c      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089e2:	4bab      	ldr	r3, [pc, #684]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e6:	4aaa      	ldr	r2, [pc, #680]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80089ee:	e01a      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80089f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089f4:	3308      	adds	r3, #8
 80089f6:	2102      	movs	r1, #2
 80089f8:	4618      	mov	r0, r3
 80089fa:	f001 fc25 	bl	800a248 <RCCEx_PLL2_Config>
 80089fe:	4603      	mov	r3, r0
 8008a00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008a04:	e00f      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a0a:	3328      	adds	r3, #40	; 0x28
 8008a0c:	2102      	movs	r1, #2
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f001 fccc 	bl	800a3ac <RCCEx_PLL3_Config>
 8008a14:	4603      	mov	r3, r0
 8008a16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008a1a:	e004      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008a22:	e000      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10a      	bne.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008a2e:	4b98      	ldr	r3, [pc, #608]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a32:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a3c:	4a94      	ldr	r2, [pc, #592]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a3e:	430b      	orrs	r3, r1
 8008a40:	6513      	str	r3, [r2, #80]	; 0x50
 8008a42:	e003      	b.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a54:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008a58:	f04f 0900 	mov.w	r9, #0
 8008a5c:	ea58 0309 	orrs.w	r3, r8, r9
 8008a60:	d047      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	d82a      	bhi.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008a6c:	a201      	add	r2, pc, #4	; (adr r2, 8008a74 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a72:	bf00      	nop
 8008a74:	08008a89 	.word	0x08008a89
 8008a78:	08008a97 	.word	0x08008a97
 8008a7c:	08008aad 	.word	0x08008aad
 8008a80:	08008acb 	.word	0x08008acb
 8008a84:	08008acb 	.word	0x08008acb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a88:	4b81      	ldr	r3, [pc, #516]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8c:	4a80      	ldr	r2, [pc, #512]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a94:	e01a      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a9a:	3308      	adds	r3, #8
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f001 fbd2 	bl	800a248 <RCCEx_PLL2_Config>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008aaa:	e00f      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab0:	3328      	adds	r3, #40	; 0x28
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f001 fc79 	bl	800a3ac <RCCEx_PLL3_Config>
 8008aba:	4603      	mov	r3, r0
 8008abc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ac0:	e004      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008ac8:	e000      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008aca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008acc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10a      	bne.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ad4:	4b6e      	ldr	r3, [pc, #440]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ad8:	f023 0107 	bic.w	r1, r3, #7
 8008adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ae2:	4a6b      	ldr	r2, [pc, #428]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ae4:	430b      	orrs	r3, r1
 8008ae6:	6513      	str	r3, [r2, #80]	; 0x50
 8008ae8:	e003      	b.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008aee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afa:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8008afe:	f04f 0b00 	mov.w	fp, #0
 8008b02:	ea5a 030b 	orrs.w	r3, sl, fp
 8008b06:	d05b      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008b10:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008b14:	d03b      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008b16:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008b1a:	d834      	bhi.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008b1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b20:	d037      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008b22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b26:	d82e      	bhi.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008b28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b2c:	d033      	beq.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008b2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b32:	d828      	bhi.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b38:	d01a      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b3e:	d822      	bhi.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d003      	beq.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008b44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b48:	d007      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008b4a:	e01c      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b4c:	4b50      	ldr	r3, [pc, #320]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b50:	4a4f      	ldr	r2, [pc, #316]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b58:	e01e      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b5e:	3308      	adds	r3, #8
 8008b60:	2100      	movs	r1, #0
 8008b62:	4618      	mov	r0, r3
 8008b64:	f001 fb70 	bl	800a248 <RCCEx_PLL2_Config>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008b6e:	e013      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b74:	3328      	adds	r3, #40	; 0x28
 8008b76:	2100      	movs	r1, #0
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f001 fc17 	bl	800a3ac <RCCEx_PLL3_Config>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b84:	e008      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008b8c:	e004      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008b8e:	bf00      	nop
 8008b90:	e002      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008b92:	bf00      	nop
 8008b94:	e000      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008b96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10b      	bne.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008ba0:	4b3b      	ldr	r3, [pc, #236]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ba4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008bb0:	4a37      	ldr	r2, [pc, #220]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008bb2:	430b      	orrs	r3, r1
 8008bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8008bb6:	e003      	b.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008bbc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008bcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008bd6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008bda:	460b      	mov	r3, r1
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	d05d      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008be4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008be8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008bec:	d03b      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008bee:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008bf2:	d834      	bhi.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008bf4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bf8:	d037      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008bfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bfe:	d82e      	bhi.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008c00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c04:	d033      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008c06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c0a:	d828      	bhi.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008c0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c10:	d01a      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008c12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c16:	d822      	bhi.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c20:	d007      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008c22:	e01c      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c24:	4b1a      	ldr	r3, [pc, #104]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c28:	4a19      	ldr	r2, [pc, #100]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c30:	e01e      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c36:	3308      	adds	r3, #8
 8008c38:	2100      	movs	r1, #0
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f001 fb04 	bl	800a248 <RCCEx_PLL2_Config>
 8008c40:	4603      	mov	r3, r0
 8008c42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008c46:	e013      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c4c:	3328      	adds	r3, #40	; 0x28
 8008c4e:	2100      	movs	r1, #0
 8008c50:	4618      	mov	r0, r3
 8008c52:	f001 fbab 	bl	800a3ac <RCCEx_PLL3_Config>
 8008c56:	4603      	mov	r3, r0
 8008c58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c5c:	e008      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008c64:	e004      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008c66:	bf00      	nop
 8008c68:	e002      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008c6a:	bf00      	nop
 8008c6c:	e000      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008c6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10d      	bne.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008c78:	4b05      	ldr	r3, [pc, #20]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c7c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008c88:	4a01      	ldr	r2, [pc, #4]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c8a:	430b      	orrs	r3, r1
 8008c8c:	6593      	str	r3, [r2, #88]	; 0x58
 8008c8e:	e005      	b.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008c90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008ca8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008cac:	2300      	movs	r3, #0
 8008cae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008cb2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	d03a      	beq.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cc2:	2b30      	cmp	r3, #48	; 0x30
 8008cc4:	d01f      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008cc6:	2b30      	cmp	r3, #48	; 0x30
 8008cc8:	d819      	bhi.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008cca:	2b20      	cmp	r3, #32
 8008ccc:	d00c      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008cce:	2b20      	cmp	r3, #32
 8008cd0:	d815      	bhi.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d019      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008cd6:	2b10      	cmp	r3, #16
 8008cd8:	d111      	bne.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cda:	4baa      	ldr	r3, [pc, #680]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cde:	4aa9      	ldr	r2, [pc, #676]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008ce6:	e011      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cec:	3308      	adds	r3, #8
 8008cee:	2102      	movs	r1, #2
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f001 faa9 	bl	800a248 <RCCEx_PLL2_Config>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008cfc:	e006      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008d04:	e002      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008d06:	bf00      	nop
 8008d08:	e000      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10a      	bne.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008d14:	4b9b      	ldr	r3, [pc, #620]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d18:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d22:	4a98      	ldr	r2, [pc, #608]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d24:	430b      	orrs	r3, r1
 8008d26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d28:	e003      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008d2e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008d3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d42:	2300      	movs	r3, #0
 8008d44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d48:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	d051      	beq.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d5c:	d035      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8008d5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d62:	d82e      	bhi.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008d64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d68:	d031      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x442>
 8008d6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d6e:	d828      	bhi.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d74:	d01a      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d7a:	d822      	bhi.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d003      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d84:	d007      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008d86:	e01c      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d88:	4b7e      	ldr	r3, [pc, #504]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8c:	4a7d      	ldr	r2, [pc, #500]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008d94:	e01c      	b.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d9a:	3308      	adds	r3, #8
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f001 fa52 	bl	800a248 <RCCEx_PLL2_Config>
 8008da4:	4603      	mov	r3, r0
 8008da6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008daa:	e011      	b.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008db0:	3328      	adds	r3, #40	; 0x28
 8008db2:	2100      	movs	r1, #0
 8008db4:	4618      	mov	r0, r3
 8008db6:	f001 faf9 	bl	800a3ac <RCCEx_PLL3_Config>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008dc0:	e006      	b.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008dc8:	e002      	b.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008dca:	bf00      	nop
 8008dcc:	e000      	b.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008dce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10a      	bne.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008dd8:	4b6a      	ldr	r3, [pc, #424]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ddc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008de6:	4a67      	ldr	r2, [pc, #412]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008de8:	430b      	orrs	r3, r1
 8008dea:	6513      	str	r3, [r2, #80]	; 0x50
 8008dec:	e003      	b.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008df2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008e02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e06:	2300      	movs	r3, #0
 8008e08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e0c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008e10:	460b      	mov	r3, r1
 8008e12:	4313      	orrs	r3, r2
 8008e14:	d053      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e20:	d033      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8008e22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e26:	d82c      	bhi.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008e28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e2c:	d02f      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8008e2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e32:	d826      	bhi.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008e34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e38:	d02b      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008e3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e3e:	d820      	bhi.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008e40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e44:	d012      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8008e46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e4a:	d81a      	bhi.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d022      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e54:	d115      	bne.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e5a:	3308      	adds	r3, #8
 8008e5c:	2101      	movs	r1, #1
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f001 f9f2 	bl	800a248 <RCCEx_PLL2_Config>
 8008e64:	4603      	mov	r3, r0
 8008e66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008e6a:	e015      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e70:	3328      	adds	r3, #40	; 0x28
 8008e72:	2101      	movs	r1, #1
 8008e74:	4618      	mov	r0, r3
 8008e76:	f001 fa99 	bl	800a3ac <RCCEx_PLL3_Config>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008e80:	e00a      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008e88:	e006      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008e8a:	bf00      	nop
 8008e8c:	e004      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008e8e:	bf00      	nop
 8008e90:	e002      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008e92:	bf00      	nop
 8008e94:	e000      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008e96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10a      	bne.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008ea0:	4b38      	ldr	r3, [pc, #224]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ea4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eae:	4a35      	ldr	r2, [pc, #212]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008eb0:	430b      	orrs	r3, r1
 8008eb2:	6513      	str	r3, [r2, #80]	; 0x50
 8008eb4:	e003      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008eba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008eca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ece:	2300      	movs	r3, #0
 8008ed0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008ed4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008ed8:	460b      	mov	r3, r1
 8008eda:	4313      	orrs	r3, r2
 8008edc:	d058      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ee2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008eea:	d033      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008eec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ef0:	d82c      	bhi.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ef6:	d02f      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008efc:	d826      	bhi.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008efe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f02:	d02b      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008f04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f08:	d820      	bhi.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008f0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f0e:	d012      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8008f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f14:	d81a      	bhi.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d022      	beq.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008f1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f1e:	d115      	bne.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f24:	3308      	adds	r3, #8
 8008f26:	2101      	movs	r1, #1
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f001 f98d 	bl	800a248 <RCCEx_PLL2_Config>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008f34:	e015      	b.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f3a:	3328      	adds	r3, #40	; 0x28
 8008f3c:	2101      	movs	r1, #1
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f001 fa34 	bl	800a3ac <RCCEx_PLL3_Config>
 8008f44:	4603      	mov	r3, r0
 8008f46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008f4a:	e00a      	b.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008f52:	e006      	b.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008f54:	bf00      	nop
 8008f56:	e004      	b.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008f58:	bf00      	nop
 8008f5a:	e002      	b.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008f5c:	bf00      	nop
 8008f5e:	e000      	b.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10e      	bne.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008f6a:	4b06      	ldr	r3, [pc, #24]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f6e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008f7a:	4a02      	ldr	r2, [pc, #8]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f7c:	430b      	orrs	r3, r1
 8008f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8008f80:	e006      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008f82:	bf00      	nop
 8008f84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f98:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008fa6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008faa:	460b      	mov	r3, r1
 8008fac:	4313      	orrs	r3, r2
 8008fae:	d037      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fba:	d00e      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fc0:	d816      	bhi.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d018      	beq.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008fc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fca:	d111      	bne.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fcc:	4bc4      	ldr	r3, [pc, #784]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd0:	4ac3      	ldr	r2, [pc, #780]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008fd8:	e00f      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fde:	3308      	adds	r3, #8
 8008fe0:	2101      	movs	r1, #1
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f001 f930 	bl	800a248 <RCCEx_PLL2_Config>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008fee:	e004      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008ff6:	e000      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ffa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10a      	bne.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009002:	4bb7      	ldr	r3, [pc, #732]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009006:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800900a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800900e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009010:	4ab3      	ldr	r2, [pc, #716]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009012:	430b      	orrs	r3, r1
 8009014:	6513      	str	r3, [r2, #80]	; 0x50
 8009016:	e003      	b.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009018:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800901c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800902c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009030:	2300      	movs	r3, #0
 8009032:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009036:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800903a:	460b      	mov	r3, r1
 800903c:	4313      	orrs	r3, r2
 800903e:	d039      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009046:	2b03      	cmp	r3, #3
 8009048:	d81c      	bhi.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800904a:	a201      	add	r2, pc, #4	; (adr r2, 8009050 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800904c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009050:	0800908d 	.word	0x0800908d
 8009054:	08009061 	.word	0x08009061
 8009058:	0800906f 	.word	0x0800906f
 800905c:	0800908d 	.word	0x0800908d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009060:	4b9f      	ldr	r3, [pc, #636]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009064:	4a9e      	ldr	r2, [pc, #632]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800906a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800906c:	e00f      	b.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800906e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009072:	3308      	adds	r3, #8
 8009074:	2102      	movs	r1, #2
 8009076:	4618      	mov	r0, r3
 8009078:	f001 f8e6 	bl	800a248 <RCCEx_PLL2_Config>
 800907c:	4603      	mov	r3, r0
 800907e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009082:	e004      	b.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800908a:	e000      	b.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800908c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800908e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10a      	bne.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009096:	4b92      	ldr	r3, [pc, #584]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800909a:	f023 0103 	bic.w	r1, r3, #3
 800909e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090a4:	4a8e      	ldr	r2, [pc, #568]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090a6:	430b      	orrs	r3, r1
 80090a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80090aa:	e003      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80090b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80090b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090bc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80090c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090c4:	2300      	movs	r3, #0
 80090c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80090ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80090ce:	460b      	mov	r3, r1
 80090d0:	4313      	orrs	r3, r2
 80090d2:	f000 8099 	beq.w	8009208 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80090d6:	4b83      	ldr	r3, [pc, #524]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a82      	ldr	r2, [pc, #520]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80090dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80090e2:	f7fb f8b1 	bl	8004248 <HAL_GetTick>
 80090e6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090ea:	e00b      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090ec:	f7fb f8ac 	bl	8004248 <HAL_GetTick>
 80090f0:	4602      	mov	r2, r0
 80090f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	2b64      	cmp	r3, #100	; 0x64
 80090fa:	d903      	bls.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80090fc:	2303      	movs	r3, #3
 80090fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009102:	e005      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009104:	4b77      	ldr	r3, [pc, #476]	; (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800910c:	2b00      	cmp	r3, #0
 800910e:	d0ed      	beq.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009110:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009114:	2b00      	cmp	r3, #0
 8009116:	d173      	bne.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009118:	4b71      	ldr	r3, [pc, #452]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800911a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800911c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009120:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009124:	4053      	eors	r3, r2
 8009126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800912a:	2b00      	cmp	r3, #0
 800912c:	d015      	beq.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800912e:	4b6c      	ldr	r3, [pc, #432]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009136:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800913a:	4b69      	ldr	r3, [pc, #420]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800913c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800913e:	4a68      	ldr	r2, [pc, #416]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009144:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009146:	4b66      	ldr	r3, [pc, #408]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800914a:	4a65      	ldr	r2, [pc, #404]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800914c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009150:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009152:	4a63      	ldr	r2, [pc, #396]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009158:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800915a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800915e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009166:	d118      	bne.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009168:	f7fb f86e 	bl	8004248 <HAL_GetTick>
 800916c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009170:	e00d      	b.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009172:	f7fb f869 	bl	8004248 <HAL_GetTick>
 8009176:	4602      	mov	r2, r0
 8009178:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800917c:	1ad2      	subs	r2, r2, r3
 800917e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009182:	429a      	cmp	r2, r3
 8009184:	d903      	bls.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009186:	2303      	movs	r3, #3
 8009188:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800918c:	e005      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800918e:	4b54      	ldr	r3, [pc, #336]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009192:	f003 0302 	and.w	r3, r3, #2
 8009196:	2b00      	cmp	r3, #0
 8009198:	d0eb      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800919a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d129      	bne.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80091aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091b2:	d10e      	bne.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80091b4:	4b4a      	ldr	r3, [pc, #296]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091b6:	691b      	ldr	r3, [r3, #16]
 80091b8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80091bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80091c4:	091a      	lsrs	r2, r3, #4
 80091c6:	4b48      	ldr	r3, [pc, #288]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80091c8:	4013      	ands	r3, r2
 80091ca:	4a45      	ldr	r2, [pc, #276]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091cc:	430b      	orrs	r3, r1
 80091ce:	6113      	str	r3, [r2, #16]
 80091d0:	e005      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x852>
 80091d2:	4b43      	ldr	r3, [pc, #268]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	4a42      	ldr	r2, [pc, #264]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80091dc:	6113      	str	r3, [r2, #16]
 80091de:	4b40      	ldr	r3, [pc, #256]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091e0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80091e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80091ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091ee:	4a3c      	ldr	r2, [pc, #240]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091f0:	430b      	orrs	r3, r1
 80091f2:	6713      	str	r3, [r2, #112]	; 0x70
 80091f4:	e008      	b.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80091f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80091fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80091fe:	e003      	b.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009200:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009204:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800920c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009210:	f002 0301 	and.w	r3, r2, #1
 8009214:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009218:	2300      	movs	r3, #0
 800921a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800921e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009222:	460b      	mov	r3, r1
 8009224:	4313      	orrs	r3, r2
 8009226:	f000 808f 	beq.w	8009348 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800922a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800922e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009230:	2b28      	cmp	r3, #40	; 0x28
 8009232:	d871      	bhi.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009234:	a201      	add	r2, pc, #4	; (adr r2, 800923c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800923a:	bf00      	nop
 800923c:	08009321 	.word	0x08009321
 8009240:	08009319 	.word	0x08009319
 8009244:	08009319 	.word	0x08009319
 8009248:	08009319 	.word	0x08009319
 800924c:	08009319 	.word	0x08009319
 8009250:	08009319 	.word	0x08009319
 8009254:	08009319 	.word	0x08009319
 8009258:	08009319 	.word	0x08009319
 800925c:	080092ed 	.word	0x080092ed
 8009260:	08009319 	.word	0x08009319
 8009264:	08009319 	.word	0x08009319
 8009268:	08009319 	.word	0x08009319
 800926c:	08009319 	.word	0x08009319
 8009270:	08009319 	.word	0x08009319
 8009274:	08009319 	.word	0x08009319
 8009278:	08009319 	.word	0x08009319
 800927c:	08009303 	.word	0x08009303
 8009280:	08009319 	.word	0x08009319
 8009284:	08009319 	.word	0x08009319
 8009288:	08009319 	.word	0x08009319
 800928c:	08009319 	.word	0x08009319
 8009290:	08009319 	.word	0x08009319
 8009294:	08009319 	.word	0x08009319
 8009298:	08009319 	.word	0x08009319
 800929c:	08009321 	.word	0x08009321
 80092a0:	08009319 	.word	0x08009319
 80092a4:	08009319 	.word	0x08009319
 80092a8:	08009319 	.word	0x08009319
 80092ac:	08009319 	.word	0x08009319
 80092b0:	08009319 	.word	0x08009319
 80092b4:	08009319 	.word	0x08009319
 80092b8:	08009319 	.word	0x08009319
 80092bc:	08009321 	.word	0x08009321
 80092c0:	08009319 	.word	0x08009319
 80092c4:	08009319 	.word	0x08009319
 80092c8:	08009319 	.word	0x08009319
 80092cc:	08009319 	.word	0x08009319
 80092d0:	08009319 	.word	0x08009319
 80092d4:	08009319 	.word	0x08009319
 80092d8:	08009319 	.word	0x08009319
 80092dc:	08009321 	.word	0x08009321
 80092e0:	58024400 	.word	0x58024400
 80092e4:	58024800 	.word	0x58024800
 80092e8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092f0:	3308      	adds	r3, #8
 80092f2:	2101      	movs	r1, #1
 80092f4:	4618      	mov	r0, r3
 80092f6:	f000 ffa7 	bl	800a248 <RCCEx_PLL2_Config>
 80092fa:	4603      	mov	r3, r0
 80092fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009300:	e00f      	b.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009306:	3328      	adds	r3, #40	; 0x28
 8009308:	2101      	movs	r1, #1
 800930a:	4618      	mov	r0, r3
 800930c:	f001 f84e 	bl	800a3ac <RCCEx_PLL3_Config>
 8009310:	4603      	mov	r3, r0
 8009312:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009316:	e004      	b.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800931e:	e000      	b.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009322:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009326:	2b00      	cmp	r3, #0
 8009328:	d10a      	bne.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800932a:	4bbf      	ldr	r3, [pc, #764]	; (8009628 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800932c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800932e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009338:	4abb      	ldr	r2, [pc, #748]	; (8009628 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800933a:	430b      	orrs	r3, r1
 800933c:	6553      	str	r3, [r2, #84]	; 0x54
 800933e:	e003      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009340:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009344:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800934c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009350:	f002 0302 	and.w	r3, r2, #2
 8009354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009358:	2300      	movs	r3, #0
 800935a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800935e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009362:	460b      	mov	r3, r1
 8009364:	4313      	orrs	r3, r2
 8009366:	d041      	beq.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800936c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800936e:	2b05      	cmp	r3, #5
 8009370:	d824      	bhi.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009372:	a201      	add	r2, pc, #4	; (adr r2, 8009378 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009378:	080093c5 	.word	0x080093c5
 800937c:	08009391 	.word	0x08009391
 8009380:	080093a7 	.word	0x080093a7
 8009384:	080093c5 	.word	0x080093c5
 8009388:	080093c5 	.word	0x080093c5
 800938c:	080093c5 	.word	0x080093c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009394:	3308      	adds	r3, #8
 8009396:	2101      	movs	r1, #1
 8009398:	4618      	mov	r0, r3
 800939a:	f000 ff55 	bl	800a248 <RCCEx_PLL2_Config>
 800939e:	4603      	mov	r3, r0
 80093a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80093a4:	e00f      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80093a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093aa:	3328      	adds	r3, #40	; 0x28
 80093ac:	2101      	movs	r1, #1
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 fffc 	bl	800a3ac <RCCEx_PLL3_Config>
 80093b4:	4603      	mov	r3, r0
 80093b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80093ba:	e004      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80093c2:	e000      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80093c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10a      	bne.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80093ce:	4b96      	ldr	r3, [pc, #600]	; (8009628 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80093d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d2:	f023 0107 	bic.w	r1, r3, #7
 80093d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093dc:	4a92      	ldr	r2, [pc, #584]	; (8009628 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80093de:	430b      	orrs	r3, r1
 80093e0:	6553      	str	r3, [r2, #84]	; 0x54
 80093e2:	e003      	b.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80093e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80093ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f4:	f002 0304 	and.w	r3, r2, #4
 80093f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80093fc:	2300      	movs	r3, #0
 80093fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009402:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009406:	460b      	mov	r3, r1
 8009408:	4313      	orrs	r3, r2
 800940a:	d044      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800940c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009414:	2b05      	cmp	r3, #5
 8009416:	d825      	bhi.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009418:	a201      	add	r2, pc, #4	; (adr r2, 8009420 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800941a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941e:	bf00      	nop
 8009420:	0800946d 	.word	0x0800946d
 8009424:	08009439 	.word	0x08009439
 8009428:	0800944f 	.word	0x0800944f
 800942c:	0800946d 	.word	0x0800946d
 8009430:	0800946d 	.word	0x0800946d
 8009434:	0800946d 	.word	0x0800946d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800943c:	3308      	adds	r3, #8
 800943e:	2101      	movs	r1, #1
 8009440:	4618      	mov	r0, r3
 8009442:	f000 ff01 	bl	800a248 <RCCEx_PLL2_Config>
 8009446:	4603      	mov	r3, r0
 8009448:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800944c:	e00f      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800944e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009452:	3328      	adds	r3, #40	; 0x28
 8009454:	2101      	movs	r1, #1
 8009456:	4618      	mov	r0, r3
 8009458:	f000 ffa8 	bl	800a3ac <RCCEx_PLL3_Config>
 800945c:	4603      	mov	r3, r0
 800945e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009462:	e004      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800946a:	e000      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800946c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800946e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10b      	bne.n	800948e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009476:	4b6c      	ldr	r3, [pc, #432]	; (8009628 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800947a:	f023 0107 	bic.w	r1, r3, #7
 800947e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009486:	4a68      	ldr	r2, [pc, #416]	; (8009628 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009488:	430b      	orrs	r3, r1
 800948a:	6593      	str	r3, [r2, #88]	; 0x58
 800948c:	e003      	b.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800948e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009492:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800949a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949e:	f002 0320 	and.w	r3, r2, #32
 80094a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80094a6:	2300      	movs	r3, #0
 80094a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80094ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80094b0:	460b      	mov	r3, r1
 80094b2:	4313      	orrs	r3, r2
 80094b4:	d055      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80094b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094c2:	d033      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80094c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094c8:	d82c      	bhi.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80094ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ce:	d02f      	beq.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80094d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094d4:	d826      	bhi.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80094d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094da:	d02b      	beq.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80094dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094e0:	d820      	bhi.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80094e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094e6:	d012      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80094e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094ec:	d81a      	bhi.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d022      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80094f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094f6:	d115      	bne.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094fc:	3308      	adds	r3, #8
 80094fe:	2100      	movs	r1, #0
 8009500:	4618      	mov	r0, r3
 8009502:	f000 fea1 	bl	800a248 <RCCEx_PLL2_Config>
 8009506:	4603      	mov	r3, r0
 8009508:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800950c:	e015      	b.n	800953a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800950e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009512:	3328      	adds	r3, #40	; 0x28
 8009514:	2102      	movs	r1, #2
 8009516:	4618      	mov	r0, r3
 8009518:	f000 ff48 	bl	800a3ac <RCCEx_PLL3_Config>
 800951c:	4603      	mov	r3, r0
 800951e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009522:	e00a      	b.n	800953a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800952a:	e006      	b.n	800953a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800952c:	bf00      	nop
 800952e:	e004      	b.n	800953a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009530:	bf00      	nop
 8009532:	e002      	b.n	800953a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009534:	bf00      	nop
 8009536:	e000      	b.n	800953a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800953a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10b      	bne.n	800955a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009542:	4b39      	ldr	r3, [pc, #228]	; (8009628 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009546:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800954a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800954e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009552:	4a35      	ldr	r2, [pc, #212]	; (8009628 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009554:	430b      	orrs	r3, r1
 8009556:	6553      	str	r3, [r2, #84]	; 0x54
 8009558:	e003      	b.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800955a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800955e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800956e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009572:	2300      	movs	r3, #0
 8009574:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009578:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800957c:	460b      	mov	r3, r1
 800957e:	4313      	orrs	r3, r2
 8009580:	d058      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800958a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800958e:	d033      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009590:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009594:	d82c      	bhi.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800959a:	d02f      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800959c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095a0:	d826      	bhi.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80095a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80095a6:	d02b      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80095a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80095ac:	d820      	bhi.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80095ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095b2:	d012      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80095b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095b8:	d81a      	bhi.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d022      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80095be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095c2:	d115      	bne.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095c8:	3308      	adds	r3, #8
 80095ca:	2100      	movs	r1, #0
 80095cc:	4618      	mov	r0, r3
 80095ce:	f000 fe3b 	bl	800a248 <RCCEx_PLL2_Config>
 80095d2:	4603      	mov	r3, r0
 80095d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80095d8:	e015      	b.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80095da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095de:	3328      	adds	r3, #40	; 0x28
 80095e0:	2102      	movs	r1, #2
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 fee2 	bl	800a3ac <RCCEx_PLL3_Config>
 80095e8:	4603      	mov	r3, r0
 80095ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80095ee:	e00a      	b.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80095f6:	e006      	b.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80095f8:	bf00      	nop
 80095fa:	e004      	b.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80095fc:	bf00      	nop
 80095fe:	e002      	b.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009600:	bf00      	nop
 8009602:	e000      	b.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009604:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009606:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800960a:	2b00      	cmp	r3, #0
 800960c:	d10e      	bne.n	800962c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800960e:	4b06      	ldr	r3, [pc, #24]	; (8009628 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009612:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800961a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800961e:	4a02      	ldr	r2, [pc, #8]	; (8009628 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009620:	430b      	orrs	r3, r1
 8009622:	6593      	str	r3, [r2, #88]	; 0x58
 8009624:	e006      	b.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009626:	bf00      	nop
 8009628:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800962c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009630:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009640:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009644:	2300      	movs	r3, #0
 8009646:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800964a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800964e:	460b      	mov	r3, r1
 8009650:	4313      	orrs	r3, r2
 8009652:	d055      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009658:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800965c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009660:	d033      	beq.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009662:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009666:	d82c      	bhi.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800966c:	d02f      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800966e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009672:	d826      	bhi.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009674:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009678:	d02b      	beq.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800967a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800967e:	d820      	bhi.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009684:	d012      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8009686:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800968a:	d81a      	bhi.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800968c:	2b00      	cmp	r3, #0
 800968e:	d022      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009694:	d115      	bne.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800969a:	3308      	adds	r3, #8
 800969c:	2100      	movs	r1, #0
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 fdd2 	bl	800a248 <RCCEx_PLL2_Config>
 80096a4:	4603      	mov	r3, r0
 80096a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80096aa:	e015      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096b0:	3328      	adds	r3, #40	; 0x28
 80096b2:	2102      	movs	r1, #2
 80096b4:	4618      	mov	r0, r3
 80096b6:	f000 fe79 	bl	800a3ac <RCCEx_PLL3_Config>
 80096ba:	4603      	mov	r3, r0
 80096bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80096c0:	e00a      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80096c8:	e006      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80096ca:	bf00      	nop
 80096cc:	e004      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80096ce:	bf00      	nop
 80096d0:	e002      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80096d2:	bf00      	nop
 80096d4:	e000      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80096d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10b      	bne.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80096e0:	4ba0      	ldr	r3, [pc, #640]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096e4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80096e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80096f0:	4a9c      	ldr	r2, [pc, #624]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096f2:	430b      	orrs	r3, r1
 80096f4:	6593      	str	r3, [r2, #88]	; 0x58
 80096f6:	e003      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009708:	f002 0308 	and.w	r3, r2, #8
 800970c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009710:	2300      	movs	r3, #0
 8009712:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009716:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800971a:	460b      	mov	r3, r1
 800971c:	4313      	orrs	r3, r2
 800971e:	d01e      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800972c:	d10c      	bne.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800972e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009732:	3328      	adds	r3, #40	; 0x28
 8009734:	2102      	movs	r1, #2
 8009736:	4618      	mov	r0, r3
 8009738:	f000 fe38 	bl	800a3ac <RCCEx_PLL3_Config>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d002      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009748:	4b86      	ldr	r3, [pc, #536]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800974a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800974c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009758:	4a82      	ldr	r2, [pc, #520]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800975a:	430b      	orrs	r3, r1
 800975c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800975e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009766:	f002 0310 	and.w	r3, r2, #16
 800976a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800976e:	2300      	movs	r3, #0
 8009770:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009774:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009778:	460b      	mov	r3, r1
 800977a:	4313      	orrs	r3, r2
 800977c:	d01e      	beq.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800977e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800978a:	d10c      	bne.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800978c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009790:	3328      	adds	r3, #40	; 0x28
 8009792:	2102      	movs	r1, #2
 8009794:	4618      	mov	r0, r3
 8009796:	f000 fe09 	bl	800a3ac <RCCEx_PLL3_Config>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d002      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80097a6:	4b6f      	ldr	r3, [pc, #444]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80097a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80097ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80097b6:	4a6b      	ldr	r2, [pc, #428]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80097b8:	430b      	orrs	r3, r1
 80097ba:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80097bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80097c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80097ca:	2300      	movs	r3, #0
 80097cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80097ce:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80097d2:	460b      	mov	r3, r1
 80097d4:	4313      	orrs	r3, r2
 80097d6:	d03e      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80097d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80097e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097e4:	d022      	beq.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80097e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097ea:	d81b      	bhi.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d003      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80097f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097f4:	d00b      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80097f6:	e015      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097fc:	3308      	adds	r3, #8
 80097fe:	2100      	movs	r1, #0
 8009800:	4618      	mov	r0, r3
 8009802:	f000 fd21 	bl	800a248 <RCCEx_PLL2_Config>
 8009806:	4603      	mov	r3, r0
 8009808:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800980c:	e00f      	b.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800980e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009812:	3328      	adds	r3, #40	; 0x28
 8009814:	2102      	movs	r1, #2
 8009816:	4618      	mov	r0, r3
 8009818:	f000 fdc8 	bl	800a3ac <RCCEx_PLL3_Config>
 800981c:	4603      	mov	r3, r0
 800981e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009822:	e004      	b.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800982a:	e000      	b.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800982c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800982e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009832:	2b00      	cmp	r3, #0
 8009834:	d10b      	bne.n	800984e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009836:	4b4b      	ldr	r3, [pc, #300]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800983a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800983e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009842:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009846:	4a47      	ldr	r2, [pc, #284]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009848:	430b      	orrs	r3, r1
 800984a:	6593      	str	r3, [r2, #88]	; 0x58
 800984c:	e003      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800984e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009852:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009862:	673b      	str	r3, [r7, #112]	; 0x70
 8009864:	2300      	movs	r3, #0
 8009866:	677b      	str	r3, [r7, #116]	; 0x74
 8009868:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800986c:	460b      	mov	r3, r1
 800986e:	4313      	orrs	r3, r2
 8009870:	d03b      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800987a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800987e:	d01f      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009880:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009884:	d818      	bhi.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800988a:	d003      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800988c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009890:	d007      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009892:	e011      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009894:	4b33      	ldr	r3, [pc, #204]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009898:	4a32      	ldr	r2, [pc, #200]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800989a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800989e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80098a0:	e00f      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098a6:	3328      	adds	r3, #40	; 0x28
 80098a8:	2101      	movs	r1, #1
 80098aa:	4618      	mov	r0, r3
 80098ac:	f000 fd7e 	bl	800a3ac <RCCEx_PLL3_Config>
 80098b0:	4603      	mov	r3, r0
 80098b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80098b6:	e004      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80098be:	e000      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80098c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10b      	bne.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80098ca:	4b26      	ldr	r3, [pc, #152]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80098cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80098d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098da:	4a22      	ldr	r2, [pc, #136]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80098dc:	430b      	orrs	r3, r1
 80098de:	6553      	str	r3, [r2, #84]	; 0x54
 80098e0:	e003      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80098e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80098ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80098f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80098f8:	2300      	movs	r3, #0
 80098fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80098fc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009900:	460b      	mov	r3, r1
 8009902:	4313      	orrs	r3, r2
 8009904:	d034      	beq.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800990a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800990c:	2b00      	cmp	r3, #0
 800990e:	d003      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009914:	d007      	beq.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009916:	e011      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009918:	4b12      	ldr	r3, [pc, #72]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800991a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991c:	4a11      	ldr	r2, [pc, #68]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800991e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009922:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009924:	e00e      	b.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800992a:	3308      	adds	r3, #8
 800992c:	2102      	movs	r1, #2
 800992e:	4618      	mov	r0, r3
 8009930:	f000 fc8a 	bl	800a248 <RCCEx_PLL2_Config>
 8009934:	4603      	mov	r3, r0
 8009936:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800993a:	e003      	b.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009944:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009948:	2b00      	cmp	r3, #0
 800994a:	d10d      	bne.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800994c:	4b05      	ldr	r3, [pc, #20]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800994e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009950:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800995a:	4a02      	ldr	r2, [pc, #8]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800995c:	430b      	orrs	r3, r1
 800995e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009960:	e006      	b.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009962:	bf00      	nop
 8009964:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009968:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800996c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009978:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800997c:	663b      	str	r3, [r7, #96]	; 0x60
 800997e:	2300      	movs	r3, #0
 8009980:	667b      	str	r3, [r7, #100]	; 0x64
 8009982:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009986:	460b      	mov	r3, r1
 8009988:	4313      	orrs	r3, r2
 800998a:	d00c      	beq.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800998c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009990:	3328      	adds	r3, #40	; 0x28
 8009992:	2102      	movs	r1, #2
 8009994:	4618      	mov	r0, r3
 8009996:	f000 fd09 	bl	800a3ac <RCCEx_PLL3_Config>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d002      	beq.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80099a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80099b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80099b4:	2300      	movs	r3, #0
 80099b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099b8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80099bc:	460b      	mov	r3, r1
 80099be:	4313      	orrs	r3, r2
 80099c0:	d036      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80099c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099cc:	d018      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80099ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099d2:	d811      	bhi.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80099d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099d8:	d014      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80099da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099de:	d80b      	bhi.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d011      	beq.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80099e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099e8:	d106      	bne.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099ea:	4bb7      	ldr	r3, [pc, #732]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80099ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ee:	4ab6      	ldr	r2, [pc, #728]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80099f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80099f6:	e008      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80099fe:	e004      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009a00:	bf00      	nop
 8009a02:	e002      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009a04:	bf00      	nop
 8009a06:	e000      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10a      	bne.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a12:	4bad      	ldr	r3, [pc, #692]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a20:	4aa9      	ldr	r2, [pc, #676]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a22:	430b      	orrs	r3, r1
 8009a24:	6553      	str	r3, [r2, #84]	; 0x54
 8009a26:	e003      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a38:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009a3c:	653b      	str	r3, [r7, #80]	; 0x50
 8009a3e:	2300      	movs	r3, #0
 8009a40:	657b      	str	r3, [r7, #84]	; 0x54
 8009a42:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009a46:	460b      	mov	r3, r1
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	d009      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009a4c:	4b9e      	ldr	r3, [pc, #632]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a5a:	4a9b      	ldr	r2, [pc, #620]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a5c:	430b      	orrs	r3, r1
 8009a5e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a68:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009a6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a6e:	2300      	movs	r3, #0
 8009a70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a72:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009a76:	460b      	mov	r3, r1
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	d009      	beq.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009a7c:	4b92      	ldr	r3, [pc, #584]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a80:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a8a:	4a8f      	ldr	r2, [pc, #572]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a8c:	430b      	orrs	r3, r1
 8009a8e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a98:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8009aa2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	d00e      	beq.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009aac:	4b86      	ldr	r3, [pc, #536]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	4a85      	ldr	r2, [pc, #532]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ab2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ab6:	6113      	str	r3, [r2, #16]
 8009ab8:	4b83      	ldr	r3, [pc, #524]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009aba:	6919      	ldr	r1, [r3, #16]
 8009abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ac0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ac4:	4a80      	ldr	r2, [pc, #512]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ac6:	430b      	orrs	r3, r1
 8009ac8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009ad6:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ad8:	2300      	movs	r3, #0
 8009ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009adc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	d009      	beq.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009ae6:	4b78      	ldr	r3, [pc, #480]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aea:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009af4:	4a74      	ldr	r2, [pc, #464]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009af6:	430b      	orrs	r3, r1
 8009af8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b02:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009b06:	633b      	str	r3, [r7, #48]	; 0x30
 8009b08:	2300      	movs	r3, #0
 8009b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8009b0c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009b10:	460b      	mov	r3, r1
 8009b12:	4313      	orrs	r3, r2
 8009b14:	d00a      	beq.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009b16:	4b6c      	ldr	r3, [pc, #432]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b1a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b26:	4a68      	ldr	r2, [pc, #416]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009b28:	430b      	orrs	r3, r1
 8009b2a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b34:	2100      	movs	r1, #0
 8009b36:	62b9      	str	r1, [r7, #40]	; 0x28
 8009b38:	f003 0301 	and.w	r3, r3, #1
 8009b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b3e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009b42:	460b      	mov	r3, r1
 8009b44:	4313      	orrs	r3, r2
 8009b46:	d011      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b4c:	3308      	adds	r3, #8
 8009b4e:	2100      	movs	r1, #0
 8009b50:	4618      	mov	r0, r3
 8009b52:	f000 fb79 	bl	800a248 <RCCEx_PLL2_Config>
 8009b56:	4603      	mov	r3, r0
 8009b58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009b5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d003      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b74:	2100      	movs	r1, #0
 8009b76:	6239      	str	r1, [r7, #32]
 8009b78:	f003 0302 	and.w	r3, r3, #2
 8009b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b7e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009b82:	460b      	mov	r3, r1
 8009b84:	4313      	orrs	r3, r2
 8009b86:	d011      	beq.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b8c:	3308      	adds	r3, #8
 8009b8e:	2101      	movs	r1, #1
 8009b90:	4618      	mov	r0, r3
 8009b92:	f000 fb59 	bl	800a248 <RCCEx_PLL2_Config>
 8009b96:	4603      	mov	r3, r0
 8009b98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009b9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d003      	beq.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ba8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	61b9      	str	r1, [r7, #24]
 8009bb8:	f003 0304 	and.w	r3, r3, #4
 8009bbc:	61fb      	str	r3, [r7, #28]
 8009bbe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	d011      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bcc:	3308      	adds	r3, #8
 8009bce:	2102      	movs	r1, #2
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f000 fb39 	bl	800a248 <RCCEx_PLL2_Config>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009bdc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d003      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009be8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	6139      	str	r1, [r7, #16]
 8009bf8:	f003 0308 	and.w	r3, r3, #8
 8009bfc:	617b      	str	r3, [r7, #20]
 8009bfe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009c02:	460b      	mov	r3, r1
 8009c04:	4313      	orrs	r3, r2
 8009c06:	d011      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c0c:	3328      	adds	r3, #40	; 0x28
 8009c0e:	2100      	movs	r1, #0
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 fbcb 	bl	800a3ac <RCCEx_PLL3_Config>
 8009c16:	4603      	mov	r3, r0
 8009c18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8009c1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d003      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c34:	2100      	movs	r1, #0
 8009c36:	60b9      	str	r1, [r7, #8]
 8009c38:	f003 0310 	and.w	r3, r3, #16
 8009c3c:	60fb      	str	r3, [r7, #12]
 8009c3e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009c42:	460b      	mov	r3, r1
 8009c44:	4313      	orrs	r3, r2
 8009c46:	d011      	beq.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c4c:	3328      	adds	r3, #40	; 0x28
 8009c4e:	2101      	movs	r1, #1
 8009c50:	4618      	mov	r0, r3
 8009c52:	f000 fbab 	bl	800a3ac <RCCEx_PLL3_Config>
 8009c56:	4603      	mov	r3, r0
 8009c58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009c5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d003      	beq.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c74:	2100      	movs	r1, #0
 8009c76:	6039      	str	r1, [r7, #0]
 8009c78:	f003 0320 	and.w	r3, r3, #32
 8009c7c:	607b      	str	r3, [r7, #4]
 8009c7e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009c82:	460b      	mov	r3, r1
 8009c84:	4313      	orrs	r3, r2
 8009c86:	d011      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c8c:	3328      	adds	r3, #40	; 0x28
 8009c8e:	2102      	movs	r1, #2
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 fb8b 	bl	800a3ac <RCCEx_PLL3_Config>
 8009c96:	4603      	mov	r3, r0
 8009c98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009c9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d003      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ca4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ca8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8009cac:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d101      	bne.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	e000      	b.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009cc6:	bf00      	nop
 8009cc8:	58024400 	.word	0x58024400

08009ccc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009cd0:	f7fe fe00 	bl	80088d4 <HAL_RCC_GetHCLKFreq>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	4b06      	ldr	r3, [pc, #24]	; (8009cf0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	091b      	lsrs	r3, r3, #4
 8009cdc:	f003 0307 	and.w	r3, r3, #7
 8009ce0:	4904      	ldr	r1, [pc, #16]	; (8009cf4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009ce2:	5ccb      	ldrb	r3, [r1, r3]
 8009ce4:	f003 031f 	and.w	r3, r3, #31
 8009ce8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	58024400 	.word	0x58024400
 8009cf4:	0800e744 	.word	0x0800e744

08009cf8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b089      	sub	sp, #36	; 0x24
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d00:	4ba1      	ldr	r3, [pc, #644]	; (8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d04:	f003 0303 	and.w	r3, r3, #3
 8009d08:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009d0a:	4b9f      	ldr	r3, [pc, #636]	; (8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d0e:	0b1b      	lsrs	r3, r3, #12
 8009d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d14:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009d16:	4b9c      	ldr	r3, [pc, #624]	; (8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1a:	091b      	lsrs	r3, r3, #4
 8009d1c:	f003 0301 	and.w	r3, r3, #1
 8009d20:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009d22:	4b99      	ldr	r3, [pc, #612]	; (8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d26:	08db      	lsrs	r3, r3, #3
 8009d28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d2c:	693a      	ldr	r2, [r7, #16]
 8009d2e:	fb02 f303 	mul.w	r3, r2, r3
 8009d32:	ee07 3a90 	vmov	s15, r3
 8009d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f000 8111 	beq.w	8009f68 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	f000 8083 	beq.w	8009e54 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	2b02      	cmp	r3, #2
 8009d52:	f200 80a1 	bhi.w	8009e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d003      	beq.n	8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d056      	beq.n	8009e10 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009d62:	e099      	b.n	8009e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d64:	4b88      	ldr	r3, [pc, #544]	; (8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 0320 	and.w	r3, r3, #32
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d02d      	beq.n	8009dcc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d70:	4b85      	ldr	r3, [pc, #532]	; (8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	08db      	lsrs	r3, r3, #3
 8009d76:	f003 0303 	and.w	r3, r3, #3
 8009d7a:	4a84      	ldr	r2, [pc, #528]	; (8009f8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d80:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	ee07 3a90 	vmov	s15, r3
 8009d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	ee07 3a90 	vmov	s15, r3
 8009d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d9a:	4b7b      	ldr	r3, [pc, #492]	; (8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009da2:	ee07 3a90 	vmov	s15, r3
 8009da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009f90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009dca:	e087      	b.n	8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	ee07 3a90 	vmov	s15, r3
 8009dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009f94 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dde:	4b6a      	ldr	r3, [pc, #424]	; (8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009de6:	ee07 3a90 	vmov	s15, r3
 8009dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8009df2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009f90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e0e:	e065      	b.n	8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	ee07 3a90 	vmov	s15, r3
 8009e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e1a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009f98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e22:	4b59      	ldr	r3, [pc, #356]	; (8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e2a:	ee07 3a90 	vmov	s15, r3
 8009e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e36:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009f90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e52:	e043      	b.n	8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	ee07 3a90 	vmov	s15, r3
 8009e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e5e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009f9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e66:	4b48      	ldr	r3, [pc, #288]	; (8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e6e:	ee07 3a90 	vmov	s15, r3
 8009e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e7a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009f90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e96:	e021      	b.n	8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	ee07 3a90 	vmov	s15, r3
 8009e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009f98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eaa:	4b37      	ldr	r3, [pc, #220]	; (8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eb2:	ee07 3a90 	vmov	s15, r3
 8009eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ebe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009f90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009eda:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009edc:	4b2a      	ldr	r3, [pc, #168]	; (8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee0:	0a5b      	lsrs	r3, r3, #9
 8009ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ee6:	ee07 3a90 	vmov	s15, r3
 8009eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ef2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ef6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f02:	ee17 2a90 	vmov	r2, s15
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009f0a:	4b1f      	ldr	r3, [pc, #124]	; (8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0e:	0c1b      	lsrs	r3, r3, #16
 8009f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f14:	ee07 3a90 	vmov	s15, r3
 8009f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f24:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f30:	ee17 2a90 	vmov	r2, s15
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009f38:	4b13      	ldr	r3, [pc, #76]	; (8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3c:	0e1b      	lsrs	r3, r3, #24
 8009f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f42:	ee07 3a90 	vmov	s15, r3
 8009f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f52:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f5e:	ee17 2a90 	vmov	r2, s15
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009f66:	e008      	b.n	8009f7a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	609a      	str	r2, [r3, #8]
}
 8009f7a:	bf00      	nop
 8009f7c:	3724      	adds	r7, #36	; 0x24
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	58024400 	.word	0x58024400
 8009f8c:	03d09000 	.word	0x03d09000
 8009f90:	46000000 	.word	0x46000000
 8009f94:	4c742400 	.word	0x4c742400
 8009f98:	4a742400 	.word	0x4a742400
 8009f9c:	4bbebc20 	.word	0x4bbebc20

08009fa0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b089      	sub	sp, #36	; 0x24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009fa8:	4ba1      	ldr	r3, [pc, #644]	; (800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fac:	f003 0303 	and.w	r3, r3, #3
 8009fb0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009fb2:	4b9f      	ldr	r3, [pc, #636]	; (800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb6:	0d1b      	lsrs	r3, r3, #20
 8009fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fbc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009fbe:	4b9c      	ldr	r3, [pc, #624]	; (800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc2:	0a1b      	lsrs	r3, r3, #8
 8009fc4:	f003 0301 	and.w	r3, r3, #1
 8009fc8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009fca:	4b99      	ldr	r3, [pc, #612]	; (800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fce:	08db      	lsrs	r3, r3, #3
 8009fd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	fb02 f303 	mul.w	r3, r2, r3
 8009fda:	ee07 3a90 	vmov	s15, r3
 8009fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fe2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f000 8111 	beq.w	800a210 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	f000 8083 	beq.w	800a0fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	2b02      	cmp	r3, #2
 8009ffa:	f200 80a1 	bhi.w	800a140 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d003      	beq.n	800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	2b01      	cmp	r3, #1
 800a008:	d056      	beq.n	800a0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a00a:	e099      	b.n	800a140 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a00c:	4b88      	ldr	r3, [pc, #544]	; (800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 0320 	and.w	r3, r3, #32
 800a014:	2b00      	cmp	r3, #0
 800a016:	d02d      	beq.n	800a074 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a018:	4b85      	ldr	r3, [pc, #532]	; (800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	08db      	lsrs	r3, r3, #3
 800a01e:	f003 0303 	and.w	r3, r3, #3
 800a022:	4a84      	ldr	r2, [pc, #528]	; (800a234 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a024:	fa22 f303 	lsr.w	r3, r2, r3
 800a028:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	ee07 3a90 	vmov	s15, r3
 800a030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	ee07 3a90 	vmov	s15, r3
 800a03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a03e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a042:	4b7b      	ldr	r3, [pc, #492]	; (800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a04a:	ee07 3a90 	vmov	s15, r3
 800a04e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a052:	ed97 6a03 	vldr	s12, [r7, #12]
 800a056:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a05a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a05e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a06a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a06e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a072:	e087      	b.n	800a184 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	ee07 3a90 	vmov	s15, r3
 800a07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a07e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a23c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a086:	4b6a      	ldr	r3, [pc, #424]	; (800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a08e:	ee07 3a90 	vmov	s15, r3
 800a092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a096:	ed97 6a03 	vldr	s12, [r7, #12]
 800a09a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a09e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0b6:	e065      	b.n	800a184 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	ee07 3a90 	vmov	s15, r3
 800a0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a240 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a0c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ca:	4b59      	ldr	r3, [pc, #356]	; (800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d2:	ee07 3a90 	vmov	s15, r3
 800a0d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0de:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0fa:	e043      	b.n	800a184 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	ee07 3a90 	vmov	s15, r3
 800a102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a106:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a244 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a10e:	4b48      	ldr	r3, [pc, #288]	; (800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a116:	ee07 3a90 	vmov	s15, r3
 800a11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a11e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a122:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a12e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a13a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a13e:	e021      	b.n	800a184 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	ee07 3a90 	vmov	s15, r3
 800a146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a14a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a240 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a152:	4b37      	ldr	r3, [pc, #220]	; (800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a15a:	ee07 3a90 	vmov	s15, r3
 800a15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a162:	ed97 6a03 	vldr	s12, [r7, #12]
 800a166:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a16a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a17e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a182:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a184:	4b2a      	ldr	r3, [pc, #168]	; (800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a188:	0a5b      	lsrs	r3, r3, #9
 800a18a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a18e:	ee07 3a90 	vmov	s15, r3
 800a192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a196:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a19a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a19e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1aa:	ee17 2a90 	vmov	r2, s15
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a1b2:	4b1f      	ldr	r3, [pc, #124]	; (800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b6:	0c1b      	lsrs	r3, r3, #16
 800a1b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1bc:	ee07 3a90 	vmov	s15, r3
 800a1c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1d8:	ee17 2a90 	vmov	r2, s15
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a1e0:	4b13      	ldr	r3, [pc, #76]	; (800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e4:	0e1b      	lsrs	r3, r3, #24
 800a1e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1ea:	ee07 3a90 	vmov	s15, r3
 800a1ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a206:	ee17 2a90 	vmov	r2, s15
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a20e:	e008      	b.n	800a222 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	609a      	str	r2, [r3, #8]
}
 800a222:	bf00      	nop
 800a224:	3724      	adds	r7, #36	; 0x24
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	58024400 	.word	0x58024400
 800a234:	03d09000 	.word	0x03d09000
 800a238:	46000000 	.word	0x46000000
 800a23c:	4c742400 	.word	0x4c742400
 800a240:	4a742400 	.word	0x4a742400
 800a244:	4bbebc20 	.word	0x4bbebc20

0800a248 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a252:	2300      	movs	r3, #0
 800a254:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a256:	4b53      	ldr	r3, [pc, #332]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a25a:	f003 0303 	and.w	r3, r3, #3
 800a25e:	2b03      	cmp	r3, #3
 800a260:	d101      	bne.n	800a266 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	e099      	b.n	800a39a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a266:	4b4f      	ldr	r3, [pc, #316]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a4e      	ldr	r2, [pc, #312]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a26c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a272:	f7f9 ffe9 	bl	8004248 <HAL_GetTick>
 800a276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a278:	e008      	b.n	800a28c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a27a:	f7f9 ffe5 	bl	8004248 <HAL_GetTick>
 800a27e:	4602      	mov	r2, r0
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	1ad3      	subs	r3, r2, r3
 800a284:	2b02      	cmp	r3, #2
 800a286:	d901      	bls.n	800a28c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a288:	2303      	movs	r3, #3
 800a28a:	e086      	b.n	800a39a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a28c:	4b45      	ldr	r3, [pc, #276]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1f0      	bne.n	800a27a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a298:	4b42      	ldr	r3, [pc, #264]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a29c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	031b      	lsls	r3, r3, #12
 800a2a6:	493f      	ldr	r1, [pc, #252]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	628b      	str	r3, [r1, #40]	; 0x28
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	025b      	lsls	r3, r3, #9
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	431a      	orrs	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	041b      	lsls	r3, r3, #16
 800a2ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a2ce:	431a      	orrs	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	061b      	lsls	r3, r3, #24
 800a2d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a2dc:	4931      	ldr	r1, [pc, #196]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a2e2:	4b30      	ldr	r3, [pc, #192]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	695b      	ldr	r3, [r3, #20]
 800a2ee:	492d      	ldr	r1, [pc, #180]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a2f4:	4b2b      	ldr	r3, [pc, #172]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f8:	f023 0220 	bic.w	r2, r3, #32
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	699b      	ldr	r3, [r3, #24]
 800a300:	4928      	ldr	r1, [pc, #160]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a302:	4313      	orrs	r3, r2
 800a304:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a306:	4b27      	ldr	r3, [pc, #156]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30a:	4a26      	ldr	r2, [pc, #152]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a30c:	f023 0310 	bic.w	r3, r3, #16
 800a310:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a312:	4b24      	ldr	r3, [pc, #144]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a314:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a316:	4b24      	ldr	r3, [pc, #144]	; (800a3a8 <RCCEx_PLL2_Config+0x160>)
 800a318:	4013      	ands	r3, r2
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	69d2      	ldr	r2, [r2, #28]
 800a31e:	00d2      	lsls	r2, r2, #3
 800a320:	4920      	ldr	r1, [pc, #128]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a322:	4313      	orrs	r3, r2
 800a324:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a326:	4b1f      	ldr	r3, [pc, #124]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32a:	4a1e      	ldr	r2, [pc, #120]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a32c:	f043 0310 	orr.w	r3, r3, #16
 800a330:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d106      	bne.n	800a346 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a338:	4b1a      	ldr	r3, [pc, #104]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33c:	4a19      	ldr	r2, [pc, #100]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a33e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a342:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a344:	e00f      	b.n	800a366 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d106      	bne.n	800a35a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a34c:	4b15      	ldr	r3, [pc, #84]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a350:	4a14      	ldr	r2, [pc, #80]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a356:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a358:	e005      	b.n	800a366 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a35a:	4b12      	ldr	r3, [pc, #72]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35e:	4a11      	ldr	r2, [pc, #68]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a364:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a366:	4b0f      	ldr	r3, [pc, #60]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a0e      	ldr	r2, [pc, #56]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a36c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a372:	f7f9 ff69 	bl	8004248 <HAL_GetTick>
 800a376:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a378:	e008      	b.n	800a38c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a37a:	f7f9 ff65 	bl	8004248 <HAL_GetTick>
 800a37e:	4602      	mov	r2, r0
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	1ad3      	subs	r3, r2, r3
 800a384:	2b02      	cmp	r3, #2
 800a386:	d901      	bls.n	800a38c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a388:	2303      	movs	r3, #3
 800a38a:	e006      	b.n	800a39a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a38c:	4b05      	ldr	r3, [pc, #20]	; (800a3a4 <RCCEx_PLL2_Config+0x15c>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a394:	2b00      	cmp	r3, #0
 800a396:	d0f0      	beq.n	800a37a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a398:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	58024400 	.word	0x58024400
 800a3a8:	ffff0007 	.word	0xffff0007

0800a3ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3ba:	4b53      	ldr	r3, [pc, #332]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3be:	f003 0303 	and.w	r3, r3, #3
 800a3c2:	2b03      	cmp	r3, #3
 800a3c4:	d101      	bne.n	800a3ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e099      	b.n	800a4fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a3ca:	4b4f      	ldr	r3, [pc, #316]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a4e      	ldr	r2, [pc, #312]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a3d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3d6:	f7f9 ff37 	bl	8004248 <HAL_GetTick>
 800a3da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a3dc:	e008      	b.n	800a3f0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a3de:	f7f9 ff33 	bl	8004248 <HAL_GetTick>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d901      	bls.n	800a3f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	e086      	b.n	800a4fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a3f0:	4b45      	ldr	r3, [pc, #276]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1f0      	bne.n	800a3de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a3fc:	4b42      	ldr	r3, [pc, #264]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a3fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a400:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	051b      	lsls	r3, r3, #20
 800a40a:	493f      	ldr	r1, [pc, #252]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a40c:	4313      	orrs	r3, r2
 800a40e:	628b      	str	r3, [r1, #40]	; 0x28
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	3b01      	subs	r3, #1
 800a416:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	3b01      	subs	r3, #1
 800a420:	025b      	lsls	r3, r3, #9
 800a422:	b29b      	uxth	r3, r3
 800a424:	431a      	orrs	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	3b01      	subs	r3, #1
 800a42c:	041b      	lsls	r3, r3, #16
 800a42e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a432:	431a      	orrs	r2, r3
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	3b01      	subs	r3, #1
 800a43a:	061b      	lsls	r3, r3, #24
 800a43c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a440:	4931      	ldr	r1, [pc, #196]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a442:	4313      	orrs	r3, r2
 800a444:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a446:	4b30      	ldr	r3, [pc, #192]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	695b      	ldr	r3, [r3, #20]
 800a452:	492d      	ldr	r1, [pc, #180]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a454:	4313      	orrs	r3, r2
 800a456:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a458:	4b2b      	ldr	r3, [pc, #172]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	4928      	ldr	r1, [pc, #160]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a466:	4313      	orrs	r3, r2
 800a468:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a46a:	4b27      	ldr	r3, [pc, #156]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a46e:	4a26      	ldr	r2, [pc, #152]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a474:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a476:	4b24      	ldr	r3, [pc, #144]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a47a:	4b24      	ldr	r3, [pc, #144]	; (800a50c <RCCEx_PLL3_Config+0x160>)
 800a47c:	4013      	ands	r3, r2
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	69d2      	ldr	r2, [r2, #28]
 800a482:	00d2      	lsls	r2, r2, #3
 800a484:	4920      	ldr	r1, [pc, #128]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a486:	4313      	orrs	r3, r2
 800a488:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a48a:	4b1f      	ldr	r3, [pc, #124]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48e:	4a1e      	ldr	r2, [pc, #120]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a494:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d106      	bne.n	800a4aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a49c:	4b1a      	ldr	r3, [pc, #104]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a0:	4a19      	ldr	r2, [pc, #100]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a4a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a4a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4a8:	e00f      	b.n	800a4ca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d106      	bne.n	800a4be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a4b0:	4b15      	ldr	r3, [pc, #84]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b4:	4a14      	ldr	r2, [pc, #80]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a4b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a4ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4bc:	e005      	b.n	800a4ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a4be:	4b12      	ldr	r3, [pc, #72]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c2:	4a11      	ldr	r2, [pc, #68]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a4c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a4c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a4ca:	4b0f      	ldr	r3, [pc, #60]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a0e      	ldr	r2, [pc, #56]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a4d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4d6:	f7f9 feb7 	bl	8004248 <HAL_GetTick>
 800a4da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4dc:	e008      	b.n	800a4f0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a4de:	f7f9 feb3 	bl	8004248 <HAL_GetTick>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d901      	bls.n	800a4f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	e006      	b.n	800a4fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4f0:	4b05      	ldr	r3, [pc, #20]	; (800a508 <RCCEx_PLL3_Config+0x15c>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d0f0      	beq.n	800a4de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	58024400 	.word	0x58024400
 800a50c:	ffff0007 	.word	0xffff0007

0800a510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d101      	bne.n	800a522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e049      	b.n	800a5b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d106      	bne.n	800a53c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f7f9 fb24 	bl	8003b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2202      	movs	r2, #2
 800a540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	3304      	adds	r3, #4
 800a54c:	4619      	mov	r1, r3
 800a54e:	4610      	mov	r0, r2
 800a550:	f000 feb8 	bl	800b2c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3708      	adds	r7, #8
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
	...

0800a5c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d001      	beq.n	800a5d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e05e      	b.n	800a696 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2202      	movs	r2, #2
 800a5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68da      	ldr	r2, [r3, #12]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f042 0201 	orr.w	r2, r2, #1
 800a5ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a2b      	ldr	r2, [pc, #172]	; (800a6a4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d02c      	beq.n	800a654 <HAL_TIM_Base_Start_IT+0x94>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a602:	d027      	beq.n	800a654 <HAL_TIM_Base_Start_IT+0x94>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a27      	ldr	r2, [pc, #156]	; (800a6a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d022      	beq.n	800a654 <HAL_TIM_Base_Start_IT+0x94>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a26      	ldr	r2, [pc, #152]	; (800a6ac <HAL_TIM_Base_Start_IT+0xec>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d01d      	beq.n	800a654 <HAL_TIM_Base_Start_IT+0x94>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a24      	ldr	r2, [pc, #144]	; (800a6b0 <HAL_TIM_Base_Start_IT+0xf0>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d018      	beq.n	800a654 <HAL_TIM_Base_Start_IT+0x94>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a23      	ldr	r2, [pc, #140]	; (800a6b4 <HAL_TIM_Base_Start_IT+0xf4>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d013      	beq.n	800a654 <HAL_TIM_Base_Start_IT+0x94>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a21      	ldr	r2, [pc, #132]	; (800a6b8 <HAL_TIM_Base_Start_IT+0xf8>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d00e      	beq.n	800a654 <HAL_TIM_Base_Start_IT+0x94>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a20      	ldr	r2, [pc, #128]	; (800a6bc <HAL_TIM_Base_Start_IT+0xfc>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d009      	beq.n	800a654 <HAL_TIM_Base_Start_IT+0x94>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a1e      	ldr	r2, [pc, #120]	; (800a6c0 <HAL_TIM_Base_Start_IT+0x100>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d004      	beq.n	800a654 <HAL_TIM_Base_Start_IT+0x94>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a1d      	ldr	r2, [pc, #116]	; (800a6c4 <HAL_TIM_Base_Start_IT+0x104>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d115      	bne.n	800a680 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	689a      	ldr	r2, [r3, #8]
 800a65a:	4b1b      	ldr	r3, [pc, #108]	; (800a6c8 <HAL_TIM_Base_Start_IT+0x108>)
 800a65c:	4013      	ands	r3, r2
 800a65e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2b06      	cmp	r3, #6
 800a664:	d015      	beq.n	800a692 <HAL_TIM_Base_Start_IT+0xd2>
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a66c:	d011      	beq.n	800a692 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f042 0201 	orr.w	r2, r2, #1
 800a67c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a67e:	e008      	b.n	800a692 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f042 0201 	orr.w	r2, r2, #1
 800a68e:	601a      	str	r2, [r3, #0]
 800a690:	e000      	b.n	800a694 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a692:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3714      	adds	r7, #20
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	40010000 	.word	0x40010000
 800a6a8:	40000400 	.word	0x40000400
 800a6ac:	40000800 	.word	0x40000800
 800a6b0:	40000c00 	.word	0x40000c00
 800a6b4:	40010400 	.word	0x40010400
 800a6b8:	40001800 	.word	0x40001800
 800a6bc:	40014000 	.word	0x40014000
 800a6c0:	4000e000 	.word	0x4000e000
 800a6c4:	4000e400 	.word	0x4000e400
 800a6c8:	00010007 	.word	0x00010007

0800a6cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d101      	bne.n	800a6de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e049      	b.n	800a772 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d106      	bne.n	800a6f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f7f9 fa0e 	bl	8003b14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2202      	movs	r2, #2
 800a6fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	3304      	adds	r3, #4
 800a708:	4619      	mov	r1, r3
 800a70a:	4610      	mov	r0, r2
 800a70c:	f000 fdda 	bl	800b2c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
	...

0800a77c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d109      	bne.n	800a7a0 <HAL_TIM_PWM_Start+0x24>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a792:	b2db      	uxtb	r3, r3
 800a794:	2b01      	cmp	r3, #1
 800a796:	bf14      	ite	ne
 800a798:	2301      	movne	r3, #1
 800a79a:	2300      	moveq	r3, #0
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	e03c      	b.n	800a81a <HAL_TIM_PWM_Start+0x9e>
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	2b04      	cmp	r3, #4
 800a7a4:	d109      	bne.n	800a7ba <HAL_TIM_PWM_Start+0x3e>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	bf14      	ite	ne
 800a7b2:	2301      	movne	r3, #1
 800a7b4:	2300      	moveq	r3, #0
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	e02f      	b.n	800a81a <HAL_TIM_PWM_Start+0x9e>
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	2b08      	cmp	r3, #8
 800a7be:	d109      	bne.n	800a7d4 <HAL_TIM_PWM_Start+0x58>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	bf14      	ite	ne
 800a7cc:	2301      	movne	r3, #1
 800a7ce:	2300      	moveq	r3, #0
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	e022      	b.n	800a81a <HAL_TIM_PWM_Start+0x9e>
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	2b0c      	cmp	r3, #12
 800a7d8:	d109      	bne.n	800a7ee <HAL_TIM_PWM_Start+0x72>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	bf14      	ite	ne
 800a7e6:	2301      	movne	r3, #1
 800a7e8:	2300      	moveq	r3, #0
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	e015      	b.n	800a81a <HAL_TIM_PWM_Start+0x9e>
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	2b10      	cmp	r3, #16
 800a7f2:	d109      	bne.n	800a808 <HAL_TIM_PWM_Start+0x8c>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	bf14      	ite	ne
 800a800:	2301      	movne	r3, #1
 800a802:	2300      	moveq	r3, #0
 800a804:	b2db      	uxtb	r3, r3
 800a806:	e008      	b.n	800a81a <HAL_TIM_PWM_Start+0x9e>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	2b01      	cmp	r3, #1
 800a812:	bf14      	ite	ne
 800a814:	2301      	movne	r3, #1
 800a816:	2300      	moveq	r3, #0
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d001      	beq.n	800a822 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	e0ab      	b.n	800a97a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d104      	bne.n	800a832 <HAL_TIM_PWM_Start+0xb6>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2202      	movs	r2, #2
 800a82c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a830:	e023      	b.n	800a87a <HAL_TIM_PWM_Start+0xfe>
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	2b04      	cmp	r3, #4
 800a836:	d104      	bne.n	800a842 <HAL_TIM_PWM_Start+0xc6>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2202      	movs	r2, #2
 800a83c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a840:	e01b      	b.n	800a87a <HAL_TIM_PWM_Start+0xfe>
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	2b08      	cmp	r3, #8
 800a846:	d104      	bne.n	800a852 <HAL_TIM_PWM_Start+0xd6>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2202      	movs	r2, #2
 800a84c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a850:	e013      	b.n	800a87a <HAL_TIM_PWM_Start+0xfe>
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	2b0c      	cmp	r3, #12
 800a856:	d104      	bne.n	800a862 <HAL_TIM_PWM_Start+0xe6>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2202      	movs	r2, #2
 800a85c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a860:	e00b      	b.n	800a87a <HAL_TIM_PWM_Start+0xfe>
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	2b10      	cmp	r3, #16
 800a866:	d104      	bne.n	800a872 <HAL_TIM_PWM_Start+0xf6>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2202      	movs	r2, #2
 800a86c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a870:	e003      	b.n	800a87a <HAL_TIM_PWM_Start+0xfe>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2202      	movs	r2, #2
 800a876:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2201      	movs	r2, #1
 800a880:	6839      	ldr	r1, [r7, #0]
 800a882:	4618      	mov	r0, r3
 800a884:	f001 f938 	bl	800baf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a3d      	ldr	r2, [pc, #244]	; (800a984 <HAL_TIM_PWM_Start+0x208>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d013      	beq.n	800a8ba <HAL_TIM_PWM_Start+0x13e>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a3c      	ldr	r2, [pc, #240]	; (800a988 <HAL_TIM_PWM_Start+0x20c>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d00e      	beq.n	800a8ba <HAL_TIM_PWM_Start+0x13e>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a3a      	ldr	r2, [pc, #232]	; (800a98c <HAL_TIM_PWM_Start+0x210>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d009      	beq.n	800a8ba <HAL_TIM_PWM_Start+0x13e>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a39      	ldr	r2, [pc, #228]	; (800a990 <HAL_TIM_PWM_Start+0x214>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d004      	beq.n	800a8ba <HAL_TIM_PWM_Start+0x13e>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a37      	ldr	r2, [pc, #220]	; (800a994 <HAL_TIM_PWM_Start+0x218>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d101      	bne.n	800a8be <HAL_TIM_PWM_Start+0x142>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e000      	b.n	800a8c0 <HAL_TIM_PWM_Start+0x144>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d007      	beq.n	800a8d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a8d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a2a      	ldr	r2, [pc, #168]	; (800a984 <HAL_TIM_PWM_Start+0x208>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d02c      	beq.n	800a938 <HAL_TIM_PWM_Start+0x1bc>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8e6:	d027      	beq.n	800a938 <HAL_TIM_PWM_Start+0x1bc>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a2a      	ldr	r2, [pc, #168]	; (800a998 <HAL_TIM_PWM_Start+0x21c>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d022      	beq.n	800a938 <HAL_TIM_PWM_Start+0x1bc>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a29      	ldr	r2, [pc, #164]	; (800a99c <HAL_TIM_PWM_Start+0x220>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d01d      	beq.n	800a938 <HAL_TIM_PWM_Start+0x1bc>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a27      	ldr	r2, [pc, #156]	; (800a9a0 <HAL_TIM_PWM_Start+0x224>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d018      	beq.n	800a938 <HAL_TIM_PWM_Start+0x1bc>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a1f      	ldr	r2, [pc, #124]	; (800a988 <HAL_TIM_PWM_Start+0x20c>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d013      	beq.n	800a938 <HAL_TIM_PWM_Start+0x1bc>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a23      	ldr	r2, [pc, #140]	; (800a9a4 <HAL_TIM_PWM_Start+0x228>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d00e      	beq.n	800a938 <HAL_TIM_PWM_Start+0x1bc>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a1b      	ldr	r2, [pc, #108]	; (800a98c <HAL_TIM_PWM_Start+0x210>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d009      	beq.n	800a938 <HAL_TIM_PWM_Start+0x1bc>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a1f      	ldr	r2, [pc, #124]	; (800a9a8 <HAL_TIM_PWM_Start+0x22c>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d004      	beq.n	800a938 <HAL_TIM_PWM_Start+0x1bc>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a1e      	ldr	r2, [pc, #120]	; (800a9ac <HAL_TIM_PWM_Start+0x230>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d115      	bne.n	800a964 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	689a      	ldr	r2, [r3, #8]
 800a93e:	4b1c      	ldr	r3, [pc, #112]	; (800a9b0 <HAL_TIM_PWM_Start+0x234>)
 800a940:	4013      	ands	r3, r2
 800a942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2b06      	cmp	r3, #6
 800a948:	d015      	beq.n	800a976 <HAL_TIM_PWM_Start+0x1fa>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a950:	d011      	beq.n	800a976 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f042 0201 	orr.w	r2, r2, #1
 800a960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a962:	e008      	b.n	800a976 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f042 0201 	orr.w	r2, r2, #1
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	e000      	b.n	800a978 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a976:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	40010000 	.word	0x40010000
 800a988:	40010400 	.word	0x40010400
 800a98c:	40014000 	.word	0x40014000
 800a990:	40014400 	.word	0x40014400
 800a994:	40014800 	.word	0x40014800
 800a998:	40000400 	.word	0x40000400
 800a99c:	40000800 	.word	0x40000800
 800a9a0:	40000c00 	.word	0x40000c00
 800a9a4:	40001800 	.word	0x40001800
 800a9a8:	4000e000 	.word	0x4000e000
 800a9ac:	4000e400 	.word	0x4000e400
 800a9b0:	00010007 	.word	0x00010007

0800a9b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b086      	sub	sp, #24
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d101      	bne.n	800a9c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e08f      	b.n	800aae8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d106      	bne.n	800a9e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f7f8 ffdd 	bl	800399c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2202      	movs	r2, #2
 800a9e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	6899      	ldr	r1, [r3, #8]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	4b3e      	ldr	r3, [pc, #248]	; (800aaf0 <HAL_TIM_Encoder_Init+0x13c>)
 800a9f6:	400b      	ands	r3, r1
 800a9f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	3304      	adds	r3, #4
 800aa02:	4619      	mov	r1, r3
 800aa04:	4610      	mov	r0, r2
 800aa06:	f000 fc5d 	bl	800b2c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	6a1b      	ldr	r3, [r3, #32]
 800aa20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	697a      	ldr	r2, [r7, #20]
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800aa2c:	693a      	ldr	r2, [r7, #16]
 800aa2e:	4b31      	ldr	r3, [pc, #196]	; (800aaf4 <HAL_TIM_Encoder_Init+0x140>)
 800aa30:	4013      	ands	r3, r2
 800aa32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	689a      	ldr	r2, [r3, #8]
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	021b      	lsls	r3, r3, #8
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800aa46:	693a      	ldr	r2, [r7, #16]
 800aa48:	4b2b      	ldr	r3, [pc, #172]	; (800aaf8 <HAL_TIM_Encoder_Init+0x144>)
 800aa4a:	4013      	ands	r3, r2
 800aa4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800aa4e:	693a      	ldr	r2, [r7, #16]
 800aa50:	4b2a      	ldr	r3, [pc, #168]	; (800aafc <HAL_TIM_Encoder_Init+0x148>)
 800aa52:	4013      	ands	r3, r2
 800aa54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	68da      	ldr	r2, [r3, #12]
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	69db      	ldr	r3, [r3, #28]
 800aa5e:	021b      	lsls	r3, r3, #8
 800aa60:	4313      	orrs	r3, r2
 800aa62:	693a      	ldr	r2, [r7, #16]
 800aa64:	4313      	orrs	r3, r2
 800aa66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	011a      	lsls	r2, r3, #4
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	6a1b      	ldr	r3, [r3, #32]
 800aa72:	031b      	lsls	r3, r3, #12
 800aa74:	4313      	orrs	r3, r2
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800aa82:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800aa8a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	685a      	ldr	r2, [r3, #4]
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	695b      	ldr	r3, [r3, #20]
 800aa94:	011b      	lsls	r3, r3, #4
 800aa96:	4313      	orrs	r3, r2
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	697a      	ldr	r2, [r7, #20]
 800aaa4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	693a      	ldr	r2, [r7, #16]
 800aaac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2201      	movs	r2, #1
 800aaba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2201      	movs	r2, #1
 800aac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2201      	movs	r2, #1
 800aaca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2201      	movs	r2, #1
 800aad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2201      	movs	r2, #1
 800aada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2201      	movs	r2, #1
 800aae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aae6:	2300      	movs	r3, #0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3718      	adds	r7, #24
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	fffebff8 	.word	0xfffebff8
 800aaf4:	fffffcfc 	.word	0xfffffcfc
 800aaf8:	fffff3f3 	.word	0xfffff3f3
 800aafc:	ffff0f0f 	.word	0xffff0f0f

0800ab00 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab28:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d110      	bne.n	800ab52 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ab30:	7bfb      	ldrb	r3, [r7, #15]
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d102      	bne.n	800ab3c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ab36:	7b7b      	ldrb	r3, [r7, #13]
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d001      	beq.n	800ab40 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	e069      	b.n	800ac14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2202      	movs	r2, #2
 800ab44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2202      	movs	r2, #2
 800ab4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab50:	e031      	b.n	800abb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b04      	cmp	r3, #4
 800ab56:	d110      	bne.n	800ab7a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ab58:	7bbb      	ldrb	r3, [r7, #14]
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d102      	bne.n	800ab64 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ab5e:	7b3b      	ldrb	r3, [r7, #12]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d001      	beq.n	800ab68 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800ab64:	2301      	movs	r3, #1
 800ab66:	e055      	b.n	800ac14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2202      	movs	r2, #2
 800ab6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2202      	movs	r2, #2
 800ab74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab78:	e01d      	b.n	800abb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ab7a:	7bfb      	ldrb	r3, [r7, #15]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d108      	bne.n	800ab92 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ab80:	7bbb      	ldrb	r3, [r7, #14]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d105      	bne.n	800ab92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ab86:	7b7b      	ldrb	r3, [r7, #13]
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d102      	bne.n	800ab92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ab8c:	7b3b      	ldrb	r3, [r7, #12]
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d001      	beq.n	800ab96 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800ab92:	2301      	movs	r3, #1
 800ab94:	e03e      	b.n	800ac14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2202      	movs	r2, #2
 800ab9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2202      	movs	r2, #2
 800aba2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2202      	movs	r2, #2
 800abaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2202      	movs	r2, #2
 800abb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d003      	beq.n	800abc4 <HAL_TIM_Encoder_Start+0xc4>
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	2b04      	cmp	r3, #4
 800abc0:	d008      	beq.n	800abd4 <HAL_TIM_Encoder_Start+0xd4>
 800abc2:	e00f      	b.n	800abe4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2201      	movs	r2, #1
 800abca:	2100      	movs	r1, #0
 800abcc:	4618      	mov	r0, r3
 800abce:	f000 ff93 	bl	800baf8 <TIM_CCxChannelCmd>
      break;
 800abd2:	e016      	b.n	800ac02 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2201      	movs	r2, #1
 800abda:	2104      	movs	r1, #4
 800abdc:	4618      	mov	r0, r3
 800abde:	f000 ff8b 	bl	800baf8 <TIM_CCxChannelCmd>
      break;
 800abe2:	e00e      	b.n	800ac02 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2201      	movs	r2, #1
 800abea:	2100      	movs	r1, #0
 800abec:	4618      	mov	r0, r3
 800abee:	f000 ff83 	bl	800baf8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2201      	movs	r2, #1
 800abf8:	2104      	movs	r1, #4
 800abfa:	4618      	mov	r0, r3
 800abfc:	f000 ff7c 	bl	800baf8 <TIM_CCxChannelCmd>
      break;
 800ac00:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f042 0201 	orr.w	r2, r2, #1
 800ac10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	f003 0302 	and.w	r3, r3, #2
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	d122      	bne.n	800ac78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	f003 0302 	and.w	r3, r3, #2
 800ac3c:	2b02      	cmp	r3, #2
 800ac3e:	d11b      	bne.n	800ac78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f06f 0202 	mvn.w	r2, #2
 800ac48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	699b      	ldr	r3, [r3, #24]
 800ac56:	f003 0303 	and.w	r3, r3, #3
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d003      	beq.n	800ac66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fb12 	bl	800b288 <HAL_TIM_IC_CaptureCallback>
 800ac64:	e005      	b.n	800ac72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 fb04 	bl	800b274 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 fb15 	bl	800b29c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	691b      	ldr	r3, [r3, #16]
 800ac7e:	f003 0304 	and.w	r3, r3, #4
 800ac82:	2b04      	cmp	r3, #4
 800ac84:	d122      	bne.n	800accc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	f003 0304 	and.w	r3, r3, #4
 800ac90:	2b04      	cmp	r3, #4
 800ac92:	d11b      	bne.n	800accc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f06f 0204 	mvn.w	r2, #4
 800ac9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2202      	movs	r2, #2
 800aca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	699b      	ldr	r3, [r3, #24]
 800acaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d003      	beq.n	800acba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 fae8 	bl	800b288 <HAL_TIM_IC_CaptureCallback>
 800acb8:	e005      	b.n	800acc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 fada 	bl	800b274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 faeb 	bl	800b29c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	691b      	ldr	r3, [r3, #16]
 800acd2:	f003 0308 	and.w	r3, r3, #8
 800acd6:	2b08      	cmp	r3, #8
 800acd8:	d122      	bne.n	800ad20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	f003 0308 	and.w	r3, r3, #8
 800ace4:	2b08      	cmp	r3, #8
 800ace6:	d11b      	bne.n	800ad20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f06f 0208 	mvn.w	r2, #8
 800acf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2204      	movs	r2, #4
 800acf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	69db      	ldr	r3, [r3, #28]
 800acfe:	f003 0303 	and.w	r3, r3, #3
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d003      	beq.n	800ad0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fabe 	bl	800b288 <HAL_TIM_IC_CaptureCallback>
 800ad0c:	e005      	b.n	800ad1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 fab0 	bl	800b274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 fac1 	bl	800b29c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	f003 0310 	and.w	r3, r3, #16
 800ad2a:	2b10      	cmp	r3, #16
 800ad2c:	d122      	bne.n	800ad74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	f003 0310 	and.w	r3, r3, #16
 800ad38:	2b10      	cmp	r3, #16
 800ad3a:	d11b      	bne.n	800ad74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f06f 0210 	mvn.w	r2, #16
 800ad44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2208      	movs	r2, #8
 800ad4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	69db      	ldr	r3, [r3, #28]
 800ad52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d003      	beq.n	800ad62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 fa94 	bl	800b288 <HAL_TIM_IC_CaptureCallback>
 800ad60:	e005      	b.n	800ad6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 fa86 	bl	800b274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 fa97 	bl	800b29c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	691b      	ldr	r3, [r3, #16]
 800ad7a:	f003 0301 	and.w	r3, r3, #1
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d10e      	bne.n	800ada0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	f003 0301 	and.w	r3, r3, #1
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d107      	bne.n	800ada0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f06f 0201 	mvn.w	r2, #1
 800ad98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f7f6 f86c 	bl	8000e78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adaa:	2b80      	cmp	r3, #128	; 0x80
 800adac:	d10e      	bne.n	800adcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adb8:	2b80      	cmp	r3, #128	; 0x80
 800adba:	d107      	bne.n	800adcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800adc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f001 f802 	bl	800bdd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	691b      	ldr	r3, [r3, #16]
 800add2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800add6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adda:	d10e      	bne.n	800adfa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ade6:	2b80      	cmp	r3, #128	; 0x80
 800ade8:	d107      	bne.n	800adfa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800adf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 fff5 	bl	800bde4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	691b      	ldr	r3, [r3, #16]
 800ae00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae04:	2b40      	cmp	r3, #64	; 0x40
 800ae06:	d10e      	bne.n	800ae26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae12:	2b40      	cmp	r3, #64	; 0x40
 800ae14:	d107      	bne.n	800ae26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ae1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 fa45 	bl	800b2b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	f003 0320 	and.w	r3, r3, #32
 800ae30:	2b20      	cmp	r3, #32
 800ae32:	d10e      	bne.n	800ae52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	f003 0320 	and.w	r3, r3, #32
 800ae3e:	2b20      	cmp	r3, #32
 800ae40:	d107      	bne.n	800ae52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f06f 0220 	mvn.w	r2, #32
 800ae4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 ffb5 	bl	800bdbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae52:	bf00      	nop
 800ae54:	3708      	adds	r7, #8
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
	...

0800ae5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b086      	sub	sp, #24
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d101      	bne.n	800ae7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ae76:	2302      	movs	r3, #2
 800ae78:	e0ff      	b.n	800b07a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2b14      	cmp	r3, #20
 800ae86:	f200 80f0 	bhi.w	800b06a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ae8a:	a201      	add	r2, pc, #4	; (adr r2, 800ae90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ae8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae90:	0800aee5 	.word	0x0800aee5
 800ae94:	0800b06b 	.word	0x0800b06b
 800ae98:	0800b06b 	.word	0x0800b06b
 800ae9c:	0800b06b 	.word	0x0800b06b
 800aea0:	0800af25 	.word	0x0800af25
 800aea4:	0800b06b 	.word	0x0800b06b
 800aea8:	0800b06b 	.word	0x0800b06b
 800aeac:	0800b06b 	.word	0x0800b06b
 800aeb0:	0800af67 	.word	0x0800af67
 800aeb4:	0800b06b 	.word	0x0800b06b
 800aeb8:	0800b06b 	.word	0x0800b06b
 800aebc:	0800b06b 	.word	0x0800b06b
 800aec0:	0800afa7 	.word	0x0800afa7
 800aec4:	0800b06b 	.word	0x0800b06b
 800aec8:	0800b06b 	.word	0x0800b06b
 800aecc:	0800b06b 	.word	0x0800b06b
 800aed0:	0800afe9 	.word	0x0800afe9
 800aed4:	0800b06b 	.word	0x0800b06b
 800aed8:	0800b06b 	.word	0x0800b06b
 800aedc:	0800b06b 	.word	0x0800b06b
 800aee0:	0800b029 	.word	0x0800b029
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	68b9      	ldr	r1, [r7, #8]
 800aeea:	4618      	mov	r0, r3
 800aeec:	f000 fa90 	bl	800b410 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	699a      	ldr	r2, [r3, #24]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f042 0208 	orr.w	r2, r2, #8
 800aefe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	699a      	ldr	r2, [r3, #24]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f022 0204 	bic.w	r2, r2, #4
 800af0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	6999      	ldr	r1, [r3, #24]
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	691a      	ldr	r2, [r3, #16]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	430a      	orrs	r2, r1
 800af20:	619a      	str	r2, [r3, #24]
      break;
 800af22:	e0a5      	b.n	800b070 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68b9      	ldr	r1, [r7, #8]
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 fb00 	bl	800b530 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	699a      	ldr	r2, [r3, #24]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	699a      	ldr	r2, [r3, #24]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	6999      	ldr	r1, [r3, #24]
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	691b      	ldr	r3, [r3, #16]
 800af5a:	021a      	lsls	r2, r3, #8
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	430a      	orrs	r2, r1
 800af62:	619a      	str	r2, [r3, #24]
      break;
 800af64:	e084      	b.n	800b070 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68b9      	ldr	r1, [r7, #8]
 800af6c:	4618      	mov	r0, r3
 800af6e:	f000 fb69 	bl	800b644 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	69da      	ldr	r2, [r3, #28]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f042 0208 	orr.w	r2, r2, #8
 800af80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	69da      	ldr	r2, [r3, #28]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f022 0204 	bic.w	r2, r2, #4
 800af90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	69d9      	ldr	r1, [r3, #28]
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	691a      	ldr	r2, [r3, #16]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	430a      	orrs	r2, r1
 800afa2:	61da      	str	r2, [r3, #28]
      break;
 800afa4:	e064      	b.n	800b070 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	68b9      	ldr	r1, [r7, #8]
 800afac:	4618      	mov	r0, r3
 800afae:	f000 fbd1 	bl	800b754 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	69da      	ldr	r2, [r3, #28]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800afc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	69da      	ldr	r2, [r3, #28]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	69d9      	ldr	r1, [r3, #28]
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	021a      	lsls	r2, r3, #8
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	430a      	orrs	r2, r1
 800afe4:	61da      	str	r2, [r3, #28]
      break;
 800afe6:	e043      	b.n	800b070 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	68b9      	ldr	r1, [r7, #8]
 800afee:	4618      	mov	r0, r3
 800aff0:	f000 fc1a 	bl	800b828 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f042 0208 	orr.w	r2, r2, #8
 800b002:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f022 0204 	bic.w	r2, r2, #4
 800b012:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	691a      	ldr	r2, [r3, #16]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	430a      	orrs	r2, r1
 800b024:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b026:	e023      	b.n	800b070 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	68b9      	ldr	r1, [r7, #8]
 800b02e:	4618      	mov	r0, r3
 800b030:	f000 fc5e 	bl	800b8f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b042:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b052:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	021a      	lsls	r2, r3, #8
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	430a      	orrs	r2, r1
 800b066:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b068:	e002      	b.n	800b070 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b06a:	2301      	movs	r3, #1
 800b06c:	75fb      	strb	r3, [r7, #23]
      break;
 800b06e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2200      	movs	r2, #0
 800b074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b078:	7dfb      	ldrb	r3, [r7, #23]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop

0800b084 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b08e:	2300      	movs	r3, #0
 800b090:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d101      	bne.n	800b0a0 <HAL_TIM_ConfigClockSource+0x1c>
 800b09c:	2302      	movs	r3, #2
 800b09e:	e0dc      	b.n	800b25a <HAL_TIM_ConfigClockSource+0x1d6>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2202      	movs	r2, #2
 800b0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0b8:	68ba      	ldr	r2, [r7, #8]
 800b0ba:	4b6a      	ldr	r3, [pc, #424]	; (800b264 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b0bc:	4013      	ands	r3, r2
 800b0be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b0c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68ba      	ldr	r2, [r7, #8]
 800b0ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a64      	ldr	r2, [pc, #400]	; (800b268 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	f000 80a9 	beq.w	800b22e <HAL_TIM_ConfigClockSource+0x1aa>
 800b0dc:	4a62      	ldr	r2, [pc, #392]	; (800b268 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	f200 80ae 	bhi.w	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b0e4:	4a61      	ldr	r2, [pc, #388]	; (800b26c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	f000 80a1 	beq.w	800b22e <HAL_TIM_ConfigClockSource+0x1aa>
 800b0ec:	4a5f      	ldr	r2, [pc, #380]	; (800b26c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	f200 80a6 	bhi.w	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b0f4:	4a5e      	ldr	r2, [pc, #376]	; (800b270 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	f000 8099 	beq.w	800b22e <HAL_TIM_ConfigClockSource+0x1aa>
 800b0fc:	4a5c      	ldr	r2, [pc, #368]	; (800b270 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	f200 809e 	bhi.w	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b104:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b108:	f000 8091 	beq.w	800b22e <HAL_TIM_ConfigClockSource+0x1aa>
 800b10c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b110:	f200 8096 	bhi.w	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b118:	f000 8089 	beq.w	800b22e <HAL_TIM_ConfigClockSource+0x1aa>
 800b11c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b120:	f200 808e 	bhi.w	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b128:	d03e      	beq.n	800b1a8 <HAL_TIM_ConfigClockSource+0x124>
 800b12a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b12e:	f200 8087 	bhi.w	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b136:	f000 8086 	beq.w	800b246 <HAL_TIM_ConfigClockSource+0x1c2>
 800b13a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b13e:	d87f      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b140:	2b70      	cmp	r3, #112	; 0x70
 800b142:	d01a      	beq.n	800b17a <HAL_TIM_ConfigClockSource+0xf6>
 800b144:	2b70      	cmp	r3, #112	; 0x70
 800b146:	d87b      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b148:	2b60      	cmp	r3, #96	; 0x60
 800b14a:	d050      	beq.n	800b1ee <HAL_TIM_ConfigClockSource+0x16a>
 800b14c:	2b60      	cmp	r3, #96	; 0x60
 800b14e:	d877      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b150:	2b50      	cmp	r3, #80	; 0x50
 800b152:	d03c      	beq.n	800b1ce <HAL_TIM_ConfigClockSource+0x14a>
 800b154:	2b50      	cmp	r3, #80	; 0x50
 800b156:	d873      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b158:	2b40      	cmp	r3, #64	; 0x40
 800b15a:	d058      	beq.n	800b20e <HAL_TIM_ConfigClockSource+0x18a>
 800b15c:	2b40      	cmp	r3, #64	; 0x40
 800b15e:	d86f      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b160:	2b30      	cmp	r3, #48	; 0x30
 800b162:	d064      	beq.n	800b22e <HAL_TIM_ConfigClockSource+0x1aa>
 800b164:	2b30      	cmp	r3, #48	; 0x30
 800b166:	d86b      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b168:	2b20      	cmp	r3, #32
 800b16a:	d060      	beq.n	800b22e <HAL_TIM_ConfigClockSource+0x1aa>
 800b16c:	2b20      	cmp	r3, #32
 800b16e:	d867      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
 800b170:	2b00      	cmp	r3, #0
 800b172:	d05c      	beq.n	800b22e <HAL_TIM_ConfigClockSource+0x1aa>
 800b174:	2b10      	cmp	r3, #16
 800b176:	d05a      	beq.n	800b22e <HAL_TIM_ConfigClockSource+0x1aa>
 800b178:	e062      	b.n	800b240 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6818      	ldr	r0, [r3, #0]
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	6899      	ldr	r1, [r3, #8]
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	685a      	ldr	r2, [r3, #4]
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	68db      	ldr	r3, [r3, #12]
 800b18a:	f000 fc95 	bl	800bab8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b19c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	609a      	str	r2, [r3, #8]
      break;
 800b1a6:	e04f      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6818      	ldr	r0, [r3, #0]
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	6899      	ldr	r1, [r3, #8]
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	685a      	ldr	r2, [r3, #4]
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	f000 fc7e 	bl	800bab8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	689a      	ldr	r2, [r3, #8]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b1ca:	609a      	str	r2, [r3, #8]
      break;
 800b1cc:	e03c      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6818      	ldr	r0, [r3, #0]
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	6859      	ldr	r1, [r3, #4]
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	461a      	mov	r2, r3
 800b1dc:	f000 fbee 	bl	800b9bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2150      	movs	r1, #80	; 0x50
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f000 fc48 	bl	800ba7c <TIM_ITRx_SetConfig>
      break;
 800b1ec:	e02c      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6818      	ldr	r0, [r3, #0]
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	6859      	ldr	r1, [r3, #4]
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	f000 fc0d 	bl	800ba1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2160      	movs	r1, #96	; 0x60
 800b206:	4618      	mov	r0, r3
 800b208:	f000 fc38 	bl	800ba7c <TIM_ITRx_SetConfig>
      break;
 800b20c:	e01c      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6818      	ldr	r0, [r3, #0]
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	6859      	ldr	r1, [r3, #4]
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	461a      	mov	r2, r3
 800b21c:	f000 fbce 	bl	800b9bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2140      	movs	r1, #64	; 0x40
 800b226:	4618      	mov	r0, r3
 800b228:	f000 fc28 	bl	800ba7c <TIM_ITRx_SetConfig>
      break;
 800b22c:	e00c      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4619      	mov	r1, r3
 800b238:	4610      	mov	r0, r2
 800b23a:	f000 fc1f 	bl	800ba7c <TIM_ITRx_SetConfig>
      break;
 800b23e:	e003      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	73fb      	strb	r3, [r7, #15]
      break;
 800b244:	e000      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b246:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2201      	movs	r2, #1
 800b24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b258:	7bfb      	ldrb	r3, [r7, #15]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	ffceff88 	.word	0xffceff88
 800b268:	00100040 	.word	0x00100040
 800b26c:	00100030 	.word	0x00100030
 800b270:	00100020 	.word	0x00100020

0800b274 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b27c:	bf00      	nop
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b288:	b480      	push	{r7}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b290:	bf00      	nop
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2a4:	bf00      	nop
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b2b8:	bf00      	nop
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a44      	ldr	r2, [pc, #272]	; (800b3e8 <TIM_Base_SetConfig+0x124>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d013      	beq.n	800b304 <TIM_Base_SetConfig+0x40>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2e2:	d00f      	beq.n	800b304 <TIM_Base_SetConfig+0x40>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4a41      	ldr	r2, [pc, #260]	; (800b3ec <TIM_Base_SetConfig+0x128>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d00b      	beq.n	800b304 <TIM_Base_SetConfig+0x40>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4a40      	ldr	r2, [pc, #256]	; (800b3f0 <TIM_Base_SetConfig+0x12c>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d007      	beq.n	800b304 <TIM_Base_SetConfig+0x40>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a3f      	ldr	r2, [pc, #252]	; (800b3f4 <TIM_Base_SetConfig+0x130>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d003      	beq.n	800b304 <TIM_Base_SetConfig+0x40>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4a3e      	ldr	r2, [pc, #248]	; (800b3f8 <TIM_Base_SetConfig+0x134>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d108      	bne.n	800b316 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b30a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	4313      	orrs	r3, r2
 800b314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a33      	ldr	r2, [pc, #204]	; (800b3e8 <TIM_Base_SetConfig+0x124>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d027      	beq.n	800b36e <TIM_Base_SetConfig+0xaa>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b324:	d023      	beq.n	800b36e <TIM_Base_SetConfig+0xaa>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a30      	ldr	r2, [pc, #192]	; (800b3ec <TIM_Base_SetConfig+0x128>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d01f      	beq.n	800b36e <TIM_Base_SetConfig+0xaa>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4a2f      	ldr	r2, [pc, #188]	; (800b3f0 <TIM_Base_SetConfig+0x12c>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d01b      	beq.n	800b36e <TIM_Base_SetConfig+0xaa>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	4a2e      	ldr	r2, [pc, #184]	; (800b3f4 <TIM_Base_SetConfig+0x130>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d017      	beq.n	800b36e <TIM_Base_SetConfig+0xaa>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4a2d      	ldr	r2, [pc, #180]	; (800b3f8 <TIM_Base_SetConfig+0x134>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d013      	beq.n	800b36e <TIM_Base_SetConfig+0xaa>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	4a2c      	ldr	r2, [pc, #176]	; (800b3fc <TIM_Base_SetConfig+0x138>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d00f      	beq.n	800b36e <TIM_Base_SetConfig+0xaa>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4a2b      	ldr	r2, [pc, #172]	; (800b400 <TIM_Base_SetConfig+0x13c>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d00b      	beq.n	800b36e <TIM_Base_SetConfig+0xaa>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	4a2a      	ldr	r2, [pc, #168]	; (800b404 <TIM_Base_SetConfig+0x140>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d007      	beq.n	800b36e <TIM_Base_SetConfig+0xaa>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4a29      	ldr	r2, [pc, #164]	; (800b408 <TIM_Base_SetConfig+0x144>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d003      	beq.n	800b36e <TIM_Base_SetConfig+0xaa>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4a28      	ldr	r2, [pc, #160]	; (800b40c <TIM_Base_SetConfig+0x148>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d108      	bne.n	800b380 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	4313      	orrs	r3, r2
 800b37e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	695b      	ldr	r3, [r3, #20]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	689a      	ldr	r2, [r3, #8]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4a10      	ldr	r2, [pc, #64]	; (800b3e8 <TIM_Base_SetConfig+0x124>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d00f      	beq.n	800b3cc <TIM_Base_SetConfig+0x108>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4a12      	ldr	r2, [pc, #72]	; (800b3f8 <TIM_Base_SetConfig+0x134>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d00b      	beq.n	800b3cc <TIM_Base_SetConfig+0x108>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	4a11      	ldr	r2, [pc, #68]	; (800b3fc <TIM_Base_SetConfig+0x138>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d007      	beq.n	800b3cc <TIM_Base_SetConfig+0x108>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	4a10      	ldr	r2, [pc, #64]	; (800b400 <TIM_Base_SetConfig+0x13c>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d003      	beq.n	800b3cc <TIM_Base_SetConfig+0x108>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	4a0f      	ldr	r2, [pc, #60]	; (800b404 <TIM_Base_SetConfig+0x140>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d103      	bne.n	800b3d4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	691a      	ldr	r2, [r3, #16]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	615a      	str	r2, [r3, #20]
}
 800b3da:	bf00      	nop
 800b3dc:	3714      	adds	r7, #20
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	40010000 	.word	0x40010000
 800b3ec:	40000400 	.word	0x40000400
 800b3f0:	40000800 	.word	0x40000800
 800b3f4:	40000c00 	.word	0x40000c00
 800b3f8:	40010400 	.word	0x40010400
 800b3fc:	40014000 	.word	0x40014000
 800b400:	40014400 	.word	0x40014400
 800b404:	40014800 	.word	0x40014800
 800b408:	4000e000 	.word	0x4000e000
 800b40c:	4000e400 	.word	0x4000e400

0800b410 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b410:	b480      	push	{r7}
 800b412:	b087      	sub	sp, #28
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	f023 0201 	bic.w	r2, r3, #1
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6a1b      	ldr	r3, [r3, #32]
 800b42a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	699b      	ldr	r3, [r3, #24]
 800b436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	4b37      	ldr	r3, [pc, #220]	; (800b518 <TIM_OC1_SetConfig+0x108>)
 800b43c:	4013      	ands	r3, r2
 800b43e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f023 0303 	bic.w	r3, r3, #3
 800b446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	4313      	orrs	r3, r2
 800b450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	f023 0302 	bic.w	r3, r3, #2
 800b458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	4313      	orrs	r3, r2
 800b462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	4a2d      	ldr	r2, [pc, #180]	; (800b51c <TIM_OC1_SetConfig+0x10c>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d00f      	beq.n	800b48c <TIM_OC1_SetConfig+0x7c>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a2c      	ldr	r2, [pc, #176]	; (800b520 <TIM_OC1_SetConfig+0x110>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d00b      	beq.n	800b48c <TIM_OC1_SetConfig+0x7c>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4a2b      	ldr	r2, [pc, #172]	; (800b524 <TIM_OC1_SetConfig+0x114>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d007      	beq.n	800b48c <TIM_OC1_SetConfig+0x7c>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	4a2a      	ldr	r2, [pc, #168]	; (800b528 <TIM_OC1_SetConfig+0x118>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d003      	beq.n	800b48c <TIM_OC1_SetConfig+0x7c>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	4a29      	ldr	r2, [pc, #164]	; (800b52c <TIM_OC1_SetConfig+0x11c>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d10c      	bne.n	800b4a6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	f023 0308 	bic.w	r3, r3, #8
 800b492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	697a      	ldr	r2, [r7, #20]
 800b49a:	4313      	orrs	r3, r2
 800b49c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	f023 0304 	bic.w	r3, r3, #4
 800b4a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4a1c      	ldr	r2, [pc, #112]	; (800b51c <TIM_OC1_SetConfig+0x10c>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d00f      	beq.n	800b4ce <TIM_OC1_SetConfig+0xbe>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4a1b      	ldr	r2, [pc, #108]	; (800b520 <TIM_OC1_SetConfig+0x110>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d00b      	beq.n	800b4ce <TIM_OC1_SetConfig+0xbe>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	4a1a      	ldr	r2, [pc, #104]	; (800b524 <TIM_OC1_SetConfig+0x114>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d007      	beq.n	800b4ce <TIM_OC1_SetConfig+0xbe>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4a19      	ldr	r2, [pc, #100]	; (800b528 <TIM_OC1_SetConfig+0x118>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d003      	beq.n	800b4ce <TIM_OC1_SetConfig+0xbe>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	4a18      	ldr	r2, [pc, #96]	; (800b52c <TIM_OC1_SetConfig+0x11c>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d111      	bne.n	800b4f2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	695b      	ldr	r3, [r3, #20]
 800b4e2:	693a      	ldr	r2, [r7, #16]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	699b      	ldr	r3, [r3, #24]
 800b4ec:	693a      	ldr	r2, [r7, #16]
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	693a      	ldr	r2, [r7, #16]
 800b4f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	68fa      	ldr	r2, [r7, #12]
 800b4fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	685a      	ldr	r2, [r3, #4]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	697a      	ldr	r2, [r7, #20]
 800b50a:	621a      	str	r2, [r3, #32]
}
 800b50c:	bf00      	nop
 800b50e:	371c      	adds	r7, #28
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr
 800b518:	fffeff8f 	.word	0xfffeff8f
 800b51c:	40010000 	.word	0x40010000
 800b520:	40010400 	.word	0x40010400
 800b524:	40014000 	.word	0x40014000
 800b528:	40014400 	.word	0x40014400
 800b52c:	40014800 	.word	0x40014800

0800b530 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b530:	b480      	push	{r7}
 800b532:	b087      	sub	sp, #28
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a1b      	ldr	r3, [r3, #32]
 800b53e:	f023 0210 	bic.w	r2, r3, #16
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6a1b      	ldr	r3, [r3, #32]
 800b54a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	699b      	ldr	r3, [r3, #24]
 800b556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	4b34      	ldr	r3, [pc, #208]	; (800b62c <TIM_OC2_SetConfig+0xfc>)
 800b55c:	4013      	ands	r3, r2
 800b55e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	021b      	lsls	r3, r3, #8
 800b56e:	68fa      	ldr	r2, [r7, #12]
 800b570:	4313      	orrs	r3, r2
 800b572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	f023 0320 	bic.w	r3, r3, #32
 800b57a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	011b      	lsls	r3, r3, #4
 800b582:	697a      	ldr	r2, [r7, #20]
 800b584:	4313      	orrs	r3, r2
 800b586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4a29      	ldr	r2, [pc, #164]	; (800b630 <TIM_OC2_SetConfig+0x100>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d003      	beq.n	800b598 <TIM_OC2_SetConfig+0x68>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	4a28      	ldr	r2, [pc, #160]	; (800b634 <TIM_OC2_SetConfig+0x104>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d10d      	bne.n	800b5b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b59e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	011b      	lsls	r3, r3, #4
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4a1e      	ldr	r2, [pc, #120]	; (800b630 <TIM_OC2_SetConfig+0x100>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d00f      	beq.n	800b5dc <TIM_OC2_SetConfig+0xac>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	4a1d      	ldr	r2, [pc, #116]	; (800b634 <TIM_OC2_SetConfig+0x104>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d00b      	beq.n	800b5dc <TIM_OC2_SetConfig+0xac>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4a1c      	ldr	r2, [pc, #112]	; (800b638 <TIM_OC2_SetConfig+0x108>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d007      	beq.n	800b5dc <TIM_OC2_SetConfig+0xac>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a1b      	ldr	r2, [pc, #108]	; (800b63c <TIM_OC2_SetConfig+0x10c>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d003      	beq.n	800b5dc <TIM_OC2_SetConfig+0xac>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a1a      	ldr	r2, [pc, #104]	; (800b640 <TIM_OC2_SetConfig+0x110>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d113      	bne.n	800b604 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b5e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	695b      	ldr	r3, [r3, #20]
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	693a      	ldr	r2, [r7, #16]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	699b      	ldr	r3, [r3, #24]
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	693a      	ldr	r2, [r7, #16]
 800b600:	4313      	orrs	r3, r2
 800b602:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	693a      	ldr	r2, [r7, #16]
 800b608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	685a      	ldr	r2, [r3, #4]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	697a      	ldr	r2, [r7, #20]
 800b61c:	621a      	str	r2, [r3, #32]
}
 800b61e:	bf00      	nop
 800b620:	371c      	adds	r7, #28
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr
 800b62a:	bf00      	nop
 800b62c:	feff8fff 	.word	0xfeff8fff
 800b630:	40010000 	.word	0x40010000
 800b634:	40010400 	.word	0x40010400
 800b638:	40014000 	.word	0x40014000
 800b63c:	40014400 	.word	0x40014400
 800b640:	40014800 	.word	0x40014800

0800b644 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b644:	b480      	push	{r7}
 800b646:	b087      	sub	sp, #28
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6a1b      	ldr	r3, [r3, #32]
 800b652:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	69db      	ldr	r3, [r3, #28]
 800b66a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	4b33      	ldr	r3, [pc, #204]	; (800b73c <TIM_OC3_SetConfig+0xf8>)
 800b670:	4013      	ands	r3, r2
 800b672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f023 0303 	bic.w	r3, r3, #3
 800b67a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	4313      	orrs	r3, r2
 800b684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b68c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	689b      	ldr	r3, [r3, #8]
 800b692:	021b      	lsls	r3, r3, #8
 800b694:	697a      	ldr	r2, [r7, #20]
 800b696:	4313      	orrs	r3, r2
 800b698:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4a28      	ldr	r2, [pc, #160]	; (800b740 <TIM_OC3_SetConfig+0xfc>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d003      	beq.n	800b6aa <TIM_OC3_SetConfig+0x66>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4a27      	ldr	r2, [pc, #156]	; (800b744 <TIM_OC3_SetConfig+0x100>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d10d      	bne.n	800b6c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b6b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	021b      	lsls	r3, r3, #8
 800b6b8:	697a      	ldr	r2, [r7, #20]
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b6c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	4a1d      	ldr	r2, [pc, #116]	; (800b740 <TIM_OC3_SetConfig+0xfc>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d00f      	beq.n	800b6ee <TIM_OC3_SetConfig+0xaa>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4a1c      	ldr	r2, [pc, #112]	; (800b744 <TIM_OC3_SetConfig+0x100>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d00b      	beq.n	800b6ee <TIM_OC3_SetConfig+0xaa>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4a1b      	ldr	r2, [pc, #108]	; (800b748 <TIM_OC3_SetConfig+0x104>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d007      	beq.n	800b6ee <TIM_OC3_SetConfig+0xaa>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a1a      	ldr	r2, [pc, #104]	; (800b74c <TIM_OC3_SetConfig+0x108>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d003      	beq.n	800b6ee <TIM_OC3_SetConfig+0xaa>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a19      	ldr	r2, [pc, #100]	; (800b750 <TIM_OC3_SetConfig+0x10c>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d113      	bne.n	800b716 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	695b      	ldr	r3, [r3, #20]
 800b702:	011b      	lsls	r3, r3, #4
 800b704:	693a      	ldr	r2, [r7, #16]
 800b706:	4313      	orrs	r3, r2
 800b708:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	699b      	ldr	r3, [r3, #24]
 800b70e:	011b      	lsls	r3, r3, #4
 800b710:	693a      	ldr	r2, [r7, #16]
 800b712:	4313      	orrs	r3, r2
 800b714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	693a      	ldr	r2, [r7, #16]
 800b71a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	68fa      	ldr	r2, [r7, #12]
 800b720:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	685a      	ldr	r2, [r3, #4]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	697a      	ldr	r2, [r7, #20]
 800b72e:	621a      	str	r2, [r3, #32]
}
 800b730:	bf00      	nop
 800b732:	371c      	adds	r7, #28
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr
 800b73c:	fffeff8f 	.word	0xfffeff8f
 800b740:	40010000 	.word	0x40010000
 800b744:	40010400 	.word	0x40010400
 800b748:	40014000 	.word	0x40014000
 800b74c:	40014400 	.word	0x40014400
 800b750:	40014800 	.word	0x40014800

0800b754 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b754:	b480      	push	{r7}
 800b756:	b087      	sub	sp, #28
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6a1b      	ldr	r3, [r3, #32]
 800b762:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6a1b      	ldr	r3, [r3, #32]
 800b76e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	69db      	ldr	r3, [r3, #28]
 800b77a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	4b24      	ldr	r3, [pc, #144]	; (800b810 <TIM_OC4_SetConfig+0xbc>)
 800b780:	4013      	ands	r3, r2
 800b782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b78a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	021b      	lsls	r3, r3, #8
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	4313      	orrs	r3, r2
 800b796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b79e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	031b      	lsls	r3, r3, #12
 800b7a6:	693a      	ldr	r2, [r7, #16]
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	4a19      	ldr	r2, [pc, #100]	; (800b814 <TIM_OC4_SetConfig+0xc0>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d00f      	beq.n	800b7d4 <TIM_OC4_SetConfig+0x80>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	4a18      	ldr	r2, [pc, #96]	; (800b818 <TIM_OC4_SetConfig+0xc4>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d00b      	beq.n	800b7d4 <TIM_OC4_SetConfig+0x80>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	4a17      	ldr	r2, [pc, #92]	; (800b81c <TIM_OC4_SetConfig+0xc8>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d007      	beq.n	800b7d4 <TIM_OC4_SetConfig+0x80>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	4a16      	ldr	r2, [pc, #88]	; (800b820 <TIM_OC4_SetConfig+0xcc>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d003      	beq.n	800b7d4 <TIM_OC4_SetConfig+0x80>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	4a15      	ldr	r2, [pc, #84]	; (800b824 <TIM_OC4_SetConfig+0xd0>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d109      	bne.n	800b7e8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b7da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	695b      	ldr	r3, [r3, #20]
 800b7e0:	019b      	lsls	r3, r3, #6
 800b7e2:	697a      	ldr	r2, [r7, #20]
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	697a      	ldr	r2, [r7, #20]
 800b7ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	685a      	ldr	r2, [r3, #4]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	693a      	ldr	r2, [r7, #16]
 800b800:	621a      	str	r2, [r3, #32]
}
 800b802:	bf00      	nop
 800b804:	371c      	adds	r7, #28
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
 800b80e:	bf00      	nop
 800b810:	feff8fff 	.word	0xfeff8fff
 800b814:	40010000 	.word	0x40010000
 800b818:	40010400 	.word	0x40010400
 800b81c:	40014000 	.word	0x40014000
 800b820:	40014400 	.word	0x40014400
 800b824:	40014800 	.word	0x40014800

0800b828 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b828:	b480      	push	{r7}
 800b82a:	b087      	sub	sp, #28
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6a1b      	ldr	r3, [r3, #32]
 800b836:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6a1b      	ldr	r3, [r3, #32]
 800b842:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b84e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b850:	68fa      	ldr	r2, [r7, #12]
 800b852:	4b21      	ldr	r3, [pc, #132]	; (800b8d8 <TIM_OC5_SetConfig+0xb0>)
 800b854:	4013      	ands	r3, r2
 800b856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	68fa      	ldr	r2, [r7, #12]
 800b85e:	4313      	orrs	r3, r2
 800b860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b868:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	041b      	lsls	r3, r3, #16
 800b870:	693a      	ldr	r2, [r7, #16]
 800b872:	4313      	orrs	r3, r2
 800b874:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	4a18      	ldr	r2, [pc, #96]	; (800b8dc <TIM_OC5_SetConfig+0xb4>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d00f      	beq.n	800b89e <TIM_OC5_SetConfig+0x76>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	4a17      	ldr	r2, [pc, #92]	; (800b8e0 <TIM_OC5_SetConfig+0xb8>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d00b      	beq.n	800b89e <TIM_OC5_SetConfig+0x76>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4a16      	ldr	r2, [pc, #88]	; (800b8e4 <TIM_OC5_SetConfig+0xbc>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d007      	beq.n	800b89e <TIM_OC5_SetConfig+0x76>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4a15      	ldr	r2, [pc, #84]	; (800b8e8 <TIM_OC5_SetConfig+0xc0>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d003      	beq.n	800b89e <TIM_OC5_SetConfig+0x76>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4a14      	ldr	r2, [pc, #80]	; (800b8ec <TIM_OC5_SetConfig+0xc4>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d109      	bne.n	800b8b2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	695b      	ldr	r3, [r3, #20]
 800b8aa:	021b      	lsls	r3, r3, #8
 800b8ac:	697a      	ldr	r2, [r7, #20]
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	697a      	ldr	r2, [r7, #20]
 800b8b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	68fa      	ldr	r2, [r7, #12]
 800b8bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	685a      	ldr	r2, [r3, #4]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	693a      	ldr	r2, [r7, #16]
 800b8ca:	621a      	str	r2, [r3, #32]
}
 800b8cc:	bf00      	nop
 800b8ce:	371c      	adds	r7, #28
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr
 800b8d8:	fffeff8f 	.word	0xfffeff8f
 800b8dc:	40010000 	.word	0x40010000
 800b8e0:	40010400 	.word	0x40010400
 800b8e4:	40014000 	.word	0x40014000
 800b8e8:	40014400 	.word	0x40014400
 800b8ec:	40014800 	.word	0x40014800

0800b8f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b087      	sub	sp, #28
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6a1b      	ldr	r3, [r3, #32]
 800b8fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a1b      	ldr	r3, [r3, #32]
 800b90a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	4b22      	ldr	r3, [pc, #136]	; (800b9a4 <TIM_OC6_SetConfig+0xb4>)
 800b91c:	4013      	ands	r3, r2
 800b91e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	021b      	lsls	r3, r3, #8
 800b926:	68fa      	ldr	r2, [r7, #12]
 800b928:	4313      	orrs	r3, r2
 800b92a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	051b      	lsls	r3, r3, #20
 800b93a:	693a      	ldr	r2, [r7, #16]
 800b93c:	4313      	orrs	r3, r2
 800b93e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4a19      	ldr	r2, [pc, #100]	; (800b9a8 <TIM_OC6_SetConfig+0xb8>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d00f      	beq.n	800b968 <TIM_OC6_SetConfig+0x78>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4a18      	ldr	r2, [pc, #96]	; (800b9ac <TIM_OC6_SetConfig+0xbc>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d00b      	beq.n	800b968 <TIM_OC6_SetConfig+0x78>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	4a17      	ldr	r2, [pc, #92]	; (800b9b0 <TIM_OC6_SetConfig+0xc0>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d007      	beq.n	800b968 <TIM_OC6_SetConfig+0x78>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4a16      	ldr	r2, [pc, #88]	; (800b9b4 <TIM_OC6_SetConfig+0xc4>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d003      	beq.n	800b968 <TIM_OC6_SetConfig+0x78>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	4a15      	ldr	r2, [pc, #84]	; (800b9b8 <TIM_OC6_SetConfig+0xc8>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d109      	bne.n	800b97c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b96e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	695b      	ldr	r3, [r3, #20]
 800b974:	029b      	lsls	r3, r3, #10
 800b976:	697a      	ldr	r2, [r7, #20]
 800b978:	4313      	orrs	r3, r2
 800b97a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	685a      	ldr	r2, [r3, #4]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	693a      	ldr	r2, [r7, #16]
 800b994:	621a      	str	r2, [r3, #32]
}
 800b996:	bf00      	nop
 800b998:	371c      	adds	r7, #28
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr
 800b9a2:	bf00      	nop
 800b9a4:	feff8fff 	.word	0xfeff8fff
 800b9a8:	40010000 	.word	0x40010000
 800b9ac:	40010400 	.word	0x40010400
 800b9b0:	40014000 	.word	0x40014000
 800b9b4:	40014400 	.word	0x40014400
 800b9b8:	40014800 	.word	0x40014800

0800b9bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b087      	sub	sp, #28
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	6a1b      	ldr	r3, [r3, #32]
 800b9cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	6a1b      	ldr	r3, [r3, #32]
 800b9d2:	f023 0201 	bic.w	r2, r3, #1
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	699b      	ldr	r3, [r3, #24]
 800b9de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b9e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	011b      	lsls	r3, r3, #4
 800b9ec:	693a      	ldr	r2, [r7, #16]
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	f023 030a 	bic.w	r3, r3, #10
 800b9f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b9fa:	697a      	ldr	r2, [r7, #20]
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	693a      	ldr	r2, [r7, #16]
 800ba06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	697a      	ldr	r2, [r7, #20]
 800ba0c:	621a      	str	r2, [r3, #32]
}
 800ba0e:	bf00      	nop
 800ba10:	371c      	adds	r7, #28
 800ba12:	46bd      	mov	sp, r7
 800ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba18:	4770      	bx	lr

0800ba1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba1a:	b480      	push	{r7}
 800ba1c:	b087      	sub	sp, #28
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	60f8      	str	r0, [r7, #12]
 800ba22:	60b9      	str	r1, [r7, #8]
 800ba24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6a1b      	ldr	r3, [r3, #32]
 800ba2a:	f023 0210 	bic.w	r2, r3, #16
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	699b      	ldr	r3, [r3, #24]
 800ba36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	6a1b      	ldr	r3, [r3, #32]
 800ba3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ba44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	031b      	lsls	r3, r3, #12
 800ba4a:	697a      	ldr	r2, [r7, #20]
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ba56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	011b      	lsls	r3, r3, #4
 800ba5c:	693a      	ldr	r2, [r7, #16]
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	697a      	ldr	r2, [r7, #20]
 800ba66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	693a      	ldr	r2, [r7, #16]
 800ba6c:	621a      	str	r2, [r3, #32]
}
 800ba6e:	bf00      	nop
 800ba70:	371c      	adds	r7, #28
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
	...

0800ba7c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b085      	sub	sp, #20
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	4b09      	ldr	r3, [pc, #36]	; (800bab4 <TIM_ITRx_SetConfig+0x38>)
 800ba90:	4013      	ands	r3, r2
 800ba92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba94:	683a      	ldr	r2, [r7, #0]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	f043 0307 	orr.w	r3, r3, #7
 800ba9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	68fa      	ldr	r2, [r7, #12]
 800baa4:	609a      	str	r2, [r3, #8]
}
 800baa6:	bf00      	nop
 800baa8:	3714      	adds	r7, #20
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	ffcfff8f 	.word	0xffcfff8f

0800bab8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bab8:	b480      	push	{r7}
 800baba:	b087      	sub	sp, #28
 800babc:	af00      	add	r7, sp, #0
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	60b9      	str	r1, [r7, #8]
 800bac2:	607a      	str	r2, [r7, #4]
 800bac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	689b      	ldr	r3, [r3, #8]
 800baca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bad2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	021a      	lsls	r2, r3, #8
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	431a      	orrs	r2, r3
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	4313      	orrs	r3, r2
 800bae0:	697a      	ldr	r2, [r7, #20]
 800bae2:	4313      	orrs	r3, r2
 800bae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	697a      	ldr	r2, [r7, #20]
 800baea:	609a      	str	r2, [r3, #8]
}
 800baec:	bf00      	nop
 800baee:	371c      	adds	r7, #28
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr

0800baf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b087      	sub	sp, #28
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	f003 031f 	and.w	r3, r3, #31
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	fa02 f303 	lsl.w	r3, r2, r3
 800bb10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	6a1a      	ldr	r2, [r3, #32]
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	43db      	mvns	r3, r3
 800bb1a:	401a      	ands	r2, r3
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6a1a      	ldr	r2, [r3, #32]
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	f003 031f 	and.w	r3, r3, #31
 800bb2a:	6879      	ldr	r1, [r7, #4]
 800bb2c:	fa01 f303 	lsl.w	r3, r1, r3
 800bb30:	431a      	orrs	r2, r3
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	621a      	str	r2, [r3, #32]
}
 800bb36:	bf00      	nop
 800bb38:	371c      	adds	r7, #28
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
	...

0800bb44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d101      	bne.n	800bb5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb58:	2302      	movs	r3, #2
 800bb5a:	e077      	b.n	800bc4c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2202      	movs	r2, #2
 800bb68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a35      	ldr	r2, [pc, #212]	; (800bc58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d004      	beq.n	800bb90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a34      	ldr	r2, [pc, #208]	; (800bc5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d108      	bne.n	800bba2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bb96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bba8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	68fa      	ldr	r2, [r7, #12]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a25      	ldr	r2, [pc, #148]	; (800bc58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d02c      	beq.n	800bc20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbce:	d027      	beq.n	800bc20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a22      	ldr	r2, [pc, #136]	; (800bc60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d022      	beq.n	800bc20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a21      	ldr	r2, [pc, #132]	; (800bc64 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d01d      	beq.n	800bc20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4a1f      	ldr	r2, [pc, #124]	; (800bc68 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d018      	beq.n	800bc20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a1a      	ldr	r2, [pc, #104]	; (800bc5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d013      	beq.n	800bc20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4a1b      	ldr	r2, [pc, #108]	; (800bc6c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d00e      	beq.n	800bc20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a1a      	ldr	r2, [pc, #104]	; (800bc70 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d009      	beq.n	800bc20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a18      	ldr	r2, [pc, #96]	; (800bc74 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d004      	beq.n	800bc20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a17      	ldr	r2, [pc, #92]	; (800bc78 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d10c      	bne.n	800bc3a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	68ba      	ldr	r2, [r7, #8]
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	68ba      	ldr	r2, [r7, #8]
 800bc38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2200      	movs	r2, #0
 800bc46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3714      	adds	r7, #20
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr
 800bc58:	40010000 	.word	0x40010000
 800bc5c:	40010400 	.word	0x40010400
 800bc60:	40000400 	.word	0x40000400
 800bc64:	40000800 	.word	0x40000800
 800bc68:	40000c00 	.word	0x40000c00
 800bc6c:	40001800 	.word	0x40001800
 800bc70:	40014000 	.word	0x40014000
 800bc74:	4000e000 	.word	0x4000e000
 800bc78:	4000e400 	.word	0x4000e400

0800bc7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b085      	sub	sp, #20
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bc86:	2300      	movs	r3, #0
 800bc88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d101      	bne.n	800bc98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bc94:	2302      	movs	r3, #2
 800bc96:	e087      	b.n	800bda8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	4313      	orrs	r3, r2
 800bce4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	695b      	ldr	r3, [r3, #20]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	699b      	ldr	r3, [r3, #24]
 800bd0c:	041b      	lsls	r3, r3, #16
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a27      	ldr	r2, [pc, #156]	; (800bdb4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d004      	beq.n	800bd26 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a25      	ldr	r2, [pc, #148]	; (800bdb8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d106      	bne.n	800bd34 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	69db      	ldr	r3, [r3, #28]
 800bd30:	4313      	orrs	r3, r2
 800bd32:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a1e      	ldr	r2, [pc, #120]	; (800bdb4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d004      	beq.n	800bd48 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a1d      	ldr	r2, [pc, #116]	; (800bdb8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d126      	bne.n	800bd96 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd52:	051b      	lsls	r3, r3, #20
 800bd54:	4313      	orrs	r3, r2
 800bd56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	6a1b      	ldr	r3, [r3, #32]
 800bd62:	4313      	orrs	r3, r2
 800bd64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd70:	4313      	orrs	r3, r2
 800bd72:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a0e      	ldr	r2, [pc, #56]	; (800bdb4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d004      	beq.n	800bd88 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a0d      	ldr	r2, [pc, #52]	; (800bdb8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d106      	bne.n	800bd96 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd92:	4313      	orrs	r3, r2
 800bd94:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2200      	movs	r2, #0
 800bda2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bda6:	2300      	movs	r3, #0
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3714      	adds	r7, #20
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr
 800bdb4:	40010000 	.word	0x40010000
 800bdb8:	40010400 	.word	0x40010400

0800bdbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bdc4:	bf00      	nop
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bdd8:	bf00      	nop
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bdec:	bf00      	nop
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d101      	bne.n	800be0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be06:	2301      	movs	r3, #1
 800be08:	e042      	b.n	800be90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be10:	2b00      	cmp	r3, #0
 800be12:	d106      	bne.n	800be22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f7f7 ff3b 	bl	8003c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2224      	movs	r2, #36	; 0x24
 800be26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	681a      	ldr	r2, [r3, #0]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f022 0201 	bic.w	r2, r2, #1
 800be38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 fd1c 	bl	800c878 <UART_SetConfig>
 800be40:	4603      	mov	r3, r0
 800be42:	2b01      	cmp	r3, #1
 800be44:	d101      	bne.n	800be4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800be46:	2301      	movs	r3, #1
 800be48:	e022      	b.n	800be90 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d002      	beq.n	800be58 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f001 fb7c 	bl	800d550 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	685a      	ldr	r2, [r3, #4]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800be66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	689a      	ldr	r2, [r3, #8]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800be76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f042 0201 	orr.w	r2, r2, #1
 800be86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f001 fc03 	bl	800d694 <UART_CheckIdleState>
 800be8e:	4603      	mov	r3, r0
}
 800be90:	4618      	mov	r0, r3
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d101      	bne.n	800beaa <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800bea6:	2301      	movs	r3, #1
 800bea8:	e031      	b.n	800bf0e <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2224      	movs	r2, #36	; 0x24
 800beae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f022 0201 	bic.w	r2, r2, #1
 800bec0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	2200      	movs	r2, #0
 800bec8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2200      	movs	r2, #0
 800bed0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2200      	movs	r2, #0
 800bed8:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f7f7 ffb4 	bl	8003e48 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3708      	adds	r7, #8
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
	...

0800bf18 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b08a      	sub	sp, #40	; 0x28
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	4613      	mov	r3, r2
 800bf24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf2c:	2b20      	cmp	r3, #32
 800bf2e:	d167      	bne.n	800c000 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d002      	beq.n	800bf3c <HAL_UART_Transmit_DMA+0x24>
 800bf36:	88fb      	ldrh	r3, [r7, #6]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d101      	bne.n	800bf40 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	e060      	b.n	800c002 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	68ba      	ldr	r2, [r7, #8]
 800bf44:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	88fa      	ldrh	r2, [r7, #6]
 800bf4a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	88fa      	ldrh	r2, [r7, #6]
 800bf52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2221      	movs	r2, #33	; 0x21
 800bf62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d028      	beq.n	800bfc0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf72:	4a26      	ldr	r2, [pc, #152]	; (800c00c <HAL_UART_Transmit_DMA+0xf4>)
 800bf74:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf7a:	4a25      	ldr	r2, [pc, #148]	; (800c010 <HAL_UART_Transmit_DMA+0xf8>)
 800bf7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf82:	4a24      	ldr	r2, [pc, #144]	; (800c014 <HAL_UART_Transmit_DMA+0xfc>)
 800bf84:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf96:	4619      	mov	r1, r3
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	3328      	adds	r3, #40	; 0x28
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	88fb      	ldrh	r3, [r7, #6]
 800bfa2:	f7f8 ffaf 	bl	8004f04 <HAL_DMA_Start_IT>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d009      	beq.n	800bfc0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2210      	movs	r2, #16
 800bfb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2220      	movs	r2, #32
 800bfb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	e020      	b.n	800c002 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	2240      	movs	r2, #64	; 0x40
 800bfc6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	3308      	adds	r3, #8
 800bfce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	e853 3f00 	ldrex	r3, [r3]
 800bfd6:	613b      	str	r3, [r7, #16]
   return(result);
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfde:	627b      	str	r3, [r7, #36]	; 0x24
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	3308      	adds	r3, #8
 800bfe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfe8:	623a      	str	r2, [r7, #32]
 800bfea:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfec:	69f9      	ldr	r1, [r7, #28]
 800bfee:	6a3a      	ldr	r2, [r7, #32]
 800bff0:	e841 2300 	strex	r3, r2, [r1]
 800bff4:	61bb      	str	r3, [r7, #24]
   return(result);
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1e5      	bne.n	800bfc8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800bffc:	2300      	movs	r3, #0
 800bffe:	e000      	b.n	800c002 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c000:	2302      	movs	r3, #2
  }
}
 800c002:	4618      	mov	r0, r3
 800c004:	3728      	adds	r7, #40	; 0x28
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	0800db55 	.word	0x0800db55
 800c010:	0800dbeb 	.word	0x0800dbeb
 800c014:	0800dd6d 	.word	0x0800dd6d

0800c018 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b08a      	sub	sp, #40	; 0x28
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	4613      	mov	r3, r2
 800c024:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c02c:	2b20      	cmp	r3, #32
 800c02e:	d137      	bne.n	800c0a0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d002      	beq.n	800c03c <HAL_UART_Receive_DMA+0x24>
 800c036:	88fb      	ldrh	r3, [r7, #6]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d101      	bne.n	800c040 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c03c:	2301      	movs	r3, #1
 800c03e:	e030      	b.n	800c0a2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2200      	movs	r2, #0
 800c044:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a18      	ldr	r2, [pc, #96]	; (800c0ac <HAL_UART_Receive_DMA+0x94>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d01f      	beq.n	800c090 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d018      	beq.n	800c090 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	e853 3f00 	ldrex	r3, [r3]
 800c06a:	613b      	str	r3, [r7, #16]
   return(result);
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c072:	627b      	str	r3, [r7, #36]	; 0x24
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	461a      	mov	r2, r3
 800c07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07c:	623b      	str	r3, [r7, #32]
 800c07e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c080:	69f9      	ldr	r1, [r7, #28]
 800c082:	6a3a      	ldr	r2, [r7, #32]
 800c084:	e841 2300 	strex	r3, r2, [r1]
 800c088:	61bb      	str	r3, [r7, #24]
   return(result);
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1e6      	bne.n	800c05e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c090:	88fb      	ldrh	r3, [r7, #6]
 800c092:	461a      	mov	r2, r3
 800c094:	68b9      	ldr	r1, [r7, #8]
 800c096:	68f8      	ldr	r0, [r7, #12]
 800c098:	f001 fc0e 	bl	800d8b8 <UART_Start_Receive_DMA>
 800c09c:	4603      	mov	r3, r0
 800c09e:	e000      	b.n	800c0a2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c0a0:	2302      	movs	r3, #2
  }
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3728      	adds	r7, #40	; 0x28
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	58000c00 	.word	0x58000c00

0800c0b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b0ba      	sub	sp, #232	; 0xe8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	69db      	ldr	r3, [r3, #28]
 800c0be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c0d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c0da:	f640 030f 	movw	r3, #2063	; 0x80f
 800c0de:	4013      	ands	r3, r2
 800c0e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c0e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d11b      	bne.n	800c124 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c0ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0f0:	f003 0320 	and.w	r3, r3, #32
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d015      	beq.n	800c124 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c0f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0fc:	f003 0320 	and.w	r3, r3, #32
 800c100:	2b00      	cmp	r3, #0
 800c102:	d105      	bne.n	800c110 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d009      	beq.n	800c124 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c114:	2b00      	cmp	r3, #0
 800c116:	f000 8377 	beq.w	800c808 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	4798      	blx	r3
      }
      return;
 800c122:	e371      	b.n	800c808 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c124:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f000 8123 	beq.w	800c374 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c12e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c132:	4b8d      	ldr	r3, [pc, #564]	; (800c368 <HAL_UART_IRQHandler+0x2b8>)
 800c134:	4013      	ands	r3, r2
 800c136:	2b00      	cmp	r3, #0
 800c138:	d106      	bne.n	800c148 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c13a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c13e:	4b8b      	ldr	r3, [pc, #556]	; (800c36c <HAL_UART_IRQHandler+0x2bc>)
 800c140:	4013      	ands	r3, r2
 800c142:	2b00      	cmp	r3, #0
 800c144:	f000 8116 	beq.w	800c374 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c14c:	f003 0301 	and.w	r3, r3, #1
 800c150:	2b00      	cmp	r3, #0
 800c152:	d011      	beq.n	800c178 <HAL_UART_IRQHandler+0xc8>
 800c154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d00b      	beq.n	800c178 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2201      	movs	r2, #1
 800c166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c16e:	f043 0201 	orr.w	r2, r3, #1
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c17c:	f003 0302 	and.w	r3, r3, #2
 800c180:	2b00      	cmp	r3, #0
 800c182:	d011      	beq.n	800c1a8 <HAL_UART_IRQHandler+0xf8>
 800c184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c188:	f003 0301 	and.w	r3, r3, #1
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d00b      	beq.n	800c1a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2202      	movs	r2, #2
 800c196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c19e:	f043 0204 	orr.w	r2, r3, #4
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ac:	f003 0304 	and.w	r3, r3, #4
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d011      	beq.n	800c1d8 <HAL_UART_IRQHandler+0x128>
 800c1b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1b8:	f003 0301 	and.w	r3, r3, #1
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d00b      	beq.n	800c1d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2204      	movs	r2, #4
 800c1c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1ce:	f043 0202 	orr.w	r2, r3, #2
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c1d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1dc:	f003 0308 	and.w	r3, r3, #8
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d017      	beq.n	800c214 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c1e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1e8:	f003 0320 	and.w	r3, r3, #32
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d105      	bne.n	800c1fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c1f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c1f4:	4b5c      	ldr	r3, [pc, #368]	; (800c368 <HAL_UART_IRQHandler+0x2b8>)
 800c1f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d00b      	beq.n	800c214 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	2208      	movs	r2, #8
 800c202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c20a:	f043 0208 	orr.w	r2, r3, #8
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d012      	beq.n	800c246 <HAL_UART_IRQHandler+0x196>
 800c220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c224:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d00c      	beq.n	800c246 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c234:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c23c:	f043 0220 	orr.w	r2, r3, #32
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f000 82dd 	beq.w	800c80c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c256:	f003 0320 	and.w	r3, r3, #32
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d013      	beq.n	800c286 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c25e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c262:	f003 0320 	and.w	r3, r3, #32
 800c266:	2b00      	cmp	r3, #0
 800c268:	d105      	bne.n	800c276 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c26a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c26e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c272:	2b00      	cmp	r3, #0
 800c274:	d007      	beq.n	800c286 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d003      	beq.n	800c286 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c28c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	689b      	ldr	r3, [r3, #8]
 800c296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c29a:	2b40      	cmp	r3, #64	; 0x40
 800c29c:	d005      	beq.n	800c2aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c29e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c2a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d054      	beq.n	800c354 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f001 fbec 	bl	800da88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2ba:	2b40      	cmp	r3, #64	; 0x40
 800c2bc:	d146      	bne.n	800c34c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	3308      	adds	r3, #8
 800c2c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c2cc:	e853 3f00 	ldrex	r3, [r3]
 800c2d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c2d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c2d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	3308      	adds	r3, #8
 800c2e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c2ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c2ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c2f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c2fa:	e841 2300 	strex	r3, r2, [r1]
 800c2fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c302:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c306:	2b00      	cmp	r3, #0
 800c308:	d1d9      	bne.n	800c2be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c310:	2b00      	cmp	r3, #0
 800c312:	d017      	beq.n	800c344 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c31a:	4a15      	ldr	r2, [pc, #84]	; (800c370 <HAL_UART_IRQHandler+0x2c0>)
 800c31c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c324:	4618      	mov	r0, r3
 800c326:	f7f9 fb75 	bl	8005a14 <HAL_DMA_Abort_IT>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d019      	beq.n	800c364 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800c33e:	4610      	mov	r0, r2
 800c340:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c342:	e00f      	b.n	800c364 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f7f6 fca7 	bl	8002c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c34a:	e00b      	b.n	800c364 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f7f6 fca3 	bl	8002c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c352:	e007      	b.n	800c364 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f7f6 fc9f 	bl	8002c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2200      	movs	r2, #0
 800c35e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800c362:	e253      	b.n	800c80c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c364:	bf00      	nop
    return;
 800c366:	e251      	b.n	800c80c <HAL_UART_IRQHandler+0x75c>
 800c368:	10000001 	.word	0x10000001
 800c36c:	04000120 	.word	0x04000120
 800c370:	0800dded 	.word	0x0800dded

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c378:	2b01      	cmp	r3, #1
 800c37a:	f040 81e7 	bne.w	800c74c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c37e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c382:	f003 0310 	and.w	r3, r3, #16
 800c386:	2b00      	cmp	r3, #0
 800c388:	f000 81e0 	beq.w	800c74c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c38c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c390:	f003 0310 	and.w	r3, r3, #16
 800c394:	2b00      	cmp	r3, #0
 800c396:	f000 81d9 	beq.w	800c74c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2210      	movs	r2, #16
 800c3a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3ac:	2b40      	cmp	r3, #64	; 0x40
 800c3ae:	f040 8151 	bne.w	800c654 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a96      	ldr	r2, [pc, #600]	; (800c614 <HAL_UART_IRQHandler+0x564>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d068      	beq.n	800c492 <HAL_UART_IRQHandler+0x3e2>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a93      	ldr	r2, [pc, #588]	; (800c618 <HAL_UART_IRQHandler+0x568>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d061      	beq.n	800c492 <HAL_UART_IRQHandler+0x3e2>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4a91      	ldr	r2, [pc, #580]	; (800c61c <HAL_UART_IRQHandler+0x56c>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d05a      	beq.n	800c492 <HAL_UART_IRQHandler+0x3e2>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a8e      	ldr	r2, [pc, #568]	; (800c620 <HAL_UART_IRQHandler+0x570>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d053      	beq.n	800c492 <HAL_UART_IRQHandler+0x3e2>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a8c      	ldr	r2, [pc, #560]	; (800c624 <HAL_UART_IRQHandler+0x574>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d04c      	beq.n	800c492 <HAL_UART_IRQHandler+0x3e2>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a89      	ldr	r2, [pc, #548]	; (800c628 <HAL_UART_IRQHandler+0x578>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d045      	beq.n	800c492 <HAL_UART_IRQHandler+0x3e2>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4a87      	ldr	r2, [pc, #540]	; (800c62c <HAL_UART_IRQHandler+0x57c>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d03e      	beq.n	800c492 <HAL_UART_IRQHandler+0x3e2>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a84      	ldr	r2, [pc, #528]	; (800c630 <HAL_UART_IRQHandler+0x580>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d037      	beq.n	800c492 <HAL_UART_IRQHandler+0x3e2>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4a82      	ldr	r2, [pc, #520]	; (800c634 <HAL_UART_IRQHandler+0x584>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d030      	beq.n	800c492 <HAL_UART_IRQHandler+0x3e2>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a7f      	ldr	r2, [pc, #508]	; (800c638 <HAL_UART_IRQHandler+0x588>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d029      	beq.n	800c492 <HAL_UART_IRQHandler+0x3e2>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a7d      	ldr	r2, [pc, #500]	; (800c63c <HAL_UART_IRQHandler+0x58c>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d022      	beq.n	800c492 <HAL_UART_IRQHandler+0x3e2>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a7a      	ldr	r2, [pc, #488]	; (800c640 <HAL_UART_IRQHandler+0x590>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d01b      	beq.n	800c492 <HAL_UART_IRQHandler+0x3e2>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4a78      	ldr	r2, [pc, #480]	; (800c644 <HAL_UART_IRQHandler+0x594>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d014      	beq.n	800c492 <HAL_UART_IRQHandler+0x3e2>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a75      	ldr	r2, [pc, #468]	; (800c648 <HAL_UART_IRQHandler+0x598>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d00d      	beq.n	800c492 <HAL_UART_IRQHandler+0x3e2>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4a73      	ldr	r2, [pc, #460]	; (800c64c <HAL_UART_IRQHandler+0x59c>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d006      	beq.n	800c492 <HAL_UART_IRQHandler+0x3e2>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a70      	ldr	r2, [pc, #448]	; (800c650 <HAL_UART_IRQHandler+0x5a0>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d106      	bne.n	800c4a0 <HAL_UART_IRQHandler+0x3f0>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	e005      	b.n	800c4ac <HAL_UART_IRQHandler+0x3fc>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c4b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	f000 81ab 	beq.w	800c810 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c4c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	f080 81a3 	bcs.w	800c810 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c4d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4da:	69db      	ldr	r3, [r3, #28]
 800c4dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4e0:	f000 8087 	beq.w	800c5f2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c4f0:	e853 3f00 	ldrex	r3, [r3]
 800c4f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c4f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c4fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c500:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	461a      	mov	r2, r3
 800c50a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c50e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c512:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c516:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c51a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c51e:	e841 2300 	strex	r3, r2, [r1]
 800c522:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1da      	bne.n	800c4e4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	3308      	adds	r3, #8
 800c534:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c538:	e853 3f00 	ldrex	r3, [r3]
 800c53c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c53e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c540:	f023 0301 	bic.w	r3, r3, #1
 800c544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	3308      	adds	r3, #8
 800c54e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c552:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c556:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c558:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c55a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c55e:	e841 2300 	strex	r3, r2, [r1]
 800c562:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c566:	2b00      	cmp	r3, #0
 800c568:	d1e1      	bne.n	800c52e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	3308      	adds	r3, #8
 800c570:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c574:	e853 3f00 	ldrex	r3, [r3]
 800c578:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c57a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c57c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	3308      	adds	r3, #8
 800c58a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c58e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c590:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c592:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c594:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c596:	e841 2300 	strex	r3, r2, [r1]
 800c59a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c59c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d1e3      	bne.n	800c56a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2220      	movs	r2, #32
 800c5a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5b8:	e853 3f00 	ldrex	r3, [r3]
 800c5bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c5be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5c0:	f023 0310 	bic.w	r3, r3, #16
 800c5c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5d2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c5d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c5da:	e841 2300 	strex	r3, r2, [r1]
 800c5de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c5e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d1e4      	bne.n	800c5b0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7f8 fef3 	bl	80053d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2202      	movs	r2, #2
 800c5f6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c604:	b29b      	uxth	r3, r3
 800c606:	1ad3      	subs	r3, r2, r3
 800c608:	b29b      	uxth	r3, r3
 800c60a:	4619      	mov	r1, r3
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 f927 	bl	800c860 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c612:	e0fd      	b.n	800c810 <HAL_UART_IRQHandler+0x760>
 800c614:	40020010 	.word	0x40020010
 800c618:	40020028 	.word	0x40020028
 800c61c:	40020040 	.word	0x40020040
 800c620:	40020058 	.word	0x40020058
 800c624:	40020070 	.word	0x40020070
 800c628:	40020088 	.word	0x40020088
 800c62c:	400200a0 	.word	0x400200a0
 800c630:	400200b8 	.word	0x400200b8
 800c634:	40020410 	.word	0x40020410
 800c638:	40020428 	.word	0x40020428
 800c63c:	40020440 	.word	0x40020440
 800c640:	40020458 	.word	0x40020458
 800c644:	40020470 	.word	0x40020470
 800c648:	40020488 	.word	0x40020488
 800c64c:	400204a0 	.word	0x400204a0
 800c650:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c660:	b29b      	uxth	r3, r3
 800c662:	1ad3      	subs	r3, r2, r3
 800c664:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c66e:	b29b      	uxth	r3, r3
 800c670:	2b00      	cmp	r3, #0
 800c672:	f000 80cf 	beq.w	800c814 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c676:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f000 80ca 	beq.w	800c814 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c688:	e853 3f00 	ldrex	r3, [r3]
 800c68c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c68e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c690:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c694:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	461a      	mov	r2, r3
 800c69e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c6a2:	647b      	str	r3, [r7, #68]	; 0x44
 800c6a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c6a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6aa:	e841 2300 	strex	r3, r2, [r1]
 800c6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c6b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d1e4      	bne.n	800c680 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	3308      	adds	r3, #8
 800c6bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c0:	e853 3f00 	ldrex	r3, [r3]
 800c6c4:	623b      	str	r3, [r7, #32]
   return(result);
 800c6c6:	6a3a      	ldr	r2, [r7, #32]
 800c6c8:	4b55      	ldr	r3, [pc, #340]	; (800c820 <HAL_UART_IRQHandler+0x770>)
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	3308      	adds	r3, #8
 800c6d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c6da:	633a      	str	r2, [r7, #48]	; 0x30
 800c6dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6e2:	e841 2300 	strex	r3, r2, [r1]
 800c6e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d1e3      	bne.n	800c6b6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2220      	movs	r2, #32
 800c6f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2200      	movs	r2, #0
 800c700:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	e853 3f00 	ldrex	r3, [r3]
 800c70e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f023 0310 	bic.w	r3, r3, #16
 800c716:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	461a      	mov	r2, r3
 800c720:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c724:	61fb      	str	r3, [r7, #28]
 800c726:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c728:	69b9      	ldr	r1, [r7, #24]
 800c72a:	69fa      	ldr	r2, [r7, #28]
 800c72c:	e841 2300 	strex	r3, r2, [r1]
 800c730:	617b      	str	r3, [r7, #20]
   return(result);
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d1e4      	bne.n	800c702 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2202      	movs	r2, #2
 800c73c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c73e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c742:	4619      	mov	r1, r3
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f000 f88b 	bl	800c860 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c74a:	e063      	b.n	800c814 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c74c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c750:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c754:	2b00      	cmp	r3, #0
 800c756:	d00e      	beq.n	800c776 <HAL_UART_IRQHandler+0x6c6>
 800c758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c75c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c760:	2b00      	cmp	r3, #0
 800c762:	d008      	beq.n	800c776 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c76c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f001 fb7d 	bl	800de6e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c774:	e051      	b.n	800c81a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c77a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d014      	beq.n	800c7ac <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d105      	bne.n	800c79a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c78e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c792:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c796:	2b00      	cmp	r3, #0
 800c798:	d008      	beq.n	800c7ac <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d03a      	beq.n	800c818 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	4798      	blx	r3
    }
    return;
 800c7aa:	e035      	b.n	800c818 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c7ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d009      	beq.n	800c7cc <HAL_UART_IRQHandler+0x71c>
 800c7b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d003      	beq.n	800c7cc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f001 fb27 	bl	800de18 <UART_EndTransmit_IT>
    return;
 800c7ca:	e026      	b.n	800c81a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c7cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d009      	beq.n	800c7ec <HAL_UART_IRQHandler+0x73c>
 800c7d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d003      	beq.n	800c7ec <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f001 fb56 	bl	800de96 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7ea:	e016      	b.n	800c81a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d010      	beq.n	800c81a <HAL_UART_IRQHandler+0x76a>
 800c7f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	da0c      	bge.n	800c81a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f001 fb3e 	bl	800de82 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c806:	e008      	b.n	800c81a <HAL_UART_IRQHandler+0x76a>
      return;
 800c808:	bf00      	nop
 800c80a:	e006      	b.n	800c81a <HAL_UART_IRQHandler+0x76a>
    return;
 800c80c:	bf00      	nop
 800c80e:	e004      	b.n	800c81a <HAL_UART_IRQHandler+0x76a>
      return;
 800c810:	bf00      	nop
 800c812:	e002      	b.n	800c81a <HAL_UART_IRQHandler+0x76a>
      return;
 800c814:	bf00      	nop
 800c816:	e000      	b.n	800c81a <HAL_UART_IRQHandler+0x76a>
    return;
 800c818:	bf00      	nop
  }
}
 800c81a:	37e8      	adds	r7, #232	; 0xe8
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}
 800c820:	effffffe 	.word	0xeffffffe

0800c824 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c82c:	bf00      	nop
 800c82e:	370c      	adds	r7, #12
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr

0800c838 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c840:	bf00      	nop
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c854:	bf00      	nop
 800c856:	370c      	adds	r7, #12
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr

0800c860 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c860:	b480      	push	{r7}
 800c862:	b083      	sub	sp, #12
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	460b      	mov	r3, r1
 800c86a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c86c:	bf00      	nop
 800c86e:	370c      	adds	r7, #12
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr

0800c878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c87c:	b092      	sub	sp, #72	; 0x48
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c882:	2300      	movs	r3, #0
 800c884:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	689a      	ldr	r2, [r3, #8]
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	691b      	ldr	r3, [r3, #16]
 800c890:	431a      	orrs	r2, r3
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	695b      	ldr	r3, [r3, #20]
 800c896:	431a      	orrs	r2, r3
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	69db      	ldr	r3, [r3, #28]
 800c89c:	4313      	orrs	r3, r2
 800c89e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	4bbe      	ldr	r3, [pc, #760]	; (800cba0 <UART_SetConfig+0x328>)
 800c8a8:	4013      	ands	r3, r2
 800c8aa:	697a      	ldr	r2, [r7, #20]
 800c8ac:	6812      	ldr	r2, [r2, #0]
 800c8ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c8b0:	430b      	orrs	r3, r1
 800c8b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	68da      	ldr	r2, [r3, #12]
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	430a      	orrs	r2, r1
 800c8c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	699b      	ldr	r3, [r3, #24]
 800c8ce:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	4ab3      	ldr	r2, [pc, #716]	; (800cba4 <UART_SetConfig+0x32c>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d004      	beq.n	800c8e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	6a1b      	ldr	r3, [r3, #32]
 800c8de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8e0:	4313      	orrs	r3, r2
 800c8e2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	689a      	ldr	r2, [r3, #8]
 800c8ea:	4baf      	ldr	r3, [pc, #700]	; (800cba8 <UART_SetConfig+0x330>)
 800c8ec:	4013      	ands	r3, r2
 800c8ee:	697a      	ldr	r2, [r7, #20]
 800c8f0:	6812      	ldr	r2, [r2, #0]
 800c8f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c8f4:	430b      	orrs	r3, r1
 800c8f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8fe:	f023 010f 	bic.w	r1, r3, #15
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	430a      	orrs	r2, r1
 800c90c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4aa6      	ldr	r2, [pc, #664]	; (800cbac <UART_SetConfig+0x334>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d177      	bne.n	800ca08 <UART_SetConfig+0x190>
 800c918:	4ba5      	ldr	r3, [pc, #660]	; (800cbb0 <UART_SetConfig+0x338>)
 800c91a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c91c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c920:	2b28      	cmp	r3, #40	; 0x28
 800c922:	d86d      	bhi.n	800ca00 <UART_SetConfig+0x188>
 800c924:	a201      	add	r2, pc, #4	; (adr r2, 800c92c <UART_SetConfig+0xb4>)
 800c926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c92a:	bf00      	nop
 800c92c:	0800c9d1 	.word	0x0800c9d1
 800c930:	0800ca01 	.word	0x0800ca01
 800c934:	0800ca01 	.word	0x0800ca01
 800c938:	0800ca01 	.word	0x0800ca01
 800c93c:	0800ca01 	.word	0x0800ca01
 800c940:	0800ca01 	.word	0x0800ca01
 800c944:	0800ca01 	.word	0x0800ca01
 800c948:	0800ca01 	.word	0x0800ca01
 800c94c:	0800c9d9 	.word	0x0800c9d9
 800c950:	0800ca01 	.word	0x0800ca01
 800c954:	0800ca01 	.word	0x0800ca01
 800c958:	0800ca01 	.word	0x0800ca01
 800c95c:	0800ca01 	.word	0x0800ca01
 800c960:	0800ca01 	.word	0x0800ca01
 800c964:	0800ca01 	.word	0x0800ca01
 800c968:	0800ca01 	.word	0x0800ca01
 800c96c:	0800c9e1 	.word	0x0800c9e1
 800c970:	0800ca01 	.word	0x0800ca01
 800c974:	0800ca01 	.word	0x0800ca01
 800c978:	0800ca01 	.word	0x0800ca01
 800c97c:	0800ca01 	.word	0x0800ca01
 800c980:	0800ca01 	.word	0x0800ca01
 800c984:	0800ca01 	.word	0x0800ca01
 800c988:	0800ca01 	.word	0x0800ca01
 800c98c:	0800c9e9 	.word	0x0800c9e9
 800c990:	0800ca01 	.word	0x0800ca01
 800c994:	0800ca01 	.word	0x0800ca01
 800c998:	0800ca01 	.word	0x0800ca01
 800c99c:	0800ca01 	.word	0x0800ca01
 800c9a0:	0800ca01 	.word	0x0800ca01
 800c9a4:	0800ca01 	.word	0x0800ca01
 800c9a8:	0800ca01 	.word	0x0800ca01
 800c9ac:	0800c9f1 	.word	0x0800c9f1
 800c9b0:	0800ca01 	.word	0x0800ca01
 800c9b4:	0800ca01 	.word	0x0800ca01
 800c9b8:	0800ca01 	.word	0x0800ca01
 800c9bc:	0800ca01 	.word	0x0800ca01
 800c9c0:	0800ca01 	.word	0x0800ca01
 800c9c4:	0800ca01 	.word	0x0800ca01
 800c9c8:	0800ca01 	.word	0x0800ca01
 800c9cc:	0800c9f9 	.word	0x0800c9f9
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9d6:	e326      	b.n	800d026 <UART_SetConfig+0x7ae>
 800c9d8:	2304      	movs	r3, #4
 800c9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9de:	e322      	b.n	800d026 <UART_SetConfig+0x7ae>
 800c9e0:	2308      	movs	r3, #8
 800c9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9e6:	e31e      	b.n	800d026 <UART_SetConfig+0x7ae>
 800c9e8:	2310      	movs	r3, #16
 800c9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ee:	e31a      	b.n	800d026 <UART_SetConfig+0x7ae>
 800c9f0:	2320      	movs	r3, #32
 800c9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9f6:	e316      	b.n	800d026 <UART_SetConfig+0x7ae>
 800c9f8:	2340      	movs	r3, #64	; 0x40
 800c9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9fe:	e312      	b.n	800d026 <UART_SetConfig+0x7ae>
 800ca00:	2380      	movs	r3, #128	; 0x80
 800ca02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca06:	e30e      	b.n	800d026 <UART_SetConfig+0x7ae>
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a69      	ldr	r2, [pc, #420]	; (800cbb4 <UART_SetConfig+0x33c>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d130      	bne.n	800ca74 <UART_SetConfig+0x1fc>
 800ca12:	4b67      	ldr	r3, [pc, #412]	; (800cbb0 <UART_SetConfig+0x338>)
 800ca14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca16:	f003 0307 	and.w	r3, r3, #7
 800ca1a:	2b05      	cmp	r3, #5
 800ca1c:	d826      	bhi.n	800ca6c <UART_SetConfig+0x1f4>
 800ca1e:	a201      	add	r2, pc, #4	; (adr r2, 800ca24 <UART_SetConfig+0x1ac>)
 800ca20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca24:	0800ca3d 	.word	0x0800ca3d
 800ca28:	0800ca45 	.word	0x0800ca45
 800ca2c:	0800ca4d 	.word	0x0800ca4d
 800ca30:	0800ca55 	.word	0x0800ca55
 800ca34:	0800ca5d 	.word	0x0800ca5d
 800ca38:	0800ca65 	.word	0x0800ca65
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca42:	e2f0      	b.n	800d026 <UART_SetConfig+0x7ae>
 800ca44:	2304      	movs	r3, #4
 800ca46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca4a:	e2ec      	b.n	800d026 <UART_SetConfig+0x7ae>
 800ca4c:	2308      	movs	r3, #8
 800ca4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca52:	e2e8      	b.n	800d026 <UART_SetConfig+0x7ae>
 800ca54:	2310      	movs	r3, #16
 800ca56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca5a:	e2e4      	b.n	800d026 <UART_SetConfig+0x7ae>
 800ca5c:	2320      	movs	r3, #32
 800ca5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca62:	e2e0      	b.n	800d026 <UART_SetConfig+0x7ae>
 800ca64:	2340      	movs	r3, #64	; 0x40
 800ca66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca6a:	e2dc      	b.n	800d026 <UART_SetConfig+0x7ae>
 800ca6c:	2380      	movs	r3, #128	; 0x80
 800ca6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca72:	e2d8      	b.n	800d026 <UART_SetConfig+0x7ae>
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a4f      	ldr	r2, [pc, #316]	; (800cbb8 <UART_SetConfig+0x340>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d130      	bne.n	800cae0 <UART_SetConfig+0x268>
 800ca7e:	4b4c      	ldr	r3, [pc, #304]	; (800cbb0 <UART_SetConfig+0x338>)
 800ca80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca82:	f003 0307 	and.w	r3, r3, #7
 800ca86:	2b05      	cmp	r3, #5
 800ca88:	d826      	bhi.n	800cad8 <UART_SetConfig+0x260>
 800ca8a:	a201      	add	r2, pc, #4	; (adr r2, 800ca90 <UART_SetConfig+0x218>)
 800ca8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca90:	0800caa9 	.word	0x0800caa9
 800ca94:	0800cab1 	.word	0x0800cab1
 800ca98:	0800cab9 	.word	0x0800cab9
 800ca9c:	0800cac1 	.word	0x0800cac1
 800caa0:	0800cac9 	.word	0x0800cac9
 800caa4:	0800cad1 	.word	0x0800cad1
 800caa8:	2300      	movs	r3, #0
 800caaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caae:	e2ba      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cab0:	2304      	movs	r3, #4
 800cab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cab6:	e2b6      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cab8:	2308      	movs	r3, #8
 800caba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cabe:	e2b2      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cac0:	2310      	movs	r3, #16
 800cac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cac6:	e2ae      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cac8:	2320      	movs	r3, #32
 800caca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cace:	e2aa      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cad0:	2340      	movs	r3, #64	; 0x40
 800cad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cad6:	e2a6      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cad8:	2380      	movs	r3, #128	; 0x80
 800cada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cade:	e2a2      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a35      	ldr	r2, [pc, #212]	; (800cbbc <UART_SetConfig+0x344>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d130      	bne.n	800cb4c <UART_SetConfig+0x2d4>
 800caea:	4b31      	ldr	r3, [pc, #196]	; (800cbb0 <UART_SetConfig+0x338>)
 800caec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caee:	f003 0307 	and.w	r3, r3, #7
 800caf2:	2b05      	cmp	r3, #5
 800caf4:	d826      	bhi.n	800cb44 <UART_SetConfig+0x2cc>
 800caf6:	a201      	add	r2, pc, #4	; (adr r2, 800cafc <UART_SetConfig+0x284>)
 800caf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cafc:	0800cb15 	.word	0x0800cb15
 800cb00:	0800cb1d 	.word	0x0800cb1d
 800cb04:	0800cb25 	.word	0x0800cb25
 800cb08:	0800cb2d 	.word	0x0800cb2d
 800cb0c:	0800cb35 	.word	0x0800cb35
 800cb10:	0800cb3d 	.word	0x0800cb3d
 800cb14:	2300      	movs	r3, #0
 800cb16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb1a:	e284      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cb1c:	2304      	movs	r3, #4
 800cb1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb22:	e280      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cb24:	2308      	movs	r3, #8
 800cb26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb2a:	e27c      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cb2c:	2310      	movs	r3, #16
 800cb2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb32:	e278      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cb34:	2320      	movs	r3, #32
 800cb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb3a:	e274      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cb3c:	2340      	movs	r3, #64	; 0x40
 800cb3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb42:	e270      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cb44:	2380      	movs	r3, #128	; 0x80
 800cb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb4a:	e26c      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a1b      	ldr	r2, [pc, #108]	; (800cbc0 <UART_SetConfig+0x348>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d142      	bne.n	800cbdc <UART_SetConfig+0x364>
 800cb56:	4b16      	ldr	r3, [pc, #88]	; (800cbb0 <UART_SetConfig+0x338>)
 800cb58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb5a:	f003 0307 	and.w	r3, r3, #7
 800cb5e:	2b05      	cmp	r3, #5
 800cb60:	d838      	bhi.n	800cbd4 <UART_SetConfig+0x35c>
 800cb62:	a201      	add	r2, pc, #4	; (adr r2, 800cb68 <UART_SetConfig+0x2f0>)
 800cb64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb68:	0800cb81 	.word	0x0800cb81
 800cb6c:	0800cb89 	.word	0x0800cb89
 800cb70:	0800cb91 	.word	0x0800cb91
 800cb74:	0800cb99 	.word	0x0800cb99
 800cb78:	0800cbc5 	.word	0x0800cbc5
 800cb7c:	0800cbcd 	.word	0x0800cbcd
 800cb80:	2300      	movs	r3, #0
 800cb82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb86:	e24e      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cb88:	2304      	movs	r3, #4
 800cb8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb8e:	e24a      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cb90:	2308      	movs	r3, #8
 800cb92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb96:	e246      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cb98:	2310      	movs	r3, #16
 800cb9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb9e:	e242      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cba0:	cfff69f3 	.word	0xcfff69f3
 800cba4:	58000c00 	.word	0x58000c00
 800cba8:	11fff4ff 	.word	0x11fff4ff
 800cbac:	40011000 	.word	0x40011000
 800cbb0:	58024400 	.word	0x58024400
 800cbb4:	40004400 	.word	0x40004400
 800cbb8:	40004800 	.word	0x40004800
 800cbbc:	40004c00 	.word	0x40004c00
 800cbc0:	40005000 	.word	0x40005000
 800cbc4:	2320      	movs	r3, #32
 800cbc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbca:	e22c      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cbcc:	2340      	movs	r3, #64	; 0x40
 800cbce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbd2:	e228      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cbd4:	2380      	movs	r3, #128	; 0x80
 800cbd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbda:	e224      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	4ab1      	ldr	r2, [pc, #708]	; (800cea8 <UART_SetConfig+0x630>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d176      	bne.n	800ccd4 <UART_SetConfig+0x45c>
 800cbe6:	4bb1      	ldr	r3, [pc, #708]	; (800ceac <UART_SetConfig+0x634>)
 800cbe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cbee:	2b28      	cmp	r3, #40	; 0x28
 800cbf0:	d86c      	bhi.n	800cccc <UART_SetConfig+0x454>
 800cbf2:	a201      	add	r2, pc, #4	; (adr r2, 800cbf8 <UART_SetConfig+0x380>)
 800cbf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbf8:	0800cc9d 	.word	0x0800cc9d
 800cbfc:	0800cccd 	.word	0x0800cccd
 800cc00:	0800cccd 	.word	0x0800cccd
 800cc04:	0800cccd 	.word	0x0800cccd
 800cc08:	0800cccd 	.word	0x0800cccd
 800cc0c:	0800cccd 	.word	0x0800cccd
 800cc10:	0800cccd 	.word	0x0800cccd
 800cc14:	0800cccd 	.word	0x0800cccd
 800cc18:	0800cca5 	.word	0x0800cca5
 800cc1c:	0800cccd 	.word	0x0800cccd
 800cc20:	0800cccd 	.word	0x0800cccd
 800cc24:	0800cccd 	.word	0x0800cccd
 800cc28:	0800cccd 	.word	0x0800cccd
 800cc2c:	0800cccd 	.word	0x0800cccd
 800cc30:	0800cccd 	.word	0x0800cccd
 800cc34:	0800cccd 	.word	0x0800cccd
 800cc38:	0800ccad 	.word	0x0800ccad
 800cc3c:	0800cccd 	.word	0x0800cccd
 800cc40:	0800cccd 	.word	0x0800cccd
 800cc44:	0800cccd 	.word	0x0800cccd
 800cc48:	0800cccd 	.word	0x0800cccd
 800cc4c:	0800cccd 	.word	0x0800cccd
 800cc50:	0800cccd 	.word	0x0800cccd
 800cc54:	0800cccd 	.word	0x0800cccd
 800cc58:	0800ccb5 	.word	0x0800ccb5
 800cc5c:	0800cccd 	.word	0x0800cccd
 800cc60:	0800cccd 	.word	0x0800cccd
 800cc64:	0800cccd 	.word	0x0800cccd
 800cc68:	0800cccd 	.word	0x0800cccd
 800cc6c:	0800cccd 	.word	0x0800cccd
 800cc70:	0800cccd 	.word	0x0800cccd
 800cc74:	0800cccd 	.word	0x0800cccd
 800cc78:	0800ccbd 	.word	0x0800ccbd
 800cc7c:	0800cccd 	.word	0x0800cccd
 800cc80:	0800cccd 	.word	0x0800cccd
 800cc84:	0800cccd 	.word	0x0800cccd
 800cc88:	0800cccd 	.word	0x0800cccd
 800cc8c:	0800cccd 	.word	0x0800cccd
 800cc90:	0800cccd 	.word	0x0800cccd
 800cc94:	0800cccd 	.word	0x0800cccd
 800cc98:	0800ccc5 	.word	0x0800ccc5
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cca2:	e1c0      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cca4:	2304      	movs	r3, #4
 800cca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccaa:	e1bc      	b.n	800d026 <UART_SetConfig+0x7ae>
 800ccac:	2308      	movs	r3, #8
 800ccae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccb2:	e1b8      	b.n	800d026 <UART_SetConfig+0x7ae>
 800ccb4:	2310      	movs	r3, #16
 800ccb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccba:	e1b4      	b.n	800d026 <UART_SetConfig+0x7ae>
 800ccbc:	2320      	movs	r3, #32
 800ccbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccc2:	e1b0      	b.n	800d026 <UART_SetConfig+0x7ae>
 800ccc4:	2340      	movs	r3, #64	; 0x40
 800ccc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccca:	e1ac      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cccc:	2380      	movs	r3, #128	; 0x80
 800ccce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccd2:	e1a8      	b.n	800d026 <UART_SetConfig+0x7ae>
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4a75      	ldr	r2, [pc, #468]	; (800ceb0 <UART_SetConfig+0x638>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d130      	bne.n	800cd40 <UART_SetConfig+0x4c8>
 800ccde:	4b73      	ldr	r3, [pc, #460]	; (800ceac <UART_SetConfig+0x634>)
 800cce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cce2:	f003 0307 	and.w	r3, r3, #7
 800cce6:	2b05      	cmp	r3, #5
 800cce8:	d826      	bhi.n	800cd38 <UART_SetConfig+0x4c0>
 800ccea:	a201      	add	r2, pc, #4	; (adr r2, 800ccf0 <UART_SetConfig+0x478>)
 800ccec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccf0:	0800cd09 	.word	0x0800cd09
 800ccf4:	0800cd11 	.word	0x0800cd11
 800ccf8:	0800cd19 	.word	0x0800cd19
 800ccfc:	0800cd21 	.word	0x0800cd21
 800cd00:	0800cd29 	.word	0x0800cd29
 800cd04:	0800cd31 	.word	0x0800cd31
 800cd08:	2300      	movs	r3, #0
 800cd0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd0e:	e18a      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cd10:	2304      	movs	r3, #4
 800cd12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd16:	e186      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cd18:	2308      	movs	r3, #8
 800cd1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd1e:	e182      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cd20:	2310      	movs	r3, #16
 800cd22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd26:	e17e      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cd28:	2320      	movs	r3, #32
 800cd2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd2e:	e17a      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cd30:	2340      	movs	r3, #64	; 0x40
 800cd32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd36:	e176      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cd38:	2380      	movs	r3, #128	; 0x80
 800cd3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd3e:	e172      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4a5b      	ldr	r2, [pc, #364]	; (800ceb4 <UART_SetConfig+0x63c>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d130      	bne.n	800cdac <UART_SetConfig+0x534>
 800cd4a:	4b58      	ldr	r3, [pc, #352]	; (800ceac <UART_SetConfig+0x634>)
 800cd4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd4e:	f003 0307 	and.w	r3, r3, #7
 800cd52:	2b05      	cmp	r3, #5
 800cd54:	d826      	bhi.n	800cda4 <UART_SetConfig+0x52c>
 800cd56:	a201      	add	r2, pc, #4	; (adr r2, 800cd5c <UART_SetConfig+0x4e4>)
 800cd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd5c:	0800cd75 	.word	0x0800cd75
 800cd60:	0800cd7d 	.word	0x0800cd7d
 800cd64:	0800cd85 	.word	0x0800cd85
 800cd68:	0800cd8d 	.word	0x0800cd8d
 800cd6c:	0800cd95 	.word	0x0800cd95
 800cd70:	0800cd9d 	.word	0x0800cd9d
 800cd74:	2300      	movs	r3, #0
 800cd76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd7a:	e154      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cd7c:	2304      	movs	r3, #4
 800cd7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd82:	e150      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cd84:	2308      	movs	r3, #8
 800cd86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd8a:	e14c      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cd8c:	2310      	movs	r3, #16
 800cd8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd92:	e148      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cd94:	2320      	movs	r3, #32
 800cd96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd9a:	e144      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cd9c:	2340      	movs	r3, #64	; 0x40
 800cd9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cda2:	e140      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cda4:	2380      	movs	r3, #128	; 0x80
 800cda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdaa:	e13c      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a41      	ldr	r2, [pc, #260]	; (800ceb8 <UART_SetConfig+0x640>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	f040 8082 	bne.w	800cebc <UART_SetConfig+0x644>
 800cdb8:	4b3c      	ldr	r3, [pc, #240]	; (800ceac <UART_SetConfig+0x634>)
 800cdba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cdc0:	2b28      	cmp	r3, #40	; 0x28
 800cdc2:	d86d      	bhi.n	800cea0 <UART_SetConfig+0x628>
 800cdc4:	a201      	add	r2, pc, #4	; (adr r2, 800cdcc <UART_SetConfig+0x554>)
 800cdc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdca:	bf00      	nop
 800cdcc:	0800ce71 	.word	0x0800ce71
 800cdd0:	0800cea1 	.word	0x0800cea1
 800cdd4:	0800cea1 	.word	0x0800cea1
 800cdd8:	0800cea1 	.word	0x0800cea1
 800cddc:	0800cea1 	.word	0x0800cea1
 800cde0:	0800cea1 	.word	0x0800cea1
 800cde4:	0800cea1 	.word	0x0800cea1
 800cde8:	0800cea1 	.word	0x0800cea1
 800cdec:	0800ce79 	.word	0x0800ce79
 800cdf0:	0800cea1 	.word	0x0800cea1
 800cdf4:	0800cea1 	.word	0x0800cea1
 800cdf8:	0800cea1 	.word	0x0800cea1
 800cdfc:	0800cea1 	.word	0x0800cea1
 800ce00:	0800cea1 	.word	0x0800cea1
 800ce04:	0800cea1 	.word	0x0800cea1
 800ce08:	0800cea1 	.word	0x0800cea1
 800ce0c:	0800ce81 	.word	0x0800ce81
 800ce10:	0800cea1 	.word	0x0800cea1
 800ce14:	0800cea1 	.word	0x0800cea1
 800ce18:	0800cea1 	.word	0x0800cea1
 800ce1c:	0800cea1 	.word	0x0800cea1
 800ce20:	0800cea1 	.word	0x0800cea1
 800ce24:	0800cea1 	.word	0x0800cea1
 800ce28:	0800cea1 	.word	0x0800cea1
 800ce2c:	0800ce89 	.word	0x0800ce89
 800ce30:	0800cea1 	.word	0x0800cea1
 800ce34:	0800cea1 	.word	0x0800cea1
 800ce38:	0800cea1 	.word	0x0800cea1
 800ce3c:	0800cea1 	.word	0x0800cea1
 800ce40:	0800cea1 	.word	0x0800cea1
 800ce44:	0800cea1 	.word	0x0800cea1
 800ce48:	0800cea1 	.word	0x0800cea1
 800ce4c:	0800ce91 	.word	0x0800ce91
 800ce50:	0800cea1 	.word	0x0800cea1
 800ce54:	0800cea1 	.word	0x0800cea1
 800ce58:	0800cea1 	.word	0x0800cea1
 800ce5c:	0800cea1 	.word	0x0800cea1
 800ce60:	0800cea1 	.word	0x0800cea1
 800ce64:	0800cea1 	.word	0x0800cea1
 800ce68:	0800cea1 	.word	0x0800cea1
 800ce6c:	0800ce99 	.word	0x0800ce99
 800ce70:	2301      	movs	r3, #1
 800ce72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce76:	e0d6      	b.n	800d026 <UART_SetConfig+0x7ae>
 800ce78:	2304      	movs	r3, #4
 800ce7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce7e:	e0d2      	b.n	800d026 <UART_SetConfig+0x7ae>
 800ce80:	2308      	movs	r3, #8
 800ce82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce86:	e0ce      	b.n	800d026 <UART_SetConfig+0x7ae>
 800ce88:	2310      	movs	r3, #16
 800ce8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce8e:	e0ca      	b.n	800d026 <UART_SetConfig+0x7ae>
 800ce90:	2320      	movs	r3, #32
 800ce92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce96:	e0c6      	b.n	800d026 <UART_SetConfig+0x7ae>
 800ce98:	2340      	movs	r3, #64	; 0x40
 800ce9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce9e:	e0c2      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cea0:	2380      	movs	r3, #128	; 0x80
 800cea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cea6:	e0be      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cea8:	40011400 	.word	0x40011400
 800ceac:	58024400 	.word	0x58024400
 800ceb0:	40007800 	.word	0x40007800
 800ceb4:	40007c00 	.word	0x40007c00
 800ceb8:	40011800 	.word	0x40011800
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4aad      	ldr	r2, [pc, #692]	; (800d178 <UART_SetConfig+0x900>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d176      	bne.n	800cfb4 <UART_SetConfig+0x73c>
 800cec6:	4bad      	ldr	r3, [pc, #692]	; (800d17c <UART_SetConfig+0x904>)
 800cec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ceca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cece:	2b28      	cmp	r3, #40	; 0x28
 800ced0:	d86c      	bhi.n	800cfac <UART_SetConfig+0x734>
 800ced2:	a201      	add	r2, pc, #4	; (adr r2, 800ced8 <UART_SetConfig+0x660>)
 800ced4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced8:	0800cf7d 	.word	0x0800cf7d
 800cedc:	0800cfad 	.word	0x0800cfad
 800cee0:	0800cfad 	.word	0x0800cfad
 800cee4:	0800cfad 	.word	0x0800cfad
 800cee8:	0800cfad 	.word	0x0800cfad
 800ceec:	0800cfad 	.word	0x0800cfad
 800cef0:	0800cfad 	.word	0x0800cfad
 800cef4:	0800cfad 	.word	0x0800cfad
 800cef8:	0800cf85 	.word	0x0800cf85
 800cefc:	0800cfad 	.word	0x0800cfad
 800cf00:	0800cfad 	.word	0x0800cfad
 800cf04:	0800cfad 	.word	0x0800cfad
 800cf08:	0800cfad 	.word	0x0800cfad
 800cf0c:	0800cfad 	.word	0x0800cfad
 800cf10:	0800cfad 	.word	0x0800cfad
 800cf14:	0800cfad 	.word	0x0800cfad
 800cf18:	0800cf8d 	.word	0x0800cf8d
 800cf1c:	0800cfad 	.word	0x0800cfad
 800cf20:	0800cfad 	.word	0x0800cfad
 800cf24:	0800cfad 	.word	0x0800cfad
 800cf28:	0800cfad 	.word	0x0800cfad
 800cf2c:	0800cfad 	.word	0x0800cfad
 800cf30:	0800cfad 	.word	0x0800cfad
 800cf34:	0800cfad 	.word	0x0800cfad
 800cf38:	0800cf95 	.word	0x0800cf95
 800cf3c:	0800cfad 	.word	0x0800cfad
 800cf40:	0800cfad 	.word	0x0800cfad
 800cf44:	0800cfad 	.word	0x0800cfad
 800cf48:	0800cfad 	.word	0x0800cfad
 800cf4c:	0800cfad 	.word	0x0800cfad
 800cf50:	0800cfad 	.word	0x0800cfad
 800cf54:	0800cfad 	.word	0x0800cfad
 800cf58:	0800cf9d 	.word	0x0800cf9d
 800cf5c:	0800cfad 	.word	0x0800cfad
 800cf60:	0800cfad 	.word	0x0800cfad
 800cf64:	0800cfad 	.word	0x0800cfad
 800cf68:	0800cfad 	.word	0x0800cfad
 800cf6c:	0800cfad 	.word	0x0800cfad
 800cf70:	0800cfad 	.word	0x0800cfad
 800cf74:	0800cfad 	.word	0x0800cfad
 800cf78:	0800cfa5 	.word	0x0800cfa5
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf82:	e050      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cf84:	2304      	movs	r3, #4
 800cf86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf8a:	e04c      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cf8c:	2308      	movs	r3, #8
 800cf8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf92:	e048      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cf94:	2310      	movs	r3, #16
 800cf96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf9a:	e044      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cf9c:	2320      	movs	r3, #32
 800cf9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfa2:	e040      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cfa4:	2340      	movs	r3, #64	; 0x40
 800cfa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfaa:	e03c      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cfac:	2380      	movs	r3, #128	; 0x80
 800cfae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfb2:	e038      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4a71      	ldr	r2, [pc, #452]	; (800d180 <UART_SetConfig+0x908>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d130      	bne.n	800d020 <UART_SetConfig+0x7a8>
 800cfbe:	4b6f      	ldr	r3, [pc, #444]	; (800d17c <UART_SetConfig+0x904>)
 800cfc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfc2:	f003 0307 	and.w	r3, r3, #7
 800cfc6:	2b05      	cmp	r3, #5
 800cfc8:	d826      	bhi.n	800d018 <UART_SetConfig+0x7a0>
 800cfca:	a201      	add	r2, pc, #4	; (adr r2, 800cfd0 <UART_SetConfig+0x758>)
 800cfcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfd0:	0800cfe9 	.word	0x0800cfe9
 800cfd4:	0800cff1 	.word	0x0800cff1
 800cfd8:	0800cff9 	.word	0x0800cff9
 800cfdc:	0800d001 	.word	0x0800d001
 800cfe0:	0800d009 	.word	0x0800d009
 800cfe4:	0800d011 	.word	0x0800d011
 800cfe8:	2302      	movs	r3, #2
 800cfea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfee:	e01a      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cff0:	2304      	movs	r3, #4
 800cff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cff6:	e016      	b.n	800d026 <UART_SetConfig+0x7ae>
 800cff8:	2308      	movs	r3, #8
 800cffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cffe:	e012      	b.n	800d026 <UART_SetConfig+0x7ae>
 800d000:	2310      	movs	r3, #16
 800d002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d006:	e00e      	b.n	800d026 <UART_SetConfig+0x7ae>
 800d008:	2320      	movs	r3, #32
 800d00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d00e:	e00a      	b.n	800d026 <UART_SetConfig+0x7ae>
 800d010:	2340      	movs	r3, #64	; 0x40
 800d012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d016:	e006      	b.n	800d026 <UART_SetConfig+0x7ae>
 800d018:	2380      	movs	r3, #128	; 0x80
 800d01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d01e:	e002      	b.n	800d026 <UART_SetConfig+0x7ae>
 800d020:	2380      	movs	r3, #128	; 0x80
 800d022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4a55      	ldr	r2, [pc, #340]	; (800d180 <UART_SetConfig+0x908>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	f040 80f8 	bne.w	800d222 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d032:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d036:	2b20      	cmp	r3, #32
 800d038:	dc46      	bgt.n	800d0c8 <UART_SetConfig+0x850>
 800d03a:	2b02      	cmp	r3, #2
 800d03c:	db75      	blt.n	800d12a <UART_SetConfig+0x8b2>
 800d03e:	3b02      	subs	r3, #2
 800d040:	2b1e      	cmp	r3, #30
 800d042:	d872      	bhi.n	800d12a <UART_SetConfig+0x8b2>
 800d044:	a201      	add	r2, pc, #4	; (adr r2, 800d04c <UART_SetConfig+0x7d4>)
 800d046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d04a:	bf00      	nop
 800d04c:	0800d0cf 	.word	0x0800d0cf
 800d050:	0800d12b 	.word	0x0800d12b
 800d054:	0800d0d7 	.word	0x0800d0d7
 800d058:	0800d12b 	.word	0x0800d12b
 800d05c:	0800d12b 	.word	0x0800d12b
 800d060:	0800d12b 	.word	0x0800d12b
 800d064:	0800d0e7 	.word	0x0800d0e7
 800d068:	0800d12b 	.word	0x0800d12b
 800d06c:	0800d12b 	.word	0x0800d12b
 800d070:	0800d12b 	.word	0x0800d12b
 800d074:	0800d12b 	.word	0x0800d12b
 800d078:	0800d12b 	.word	0x0800d12b
 800d07c:	0800d12b 	.word	0x0800d12b
 800d080:	0800d12b 	.word	0x0800d12b
 800d084:	0800d0f7 	.word	0x0800d0f7
 800d088:	0800d12b 	.word	0x0800d12b
 800d08c:	0800d12b 	.word	0x0800d12b
 800d090:	0800d12b 	.word	0x0800d12b
 800d094:	0800d12b 	.word	0x0800d12b
 800d098:	0800d12b 	.word	0x0800d12b
 800d09c:	0800d12b 	.word	0x0800d12b
 800d0a0:	0800d12b 	.word	0x0800d12b
 800d0a4:	0800d12b 	.word	0x0800d12b
 800d0a8:	0800d12b 	.word	0x0800d12b
 800d0ac:	0800d12b 	.word	0x0800d12b
 800d0b0:	0800d12b 	.word	0x0800d12b
 800d0b4:	0800d12b 	.word	0x0800d12b
 800d0b8:	0800d12b 	.word	0x0800d12b
 800d0bc:	0800d12b 	.word	0x0800d12b
 800d0c0:	0800d12b 	.word	0x0800d12b
 800d0c4:	0800d11d 	.word	0x0800d11d
 800d0c8:	2b40      	cmp	r3, #64	; 0x40
 800d0ca:	d02a      	beq.n	800d122 <UART_SetConfig+0x8aa>
 800d0cc:	e02d      	b.n	800d12a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d0ce:	f7fc fdfd 	bl	8009ccc <HAL_RCCEx_GetD3PCLK1Freq>
 800d0d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d0d4:	e02f      	b.n	800d136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7fc fe0c 	bl	8009cf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0e4:	e027      	b.n	800d136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0e6:	f107 0318 	add.w	r3, r7, #24
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7fc ff58 	bl	8009fa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0f0:	69fb      	ldr	r3, [r7, #28]
 800d0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0f4:	e01f      	b.n	800d136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0f6:	4b21      	ldr	r3, [pc, #132]	; (800d17c <UART_SetConfig+0x904>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f003 0320 	and.w	r3, r3, #32
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d009      	beq.n	800d116 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d102:	4b1e      	ldr	r3, [pc, #120]	; (800d17c <UART_SetConfig+0x904>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	08db      	lsrs	r3, r3, #3
 800d108:	f003 0303 	and.w	r3, r3, #3
 800d10c:	4a1d      	ldr	r2, [pc, #116]	; (800d184 <UART_SetConfig+0x90c>)
 800d10e:	fa22 f303 	lsr.w	r3, r2, r3
 800d112:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d114:	e00f      	b.n	800d136 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d116:	4b1b      	ldr	r3, [pc, #108]	; (800d184 <UART_SetConfig+0x90c>)
 800d118:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d11a:	e00c      	b.n	800d136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d11c:	4b1a      	ldr	r3, [pc, #104]	; (800d188 <UART_SetConfig+0x910>)
 800d11e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d120:	e009      	b.n	800d136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d128:	e005      	b.n	800d136 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d12a:	2300      	movs	r3, #0
 800d12c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d134:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d138:	2b00      	cmp	r3, #0
 800d13a:	f000 81ee 	beq.w	800d51a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d142:	4a12      	ldr	r2, [pc, #72]	; (800d18c <UART_SetConfig+0x914>)
 800d144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d148:	461a      	mov	r2, r3
 800d14a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d14c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d150:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	685a      	ldr	r2, [r3, #4]
 800d156:	4613      	mov	r3, r2
 800d158:	005b      	lsls	r3, r3, #1
 800d15a:	4413      	add	r3, r2
 800d15c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d15e:	429a      	cmp	r2, r3
 800d160:	d305      	bcc.n	800d16e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d910      	bls.n	800d190 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d16e:	2301      	movs	r3, #1
 800d170:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d174:	e1d1      	b.n	800d51a <UART_SetConfig+0xca2>
 800d176:	bf00      	nop
 800d178:	40011c00 	.word	0x40011c00
 800d17c:	58024400 	.word	0x58024400
 800d180:	58000c00 	.word	0x58000c00
 800d184:	03d09000 	.word	0x03d09000
 800d188:	003d0900 	.word	0x003d0900
 800d18c:	0800e75c 	.word	0x0800e75c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d192:	2200      	movs	r2, #0
 800d194:	60bb      	str	r3, [r7, #8]
 800d196:	60fa      	str	r2, [r7, #12]
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d19c:	4ac0      	ldr	r2, [pc, #768]	; (800d4a0 <UART_SetConfig+0xc28>)
 800d19e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	603b      	str	r3, [r7, #0]
 800d1a8:	607a      	str	r2, [r7, #4]
 800d1aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d1b2:	f7f3 f8b3 	bl	800031c <__aeabi_uldivmod>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	4610      	mov	r0, r2
 800d1bc:	4619      	mov	r1, r3
 800d1be:	f04f 0200 	mov.w	r2, #0
 800d1c2:	f04f 0300 	mov.w	r3, #0
 800d1c6:	020b      	lsls	r3, r1, #8
 800d1c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d1cc:	0202      	lsls	r2, r0, #8
 800d1ce:	6979      	ldr	r1, [r7, #20]
 800d1d0:	6849      	ldr	r1, [r1, #4]
 800d1d2:	0849      	lsrs	r1, r1, #1
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	460c      	mov	r4, r1
 800d1d8:	4605      	mov	r5, r0
 800d1da:	eb12 0804 	adds.w	r8, r2, r4
 800d1de:	eb43 0905 	adc.w	r9, r3, r5
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	469a      	mov	sl, r3
 800d1ea:	4693      	mov	fp, r2
 800d1ec:	4652      	mov	r2, sl
 800d1ee:	465b      	mov	r3, fp
 800d1f0:	4640      	mov	r0, r8
 800d1f2:	4649      	mov	r1, r9
 800d1f4:	f7f3 f892 	bl	800031c <__aeabi_uldivmod>
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	460b      	mov	r3, r1
 800d1fc:	4613      	mov	r3, r2
 800d1fe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d202:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d206:	d308      	bcc.n	800d21a <UART_SetConfig+0x9a2>
 800d208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d20a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d20e:	d204      	bcs.n	800d21a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d216:	60da      	str	r2, [r3, #12]
 800d218:	e17f      	b.n	800d51a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d21a:	2301      	movs	r3, #1
 800d21c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d220:	e17b      	b.n	800d51a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	69db      	ldr	r3, [r3, #28]
 800d226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d22a:	f040 80bd 	bne.w	800d3a8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d22e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d232:	2b20      	cmp	r3, #32
 800d234:	dc48      	bgt.n	800d2c8 <UART_SetConfig+0xa50>
 800d236:	2b00      	cmp	r3, #0
 800d238:	db7b      	blt.n	800d332 <UART_SetConfig+0xaba>
 800d23a:	2b20      	cmp	r3, #32
 800d23c:	d879      	bhi.n	800d332 <UART_SetConfig+0xaba>
 800d23e:	a201      	add	r2, pc, #4	; (adr r2, 800d244 <UART_SetConfig+0x9cc>)
 800d240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d244:	0800d2cf 	.word	0x0800d2cf
 800d248:	0800d2d7 	.word	0x0800d2d7
 800d24c:	0800d333 	.word	0x0800d333
 800d250:	0800d333 	.word	0x0800d333
 800d254:	0800d2df 	.word	0x0800d2df
 800d258:	0800d333 	.word	0x0800d333
 800d25c:	0800d333 	.word	0x0800d333
 800d260:	0800d333 	.word	0x0800d333
 800d264:	0800d2ef 	.word	0x0800d2ef
 800d268:	0800d333 	.word	0x0800d333
 800d26c:	0800d333 	.word	0x0800d333
 800d270:	0800d333 	.word	0x0800d333
 800d274:	0800d333 	.word	0x0800d333
 800d278:	0800d333 	.word	0x0800d333
 800d27c:	0800d333 	.word	0x0800d333
 800d280:	0800d333 	.word	0x0800d333
 800d284:	0800d2ff 	.word	0x0800d2ff
 800d288:	0800d333 	.word	0x0800d333
 800d28c:	0800d333 	.word	0x0800d333
 800d290:	0800d333 	.word	0x0800d333
 800d294:	0800d333 	.word	0x0800d333
 800d298:	0800d333 	.word	0x0800d333
 800d29c:	0800d333 	.word	0x0800d333
 800d2a0:	0800d333 	.word	0x0800d333
 800d2a4:	0800d333 	.word	0x0800d333
 800d2a8:	0800d333 	.word	0x0800d333
 800d2ac:	0800d333 	.word	0x0800d333
 800d2b0:	0800d333 	.word	0x0800d333
 800d2b4:	0800d333 	.word	0x0800d333
 800d2b8:	0800d333 	.word	0x0800d333
 800d2bc:	0800d333 	.word	0x0800d333
 800d2c0:	0800d333 	.word	0x0800d333
 800d2c4:	0800d325 	.word	0x0800d325
 800d2c8:	2b40      	cmp	r3, #64	; 0x40
 800d2ca:	d02e      	beq.n	800d32a <UART_SetConfig+0xab2>
 800d2cc:	e031      	b.n	800d332 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d2ce:	f7fb fb31 	bl	8008934 <HAL_RCC_GetPCLK1Freq>
 800d2d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d2d4:	e033      	b.n	800d33e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d2d6:	f7fb fb43 	bl	8008960 <HAL_RCC_GetPCLK2Freq>
 800d2da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d2dc:	e02f      	b.n	800d33e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7fc fd08 	bl	8009cf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2ec:	e027      	b.n	800d33e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2ee:	f107 0318 	add.w	r3, r7, #24
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7fc fe54 	bl	8009fa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d2f8:	69fb      	ldr	r3, [r7, #28]
 800d2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2fc:	e01f      	b.n	800d33e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2fe:	4b69      	ldr	r3, [pc, #420]	; (800d4a4 <UART_SetConfig+0xc2c>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f003 0320 	and.w	r3, r3, #32
 800d306:	2b00      	cmp	r3, #0
 800d308:	d009      	beq.n	800d31e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d30a:	4b66      	ldr	r3, [pc, #408]	; (800d4a4 <UART_SetConfig+0xc2c>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	08db      	lsrs	r3, r3, #3
 800d310:	f003 0303 	and.w	r3, r3, #3
 800d314:	4a64      	ldr	r2, [pc, #400]	; (800d4a8 <UART_SetConfig+0xc30>)
 800d316:	fa22 f303 	lsr.w	r3, r2, r3
 800d31a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d31c:	e00f      	b.n	800d33e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d31e:	4b62      	ldr	r3, [pc, #392]	; (800d4a8 <UART_SetConfig+0xc30>)
 800d320:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d322:	e00c      	b.n	800d33e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d324:	4b61      	ldr	r3, [pc, #388]	; (800d4ac <UART_SetConfig+0xc34>)
 800d326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d328:	e009      	b.n	800d33e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d32a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d32e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d330:	e005      	b.n	800d33e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d332:	2300      	movs	r3, #0
 800d334:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d336:	2301      	movs	r3, #1
 800d338:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d33c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d33e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d340:	2b00      	cmp	r3, #0
 800d342:	f000 80ea 	beq.w	800d51a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d34a:	4a55      	ldr	r2, [pc, #340]	; (800d4a0 <UART_SetConfig+0xc28>)
 800d34c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d350:	461a      	mov	r2, r3
 800d352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d354:	fbb3 f3f2 	udiv	r3, r3, r2
 800d358:	005a      	lsls	r2, r3, #1
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	085b      	lsrs	r3, r3, #1
 800d360:	441a      	add	r2, r3
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	fbb2 f3f3 	udiv	r3, r2, r3
 800d36a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d36e:	2b0f      	cmp	r3, #15
 800d370:	d916      	bls.n	800d3a0 <UART_SetConfig+0xb28>
 800d372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d378:	d212      	bcs.n	800d3a0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	f023 030f 	bic.w	r3, r3, #15
 800d382:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d386:	085b      	lsrs	r3, r3, #1
 800d388:	b29b      	uxth	r3, r3
 800d38a:	f003 0307 	and.w	r3, r3, #7
 800d38e:	b29a      	uxth	r2, r3
 800d390:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d392:	4313      	orrs	r3, r2
 800d394:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d39c:	60da      	str	r2, [r3, #12]
 800d39e:	e0bc      	b.n	800d51a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d3a6:	e0b8      	b.n	800d51a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d3a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d3ac:	2b20      	cmp	r3, #32
 800d3ae:	dc4b      	bgt.n	800d448 <UART_SetConfig+0xbd0>
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	f2c0 8087 	blt.w	800d4c4 <UART_SetConfig+0xc4c>
 800d3b6:	2b20      	cmp	r3, #32
 800d3b8:	f200 8084 	bhi.w	800d4c4 <UART_SetConfig+0xc4c>
 800d3bc:	a201      	add	r2, pc, #4	; (adr r2, 800d3c4 <UART_SetConfig+0xb4c>)
 800d3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3c2:	bf00      	nop
 800d3c4:	0800d44f 	.word	0x0800d44f
 800d3c8:	0800d457 	.word	0x0800d457
 800d3cc:	0800d4c5 	.word	0x0800d4c5
 800d3d0:	0800d4c5 	.word	0x0800d4c5
 800d3d4:	0800d45f 	.word	0x0800d45f
 800d3d8:	0800d4c5 	.word	0x0800d4c5
 800d3dc:	0800d4c5 	.word	0x0800d4c5
 800d3e0:	0800d4c5 	.word	0x0800d4c5
 800d3e4:	0800d46f 	.word	0x0800d46f
 800d3e8:	0800d4c5 	.word	0x0800d4c5
 800d3ec:	0800d4c5 	.word	0x0800d4c5
 800d3f0:	0800d4c5 	.word	0x0800d4c5
 800d3f4:	0800d4c5 	.word	0x0800d4c5
 800d3f8:	0800d4c5 	.word	0x0800d4c5
 800d3fc:	0800d4c5 	.word	0x0800d4c5
 800d400:	0800d4c5 	.word	0x0800d4c5
 800d404:	0800d47f 	.word	0x0800d47f
 800d408:	0800d4c5 	.word	0x0800d4c5
 800d40c:	0800d4c5 	.word	0x0800d4c5
 800d410:	0800d4c5 	.word	0x0800d4c5
 800d414:	0800d4c5 	.word	0x0800d4c5
 800d418:	0800d4c5 	.word	0x0800d4c5
 800d41c:	0800d4c5 	.word	0x0800d4c5
 800d420:	0800d4c5 	.word	0x0800d4c5
 800d424:	0800d4c5 	.word	0x0800d4c5
 800d428:	0800d4c5 	.word	0x0800d4c5
 800d42c:	0800d4c5 	.word	0x0800d4c5
 800d430:	0800d4c5 	.word	0x0800d4c5
 800d434:	0800d4c5 	.word	0x0800d4c5
 800d438:	0800d4c5 	.word	0x0800d4c5
 800d43c:	0800d4c5 	.word	0x0800d4c5
 800d440:	0800d4c5 	.word	0x0800d4c5
 800d444:	0800d4b7 	.word	0x0800d4b7
 800d448:	2b40      	cmp	r3, #64	; 0x40
 800d44a:	d037      	beq.n	800d4bc <UART_SetConfig+0xc44>
 800d44c:	e03a      	b.n	800d4c4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d44e:	f7fb fa71 	bl	8008934 <HAL_RCC_GetPCLK1Freq>
 800d452:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d454:	e03c      	b.n	800d4d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d456:	f7fb fa83 	bl	8008960 <HAL_RCC_GetPCLK2Freq>
 800d45a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d45c:	e038      	b.n	800d4d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d45e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d462:	4618      	mov	r0, r3
 800d464:	f7fc fc48 	bl	8009cf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d46a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d46c:	e030      	b.n	800d4d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d46e:	f107 0318 	add.w	r3, r7, #24
 800d472:	4618      	mov	r0, r3
 800d474:	f7fc fd94 	bl	8009fa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d478:	69fb      	ldr	r3, [r7, #28]
 800d47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d47c:	e028      	b.n	800d4d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d47e:	4b09      	ldr	r3, [pc, #36]	; (800d4a4 <UART_SetConfig+0xc2c>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f003 0320 	and.w	r3, r3, #32
 800d486:	2b00      	cmp	r3, #0
 800d488:	d012      	beq.n	800d4b0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d48a:	4b06      	ldr	r3, [pc, #24]	; (800d4a4 <UART_SetConfig+0xc2c>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	08db      	lsrs	r3, r3, #3
 800d490:	f003 0303 	and.w	r3, r3, #3
 800d494:	4a04      	ldr	r2, [pc, #16]	; (800d4a8 <UART_SetConfig+0xc30>)
 800d496:	fa22 f303 	lsr.w	r3, r2, r3
 800d49a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d49c:	e018      	b.n	800d4d0 <UART_SetConfig+0xc58>
 800d49e:	bf00      	nop
 800d4a0:	0800e75c 	.word	0x0800e75c
 800d4a4:	58024400 	.word	0x58024400
 800d4a8:	03d09000 	.word	0x03d09000
 800d4ac:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d4b0:	4b24      	ldr	r3, [pc, #144]	; (800d544 <UART_SetConfig+0xccc>)
 800d4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4b4:	e00c      	b.n	800d4d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d4b6:	4b24      	ldr	r3, [pc, #144]	; (800d548 <UART_SetConfig+0xcd0>)
 800d4b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4ba:	e009      	b.n	800d4d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d4bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4c2:	e005      	b.n	800d4d0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d4ce:	bf00      	nop
    }

    if (pclk != 0U)
 800d4d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d021      	beq.n	800d51a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4da:	4a1c      	ldr	r2, [pc, #112]	; (800d54c <UART_SetConfig+0xcd4>)
 800d4dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4e4:	fbb3 f2f2 	udiv	r2, r3, r2
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	685b      	ldr	r3, [r3, #4]
 800d4ec:	085b      	lsrs	r3, r3, #1
 800d4ee:	441a      	add	r2, r3
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4f8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fc:	2b0f      	cmp	r3, #15
 800d4fe:	d909      	bls.n	800d514 <UART_SetConfig+0xc9c>
 800d500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d506:	d205      	bcs.n	800d514 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d50a:	b29a      	uxth	r2, r3
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	60da      	str	r2, [r3, #12]
 800d512:	e002      	b.n	800d51a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d514:	2301      	movs	r3, #1
 800d516:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	2201      	movs	r2, #1
 800d51e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	2201      	movs	r2, #1
 800d526:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	2200      	movs	r2, #0
 800d52e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	2200      	movs	r2, #0
 800d534:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d536:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3748      	adds	r7, #72	; 0x48
 800d53e:	46bd      	mov	sp, r7
 800d540:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d544:	03d09000 	.word	0x03d09000
 800d548:	003d0900 	.word	0x003d0900
 800d54c:	0800e75c 	.word	0x0800e75c

0800d550 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d550:	b480      	push	{r7}
 800d552:	b083      	sub	sp, #12
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d55c:	f003 0301 	and.w	r3, r3, #1
 800d560:	2b00      	cmp	r3, #0
 800d562:	d00a      	beq.n	800d57a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	430a      	orrs	r2, r1
 800d578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d57e:	f003 0302 	and.w	r3, r3, #2
 800d582:	2b00      	cmp	r3, #0
 800d584:	d00a      	beq.n	800d59c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	430a      	orrs	r2, r1
 800d59a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5a0:	f003 0304 	and.w	r3, r3, #4
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d00a      	beq.n	800d5be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	685b      	ldr	r3, [r3, #4]
 800d5ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	430a      	orrs	r2, r1
 800d5bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5c2:	f003 0308 	and.w	r3, r3, #8
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d00a      	beq.n	800d5e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	430a      	orrs	r2, r1
 800d5de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5e4:	f003 0310 	and.w	r3, r3, #16
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d00a      	beq.n	800d602 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	689b      	ldr	r3, [r3, #8]
 800d5f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	430a      	orrs	r2, r1
 800d600:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d606:	f003 0320 	and.w	r3, r3, #32
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d00a      	beq.n	800d624 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	689b      	ldr	r3, [r3, #8]
 800d614:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	430a      	orrs	r2, r1
 800d622:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d01a      	beq.n	800d666 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	430a      	orrs	r2, r1
 800d644:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d64a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d64e:	d10a      	bne.n	800d666 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	685b      	ldr	r3, [r3, #4]
 800d656:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	430a      	orrs	r2, r1
 800d664:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d66a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d00a      	beq.n	800d688 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	430a      	orrs	r2, r1
 800d686:	605a      	str	r2, [r3, #4]
  }
}
 800d688:	bf00      	nop
 800d68a:	370c      	adds	r7, #12
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr

0800d694 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b098      	sub	sp, #96	; 0x60
 800d698:	af02      	add	r7, sp, #8
 800d69a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d6a4:	f7f6 fdd0 	bl	8004248 <HAL_GetTick>
 800d6a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f003 0308 	and.w	r3, r3, #8
 800d6b4:	2b08      	cmp	r3, #8
 800d6b6:	d12f      	bne.n	800d718 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d6b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d6bc:	9300      	str	r3, [sp, #0]
 800d6be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 f88e 	bl	800d7e8 <UART_WaitOnFlagUntilTimeout>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d022      	beq.n	800d718 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6da:	e853 3f00 	ldrex	r3, [r3]
 800d6de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d6e6:	653b      	str	r3, [r7, #80]	; 0x50
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6f0:	647b      	str	r3, [r7, #68]	; 0x44
 800d6f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d6f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d6f8:	e841 2300 	strex	r3, r2, [r1]
 800d6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d700:	2b00      	cmp	r3, #0
 800d702:	d1e6      	bne.n	800d6d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2220      	movs	r2, #32
 800d708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2200      	movs	r2, #0
 800d710:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d714:	2303      	movs	r3, #3
 800d716:	e063      	b.n	800d7e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f003 0304 	and.w	r3, r3, #4
 800d722:	2b04      	cmp	r3, #4
 800d724:	d149      	bne.n	800d7ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d726:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d72a:	9300      	str	r3, [sp, #0]
 800d72c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d72e:	2200      	movs	r2, #0
 800d730:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f000 f857 	bl	800d7e8 <UART_WaitOnFlagUntilTimeout>
 800d73a:	4603      	mov	r3, r0
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d03c      	beq.n	800d7ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d748:	e853 3f00 	ldrex	r3, [r3]
 800d74c:	623b      	str	r3, [r7, #32]
   return(result);
 800d74e:	6a3b      	ldr	r3, [r7, #32]
 800d750:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d754:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	461a      	mov	r2, r3
 800d75c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d75e:	633b      	str	r3, [r7, #48]	; 0x30
 800d760:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d762:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d766:	e841 2300 	strex	r3, r2, [r1]
 800d76a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d1e6      	bne.n	800d740 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	3308      	adds	r3, #8
 800d778:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	e853 3f00 	ldrex	r3, [r3]
 800d780:	60fb      	str	r3, [r7, #12]
   return(result);
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	f023 0301 	bic.w	r3, r3, #1
 800d788:	64bb      	str	r3, [r7, #72]	; 0x48
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	3308      	adds	r3, #8
 800d790:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d792:	61fa      	str	r2, [r7, #28]
 800d794:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d796:	69b9      	ldr	r1, [r7, #24]
 800d798:	69fa      	ldr	r2, [r7, #28]
 800d79a:	e841 2300 	strex	r3, r2, [r1]
 800d79e:	617b      	str	r3, [r7, #20]
   return(result);
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d1e5      	bne.n	800d772 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2220      	movs	r2, #32
 800d7aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d7b6:	2303      	movs	r3, #3
 800d7b8:	e012      	b.n	800d7e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2220      	movs	r2, #32
 800d7be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2220      	movs	r2, #32
 800d7c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d7de:	2300      	movs	r3, #0
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3758      	adds	r7, #88	; 0x58
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	60f8      	str	r0, [r7, #12]
 800d7f0:	60b9      	str	r1, [r7, #8]
 800d7f2:	603b      	str	r3, [r7, #0]
 800d7f4:	4613      	mov	r3, r2
 800d7f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7f8:	e049      	b.n	800d88e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d7fa:	69bb      	ldr	r3, [r7, #24]
 800d7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d800:	d045      	beq.n	800d88e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d802:	f7f6 fd21 	bl	8004248 <HAL_GetTick>
 800d806:	4602      	mov	r2, r0
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	1ad3      	subs	r3, r2, r3
 800d80c:	69ba      	ldr	r2, [r7, #24]
 800d80e:	429a      	cmp	r2, r3
 800d810:	d302      	bcc.n	800d818 <UART_WaitOnFlagUntilTimeout+0x30>
 800d812:	69bb      	ldr	r3, [r7, #24]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d101      	bne.n	800d81c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d818:	2303      	movs	r3, #3
 800d81a:	e048      	b.n	800d8ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f003 0304 	and.w	r3, r3, #4
 800d826:	2b00      	cmp	r3, #0
 800d828:	d031      	beq.n	800d88e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	69db      	ldr	r3, [r3, #28]
 800d830:	f003 0308 	and.w	r3, r3, #8
 800d834:	2b08      	cmp	r3, #8
 800d836:	d110      	bne.n	800d85a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	2208      	movs	r2, #8
 800d83e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d840:	68f8      	ldr	r0, [r7, #12]
 800d842:	f000 f921 	bl	800da88 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	2208      	movs	r2, #8
 800d84a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2200      	movs	r2, #0
 800d852:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800d856:	2301      	movs	r3, #1
 800d858:	e029      	b.n	800d8ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	69db      	ldr	r3, [r3, #28]
 800d860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d868:	d111      	bne.n	800d88e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d872:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d874:	68f8      	ldr	r0, [r7, #12]
 800d876:	f000 f907 	bl	800da88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2220      	movs	r2, #32
 800d87e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	2200      	movs	r2, #0
 800d886:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d88a:	2303      	movs	r3, #3
 800d88c:	e00f      	b.n	800d8ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	69da      	ldr	r2, [r3, #28]
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	4013      	ands	r3, r2
 800d898:	68ba      	ldr	r2, [r7, #8]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	bf0c      	ite	eq
 800d89e:	2301      	moveq	r3, #1
 800d8a0:	2300      	movne	r3, #0
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	79fb      	ldrb	r3, [r7, #7]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d0a6      	beq.n	800d7fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d8ac:	2300      	movs	r3, #0
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3710      	adds	r7, #16
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
	...

0800d8b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b096      	sub	sp, #88	; 0x58
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	60b9      	str	r1, [r7, #8]
 800d8c2:	4613      	mov	r3, r2
 800d8c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	68ba      	ldr	r2, [r7, #8]
 800d8ca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	88fa      	ldrh	r2, [r7, #6]
 800d8d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2222      	movs	r2, #34	; 0x22
 800d8e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d02d      	beq.n	800d94a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8f4:	4a40      	ldr	r2, [pc, #256]	; (800d9f8 <UART_Start_Receive_DMA+0x140>)
 800d8f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8fe:	4a3f      	ldr	r2, [pc, #252]	; (800d9fc <UART_Start_Receive_DMA+0x144>)
 800d900:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d908:	4a3d      	ldr	r2, [pc, #244]	; (800da00 <UART_Start_Receive_DMA+0x148>)
 800d90a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d912:	2200      	movs	r2, #0
 800d914:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	3324      	adds	r3, #36	; 0x24
 800d922:	4619      	mov	r1, r3
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d928:	461a      	mov	r2, r3
 800d92a:	88fb      	ldrh	r3, [r7, #6]
 800d92c:	f7f7 faea 	bl	8004f04 <HAL_DMA_Start_IT>
 800d930:	4603      	mov	r3, r0
 800d932:	2b00      	cmp	r3, #0
 800d934:	d009      	beq.n	800d94a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2210      	movs	r2, #16
 800d93a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2220      	movs	r2, #32
 800d942:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800d946:	2301      	movs	r3, #1
 800d948:	e051      	b.n	800d9ee <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	691b      	ldr	r3, [r3, #16]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d018      	beq.n	800d984 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d95a:	e853 3f00 	ldrex	r3, [r3]
 800d95e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d966:	657b      	str	r3, [r7, #84]	; 0x54
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	461a      	mov	r2, r3
 800d96e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d970:	64bb      	str	r3, [r7, #72]	; 0x48
 800d972:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d974:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d978:	e841 2300 	strex	r3, r2, [r1]
 800d97c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d97e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d980:	2b00      	cmp	r3, #0
 800d982:	d1e6      	bne.n	800d952 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	3308      	adds	r3, #8
 800d98a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98e:	e853 3f00 	ldrex	r3, [r3]
 800d992:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d996:	f043 0301 	orr.w	r3, r3, #1
 800d99a:	653b      	str	r3, [r7, #80]	; 0x50
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	3308      	adds	r3, #8
 800d9a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d9a4:	637a      	str	r2, [r7, #52]	; 0x34
 800d9a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d9aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9ac:	e841 2300 	strex	r3, r2, [r1]
 800d9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d1e5      	bne.n	800d984 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	3308      	adds	r3, #8
 800d9be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	e853 3f00 	ldrex	r3, [r3]
 800d9c6:	613b      	str	r3, [r7, #16]
   return(result);
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	3308      	adds	r3, #8
 800d9d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d9d8:	623a      	str	r2, [r7, #32]
 800d9da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9dc:	69f9      	ldr	r1, [r7, #28]
 800d9de:	6a3a      	ldr	r2, [r7, #32]
 800d9e0:	e841 2300 	strex	r3, r2, [r1]
 800d9e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d9e6:	69bb      	ldr	r3, [r7, #24]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d1e5      	bne.n	800d9b8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d9ec:	2300      	movs	r3, #0
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3758      	adds	r7, #88	; 0x58
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	0800dc07 	.word	0x0800dc07
 800d9fc:	0800dd2f 	.word	0x0800dd2f
 800da00:	0800dd6d 	.word	0x0800dd6d

0800da04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800da04:	b480      	push	{r7}
 800da06:	b08f      	sub	sp, #60	; 0x3c
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da12:	6a3b      	ldr	r3, [r7, #32]
 800da14:	e853 3f00 	ldrex	r3, [r3]
 800da18:	61fb      	str	r3, [r7, #28]
   return(result);
 800da1a:	69fb      	ldr	r3, [r7, #28]
 800da1c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800da20:	637b      	str	r3, [r7, #52]	; 0x34
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	461a      	mov	r2, r3
 800da28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da2c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da32:	e841 2300 	strex	r3, r2, [r1]
 800da36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800da38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d1e6      	bne.n	800da0c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	3308      	adds	r3, #8
 800da44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	e853 3f00 	ldrex	r3, [r3]
 800da4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800da54:	633b      	str	r3, [r7, #48]	; 0x30
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	3308      	adds	r3, #8
 800da5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da5e:	61ba      	str	r2, [r7, #24]
 800da60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da62:	6979      	ldr	r1, [r7, #20]
 800da64:	69ba      	ldr	r2, [r7, #24]
 800da66:	e841 2300 	strex	r3, r2, [r1]
 800da6a:	613b      	str	r3, [r7, #16]
   return(result);
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d1e5      	bne.n	800da3e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2220      	movs	r2, #32
 800da76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800da7a:	bf00      	nop
 800da7c:	373c      	adds	r7, #60	; 0x3c
 800da7e:	46bd      	mov	sp, r7
 800da80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da84:	4770      	bx	lr
	...

0800da88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800da88:	b480      	push	{r7}
 800da8a:	b095      	sub	sp, #84	; 0x54
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da98:	e853 3f00 	ldrex	r3, [r3]
 800da9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800da9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800daa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	461a      	mov	r2, r3
 800daac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daae:	643b      	str	r3, [r7, #64]	; 0x40
 800dab0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dab2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dab4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dab6:	e841 2300 	strex	r3, r2, [r1]
 800daba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d1e6      	bne.n	800da90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	3308      	adds	r3, #8
 800dac8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daca:	6a3b      	ldr	r3, [r7, #32]
 800dacc:	e853 3f00 	ldrex	r3, [r3]
 800dad0:	61fb      	str	r3, [r7, #28]
   return(result);
 800dad2:	69fa      	ldr	r2, [r7, #28]
 800dad4:	4b1e      	ldr	r3, [pc, #120]	; (800db50 <UART_EndRxTransfer+0xc8>)
 800dad6:	4013      	ands	r3, r2
 800dad8:	64bb      	str	r3, [r7, #72]	; 0x48
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	3308      	adds	r3, #8
 800dae0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dae2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dae4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800daea:	e841 2300 	strex	r3, r2, [r1]
 800daee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800daf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d1e5      	bne.n	800dac2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dafa:	2b01      	cmp	r3, #1
 800dafc:	d118      	bne.n	800db30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	e853 3f00 	ldrex	r3, [r3]
 800db0a:	60bb      	str	r3, [r7, #8]
   return(result);
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	f023 0310 	bic.w	r3, r3, #16
 800db12:	647b      	str	r3, [r7, #68]	; 0x44
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	461a      	mov	r2, r3
 800db1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db1c:	61bb      	str	r3, [r7, #24]
 800db1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db20:	6979      	ldr	r1, [r7, #20]
 800db22:	69ba      	ldr	r2, [r7, #24]
 800db24:	e841 2300 	strex	r3, r2, [r1]
 800db28:	613b      	str	r3, [r7, #16]
   return(result);
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d1e6      	bne.n	800dafe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2220      	movs	r2, #32
 800db34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2200      	movs	r2, #0
 800db3c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2200      	movs	r2, #0
 800db42:	675a      	str	r2, [r3, #116]	; 0x74
}
 800db44:	bf00      	nop
 800db46:	3754      	adds	r7, #84	; 0x54
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr
 800db50:	effffffe 	.word	0xeffffffe

0800db54 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b090      	sub	sp, #64	; 0x40
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db60:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	69db      	ldr	r3, [r3, #28]
 800db66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db6a:	d037      	beq.n	800dbdc <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800db6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db6e:	2200      	movs	r2, #0
 800db70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800db74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	3308      	adds	r3, #8
 800db7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7e:	e853 3f00 	ldrex	r3, [r3]
 800db82:	623b      	str	r3, [r7, #32]
   return(result);
 800db84:	6a3b      	ldr	r3, [r7, #32]
 800db86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db8a:	63bb      	str	r3, [r7, #56]	; 0x38
 800db8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	3308      	adds	r3, #8
 800db92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db94:	633a      	str	r2, [r7, #48]	; 0x30
 800db96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db9c:	e841 2300 	strex	r3, r2, [r1]
 800dba0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d1e5      	bne.n	800db74 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	e853 3f00 	ldrex	r3, [r3]
 800dbb4:	60fb      	str	r3, [r7, #12]
   return(result);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbbc:	637b      	str	r3, [r7, #52]	; 0x34
 800dbbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbc6:	61fb      	str	r3, [r7, #28]
 800dbc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbca:	69b9      	ldr	r1, [r7, #24]
 800dbcc:	69fa      	ldr	r2, [r7, #28]
 800dbce:	e841 2300 	strex	r3, r2, [r1]
 800dbd2:	617b      	str	r3, [r7, #20]
   return(result);
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d1e6      	bne.n	800dba8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dbda:	e002      	b.n	800dbe2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800dbdc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dbde:	f7f4 ffc3 	bl	8002b68 <HAL_UART_TxCpltCallback>
}
 800dbe2:	bf00      	nop
 800dbe4:	3740      	adds	r7, #64	; 0x40
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}

0800dbea <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dbea:	b580      	push	{r7, lr}
 800dbec:	b084      	sub	sp, #16
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800dbf8:	68f8      	ldr	r0, [r7, #12]
 800dbfa:	f7fe fe13 	bl	800c824 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbfe:	bf00      	nop
 800dc00:	3710      	adds	r7, #16
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dc06:	b580      	push	{r7, lr}
 800dc08:	b09c      	sub	sp, #112	; 0x70
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc12:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	69db      	ldr	r3, [r3, #28]
 800dc18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc1c:	d071      	beq.n	800dd02 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800dc1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc20:	2200      	movs	r2, #0
 800dc22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc2e:	e853 3f00 	ldrex	r3, [r3]
 800dc32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dc34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc3a:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	461a      	mov	r2, r3
 800dc42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc44:	65bb      	str	r3, [r7, #88]	; 0x58
 800dc46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dc4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc4c:	e841 2300 	strex	r3, r2, [r1]
 800dc50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dc52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d1e6      	bne.n	800dc26 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	3308      	adds	r3, #8
 800dc5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc62:	e853 3f00 	ldrex	r3, [r3]
 800dc66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dc68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc6a:	f023 0301 	bic.w	r3, r3, #1
 800dc6e:	667b      	str	r3, [r7, #100]	; 0x64
 800dc70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	3308      	adds	r3, #8
 800dc76:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dc78:	647a      	str	r2, [r7, #68]	; 0x44
 800dc7a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dc7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc80:	e841 2300 	strex	r3, r2, [r1]
 800dc84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dc86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d1e5      	bne.n	800dc58 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	3308      	adds	r3, #8
 800dc92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc96:	e853 3f00 	ldrex	r3, [r3]
 800dc9a:	623b      	str	r3, [r7, #32]
   return(result);
 800dc9c:	6a3b      	ldr	r3, [r7, #32]
 800dc9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dca2:	663b      	str	r3, [r7, #96]	; 0x60
 800dca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	3308      	adds	r3, #8
 800dcaa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dcac:	633a      	str	r2, [r7, #48]	; 0x30
 800dcae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dcb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcb4:	e841 2300 	strex	r3, r2, [r1]
 800dcb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d1e5      	bne.n	800dc8c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dcc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcc2:	2220      	movs	r2, #32
 800dcc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dcc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d118      	bne.n	800dd02 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dcd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	e853 3f00 	ldrex	r3, [r3]
 800dcdc:	60fb      	str	r3, [r7, #12]
   return(result);
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f023 0310 	bic.w	r3, r3, #16
 800dce4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	461a      	mov	r2, r3
 800dcec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcee:	61fb      	str	r3, [r7, #28]
 800dcf0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcf2:	69b9      	ldr	r1, [r7, #24]
 800dcf4:	69fa      	ldr	r2, [r7, #28]
 800dcf6:	e841 2300 	strex	r3, r2, [r1]
 800dcfa:	617b      	str	r3, [r7, #20]
   return(result);
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d1e6      	bne.n	800dcd0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dd02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd04:	2200      	movs	r2, #0
 800dd06:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d107      	bne.n	800dd20 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dd10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dd16:	4619      	mov	r1, r3
 800dd18:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dd1a:	f7fe fda1 	bl	800c860 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dd1e:	e002      	b.n	800dd26 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800dd20:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dd22:	f7fe fd89 	bl	800c838 <HAL_UART_RxCpltCallback>
}
 800dd26:	bf00      	nop
 800dd28:	3770      	adds	r7, #112	; 0x70
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dd2e:	b580      	push	{r7, lr}
 800dd30:	b084      	sub	sp, #16
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd3a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2201      	movs	r2, #1
 800dd40:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	d109      	bne.n	800dd5e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dd50:	085b      	lsrs	r3, r3, #1
 800dd52:	b29b      	uxth	r3, r3
 800dd54:	4619      	mov	r1, r3
 800dd56:	68f8      	ldr	r0, [r7, #12]
 800dd58:	f7fe fd82 	bl	800c860 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dd5c:	e002      	b.n	800dd64 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800dd5e:	68f8      	ldr	r0, [r7, #12]
 800dd60:	f7fe fd74 	bl	800c84c <HAL_UART_RxHalfCpltCallback>
}
 800dd64:	bf00      	nop
 800dd66:	3710      	adds	r7, #16
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b086      	sub	sp, #24
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd78:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd80:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd88:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd94:	2b80      	cmp	r3, #128	; 0x80
 800dd96:	d109      	bne.n	800ddac <UART_DMAError+0x40>
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	2b21      	cmp	r3, #33	; 0x21
 800dd9c:	d106      	bne.n	800ddac <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	2200      	movs	r2, #0
 800dda2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800dda6:	6978      	ldr	r0, [r7, #20]
 800dda8:	f7ff fe2c 	bl	800da04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	689b      	ldr	r3, [r3, #8]
 800ddb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddb6:	2b40      	cmp	r3, #64	; 0x40
 800ddb8:	d109      	bne.n	800ddce <UART_DMAError+0x62>
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	2b22      	cmp	r3, #34	; 0x22
 800ddbe:	d106      	bne.n	800ddce <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ddc8:	6978      	ldr	r0, [r7, #20]
 800ddca:	f7ff fe5d 	bl	800da88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ddd4:	f043 0210 	orr.w	r2, r3, #16
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ddde:	6978      	ldr	r0, [r7, #20]
 800dde0:	f7f4 ff5a 	bl	8002c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dde4:	bf00      	nop
 800dde6:	3718      	adds	r7, #24
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b084      	sub	sp, #16
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2200      	movs	r2, #0
 800de06:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800de0a:	68f8      	ldr	r0, [r7, #12]
 800de0c:	f7f4 ff44 	bl	8002c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de10:	bf00      	nop
 800de12:	3710      	adds	r7, #16
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b088      	sub	sp, #32
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	e853 3f00 	ldrex	r3, [r3]
 800de2c:	60bb      	str	r3, [r7, #8]
   return(result);
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de34:	61fb      	str	r3, [r7, #28]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	461a      	mov	r2, r3
 800de3c:	69fb      	ldr	r3, [r7, #28]
 800de3e:	61bb      	str	r3, [r7, #24]
 800de40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de42:	6979      	ldr	r1, [r7, #20]
 800de44:	69ba      	ldr	r2, [r7, #24]
 800de46:	e841 2300 	strex	r3, r2, [r1]
 800de4a:	613b      	str	r3, [r7, #16]
   return(result);
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d1e6      	bne.n	800de20 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2220      	movs	r2, #32
 800de56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2200      	movs	r2, #0
 800de5e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f7f4 fe81 	bl	8002b68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de66:	bf00      	nop
 800de68:	3720      	adds	r7, #32
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}

0800de6e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800de6e:	b480      	push	{r7}
 800de70:	b083      	sub	sp, #12
 800de72:	af00      	add	r7, sp, #0
 800de74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800de76:	bf00      	nop
 800de78:	370c      	adds	r7, #12
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr

0800de82 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800de82:	b480      	push	{r7}
 800de84:	b083      	sub	sp, #12
 800de86:	af00      	add	r7, sp, #0
 800de88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800de8a:	bf00      	nop
 800de8c:	370c      	adds	r7, #12
 800de8e:	46bd      	mov	sp, r7
 800de90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de94:	4770      	bx	lr

0800de96 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800de96:	b480      	push	{r7}
 800de98:	b083      	sub	sp, #12
 800de9a:	af00      	add	r7, sp, #0
 800de9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800de9e:	bf00      	nop
 800dea0:	370c      	adds	r7, #12
 800dea2:	46bd      	mov	sp, r7
 800dea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea8:	4770      	bx	lr

0800deaa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800deaa:	b480      	push	{r7}
 800deac:	b085      	sub	sp, #20
 800deae:	af00      	add	r7, sp, #0
 800deb0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800deb8:	2b01      	cmp	r3, #1
 800deba:	d101      	bne.n	800dec0 <HAL_UARTEx_DisableFifoMode+0x16>
 800debc:	2302      	movs	r3, #2
 800debe:	e027      	b.n	800df10 <HAL_UARTEx_DisableFifoMode+0x66>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2201      	movs	r2, #1
 800dec4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2224      	movs	r2, #36	; 0x24
 800decc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f022 0201 	bic.w	r2, r2, #1
 800dee6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800deee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2200      	movs	r2, #0
 800def4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	68fa      	ldr	r2, [r7, #12]
 800defc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2220      	movs	r2, #32
 800df02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2200      	movs	r2, #0
 800df0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800df0e:	2300      	movs	r3, #0
}
 800df10:	4618      	mov	r0, r3
 800df12:	3714      	adds	r7, #20
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr

0800df1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b084      	sub	sp, #16
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d101      	bne.n	800df34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800df30:	2302      	movs	r3, #2
 800df32:	e02d      	b.n	800df90 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2201      	movs	r2, #1
 800df38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2224      	movs	r2, #36	; 0x24
 800df40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	681a      	ldr	r2, [r3, #0]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f022 0201 	bic.w	r2, r2, #1
 800df5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	689b      	ldr	r3, [r3, #8]
 800df62:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	683a      	ldr	r2, [r7, #0]
 800df6c:	430a      	orrs	r2, r1
 800df6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f000 f84f 	bl	800e014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	68fa      	ldr	r2, [r7, #12]
 800df7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2220      	movs	r2, #32
 800df82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2200      	movs	r2, #0
 800df8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800df8e:	2300      	movs	r3, #0
}
 800df90:	4618      	mov	r0, r3
 800df92:	3710      	adds	r7, #16
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}

0800df98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b084      	sub	sp, #16
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
 800dfa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d101      	bne.n	800dfb0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dfac:	2302      	movs	r3, #2
 800dfae:	e02d      	b.n	800e00c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2224      	movs	r2, #36	; 0x24
 800dfbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	681a      	ldr	r2, [r3, #0]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f022 0201 	bic.w	r2, r2, #1
 800dfd6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	689b      	ldr	r3, [r3, #8]
 800dfde:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	683a      	ldr	r2, [r7, #0]
 800dfe8:	430a      	orrs	r2, r1
 800dfea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f000 f811 	bl	800e014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2220      	movs	r2, #32
 800dffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2200      	movs	r2, #0
 800e006:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e00a:	2300      	movs	r3, #0
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3710      	adds	r7, #16
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}

0800e014 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e014:	b480      	push	{r7}
 800e016:	b085      	sub	sp, #20
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e020:	2b00      	cmp	r3, #0
 800e022:	d108      	bne.n	800e036 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2201      	movs	r2, #1
 800e028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2201      	movs	r2, #1
 800e030:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e034:	e031      	b.n	800e09a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e036:	2310      	movs	r3, #16
 800e038:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e03a:	2310      	movs	r3, #16
 800e03c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	689b      	ldr	r3, [r3, #8]
 800e044:	0e5b      	lsrs	r3, r3, #25
 800e046:	b2db      	uxtb	r3, r3
 800e048:	f003 0307 	and.w	r3, r3, #7
 800e04c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	689b      	ldr	r3, [r3, #8]
 800e054:	0f5b      	lsrs	r3, r3, #29
 800e056:	b2db      	uxtb	r3, r3
 800e058:	f003 0307 	and.w	r3, r3, #7
 800e05c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e05e:	7bbb      	ldrb	r3, [r7, #14]
 800e060:	7b3a      	ldrb	r2, [r7, #12]
 800e062:	4911      	ldr	r1, [pc, #68]	; (800e0a8 <UARTEx_SetNbDataToProcess+0x94>)
 800e064:	5c8a      	ldrb	r2, [r1, r2]
 800e066:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e06a:	7b3a      	ldrb	r2, [r7, #12]
 800e06c:	490f      	ldr	r1, [pc, #60]	; (800e0ac <UARTEx_SetNbDataToProcess+0x98>)
 800e06e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e070:	fb93 f3f2 	sdiv	r3, r3, r2
 800e074:	b29a      	uxth	r2, r3
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e07c:	7bfb      	ldrb	r3, [r7, #15]
 800e07e:	7b7a      	ldrb	r2, [r7, #13]
 800e080:	4909      	ldr	r1, [pc, #36]	; (800e0a8 <UARTEx_SetNbDataToProcess+0x94>)
 800e082:	5c8a      	ldrb	r2, [r1, r2]
 800e084:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e088:	7b7a      	ldrb	r2, [r7, #13]
 800e08a:	4908      	ldr	r1, [pc, #32]	; (800e0ac <UARTEx_SetNbDataToProcess+0x98>)
 800e08c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e08e:	fb93 f3f2 	sdiv	r3, r3, r2
 800e092:	b29a      	uxth	r2, r3
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e09a:	bf00      	nop
 800e09c:	3714      	adds	r7, #20
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a4:	4770      	bx	lr
 800e0a6:	bf00      	nop
 800e0a8:	0800e774 	.word	0x0800e774
 800e0ac:	0800e77c 	.word	0x0800e77c

0800e0b0 <__cxa_pure_virtual>:
 800e0b0:	b508      	push	{r3, lr}
 800e0b2:	f000 f80d 	bl	800e0d0 <_ZSt9terminatev>

0800e0b6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e0b6:	b508      	push	{r3, lr}
 800e0b8:	4780      	blx	r0
 800e0ba:	f000 f80e 	bl	800e0da <abort>
	...

0800e0c0 <_ZSt13get_terminatev>:
 800e0c0:	4b02      	ldr	r3, [pc, #8]	; (800e0cc <_ZSt13get_terminatev+0xc>)
 800e0c2:	6818      	ldr	r0, [r3, #0]
 800e0c4:	f3bf 8f5b 	dmb	ish
 800e0c8:	4770      	bx	lr
 800e0ca:	bf00      	nop
 800e0cc:	24000010 	.word	0x24000010

0800e0d0 <_ZSt9terminatev>:
 800e0d0:	b508      	push	{r3, lr}
 800e0d2:	f7ff fff5 	bl	800e0c0 <_ZSt13get_terminatev>
 800e0d6:	f7ff ffee 	bl	800e0b6 <_ZN10__cxxabiv111__terminateEPFvvE>

0800e0da <abort>:
 800e0da:	b508      	push	{r3, lr}
 800e0dc:	2006      	movs	r0, #6
 800e0de:	f000 f873 	bl	800e1c8 <raise>
 800e0e2:	2001      	movs	r0, #1
 800e0e4:	f7f5 ff48 	bl	8003f78 <_exit>

0800e0e8 <__errno>:
 800e0e8:	4b01      	ldr	r3, [pc, #4]	; (800e0f0 <__errno+0x8>)
 800e0ea:	6818      	ldr	r0, [r3, #0]
 800e0ec:	4770      	bx	lr
 800e0ee:	bf00      	nop
 800e0f0:	24000014 	.word	0x24000014

0800e0f4 <__libc_init_array>:
 800e0f4:	b570      	push	{r4, r5, r6, lr}
 800e0f6:	4d0d      	ldr	r5, [pc, #52]	; (800e12c <__libc_init_array+0x38>)
 800e0f8:	4c0d      	ldr	r4, [pc, #52]	; (800e130 <__libc_init_array+0x3c>)
 800e0fa:	1b64      	subs	r4, r4, r5
 800e0fc:	10a4      	asrs	r4, r4, #2
 800e0fe:	2600      	movs	r6, #0
 800e100:	42a6      	cmp	r6, r4
 800e102:	d109      	bne.n	800e118 <__libc_init_array+0x24>
 800e104:	4d0b      	ldr	r5, [pc, #44]	; (800e134 <__libc_init_array+0x40>)
 800e106:	4c0c      	ldr	r4, [pc, #48]	; (800e138 <__libc_init_array+0x44>)
 800e108:	f000 f9b0 	bl	800e46c <_init>
 800e10c:	1b64      	subs	r4, r4, r5
 800e10e:	10a4      	asrs	r4, r4, #2
 800e110:	2600      	movs	r6, #0
 800e112:	42a6      	cmp	r6, r4
 800e114:	d105      	bne.n	800e122 <__libc_init_array+0x2e>
 800e116:	bd70      	pop	{r4, r5, r6, pc}
 800e118:	f855 3b04 	ldr.w	r3, [r5], #4
 800e11c:	4798      	blx	r3
 800e11e:	3601      	adds	r6, #1
 800e120:	e7ee      	b.n	800e100 <__libc_init_array+0xc>
 800e122:	f855 3b04 	ldr.w	r3, [r5], #4
 800e126:	4798      	blx	r3
 800e128:	3601      	adds	r6, #1
 800e12a:	e7f2      	b.n	800e112 <__libc_init_array+0x1e>
 800e12c:	0800e78c 	.word	0x0800e78c
 800e130:	0800e78c 	.word	0x0800e78c
 800e134:	0800e78c 	.word	0x0800e78c
 800e138:	0800e794 	.word	0x0800e794

0800e13c <memcpy>:
 800e13c:	440a      	add	r2, r1
 800e13e:	4291      	cmp	r1, r2
 800e140:	f100 33ff 	add.w	r3, r0, #4294967295
 800e144:	d100      	bne.n	800e148 <memcpy+0xc>
 800e146:	4770      	bx	lr
 800e148:	b510      	push	{r4, lr}
 800e14a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e14e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e152:	4291      	cmp	r1, r2
 800e154:	d1f9      	bne.n	800e14a <memcpy+0xe>
 800e156:	bd10      	pop	{r4, pc}

0800e158 <memset>:
 800e158:	4402      	add	r2, r0
 800e15a:	4603      	mov	r3, r0
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d100      	bne.n	800e162 <memset+0xa>
 800e160:	4770      	bx	lr
 800e162:	f803 1b01 	strb.w	r1, [r3], #1
 800e166:	e7f9      	b.n	800e15c <memset+0x4>

0800e168 <realloc>:
 800e168:	4b02      	ldr	r3, [pc, #8]	; (800e174 <realloc+0xc>)
 800e16a:	460a      	mov	r2, r1
 800e16c:	4601      	mov	r1, r0
 800e16e:	6818      	ldr	r0, [r3, #0]
 800e170:	f000 b8da 	b.w	800e328 <_realloc_r>
 800e174:	24000014 	.word	0x24000014

0800e178 <_raise_r>:
 800e178:	291f      	cmp	r1, #31
 800e17a:	b538      	push	{r3, r4, r5, lr}
 800e17c:	4604      	mov	r4, r0
 800e17e:	460d      	mov	r5, r1
 800e180:	d904      	bls.n	800e18c <_raise_r+0x14>
 800e182:	2316      	movs	r3, #22
 800e184:	6003      	str	r3, [r0, #0]
 800e186:	f04f 30ff 	mov.w	r0, #4294967295
 800e18a:	bd38      	pop	{r3, r4, r5, pc}
 800e18c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e18e:	b112      	cbz	r2, 800e196 <_raise_r+0x1e>
 800e190:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e194:	b94b      	cbnz	r3, 800e1aa <_raise_r+0x32>
 800e196:	4620      	mov	r0, r4
 800e198:	f000 f830 	bl	800e1fc <_getpid_r>
 800e19c:	462a      	mov	r2, r5
 800e19e:	4601      	mov	r1, r0
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1a6:	f000 b817 	b.w	800e1d8 <_kill_r>
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	d00a      	beq.n	800e1c4 <_raise_r+0x4c>
 800e1ae:	1c59      	adds	r1, r3, #1
 800e1b0:	d103      	bne.n	800e1ba <_raise_r+0x42>
 800e1b2:	2316      	movs	r3, #22
 800e1b4:	6003      	str	r3, [r0, #0]
 800e1b6:	2001      	movs	r0, #1
 800e1b8:	e7e7      	b.n	800e18a <_raise_r+0x12>
 800e1ba:	2400      	movs	r4, #0
 800e1bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e1c0:	4628      	mov	r0, r5
 800e1c2:	4798      	blx	r3
 800e1c4:	2000      	movs	r0, #0
 800e1c6:	e7e0      	b.n	800e18a <_raise_r+0x12>

0800e1c8 <raise>:
 800e1c8:	4b02      	ldr	r3, [pc, #8]	; (800e1d4 <raise+0xc>)
 800e1ca:	4601      	mov	r1, r0
 800e1cc:	6818      	ldr	r0, [r3, #0]
 800e1ce:	f7ff bfd3 	b.w	800e178 <_raise_r>
 800e1d2:	bf00      	nop
 800e1d4:	24000014 	.word	0x24000014

0800e1d8 <_kill_r>:
 800e1d8:	b538      	push	{r3, r4, r5, lr}
 800e1da:	4d07      	ldr	r5, [pc, #28]	; (800e1f8 <_kill_r+0x20>)
 800e1dc:	2300      	movs	r3, #0
 800e1de:	4604      	mov	r4, r0
 800e1e0:	4608      	mov	r0, r1
 800e1e2:	4611      	mov	r1, r2
 800e1e4:	602b      	str	r3, [r5, #0]
 800e1e6:	f7f5 feb7 	bl	8003f58 <_kill>
 800e1ea:	1c43      	adds	r3, r0, #1
 800e1ec:	d102      	bne.n	800e1f4 <_kill_r+0x1c>
 800e1ee:	682b      	ldr	r3, [r5, #0]
 800e1f0:	b103      	cbz	r3, 800e1f4 <_kill_r+0x1c>
 800e1f2:	6023      	str	r3, [r4, #0]
 800e1f4:	bd38      	pop	{r3, r4, r5, pc}
 800e1f6:	bf00      	nop
 800e1f8:	24000e28 	.word	0x24000e28

0800e1fc <_getpid_r>:
 800e1fc:	f7f5 bea4 	b.w	8003f48 <_getpid>

0800e200 <sbrk_aligned>:
 800e200:	b570      	push	{r4, r5, r6, lr}
 800e202:	4e0e      	ldr	r6, [pc, #56]	; (800e23c <sbrk_aligned+0x3c>)
 800e204:	460c      	mov	r4, r1
 800e206:	6831      	ldr	r1, [r6, #0]
 800e208:	4605      	mov	r5, r0
 800e20a:	b911      	cbnz	r1, 800e212 <sbrk_aligned+0x12>
 800e20c:	f000 f8bc 	bl	800e388 <_sbrk_r>
 800e210:	6030      	str	r0, [r6, #0]
 800e212:	4621      	mov	r1, r4
 800e214:	4628      	mov	r0, r5
 800e216:	f000 f8b7 	bl	800e388 <_sbrk_r>
 800e21a:	1c43      	adds	r3, r0, #1
 800e21c:	d00a      	beq.n	800e234 <sbrk_aligned+0x34>
 800e21e:	1cc4      	adds	r4, r0, #3
 800e220:	f024 0403 	bic.w	r4, r4, #3
 800e224:	42a0      	cmp	r0, r4
 800e226:	d007      	beq.n	800e238 <sbrk_aligned+0x38>
 800e228:	1a21      	subs	r1, r4, r0
 800e22a:	4628      	mov	r0, r5
 800e22c:	f000 f8ac 	bl	800e388 <_sbrk_r>
 800e230:	3001      	adds	r0, #1
 800e232:	d101      	bne.n	800e238 <sbrk_aligned+0x38>
 800e234:	f04f 34ff 	mov.w	r4, #4294967295
 800e238:	4620      	mov	r0, r4
 800e23a:	bd70      	pop	{r4, r5, r6, pc}
 800e23c:	24000e24 	.word	0x24000e24

0800e240 <_malloc_r>:
 800e240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e244:	1ccd      	adds	r5, r1, #3
 800e246:	f025 0503 	bic.w	r5, r5, #3
 800e24a:	3508      	adds	r5, #8
 800e24c:	2d0c      	cmp	r5, #12
 800e24e:	bf38      	it	cc
 800e250:	250c      	movcc	r5, #12
 800e252:	2d00      	cmp	r5, #0
 800e254:	4607      	mov	r7, r0
 800e256:	db01      	blt.n	800e25c <_malloc_r+0x1c>
 800e258:	42a9      	cmp	r1, r5
 800e25a:	d905      	bls.n	800e268 <_malloc_r+0x28>
 800e25c:	230c      	movs	r3, #12
 800e25e:	603b      	str	r3, [r7, #0]
 800e260:	2600      	movs	r6, #0
 800e262:	4630      	mov	r0, r6
 800e264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e268:	4e2e      	ldr	r6, [pc, #184]	; (800e324 <_malloc_r+0xe4>)
 800e26a:	f000 f89d 	bl	800e3a8 <__malloc_lock>
 800e26e:	6833      	ldr	r3, [r6, #0]
 800e270:	461c      	mov	r4, r3
 800e272:	bb34      	cbnz	r4, 800e2c2 <_malloc_r+0x82>
 800e274:	4629      	mov	r1, r5
 800e276:	4638      	mov	r0, r7
 800e278:	f7ff ffc2 	bl	800e200 <sbrk_aligned>
 800e27c:	1c43      	adds	r3, r0, #1
 800e27e:	4604      	mov	r4, r0
 800e280:	d14d      	bne.n	800e31e <_malloc_r+0xde>
 800e282:	6834      	ldr	r4, [r6, #0]
 800e284:	4626      	mov	r6, r4
 800e286:	2e00      	cmp	r6, #0
 800e288:	d140      	bne.n	800e30c <_malloc_r+0xcc>
 800e28a:	6823      	ldr	r3, [r4, #0]
 800e28c:	4631      	mov	r1, r6
 800e28e:	4638      	mov	r0, r7
 800e290:	eb04 0803 	add.w	r8, r4, r3
 800e294:	f000 f878 	bl	800e388 <_sbrk_r>
 800e298:	4580      	cmp	r8, r0
 800e29a:	d13a      	bne.n	800e312 <_malloc_r+0xd2>
 800e29c:	6821      	ldr	r1, [r4, #0]
 800e29e:	3503      	adds	r5, #3
 800e2a0:	1a6d      	subs	r5, r5, r1
 800e2a2:	f025 0503 	bic.w	r5, r5, #3
 800e2a6:	3508      	adds	r5, #8
 800e2a8:	2d0c      	cmp	r5, #12
 800e2aa:	bf38      	it	cc
 800e2ac:	250c      	movcc	r5, #12
 800e2ae:	4629      	mov	r1, r5
 800e2b0:	4638      	mov	r0, r7
 800e2b2:	f7ff ffa5 	bl	800e200 <sbrk_aligned>
 800e2b6:	3001      	adds	r0, #1
 800e2b8:	d02b      	beq.n	800e312 <_malloc_r+0xd2>
 800e2ba:	6823      	ldr	r3, [r4, #0]
 800e2bc:	442b      	add	r3, r5
 800e2be:	6023      	str	r3, [r4, #0]
 800e2c0:	e00e      	b.n	800e2e0 <_malloc_r+0xa0>
 800e2c2:	6822      	ldr	r2, [r4, #0]
 800e2c4:	1b52      	subs	r2, r2, r5
 800e2c6:	d41e      	bmi.n	800e306 <_malloc_r+0xc6>
 800e2c8:	2a0b      	cmp	r2, #11
 800e2ca:	d916      	bls.n	800e2fa <_malloc_r+0xba>
 800e2cc:	1961      	adds	r1, r4, r5
 800e2ce:	42a3      	cmp	r3, r4
 800e2d0:	6025      	str	r5, [r4, #0]
 800e2d2:	bf18      	it	ne
 800e2d4:	6059      	strne	r1, [r3, #4]
 800e2d6:	6863      	ldr	r3, [r4, #4]
 800e2d8:	bf08      	it	eq
 800e2da:	6031      	streq	r1, [r6, #0]
 800e2dc:	5162      	str	r2, [r4, r5]
 800e2de:	604b      	str	r3, [r1, #4]
 800e2e0:	4638      	mov	r0, r7
 800e2e2:	f104 060b 	add.w	r6, r4, #11
 800e2e6:	f000 f865 	bl	800e3b4 <__malloc_unlock>
 800e2ea:	f026 0607 	bic.w	r6, r6, #7
 800e2ee:	1d23      	adds	r3, r4, #4
 800e2f0:	1af2      	subs	r2, r6, r3
 800e2f2:	d0b6      	beq.n	800e262 <_malloc_r+0x22>
 800e2f4:	1b9b      	subs	r3, r3, r6
 800e2f6:	50a3      	str	r3, [r4, r2]
 800e2f8:	e7b3      	b.n	800e262 <_malloc_r+0x22>
 800e2fa:	6862      	ldr	r2, [r4, #4]
 800e2fc:	42a3      	cmp	r3, r4
 800e2fe:	bf0c      	ite	eq
 800e300:	6032      	streq	r2, [r6, #0]
 800e302:	605a      	strne	r2, [r3, #4]
 800e304:	e7ec      	b.n	800e2e0 <_malloc_r+0xa0>
 800e306:	4623      	mov	r3, r4
 800e308:	6864      	ldr	r4, [r4, #4]
 800e30a:	e7b2      	b.n	800e272 <_malloc_r+0x32>
 800e30c:	4634      	mov	r4, r6
 800e30e:	6876      	ldr	r6, [r6, #4]
 800e310:	e7b9      	b.n	800e286 <_malloc_r+0x46>
 800e312:	230c      	movs	r3, #12
 800e314:	603b      	str	r3, [r7, #0]
 800e316:	4638      	mov	r0, r7
 800e318:	f000 f84c 	bl	800e3b4 <__malloc_unlock>
 800e31c:	e7a1      	b.n	800e262 <_malloc_r+0x22>
 800e31e:	6025      	str	r5, [r4, #0]
 800e320:	e7de      	b.n	800e2e0 <_malloc_r+0xa0>
 800e322:	bf00      	nop
 800e324:	24000e20 	.word	0x24000e20

0800e328 <_realloc_r>:
 800e328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e32c:	4680      	mov	r8, r0
 800e32e:	4614      	mov	r4, r2
 800e330:	460e      	mov	r6, r1
 800e332:	b921      	cbnz	r1, 800e33e <_realloc_r+0x16>
 800e334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e338:	4611      	mov	r1, r2
 800e33a:	f7ff bf81 	b.w	800e240 <_malloc_r>
 800e33e:	b92a      	cbnz	r2, 800e34c <_realloc_r+0x24>
 800e340:	f000 f83e 	bl	800e3c0 <_free_r>
 800e344:	4625      	mov	r5, r4
 800e346:	4628      	mov	r0, r5
 800e348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e34c:	f000 f884 	bl	800e458 <_malloc_usable_size_r>
 800e350:	4284      	cmp	r4, r0
 800e352:	4607      	mov	r7, r0
 800e354:	d802      	bhi.n	800e35c <_realloc_r+0x34>
 800e356:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e35a:	d812      	bhi.n	800e382 <_realloc_r+0x5a>
 800e35c:	4621      	mov	r1, r4
 800e35e:	4640      	mov	r0, r8
 800e360:	f7ff ff6e 	bl	800e240 <_malloc_r>
 800e364:	4605      	mov	r5, r0
 800e366:	2800      	cmp	r0, #0
 800e368:	d0ed      	beq.n	800e346 <_realloc_r+0x1e>
 800e36a:	42bc      	cmp	r4, r7
 800e36c:	4622      	mov	r2, r4
 800e36e:	4631      	mov	r1, r6
 800e370:	bf28      	it	cs
 800e372:	463a      	movcs	r2, r7
 800e374:	f7ff fee2 	bl	800e13c <memcpy>
 800e378:	4631      	mov	r1, r6
 800e37a:	4640      	mov	r0, r8
 800e37c:	f000 f820 	bl	800e3c0 <_free_r>
 800e380:	e7e1      	b.n	800e346 <_realloc_r+0x1e>
 800e382:	4635      	mov	r5, r6
 800e384:	e7df      	b.n	800e346 <_realloc_r+0x1e>
	...

0800e388 <_sbrk_r>:
 800e388:	b538      	push	{r3, r4, r5, lr}
 800e38a:	4d06      	ldr	r5, [pc, #24]	; (800e3a4 <_sbrk_r+0x1c>)
 800e38c:	2300      	movs	r3, #0
 800e38e:	4604      	mov	r4, r0
 800e390:	4608      	mov	r0, r1
 800e392:	602b      	str	r3, [r5, #0]
 800e394:	f7f5 fdfa 	bl	8003f8c <_sbrk>
 800e398:	1c43      	adds	r3, r0, #1
 800e39a:	d102      	bne.n	800e3a2 <_sbrk_r+0x1a>
 800e39c:	682b      	ldr	r3, [r5, #0]
 800e39e:	b103      	cbz	r3, 800e3a2 <_sbrk_r+0x1a>
 800e3a0:	6023      	str	r3, [r4, #0]
 800e3a2:	bd38      	pop	{r3, r4, r5, pc}
 800e3a4:	24000e28 	.word	0x24000e28

0800e3a8 <__malloc_lock>:
 800e3a8:	4801      	ldr	r0, [pc, #4]	; (800e3b0 <__malloc_lock+0x8>)
 800e3aa:	f000 b85d 	b.w	800e468 <__retarget_lock_acquire_recursive>
 800e3ae:	bf00      	nop
 800e3b0:	24000e2c 	.word	0x24000e2c

0800e3b4 <__malloc_unlock>:
 800e3b4:	4801      	ldr	r0, [pc, #4]	; (800e3bc <__malloc_unlock+0x8>)
 800e3b6:	f000 b858 	b.w	800e46a <__retarget_lock_release_recursive>
 800e3ba:	bf00      	nop
 800e3bc:	24000e2c 	.word	0x24000e2c

0800e3c0 <_free_r>:
 800e3c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3c2:	2900      	cmp	r1, #0
 800e3c4:	d044      	beq.n	800e450 <_free_r+0x90>
 800e3c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3ca:	9001      	str	r0, [sp, #4]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	f1a1 0404 	sub.w	r4, r1, #4
 800e3d2:	bfb8      	it	lt
 800e3d4:	18e4      	addlt	r4, r4, r3
 800e3d6:	f7ff ffe7 	bl	800e3a8 <__malloc_lock>
 800e3da:	4a1e      	ldr	r2, [pc, #120]	; (800e454 <_free_r+0x94>)
 800e3dc:	9801      	ldr	r0, [sp, #4]
 800e3de:	6813      	ldr	r3, [r2, #0]
 800e3e0:	b933      	cbnz	r3, 800e3f0 <_free_r+0x30>
 800e3e2:	6063      	str	r3, [r4, #4]
 800e3e4:	6014      	str	r4, [r2, #0]
 800e3e6:	b003      	add	sp, #12
 800e3e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3ec:	f7ff bfe2 	b.w	800e3b4 <__malloc_unlock>
 800e3f0:	42a3      	cmp	r3, r4
 800e3f2:	d908      	bls.n	800e406 <_free_r+0x46>
 800e3f4:	6825      	ldr	r5, [r4, #0]
 800e3f6:	1961      	adds	r1, r4, r5
 800e3f8:	428b      	cmp	r3, r1
 800e3fa:	bf01      	itttt	eq
 800e3fc:	6819      	ldreq	r1, [r3, #0]
 800e3fe:	685b      	ldreq	r3, [r3, #4]
 800e400:	1949      	addeq	r1, r1, r5
 800e402:	6021      	streq	r1, [r4, #0]
 800e404:	e7ed      	b.n	800e3e2 <_free_r+0x22>
 800e406:	461a      	mov	r2, r3
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	b10b      	cbz	r3, 800e410 <_free_r+0x50>
 800e40c:	42a3      	cmp	r3, r4
 800e40e:	d9fa      	bls.n	800e406 <_free_r+0x46>
 800e410:	6811      	ldr	r1, [r2, #0]
 800e412:	1855      	adds	r5, r2, r1
 800e414:	42a5      	cmp	r5, r4
 800e416:	d10b      	bne.n	800e430 <_free_r+0x70>
 800e418:	6824      	ldr	r4, [r4, #0]
 800e41a:	4421      	add	r1, r4
 800e41c:	1854      	adds	r4, r2, r1
 800e41e:	42a3      	cmp	r3, r4
 800e420:	6011      	str	r1, [r2, #0]
 800e422:	d1e0      	bne.n	800e3e6 <_free_r+0x26>
 800e424:	681c      	ldr	r4, [r3, #0]
 800e426:	685b      	ldr	r3, [r3, #4]
 800e428:	6053      	str	r3, [r2, #4]
 800e42a:	4421      	add	r1, r4
 800e42c:	6011      	str	r1, [r2, #0]
 800e42e:	e7da      	b.n	800e3e6 <_free_r+0x26>
 800e430:	d902      	bls.n	800e438 <_free_r+0x78>
 800e432:	230c      	movs	r3, #12
 800e434:	6003      	str	r3, [r0, #0]
 800e436:	e7d6      	b.n	800e3e6 <_free_r+0x26>
 800e438:	6825      	ldr	r5, [r4, #0]
 800e43a:	1961      	adds	r1, r4, r5
 800e43c:	428b      	cmp	r3, r1
 800e43e:	bf04      	itt	eq
 800e440:	6819      	ldreq	r1, [r3, #0]
 800e442:	685b      	ldreq	r3, [r3, #4]
 800e444:	6063      	str	r3, [r4, #4]
 800e446:	bf04      	itt	eq
 800e448:	1949      	addeq	r1, r1, r5
 800e44a:	6021      	streq	r1, [r4, #0]
 800e44c:	6054      	str	r4, [r2, #4]
 800e44e:	e7ca      	b.n	800e3e6 <_free_r+0x26>
 800e450:	b003      	add	sp, #12
 800e452:	bd30      	pop	{r4, r5, pc}
 800e454:	24000e20 	.word	0x24000e20

0800e458 <_malloc_usable_size_r>:
 800e458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e45c:	1f18      	subs	r0, r3, #4
 800e45e:	2b00      	cmp	r3, #0
 800e460:	bfbc      	itt	lt
 800e462:	580b      	ldrlt	r3, [r1, r0]
 800e464:	18c0      	addlt	r0, r0, r3
 800e466:	4770      	bx	lr

0800e468 <__retarget_lock_acquire_recursive>:
 800e468:	4770      	bx	lr

0800e46a <__retarget_lock_release_recursive>:
 800e46a:	4770      	bx	lr

0800e46c <_init>:
 800e46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e46e:	bf00      	nop
 800e470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e472:	bc08      	pop	{r3}
 800e474:	469e      	mov	lr, r3
 800e476:	4770      	bx	lr

0800e478 <_fini>:
 800e478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e47a:	bf00      	nop
 800e47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e47e:	bc08      	pop	{r3}
 800e480:	469e      	mov	lr, r3
 800e482:	4770      	bx	lr
