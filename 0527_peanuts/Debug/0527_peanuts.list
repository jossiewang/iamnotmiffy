
0527_peanuts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfc4  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800e290  0800e290  0001e290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e580  0800e580  0001e580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800e588  0800e588  0001e588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e590  0800e590  0001e590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800e594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000d50  24000078  0800e60c  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000dc8  0800e60c  00020dc8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f2c5  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003315  00000000  00000000  0003f36b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001440  00000000  00000000  00042680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001350  00000000  00000000  00043ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034eda  00000000  00000000  00044e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a6f3  00000000  00000000  00079cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015338c  00000000  00000000  000943dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e7769  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005b60  00000000  00000000  001e77bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000078 	.word	0x24000078
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800e278 	.word	0x0800e278

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400007c 	.word	0x2400007c
 8000308:	0800e278 	.word	0x0800e278

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295
 800032c:	f04f 30ff 	movne.w	r0, #4294967295
 8000330:	f000 b974 	b.w	800061c <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9d08      	ldr	r5, [sp, #32]
 8000352:	4604      	mov	r4, r0
 8000354:	468e      	mov	lr, r1
 8000356:	2b00      	cmp	r3, #0
 8000358:	d14d      	bne.n	80003f6 <__udivmoddi4+0xaa>
 800035a:	428a      	cmp	r2, r1
 800035c:	4694      	mov	ip, r2
 800035e:	d969      	bls.n	8000434 <__udivmoddi4+0xe8>
 8000360:	fab2 f282 	clz	r2, r2
 8000364:	b152      	cbz	r2, 800037c <__udivmoddi4+0x30>
 8000366:	fa01 f302 	lsl.w	r3, r1, r2
 800036a:	f1c2 0120 	rsb	r1, r2, #32
 800036e:	fa20 f101 	lsr.w	r1, r0, r1
 8000372:	fa0c fc02 	lsl.w	ip, ip, r2
 8000376:	ea41 0e03 	orr.w	lr, r1, r3
 800037a:	4094      	lsls	r4, r2
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	0c21      	lsrs	r1, r4, #16
 8000382:	fbbe f6f8 	udiv	r6, lr, r8
 8000386:	fa1f f78c 	uxth.w	r7, ip
 800038a:	fb08 e316 	mls	r3, r8, r6, lr
 800038e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000392:	fb06 f107 	mul.w	r1, r6, r7
 8000396:	4299      	cmp	r1, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x64>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 811f 	bcs.w	80005e4 <__udivmoddi4+0x298>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 811c 	bls.w	80005e4 <__udivmoddi4+0x298>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	4463      	add	r3, ip
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 f707 	mul.w	r7, r0, r7
 80003c4:	42a7      	cmp	r7, r4
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x92>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	f080 810a 	bcs.w	80005e8 <__udivmoddi4+0x29c>
 80003d4:	42a7      	cmp	r7, r4
 80003d6:	f240 8107 	bls.w	80005e8 <__udivmoddi4+0x29c>
 80003da:	4464      	add	r4, ip
 80003dc:	3802      	subs	r0, #2
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	1be4      	subs	r4, r4, r7
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa4>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0xc2>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80ef 	beq.w	80005de <__udivmoddi4+0x292>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x160>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0xd4>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80f9 	bhi.w	8000612 <__udivmoddi4+0x2c6>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0303 	sbc.w	r3, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	469e      	mov	lr, r3
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0e0      	beq.n	80003f0 <__udivmoddi4+0xa4>
 800042e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000432:	e7dd      	b.n	80003f0 <__udivmoddi4+0xa4>
 8000434:	b902      	cbnz	r2, 8000438 <__udivmoddi4+0xec>
 8000436:	deff      	udf	#255	; 0xff
 8000438:	fab2 f282 	clz	r2, r2
 800043c:	2a00      	cmp	r2, #0
 800043e:	f040 8092 	bne.w	8000566 <__udivmoddi4+0x21a>
 8000442:	eba1 010c 	sub.w	r1, r1, ip
 8000446:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	2601      	movs	r6, #1
 8000450:	0c20      	lsrs	r0, r4, #16
 8000452:	fbb1 f3f7 	udiv	r3, r1, r7
 8000456:	fb07 1113 	mls	r1, r7, r3, r1
 800045a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800045e:	fb0e f003 	mul.w	r0, lr, r3
 8000462:	4288      	cmp	r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x12c>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f103 38ff 	add.w	r8, r3, #4294967295
 800046e:	d202      	bcs.n	8000476 <__udivmoddi4+0x12a>
 8000470:	4288      	cmp	r0, r1
 8000472:	f200 80cb 	bhi.w	800060c <__udivmoddi4+0x2c0>
 8000476:	4643      	mov	r3, r8
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1110 	mls	r1, r7, r0, r1
 8000484:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000488:	fb0e fe00 	mul.w	lr, lr, r0
 800048c:	45a6      	cmp	lr, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x156>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f100 31ff 	add.w	r1, r0, #4294967295
 8000498:	d202      	bcs.n	80004a0 <__udivmoddi4+0x154>
 800049a:	45a6      	cmp	lr, r4
 800049c:	f200 80bb 	bhi.w	8000616 <__udivmoddi4+0x2ca>
 80004a0:	4608      	mov	r0, r1
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004aa:	e79c      	b.n	80003e6 <__udivmoddi4+0x9a>
 80004ac:	f1c6 0720 	rsb	r7, r6, #32
 80004b0:	40b3      	lsls	r3, r6
 80004b2:	fa22 fc07 	lsr.w	ip, r2, r7
 80004b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ba:	fa20 f407 	lsr.w	r4, r0, r7
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	431c      	orrs	r4, r3
 80004c4:	40f9      	lsrs	r1, r7
 80004c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ca:	fa00 f306 	lsl.w	r3, r0, r6
 80004ce:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d2:	0c20      	lsrs	r0, r4, #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fb09 1118 	mls	r1, r9, r8, r1
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	fb08 f00e 	mul.w	r0, r8, lr
 80004e4:	4288      	cmp	r0, r1
 80004e6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ea:	d90b      	bls.n	8000504 <__udivmoddi4+0x1b8>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f4:	f080 8088 	bcs.w	8000608 <__udivmoddi4+0x2bc>
 80004f8:	4288      	cmp	r0, r1
 80004fa:	f240 8085 	bls.w	8000608 <__udivmoddi4+0x2bc>
 80004fe:	f1a8 0802 	sub.w	r8, r8, #2
 8000502:	4461      	add	r1, ip
 8000504:	1a09      	subs	r1, r1, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb1 f0f9 	udiv	r0, r1, r9
 800050c:	fb09 1110 	mls	r1, r9, r0, r1
 8000510:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000514:	fb00 fe0e 	mul.w	lr, r0, lr
 8000518:	458e      	cmp	lr, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x1e2>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f100 34ff 	add.w	r4, r0, #4294967295
 8000524:	d26c      	bcs.n	8000600 <__udivmoddi4+0x2b4>
 8000526:	458e      	cmp	lr, r1
 8000528:	d96a      	bls.n	8000600 <__udivmoddi4+0x2b4>
 800052a:	3802      	subs	r0, #2
 800052c:	4461      	add	r1, ip
 800052e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000532:	fba0 9402 	umull	r9, r4, r0, r2
 8000536:	eba1 010e 	sub.w	r1, r1, lr
 800053a:	42a1      	cmp	r1, r4
 800053c:	46c8      	mov	r8, r9
 800053e:	46a6      	mov	lr, r4
 8000540:	d356      	bcc.n	80005f0 <__udivmoddi4+0x2a4>
 8000542:	d053      	beq.n	80005ec <__udivmoddi4+0x2a0>
 8000544:	b15d      	cbz	r5, 800055e <__udivmoddi4+0x212>
 8000546:	ebb3 0208 	subs.w	r2, r3, r8
 800054a:	eb61 010e 	sbc.w	r1, r1, lr
 800054e:	fa01 f707 	lsl.w	r7, r1, r7
 8000552:	fa22 f306 	lsr.w	r3, r2, r6
 8000556:	40f1      	lsrs	r1, r6
 8000558:	431f      	orrs	r7, r3
 800055a:	e9c5 7100 	strd	r7, r1, [r5]
 800055e:	2600      	movs	r6, #0
 8000560:	4631      	mov	r1, r6
 8000562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000566:	f1c2 0320 	rsb	r3, r2, #32
 800056a:	40d8      	lsrs	r0, r3
 800056c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000570:	fa21 f303 	lsr.w	r3, r1, r3
 8000574:	4091      	lsls	r1, r2
 8000576:	4301      	orrs	r1, r0
 8000578:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800057c:	fa1f fe8c 	uxth.w	lr, ip
 8000580:	fbb3 f0f7 	udiv	r0, r3, r7
 8000584:	fb07 3610 	mls	r6, r7, r0, r3
 8000588:	0c0b      	lsrs	r3, r1, #16
 800058a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800058e:	fb00 f60e 	mul.w	r6, r0, lr
 8000592:	429e      	cmp	r6, r3
 8000594:	fa04 f402 	lsl.w	r4, r4, r2
 8000598:	d908      	bls.n	80005ac <__udivmoddi4+0x260>
 800059a:	eb1c 0303 	adds.w	r3, ip, r3
 800059e:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a2:	d22f      	bcs.n	8000604 <__udivmoddi4+0x2b8>
 80005a4:	429e      	cmp	r6, r3
 80005a6:	d92d      	bls.n	8000604 <__udivmoddi4+0x2b8>
 80005a8:	3802      	subs	r0, #2
 80005aa:	4463      	add	r3, ip
 80005ac:	1b9b      	subs	r3, r3, r6
 80005ae:	b289      	uxth	r1, r1
 80005b0:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b4:	fb07 3316 	mls	r3, r7, r6, r3
 80005b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005bc:	fb06 f30e 	mul.w	r3, r6, lr
 80005c0:	428b      	cmp	r3, r1
 80005c2:	d908      	bls.n	80005d6 <__udivmoddi4+0x28a>
 80005c4:	eb1c 0101 	adds.w	r1, ip, r1
 80005c8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005cc:	d216      	bcs.n	80005fc <__udivmoddi4+0x2b0>
 80005ce:	428b      	cmp	r3, r1
 80005d0:	d914      	bls.n	80005fc <__udivmoddi4+0x2b0>
 80005d2:	3e02      	subs	r6, #2
 80005d4:	4461      	add	r1, ip
 80005d6:	1ac9      	subs	r1, r1, r3
 80005d8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005dc:	e738      	b.n	8000450 <__udivmoddi4+0x104>
 80005de:	462e      	mov	r6, r5
 80005e0:	4628      	mov	r0, r5
 80005e2:	e705      	b.n	80003f0 <__udivmoddi4+0xa4>
 80005e4:	4606      	mov	r6, r0
 80005e6:	e6e3      	b.n	80003b0 <__udivmoddi4+0x64>
 80005e8:	4618      	mov	r0, r3
 80005ea:	e6f8      	b.n	80003de <__udivmoddi4+0x92>
 80005ec:	454b      	cmp	r3, r9
 80005ee:	d2a9      	bcs.n	8000544 <__udivmoddi4+0x1f8>
 80005f0:	ebb9 0802 	subs.w	r8, r9, r2
 80005f4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005f8:	3801      	subs	r0, #1
 80005fa:	e7a3      	b.n	8000544 <__udivmoddi4+0x1f8>
 80005fc:	4646      	mov	r6, r8
 80005fe:	e7ea      	b.n	80005d6 <__udivmoddi4+0x28a>
 8000600:	4620      	mov	r0, r4
 8000602:	e794      	b.n	800052e <__udivmoddi4+0x1e2>
 8000604:	4640      	mov	r0, r8
 8000606:	e7d1      	b.n	80005ac <__udivmoddi4+0x260>
 8000608:	46d0      	mov	r8, sl
 800060a:	e77b      	b.n	8000504 <__udivmoddi4+0x1b8>
 800060c:	3b02      	subs	r3, #2
 800060e:	4461      	add	r1, ip
 8000610:	e732      	b.n	8000478 <__udivmoddi4+0x12c>
 8000612:	4630      	mov	r0, r6
 8000614:	e709      	b.n	800042a <__udivmoddi4+0xde>
 8000616:	4464      	add	r4, ip
 8000618:	3802      	subs	r0, #2
 800061a:	e742      	b.n	80004a2 <__udivmoddi4+0x156>

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	0a5a      	lsrs	r2, r3, #9
 8000630:	490f      	ldr	r1, [pc, #60]	; (8000670 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000632:	fba1 1202 	umull	r1, r2, r1, r2
 8000636:	09d2      	lsrs	r2, r2, #7
 8000638:	490e      	ldr	r1, [pc, #56]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063a:	fb01 f202 	mul.w	r2, r1, r2
 800063e:	1a9b      	subs	r3, r3, r2
 8000640:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	0a5b      	lsrs	r3, r3, #9
 8000648:	4a09      	ldr	r2, [pc, #36]	; (8000670 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064a:	fba2 2303 	umull	r2, r3, r2, r3
 800064e:	09db      	lsrs	r3, r3, #7
 8000650:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	441a      	add	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	68fa      	ldr	r2, [r7, #12]
 8000662:	601a      	str	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	00044b83 	.word	0x00044b83
 8000674:	3b9aca00 	.word	0x3b9aca00

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f003 fc6e 	bl	8003f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f84a 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f000 fb74 	bl	8000d70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000688:	f000 fb4a 	bl	8000d20 <MX_DMA_Init>
  MX_TIM2_Init();
 800068c:	f000 f90e 	bl	80008ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8000690:	f000 f970 	bl	8000974 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000694:	f000 f9be 	bl	8000a14 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000698:	f000 fa12 	bl	8000ac0 <MX_TIM8_Init>
  MX_TIM23_Init();
 800069c:	f000 fa9e 	bl	8000bdc <MX_TIM23_Init>
  MX_USART3_UART_Init();
 80006a0:	f000 faf2 	bl	8000c88 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80006a4:	f000 f8a8 	bl	80007f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim3);
 80006a8:	4815      	ldr	r0, [pc, #84]	; (8000700 <main+0x88>)
 80006aa:	f009 fe99 	bl	800a3e0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Encoder_Start(TIM_ENC_MF, TIM_CHANNEL_1);
 80006ae:	2100      	movs	r1, #0
 80006b0:	4814      	ldr	r0, [pc, #80]	; (8000704 <main+0x8c>)
 80006b2:	f00a f935 	bl	800a920 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_MF, TIM_CHANNEL_2);
 80006b6:	2104      	movs	r1, #4
 80006b8:	4812      	ldr	r0, [pc, #72]	; (8000704 <main+0x8c>)
 80006ba:	f00a f931 	bl	800a920 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_ML, TIM_CHANNEL_1);
 80006be:	2100      	movs	r1, #0
 80006c0:	4811      	ldr	r0, [pc, #68]	; (8000708 <main+0x90>)
 80006c2:	f00a f92d 	bl	800a920 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_ML, TIM_CHANNEL_2);
 80006c6:	2104      	movs	r1, #4
 80006c8:	480f      	ldr	r0, [pc, #60]	; (8000708 <main+0x90>)
 80006ca:	f00a f929 	bl	800a920 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_MR, TIM_CHANNEL_1);
 80006ce:	2100      	movs	r1, #0
 80006d0:	480e      	ldr	r0, [pc, #56]	; (800070c <main+0x94>)
 80006d2:	f00a f925 	bl	800a920 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(TIM_ENC_MR, TIM_CHANNEL_2);
 80006d6:	2104      	movs	r1, #4
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <main+0x94>)
 80006da:	f00a f921 	bl	800a920 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(TIM_PWM_MF, CH_PWM_MF);
 80006de:	2100      	movs	r1, #0
 80006e0:	480b      	ldr	r0, [pc, #44]	; (8000710 <main+0x98>)
 80006e2:	f009 ff5b 	bl	800a59c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(TIM_PWM_ML, CH_PWM_ML);
 80006e6:	210c      	movs	r1, #12
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <main+0x98>)
 80006ea:	f009 ff57 	bl	800a59c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(TIM_PWM_MR, CH_PWM_MR);
 80006ee:	2108      	movs	r1, #8
 80006f0:	4808      	ldr	r0, [pc, #32]	; (8000714 <main+0x9c>)
 80006f2:	f009 ff53 	bl	800a59c <HAL_TIM_PWM_Start>
  	setup();
 80006f6:	f002 fa2f 	bl	8002b58 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 80006fa:	f002 fa3d 	bl	8002b78 <loop>
 80006fe:	e7fc      	b.n	80006fa <main+0x82>
 8000700:	2400012c 	.word	0x2400012c
 8000704:	24000094 	.word	0x24000094
 8000708:	24000178 	.word	0x24000178
 800070c:	24000210 	.word	0x24000210
 8000710:	240000e0 	.word	0x240000e0
 8000714:	240001c4 	.word	0x240001c4

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b09c      	sub	sp, #112	; 0x70
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000722:	224c      	movs	r2, #76	; 0x4c
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f00d fc1c 	bl	800df64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2220      	movs	r2, #32
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f00d fc16 	bl	800df64 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000738:	2002      	movs	r0, #2
 800073a:	f007 f897 	bl	800786c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b2c      	ldr	r3, [pc, #176]	; (80007f4 <SystemClock_Config+0xdc>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800074a:	4a2a      	ldr	r2, [pc, #168]	; (80007f4 <SystemClock_Config+0xdc>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6193      	str	r3, [r2, #24]
 8000752:	4b28      	ldr	r3, [pc, #160]	; (80007f4 <SystemClock_Config+0xdc>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800075e:	bf00      	nop
 8000760:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <SystemClock_Config+0xdc>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800076c:	d1f8      	bne.n	8000760 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076e:	2301      	movs	r3, #1
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000772:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000778:	2302      	movs	r3, #2
 800077a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077c:	2302      	movs	r3, #2
 800077e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000780:	2304      	movs	r3, #4
 8000782:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000784:	23a8      	movs	r3, #168	; 0xa8
 8000786:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000788:	2301      	movs	r3, #1
 800078a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800078c:	2302      	movs	r3, #2
 800078e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000790:	2302      	movs	r3, #2
 8000792:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000794:	2304      	movs	r3, #4
 8000796:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000798:	2300      	movs	r3, #0
 800079a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a4:	4618      	mov	r0, r3
 80007a6:	f007 f89b 	bl	80078e0 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007b0:	f000 fbc6 	bl	8000f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	233f      	movs	r3, #63	; 0x3f
 80007b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2303      	movs	r3, #3
 80007ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80007bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007c2:	2308      	movs	r3, #8
 80007c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007c6:	2340      	movs	r3, #64	; 0x40
 80007c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ca:	2340      	movs	r3, #64	; 0x40
 80007cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007d4:	2340      	movs	r3, #64	; 0x40
 80007d6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2102      	movs	r1, #2
 80007dc:	4618      	mov	r0, r3
 80007de:	f007 fc59 	bl	8008094 <HAL_RCC_ClockConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007e8:	f000 fbaa 	bl	8000f40 <Error_Handler>
  }
}
 80007ec:	bf00      	nop
 80007ee:	3770      	adds	r7, #112	; 0x70
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	58024800 	.word	0x58024800

080007f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	; 0x30
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	2224      	movs	r2, #36	; 0x24
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f00d fbac 	bl	800df64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080c:	463b      	mov	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000816:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <MX_TIM1_Init+0xac>)
 8000818:	4a23      	ldr	r2, [pc, #140]	; (80008a8 <MX_TIM1_Init+0xb0>)
 800081a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800081c:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_TIM1_Init+0xac>)
 800081e:	2200      	movs	r2, #0
 8000820:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000822:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <MX_TIM1_Init+0xac>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <MX_TIM1_Init+0xac>)
 800082a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800082e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_TIM1_Init+0xac>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <MX_TIM1_Init+0xac>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_TIM1_Init+0xac>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000842:	2303      	movs	r3, #3
 8000844:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800084a:	2301      	movs	r3, #1
 800084c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800085a:	2301      	movs	r3, #1
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	4619      	mov	r1, r3
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_TIM1_Init+0xac>)
 800086e:	f009 ffb1 	bl	800a7d4 <HAL_TIM_Encoder_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000878:	f000 fb62 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087c:	2300      	movs	r3, #0
 800087e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_TIM1_Init+0xac>)
 800088e:	f00b f869 	bl	800b964 <HAL_TIMEx_MasterConfigSynchronization>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000898:	f000 fb52 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	3730      	adds	r7, #48	; 0x30
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	24000094 	.word	0x24000094
 80008a8:	40010000 	.word	0x40010000

080008ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008be:	463b      	mov	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
 80008cc:	615a      	str	r2, [r3, #20]
 80008ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d0:	4b27      	ldr	r3, [pc, #156]	; (8000970 <MX_TIM2_Init+0xc4>)
 80008d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <MX_TIM2_Init+0xc4>)
 80008da:	223f      	movs	r2, #63	; 0x3f
 80008dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b24      	ldr	r3, [pc, #144]	; (8000970 <MX_TIM2_Init+0xc4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <MX_TIM2_Init+0xc4>)
 80008e6:	2231      	movs	r2, #49	; 0x31
 80008e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ea:	4b21      	ldr	r3, [pc, #132]	; (8000970 <MX_TIM2_Init+0xc4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_TIM2_Init+0xc4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008f6:	481e      	ldr	r0, [pc, #120]	; (8000970 <MX_TIM2_Init+0xc4>)
 80008f8:	f009 fdf8 	bl	800a4ec <HAL_TIM_PWM_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000902:	f000 fb1d 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4816      	ldr	r0, [pc, #88]	; (8000970 <MX_TIM2_Init+0xc4>)
 8000916:	f00b f825 	bl	800b964 <HAL_TIMEx_MasterConfigSynchronization>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000920:	f000 fb0e 	bl	8000f40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000924:	2360      	movs	r3, #96	; 0x60
 8000926:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	4619      	mov	r1, r3
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <MX_TIM2_Init+0xc4>)
 800093c:	f00a f99e 	bl	800ac7c <HAL_TIM_PWM_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000946:	f000 fafb 	bl	8000f40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800094a:	463b      	mov	r3, r7
 800094c:	220c      	movs	r2, #12
 800094e:	4619      	mov	r1, r3
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <MX_TIM2_Init+0xc4>)
 8000952:	f00a f993 	bl	800ac7c <HAL_TIM_PWM_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800095c:	f000 faf0 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000960:	4803      	ldr	r0, [pc, #12]	; (8000970 <MX_TIM2_Init+0xc4>)
 8000962:	f003 f847 	bl	80039f4 <HAL_TIM_MspPostInit>

}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	; 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	240000e0 	.word	0x240000e0

08000974 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097a:	f107 0310 	add.w	r3, r7, #16
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000992:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <MX_TIM3_Init+0x98>)
 8000994:	4a1e      	ldr	r2, [pc, #120]	; (8000a10 <MX_TIM3_Init+0x9c>)
 8000996:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_TIM3_Init+0x98>)
 800099a:	f240 3247 	movw	r2, #839	; 0x347
 800099e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_TIM3_Init+0x98>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_TIM3_Init+0x98>)
 80009a8:	f242 720f 	movw	r2, #9999	; 0x270f
 80009ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_TIM3_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <MX_TIM3_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009ba:	4814      	ldr	r0, [pc, #80]	; (8000a0c <MX_TIM3_Init+0x98>)
 80009bc:	f009 fcb8 	bl	800a330 <HAL_TIM_Base_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80009c6:	f000 fabb 	bl	8000f40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	480d      	ldr	r0, [pc, #52]	; (8000a0c <MX_TIM3_Init+0x98>)
 80009d8:	f00a fa64 	bl	800aea4 <HAL_TIM_ConfigClockSource>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80009e2:	f000 faad 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	4619      	mov	r1, r3
 80009f2:	4806      	ldr	r0, [pc, #24]	; (8000a0c <MX_TIM3_Init+0x98>)
 80009f4:	f00a ffb6 	bl	800b964 <HAL_TIMEx_MasterConfigSynchronization>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80009fe:	f000 fa9f 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	3720      	adds	r7, #32
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2400012c 	.word	0x2400012c
 8000a10:	40000400 	.word	0x40000400

08000a14 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	2224      	movs	r2, #36	; 0x24
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f00d fa9e 	bl	800df64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000a34:	4a21      	ldr	r2, [pc, #132]	; (8000abc <MX_TIM4_Init+0xa8>)
 8000a36:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a4a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a60:	2301      	movs	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a70:	2301      	movs	r3, #1
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	4619      	mov	r1, r3
 8000a82:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000a84:	f009 fea6 	bl	800a7d4 <HAL_TIM_Encoder_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000a8e:	f000 fa57 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <MX_TIM4_Init+0xa4>)
 8000aa0:	f00a ff60 	bl	800b964 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000aaa:	f000 fa49 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	3730      	adds	r7, #48	; 0x30
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	24000178 	.word	0x24000178
 8000abc:	40000800 	.word	0x40000800

08000ac0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b098      	sub	sp, #96	; 0x60
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]
 8000ae2:	615a      	str	r2, [r3, #20]
 8000ae4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2234      	movs	r2, #52	; 0x34
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f00d fa39 	bl	800df64 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000af2:	4b38      	ldr	r3, [pc, #224]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000af4:	4a38      	ldr	r2, [pc, #224]	; (8000bd8 <MX_TIM8_Init+0x118>)
 8000af6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 8000af8:	4b36      	ldr	r3, [pc, #216]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000afa:	223f      	movs	r2, #63	; 0x3f
 8000afc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afe:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8000b04:	4b33      	ldr	r3, [pc, #204]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b06:	2231      	movs	r2, #49	; 0x31
 8000b08:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0a:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b10:	4b30      	ldr	r3, [pc, #192]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b16:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b1c:	482d      	ldr	r0, [pc, #180]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b1e:	f009 fce5 	bl	800a4ec <HAL_TIM_PWM_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000b28:	f000 fa0a 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b30:	2300      	movs	r3, #0
 8000b32:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4825      	ldr	r0, [pc, #148]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b40:	f00a ff10 	bl	800b964 <HAL_TIMEx_MasterConfigSynchronization>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8000b4a:	f000 f9f9 	bl	8000f40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b4e:	2360      	movs	r3, #96	; 0x60
 8000b50:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b56:	2300      	movs	r3, #0
 8000b58:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b6e:	2208      	movs	r2, #8
 8000b70:	4619      	mov	r1, r3
 8000b72:	4818      	ldr	r0, [pc, #96]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000b74:	f00a f882 	bl	800ac7c <HAL_TIM_PWM_ConfigChannel>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8000b7e:	f000 f9df 	bl	8000f40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ba4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000bb8:	f00a ff70 	bl	800ba9c <HAL_TIMEx_ConfigBreakDeadTime>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8000bc2:	f000 f9bd 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000bc6:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <MX_TIM8_Init+0x114>)
 8000bc8:	f002 ff14 	bl	80039f4 <HAL_TIM_MspPostInit>

}
 8000bcc:	bf00      	nop
 8000bce:	3760      	adds	r7, #96	; 0x60
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	240001c4 	.word	0x240001c4
 8000bd8:	40010400 	.word	0x40010400

08000bdc <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	; 0x30
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	2224      	movs	r2, #36	; 0x24
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f00d f9ba 	bl	800df64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000bfa:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000bfc:	4a21      	ldr	r2, [pc, #132]	; (8000c84 <MX_TIM23_Init+0xa8>)
 8000bfe:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8000c00:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c06:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8000c0c:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c12:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c20:	2303      	movs	r3, #3
 8000c22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480d      	ldr	r0, [pc, #52]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000c4c:	f009 fdc2 	bl	800a7d4 <HAL_TIM_Encoder_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 8000c56:	f000 f973 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8000c62:	463b      	mov	r3, r7
 8000c64:	4619      	mov	r1, r3
 8000c66:	4806      	ldr	r0, [pc, #24]	; (8000c80 <MX_TIM23_Init+0xa4>)
 8000c68:	f00a fe7c 	bl	800b964 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 8000c72:	f000 f965 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	3730      	adds	r7, #48	; 0x30
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	24000210 	.word	0x24000210
 8000c84:	4000e000 	.word	0x4000e000

08000c88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000c8e:	4a23      	ldr	r2, [pc, #140]	; (8000d1c <MX_USART3_UART_Init+0x94>)
 8000c90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000c94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ca0:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000cae:	220c      	movs	r2, #12
 8000cb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cd0:	4811      	ldr	r0, [pc, #68]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000cd2:	f00a ffa1 	bl	800bc18 <HAL_UART_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cdc:	f000 f930 	bl	8000f40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	480d      	ldr	r0, [pc, #52]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000ce4:	f00d f820 	bl	800dd28 <HAL_UARTEx_SetTxFifoThreshold>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cee:	f000 f927 	bl	8000f40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4808      	ldr	r0, [pc, #32]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000cf6:	f00d f855 	bl	800dda4 <HAL_UARTEx_SetRxFifoThreshold>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d00:	f000 f91e 	bl	8000f40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d04:	4804      	ldr	r0, [pc, #16]	; (8000d18 <MX_USART3_UART_Init+0x90>)
 8000d06:	f00c ffd6 	bl	800dcb6 <HAL_UARTEx_DisableFifoMode>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d10:	f000 f916 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	2400025c 	.word	0x2400025c
 8000d1c:	40004800 	.word	0x40004800

08000d20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_DMA_Init+0x4c>)
 8000d28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d2c:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <MX_DMA_Init+0x4c>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <MX_DMA_Init+0x4c>)
 8000d38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	200b      	movs	r0, #11
 8000d4a:	f003 fa98 	bl	800427e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d4e:	200b      	movs	r0, #11
 8000d50:	f003 faaf 	bl	80042b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2100      	movs	r1, #0
 8000d58:	200c      	movs	r0, #12
 8000d5a:	f003 fa90 	bl	800427e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d5e:	200c      	movs	r0, #12
 8000d60:	f003 faa7 	bl	80042b2 <HAL_NVIC_EnableIRQ>

}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	58024400 	.word	0x58024400

08000d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	; 0x30
 8000d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d86:	4b39      	ldr	r3, [pc, #228]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8c:	4a37      	ldr	r2, [pc, #220]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d96:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	f003 0310 	and.w	r3, r3, #16
 8000da0:	61bb      	str	r3, [r7, #24]
 8000da2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000da4:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	4a30      	ldr	r2, [pc, #192]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000dac:	f043 0320 	orr.w	r3, r3, #32
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db4:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	f003 0320 	and.w	r3, r3, #32
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc2:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	4a28      	ldr	r2, [pc, #160]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd2:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de6:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfe:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e04:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000e06:	f043 0308 	orr.w	r3, r3, #8
 8000e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e14:	f003 0308 	and.w	r3, r3, #8
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_GPIO_Init+0xfc>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f249 51c0 	movw	r1, #38336	; 0x95c0
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <MX_GPIO_Init+0x100>)
 8000e42:	f006 fcf9 	bl	8007838 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8000e46:	f249 53c0 	movw	r3, #38336	; 0x95c0
 8000e4a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4804      	ldr	r0, [pc, #16]	; (8000e70 <MX_GPIO_Init+0x100>)
 8000e60:	f006 fa40 	bl	80072e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e64:	bf00      	nop
 8000e66:	3730      	adds	r7, #48	; 0x30
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	58021000 	.word	0x58021000

08000e74 <HAL_UART_ErrorCallback>:
void Encoder();
void PID_PWM();
void kinematics_model();

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
    if (huart == &huart3)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a11      	ldr	r2, [pc, #68]	; (8000ec4 <HAL_UART_ErrorCallback+0x50>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d11b      	bne.n	8000ebc <HAL_UART_ErrorCallback+0x48>
    {
		Vx = 0.0;
 8000e84:	4910      	ldr	r1, [pc, #64]	; (8000ec8 <HAL_UART_ErrorCallback+0x54>)
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	f04f 0300 	mov.w	r3, #0
 8000e8e:	e9c1 2300 	strd	r2, r3, [r1]
		Vy = 0.0;
 8000e92:	490e      	ldr	r1, [pc, #56]	; (8000ecc <HAL_UART_ErrorCallback+0x58>)
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	e9c1 2300 	strd	r2, r3, [r1]
		W = 0.0;
 8000ea0:	490b      	ldr	r1, [pc, #44]	; (8000ed0 <HAL_UART_ErrorCallback+0x5c>)
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_UART_DeInit(&huart3);
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <HAL_UART_ErrorCallback+0x50>)
 8000eb0:	f00a ff02 	bl	800bcb8 <HAL_UART_DeInit>
		MX_USART3_UART_Init();
 8000eb4:	f7ff fee8 	bl	8000c88 <MX_USART3_UART_Init>
		errcallback();
 8000eb8:	f001 fe68 	bl	8002b8c <errcallback>
    }
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	2400025c 	.word	0x2400025c
 8000ec8:	24000d98 	.word	0x24000d98
 8000ecc:	24000da0 	.word	0x24000da0
 8000ed0:	24000da8 	.word	0x24000da8

08000ed4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d11f      	bne.n	8000f26 <HAL_TIM_PeriodElapsedCallback+0x52>
		loop();
 8000ee6:	f001 fe47 	bl	8002b78 <loop>
		rVx++;
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000eec:	ed93 7b00 	vldr	d7, [r3]
 8000ef0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ef4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000efa:	ed83 7b00 	vstr	d7, [r3]
		rVy++;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000f00:	ed93 7b00 	vldr	d7, [r3]
 8000f04:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f08:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000f0e:	ed83 7b00 	vstr	d7, [r3]
		rW++;
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000f14:	ed93 7b00 	vldr	d7, [r3]
 8000f18:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000f22:	ed83 7b00 	vstr	d7, [r3]
		//inverse_kinematics_model();
		//Encoder();
		//PID_PWM();
		//kinematics_model();
	}
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40000400 	.word	0x40000400
 8000f34:	240003e0 	.word	0x240003e0
 8000f38:	240003e8 	.word	0x240003e8
 8000f3c:	240003f0 	.word	0x240003f0

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <Error_Handler+0x8>

08000f4a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <_ZN3ros3MsgC1Ev+0x1c>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	0800e530 	.word	0x0800e530

08000f8c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
      data()
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ffe8 	bl	8000f6c <_ZN3ros3MsgC1Ev>
 8000f9c:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ffcf 	bl	8000f4a <_ZN3ros4TimeC1Ev>
    {
    }
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	0800e518 	.word	0x0800e518

08000fbc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6859      	ldr	r1, [r3, #4]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	b2ca      	uxtb	r2, r1
 8000fd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	0a19      	lsrs	r1, r3, #8
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b2ca      	uxtb	r2, r1
 8000fe8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	0c19      	lsrs	r1, r3, #16
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	b2ca      	uxtb	r2, r1
 8000ffa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	0e19      	lsrs	r1, r3, #24
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	3303      	adds	r3, #3
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	4413      	add	r3, r2
 800100a:	b2ca      	uxtb	r2, r1
 800100c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3304      	adds	r3, #4
 8001012:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6899      	ldr	r1, [r3, #8]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	4413      	add	r3, r2
 800101e:	b2ca      	uxtb	r2, r1
 8001020:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	0a19      	lsrs	r1, r3, #8
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3301      	adds	r3, #1
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	4413      	add	r3, r2
 8001030:	b2ca      	uxtb	r2, r1
 8001032:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	0c19      	lsrs	r1, r3, #16
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	3302      	adds	r3, #2
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	4413      	add	r3, r2
 8001042:	b2ca      	uxtb	r2, r1
 8001044:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	0e19      	lsrs	r1, r3, #24
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	3303      	adds	r3, #3
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	4413      	add	r3, r2
 8001054:	b2ca      	uxtb	r2, r1
 8001056:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3304      	adds	r3, #4
 800105c:	60fb      	str	r3, [r7, #12]
      return offset;
 800105e:	68fb      	ldr	r3, [r7, #12]
    }
 8001060:	4618      	mov	r0, r3
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	4413      	add	r3, r2
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	3301      	adds	r3, #1
 8001090:	6839      	ldr	r1, [r7, #0]
 8001092:	440b      	add	r3, r1
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	431a      	orrs	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	3302      	adds	r3, #2
 80010a6:	6839      	ldr	r1, [r7, #0]
 80010a8:	440b      	add	r3, r1
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	041b      	lsls	r3, r3, #16
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3303      	adds	r3, #3
 80010bc:	6839      	ldr	r1, [r7, #0]
 80010be:	440b      	add	r3, r1
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	061b      	lsls	r3, r3, #24
 80010c4:	431a      	orrs	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3304      	adds	r3, #4
 80010ce:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	4413      	add	r3, r2
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3301      	adds	r3, #1
 80010e6:	6839      	ldr	r1, [r7, #0]
 80010e8:	440b      	add	r3, r1
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	431a      	orrs	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3302      	adds	r3, #2
 80010fc:	6839      	ldr	r1, [r7, #0]
 80010fe:	440b      	add	r3, r1
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	041b      	lsls	r3, r3, #16
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3303      	adds	r3, #3
 8001112:	6839      	ldr	r1, [r7, #0]
 8001114:	440b      	add	r3, r1
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	061b      	lsls	r3, r3, #24
 800111a:	431a      	orrs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3304      	adds	r3, #4
 8001124:	60fb      	str	r3, [r7, #12]
     return offset;
 8001126:	68fb      	ldr	r3, [r7, #12]
    }
 8001128:	4618      	mov	r0, r3
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	0800e290 	.word	0x0800e290

08001150 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	0800e2a0 	.word	0x0800e2a0

0800116c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fef8 	bl	8000f6c <_ZN3ros3MsgC1Ev>
 800117c:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	809a      	strh	r2, [r3, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a09      	ldr	r2, [pc, #36]	; (80011b0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001198:	611a      	str	r2, [r3, #16]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	615a      	str	r2, [r3, #20]
    {
    }
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	0800e500 	.word	0x0800e500
 80011b0:	0800e2c4 	.word	0x0800e2c4

080011b4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	8899      	ldrh	r1, [r3, #4]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	b2ca      	uxtb	r2, r1
 80011ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	889b      	ldrh	r3, [r3, #4]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	b299      	uxth	r1, r3
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	3301      	adds	r3, #1
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	b2ca      	uxtb	r2, r1
 80011e2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	3302      	adds	r3, #2
 80011e8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f88c 	bl	800030c <strlen>
 80011f4:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	69b9      	ldr	r1, [r7, #24]
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fcd2 	bl	8002ba8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	3304      	adds	r3, #4
 8001208:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	18d0      	adds	r0, r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4619      	mov	r1, r3
 8001218:	f00c fe96 	bl	800df48 <memcpy>
      offset += length_topic_name;
 800121c:	69fa      	ldr	r2, [r7, #28]
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	4413      	add	r3, r2
 8001222:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f86f 	bl	800030c <strlen>
 800122e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	4413      	add	r3, r2
 8001236:	6979      	ldr	r1, [r7, #20]
 8001238:	4618      	mov	r0, r3
 800123a:	f001 fcb5 	bl	8002ba8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	18d0      	adds	r0, r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	4619      	mov	r1, r3
 8001252:	f00c fe79 	bl	800df48 <memcpy>
      offset += length_message_type;
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	4413      	add	r3, r2
 800125c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f852 	bl	800030c <strlen>
 8001268:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	4413      	add	r3, r2
 8001270:	6939      	ldr	r1, [r7, #16]
 8001272:	4618      	mov	r0, r3
 8001274:	f001 fc98 	bl	8002ba8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	3304      	adds	r3, #4
 800127c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	18d0      	adds	r0, r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4619      	mov	r1, r3
 800128c:	f00c fe5c 	bl	800df48 <memcpy>
      offset += length_md5sum;
 8001290:	69fa      	ldr	r2, [r7, #28]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4413      	add	r3, r2
 8001296:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800129e:	68f9      	ldr	r1, [r7, #12]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	4413      	add	r3, r2
 80012a6:	b2ca      	uxtb	r2, r1
 80012a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	0a19      	lsrs	r1, r3, #8
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3301      	adds	r3, #1
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	4413      	add	r3, r2
 80012b6:	b2ca      	uxtb	r2, r1
 80012b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	0c19      	lsrs	r1, r3, #16
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3302      	adds	r3, #2
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	4413      	add	r3, r2
 80012c6:	b2ca      	uxtb	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	0e19      	lsrs	r1, r3, #24
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3303      	adds	r3, #3
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	4413      	add	r3, r2
 80012d6:	b2ca      	uxtb	r2, r1
 80012d8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3304      	adds	r3, #4
 80012de:	61fb      	str	r3, [r7, #28]
      return offset;
 80012e0:	69fb      	ldr	r3, [r7, #28]
    }
 80012e2:	4618      	mov	r0, r3
 80012e4:	3720      	adds	r7, #32
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b08a      	sub	sp, #40	; 0x28
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	4413      	add	r3, r2
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b29a      	uxth	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	889b      	ldrh	r3, [r3, #4]
 800130a:	b21a      	sxth	r2, r3
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	3301      	adds	r3, #1
 8001310:	6839      	ldr	r1, [r7, #0]
 8001312:	440b      	add	r3, r1
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	b21b      	sxth	r3, r3
 800131a:	4313      	orrs	r3, r2
 800131c:	b21b      	sxth	r3, r3
 800131e:	b29a      	uxth	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	3302      	adds	r3, #2
 8001328:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	441a      	add	r2, r3
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4611      	mov	r1, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f001 fc54 	bl	8002be4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	3304      	adds	r3, #4
 8001340:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	4413      	add	r3, r2
 800134c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800134e:	429a      	cmp	r2, r3
 8001350:	d20c      	bcs.n	800136c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	441a      	add	r2, r3
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	3b01      	subs	r3, #1
 800135c:	6839      	ldr	r1, [r7, #0]
 800135e:	440b      	add	r3, r1
 8001360:	7812      	ldrb	r2, [r2, #0]
 8001362:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	3301      	adds	r3, #1
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
 800136a:	e7ec      	b.n	8001346 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	4413      	add	r3, r2
 8001372:	3b01      	subs	r3, #1
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	4413      	add	r3, r2
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	3b01      	subs	r3, #1
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	441a      	add	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	4413      	add	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	441a      	add	r2, r3
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f001 fc21 	bl	8002be4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	3304      	adds	r3, #4
 80013a6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	623b      	str	r3, [r7, #32]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4413      	add	r3, r2
 80013b2:	6a3a      	ldr	r2, [r7, #32]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d20c      	bcs.n	80013d2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	441a      	add	r2, r3
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	3b01      	subs	r3, #1
 80013c2:	6839      	ldr	r1, [r7, #0]
 80013c4:	440b      	add	r3, r1
 80013c6:	7812      	ldrb	r2, [r2, #0]
 80013c8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80013ca:	6a3b      	ldr	r3, [r7, #32]
 80013cc:	3301      	adds	r3, #1
 80013ce:	623b      	str	r3, [r7, #32]
 80013d0:	e7ec      	b.n	80013ac <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4413      	add	r3, r2
 80013d8:	3b01      	subs	r3, #1
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	4413      	add	r3, r2
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	441a      	add	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4413      	add	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	441a      	add	r2, r3
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	4611      	mov	r1, r2
 8001402:	4618      	mov	r0, r3
 8001404:	f001 fbee 	bl	8002be4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	3304      	adds	r3, #4
 800140c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	61fb      	str	r3, [r7, #28]
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4413      	add	r3, r2
 8001418:	69fa      	ldr	r2, [r7, #28]
 800141a:	429a      	cmp	r2, r3
 800141c:	d20c      	bcs.n	8001438 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	441a      	add	r2, r3
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	3b01      	subs	r3, #1
 8001428:	6839      	ldr	r1, [r7, #0]
 800142a:	440b      	add	r3, r1
 800142c:	7812      	ldrb	r2, [r2, #0]
 800142e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	3301      	adds	r3, #1
 8001434:	61fb      	str	r3, [r7, #28]
 8001436:	e7ec      	b.n	8001412 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4413      	add	r3, r2
 800143e:	3b01      	subs	r3, #1
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	4413      	add	r3, r2
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	3b01      	subs	r3, #1
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	441a      	add	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4413      	add	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	6839      	ldr	r1, [r7, #0]
 8001466:	440a      	add	r2, r1
 8001468:	7812      	ldrb	r2, [r2, #0]
 800146a:	4313      	orrs	r3, r2
 800146c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	3301      	adds	r3, #1
 8001474:	6839      	ldr	r1, [r7, #0]
 8001476:	440b      	add	r3, r1
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	4313      	orrs	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	3302      	adds	r3, #2
 8001486:	6839      	ldr	r1, [r7, #0]
 8001488:	440b      	add	r3, r1
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	041b      	lsls	r3, r3, #16
 800148e:	4313      	orrs	r3, r2
 8001490:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	3303      	adds	r3, #3
 8001498:	6839      	ldr	r1, [r7, #0]
 800149a:	440b      	add	r3, r1
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	061b      	lsls	r3, r3, #24
 80014a0:	4313      	orrs	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	3304      	adds	r3, #4
 80014ae:	61bb      	str	r3, [r7, #24]
     return offset;
 80014b0:	69bb      	ldr	r3, [r7, #24]
    }
 80014b2:	4618      	mov	r0, r3
 80014b4:	3728      	adds	r7, #40	; 0x28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	0800e2c8 	.word	0x0800e2c8

080014d8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	0800e2e4 	.word	0x0800e2e4

080014f4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fd34 	bl	8000f6c <_ZN3ros3MsgC1Ev>
 8001504:	4a06      	ldr	r2, [pc, #24]	; (8001520 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	711a      	strb	r2, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a04      	ldr	r2, [pc, #16]	; (8001524 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001514:	609a      	str	r2, [r3, #8]
    {
    }
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	0800e4e8 	.word	0x0800e4e8
 8001524:	0800e2c4 	.word	0x0800e2c4

08001528 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	4413      	add	r3, r2
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	7912      	ldrb	r2, [r2, #4]
 8001540:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3301      	adds	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe fedd 	bl	800030c <strlen>
 8001552:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	4413      	add	r3, r2
 800155a:	68b9      	ldr	r1, [r7, #8]
 800155c:	4618      	mov	r0, r3
 800155e:	f001 fb23 	bl	8002ba8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3304      	adds	r3, #4
 8001566:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	18d0      	adds	r0, r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	4619      	mov	r1, r3
 8001576:	f00c fce7 	bl	800df48 <memcpy>
      offset += length_msg;
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4413      	add	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
      return offset;
 8001582:	68fb      	ldr	r3, [r7, #12]
    }
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	3301      	adds	r3, #1
 80015aa:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	441a      	add	r2, r3
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f001 fb13 	bl	8002be4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	3304      	adds	r3, #4
 80015c2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4413      	add	r3, r2
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d20c      	bcs.n	80015ee <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	441a      	add	r2, r3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3b01      	subs	r3, #1
 80015de:	6839      	ldr	r1, [r7, #0]
 80015e0:	440b      	add	r3, r1
 80015e2:	7812      	ldrb	r2, [r2, #0]
 80015e4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3301      	adds	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	e7ec      	b.n	80015c8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4413      	add	r3, r2
 80015f4:	3b01      	subs	r3, #1
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	4413      	add	r3, r2
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	3b01      	subs	r3, #1
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	441a      	add	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
     return offset;
 8001612:	693b      	ldr	r3, [r7, #16]
    }
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	0800e308 	.word	0x0800e308

08001638 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	0800e31c 	.word	0x0800e31c

08001654 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fc84 	bl	8000f6c <_ZN3ros3MsgC1Ev>
 8001664:	4a0c      	ldr	r2, [pc, #48]	; (8001698 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	61da      	str	r2, [r3, #28]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	0800e4d0 	.word	0x0800e4d0

0800169c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6859      	ldr	r1, [r3, #4]
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	b2ca      	uxtb	r2, r1
 80016b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	0a19      	lsrs	r1, r3, #8
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	3301      	adds	r3, #1
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	4413      	add	r3, r2
 80016c6:	b2ca      	uxtb	r2, r1
 80016c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	0c19      	lsrs	r1, r3, #16
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	3302      	adds	r3, #2
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	b2ca      	uxtb	r2, r1
 80016da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	0e19      	lsrs	r1, r3, #24
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	3303      	adds	r3, #3
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	4413      	add	r3, r2
 80016ea:	b2ca      	uxtb	r2, r1
 80016ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	3304      	adds	r3, #4
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	6a3a      	ldr	r2, [r7, #32]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d22b      	bcs.n	800175a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	6a3b      	ldr	r3, [r7, #32]
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001710:	6939      	ldr	r1, [r7, #16]
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	4413      	add	r3, r2
 8001718:	b2ca      	uxtb	r2, r1
 800171a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	0a19      	lsrs	r1, r3, #8
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	3301      	adds	r3, #1
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	4413      	add	r3, r2
 8001728:	b2ca      	uxtb	r2, r1
 800172a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	0c19      	lsrs	r1, r3, #16
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	3302      	adds	r3, #2
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	4413      	add	r3, r2
 8001738:	b2ca      	uxtb	r2, r1
 800173a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	0e19      	lsrs	r1, r3, #24
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	3303      	adds	r3, #3
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	4413      	add	r3, r2
 8001748:	b2ca      	uxtb	r2, r1
 800174a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	3304      	adds	r3, #4
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	3301      	adds	r3, #1
 8001756:	623b      	str	r3, [r7, #32]
 8001758:	e7ce      	b.n	80016f8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6919      	ldr	r1, [r3, #16]
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	4413      	add	r3, r2
 8001764:	b2ca      	uxtb	r2, r1
 8001766:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	0a19      	lsrs	r1, r3, #8
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	3301      	adds	r3, #1
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	4413      	add	r3, r2
 8001776:	b2ca      	uxtb	r2, r1
 8001778:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	0c19      	lsrs	r1, r3, #16
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	3302      	adds	r3, #2
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	4413      	add	r3, r2
 8001788:	b2ca      	uxtb	r2, r1
 800178a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	0e19      	lsrs	r1, r3, #24
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	3303      	adds	r3, #3
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	4413      	add	r3, r2
 800179a:	b2ca      	uxtb	r2, r1
 800179c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	3304      	adds	r3, #4
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d22b      	bcs.n	800180a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699a      	ldr	r2, [r3, #24]
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80017c0:	68f9      	ldr	r1, [r7, #12]
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	b2ca      	uxtb	r2, r1
 80017ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	0a19      	lsrs	r1, r3, #8
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	3301      	adds	r3, #1
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	b2ca      	uxtb	r2, r1
 80017da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	0c19      	lsrs	r1, r3, #16
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	3302      	adds	r3, #2
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	b2ca      	uxtb	r2, r1
 80017ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	0e19      	lsrs	r1, r3, #24
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	3303      	adds	r3, #3
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	b2ca      	uxtb	r2, r1
 80017fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	3304      	adds	r3, #4
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3301      	adds	r3, #1
 8001806:	61fb      	str	r3, [r7, #28]
 8001808:	e7ce      	b.n	80017a8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69d9      	ldr	r1, [r3, #28]
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	4413      	add	r3, r2
 8001814:	b2ca      	uxtb	r2, r1
 8001816:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	0a19      	lsrs	r1, r3, #8
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	3301      	adds	r3, #1
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	4413      	add	r3, r2
 8001826:	b2ca      	uxtb	r2, r1
 8001828:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	0c19      	lsrs	r1, r3, #16
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	3302      	adds	r3, #2
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	4413      	add	r3, r2
 8001838:	b2ca      	uxtb	r2, r1
 800183a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	0e19      	lsrs	r1, r3, #24
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	3303      	adds	r3, #3
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	4413      	add	r3, r2
 800184a:	b2ca      	uxtb	r2, r1
 800184c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	3304      	adds	r3, #4
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001854:	2300      	movs	r3, #0
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	429a      	cmp	r2, r3
 8001860:	d228      	bcs.n	80018b4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fd4c 	bl	800030c <strlen>
 8001874:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	4413      	add	r3, r2
 800187c:	6979      	ldr	r1, [r7, #20]
 800187e:	4618      	mov	r0, r3
 8001880:	f001 f992 	bl	8002ba8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	3304      	adds	r3, #4
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	18d0      	adds	r0, r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	4619      	mov	r1, r3
 80018a0:	f00c fb52 	bl	800df48 <memcpy>
      offset += length_stringsi;
 80018a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	4413      	add	r3, r2
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	3301      	adds	r3, #1
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	e7d1      	b.n	8001858 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80018b6:	4618      	mov	r0, r3
 80018b8:	3728      	adds	r7, #40	; 0x28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80018be:	b580      	push	{r7, lr}
 80018c0:	b08e      	sub	sp, #56	; 0x38
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80018cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	4413      	add	r3, r2
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80018d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d8:	3301      	adds	r3, #1
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	4413      	add	r3, r2
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	6a3a      	ldr	r2, [r7, #32]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80018e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ea:	3302      	adds	r3, #2
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	041b      	lsls	r3, r3, #16
 80018f4:	6a3a      	ldr	r2, [r7, #32]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80018fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fc:	3303      	adds	r3, #3
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	4413      	add	r3, r2
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	061b      	lsls	r3, r3, #24
 8001906:	6a3a      	ldr	r2, [r7, #32]
 8001908:	4313      	orrs	r3, r2
 800190a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800190c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190e:	3304      	adds	r3, #4
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	6a3a      	ldr	r2, [r7, #32]
 8001918:	429a      	cmp	r2, r3
 800191a:	d90a      	bls.n	8001932 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4619      	mov	r1, r3
 8001926:	4610      	mov	r0, r2
 8001928:	f00c fb24 	bl	800df74 <realloc>
 800192c:	4602      	mov	r2, r0
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a3a      	ldr	r2, [r7, #32]
 8001936:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001938:	2300      	movs	r3, #0
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001942:	429a      	cmp	r2, r3
 8001944:	d236      	bcs.n	80019b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800194e:	6839      	ldr	r1, [r7, #0]
 8001950:	440a      	add	r2, r1
 8001952:	7812      	ldrb	r2, [r2, #0]
 8001954:	4313      	orrs	r3, r2
 8001956:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195c:	3301      	adds	r3, #1
 800195e:	6839      	ldr	r1, [r7, #0]
 8001960:	440b      	add	r3, r1
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	4313      	orrs	r3, r2
 8001968:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196e:	3302      	adds	r3, #2
 8001970:	6839      	ldr	r1, [r7, #0]
 8001972:	440b      	add	r3, r1
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	041b      	lsls	r3, r3, #16
 8001978:	4313      	orrs	r3, r2
 800197a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001980:	3303      	adds	r3, #3
 8001982:	6839      	ldr	r1, [r7, #0]
 8001984:	440b      	add	r3, r1
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	061b      	lsls	r3, r3, #24
 800198a:	4313      	orrs	r3, r2
 800198c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001996:	3304      	adds	r3, #4
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	3208      	adds	r2, #8
 80019a8:	6812      	ldr	r2, [r2, #0]
 80019aa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80019ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ae:	3301      	adds	r3, #1
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
 80019b2:	e7c3      	b.n	800193c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80019b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	4413      	add	r3, r2
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80019be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c0:	3301      	adds	r3, #1
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	4413      	add	r3, r2
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	69fa      	ldr	r2, [r7, #28]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80019d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d2:	3302      	adds	r3, #2
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	041b      	lsls	r3, r3, #16
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80019e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e4:	3303      	adds	r3, #3
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	4413      	add	r3, r2
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	061b      	lsls	r3, r3, #24
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80019f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f6:	3304      	adds	r3, #4
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	69fa      	ldr	r2, [r7, #28]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d90a      	bls.n	8001a1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699a      	ldr	r2, [r3, #24]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4610      	mov	r0, r2
 8001a10:	f00c fab0 	bl	800df74 <realloc>
 8001a14:	4602      	mov	r2, r0
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69fa      	ldr	r2, [r7, #28]
 8001a1e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001a20:	2300      	movs	r3, #0
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d236      	bcs.n	8001a9c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a36:	6839      	ldr	r1, [r7, #0]
 8001a38:	440a      	add	r2, r1
 8001a3a:	7812      	ldrb	r2, [r2, #0]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a44:	3301      	adds	r3, #1
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	440b      	add	r3, r1
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	021b      	lsls	r3, r3, #8
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a56:	3302      	adds	r3, #2
 8001a58:	6839      	ldr	r1, [r7, #0]
 8001a5a:	440b      	add	r3, r1
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	041b      	lsls	r3, r3, #16
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a68:	3303      	adds	r3, #3
 8001a6a:	6839      	ldr	r1, [r7, #0]
 8001a6c:	440b      	add	r3, r1
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	061b      	lsls	r3, r3, #24
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7e:	3304      	adds	r3, #4
 8001a80:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699a      	ldr	r2, [r3, #24]
 8001a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	3214      	adds	r2, #20
 8001a90:	6812      	ldr	r2, [r2, #0]
 8001a92:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a96:	3301      	adds	r3, #1
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a9a:	e7c3      	b.n	8001a24 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	4413      	add	r3, r2
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	021b      	lsls	r3, r3, #8
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aba:	3302      	adds	r3, #2
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	041b      	lsls	r3, r3, #16
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001acc:	3303      	adds	r3, #3
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	061b      	lsls	r3, r3, #24
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ade:	3304      	adds	r3, #4
 8001ae0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d90a      	bls.n	8001b02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f00c fa3c 	bl	800df74 <realloc>
 8001afc:	4602      	mov	r2, r0
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d23f      	bcs.n	8001b96 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	441a      	add	r2, r3
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	4611      	mov	r1, r2
 8001b22:	4618      	mov	r0, r3
 8001b24:	f001 f85e 	bl	8002be4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
 8001b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d20c      	bcs.n	8001b58 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	441a      	add	r2, r3
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	3b01      	subs	r3, #1
 8001b48:	6839      	ldr	r1, [r7, #0]
 8001b4a:	440b      	add	r3, r1
 8001b4c:	7812      	ldrb	r2, [r2, #0]
 8001b4e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	3301      	adds	r3, #1
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
 8001b56:	e7ec      	b.n	8001b32 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001b58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	4413      	add	r3, r2
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	441a      	add	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001b74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	3220      	adds	r2, #32
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b90:	3301      	adds	r3, #1
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b94:	e7ba      	b.n	8001b0c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3738      	adds	r7, #56	; 0x38
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	0800e424 	.word	0x0800e424

08001bbc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	0800e340 	.word	0x0800e340

08001bd8 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
  }
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a4b      	ldr	r2, [pc, #300]	; (8001d30 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d077      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a48      	ldr	r2, [pc, #288]	; (8001d34 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d06f      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a45      	ldr	r2, [pc, #276]	; (8001d38 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d067      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a42      	ldr	r2, [pc, #264]	; (8001d3c <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d05f      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a3f      	ldr	r2, [pc, #252]	; (8001d40 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d057      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a3c      	ldr	r2, [pc, #240]	; (8001d44 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d04f      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a39      	ldr	r2, [pc, #228]	; (8001d48 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d047      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a36      	ldr	r2, [pc, #216]	; (8001d4c <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d03f      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a33      	ldr	r2, [pc, #204]	; (8001d50 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d037      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a30      	ldr	r2, [pc, #192]	; (8001d54 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d02f      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a2d      	ldr	r2, [pc, #180]	; (8001d58 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d027      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a2a      	ldr	r2, [pc, #168]	; (8001d5c <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d01f      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a27      	ldr	r2, [pc, #156]	; (8001d60 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d017      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a24      	ldr	r2, [pc, #144]	; (8001d64 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d00f      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a21      	ldr	r2, [pc, #132]	; (8001d68 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d007      	beq.n	8001cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1e      	ldr	r2, [pc, #120]	; (8001d6c <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d10a      	bne.n	8001d0e <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d0c:	e009      	b.n	8001d22 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40020010 	.word	0x40020010
 8001d34:	40020028 	.word	0x40020028
 8001d38:	40020040 	.word	0x40020040
 8001d3c:	40020058 	.word	0x40020058
 8001d40:	40020070 	.word	0x40020070
 8001d44:	40020088 	.word	0x40020088
 8001d48:	400200a0 	.word	0x400200a0
 8001d4c:	400200b8 	.word	0x400200b8
 8001d50:	40020410 	.word	0x40020410
 8001d54:	40020428 	.word	0x40020428
 8001d58:	40020440 	.word	0x40020440
 8001d5c:	40020458 	.word	0x40020458
 8001d60:	40020470 	.word	0x40020470
 8001d64:	40020488 	.word	0x40020488
 8001d68:	400204a0 	.word	0x400204a0
 8001d6c:	400204b8 	.word	0x400204b8

08001d70 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <_ZN13STM32HardwareC1Ev+0x34>)
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	2400025c 	.word	0x2400025c

08001da8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f804 	bl	8001dbe <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f00a f830 	bl	800be38 <HAL_UART_Receive_DMA>
    }
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dec:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff fefb 	bl	8001bf0 <_ZN13STM32Hardware10getRdmaIndEv>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	429c      	cmp	r4, r3
 8001dfe:	bf14      	ite	ne
 8001e00:	2301      	movne	r3, #1
 8001e02:	2300      	moveq	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d012      	beq.n	8001e30 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e10:	1c59      	adds	r1, r3, #1
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	791b      	ldrb	r3, [r3, #4]
 8001e1e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001e30:	68fb      	ldr	r3, [r7, #12]
    }
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd90      	pop	{r4, r7, pc}
	...

08001e3c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	d108      	bne.n	8001e62 <_ZN13STM32Hardware5flushEv+0x26>
 8001e50:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <_ZN13STM32Hardware5flushEv+0xb4>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	f083 0301 	eor.w	r3, r3, #1
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <_ZN13STM32Hardware5flushEv+0x26>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <_ZN13STM32Hardware5flushEv+0x28>
 8001e62:	2300      	movs	r3, #0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d03f      	beq.n	8001ee8 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8001e68:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <_ZN13STM32Hardware5flushEv+0xb4>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d031      	beq.n	8001ee2 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d20a      	bcs.n	8001ea4 <_ZN13STM32Hardware5flushEv+0x68>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	e006      	b.n	8001eb2 <_ZN13STM32Hardware5flushEv+0x76>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001ebe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	89fa      	ldrh	r2, [r7, #14]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f009 ff35 	bl	800bd38 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001ed4:	89fb      	ldrh	r3, [r7, #14]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001ee2:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <_ZN13STM32Hardware5flushEv+0xb4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
      }
    }
 8001ee8:	bf00      	nop
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	240003f8 	.word	0x240003f8

08001ef4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
      int n = length;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f0a:	bfa8      	it	ge
 8001f0c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001f10:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f18:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	bf28      	it	cs
 8001f22:	4613      	movcs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f00c f805 	bl	800df48 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	4413      	add	r3, r2
 8001f48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d00b      	beq.n	8001f72 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	18d1      	adds	r1, r2, r3
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f00b ffeb 	bl	800df48 <memcpy>
      }

      flush();
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f7ff ff62 	bl	8001e3c <_ZN13STM32Hardware5flushEv>
    }
 8001f78:	bf00      	nop
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	f002 f86e 	bl	8004068 <HAL_GetTick>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe ffe2 	bl	8000f6c <_ZN3ros3MsgC1Ev>
 8001fa8:	4a0e      	ldr	r2, [pc, #56]	; (8001fe4 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	0800e48c 	.word	0x0800e48c

08001fe8 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001fe8:	b480      	push	{r7}
 8001fea:	b08b      	sub	sp, #44	; 0x2c
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ffc:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002000:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002006:	6838      	ldr	r0, [r7, #0]
 8002008:	4401      	add	r1, r0
 800200a:	b2d3      	uxtb	r3, r2
 800200c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800200e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	0a02      	lsrs	r2, r0, #8
 800201c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002020:	0a0b      	lsrs	r3, r1, #8
 8002022:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002024:	3101      	adds	r1, #1
 8002026:	6838      	ldr	r0, [r7, #0]
 8002028:	4401      	add	r1, r0
 800202a:	b2d3      	uxtb	r3, r2
 800202c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800202e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	0c02      	lsrs	r2, r0, #16
 800203c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002040:	0c0b      	lsrs	r3, r1, #16
 8002042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002044:	3102      	adds	r1, #2
 8002046:	6838      	ldr	r0, [r7, #0]
 8002048:	4401      	add	r1, r0
 800204a:	b2d3      	uxtb	r3, r2
 800204c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800204e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	0e02      	lsrs	r2, r0, #24
 800205c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002060:	0e0b      	lsrs	r3, r1, #24
 8002062:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002064:	3103      	adds	r1, #3
 8002066:	6838      	ldr	r0, [r7, #0]
 8002068:	4401      	add	r1, r0
 800206a:	b2d3      	uxtb	r3, r2
 800206c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800206e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	000a      	movs	r2, r1
 800207c:	2300      	movs	r3, #0
 800207e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002080:	3104      	adds	r1, #4
 8002082:	6838      	ldr	r0, [r7, #0]
 8002084:	4401      	add	r1, r0
 8002086:	b2d3      	uxtb	r3, r2
 8002088:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800208a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	0a0a      	lsrs	r2, r1, #8
 8002098:	2300      	movs	r3, #0
 800209a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800209c:	3105      	adds	r1, #5
 800209e:	6838      	ldr	r0, [r7, #0]
 80020a0:	4401      	add	r1, r0
 80020a2:	b2d3      	uxtb	r3, r2
 80020a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80020a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	0c0a      	lsrs	r2, r1, #16
 80020b4:	2300      	movs	r3, #0
 80020b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b8:	3106      	adds	r1, #6
 80020ba:	6838      	ldr	r0, [r7, #0]
 80020bc:	4401      	add	r1, r0
 80020be:	b2d3      	uxtb	r3, r2
 80020c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80020c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	0e0a      	lsrs	r2, r1, #24
 80020d0:	2300      	movs	r3, #0
 80020d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020d4:	3107      	adds	r1, #7
 80020d6:	6838      	ldr	r0, [r7, #0]
 80020d8:	4401      	add	r1, r0
 80020da:	b2d3      	uxtb	r3, r2
 80020dc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	3308      	adds	r3, #8
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80020ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80020ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80020f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020f4:	6838      	ldr	r0, [r7, #0]
 80020f6:	4401      	add	r1, r0
 80020f8:	b2d3      	uxtb	r3, r2
 80020fa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80020fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	0a02      	lsrs	r2, r0, #8
 800210a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800210e:	0a0b      	lsrs	r3, r1, #8
 8002110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002112:	3101      	adds	r1, #1
 8002114:	6838      	ldr	r0, [r7, #0]
 8002116:	4401      	add	r1, r0
 8002118:	b2d3      	uxtb	r3, r2
 800211a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800211c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	0c02      	lsrs	r2, r0, #16
 800212a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800212e:	0c0b      	lsrs	r3, r1, #16
 8002130:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002132:	3102      	adds	r1, #2
 8002134:	6838      	ldr	r0, [r7, #0]
 8002136:	4401      	add	r1, r0
 8002138:	b2d3      	uxtb	r3, r2
 800213a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800213c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	0e02      	lsrs	r2, r0, #24
 800214a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800214e:	0e0b      	lsrs	r3, r1, #24
 8002150:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002152:	3103      	adds	r1, #3
 8002154:	6838      	ldr	r0, [r7, #0]
 8002156:	4401      	add	r1, r0
 8002158:	b2d3      	uxtb	r3, r2
 800215a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800215c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	000a      	movs	r2, r1
 800216a:	2300      	movs	r3, #0
 800216c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800216e:	3104      	adds	r1, #4
 8002170:	6838      	ldr	r0, [r7, #0]
 8002172:	4401      	add	r1, r0
 8002174:	b2d3      	uxtb	r3, r2
 8002176:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002178:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	0a0a      	lsrs	r2, r1, #8
 8002186:	2300      	movs	r3, #0
 8002188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800218a:	3105      	adds	r1, #5
 800218c:	6838      	ldr	r0, [r7, #0]
 800218e:	4401      	add	r1, r0
 8002190:	b2d3      	uxtb	r3, r2
 8002192:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002194:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	0c0a      	lsrs	r2, r1, #16
 80021a2:	2300      	movs	r3, #0
 80021a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021a6:	3106      	adds	r1, #6
 80021a8:	6838      	ldr	r0, [r7, #0]
 80021aa:	4401      	add	r1, r0
 80021ac:	b2d3      	uxtb	r3, r2
 80021ae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80021b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	0e0a      	lsrs	r2, r1, #24
 80021be:	2300      	movs	r3, #0
 80021c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021c2:	3107      	adds	r1, #7
 80021c4:	6838      	ldr	r0, [r7, #0]
 80021c6:	4401      	add	r1, r0
 80021c8:	b2d3      	uxtb	r3, r2
 80021ca:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	3308      	adds	r3, #8
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80021dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021e2:	6838      	ldr	r0, [r7, #0]
 80021e4:	4401      	add	r1, r0
 80021e6:	b2d3      	uxtb	r3, r2
 80021e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80021ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	0a02      	lsrs	r2, r0, #8
 80021f8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80021fc:	0a0b      	lsrs	r3, r1, #8
 80021fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002200:	3101      	adds	r1, #1
 8002202:	6838      	ldr	r0, [r7, #0]
 8002204:	4401      	add	r1, r0
 8002206:	b2d3      	uxtb	r3, r2
 8002208:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800220a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	0c02      	lsrs	r2, r0, #16
 8002218:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800221c:	0c0b      	lsrs	r3, r1, #16
 800221e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002220:	3102      	adds	r1, #2
 8002222:	6838      	ldr	r0, [r7, #0]
 8002224:	4401      	add	r1, r0
 8002226:	b2d3      	uxtb	r3, r2
 8002228:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800222a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	0e02      	lsrs	r2, r0, #24
 8002238:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800223c:	0e0b      	lsrs	r3, r1, #24
 800223e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002240:	3103      	adds	r1, #3
 8002242:	6838      	ldr	r0, [r7, #0]
 8002244:	4401      	add	r1, r0
 8002246:	b2d3      	uxtb	r3, r2
 8002248:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800224a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	000a      	movs	r2, r1
 8002258:	2300      	movs	r3, #0
 800225a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800225c:	3104      	adds	r1, #4
 800225e:	6838      	ldr	r0, [r7, #0]
 8002260:	4401      	add	r1, r0
 8002262:	b2d3      	uxtb	r3, r2
 8002264:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002266:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	0a0a      	lsrs	r2, r1, #8
 8002274:	2300      	movs	r3, #0
 8002276:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002278:	3105      	adds	r1, #5
 800227a:	6838      	ldr	r0, [r7, #0]
 800227c:	4401      	add	r1, r0
 800227e:	b2d3      	uxtb	r3, r2
 8002280:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002282:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	0c0a      	lsrs	r2, r1, #16
 8002290:	2300      	movs	r3, #0
 8002292:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002294:	3106      	adds	r1, #6
 8002296:	6838      	ldr	r0, [r7, #0]
 8002298:	4401      	add	r1, r0
 800229a:	b2d3      	uxtb	r3, r2
 800229c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800229e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	0e0a      	lsrs	r2, r1, #24
 80022ac:	2300      	movs	r3, #0
 80022ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022b0:	3107      	adds	r1, #7
 80022b2:	6838      	ldr	r0, [r7, #0]
 80022b4:	4401      	add	r1, r0
 80022b6:	b2d3      	uxtb	r3, r2
 80022b8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	3308      	adds	r3, #8
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80022c2:	4618      	mov	r0, r3
 80022c4:	372c      	adds	r7, #44	; 0x2c
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80022ce:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80022d2:	b0eb      	sub	sp, #428	; 0x1ac
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80022da:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022f0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80022f4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80022f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80022fc:	4413      	add	r3, r2
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2200      	movs	r2, #0
 8002304:	461c      	mov	r4, r3
 8002306:	4615      	mov	r5, r2
 8002308:	ea40 0804 	orr.w	r8, r0, r4
 800230c:	ea41 0905 	orr.w	r9, r1, r5
 8002310:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002314:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002318:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002322:	4413      	add	r3, r2
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2200      	movs	r2, #0
 800232a:	469a      	mov	sl, r3
 800232c:	4693      	mov	fp, r2
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800233a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800233e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002342:	ea40 0402 	orr.w	r4, r0, r2
 8002346:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800234a:	430b      	orrs	r3, r1
 800234c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002350:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002354:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002358:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800235c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002360:	1c9a      	adds	r2, r3, #2
 8002362:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002366:	4413      	add	r3, r2
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2200      	movs	r2, #0
 800236e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002372:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002382:	464c      	mov	r4, r9
 8002384:	0423      	lsls	r3, r4, #16
 8002386:	4644      	mov	r4, r8
 8002388:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800238c:	4644      	mov	r4, r8
 800238e:	0422      	lsls	r2, r4, #16
 8002390:	ea40 0402 	orr.w	r4, r0, r2
 8002394:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002398:	430b      	orrs	r3, r1
 800239a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800239e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80023a2:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80023a6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80023aa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80023ae:	1cda      	adds	r2, r3, #3
 80023b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023b4:	4413      	add	r3, r2
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2200      	movs	r2, #0
 80023bc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80023c0:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80023c4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80023c8:	4623      	mov	r3, r4
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80023d0:	4623      	mov	r3, r4
 80023d2:	061b      	lsls	r3, r3, #24
 80023d4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80023d8:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80023dc:	4623      	mov	r3, r4
 80023de:	4303      	orrs	r3, r0
 80023e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80023e4:	462b      	mov	r3, r5
 80023e6:	430b      	orrs	r3, r1
 80023e8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80023ec:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80023f0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80023f4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80023f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80023fc:	1d1a      	adds	r2, r3, #4
 80023fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002402:	4413      	add	r3, r2
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2200      	movs	r2, #0
 800240a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800240e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800241e:	0023      	movs	r3, r4
 8002420:	2200      	movs	r2, #0
 8002422:	ea40 0402 	orr.w	r4, r0, r2
 8002426:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800242a:	430b      	orrs	r3, r1
 800242c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002430:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002434:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002438:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800243c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002440:	1d5a      	adds	r2, r3, #5
 8002442:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002446:	4413      	add	r3, r2
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2200      	movs	r2, #0
 800244e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002452:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002462:	0223      	lsls	r3, r4, #8
 8002464:	2200      	movs	r2, #0
 8002466:	ea40 0402 	orr.w	r4, r0, r2
 800246a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800246e:	430b      	orrs	r3, r1
 8002470:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002474:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002478:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800247c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002480:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002484:	1d9a      	adds	r2, r3, #6
 8002486:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800248a:	4413      	add	r3, r2
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2200      	movs	r2, #0
 8002492:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002496:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80024a6:	0423      	lsls	r3, r4, #16
 80024a8:	2200      	movs	r2, #0
 80024aa:	ea40 0402 	orr.w	r4, r0, r2
 80024ae:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80024b2:	430b      	orrs	r3, r1
 80024b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80024b8:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80024bc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80024c0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80024c4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80024c8:	1dda      	adds	r2, r3, #7
 80024ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80024ce:	4413      	add	r3, r2
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2200      	movs	r2, #0
 80024d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80024da:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80024ea:	0623      	lsls	r3, r4, #24
 80024ec:	2200      	movs	r2, #0
 80024ee:	ea40 0402 	orr.w	r4, r0, r2
 80024f2:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80024f6:	430b      	orrs	r3, r1
 80024f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80024fc:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002500:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002504:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002508:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800250c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002510:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002514:	3308      	adds	r3, #8
 8002516:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002526:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800252a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800252e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002532:	4413      	add	r3, r2
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2200      	movs	r2, #0
 800253a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800253e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002542:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002546:	4623      	mov	r3, r4
 8002548:	4303      	orrs	r3, r0
 800254a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800254e:	462b      	mov	r3, r5
 8002550:	430b      	orrs	r3, r1
 8002552:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002556:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800255a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800255e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002562:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800256c:	4413      	add	r3, r2
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2200      	movs	r2, #0
 8002574:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002578:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002588:	464c      	mov	r4, r9
 800258a:	0223      	lsls	r3, r4, #8
 800258c:	4644      	mov	r4, r8
 800258e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002592:	4644      	mov	r4, r8
 8002594:	0222      	lsls	r2, r4, #8
 8002596:	ea40 0402 	orr.w	r4, r0, r2
 800259a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800259e:	430b      	orrs	r3, r1
 80025a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80025a4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80025a8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025ac:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80025b0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025b4:	1c9a      	adds	r2, r3, #2
 80025b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025ba:	4413      	add	r3, r2
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2200      	movs	r2, #0
 80025c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80025c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80025d6:	464c      	mov	r4, r9
 80025d8:	0423      	lsls	r3, r4, #16
 80025da:	4644      	mov	r4, r8
 80025dc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80025e0:	4644      	mov	r4, r8
 80025e2:	0422      	lsls	r2, r4, #16
 80025e4:	ea40 0402 	orr.w	r4, r0, r2
 80025e8:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80025ec:	430b      	orrs	r3, r1
 80025ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80025f2:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80025f6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025fa:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80025fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002602:	1cda      	adds	r2, r3, #3
 8002604:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002608:	4413      	add	r3, r2
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2200      	movs	r2, #0
 8002610:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002614:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002618:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800261c:	4623      	mov	r3, r4
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002624:	4623      	mov	r3, r4
 8002626:	061b      	lsls	r3, r3, #24
 8002628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800262c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002630:	4623      	mov	r3, r4
 8002632:	4303      	orrs	r3, r0
 8002634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002638:	462b      	mov	r3, r5
 800263a:	430b      	orrs	r3, r1
 800263c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002640:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002644:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002648:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800264c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002650:	1d1a      	adds	r2, r3, #4
 8002652:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002656:	4413      	add	r3, r2
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2200      	movs	r2, #0
 800265e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002662:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002672:	0023      	movs	r3, r4
 8002674:	2200      	movs	r2, #0
 8002676:	ea40 0402 	orr.w	r4, r0, r2
 800267a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800267e:	430b      	orrs	r3, r1
 8002680:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002684:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002688:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800268c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002690:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002694:	1d5a      	adds	r2, r3, #5
 8002696:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800269a:	4413      	add	r3, r2
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2200      	movs	r2, #0
 80026a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026a6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80026b6:	0223      	lsls	r3, r4, #8
 80026b8:	2200      	movs	r2, #0
 80026ba:	ea40 0402 	orr.w	r4, r0, r2
 80026be:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80026c2:	430b      	orrs	r3, r1
 80026c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80026c8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80026cc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80026d0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80026d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026d8:	1d9a      	adds	r2, r3, #6
 80026da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026de:	4413      	add	r3, r2
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2200      	movs	r2, #0
 80026e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80026fa:	0423      	lsls	r3, r4, #16
 80026fc:	2200      	movs	r2, #0
 80026fe:	ea40 0402 	orr.w	r4, r0, r2
 8002702:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002706:	430b      	orrs	r3, r1
 8002708:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800270c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002710:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002714:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002718:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800271c:	1dda      	adds	r2, r3, #7
 800271e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002722:	4413      	add	r3, r2
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2200      	movs	r2, #0
 800272a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800272e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800273e:	0623      	lsls	r3, r4, #24
 8002740:	2200      	movs	r2, #0
 8002742:	ea40 0402 	orr.w	r4, r0, r2
 8002746:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800274a:	430b      	orrs	r3, r1
 800274c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002750:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002754:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002758:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800275c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002760:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002764:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002768:	3308      	adds	r3, #8
 800276a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800277a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800277e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002782:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002786:	4413      	add	r3, r2
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2200      	movs	r2, #0
 800278e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002792:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002796:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800279a:	4623      	mov	r3, r4
 800279c:	4303      	orrs	r3, r0
 800279e:	67bb      	str	r3, [r7, #120]	; 0x78
 80027a0:	462b      	mov	r3, r5
 80027a2:	430b      	orrs	r3, r1
 80027a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027a6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80027aa:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027ae:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80027b2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027bc:	4413      	add	r3, r2
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2200      	movs	r2, #0
 80027c4:	673b      	str	r3, [r7, #112]	; 0x70
 80027c6:	677a      	str	r2, [r7, #116]	; 0x74
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80027d4:	464c      	mov	r4, r9
 80027d6:	0223      	lsls	r3, r4, #8
 80027d8:	4644      	mov	r4, r8
 80027da:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80027de:	4644      	mov	r4, r8
 80027e0:	0222      	lsls	r2, r4, #8
 80027e2:	ea40 0402 	orr.w	r4, r0, r2
 80027e6:	66bc      	str	r4, [r7, #104]	; 0x68
 80027e8:	430b      	orrs	r3, r1
 80027ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027ec:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80027f0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027f4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80027f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027fc:	1c9a      	adds	r2, r3, #2
 80027fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002802:	4413      	add	r3, r2
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2200      	movs	r2, #0
 800280a:	663b      	str	r3, [r7, #96]	; 0x60
 800280c:	667a      	str	r2, [r7, #100]	; 0x64
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800281a:	464c      	mov	r4, r9
 800281c:	0423      	lsls	r3, r4, #16
 800281e:	4644      	mov	r4, r8
 8002820:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002824:	4644      	mov	r4, r8
 8002826:	0422      	lsls	r2, r4, #16
 8002828:	ea40 0402 	orr.w	r4, r0, r2
 800282c:	65bc      	str	r4, [r7, #88]	; 0x58
 800282e:	430b      	orrs	r3, r1
 8002830:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002832:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002836:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800283a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800283e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002842:	1cda      	adds	r2, r3, #3
 8002844:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002848:	4413      	add	r3, r2
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2200      	movs	r2, #0
 8002850:	653b      	str	r3, [r7, #80]	; 0x50
 8002852:	657a      	str	r2, [r7, #84]	; 0x54
 8002854:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002858:	4623      	mov	r3, r4
 800285a:	0a1b      	lsrs	r3, r3, #8
 800285c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800285e:	4623      	mov	r3, r4
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	64bb      	str	r3, [r7, #72]	; 0x48
 8002864:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002868:	4623      	mov	r3, r4
 800286a:	4303      	orrs	r3, r0
 800286c:	643b      	str	r3, [r7, #64]	; 0x40
 800286e:	462b      	mov	r3, r5
 8002870:	430b      	orrs	r3, r1
 8002872:	647b      	str	r3, [r7, #68]	; 0x44
 8002874:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002878:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800287c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002880:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002884:	1d1a      	adds	r2, r3, #4
 8002886:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800288a:	4413      	add	r3, r2
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2200      	movs	r2, #0
 8002892:	63bb      	str	r3, [r7, #56]	; 0x38
 8002894:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80028a0:	0023      	movs	r3, r4
 80028a2:	2200      	movs	r2, #0
 80028a4:	ea40 0402 	orr.w	r4, r0, r2
 80028a8:	633c      	str	r4, [r7, #48]	; 0x30
 80028aa:	430b      	orrs	r3, r1
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
 80028ae:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80028b2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80028b6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80028ba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028be:	1d5a      	adds	r2, r3, #5
 80028c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028c4:	4413      	add	r3, r2
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2200      	movs	r2, #0
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80028da:	0223      	lsls	r3, r4, #8
 80028dc:	2200      	movs	r2, #0
 80028de:	ea40 0402 	orr.w	r4, r0, r2
 80028e2:	623c      	str	r4, [r7, #32]
 80028e4:	430b      	orrs	r3, r1
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
 80028e8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80028ec:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80028f0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80028f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028f8:	3306      	adds	r3, #6
 80028fa:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80028fe:	4413      	add	r3, r2
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2200      	movs	r2, #0
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	61fa      	str	r2, [r7, #28]
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	69bc      	ldr	r4, [r7, #24]
 8002914:	0423      	lsls	r3, r4, #16
 8002916:	2200      	movs	r2, #0
 8002918:	ea40 0402 	orr.w	r4, r0, r2
 800291c:	613c      	str	r4, [r7, #16]
 800291e:	430b      	orrs	r3, r1
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002926:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800292a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800292e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002932:	3307      	adds	r3, #7
 8002934:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002938:	4413      	add	r3, r2
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2200      	movs	r2, #0
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	60fa      	str	r2, [r7, #12]
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	68bc      	ldr	r4, [r7, #8]
 800294e:	0623      	lsls	r3, r4, #24
 8002950:	2200      	movs	r2, #0
 8002952:	ea40 0402 	orr.w	r4, r0, r2
 8002956:	603c      	str	r4, [r7, #0]
 8002958:	430b      	orrs	r3, r1
 800295a:	607b      	str	r3, [r7, #4]
 800295c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002960:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002964:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002968:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 800296c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002970:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002974:	3308      	adds	r3, #8
 8002976:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 800297a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 800297e:	4618      	mov	r0, r3
 8002980:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002984:	46bd      	mov	sp, r7
 8002986:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800298a:	4770      	bx	lr

0800298c <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002996:	4618      	mov	r0, r3
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	0800e364 	.word	0x0800e364

080029a8 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	0800e37c 	.word	0x0800e37c

080029c4 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe facc 	bl	8000f6c <_ZN3ros3MsgC1Ev>
 80029d4:	4a08      	ldr	r2, [pc, #32]	; (80029f8 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3308      	adds	r3, #8
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fada 	bl	8001f98 <_ZN13geometry_msgs7Vector3C1Ev>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3328      	adds	r3, #40	; 0x28
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff fad5 	bl	8001f98 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	0800e474 	.word	0x0800e474

080029fc <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f103 0008 	add.w	r0, r3, #8
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	4413      	add	r3, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	f7ff fae6 	bl	8001fe8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4413      	add	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	4413      	add	r3, r2
 8002a30:	4619      	mov	r1, r3
 8002a32:	f7ff fad9 	bl	8001fe8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002a36:	4602      	mov	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
      return offset;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
    }
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f103 0008 	add.w	r0, r3, #8
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	4413      	add	r3, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	f7ff fc33 	bl	80022ce <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f7ff fc26 	bl	80022ce <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002a82:	4602      	mov	r2, r0
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
     return offset;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
    }
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	0800e3a0 	.word	0x0800e3a0

08002ab0 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	0800e3b4 	.word	0x0800e3b4

08002acc <_Z12vel_callbackRKN13geometry_msgs5TwistE>:
#include "mainpp.h"
#include "ros.h"
#include "geometry_msgs/Twist.h"

void vel_callback(const geometry_msgs::Twist &msg)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002ada:	490a      	ldr	r1, [pc, #40]	; (8002b04 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 8002adc:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002ae6:	4908      	ldr	r1, [pc, #32]	; (8002b08 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x3c>)
 8002ae8:	e9c1 2300 	strd	r2, r3, [r1]
	W=msg.angular.z;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002af2:	4906      	ldr	r1, [pc, #24]	; (8002b0c <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x40>)
 8002af4:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	24000d98 	.word	0x24000d98
 8002b08:	24000da0 	.word	0x24000da0
 8002b0c:	24000da8 	.word	0x24000da8

08002b10 <HAL_UART_TxCpltCallback>:
ros::NodeHandle nh;
ros::Subscriber<geometry_msgs::Twist> sub("cmdvel_toSTM", vel_callback);
double Vx, Vy, W;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8002b18:	4805      	ldr	r0, [pc, #20]	; (8002b30 <HAL_UART_TxCpltCallback+0x20>)
 8002b1a:	f000 f94d 	bl	8002db8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff f98b 	bl	8001e3c <_ZN13STM32Hardware5flushEv>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	240003fc 	.word	0x240003fc

08002b34 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8002b3c:	4805      	ldr	r0, [pc, #20]	; (8002b54 <HAL_UART_RxCpltCallback+0x20>)
 8002b3e:	f000 f93b 	bl	8002db8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002b42:	4603      	mov	r3, r0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff f93a 	bl	8001dbe <_ZN13STM32Hardware10reset_rbufEv>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	240003fc 	.word	0x240003fc

08002b58 <setup>:
void setup(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
    nh.initNode();
 8002b5c:	4804      	ldr	r0, [pc, #16]	; (8002b70 <setup+0x18>)
 8002b5e:	f000 f937 	bl	8002dd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 8002b62:	4904      	ldr	r1, [pc, #16]	; (8002b74 <setup+0x1c>)
 8002b64:	4802      	ldr	r0, [pc, #8]	; (8002b70 <setup+0x18>)
 8002b66:	f000 f950 	bl	8002e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	240003fc 	.word	0x240003fc
 8002b74:	24000d38 	.word	0x24000d38

08002b78 <loop>:
void loop(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <loop+0x10>)
 8002b7e:	f000 f96f 	bl	8002e60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	240003fc 	.word	0x240003fc

08002b8c <errcallback>:
void errcallback(void) {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
	nh.getHardware()->init();
 8002b90:	4804      	ldr	r0, [pc, #16]	; (8002ba4 <errcallback+0x18>)
 8002b92:	f000 f911 	bl	8002db8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff f905 	bl	8001da8 <_ZN13STM32Hardware4initEv>
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	240003fc 	.word	0x240003fc

08002ba8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d80d      	bhi.n	8002bd8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	fa22 f103 	lsr.w	r1, r2, r3
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4413      	add	r3, r2
 8002bcc:	b2ca      	uxtb	r2, r1
 8002bce:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	e7ee      	b.n	8002bb6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d811      	bhi.n	8002c22 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6839      	ldr	r1, [r7, #0]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	440a      	add	r2, r1
 8002c08:	7812      	ldrb	r2, [r2, #0]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	00d2      	lsls	r2, r2, #3
 8002c10:	fa01 f202 	lsl.w	r2, r1, r2
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e7ea      	b.n	8002bf8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002c22:	bf00      	nop
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
	...

08002c30 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	4a04      	ldr	r2, [pc, #16]	; (8002c4c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	0800e4bc 	.word	0x0800e4bc

08002c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff ffe8 	bl	8002c30 <_ZN3ros15NodeHandleBase_C1Ev>
 8002c60:	4a3a      	ldr	r2, [pc, #232]	; (8002d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff f880 	bl	8001d70 <_ZN13STM32HardwareC1Ev>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe fce8 	bl	8001654 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2b18      	cmp	r3, #24
 8002c8c:	d80b      	bhi.n	8002ca6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	e7f0      	b.n	8002c88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b18      	cmp	r3, #24
 8002cae:	d80a      	bhi.n	8002cc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002cb8:	2100      	movs	r1, #0
 8002cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	e7f1      	b.n	8002caa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd0:	d20a      	bcs.n	8002ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	e7f0      	b.n	8002cca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cf2:	d20a      	bcs.n	8002d0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	3301      	adds	r3, #1
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	e7f0      	b.n	8002cec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	0800e460 	.word	0x0800e460

08002d50 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	0800e4a4 	.word	0x0800e4a4

08002d70 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ffe5 	bl	8002d50 <_ZN3ros11Subscriber_C1Ev>
 8002d86:	4a0b      	ldr	r2, [pc, #44]	; (8002db4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	3310      	adds	r3, #16
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fe17 	bl	80029c4 <_ZN13geometry_msgs5TwistC1Ev>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	659a      	str	r2, [r3, #88]	; 0x58
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	609a      	str	r2, [r3, #8]
  };
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	0800e448 	.word	0x0800e448

08002db8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3304      	adds	r3, #4
  }
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3304      	adds	r3, #4
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fe ffe3 	bl	8001da8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8002e0a:	b480      	push	{r7}
 8002e0c:	b085      	sub	sp, #20
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b18      	cmp	r3, #24
 8002e1c:	dc19      	bgt.n	8002e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10d      	bne.n	8002e4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8002e2e:	6839      	ldr	r1, [r7, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	605a      	str	r2, [r3, #4]
        return true;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e004      	b.n	8002e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	e7e2      	b.n	8002e18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8002e52:	2300      	movs	r3, #0
  }
 8002e54:	4618      	mov	r0, r3
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff f887 	bl	8001f80 <_ZN13STM32Hardware4timeEv>
 8002e72:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d903      	bls.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d009      	beq.n	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d903      	bls.n	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d014      	beq.n	8002ee0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff f860 	bl	8001f80 <_ZN13STM32Hardware4timeEv>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad2      	subs	r2, r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	bf8c      	ite	hi
 8002ed0:	2301      	movhi	r3, #1
 8002ed2:	2300      	movls	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8002eda:	f06f 0301 	mvn.w	r3, #1
 8002ede:	e194      	b.n	800320a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe ff7b 	bl	8001de0 <_ZN13STM32Hardware4readEv>
 8002eea:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f2c0 8174 	blt.w	80031dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	441a      	add	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f0a:	2b07      	cmp	r3, #7
 8002f0c:	d11e      	bne.n	8002f4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8002f14:	1c59      	adds	r1, r3, #1
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	b2d1      	uxtb	r1, r2
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	4413      	add	r3, r2
 8002f24:	460a      	mov	r2, r1
 8002f26:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002f30:	1e5a      	subs	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1b4      	bne.n	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2208      	movs	r2, #8
 8002f46:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002f4a:	e7af      	b.n	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d128      	bne.n	8002fa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2bff      	cmp	r3, #255	; 0xff
 8002f5a:	d10d      	bne.n	8002f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f103 0214 	add.w	r2, r3, #20
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002f76:	e799      	b.n	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fe ffff 	bl	8001f80 <_ZN13STM32Hardware4timeEv>
 8002f82:	4602      	mov	r2, r0
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	bf8c      	ite	hi
 8002f90:	2301      	movhi	r3, #1
 8002f92:	2300      	movls	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d088      	beq.n	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8002fa2:	f06f 0301 	mvn.w	r3, #1
 8002fa6:	e130      	b.n	800320a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d118      	bne.n	8002fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2bfe      	cmp	r3, #254	; 0xfe
 8002fb6:	d107      	bne.n	8002fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002fc6:	e771      	b.n	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f47f af68 	bne.w	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f918 	bl	8003212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002fe2:	e763      	b.n	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d113      	bne.n	8003016 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003014:	e74a      	b.n	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800301c:	2b03      	cmp	r3, #3
 800301e:	d110      	bne.n	8003042 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	021b      	lsls	r3, r3, #8
 800302a:	441a      	add	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003040:	e734      	b.n	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003048:	2b04      	cmp	r3, #4
 800304a:	d116      	bne.n	800307a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003052:	425a      	negs	r2, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	bf58      	it	pl
 800305a:	4253      	negpl	r3, r2
 800305c:	2bff      	cmp	r3, #255	; 0xff
 800305e:	d107      	bne.n	8003070 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800306e:	e71d      	b.n	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003078:	e718      	b.n	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003080:	2b05      	cmp	r3, #5
 8003082:	d10f      	bne.n	80030a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80030a2:	e703      	b.n	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80030aa:	2b06      	cmp	r3, #6
 80030ac:	d117      	bne.n	80030de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	441a      	add	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2207      	movs	r2, #7
 80030c4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f47f aeec 	bne.w	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2208      	movs	r2, #8
 80030d8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80030dc:	e6e6      	b.n	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	f47f aee1 	bne.w	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80030f8:	425a      	negs	r2, r3
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	bf58      	it	pl
 8003100:	4253      	negpl	r3, r2
 8003102:	2bff      	cmp	r3, #255	; 0xff
 8003104:	f47f aed2 	bne.w	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800310e:	2b00      	cmp	r3, #0
 8003110:	d110      	bne.n	8003134 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f87d 	bl	8003212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f898 	bl	800324e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800312e:	f04f 33ff 	mov.w	r3, #4294967295
 8003132:	e06a      	b.n	800320a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800313a:	2b0a      	cmp	r3, #10
 800313c:	d107      	bne.n	800314e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003144:	4619      	mov	r1, r3
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f960 	bl	800340c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800314c:	e6ae      	b.n	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003154:	2b06      	cmp	r3, #6
 8003156:	d10e      	bne.n	8003176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003164:	4619      	mov	r1, r3
 8003166:	4610      	mov	r0, r2
 8003168:	f7fe fba9 	bl	80018be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003174:	e69a      	b.n	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800317c:	2b0b      	cmp	r3, #11
 800317e:	d104      	bne.n	800318a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003188:	e690      	b.n	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003190:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f202 2222 	addw	r2, r2, #546	; 0x222
 800319a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f43f ae84 	beq.w	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80031aa:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80031b4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80031be:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80031c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80031d6:	4611      	mov	r1, r2
 80031d8:	4798      	blx	r3
    while (true)
 80031da:	e667      	b.n	8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80031dc:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00f      	beq.n	8003208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d906      	bls.n	8003208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f809 	bl	8003212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8003208:	2300      	movs	r3, #0
  }
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003212:	b580      	push	{r7, lr}
 8003214:	b086      	sub	sp, #24
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800321a:	f107 030c 	add.w	r3, r7, #12
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd feb4 	bl	8000f8c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f107 020c 	add.w	r2, r7, #12
 800322e:	210a      	movs	r1, #10
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	4798      	blx	r3
    rt_time = hardware_.time();
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3304      	adds	r3, #4
 8003238:	4618      	mov	r0, r3
 800323a:	f7fe fea1 	bl	8001f80 <_ZN13STM32Hardware4timeEv>
 800323e:	4602      	mov	r2, r0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003246:	bf00      	nop
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800324e:	b590      	push	{r4, r7, lr}
 8003250:	b08b      	sub	sp, #44	; 0x2c
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003256:	f107 030c 	add.w	r3, r7, #12
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd ff86 	bl	800116c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003260:	2300      	movs	r3, #0
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	2b18      	cmp	r3, #24
 8003268:	dc63      	bgt.n	8003332 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d056      	beq.n	800332a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	b29b      	uxth	r3, r3
 800328e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	6859      	ldr	r1, [r3, #4]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3308      	adds	r3, #8
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4608      	mov	r0, r1
 80032ca:	4798      	blx	r3
 80032cc:	4603      	mov	r3, r0
 80032ce:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	6859      	ldr	r1, [r3, #4]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	330c      	adds	r3, #12
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4608      	mov	r0, r1
 80032f8:	4798      	blx	r3
 80032fa:	4603      	mov	r3, r0
 80032fc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80032fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003302:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681c      	ldr	r4, [r3, #0]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe fc5d 	bl	8001bd8 <_ZN3ros9Publisher15getEndpointTypeEv>
 800331e:	4601      	mov	r1, r0
 8003320:	f107 030c 	add.w	r3, r7, #12
 8003324:	461a      	mov	r2, r3
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	3301      	adds	r3, #1
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
 8003330:	e798      	b.n	8003264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003332:	2300      	movs	r3, #0
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	2b18      	cmp	r3, #24
 800333a:	dc5f      	bgt.n	80033fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003340:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d053      	beq.n	80033f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003350:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	b29b      	uxth	r3, r3
 800335c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003362:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003372:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003376:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3308      	adds	r3, #8
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4608      	mov	r0, r1
 800338e:	4798      	blx	r3
 8003390:	4603      	mov	r3, r0
 8003392:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003398:	f202 2222 	addw	r2, r2, #546	; 0x222
 800339c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80033a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	330c      	adds	r3, #12
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4608      	mov	r0, r1
 80033b4:	4798      	blx	r3
 80033b6:	4603      	mov	r3, r0
 80033b8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80033ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033be:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681c      	ldr	r4, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ca:	f202 2222 	addw	r2, r2, #546	; 0x222
 80033ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80033da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3304      	adds	r3, #4
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4608      	mov	r0, r1
 80033e6:	4798      	blx	r3
 80033e8:	4601      	mov	r1, r0
 80033ea:	f107 030c 	add.w	r3, r7, #12
 80033ee:	461a      	mov	r2, r3
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	3301      	adds	r3, #1
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
 80033fa:	e79c      	b.n	8003336 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003404:	bf00      	nop
 8003406:	372c      	adds	r7, #44	; 0x2c
 8003408:	46bd      	mov	sp, r7
 800340a:	bd90      	pop	{r4, r7, pc}

0800340c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003416:	f107 0308 	add.w	r3, r7, #8
 800341a:	4618      	mov	r0, r3
 800341c:	f7fd fdb6 	bl	8000f8c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3304      	adds	r3, #4
 8003424:	4618      	mov	r0, r3
 8003426:	f7fe fdab 	bl	8001f80 <_ZN13STM32Hardware4timeEv>
 800342a:	4602      	mov	r2, r0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003436:	f107 0308 	add.w	r3, r7, #8
 800343a:	6839      	ldr	r1, [r7, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd fe15 	bl	800106c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	4915      	ldr	r1, [pc, #84]	; (800349c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003448:	fba1 1303 	umull	r1, r3, r1, r3
 800344c:	099b      	lsrs	r3, r3, #6
 800344e:	4413      	add	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003452:	6939      	ldr	r1, [r7, #16]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4b11      	ldr	r3, [pc, #68]	; (800349c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003458:	fba3 0302 	umull	r0, r3, r3, r2
 800345c:	099b      	lsrs	r3, r3, #6
 800345e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003462:	fb00 f303 	mul.w	r3, r0, r3
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	4a0d      	ldr	r2, [pc, #52]	; (80034a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800346a:	fb02 f303 	mul.w	r3, r2, r3
 800346e:	440b      	add	r3, r1
 8003470:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003472:	f107 0308 	add.w	r3, r7, #8
 8003476:	3304      	adds	r3, #4
 8003478:	4619      	mov	r1, r3
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f8a6 	bl	80035cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3304      	adds	r3, #4
 8003484:	4618      	mov	r0, r3
 8003486:	f7fe fd7b 	bl	8001f80 <_ZN13STM32Hardware4timeEv>
 800348a:	4602      	mov	r2, r0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003492:	bf00      	nop
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	10624dd3 	.word	0x10624dd3
 80034a0:	000f4240 	.word	0x000f4240

080034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b63      	cmp	r3, #99	; 0x63
 80034b4:	dd09      	ble.n	80034ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80034bc:	f083 0301 	eor.w	r3, r3, #1
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e079      	b.n	80035be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80034d6:	3207      	adds	r2, #7
 80034d8:	4611      	mov	r1, r2
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4798      	blx	r3
 80034de:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	22ff      	movs	r2, #255	; 0xff
 80034e4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	22fe      	movs	r2, #254	; 0xfe
 80034ec:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	0a1b      	lsrs	r3, r3, #8
 8003500:	b29b      	uxth	r3, r3
 8003502:	b2da      	uxtb	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003516:	4413      	add	r3, r2
 8003518:	b2db      	uxtb	r3, r3
 800351a:	43db      	mvns	r3, r3
 800351c:	b2da      	uxtb	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	b2da      	uxtb	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	b21b      	sxth	r3, r3
 8003532:	121b      	asrs	r3, r3, #8
 8003534:	b21b      	sxth	r3, r3
 8003536:	b2da      	uxtb	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003542:	2305      	movs	r3, #5
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	3306      	adds	r3, #6
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	429a      	cmp	r2, r3
 800354e:	dc0d      	bgt.n	800356c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	4413      	add	r3, r2
 8003556:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	4413      	add	r3, r2
 8003562:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	3301      	adds	r3, #1
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	e7ec      	b.n	8003546 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	3307      	adds	r3, #7
 8003570:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	425a      	negs	r2, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	bf58      	it	pl
 800357c:	4253      	negpl	r3, r2
 800357e:	b2da      	uxtb	r2, r3
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	1c59      	adds	r1, r3, #1
 8003584:	6179      	str	r1, [r7, #20]
 8003586:	43d2      	mvns	r2, r2
 8003588:	b2d1      	uxtb	r1, r2
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4413      	add	r3, r2
 800358e:	460a      	mov	r2, r1
 8003590:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800359a:	dc0a      	bgt.n	80035b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	1d18      	adds	r0, r3, #4
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4619      	mov	r1, r3
 80035aa:	f7fe fca3 	bl	8001ef4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	e005      	b.n	80035be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80035b2:	4905      	ldr	r1, [pc, #20]	; (80035c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f849 	bl	800364c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80035ba:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80035be:	4618      	mov	r0, r3
 80035c0:	3720      	adds	r7, #32
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	0800e3d8 	.word	0x0800e3d8

080035cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3304      	adds	r3, #4
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fe fcd0 	bl	8001f80 <_ZN13STM32Hardware4timeEv>
 80035e0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4915      	ldr	r1, [pc, #84]	; (8003640 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80035ea:	fba1 1303 	umull	r1, r3, r1, r3
 80035ee:	099b      	lsrs	r3, r3, #6
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	1e5a      	subs	r2, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	6859      	ldr	r1, [r3, #4]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003602:	fba3 0302 	umull	r0, r3, r3, r2
 8003606:	099b      	lsrs	r3, r3, #6
 8003608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800360c:	fb00 f303 	mul.w	r3, r0, r3
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	4a0c      	ldr	r2, [pc, #48]	; (8003644 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8003614:	fb02 f303 	mul.w	r3, r2, r3
 8003618:	1aca      	subs	r2, r1, r3
 800361a:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 800361c:	4413      	add	r3, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f7fc fff4 	bl	8000620 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003638:	bf00      	nop
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	10624dd3 	.word	0x10624dd3
 8003644:	000f4240 	.word	0x000f4240
 8003648:	3b9aca00 	.word	0x3b9aca00

0800364c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	2103      	movs	r1, #3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f804 	bl	8003668 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	460b      	mov	r3, r1
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003676:	f107 0314 	add.w	r3, r7, #20
 800367a:	4618      	mov	r0, r3
 800367c:	f7fd ff3a 	bl	80014f4 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003680:	7afb      	ldrb	r3, [r7, #11]
 8003682:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f107 0214 	add.w	r2, r7, #20
 8003692:	2107      	movs	r1, #7
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	4798      	blx	r3
  }
 8003698:	bf00      	nop
 800369a:	3720      	adds	r7, #32
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <_Z41__static_initialization_and_destruction_0ii>:
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d10d      	bne.n	80036cc <_Z41__static_initialization_and_destruction_0ii+0x2c>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d108      	bne.n	80036cc <_Z41__static_initialization_and_destruction_0ii+0x2c>
ros::NodeHandle nh;
 80036ba:	4806      	ldr	r0, [pc, #24]	; (80036d4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80036bc:	f7ff fac8 	bl	8002c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub("cmdvel_toSTM", vel_callback);
 80036c0:	2301      	movs	r3, #1
 80036c2:	4a05      	ldr	r2, [pc, #20]	; (80036d8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80036c4:	4905      	ldr	r1, [pc, #20]	; (80036dc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80036c6:	4806      	ldr	r0, [pc, #24]	; (80036e0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80036c8:	f7ff fb52 	bl	8002d70 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 80036cc:	bf00      	nop
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	240003fc 	.word	0x240003fc
 80036d8:	08002acd 	.word	0x08002acd
 80036dc:	0800e414 	.word	0x0800e414
 80036e0:	24000d38 	.word	0x24000d38

080036e4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3310      	adds	r3, #16
 80036f2:	6839      	ldr	r1, [r7, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff f9a7 	bl	8002a48 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	3210      	adds	r2, #16
 8003702:	4610      	mov	r0, r2
 8003704:	4798      	blx	r3
  }
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3310      	adds	r3, #16
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff f9ae 	bl	8002a94 <_ZN13geometry_msgs5Twist7getTypeEv>
 8003738:	4603      	mov	r3, r0
  }
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3310      	adds	r3, #16
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff f9ae 	bl	8002ab0 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8003754:	4603      	mov	r3, r0
  }
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
    return configured_;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800376c:	4618      	mov	r0, r3
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <_GLOBAL__sub_I__Z12vel_callbackRKN13geometry_msgs5TwistE>:
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
 800377c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003780:	2001      	movs	r0, #1
 8003782:	f7ff ff8d 	bl	80036a0 <_Z41__static_initialization_and_destruction_0ii>
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800378e:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <HAL_MspInit+0x30>)
 8003790:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003794:	4a08      	ldr	r2, [pc, #32]	; (80037b8 <HAL_MspInit+0x30>)
 8003796:	f043 0302 	orr.w	r3, r3, #2
 800379a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800379e:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <HAL_MspInit+0x30>)
 80037a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	607b      	str	r3, [r7, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	58024400 	.word	0x58024400

080037bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08e      	sub	sp, #56	; 0x38
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	609a      	str	r2, [r3, #8]
 80037d0:	60da      	str	r2, [r3, #12]
 80037d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a4f      	ldr	r2, [pc, #316]	; (8003918 <HAL_TIM_Encoder_MspInit+0x15c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d12f      	bne.n	800383e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037de:	4b4f      	ldr	r3, [pc, #316]	; (800391c <HAL_TIM_Encoder_MspInit+0x160>)
 80037e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037e4:	4a4d      	ldr	r2, [pc, #308]	; (800391c <HAL_TIM_Encoder_MspInit+0x160>)
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80037ee:	4b4b      	ldr	r3, [pc, #300]	; (800391c <HAL_TIM_Encoder_MspInit+0x160>)
 80037f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	623b      	str	r3, [r7, #32]
 80037fa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80037fc:	4b47      	ldr	r3, [pc, #284]	; (800391c <HAL_TIM_Encoder_MspInit+0x160>)
 80037fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003802:	4a46      	ldr	r2, [pc, #280]	; (800391c <HAL_TIM_Encoder_MspInit+0x160>)
 8003804:	f043 0310 	orr.w	r3, r3, #16
 8003808:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800380c:	4b43      	ldr	r3, [pc, #268]	; (800391c <HAL_TIM_Encoder_MspInit+0x160>)
 800380e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800381a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003820:	2302      	movs	r3, #2
 8003822:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003824:	2300      	movs	r3, #0
 8003826:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003828:	2300      	movs	r3, #0
 800382a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800382c:	2301      	movs	r3, #1
 800382e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003834:	4619      	mov	r1, r3
 8003836:	483a      	ldr	r0, [pc, #232]	; (8003920 <HAL_TIM_Encoder_MspInit+0x164>)
 8003838:	f003 fd54 	bl	80072e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 800383c:	e067      	b.n	800390e <HAL_TIM_Encoder_MspInit+0x152>
  else if(htim_encoder->Instance==TIM4)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a38      	ldr	r2, [pc, #224]	; (8003924 <HAL_TIM_Encoder_MspInit+0x168>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d12f      	bne.n	80038a8 <HAL_TIM_Encoder_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003848:	4b34      	ldr	r3, [pc, #208]	; (800391c <HAL_TIM_Encoder_MspInit+0x160>)
 800384a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800384e:	4a33      	ldr	r2, [pc, #204]	; (800391c <HAL_TIM_Encoder_MspInit+0x160>)
 8003850:	f043 0304 	orr.w	r3, r3, #4
 8003854:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003858:	4b30      	ldr	r3, [pc, #192]	; (800391c <HAL_TIM_Encoder_MspInit+0x160>)
 800385a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	61bb      	str	r3, [r7, #24]
 8003864:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003866:	4b2d      	ldr	r3, [pc, #180]	; (800391c <HAL_TIM_Encoder_MspInit+0x160>)
 8003868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800386c:	4a2b      	ldr	r2, [pc, #172]	; (800391c <HAL_TIM_Encoder_MspInit+0x160>)
 800386e:	f043 0308 	orr.w	r3, r3, #8
 8003872:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003876:	4b29      	ldr	r3, [pc, #164]	; (800391c <HAL_TIM_Encoder_MspInit+0x160>)
 8003878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003884:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388a:	2302      	movs	r3, #2
 800388c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388e:	2300      	movs	r3, #0
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003892:	2300      	movs	r3, #0
 8003894:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003896:	2302      	movs	r3, #2
 8003898:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800389a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800389e:	4619      	mov	r1, r3
 80038a0:	4821      	ldr	r0, [pc, #132]	; (8003928 <HAL_TIM_Encoder_MspInit+0x16c>)
 80038a2:	f003 fd1f 	bl	80072e4 <HAL_GPIO_Init>
}
 80038a6:	e032      	b.n	800390e <HAL_TIM_Encoder_MspInit+0x152>
  else if(htim_encoder->Instance==TIM23)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1f      	ldr	r2, [pc, #124]	; (800392c <HAL_TIM_Encoder_MspInit+0x170>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d12d      	bne.n	800390e <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80038b2:	4b1a      	ldr	r3, [pc, #104]	; (800391c <HAL_TIM_Encoder_MspInit+0x160>)
 80038b4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80038b8:	4a18      	ldr	r2, [pc, #96]	; (800391c <HAL_TIM_Encoder_MspInit+0x160>)
 80038ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038be:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80038c2:	4b16      	ldr	r3, [pc, #88]	; (800391c <HAL_TIM_Encoder_MspInit+0x160>)
 80038c4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80038c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80038d0:	4b12      	ldr	r3, [pc, #72]	; (800391c <HAL_TIM_Encoder_MspInit+0x160>)
 80038d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038d6:	4a11      	ldr	r2, [pc, #68]	; (800391c <HAL_TIM_Encoder_MspInit+0x160>)
 80038d8:	f043 0320 	orr.w	r3, r3, #32
 80038dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038e0:	4b0e      	ldr	r3, [pc, #56]	; (800391c <HAL_TIM_Encoder_MspInit+0x160>)
 80038e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80038ee:	2303      	movs	r3, #3
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f2:	2302      	movs	r3, #2
 80038f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fa:	2300      	movs	r3, #0
 80038fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 80038fe:	230d      	movs	r3, #13
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003906:	4619      	mov	r1, r3
 8003908:	4809      	ldr	r0, [pc, #36]	; (8003930 <HAL_TIM_Encoder_MspInit+0x174>)
 800390a:	f003 fceb 	bl	80072e4 <HAL_GPIO_Init>
}
 800390e:	bf00      	nop
 8003910:	3738      	adds	r7, #56	; 0x38
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40010000 	.word	0x40010000
 800391c:	58024400 	.word	0x58024400
 8003920:	58021000 	.word	0x58021000
 8003924:	40000800 	.word	0x40000800
 8003928:	58020c00 	.word	0x58020c00
 800392c:	4000e000 	.word	0x4000e000
 8003930:	58021400 	.word	0x58021400

08003934 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003944:	d10f      	bne.n	8003966 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003946:	4b15      	ldr	r3, [pc, #84]	; (800399c <HAL_TIM_PWM_MspInit+0x68>)
 8003948:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800394c:	4a13      	ldr	r2, [pc, #76]	; (800399c <HAL_TIM_PWM_MspInit+0x68>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003956:	4b11      	ldr	r3, [pc, #68]	; (800399c <HAL_TIM_PWM_MspInit+0x68>)
 8003958:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003964:	e013      	b.n	800398e <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM8)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a0d      	ldr	r2, [pc, #52]	; (80039a0 <HAL_TIM_PWM_MspInit+0x6c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d10e      	bne.n	800398e <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003970:	4b0a      	ldr	r3, [pc, #40]	; (800399c <HAL_TIM_PWM_MspInit+0x68>)
 8003972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003976:	4a09      	ldr	r2, [pc, #36]	; (800399c <HAL_TIM_PWM_MspInit+0x68>)
 8003978:	f043 0302 	orr.w	r3, r3, #2
 800397c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <HAL_TIM_PWM_MspInit+0x68>)
 8003982:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
}
 800398e:	bf00      	nop
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	58024400 	.word	0x58024400
 80039a0:	40010400 	.word	0x40010400

080039a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a0e      	ldr	r2, [pc, #56]	; (80039ec <HAL_TIM_Base_MspInit+0x48>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d116      	bne.n	80039e4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039b6:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <HAL_TIM_Base_MspInit+0x4c>)
 80039b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039bc:	4a0c      	ldr	r2, [pc, #48]	; (80039f0 <HAL_TIM_Base_MspInit+0x4c>)
 80039be:	f043 0302 	orr.w	r3, r3, #2
 80039c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039c6:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <HAL_TIM_Base_MspInit+0x4c>)
 80039c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80039d4:	2200      	movs	r2, #0
 80039d6:	2100      	movs	r1, #0
 80039d8:	201d      	movs	r0, #29
 80039da:	f000 fc50 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80039de:	201d      	movs	r0, #29
 80039e0:	f000 fc67 	bl	80042b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40000400 	.word	0x40000400
 80039f0:	58024400 	.word	0x58024400

080039f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08a      	sub	sp, #40	; 0x28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039fc:	f107 0314 	add.w	r3, r7, #20
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	60da      	str	r2, [r3, #12]
 8003a0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a14:	d11f      	bne.n	8003a56 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a16:	4b24      	ldr	r3, [pc, #144]	; (8003aa8 <HAL_TIM_MspPostInit+0xb4>)
 8003a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a1c:	4a22      	ldr	r2, [pc, #136]	; (8003aa8 <HAL_TIM_MspPostInit+0xb4>)
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a26:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <HAL_TIM_MspPostInit+0xb4>)
 8003a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8003a34:	2309      	movs	r3, #9
 8003a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a40:	2300      	movs	r3, #0
 8003a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a44:	2301      	movs	r3, #1
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a48:	f107 0314 	add.w	r3, r7, #20
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4817      	ldr	r0, [pc, #92]	; (8003aac <HAL_TIM_MspPostInit+0xb8>)
 8003a50:	f003 fc48 	bl	80072e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003a54:	e024      	b.n	8003aa0 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM8)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a15      	ldr	r2, [pc, #84]	; (8003ab0 <HAL_TIM_MspPostInit+0xbc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d11f      	bne.n	8003aa0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a60:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <HAL_TIM_MspPostInit+0xb4>)
 8003a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a66:	4a10      	ldr	r2, [pc, #64]	; (8003aa8 <HAL_TIM_MspPostInit+0xb4>)
 8003a68:	f043 0304 	orr.w	r3, r3, #4
 8003a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a70:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <HAL_TIM_MspPostInit+0xb4>)
 8003a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a84:	2302      	movs	r3, #2
 8003a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003a90:	2303      	movs	r3, #3
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a94:	f107 0314 	add.w	r3, r7, #20
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4806      	ldr	r0, [pc, #24]	; (8003ab4 <HAL_TIM_MspPostInit+0xc0>)
 8003a9c:	f003 fc22 	bl	80072e4 <HAL_GPIO_Init>
}
 8003aa0:	bf00      	nop
 8003aa2:	3728      	adds	r7, #40	; 0x28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	58024400 	.word	0x58024400
 8003aac:	58020000 	.word	0x58020000
 8003ab0:	40010400 	.word	0x40010400
 8003ab4:	58020800 	.word	0x58020800

08003ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b0b8      	sub	sp, #224	; 0xe0
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	605a      	str	r2, [r3, #4]
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	60da      	str	r2, [r3, #12]
 8003ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ad0:	f107 0310 	add.w	r3, r7, #16
 8003ad4:	22b8      	movs	r2, #184	; 0xb8
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f00a fa43 	bl	800df64 <memset>
  if(huart->Instance==USART3)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a5a      	ldr	r2, [pc, #360]	; (8003c4c <HAL_UART_MspInit+0x194>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	f040 80ac 	bne.w	8003c42 <HAL_UART_MspInit+0x18a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003aea:	f04f 0202 	mov.w	r2, #2
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003af6:	2300      	movs	r3, #0
 8003af8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003afc:	f107 0310 	add.w	r3, r7, #16
 8003b00:	4618      	mov	r0, r3
 8003b02:	f004 fe53 	bl	80087ac <HAL_RCCEx_PeriphCLKConfig>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8003b0c:	f7fd fa18 	bl	8000f40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b10:	4b4f      	ldr	r3, [pc, #316]	; (8003c50 <HAL_UART_MspInit+0x198>)
 8003b12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b16:	4a4e      	ldr	r2, [pc, #312]	; (8003c50 <HAL_UART_MspInit+0x198>)
 8003b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b20:	4b4b      	ldr	r3, [pc, #300]	; (8003c50 <HAL_UART_MspInit+0x198>)
 8003b22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b2e:	4b48      	ldr	r3, [pc, #288]	; (8003c50 <HAL_UART_MspInit+0x198>)
 8003b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b34:	4a46      	ldr	r2, [pc, #280]	; (8003c50 <HAL_UART_MspInit+0x198>)
 8003b36:	f043 0308 	orr.w	r3, r3, #8
 8003b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b3e:	4b44      	ldr	r3, [pc, #272]	; (8003c50 <HAL_UART_MspInit+0x198>)
 8003b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b54:	2302      	movs	r3, #2
 8003b56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b60:	2300      	movs	r3, #0
 8003b62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b66:	2307      	movs	r3, #7
 8003b68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b70:	4619      	mov	r1, r3
 8003b72:	4838      	ldr	r0, [pc, #224]	; (8003c54 <HAL_UART_MspInit+0x19c>)
 8003b74:	f003 fbb6 	bl	80072e4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8003b78:	4b37      	ldr	r3, [pc, #220]	; (8003c58 <HAL_UART_MspInit+0x1a0>)
 8003b7a:	4a38      	ldr	r2, [pc, #224]	; (8003c5c <HAL_UART_MspInit+0x1a4>)
 8003b7c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003b7e:	4b36      	ldr	r3, [pc, #216]	; (8003c58 <HAL_UART_MspInit+0x1a0>)
 8003b80:	222d      	movs	r2, #45	; 0x2d
 8003b82:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b84:	4b34      	ldr	r3, [pc, #208]	; (8003c58 <HAL_UART_MspInit+0x1a0>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b8a:	4b33      	ldr	r3, [pc, #204]	; (8003c58 <HAL_UART_MspInit+0x1a0>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b90:	4b31      	ldr	r3, [pc, #196]	; (8003c58 <HAL_UART_MspInit+0x1a0>)
 8003b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b96:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b98:	4b2f      	ldr	r3, [pc, #188]	; (8003c58 <HAL_UART_MspInit+0x1a0>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b9e:	4b2e      	ldr	r3, [pc, #184]	; (8003c58 <HAL_UART_MspInit+0x1a0>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003ba4:	4b2c      	ldr	r3, [pc, #176]	; (8003c58 <HAL_UART_MspInit+0x1a0>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003baa:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <HAL_UART_MspInit+0x1a0>)
 8003bac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bb0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bb2:	4b29      	ldr	r3, [pc, #164]	; (8003c58 <HAL_UART_MspInit+0x1a0>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003bb8:	4827      	ldr	r0, [pc, #156]	; (8003c58 <HAL_UART_MspInit+0x1a0>)
 8003bba:	f000 fba3 	bl	8004304 <HAL_DMA_Init>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8003bc4:	f7fd f9bc 	bl	8000f40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a23      	ldr	r2, [pc, #140]	; (8003c58 <HAL_UART_MspInit+0x1a0>)
 8003bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003bd0:	4a21      	ldr	r2, [pc, #132]	; (8003c58 <HAL_UART_MspInit+0x1a0>)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8003bd6:	4b22      	ldr	r3, [pc, #136]	; (8003c60 <HAL_UART_MspInit+0x1a8>)
 8003bd8:	4a22      	ldr	r2, [pc, #136]	; (8003c64 <HAL_UART_MspInit+0x1ac>)
 8003bda:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003bdc:	4b20      	ldr	r3, [pc, #128]	; (8003c60 <HAL_UART_MspInit+0x1a8>)
 8003bde:	222e      	movs	r2, #46	; 0x2e
 8003be0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003be2:	4b1f      	ldr	r3, [pc, #124]	; (8003c60 <HAL_UART_MspInit+0x1a8>)
 8003be4:	2240      	movs	r2, #64	; 0x40
 8003be6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003be8:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <HAL_UART_MspInit+0x1a8>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bee:	4b1c      	ldr	r3, [pc, #112]	; (8003c60 <HAL_UART_MspInit+0x1a8>)
 8003bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bf4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bf6:	4b1a      	ldr	r3, [pc, #104]	; (8003c60 <HAL_UART_MspInit+0x1a8>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bfc:	4b18      	ldr	r3, [pc, #96]	; (8003c60 <HAL_UART_MspInit+0x1a8>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003c02:	4b17      	ldr	r3, [pc, #92]	; (8003c60 <HAL_UART_MspInit+0x1a8>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003c08:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <HAL_UART_MspInit+0x1a8>)
 8003c0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c0e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c10:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <HAL_UART_MspInit+0x1a8>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003c16:	4812      	ldr	r0, [pc, #72]	; (8003c60 <HAL_UART_MspInit+0x1a8>)
 8003c18:	f000 fb74 	bl	8004304 <HAL_DMA_Init>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 8003c22:	f7fd f98d 	bl	8000f40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a0d      	ldr	r2, [pc, #52]	; (8003c60 <HAL_UART_MspInit+0x1a8>)
 8003c2a:	67da      	str	r2, [r3, #124]	; 0x7c
 8003c2c:	4a0c      	ldr	r2, [pc, #48]	; (8003c60 <HAL_UART_MspInit+0x1a8>)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003c32:	2200      	movs	r2, #0
 8003c34:	2100      	movs	r1, #0
 8003c36:	2027      	movs	r0, #39	; 0x27
 8003c38:	f000 fb21 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003c3c:	2027      	movs	r0, #39	; 0x27
 8003c3e:	f000 fb38 	bl	80042b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003c42:	bf00      	nop
 8003c44:	37e0      	adds	r7, #224	; 0xe0
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40004800 	.word	0x40004800
 8003c50:	58024400 	.word	0x58024400
 8003c54:	58020c00 	.word	0x58020c00
 8003c58:	240002f0 	.word	0x240002f0
 8003c5c:	40020010 	.word	0x40020010
 8003c60:	24000368 	.word	0x24000368
 8003c64:	40020028 	.word	0x40020028

08003c68 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART3)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a10      	ldr	r2, [pc, #64]	; (8003cb8 <HAL_UART_MspDeInit+0x50>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d11a      	bne.n	8003cb0 <HAL_UART_MspDeInit+0x48>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 8003c7a:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <HAL_UART_MspDeInit+0x54>)
 8003c7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c80:	4a0e      	ldr	r2, [pc, #56]	; (8003cbc <HAL_UART_MspDeInit+0x54>)
 8003c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9);
 8003c8a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003c8e:	480c      	ldr	r0, [pc, #48]	; (8003cc0 <HAL_UART_MspDeInit+0x58>)
 8003c90:	f003 fcd0 	bl	8007634 <HAL_GPIO_DeInit>

    /* USART3 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fe8c 	bl	80049b8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fe87 	bl	80049b8 <HAL_DMA_DeInit>

    /* USART3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8003caa:	2027      	movs	r0, #39	; 0x27
 8003cac:	f000 fb0f 	bl	80042ce <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40004800 	.word	0x40004800
 8003cbc:	58024400 	.word	0x58024400
 8003cc0:	58020c00 	.word	0x58020c00

08003cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cc8:	e7fe      	b.n	8003cc8 <NMI_Handler+0x4>

08003cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cce:	e7fe      	b.n	8003cce <HardFault_Handler+0x4>

08003cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cd4:	e7fe      	b.n	8003cd4 <MemManage_Handler+0x4>

08003cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cda:	e7fe      	b.n	8003cda <BusFault_Handler+0x4>

08003cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ce0:	e7fe      	b.n	8003ce0 <UsageFault_Handler+0x4>

08003ce2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ce6:	bf00      	nop
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d02:	bf00      	nop
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d10:	f000 f996 	bl	8004040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d14:	bf00      	nop
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003d1c:	4802      	ldr	r0, [pc, #8]	; (8003d28 <DMA1_Stream0_IRQHandler+0x10>)
 8003d1e:	f001 ffcf 	bl	8005cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003d22:	bf00      	nop
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	240002f0 	.word	0x240002f0

08003d2c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003d30:	4802      	ldr	r0, [pc, #8]	; (8003d3c <DMA1_Stream1_IRQHandler+0x10>)
 8003d32:	f001 ffc5 	bl	8005cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003d36:	bf00      	nop
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	24000368 	.word	0x24000368

08003d40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003d44:	4802      	ldr	r0, [pc, #8]	; (8003d50 <TIM3_IRQHandler+0x10>)
 8003d46:	f006 fe79 	bl	800aa3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003d4a:	bf00      	nop
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	2400012c 	.word	0x2400012c

08003d54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003d58:	4802      	ldr	r0, [pc, #8]	; (8003d64 <USART3_IRQHandler+0x10>)
 8003d5a:	f008 f8b9 	bl	800bed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003d5e:	bf00      	nop
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	2400025c 	.word	0x2400025c

08003d68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  return 1;
 8003d6c:	2301      	movs	r3, #1
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <_kill>:

int _kill(int pid, int sig)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d82:	f00a f8b7 	bl	800def4 <__errno>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2216      	movs	r2, #22
 8003d8a:	601a      	str	r2, [r3, #0]
  return -1;
 8003d8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <_exit>:

void _exit (int status)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003da0:	f04f 31ff 	mov.w	r1, #4294967295
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff ffe7 	bl	8003d78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003daa:	e7fe      	b.n	8003daa <_exit+0x12>

08003dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003db4:	4a14      	ldr	r2, [pc, #80]	; (8003e08 <_sbrk+0x5c>)
 8003db6:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <_sbrk+0x60>)
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dc0:	4b13      	ldr	r3, [pc, #76]	; (8003e10 <_sbrk+0x64>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d102      	bne.n	8003dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dc8:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <_sbrk+0x64>)
 8003dca:	4a12      	ldr	r2, [pc, #72]	; (8003e14 <_sbrk+0x68>)
 8003dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dce:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <_sbrk+0x64>)
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d207      	bcs.n	8003dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ddc:	f00a f88a 	bl	800def4 <__errno>
 8003de0:	4603      	mov	r3, r0
 8003de2:	220c      	movs	r2, #12
 8003de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003de6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dea:	e009      	b.n	8003e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dec:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <_sbrk+0x64>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003df2:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <_sbrk+0x64>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4413      	add	r3, r2
 8003dfa:	4a05      	ldr	r2, [pc, #20]	; (8003e10 <_sbrk+0x64>)
 8003dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	24050000 	.word	0x24050000
 8003e0c:	00000400 	.word	0x00000400
 8003e10:	24000db0 	.word	0x24000db0
 8003e14:	24000dc8 	.word	0x24000dc8

08003e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003e1c:	4b32      	ldr	r3, [pc, #200]	; (8003ee8 <SystemInit+0xd0>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e22:	4a31      	ldr	r2, [pc, #196]	; (8003ee8 <SystemInit+0xd0>)
 8003e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e2c:	4b2f      	ldr	r3, [pc, #188]	; (8003eec <SystemInit+0xd4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	2b06      	cmp	r3, #6
 8003e36:	d807      	bhi.n	8003e48 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e38:	4b2c      	ldr	r3, [pc, #176]	; (8003eec <SystemInit+0xd4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f023 030f 	bic.w	r3, r3, #15
 8003e40:	4a2a      	ldr	r2, [pc, #168]	; (8003eec <SystemInit+0xd4>)
 8003e42:	f043 0307 	orr.w	r3, r3, #7
 8003e46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003e48:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <SystemInit+0xd8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a28      	ldr	r2, [pc, #160]	; (8003ef0 <SystemInit+0xd8>)
 8003e4e:	f043 0301 	orr.w	r3, r3, #1
 8003e52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e54:	4b26      	ldr	r3, [pc, #152]	; (8003ef0 <SystemInit+0xd8>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003e5a:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <SystemInit+0xd8>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4924      	ldr	r1, [pc, #144]	; (8003ef0 <SystemInit+0xd8>)
 8003e60:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <SystemInit+0xdc>)
 8003e62:	4013      	ands	r3, r2
 8003e64:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e66:	4b21      	ldr	r3, [pc, #132]	; (8003eec <SystemInit+0xd4>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e72:	4b1e      	ldr	r3, [pc, #120]	; (8003eec <SystemInit+0xd4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 030f 	bic.w	r3, r3, #15
 8003e7a:	4a1c      	ldr	r2, [pc, #112]	; (8003eec <SystemInit+0xd4>)
 8003e7c:	f043 0307 	orr.w	r3, r3, #7
 8003e80:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003e82:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <SystemInit+0xd8>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003e88:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <SystemInit+0xd8>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003e8e:	4b18      	ldr	r3, [pc, #96]	; (8003ef0 <SystemInit+0xd8>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003e94:	4b16      	ldr	r3, [pc, #88]	; (8003ef0 <SystemInit+0xd8>)
 8003e96:	4a18      	ldr	r2, [pc, #96]	; (8003ef8 <SystemInit+0xe0>)
 8003e98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003e9a:	4b15      	ldr	r3, [pc, #84]	; (8003ef0 <SystemInit+0xd8>)
 8003e9c:	4a17      	ldr	r2, [pc, #92]	; (8003efc <SystemInit+0xe4>)
 8003e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003ea0:	4b13      	ldr	r3, [pc, #76]	; (8003ef0 <SystemInit+0xd8>)
 8003ea2:	4a17      	ldr	r2, [pc, #92]	; (8003f00 <SystemInit+0xe8>)
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003ea6:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <SystemInit+0xd8>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003eac:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <SystemInit+0xd8>)
 8003eae:	4a14      	ldr	r2, [pc, #80]	; (8003f00 <SystemInit+0xe8>)
 8003eb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003eb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ef0 <SystemInit+0xd8>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003eb8:	4b0d      	ldr	r3, [pc, #52]	; (8003ef0 <SystemInit+0xd8>)
 8003eba:	4a11      	ldr	r2, [pc, #68]	; (8003f00 <SystemInit+0xe8>)
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003ebe:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <SystemInit+0xd8>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ec4:	4b0a      	ldr	r3, [pc, #40]	; (8003ef0 <SystemInit+0xd8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a09      	ldr	r2, [pc, #36]	; (8003ef0 <SystemInit+0xd8>)
 8003eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ece:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003ed0:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <SystemInit+0xd8>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <SystemInit+0xec>)
 8003ed8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003edc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003ede:	bf00      	nop
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	e000ed00 	.word	0xe000ed00
 8003eec:	52002000 	.word	0x52002000
 8003ef0:	58024400 	.word	0x58024400
 8003ef4:	eaf6ed7f 	.word	0xeaf6ed7f
 8003ef8:	02020200 	.word	0x02020200
 8003efc:	01ff0000 	.word	0x01ff0000
 8003f00:	01010280 	.word	0x01010280
 8003f04:	52004000 	.word	0x52004000

08003f08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f0c:	f7ff ff84 	bl	8003e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f10:	480c      	ldr	r0, [pc, #48]	; (8003f44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f12:	490d      	ldr	r1, [pc, #52]	; (8003f48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f14:	4a0d      	ldr	r2, [pc, #52]	; (8003f4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f18:	e002      	b.n	8003f20 <LoopCopyDataInit>

08003f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f1e:	3304      	adds	r3, #4

08003f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f24:	d3f9      	bcc.n	8003f1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f26:	4a0a      	ldr	r2, [pc, #40]	; (8003f50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f28:	4c0a      	ldr	r4, [pc, #40]	; (8003f54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f2c:	e001      	b.n	8003f32 <LoopFillZerobss>

08003f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f30:	3204      	adds	r2, #4

08003f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f34:	d3fb      	bcc.n	8003f2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f36:	f009 ffe3 	bl	800df00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f3a:	f7fc fb9d 	bl	8000678 <main>
  bx  lr
 8003f3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f40:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003f44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003f48:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8003f4c:	0800e594 	.word	0x0800e594
  ldr r2, =_sbss
 8003f50:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8003f54:	24000dc8 	.word	0x24000dc8

08003f58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f58:	e7fe      	b.n	8003f58 <ADC3_IRQHandler>
	...

08003f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f62:	2003      	movs	r0, #3
 8003f64:	f000 f980 	bl	8004268 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f68:	f004 fa4a 	bl	8008400 <HAL_RCC_GetSysClockFreq>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <HAL_Init+0x68>)
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	0a1b      	lsrs	r3, r3, #8
 8003f74:	f003 030f 	and.w	r3, r3, #15
 8003f78:	4913      	ldr	r1, [pc, #76]	; (8003fc8 <HAL_Init+0x6c>)
 8003f7a:	5ccb      	ldrb	r3, [r1, r3]
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	fa22 f303 	lsr.w	r3, r2, r3
 8003f84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f86:	4b0f      	ldr	r3, [pc, #60]	; (8003fc4 <HAL_Init+0x68>)
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	4a0e      	ldr	r2, [pc, #56]	; (8003fc8 <HAL_Init+0x6c>)
 8003f90:	5cd3      	ldrb	r3, [r2, r3]
 8003f92:	f003 031f 	and.w	r3, r3, #31
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9c:	4a0b      	ldr	r2, [pc, #44]	; (8003fcc <HAL_Init+0x70>)
 8003f9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fa0:	4a0b      	ldr	r2, [pc, #44]	; (8003fd0 <HAL_Init+0x74>)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fa6:	200f      	movs	r0, #15
 8003fa8:	f000 f814 	bl	8003fd4 <HAL_InitTick>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e002      	b.n	8003fbc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003fb6:	f7ff fbe7 	bl	8003788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	58024400 	.word	0x58024400
 8003fc8:	0800e540 	.word	0x0800e540
 8003fcc:	24000004 	.word	0x24000004
 8003fd0:	24000000 	.word	0x24000000

08003fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003fdc:	4b15      	ldr	r3, [pc, #84]	; (8004034 <HAL_InitTick+0x60>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e021      	b.n	800402c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003fe8:	4b13      	ldr	r3, [pc, #76]	; (8004038 <HAL_InitTick+0x64>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	4b11      	ldr	r3, [pc, #68]	; (8004034 <HAL_InitTick+0x60>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 f973 	bl	80042ea <HAL_SYSTICK_Config>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e00e      	b.n	800402c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b0f      	cmp	r3, #15
 8004012:	d80a      	bhi.n	800402a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004014:	2200      	movs	r2, #0
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	f04f 30ff 	mov.w	r0, #4294967295
 800401c:	f000 f92f 	bl	800427e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004020:	4a06      	ldr	r2, [pc, #24]	; (800403c <HAL_InitTick+0x68>)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	e000      	b.n	800402c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
}
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	2400000c 	.word	0x2400000c
 8004038:	24000000 	.word	0x24000000
 800403c:	24000008 	.word	0x24000008

08004040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004044:	4b06      	ldr	r3, [pc, #24]	; (8004060 <HAL_IncTick+0x20>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <HAL_IncTick+0x24>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4413      	add	r3, r2
 8004050:	4a04      	ldr	r2, [pc, #16]	; (8004064 <HAL_IncTick+0x24>)
 8004052:	6013      	str	r3, [r2, #0]
}
 8004054:	bf00      	nop
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	2400000c 	.word	0x2400000c
 8004064:	24000db4 	.word	0x24000db4

08004068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return uwTick;
 800406c:	4b03      	ldr	r3, [pc, #12]	; (800407c <HAL_GetTick+0x14>)
 800406e:	681b      	ldr	r3, [r3, #0]
}
 8004070:	4618      	mov	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	24000db4 	.word	0x24000db4

08004080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <__NVIC_SetPriorityGrouping+0x40>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800409c:	4013      	ands	r3, r2
 800409e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80040a8:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <__NVIC_SetPriorityGrouping+0x44>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040ae:	4a04      	ldr	r2, [pc, #16]	; (80040c0 <__NVIC_SetPriorityGrouping+0x40>)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	60d3      	str	r3, [r2, #12]
}
 80040b4:	bf00      	nop
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	e000ed00 	.word	0xe000ed00
 80040c4:	05fa0000 	.word	0x05fa0000

080040c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040cc:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <__NVIC_GetPriorityGrouping+0x18>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	0a1b      	lsrs	r3, r3, #8
 80040d2:	f003 0307 	and.w	r3, r3, #7
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	e000ed00 	.word	0xe000ed00

080040e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	db0b      	blt.n	800410e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	f003 021f 	and.w	r2, r3, #31
 80040fc:	4907      	ldr	r1, [pc, #28]	; (800411c <__NVIC_EnableIRQ+0x38>)
 80040fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	2001      	movs	r0, #1
 8004106:	fa00 f202 	lsl.w	r2, r0, r2
 800410a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	e000e100 	.word	0xe000e100

08004120 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800412a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800412e:	2b00      	cmp	r3, #0
 8004130:	db12      	blt.n	8004158 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	f003 021f 	and.w	r2, r3, #31
 8004138:	490a      	ldr	r1, [pc, #40]	; (8004164 <__NVIC_DisableIRQ+0x44>)
 800413a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	2001      	movs	r0, #1
 8004142:	fa00 f202 	lsl.w	r2, r0, r2
 8004146:	3320      	adds	r3, #32
 8004148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800414c:	f3bf 8f4f 	dsb	sy
}
 8004150:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004152:	f3bf 8f6f 	isb	sy
}
 8004156:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	e000e100 	.word	0xe000e100

08004168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	6039      	str	r1, [r7, #0]
 8004172:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004174:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004178:	2b00      	cmp	r3, #0
 800417a:	db0a      	blt.n	8004192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	b2da      	uxtb	r2, r3
 8004180:	490c      	ldr	r1, [pc, #48]	; (80041b4 <__NVIC_SetPriority+0x4c>)
 8004182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004186:	0112      	lsls	r2, r2, #4
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	440b      	add	r3, r1
 800418c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004190:	e00a      	b.n	80041a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	b2da      	uxtb	r2, r3
 8004196:	4908      	ldr	r1, [pc, #32]	; (80041b8 <__NVIC_SetPriority+0x50>)
 8004198:	88fb      	ldrh	r3, [r7, #6]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	3b04      	subs	r3, #4
 80041a0:	0112      	lsls	r2, r2, #4
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	440b      	add	r3, r1
 80041a6:	761a      	strb	r2, [r3, #24]
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	e000e100 	.word	0xe000e100
 80041b8:	e000ed00 	.word	0xe000ed00

080041bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041bc:	b480      	push	{r7}
 80041be:	b089      	sub	sp, #36	; 0x24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f1c3 0307 	rsb	r3, r3, #7
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	bf28      	it	cs
 80041da:	2304      	movcs	r3, #4
 80041dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	3304      	adds	r3, #4
 80041e2:	2b06      	cmp	r3, #6
 80041e4:	d902      	bls.n	80041ec <NVIC_EncodePriority+0x30>
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	3b03      	subs	r3, #3
 80041ea:	e000      	b.n	80041ee <NVIC_EncodePriority+0x32>
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f0:	f04f 32ff 	mov.w	r2, #4294967295
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43da      	mvns	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	401a      	ands	r2, r3
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004204:	f04f 31ff 	mov.w	r1, #4294967295
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	fa01 f303 	lsl.w	r3, r1, r3
 800420e:	43d9      	mvns	r1, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004214:	4313      	orrs	r3, r2
         );
}
 8004216:	4618      	mov	r0, r3
 8004218:	3724      	adds	r7, #36	; 0x24
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3b01      	subs	r3, #1
 8004230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004234:	d301      	bcc.n	800423a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004236:	2301      	movs	r3, #1
 8004238:	e00f      	b.n	800425a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800423a:	4a0a      	ldr	r2, [pc, #40]	; (8004264 <SysTick_Config+0x40>)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3b01      	subs	r3, #1
 8004240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004242:	210f      	movs	r1, #15
 8004244:	f04f 30ff 	mov.w	r0, #4294967295
 8004248:	f7ff ff8e 	bl	8004168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <SysTick_Config+0x40>)
 800424e:	2200      	movs	r2, #0
 8004250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004252:	4b04      	ldr	r3, [pc, #16]	; (8004264 <SysTick_Config+0x40>)
 8004254:	2207      	movs	r2, #7
 8004256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	e000e010 	.word	0xe000e010

08004268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff05 	bl	8004080 <__NVIC_SetPriorityGrouping>
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b086      	sub	sp, #24
 8004282:	af00      	add	r7, sp, #0
 8004284:	4603      	mov	r3, r0
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
 800428a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800428c:	f7ff ff1c 	bl	80040c8 <__NVIC_GetPriorityGrouping>
 8004290:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	6978      	ldr	r0, [r7, #20]
 8004298:	f7ff ff90 	bl	80041bc <NVIC_EncodePriority>
 800429c:	4602      	mov	r2, r0
 800429e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ff5f 	bl	8004168 <__NVIC_SetPriority>
}
 80042aa:	bf00      	nop
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	4603      	mov	r3, r0
 80042ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff ff0f 	bl	80040e4 <__NVIC_EnableIRQ>
}
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	4603      	mov	r3, r0
 80042d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80042d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ff1f 	bl	8004120 <__NVIC_DisableIRQ>
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff ff96 	bl	8004224 <SysTick_Config>
 80042f8:	4603      	mov	r3, r0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800430c:	f7ff feac 	bl	8004068 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e314      	b.n	8004946 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a66      	ldr	r2, [pc, #408]	; (80044bc <HAL_DMA_Init+0x1b8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d04a      	beq.n	80043bc <HAL_DMA_Init+0xb8>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a65      	ldr	r2, [pc, #404]	; (80044c0 <HAL_DMA_Init+0x1bc>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d045      	beq.n	80043bc <HAL_DMA_Init+0xb8>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a63      	ldr	r2, [pc, #396]	; (80044c4 <HAL_DMA_Init+0x1c0>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d040      	beq.n	80043bc <HAL_DMA_Init+0xb8>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a62      	ldr	r2, [pc, #392]	; (80044c8 <HAL_DMA_Init+0x1c4>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d03b      	beq.n	80043bc <HAL_DMA_Init+0xb8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a60      	ldr	r2, [pc, #384]	; (80044cc <HAL_DMA_Init+0x1c8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d036      	beq.n	80043bc <HAL_DMA_Init+0xb8>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a5f      	ldr	r2, [pc, #380]	; (80044d0 <HAL_DMA_Init+0x1cc>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d031      	beq.n	80043bc <HAL_DMA_Init+0xb8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a5d      	ldr	r2, [pc, #372]	; (80044d4 <HAL_DMA_Init+0x1d0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d02c      	beq.n	80043bc <HAL_DMA_Init+0xb8>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a5c      	ldr	r2, [pc, #368]	; (80044d8 <HAL_DMA_Init+0x1d4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d027      	beq.n	80043bc <HAL_DMA_Init+0xb8>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a5a      	ldr	r2, [pc, #360]	; (80044dc <HAL_DMA_Init+0x1d8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d022      	beq.n	80043bc <HAL_DMA_Init+0xb8>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a59      	ldr	r2, [pc, #356]	; (80044e0 <HAL_DMA_Init+0x1dc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d01d      	beq.n	80043bc <HAL_DMA_Init+0xb8>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a57      	ldr	r2, [pc, #348]	; (80044e4 <HAL_DMA_Init+0x1e0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d018      	beq.n	80043bc <HAL_DMA_Init+0xb8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a56      	ldr	r2, [pc, #344]	; (80044e8 <HAL_DMA_Init+0x1e4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d013      	beq.n	80043bc <HAL_DMA_Init+0xb8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a54      	ldr	r2, [pc, #336]	; (80044ec <HAL_DMA_Init+0x1e8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00e      	beq.n	80043bc <HAL_DMA_Init+0xb8>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a53      	ldr	r2, [pc, #332]	; (80044f0 <HAL_DMA_Init+0x1ec>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d009      	beq.n	80043bc <HAL_DMA_Init+0xb8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a51      	ldr	r2, [pc, #324]	; (80044f4 <HAL_DMA_Init+0x1f0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d004      	beq.n	80043bc <HAL_DMA_Init+0xb8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a50      	ldr	r2, [pc, #320]	; (80044f8 <HAL_DMA_Init+0x1f4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d101      	bne.n	80043c0 <HAL_DMA_Init+0xbc>
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <HAL_DMA_Init+0xbe>
 80043c0:	2300      	movs	r3, #0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 813c 	beq.w	8004640 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a37      	ldr	r2, [pc, #220]	; (80044bc <HAL_DMA_Init+0x1b8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d04a      	beq.n	8004478 <HAL_DMA_Init+0x174>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a36      	ldr	r2, [pc, #216]	; (80044c0 <HAL_DMA_Init+0x1bc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d045      	beq.n	8004478 <HAL_DMA_Init+0x174>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a34      	ldr	r2, [pc, #208]	; (80044c4 <HAL_DMA_Init+0x1c0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d040      	beq.n	8004478 <HAL_DMA_Init+0x174>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a33      	ldr	r2, [pc, #204]	; (80044c8 <HAL_DMA_Init+0x1c4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d03b      	beq.n	8004478 <HAL_DMA_Init+0x174>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a31      	ldr	r2, [pc, #196]	; (80044cc <HAL_DMA_Init+0x1c8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d036      	beq.n	8004478 <HAL_DMA_Init+0x174>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a30      	ldr	r2, [pc, #192]	; (80044d0 <HAL_DMA_Init+0x1cc>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d031      	beq.n	8004478 <HAL_DMA_Init+0x174>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a2e      	ldr	r2, [pc, #184]	; (80044d4 <HAL_DMA_Init+0x1d0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d02c      	beq.n	8004478 <HAL_DMA_Init+0x174>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a2d      	ldr	r2, [pc, #180]	; (80044d8 <HAL_DMA_Init+0x1d4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d027      	beq.n	8004478 <HAL_DMA_Init+0x174>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a2b      	ldr	r2, [pc, #172]	; (80044dc <HAL_DMA_Init+0x1d8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d022      	beq.n	8004478 <HAL_DMA_Init+0x174>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a2a      	ldr	r2, [pc, #168]	; (80044e0 <HAL_DMA_Init+0x1dc>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d01d      	beq.n	8004478 <HAL_DMA_Init+0x174>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a28      	ldr	r2, [pc, #160]	; (80044e4 <HAL_DMA_Init+0x1e0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d018      	beq.n	8004478 <HAL_DMA_Init+0x174>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a27      	ldr	r2, [pc, #156]	; (80044e8 <HAL_DMA_Init+0x1e4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d013      	beq.n	8004478 <HAL_DMA_Init+0x174>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a25      	ldr	r2, [pc, #148]	; (80044ec <HAL_DMA_Init+0x1e8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00e      	beq.n	8004478 <HAL_DMA_Init+0x174>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a24      	ldr	r2, [pc, #144]	; (80044f0 <HAL_DMA_Init+0x1ec>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d009      	beq.n	8004478 <HAL_DMA_Init+0x174>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a22      	ldr	r2, [pc, #136]	; (80044f4 <HAL_DMA_Init+0x1f0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d004      	beq.n	8004478 <HAL_DMA_Init+0x174>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a21      	ldr	r2, [pc, #132]	; (80044f8 <HAL_DMA_Init+0x1f4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d108      	bne.n	800448a <HAL_DMA_Init+0x186>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	e007      	b.n	800449a <HAL_DMA_Init+0x196>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0201 	bic.w	r2, r2, #1
 8004498:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800449a:	e02f      	b.n	80044fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800449c:	f7ff fde4 	bl	8004068 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b05      	cmp	r3, #5
 80044a8:	d928      	bls.n	80044fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2203      	movs	r2, #3
 80044b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e244      	b.n	8004946 <HAL_DMA_Init+0x642>
 80044bc:	40020010 	.word	0x40020010
 80044c0:	40020028 	.word	0x40020028
 80044c4:	40020040 	.word	0x40020040
 80044c8:	40020058 	.word	0x40020058
 80044cc:	40020070 	.word	0x40020070
 80044d0:	40020088 	.word	0x40020088
 80044d4:	400200a0 	.word	0x400200a0
 80044d8:	400200b8 	.word	0x400200b8
 80044dc:	40020410 	.word	0x40020410
 80044e0:	40020428 	.word	0x40020428
 80044e4:	40020440 	.word	0x40020440
 80044e8:	40020458 	.word	0x40020458
 80044ec:	40020470 	.word	0x40020470
 80044f0:	40020488 	.word	0x40020488
 80044f4:	400204a0 	.word	0x400204a0
 80044f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1c8      	bne.n	800449c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	4b84      	ldr	r3, [pc, #528]	; (8004728 <HAL_DMA_Init+0x424>)
 8004516:	4013      	ands	r3, r2
 8004518:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004522:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800452e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800453a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	2b04      	cmp	r3, #4
 800454e:	d107      	bne.n	8004560 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004558:	4313      	orrs	r3, r2
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b28      	cmp	r3, #40	; 0x28
 8004566:	d903      	bls.n	8004570 <HAL_DMA_Init+0x26c>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b2e      	cmp	r3, #46	; 0x2e
 800456e:	d91f      	bls.n	80045b0 <HAL_DMA_Init+0x2ac>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b3e      	cmp	r3, #62	; 0x3e
 8004576:	d903      	bls.n	8004580 <HAL_DMA_Init+0x27c>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b42      	cmp	r3, #66	; 0x42
 800457e:	d917      	bls.n	80045b0 <HAL_DMA_Init+0x2ac>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b46      	cmp	r3, #70	; 0x46
 8004586:	d903      	bls.n	8004590 <HAL_DMA_Init+0x28c>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2b48      	cmp	r3, #72	; 0x48
 800458e:	d90f      	bls.n	80045b0 <HAL_DMA_Init+0x2ac>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b4e      	cmp	r3, #78	; 0x4e
 8004596:	d903      	bls.n	80045a0 <HAL_DMA_Init+0x29c>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b52      	cmp	r3, #82	; 0x52
 800459e:	d907      	bls.n	80045b0 <HAL_DMA_Init+0x2ac>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b73      	cmp	r3, #115	; 0x73
 80045a6:	d905      	bls.n	80045b4 <HAL_DMA_Init+0x2b0>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b77      	cmp	r3, #119	; 0x77
 80045ae:	d801      	bhi.n	80045b4 <HAL_DMA_Init+0x2b0>
 80045b0:	2301      	movs	r3, #1
 80045b2:	e000      	b.n	80045b6 <HAL_DMA_Init+0x2b2>
 80045b4:	2300      	movs	r3, #0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045c0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f023 0307 	bic.w	r3, r3, #7
 80045d8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	d117      	bne.n	800461c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00e      	beq.n	800461c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f002 fce6 	bl	8006fd0 <DMA_CheckFifoParam>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d008      	beq.n	800461c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2240      	movs	r2, #64	; 0x40
 800460e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e194      	b.n	8004946 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f002 fc21 	bl	8006e6c <DMA_CalcBaseAndBitshift>
 800462a:	4603      	mov	r3, r0
 800462c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004632:	f003 031f 	and.w	r3, r3, #31
 8004636:	223f      	movs	r2, #63	; 0x3f
 8004638:	409a      	lsls	r2, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	609a      	str	r2, [r3, #8]
 800463e:	e0ca      	b.n	80047d6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a39      	ldr	r2, [pc, #228]	; (800472c <HAL_DMA_Init+0x428>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d022      	beq.n	8004690 <HAL_DMA_Init+0x38c>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a38      	ldr	r2, [pc, #224]	; (8004730 <HAL_DMA_Init+0x42c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d01d      	beq.n	8004690 <HAL_DMA_Init+0x38c>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a36      	ldr	r2, [pc, #216]	; (8004734 <HAL_DMA_Init+0x430>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d018      	beq.n	8004690 <HAL_DMA_Init+0x38c>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a35      	ldr	r2, [pc, #212]	; (8004738 <HAL_DMA_Init+0x434>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d013      	beq.n	8004690 <HAL_DMA_Init+0x38c>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a33      	ldr	r2, [pc, #204]	; (800473c <HAL_DMA_Init+0x438>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00e      	beq.n	8004690 <HAL_DMA_Init+0x38c>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a32      	ldr	r2, [pc, #200]	; (8004740 <HAL_DMA_Init+0x43c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d009      	beq.n	8004690 <HAL_DMA_Init+0x38c>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a30      	ldr	r2, [pc, #192]	; (8004744 <HAL_DMA_Init+0x440>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d004      	beq.n	8004690 <HAL_DMA_Init+0x38c>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a2f      	ldr	r2, [pc, #188]	; (8004748 <HAL_DMA_Init+0x444>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d101      	bne.n	8004694 <HAL_DMA_Init+0x390>
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <HAL_DMA_Init+0x392>
 8004694:	2300      	movs	r3, #0
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 8094 	beq.w	80047c4 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a22      	ldr	r2, [pc, #136]	; (800472c <HAL_DMA_Init+0x428>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d021      	beq.n	80046ea <HAL_DMA_Init+0x3e6>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a21      	ldr	r2, [pc, #132]	; (8004730 <HAL_DMA_Init+0x42c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d01c      	beq.n	80046ea <HAL_DMA_Init+0x3e6>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a1f      	ldr	r2, [pc, #124]	; (8004734 <HAL_DMA_Init+0x430>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d017      	beq.n	80046ea <HAL_DMA_Init+0x3e6>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a1e      	ldr	r2, [pc, #120]	; (8004738 <HAL_DMA_Init+0x434>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d012      	beq.n	80046ea <HAL_DMA_Init+0x3e6>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a1c      	ldr	r2, [pc, #112]	; (800473c <HAL_DMA_Init+0x438>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00d      	beq.n	80046ea <HAL_DMA_Init+0x3e6>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a1b      	ldr	r2, [pc, #108]	; (8004740 <HAL_DMA_Init+0x43c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d008      	beq.n	80046ea <HAL_DMA_Init+0x3e6>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a19      	ldr	r2, [pc, #100]	; (8004744 <HAL_DMA_Init+0x440>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d003      	beq.n	80046ea <HAL_DMA_Init+0x3e6>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a18      	ldr	r2, [pc, #96]	; (8004748 <HAL_DMA_Init+0x444>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4b11      	ldr	r3, [pc, #68]	; (800474c <HAL_DMA_Init+0x448>)
 8004708:	4013      	ands	r3, r2
 800470a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b40      	cmp	r3, #64	; 0x40
 8004712:	d01d      	beq.n	8004750 <HAL_DMA_Init+0x44c>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2b80      	cmp	r3, #128	; 0x80
 800471a:	d102      	bne.n	8004722 <HAL_DMA_Init+0x41e>
 800471c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004720:	e017      	b.n	8004752 <HAL_DMA_Init+0x44e>
 8004722:	2300      	movs	r3, #0
 8004724:	e015      	b.n	8004752 <HAL_DMA_Init+0x44e>
 8004726:	bf00      	nop
 8004728:	fe10803f 	.word	0xfe10803f
 800472c:	58025408 	.word	0x58025408
 8004730:	5802541c 	.word	0x5802541c
 8004734:	58025430 	.word	0x58025430
 8004738:	58025444 	.word	0x58025444
 800473c:	58025458 	.word	0x58025458
 8004740:	5802546c 	.word	0x5802546c
 8004744:	58025480 	.word	0x58025480
 8004748:	58025494 	.word	0x58025494
 800474c:	fffe000f 	.word	0xfffe000f
 8004750:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	68d2      	ldr	r2, [r2, #12]
 8004756:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004758:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004760:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004768:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004770:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004778:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004780:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	461a      	mov	r2, r3
 8004796:	4b6e      	ldr	r3, [pc, #440]	; (8004950 <HAL_DMA_Init+0x64c>)
 8004798:	4413      	add	r3, r2
 800479a:	4a6e      	ldr	r2, [pc, #440]	; (8004954 <HAL_DMA_Init+0x650>)
 800479c:	fba2 2303 	umull	r2, r3, r2, r3
 80047a0:	091b      	lsrs	r3, r3, #4
 80047a2:	009a      	lsls	r2, r3, #2
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f002 fb5f 	bl	8006e6c <DMA_CalcBaseAndBitshift>
 80047ae:	4603      	mov	r3, r0
 80047b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b6:	f003 031f 	and.w	r3, r3, #31
 80047ba:	2201      	movs	r2, #1
 80047bc:	409a      	lsls	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	605a      	str	r2, [r3, #4]
 80047c2:	e008      	b.n	80047d6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2240      	movs	r2, #64	; 0x40
 80047c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2203      	movs	r2, #3
 80047ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e0b7      	b.n	8004946 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a5f      	ldr	r2, [pc, #380]	; (8004958 <HAL_DMA_Init+0x654>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d072      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a5d      	ldr	r2, [pc, #372]	; (800495c <HAL_DMA_Init+0x658>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d06d      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a5c      	ldr	r2, [pc, #368]	; (8004960 <HAL_DMA_Init+0x65c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d068      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a5a      	ldr	r2, [pc, #360]	; (8004964 <HAL_DMA_Init+0x660>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d063      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a59      	ldr	r2, [pc, #356]	; (8004968 <HAL_DMA_Init+0x664>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d05e      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a57      	ldr	r2, [pc, #348]	; (800496c <HAL_DMA_Init+0x668>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d059      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a56      	ldr	r2, [pc, #344]	; (8004970 <HAL_DMA_Init+0x66c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d054      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a54      	ldr	r2, [pc, #336]	; (8004974 <HAL_DMA_Init+0x670>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d04f      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a53      	ldr	r2, [pc, #332]	; (8004978 <HAL_DMA_Init+0x674>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d04a      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a51      	ldr	r2, [pc, #324]	; (800497c <HAL_DMA_Init+0x678>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d045      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a50      	ldr	r2, [pc, #320]	; (8004980 <HAL_DMA_Init+0x67c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d040      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a4e      	ldr	r2, [pc, #312]	; (8004984 <HAL_DMA_Init+0x680>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d03b      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a4d      	ldr	r2, [pc, #308]	; (8004988 <HAL_DMA_Init+0x684>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d036      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a4b      	ldr	r2, [pc, #300]	; (800498c <HAL_DMA_Init+0x688>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d031      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a4a      	ldr	r2, [pc, #296]	; (8004990 <HAL_DMA_Init+0x68c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d02c      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a48      	ldr	r2, [pc, #288]	; (8004994 <HAL_DMA_Init+0x690>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d027      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a47      	ldr	r2, [pc, #284]	; (8004998 <HAL_DMA_Init+0x694>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d022      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a45      	ldr	r2, [pc, #276]	; (800499c <HAL_DMA_Init+0x698>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d01d      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a44      	ldr	r2, [pc, #272]	; (80049a0 <HAL_DMA_Init+0x69c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d018      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a42      	ldr	r2, [pc, #264]	; (80049a4 <HAL_DMA_Init+0x6a0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d013      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a41      	ldr	r2, [pc, #260]	; (80049a8 <HAL_DMA_Init+0x6a4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00e      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a3f      	ldr	r2, [pc, #252]	; (80049ac <HAL_DMA_Init+0x6a8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d009      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a3e      	ldr	r2, [pc, #248]	; (80049b0 <HAL_DMA_Init+0x6ac>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d004      	beq.n	80048c6 <HAL_DMA_Init+0x5c2>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a3c      	ldr	r2, [pc, #240]	; (80049b4 <HAL_DMA_Init+0x6b0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d101      	bne.n	80048ca <HAL_DMA_Init+0x5c6>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <HAL_DMA_Init+0x5c8>
 80048ca:	2300      	movs	r3, #0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d032      	beq.n	8004936 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f002 fbf9 	bl	80070c8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2b80      	cmp	r3, #128	; 0x80
 80048dc:	d102      	bne.n	80048e4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80048f8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d010      	beq.n	8004924 <HAL_DMA_Init+0x620>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b08      	cmp	r3, #8
 8004908:	d80c      	bhi.n	8004924 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f002 fc76 	bl	80071fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	e008      	b.n	8004936 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	a7fdabf8 	.word	0xa7fdabf8
 8004954:	cccccccd 	.word	0xcccccccd
 8004958:	40020010 	.word	0x40020010
 800495c:	40020028 	.word	0x40020028
 8004960:	40020040 	.word	0x40020040
 8004964:	40020058 	.word	0x40020058
 8004968:	40020070 	.word	0x40020070
 800496c:	40020088 	.word	0x40020088
 8004970:	400200a0 	.word	0x400200a0
 8004974:	400200b8 	.word	0x400200b8
 8004978:	40020410 	.word	0x40020410
 800497c:	40020428 	.word	0x40020428
 8004980:	40020440 	.word	0x40020440
 8004984:	40020458 	.word	0x40020458
 8004988:	40020470 	.word	0x40020470
 800498c:	40020488 	.word	0x40020488
 8004990:	400204a0 	.word	0x400204a0
 8004994:	400204b8 	.word	0x400204b8
 8004998:	58025408 	.word	0x58025408
 800499c:	5802541c 	.word	0x5802541c
 80049a0:	58025430 	.word	0x58025430
 80049a4:	58025444 	.word	0x58025444
 80049a8:	58025458 	.word	0x58025458
 80049ac:	5802546c 	.word	0x5802546c
 80049b0:	58025480 	.word	0x58025480
 80049b4:	58025494 	.word	0x58025494

080049b8 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e1a8      	b.n	8004d1c <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a82      	ldr	r2, [pc, #520]	; (8004bd8 <HAL_DMA_DeInit+0x220>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d04a      	beq.n	8004a6a <HAL_DMA_DeInit+0xb2>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a80      	ldr	r2, [pc, #512]	; (8004bdc <HAL_DMA_DeInit+0x224>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d045      	beq.n	8004a6a <HAL_DMA_DeInit+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a7f      	ldr	r2, [pc, #508]	; (8004be0 <HAL_DMA_DeInit+0x228>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d040      	beq.n	8004a6a <HAL_DMA_DeInit+0xb2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a7d      	ldr	r2, [pc, #500]	; (8004be4 <HAL_DMA_DeInit+0x22c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d03b      	beq.n	8004a6a <HAL_DMA_DeInit+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a7c      	ldr	r2, [pc, #496]	; (8004be8 <HAL_DMA_DeInit+0x230>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d036      	beq.n	8004a6a <HAL_DMA_DeInit+0xb2>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a7a      	ldr	r2, [pc, #488]	; (8004bec <HAL_DMA_DeInit+0x234>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d031      	beq.n	8004a6a <HAL_DMA_DeInit+0xb2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a79      	ldr	r2, [pc, #484]	; (8004bf0 <HAL_DMA_DeInit+0x238>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d02c      	beq.n	8004a6a <HAL_DMA_DeInit+0xb2>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a77      	ldr	r2, [pc, #476]	; (8004bf4 <HAL_DMA_DeInit+0x23c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d027      	beq.n	8004a6a <HAL_DMA_DeInit+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a76      	ldr	r2, [pc, #472]	; (8004bf8 <HAL_DMA_DeInit+0x240>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d022      	beq.n	8004a6a <HAL_DMA_DeInit+0xb2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a74      	ldr	r2, [pc, #464]	; (8004bfc <HAL_DMA_DeInit+0x244>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d01d      	beq.n	8004a6a <HAL_DMA_DeInit+0xb2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a73      	ldr	r2, [pc, #460]	; (8004c00 <HAL_DMA_DeInit+0x248>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d018      	beq.n	8004a6a <HAL_DMA_DeInit+0xb2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a71      	ldr	r2, [pc, #452]	; (8004c04 <HAL_DMA_DeInit+0x24c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d013      	beq.n	8004a6a <HAL_DMA_DeInit+0xb2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a70      	ldr	r2, [pc, #448]	; (8004c08 <HAL_DMA_DeInit+0x250>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00e      	beq.n	8004a6a <HAL_DMA_DeInit+0xb2>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a6e      	ldr	r2, [pc, #440]	; (8004c0c <HAL_DMA_DeInit+0x254>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d009      	beq.n	8004a6a <HAL_DMA_DeInit+0xb2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a6d      	ldr	r2, [pc, #436]	; (8004c10 <HAL_DMA_DeInit+0x258>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d004      	beq.n	8004a6a <HAL_DMA_DeInit+0xb2>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a6b      	ldr	r2, [pc, #428]	; (8004c14 <HAL_DMA_DeInit+0x25c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d108      	bne.n	8004a7c <HAL_DMA_DeInit+0xc4>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0201 	bic.w	r2, r2, #1
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	e007      	b.n	8004a8c <HAL_DMA_DeInit+0xd4>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0201 	bic.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a51      	ldr	r2, [pc, #324]	; (8004bd8 <HAL_DMA_DeInit+0x220>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d04a      	beq.n	8004b2c <HAL_DMA_DeInit+0x174>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a50      	ldr	r2, [pc, #320]	; (8004bdc <HAL_DMA_DeInit+0x224>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d045      	beq.n	8004b2c <HAL_DMA_DeInit+0x174>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a4e      	ldr	r2, [pc, #312]	; (8004be0 <HAL_DMA_DeInit+0x228>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d040      	beq.n	8004b2c <HAL_DMA_DeInit+0x174>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a4d      	ldr	r2, [pc, #308]	; (8004be4 <HAL_DMA_DeInit+0x22c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d03b      	beq.n	8004b2c <HAL_DMA_DeInit+0x174>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a4b      	ldr	r2, [pc, #300]	; (8004be8 <HAL_DMA_DeInit+0x230>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d036      	beq.n	8004b2c <HAL_DMA_DeInit+0x174>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a4a      	ldr	r2, [pc, #296]	; (8004bec <HAL_DMA_DeInit+0x234>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d031      	beq.n	8004b2c <HAL_DMA_DeInit+0x174>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a48      	ldr	r2, [pc, #288]	; (8004bf0 <HAL_DMA_DeInit+0x238>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d02c      	beq.n	8004b2c <HAL_DMA_DeInit+0x174>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a47      	ldr	r2, [pc, #284]	; (8004bf4 <HAL_DMA_DeInit+0x23c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d027      	beq.n	8004b2c <HAL_DMA_DeInit+0x174>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a45      	ldr	r2, [pc, #276]	; (8004bf8 <HAL_DMA_DeInit+0x240>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d022      	beq.n	8004b2c <HAL_DMA_DeInit+0x174>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a44      	ldr	r2, [pc, #272]	; (8004bfc <HAL_DMA_DeInit+0x244>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d01d      	beq.n	8004b2c <HAL_DMA_DeInit+0x174>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a42      	ldr	r2, [pc, #264]	; (8004c00 <HAL_DMA_DeInit+0x248>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d018      	beq.n	8004b2c <HAL_DMA_DeInit+0x174>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a41      	ldr	r2, [pc, #260]	; (8004c04 <HAL_DMA_DeInit+0x24c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d013      	beq.n	8004b2c <HAL_DMA_DeInit+0x174>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a3f      	ldr	r2, [pc, #252]	; (8004c08 <HAL_DMA_DeInit+0x250>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00e      	beq.n	8004b2c <HAL_DMA_DeInit+0x174>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a3e      	ldr	r2, [pc, #248]	; (8004c0c <HAL_DMA_DeInit+0x254>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d009      	beq.n	8004b2c <HAL_DMA_DeInit+0x174>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a3c      	ldr	r2, [pc, #240]	; (8004c10 <HAL_DMA_DeInit+0x258>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d004      	beq.n	8004b2c <HAL_DMA_DeInit+0x174>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a3b      	ldr	r2, [pc, #236]	; (8004c14 <HAL_DMA_DeInit+0x25c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d101      	bne.n	8004b30 <HAL_DMA_DeInit+0x178>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e000      	b.n	8004b32 <HAL_DMA_DeInit+0x17a>
 8004b30:	2300      	movs	r3, #0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d025      	beq.n	8004b82 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2200      	movs	r2, #0
 8004b44:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2200      	movs	r2, #0
 8004b54:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2221      	movs	r2, #33	; 0x21
 8004b64:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f002 f980 	bl	8006e6c <DMA_CalcBaseAndBitshift>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	223f      	movs	r2, #63	; 0x3f
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	609a      	str	r2, [r3, #8]
 8004b80:	e081      	b.n	8004c86 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a24      	ldr	r2, [pc, #144]	; (8004c18 <HAL_DMA_DeInit+0x260>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d022      	beq.n	8004bd2 <HAL_DMA_DeInit+0x21a>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a22      	ldr	r2, [pc, #136]	; (8004c1c <HAL_DMA_DeInit+0x264>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d01d      	beq.n	8004bd2 <HAL_DMA_DeInit+0x21a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a21      	ldr	r2, [pc, #132]	; (8004c20 <HAL_DMA_DeInit+0x268>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d018      	beq.n	8004bd2 <HAL_DMA_DeInit+0x21a>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1f      	ldr	r2, [pc, #124]	; (8004c24 <HAL_DMA_DeInit+0x26c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <HAL_DMA_DeInit+0x21a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1e      	ldr	r2, [pc, #120]	; (8004c28 <HAL_DMA_DeInit+0x270>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00e      	beq.n	8004bd2 <HAL_DMA_DeInit+0x21a>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a1c      	ldr	r2, [pc, #112]	; (8004c2c <HAL_DMA_DeInit+0x274>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d009      	beq.n	8004bd2 <HAL_DMA_DeInit+0x21a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a1b      	ldr	r2, [pc, #108]	; (8004c30 <HAL_DMA_DeInit+0x278>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d004      	beq.n	8004bd2 <HAL_DMA_DeInit+0x21a>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a19      	ldr	r2, [pc, #100]	; (8004c34 <HAL_DMA_DeInit+0x27c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d132      	bne.n	8004c38 <HAL_DMA_DeInit+0x280>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e031      	b.n	8004c3a <HAL_DMA_DeInit+0x282>
 8004bd6:	bf00      	nop
 8004bd8:	40020010 	.word	0x40020010
 8004bdc:	40020028 	.word	0x40020028
 8004be0:	40020040 	.word	0x40020040
 8004be4:	40020058 	.word	0x40020058
 8004be8:	40020070 	.word	0x40020070
 8004bec:	40020088 	.word	0x40020088
 8004bf0:	400200a0 	.word	0x400200a0
 8004bf4:	400200b8 	.word	0x400200b8
 8004bf8:	40020410 	.word	0x40020410
 8004bfc:	40020428 	.word	0x40020428
 8004c00:	40020440 	.word	0x40020440
 8004c04:	40020458 	.word	0x40020458
 8004c08:	40020470 	.word	0x40020470
 8004c0c:	40020488 	.word	0x40020488
 8004c10:	400204a0 	.word	0x400204a0
 8004c14:	400204b8 	.word	0x400204b8
 8004c18:	58025408 	.word	0x58025408
 8004c1c:	5802541c 	.word	0x5802541c
 8004c20:	58025430 	.word	0x58025430
 8004c24:	58025444 	.word	0x58025444
 8004c28:	58025458 	.word	0x58025458
 8004c2c:	5802546c 	.word	0x5802546c
 8004c30:	58025480 	.word	0x58025480
 8004c34:	58025494 	.word	0x58025494
 8004c38:	2300      	movs	r3, #0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d021      	beq.n	8004c82 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2200      	movs	r2, #0
 8004c54:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2200      	movs	r2, #0
 8004c64:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f002 f900 	bl	8006e6c <DMA_CalcBaseAndBitshift>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c74:	f003 031f 	and.w	r3, r3, #31
 8004c78:	2201      	movs	r2, #1
 8004c7a:	409a      	lsls	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	605a      	str	r2, [r3, #4]
 8004c80:	e001      	b.n	8004c86 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e04a      	b.n	8004d1c <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f002 fa1e 	bl	80070c8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d008      	beq.n	8004ca6 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ca4:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00f      	beq.n	8004cce <HAL_DMA_DeInit+0x316>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d80b      	bhi.n	8004cce <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f002 faa0 	bl	80071fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ccc:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e226      	b.n	800518e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d101      	bne.n	8004d4e <HAL_DMA_Start_IT+0x2a>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e21f      	b.n	800518e <HAL_DMA_Start_IT+0x46a>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	f040 820a 	bne.w	8005178 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a68      	ldr	r2, [pc, #416]	; (8004f18 <HAL_DMA_Start_IT+0x1f4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d04a      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a66      	ldr	r2, [pc, #408]	; (8004f1c <HAL_DMA_Start_IT+0x1f8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d045      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a65      	ldr	r2, [pc, #404]	; (8004f20 <HAL_DMA_Start_IT+0x1fc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d040      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a63      	ldr	r2, [pc, #396]	; (8004f24 <HAL_DMA_Start_IT+0x200>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d03b      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a62      	ldr	r2, [pc, #392]	; (8004f28 <HAL_DMA_Start_IT+0x204>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d036      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a60      	ldr	r2, [pc, #384]	; (8004f2c <HAL_DMA_Start_IT+0x208>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d031      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a5f      	ldr	r2, [pc, #380]	; (8004f30 <HAL_DMA_Start_IT+0x20c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d02c      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a5d      	ldr	r2, [pc, #372]	; (8004f34 <HAL_DMA_Start_IT+0x210>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d027      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a5c      	ldr	r2, [pc, #368]	; (8004f38 <HAL_DMA_Start_IT+0x214>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d022      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a5a      	ldr	r2, [pc, #360]	; (8004f3c <HAL_DMA_Start_IT+0x218>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01d      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a59      	ldr	r2, [pc, #356]	; (8004f40 <HAL_DMA_Start_IT+0x21c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d018      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a57      	ldr	r2, [pc, #348]	; (8004f44 <HAL_DMA_Start_IT+0x220>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d013      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a56      	ldr	r2, [pc, #344]	; (8004f48 <HAL_DMA_Start_IT+0x224>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00e      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a54      	ldr	r2, [pc, #336]	; (8004f4c <HAL_DMA_Start_IT+0x228>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d009      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a53      	ldr	r2, [pc, #332]	; (8004f50 <HAL_DMA_Start_IT+0x22c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d004      	beq.n	8004e12 <HAL_DMA_Start_IT+0xee>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a51      	ldr	r2, [pc, #324]	; (8004f54 <HAL_DMA_Start_IT+0x230>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d108      	bne.n	8004e24 <HAL_DMA_Start_IT+0x100>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0201 	bic.w	r2, r2, #1
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	e007      	b.n	8004e34 <HAL_DMA_Start_IT+0x110>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	68b9      	ldr	r1, [r7, #8]
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f001 fe6a 	bl	8006b14 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a34      	ldr	r2, [pc, #208]	; (8004f18 <HAL_DMA_Start_IT+0x1f4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d04a      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a33      	ldr	r2, [pc, #204]	; (8004f1c <HAL_DMA_Start_IT+0x1f8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d045      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a31      	ldr	r2, [pc, #196]	; (8004f20 <HAL_DMA_Start_IT+0x1fc>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d040      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a30      	ldr	r2, [pc, #192]	; (8004f24 <HAL_DMA_Start_IT+0x200>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d03b      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a2e      	ldr	r2, [pc, #184]	; (8004f28 <HAL_DMA_Start_IT+0x204>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d036      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2d      	ldr	r2, [pc, #180]	; (8004f2c <HAL_DMA_Start_IT+0x208>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d031      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a2b      	ldr	r2, [pc, #172]	; (8004f30 <HAL_DMA_Start_IT+0x20c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d02c      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a2a      	ldr	r2, [pc, #168]	; (8004f34 <HAL_DMA_Start_IT+0x210>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d027      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a28      	ldr	r2, [pc, #160]	; (8004f38 <HAL_DMA_Start_IT+0x214>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d022      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a27      	ldr	r2, [pc, #156]	; (8004f3c <HAL_DMA_Start_IT+0x218>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d01d      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a25      	ldr	r2, [pc, #148]	; (8004f40 <HAL_DMA_Start_IT+0x21c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d018      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a24      	ldr	r2, [pc, #144]	; (8004f44 <HAL_DMA_Start_IT+0x220>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d013      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a22      	ldr	r2, [pc, #136]	; (8004f48 <HAL_DMA_Start_IT+0x224>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00e      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a21      	ldr	r2, [pc, #132]	; (8004f4c <HAL_DMA_Start_IT+0x228>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d009      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1f      	ldr	r2, [pc, #124]	; (8004f50 <HAL_DMA_Start_IT+0x22c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d004      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x1bc>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1e      	ldr	r2, [pc, #120]	; (8004f54 <HAL_DMA_Start_IT+0x230>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d101      	bne.n	8004ee4 <HAL_DMA_Start_IT+0x1c0>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <HAL_DMA_Start_IT+0x1c2>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d036      	beq.n	8004f58 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f023 021e 	bic.w	r2, r3, #30
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f042 0216 	orr.w	r2, r2, #22
 8004efc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d03e      	beq.n	8004f84 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0208 	orr.w	r2, r2, #8
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	e035      	b.n	8004f84 <HAL_DMA_Start_IT+0x260>
 8004f18:	40020010 	.word	0x40020010
 8004f1c:	40020028 	.word	0x40020028
 8004f20:	40020040 	.word	0x40020040
 8004f24:	40020058 	.word	0x40020058
 8004f28:	40020070 	.word	0x40020070
 8004f2c:	40020088 	.word	0x40020088
 8004f30:	400200a0 	.word	0x400200a0
 8004f34:	400200b8 	.word	0x400200b8
 8004f38:	40020410 	.word	0x40020410
 8004f3c:	40020428 	.word	0x40020428
 8004f40:	40020440 	.word	0x40020440
 8004f44:	40020458 	.word	0x40020458
 8004f48:	40020470 	.word	0x40020470
 8004f4c:	40020488 	.word	0x40020488
 8004f50:	400204a0 	.word	0x400204a0
 8004f54:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f023 020e 	bic.w	r2, r3, #14
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 020a 	orr.w	r2, r2, #10
 8004f6a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d007      	beq.n	8004f84 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0204 	orr.w	r2, r2, #4
 8004f82:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a83      	ldr	r2, [pc, #524]	; (8005198 <HAL_DMA_Start_IT+0x474>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d072      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a82      	ldr	r2, [pc, #520]	; (800519c <HAL_DMA_Start_IT+0x478>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d06d      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a80      	ldr	r2, [pc, #512]	; (80051a0 <HAL_DMA_Start_IT+0x47c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d068      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a7f      	ldr	r2, [pc, #508]	; (80051a4 <HAL_DMA_Start_IT+0x480>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d063      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a7d      	ldr	r2, [pc, #500]	; (80051a8 <HAL_DMA_Start_IT+0x484>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d05e      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a7c      	ldr	r2, [pc, #496]	; (80051ac <HAL_DMA_Start_IT+0x488>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d059      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a7a      	ldr	r2, [pc, #488]	; (80051b0 <HAL_DMA_Start_IT+0x48c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d054      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a79      	ldr	r2, [pc, #484]	; (80051b4 <HAL_DMA_Start_IT+0x490>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d04f      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a77      	ldr	r2, [pc, #476]	; (80051b8 <HAL_DMA_Start_IT+0x494>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d04a      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a76      	ldr	r2, [pc, #472]	; (80051bc <HAL_DMA_Start_IT+0x498>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d045      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a74      	ldr	r2, [pc, #464]	; (80051c0 <HAL_DMA_Start_IT+0x49c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d040      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a73      	ldr	r2, [pc, #460]	; (80051c4 <HAL_DMA_Start_IT+0x4a0>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d03b      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a71      	ldr	r2, [pc, #452]	; (80051c8 <HAL_DMA_Start_IT+0x4a4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d036      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a70      	ldr	r2, [pc, #448]	; (80051cc <HAL_DMA_Start_IT+0x4a8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d031      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a6e      	ldr	r2, [pc, #440]	; (80051d0 <HAL_DMA_Start_IT+0x4ac>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d02c      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a6d      	ldr	r2, [pc, #436]	; (80051d4 <HAL_DMA_Start_IT+0x4b0>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d027      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a6b      	ldr	r2, [pc, #428]	; (80051d8 <HAL_DMA_Start_IT+0x4b4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d022      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a6a      	ldr	r2, [pc, #424]	; (80051dc <HAL_DMA_Start_IT+0x4b8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d01d      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a68      	ldr	r2, [pc, #416]	; (80051e0 <HAL_DMA_Start_IT+0x4bc>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d018      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a67      	ldr	r2, [pc, #412]	; (80051e4 <HAL_DMA_Start_IT+0x4c0>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d013      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a65      	ldr	r2, [pc, #404]	; (80051e8 <HAL_DMA_Start_IT+0x4c4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00e      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a64      	ldr	r2, [pc, #400]	; (80051ec <HAL_DMA_Start_IT+0x4c8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d009      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a62      	ldr	r2, [pc, #392]	; (80051f0 <HAL_DMA_Start_IT+0x4cc>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d004      	beq.n	8005074 <HAL_DMA_Start_IT+0x350>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a61      	ldr	r2, [pc, #388]	; (80051f4 <HAL_DMA_Start_IT+0x4d0>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d101      	bne.n	8005078 <HAL_DMA_Start_IT+0x354>
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <HAL_DMA_Start_IT+0x356>
 8005078:	2300      	movs	r3, #0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d01a      	beq.n	80050b4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d007      	beq.n	800509c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005096:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800509a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d007      	beq.n	80050b4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050b2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a37      	ldr	r2, [pc, #220]	; (8005198 <HAL_DMA_Start_IT+0x474>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d04a      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a36      	ldr	r2, [pc, #216]	; (800519c <HAL_DMA_Start_IT+0x478>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d045      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a34      	ldr	r2, [pc, #208]	; (80051a0 <HAL_DMA_Start_IT+0x47c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d040      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a33      	ldr	r2, [pc, #204]	; (80051a4 <HAL_DMA_Start_IT+0x480>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d03b      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a31      	ldr	r2, [pc, #196]	; (80051a8 <HAL_DMA_Start_IT+0x484>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d036      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a30      	ldr	r2, [pc, #192]	; (80051ac <HAL_DMA_Start_IT+0x488>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d031      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a2e      	ldr	r2, [pc, #184]	; (80051b0 <HAL_DMA_Start_IT+0x48c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d02c      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a2d      	ldr	r2, [pc, #180]	; (80051b4 <HAL_DMA_Start_IT+0x490>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d027      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a2b      	ldr	r2, [pc, #172]	; (80051b8 <HAL_DMA_Start_IT+0x494>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d022      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a2a      	ldr	r2, [pc, #168]	; (80051bc <HAL_DMA_Start_IT+0x498>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d01d      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a28      	ldr	r2, [pc, #160]	; (80051c0 <HAL_DMA_Start_IT+0x49c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d018      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a27      	ldr	r2, [pc, #156]	; (80051c4 <HAL_DMA_Start_IT+0x4a0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d013      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a25      	ldr	r2, [pc, #148]	; (80051c8 <HAL_DMA_Start_IT+0x4a4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00e      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a24      	ldr	r2, [pc, #144]	; (80051cc <HAL_DMA_Start_IT+0x4a8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d009      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a22      	ldr	r2, [pc, #136]	; (80051d0 <HAL_DMA_Start_IT+0x4ac>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d004      	beq.n	8005154 <HAL_DMA_Start_IT+0x430>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a21      	ldr	r2, [pc, #132]	; (80051d4 <HAL_DMA_Start_IT+0x4b0>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d108      	bne.n	8005166 <HAL_DMA_Start_IT+0x442>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0201 	orr.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	e012      	b.n	800518c <HAL_DMA_Start_IT+0x468>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0201 	orr.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	e009      	b.n	800518c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800517e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800518c:	7dfb      	ldrb	r3, [r7, #23]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	40020010 	.word	0x40020010
 800519c:	40020028 	.word	0x40020028
 80051a0:	40020040 	.word	0x40020040
 80051a4:	40020058 	.word	0x40020058
 80051a8:	40020070 	.word	0x40020070
 80051ac:	40020088 	.word	0x40020088
 80051b0:	400200a0 	.word	0x400200a0
 80051b4:	400200b8 	.word	0x400200b8
 80051b8:	40020410 	.word	0x40020410
 80051bc:	40020428 	.word	0x40020428
 80051c0:	40020440 	.word	0x40020440
 80051c4:	40020458 	.word	0x40020458
 80051c8:	40020470 	.word	0x40020470
 80051cc:	40020488 	.word	0x40020488
 80051d0:	400204a0 	.word	0x400204a0
 80051d4:	400204b8 	.word	0x400204b8
 80051d8:	58025408 	.word	0x58025408
 80051dc:	5802541c 	.word	0x5802541c
 80051e0:	58025430 	.word	0x58025430
 80051e4:	58025444 	.word	0x58025444
 80051e8:	58025458 	.word	0x58025458
 80051ec:	5802546c 	.word	0x5802546c
 80051f0:	58025480 	.word	0x58025480
 80051f4:	58025494 	.word	0x58025494

080051f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005200:	f7fe ff32 	bl	8004068 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e2dc      	b.n	80057ca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d008      	beq.n	800522e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2280      	movs	r2, #128	; 0x80
 8005220:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e2cd      	b.n	80057ca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a76      	ldr	r2, [pc, #472]	; (800540c <HAL_DMA_Abort+0x214>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d04a      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a74      	ldr	r2, [pc, #464]	; (8005410 <HAL_DMA_Abort+0x218>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d045      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a73      	ldr	r2, [pc, #460]	; (8005414 <HAL_DMA_Abort+0x21c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d040      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a71      	ldr	r2, [pc, #452]	; (8005418 <HAL_DMA_Abort+0x220>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d03b      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a70      	ldr	r2, [pc, #448]	; (800541c <HAL_DMA_Abort+0x224>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d036      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a6e      	ldr	r2, [pc, #440]	; (8005420 <HAL_DMA_Abort+0x228>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d031      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a6d      	ldr	r2, [pc, #436]	; (8005424 <HAL_DMA_Abort+0x22c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d02c      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a6b      	ldr	r2, [pc, #428]	; (8005428 <HAL_DMA_Abort+0x230>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d027      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a6a      	ldr	r2, [pc, #424]	; (800542c <HAL_DMA_Abort+0x234>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d022      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a68      	ldr	r2, [pc, #416]	; (8005430 <HAL_DMA_Abort+0x238>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d01d      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a67      	ldr	r2, [pc, #412]	; (8005434 <HAL_DMA_Abort+0x23c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d018      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a65      	ldr	r2, [pc, #404]	; (8005438 <HAL_DMA_Abort+0x240>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d013      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a64      	ldr	r2, [pc, #400]	; (800543c <HAL_DMA_Abort+0x244>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00e      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a62      	ldr	r2, [pc, #392]	; (8005440 <HAL_DMA_Abort+0x248>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d009      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a61      	ldr	r2, [pc, #388]	; (8005444 <HAL_DMA_Abort+0x24c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <HAL_DMA_Abort+0xd6>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a5f      	ldr	r2, [pc, #380]	; (8005448 <HAL_DMA_Abort+0x250>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d101      	bne.n	80052d2 <HAL_DMA_Abort+0xda>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <HAL_DMA_Abort+0xdc>
 80052d2:	2300      	movs	r3, #0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d013      	beq.n	8005300 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 021e 	bic.w	r2, r2, #30
 80052e6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695a      	ldr	r2, [r3, #20]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052f6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	e00a      	b.n	8005316 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 020e 	bic.w	r2, r2, #14
 800530e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a3c      	ldr	r2, [pc, #240]	; (800540c <HAL_DMA_Abort+0x214>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d072      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a3a      	ldr	r2, [pc, #232]	; (8005410 <HAL_DMA_Abort+0x218>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d06d      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a39      	ldr	r2, [pc, #228]	; (8005414 <HAL_DMA_Abort+0x21c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d068      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a37      	ldr	r2, [pc, #220]	; (8005418 <HAL_DMA_Abort+0x220>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d063      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a36      	ldr	r2, [pc, #216]	; (800541c <HAL_DMA_Abort+0x224>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d05e      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a34      	ldr	r2, [pc, #208]	; (8005420 <HAL_DMA_Abort+0x228>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d059      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a33      	ldr	r2, [pc, #204]	; (8005424 <HAL_DMA_Abort+0x22c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d054      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a31      	ldr	r2, [pc, #196]	; (8005428 <HAL_DMA_Abort+0x230>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d04f      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a30      	ldr	r2, [pc, #192]	; (800542c <HAL_DMA_Abort+0x234>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d04a      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a2e      	ldr	r2, [pc, #184]	; (8005430 <HAL_DMA_Abort+0x238>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d045      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a2d      	ldr	r2, [pc, #180]	; (8005434 <HAL_DMA_Abort+0x23c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d040      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a2b      	ldr	r2, [pc, #172]	; (8005438 <HAL_DMA_Abort+0x240>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d03b      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a2a      	ldr	r2, [pc, #168]	; (800543c <HAL_DMA_Abort+0x244>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d036      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a28      	ldr	r2, [pc, #160]	; (8005440 <HAL_DMA_Abort+0x248>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d031      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a27      	ldr	r2, [pc, #156]	; (8005444 <HAL_DMA_Abort+0x24c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d02c      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a25      	ldr	r2, [pc, #148]	; (8005448 <HAL_DMA_Abort+0x250>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d027      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a24      	ldr	r2, [pc, #144]	; (800544c <HAL_DMA_Abort+0x254>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d022      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a22      	ldr	r2, [pc, #136]	; (8005450 <HAL_DMA_Abort+0x258>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d01d      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a21      	ldr	r2, [pc, #132]	; (8005454 <HAL_DMA_Abort+0x25c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d018      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1f      	ldr	r2, [pc, #124]	; (8005458 <HAL_DMA_Abort+0x260>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d013      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1e      	ldr	r2, [pc, #120]	; (800545c <HAL_DMA_Abort+0x264>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00e      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1c      	ldr	r2, [pc, #112]	; (8005460 <HAL_DMA_Abort+0x268>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d009      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1b      	ldr	r2, [pc, #108]	; (8005464 <HAL_DMA_Abort+0x26c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d004      	beq.n	8005406 <HAL_DMA_Abort+0x20e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a19      	ldr	r2, [pc, #100]	; (8005468 <HAL_DMA_Abort+0x270>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d132      	bne.n	800546c <HAL_DMA_Abort+0x274>
 8005406:	2301      	movs	r3, #1
 8005408:	e031      	b.n	800546e <HAL_DMA_Abort+0x276>
 800540a:	bf00      	nop
 800540c:	40020010 	.word	0x40020010
 8005410:	40020028 	.word	0x40020028
 8005414:	40020040 	.word	0x40020040
 8005418:	40020058 	.word	0x40020058
 800541c:	40020070 	.word	0x40020070
 8005420:	40020088 	.word	0x40020088
 8005424:	400200a0 	.word	0x400200a0
 8005428:	400200b8 	.word	0x400200b8
 800542c:	40020410 	.word	0x40020410
 8005430:	40020428 	.word	0x40020428
 8005434:	40020440 	.word	0x40020440
 8005438:	40020458 	.word	0x40020458
 800543c:	40020470 	.word	0x40020470
 8005440:	40020488 	.word	0x40020488
 8005444:	400204a0 	.word	0x400204a0
 8005448:	400204b8 	.word	0x400204b8
 800544c:	58025408 	.word	0x58025408
 8005450:	5802541c 	.word	0x5802541c
 8005454:	58025430 	.word	0x58025430
 8005458:	58025444 	.word	0x58025444
 800545c:	58025458 	.word	0x58025458
 8005460:	5802546c 	.word	0x5802546c
 8005464:	58025480 	.word	0x58025480
 8005468:	58025494 	.word	0x58025494
 800546c:	2300      	movs	r3, #0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d007      	beq.n	8005482 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005480:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a6d      	ldr	r2, [pc, #436]	; (800563c <HAL_DMA_Abort+0x444>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d04a      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a6b      	ldr	r2, [pc, #428]	; (8005640 <HAL_DMA_Abort+0x448>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d045      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a6a      	ldr	r2, [pc, #424]	; (8005644 <HAL_DMA_Abort+0x44c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d040      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a68      	ldr	r2, [pc, #416]	; (8005648 <HAL_DMA_Abort+0x450>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d03b      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a67      	ldr	r2, [pc, #412]	; (800564c <HAL_DMA_Abort+0x454>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d036      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a65      	ldr	r2, [pc, #404]	; (8005650 <HAL_DMA_Abort+0x458>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d031      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a64      	ldr	r2, [pc, #400]	; (8005654 <HAL_DMA_Abort+0x45c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d02c      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a62      	ldr	r2, [pc, #392]	; (8005658 <HAL_DMA_Abort+0x460>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d027      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a61      	ldr	r2, [pc, #388]	; (800565c <HAL_DMA_Abort+0x464>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d022      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a5f      	ldr	r2, [pc, #380]	; (8005660 <HAL_DMA_Abort+0x468>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d01d      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a5e      	ldr	r2, [pc, #376]	; (8005664 <HAL_DMA_Abort+0x46c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d018      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a5c      	ldr	r2, [pc, #368]	; (8005668 <HAL_DMA_Abort+0x470>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a5b      	ldr	r2, [pc, #364]	; (800566c <HAL_DMA_Abort+0x474>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00e      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a59      	ldr	r2, [pc, #356]	; (8005670 <HAL_DMA_Abort+0x478>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d009      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a58      	ldr	r2, [pc, #352]	; (8005674 <HAL_DMA_Abort+0x47c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d004      	beq.n	8005522 <HAL_DMA_Abort+0x32a>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a56      	ldr	r2, [pc, #344]	; (8005678 <HAL_DMA_Abort+0x480>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d108      	bne.n	8005534 <HAL_DMA_Abort+0x33c>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0201 	bic.w	r2, r2, #1
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	e007      	b.n	8005544 <HAL_DMA_Abort+0x34c>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0201 	bic.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005544:	e013      	b.n	800556e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005546:	f7fe fd8f 	bl	8004068 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b05      	cmp	r3, #5
 8005552:	d90c      	bls.n	800556e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2220      	movs	r2, #32
 8005558:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2203      	movs	r2, #3
 800555e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e12d      	b.n	80057ca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e5      	bne.n	8005546 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a2f      	ldr	r2, [pc, #188]	; (800563c <HAL_DMA_Abort+0x444>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d04a      	beq.n	800561a <HAL_DMA_Abort+0x422>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a2d      	ldr	r2, [pc, #180]	; (8005640 <HAL_DMA_Abort+0x448>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d045      	beq.n	800561a <HAL_DMA_Abort+0x422>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a2c      	ldr	r2, [pc, #176]	; (8005644 <HAL_DMA_Abort+0x44c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d040      	beq.n	800561a <HAL_DMA_Abort+0x422>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a2a      	ldr	r2, [pc, #168]	; (8005648 <HAL_DMA_Abort+0x450>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d03b      	beq.n	800561a <HAL_DMA_Abort+0x422>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a29      	ldr	r2, [pc, #164]	; (800564c <HAL_DMA_Abort+0x454>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d036      	beq.n	800561a <HAL_DMA_Abort+0x422>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a27      	ldr	r2, [pc, #156]	; (8005650 <HAL_DMA_Abort+0x458>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d031      	beq.n	800561a <HAL_DMA_Abort+0x422>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a26      	ldr	r2, [pc, #152]	; (8005654 <HAL_DMA_Abort+0x45c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d02c      	beq.n	800561a <HAL_DMA_Abort+0x422>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a24      	ldr	r2, [pc, #144]	; (8005658 <HAL_DMA_Abort+0x460>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d027      	beq.n	800561a <HAL_DMA_Abort+0x422>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a23      	ldr	r2, [pc, #140]	; (800565c <HAL_DMA_Abort+0x464>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d022      	beq.n	800561a <HAL_DMA_Abort+0x422>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a21      	ldr	r2, [pc, #132]	; (8005660 <HAL_DMA_Abort+0x468>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d01d      	beq.n	800561a <HAL_DMA_Abort+0x422>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a20      	ldr	r2, [pc, #128]	; (8005664 <HAL_DMA_Abort+0x46c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d018      	beq.n	800561a <HAL_DMA_Abort+0x422>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a1e      	ldr	r2, [pc, #120]	; (8005668 <HAL_DMA_Abort+0x470>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d013      	beq.n	800561a <HAL_DMA_Abort+0x422>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1d      	ldr	r2, [pc, #116]	; (800566c <HAL_DMA_Abort+0x474>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d00e      	beq.n	800561a <HAL_DMA_Abort+0x422>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a1b      	ldr	r2, [pc, #108]	; (8005670 <HAL_DMA_Abort+0x478>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d009      	beq.n	800561a <HAL_DMA_Abort+0x422>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a1a      	ldr	r2, [pc, #104]	; (8005674 <HAL_DMA_Abort+0x47c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d004      	beq.n	800561a <HAL_DMA_Abort+0x422>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a18      	ldr	r2, [pc, #96]	; (8005678 <HAL_DMA_Abort+0x480>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d101      	bne.n	800561e <HAL_DMA_Abort+0x426>
 800561a:	2301      	movs	r3, #1
 800561c:	e000      	b.n	8005620 <HAL_DMA_Abort+0x428>
 800561e:	2300      	movs	r3, #0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d02b      	beq.n	800567c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005628:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800562e:	f003 031f 	and.w	r3, r3, #31
 8005632:	223f      	movs	r2, #63	; 0x3f
 8005634:	409a      	lsls	r2, r3
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	609a      	str	r2, [r3, #8]
 800563a:	e02a      	b.n	8005692 <HAL_DMA_Abort+0x49a>
 800563c:	40020010 	.word	0x40020010
 8005640:	40020028 	.word	0x40020028
 8005644:	40020040 	.word	0x40020040
 8005648:	40020058 	.word	0x40020058
 800564c:	40020070 	.word	0x40020070
 8005650:	40020088 	.word	0x40020088
 8005654:	400200a0 	.word	0x400200a0
 8005658:	400200b8 	.word	0x400200b8
 800565c:	40020410 	.word	0x40020410
 8005660:	40020428 	.word	0x40020428
 8005664:	40020440 	.word	0x40020440
 8005668:	40020458 	.word	0x40020458
 800566c:	40020470 	.word	0x40020470
 8005670:	40020488 	.word	0x40020488
 8005674:	400204a0 	.word	0x400204a0
 8005678:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005680:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005686:	f003 031f 	and.w	r3, r3, #31
 800568a:	2201      	movs	r2, #1
 800568c:	409a      	lsls	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a4f      	ldr	r2, [pc, #316]	; (80057d4 <HAL_DMA_Abort+0x5dc>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d072      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a4d      	ldr	r2, [pc, #308]	; (80057d8 <HAL_DMA_Abort+0x5e0>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d06d      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a4c      	ldr	r2, [pc, #304]	; (80057dc <HAL_DMA_Abort+0x5e4>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d068      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a4a      	ldr	r2, [pc, #296]	; (80057e0 <HAL_DMA_Abort+0x5e8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d063      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a49      	ldr	r2, [pc, #292]	; (80057e4 <HAL_DMA_Abort+0x5ec>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d05e      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a47      	ldr	r2, [pc, #284]	; (80057e8 <HAL_DMA_Abort+0x5f0>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d059      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a46      	ldr	r2, [pc, #280]	; (80057ec <HAL_DMA_Abort+0x5f4>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d054      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a44      	ldr	r2, [pc, #272]	; (80057f0 <HAL_DMA_Abort+0x5f8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d04f      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a43      	ldr	r2, [pc, #268]	; (80057f4 <HAL_DMA_Abort+0x5fc>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d04a      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a41      	ldr	r2, [pc, #260]	; (80057f8 <HAL_DMA_Abort+0x600>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d045      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a40      	ldr	r2, [pc, #256]	; (80057fc <HAL_DMA_Abort+0x604>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d040      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a3e      	ldr	r2, [pc, #248]	; (8005800 <HAL_DMA_Abort+0x608>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d03b      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a3d      	ldr	r2, [pc, #244]	; (8005804 <HAL_DMA_Abort+0x60c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d036      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a3b      	ldr	r2, [pc, #236]	; (8005808 <HAL_DMA_Abort+0x610>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d031      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a3a      	ldr	r2, [pc, #232]	; (800580c <HAL_DMA_Abort+0x614>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d02c      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a38      	ldr	r2, [pc, #224]	; (8005810 <HAL_DMA_Abort+0x618>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d027      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a37      	ldr	r2, [pc, #220]	; (8005814 <HAL_DMA_Abort+0x61c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d022      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a35      	ldr	r2, [pc, #212]	; (8005818 <HAL_DMA_Abort+0x620>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d01d      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a34      	ldr	r2, [pc, #208]	; (800581c <HAL_DMA_Abort+0x624>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d018      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a32      	ldr	r2, [pc, #200]	; (8005820 <HAL_DMA_Abort+0x628>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d013      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a31      	ldr	r2, [pc, #196]	; (8005824 <HAL_DMA_Abort+0x62c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00e      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a2f      	ldr	r2, [pc, #188]	; (8005828 <HAL_DMA_Abort+0x630>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d009      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a2e      	ldr	r2, [pc, #184]	; (800582c <HAL_DMA_Abort+0x634>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d004      	beq.n	8005782 <HAL_DMA_Abort+0x58a>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a2c      	ldr	r2, [pc, #176]	; (8005830 <HAL_DMA_Abort+0x638>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d101      	bne.n	8005786 <HAL_DMA_Abort+0x58e>
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <HAL_DMA_Abort+0x590>
 8005786:	2300      	movs	r3, #0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d015      	beq.n	80057b8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005794:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00c      	beq.n	80057b8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057ac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057b6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40020010 	.word	0x40020010
 80057d8:	40020028 	.word	0x40020028
 80057dc:	40020040 	.word	0x40020040
 80057e0:	40020058 	.word	0x40020058
 80057e4:	40020070 	.word	0x40020070
 80057e8:	40020088 	.word	0x40020088
 80057ec:	400200a0 	.word	0x400200a0
 80057f0:	400200b8 	.word	0x400200b8
 80057f4:	40020410 	.word	0x40020410
 80057f8:	40020428 	.word	0x40020428
 80057fc:	40020440 	.word	0x40020440
 8005800:	40020458 	.word	0x40020458
 8005804:	40020470 	.word	0x40020470
 8005808:	40020488 	.word	0x40020488
 800580c:	400204a0 	.word	0x400204a0
 8005810:	400204b8 	.word	0x400204b8
 8005814:	58025408 	.word	0x58025408
 8005818:	5802541c 	.word	0x5802541c
 800581c:	58025430 	.word	0x58025430
 8005820:	58025444 	.word	0x58025444
 8005824:	58025458 	.word	0x58025458
 8005828:	5802546c 	.word	0x5802546c
 800582c:	58025480 	.word	0x58025480
 8005830:	58025494 	.word	0x58025494

08005834 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e237      	b.n	8005cb6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d004      	beq.n	800585c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2280      	movs	r2, #128	; 0x80
 8005856:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e22c      	b.n	8005cb6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a5c      	ldr	r2, [pc, #368]	; (80059d4 <HAL_DMA_Abort_IT+0x1a0>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d04a      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a5b      	ldr	r2, [pc, #364]	; (80059d8 <HAL_DMA_Abort_IT+0x1a4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d045      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a59      	ldr	r2, [pc, #356]	; (80059dc <HAL_DMA_Abort_IT+0x1a8>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d040      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a58      	ldr	r2, [pc, #352]	; (80059e0 <HAL_DMA_Abort_IT+0x1ac>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d03b      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a56      	ldr	r2, [pc, #344]	; (80059e4 <HAL_DMA_Abort_IT+0x1b0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d036      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a55      	ldr	r2, [pc, #340]	; (80059e8 <HAL_DMA_Abort_IT+0x1b4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d031      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a53      	ldr	r2, [pc, #332]	; (80059ec <HAL_DMA_Abort_IT+0x1b8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d02c      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a52      	ldr	r2, [pc, #328]	; (80059f0 <HAL_DMA_Abort_IT+0x1bc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d027      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a50      	ldr	r2, [pc, #320]	; (80059f4 <HAL_DMA_Abort_IT+0x1c0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d022      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a4f      	ldr	r2, [pc, #316]	; (80059f8 <HAL_DMA_Abort_IT+0x1c4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d01d      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a4d      	ldr	r2, [pc, #308]	; (80059fc <HAL_DMA_Abort_IT+0x1c8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d018      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a4c      	ldr	r2, [pc, #304]	; (8005a00 <HAL_DMA_Abort_IT+0x1cc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d013      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a4a      	ldr	r2, [pc, #296]	; (8005a04 <HAL_DMA_Abort_IT+0x1d0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d00e      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a49      	ldr	r2, [pc, #292]	; (8005a08 <HAL_DMA_Abort_IT+0x1d4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d009      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a47      	ldr	r2, [pc, #284]	; (8005a0c <HAL_DMA_Abort_IT+0x1d8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d004      	beq.n	80058fc <HAL_DMA_Abort_IT+0xc8>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a46      	ldr	r2, [pc, #280]	; (8005a10 <HAL_DMA_Abort_IT+0x1dc>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d101      	bne.n	8005900 <HAL_DMA_Abort_IT+0xcc>
 80058fc:	2301      	movs	r3, #1
 80058fe:	e000      	b.n	8005902 <HAL_DMA_Abort_IT+0xce>
 8005900:	2300      	movs	r3, #0
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 8086 	beq.w	8005a14 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2204      	movs	r2, #4
 800590c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a2f      	ldr	r2, [pc, #188]	; (80059d4 <HAL_DMA_Abort_IT+0x1a0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d04a      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a2e      	ldr	r2, [pc, #184]	; (80059d8 <HAL_DMA_Abort_IT+0x1a4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d045      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a2c      	ldr	r2, [pc, #176]	; (80059dc <HAL_DMA_Abort_IT+0x1a8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d040      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a2b      	ldr	r2, [pc, #172]	; (80059e0 <HAL_DMA_Abort_IT+0x1ac>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d03b      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a29      	ldr	r2, [pc, #164]	; (80059e4 <HAL_DMA_Abort_IT+0x1b0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d036      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a28      	ldr	r2, [pc, #160]	; (80059e8 <HAL_DMA_Abort_IT+0x1b4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d031      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a26      	ldr	r2, [pc, #152]	; (80059ec <HAL_DMA_Abort_IT+0x1b8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d02c      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a25      	ldr	r2, [pc, #148]	; (80059f0 <HAL_DMA_Abort_IT+0x1bc>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d027      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a23      	ldr	r2, [pc, #140]	; (80059f4 <HAL_DMA_Abort_IT+0x1c0>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d022      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a22      	ldr	r2, [pc, #136]	; (80059f8 <HAL_DMA_Abort_IT+0x1c4>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d01d      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a20      	ldr	r2, [pc, #128]	; (80059fc <HAL_DMA_Abort_IT+0x1c8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d018      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1f      	ldr	r2, [pc, #124]	; (8005a00 <HAL_DMA_Abort_IT+0x1cc>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d013      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1d      	ldr	r2, [pc, #116]	; (8005a04 <HAL_DMA_Abort_IT+0x1d0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00e      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1c      	ldr	r2, [pc, #112]	; (8005a08 <HAL_DMA_Abort_IT+0x1d4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d009      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1a      	ldr	r2, [pc, #104]	; (8005a0c <HAL_DMA_Abort_IT+0x1d8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x17c>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a19      	ldr	r2, [pc, #100]	; (8005a10 <HAL_DMA_Abort_IT+0x1dc>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d108      	bne.n	80059c2 <HAL_DMA_Abort_IT+0x18e>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0201 	bic.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	e178      	b.n	8005cb4 <HAL_DMA_Abort_IT+0x480>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0201 	bic.w	r2, r2, #1
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	e16f      	b.n	8005cb4 <HAL_DMA_Abort_IT+0x480>
 80059d4:	40020010 	.word	0x40020010
 80059d8:	40020028 	.word	0x40020028
 80059dc:	40020040 	.word	0x40020040
 80059e0:	40020058 	.word	0x40020058
 80059e4:	40020070 	.word	0x40020070
 80059e8:	40020088 	.word	0x40020088
 80059ec:	400200a0 	.word	0x400200a0
 80059f0:	400200b8 	.word	0x400200b8
 80059f4:	40020410 	.word	0x40020410
 80059f8:	40020428 	.word	0x40020428
 80059fc:	40020440 	.word	0x40020440
 8005a00:	40020458 	.word	0x40020458
 8005a04:	40020470 	.word	0x40020470
 8005a08:	40020488 	.word	0x40020488
 8005a0c:	400204a0 	.word	0x400204a0
 8005a10:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 020e 	bic.w	r2, r2, #14
 8005a22:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a6c      	ldr	r2, [pc, #432]	; (8005bdc <HAL_DMA_Abort_IT+0x3a8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d04a      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a6b      	ldr	r2, [pc, #428]	; (8005be0 <HAL_DMA_Abort_IT+0x3ac>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d045      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a69      	ldr	r2, [pc, #420]	; (8005be4 <HAL_DMA_Abort_IT+0x3b0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d040      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a68      	ldr	r2, [pc, #416]	; (8005be8 <HAL_DMA_Abort_IT+0x3b4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d03b      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a66      	ldr	r2, [pc, #408]	; (8005bec <HAL_DMA_Abort_IT+0x3b8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d036      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a65      	ldr	r2, [pc, #404]	; (8005bf0 <HAL_DMA_Abort_IT+0x3bc>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d031      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a63      	ldr	r2, [pc, #396]	; (8005bf4 <HAL_DMA_Abort_IT+0x3c0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d02c      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a62      	ldr	r2, [pc, #392]	; (8005bf8 <HAL_DMA_Abort_IT+0x3c4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d027      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a60      	ldr	r2, [pc, #384]	; (8005bfc <HAL_DMA_Abort_IT+0x3c8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d022      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a5f      	ldr	r2, [pc, #380]	; (8005c00 <HAL_DMA_Abort_IT+0x3cc>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d01d      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a5d      	ldr	r2, [pc, #372]	; (8005c04 <HAL_DMA_Abort_IT+0x3d0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d018      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a5c      	ldr	r2, [pc, #368]	; (8005c08 <HAL_DMA_Abort_IT+0x3d4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d013      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a5a      	ldr	r2, [pc, #360]	; (8005c0c <HAL_DMA_Abort_IT+0x3d8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00e      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a59      	ldr	r2, [pc, #356]	; (8005c10 <HAL_DMA_Abort_IT+0x3dc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d009      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a57      	ldr	r2, [pc, #348]	; (8005c14 <HAL_DMA_Abort_IT+0x3e0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d004      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0x290>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a56      	ldr	r2, [pc, #344]	; (8005c18 <HAL_DMA_Abort_IT+0x3e4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d108      	bne.n	8005ad6 <HAL_DMA_Abort_IT+0x2a2>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0201 	bic.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	e007      	b.n	8005ae6 <HAL_DMA_Abort_IT+0x2b2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0201 	bic.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a3c      	ldr	r2, [pc, #240]	; (8005bdc <HAL_DMA_Abort_IT+0x3a8>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d072      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a3a      	ldr	r2, [pc, #232]	; (8005be0 <HAL_DMA_Abort_IT+0x3ac>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d06d      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a39      	ldr	r2, [pc, #228]	; (8005be4 <HAL_DMA_Abort_IT+0x3b0>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d068      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a37      	ldr	r2, [pc, #220]	; (8005be8 <HAL_DMA_Abort_IT+0x3b4>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d063      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a36      	ldr	r2, [pc, #216]	; (8005bec <HAL_DMA_Abort_IT+0x3b8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d05e      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a34      	ldr	r2, [pc, #208]	; (8005bf0 <HAL_DMA_Abort_IT+0x3bc>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d059      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a33      	ldr	r2, [pc, #204]	; (8005bf4 <HAL_DMA_Abort_IT+0x3c0>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d054      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a31      	ldr	r2, [pc, #196]	; (8005bf8 <HAL_DMA_Abort_IT+0x3c4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d04f      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a30      	ldr	r2, [pc, #192]	; (8005bfc <HAL_DMA_Abort_IT+0x3c8>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d04a      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a2e      	ldr	r2, [pc, #184]	; (8005c00 <HAL_DMA_Abort_IT+0x3cc>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d045      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a2d      	ldr	r2, [pc, #180]	; (8005c04 <HAL_DMA_Abort_IT+0x3d0>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d040      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a2b      	ldr	r2, [pc, #172]	; (8005c08 <HAL_DMA_Abort_IT+0x3d4>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d03b      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a2a      	ldr	r2, [pc, #168]	; (8005c0c <HAL_DMA_Abort_IT+0x3d8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d036      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a28      	ldr	r2, [pc, #160]	; (8005c10 <HAL_DMA_Abort_IT+0x3dc>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d031      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a27      	ldr	r2, [pc, #156]	; (8005c14 <HAL_DMA_Abort_IT+0x3e0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d02c      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a25      	ldr	r2, [pc, #148]	; (8005c18 <HAL_DMA_Abort_IT+0x3e4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d027      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a24      	ldr	r2, [pc, #144]	; (8005c1c <HAL_DMA_Abort_IT+0x3e8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d022      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a22      	ldr	r2, [pc, #136]	; (8005c20 <HAL_DMA_Abort_IT+0x3ec>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d01d      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a21      	ldr	r2, [pc, #132]	; (8005c24 <HAL_DMA_Abort_IT+0x3f0>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d018      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a1f      	ldr	r2, [pc, #124]	; (8005c28 <HAL_DMA_Abort_IT+0x3f4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d013      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a1e      	ldr	r2, [pc, #120]	; (8005c2c <HAL_DMA_Abort_IT+0x3f8>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00e      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a1c      	ldr	r2, [pc, #112]	; (8005c30 <HAL_DMA_Abort_IT+0x3fc>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d009      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a1b      	ldr	r2, [pc, #108]	; (8005c34 <HAL_DMA_Abort_IT+0x400>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d004      	beq.n	8005bd6 <HAL_DMA_Abort_IT+0x3a2>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a19      	ldr	r2, [pc, #100]	; (8005c38 <HAL_DMA_Abort_IT+0x404>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d132      	bne.n	8005c3c <HAL_DMA_Abort_IT+0x408>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e031      	b.n	8005c3e <HAL_DMA_Abort_IT+0x40a>
 8005bda:	bf00      	nop
 8005bdc:	40020010 	.word	0x40020010
 8005be0:	40020028 	.word	0x40020028
 8005be4:	40020040 	.word	0x40020040
 8005be8:	40020058 	.word	0x40020058
 8005bec:	40020070 	.word	0x40020070
 8005bf0:	40020088 	.word	0x40020088
 8005bf4:	400200a0 	.word	0x400200a0
 8005bf8:	400200b8 	.word	0x400200b8
 8005bfc:	40020410 	.word	0x40020410
 8005c00:	40020428 	.word	0x40020428
 8005c04:	40020440 	.word	0x40020440
 8005c08:	40020458 	.word	0x40020458
 8005c0c:	40020470 	.word	0x40020470
 8005c10:	40020488 	.word	0x40020488
 8005c14:	400204a0 	.word	0x400204a0
 8005c18:	400204b8 	.word	0x400204b8
 8005c1c:	58025408 	.word	0x58025408
 8005c20:	5802541c 	.word	0x5802541c
 8005c24:	58025430 	.word	0x58025430
 8005c28:	58025444 	.word	0x58025444
 8005c2c:	58025458 	.word	0x58025458
 8005c30:	5802546c 	.word	0x5802546c
 8005c34:	58025480 	.word	0x58025480
 8005c38:	58025494 	.word	0x58025494
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d028      	beq.n	8005c94 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c50:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c56:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c5c:	f003 031f 	and.w	r3, r3, #31
 8005c60:	2201      	movs	r2, #1
 8005c62:	409a      	lsls	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c70:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00c      	beq.n	8005c94 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c88:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c92:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop

08005cc0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08a      	sub	sp, #40	; 0x28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ccc:	4b67      	ldr	r3, [pc, #412]	; (8005e6c <HAL_DMA_IRQHandler+0x1ac>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a67      	ldr	r2, [pc, #412]	; (8005e70 <HAL_DMA_IRQHandler+0x1b0>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	0a9b      	lsrs	r3, r3, #10
 8005cd8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cde:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a5f      	ldr	r2, [pc, #380]	; (8005e74 <HAL_DMA_IRQHandler+0x1b4>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d04a      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a5d      	ldr	r2, [pc, #372]	; (8005e78 <HAL_DMA_IRQHandler+0x1b8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d045      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a5c      	ldr	r2, [pc, #368]	; (8005e7c <HAL_DMA_IRQHandler+0x1bc>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d040      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a5a      	ldr	r2, [pc, #360]	; (8005e80 <HAL_DMA_IRQHandler+0x1c0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d03b      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a59      	ldr	r2, [pc, #356]	; (8005e84 <HAL_DMA_IRQHandler+0x1c4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d036      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a57      	ldr	r2, [pc, #348]	; (8005e88 <HAL_DMA_IRQHandler+0x1c8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d031      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a56      	ldr	r2, [pc, #344]	; (8005e8c <HAL_DMA_IRQHandler+0x1cc>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d02c      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a54      	ldr	r2, [pc, #336]	; (8005e90 <HAL_DMA_IRQHandler+0x1d0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d027      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a53      	ldr	r2, [pc, #332]	; (8005e94 <HAL_DMA_IRQHandler+0x1d4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d022      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a51      	ldr	r2, [pc, #324]	; (8005e98 <HAL_DMA_IRQHandler+0x1d8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d01d      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a50      	ldr	r2, [pc, #320]	; (8005e9c <HAL_DMA_IRQHandler+0x1dc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d018      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a4e      	ldr	r2, [pc, #312]	; (8005ea0 <HAL_DMA_IRQHandler+0x1e0>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d013      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a4d      	ldr	r2, [pc, #308]	; (8005ea4 <HAL_DMA_IRQHandler+0x1e4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00e      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a4b      	ldr	r2, [pc, #300]	; (8005ea8 <HAL_DMA_IRQHandler+0x1e8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d009      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a4a      	ldr	r2, [pc, #296]	; (8005eac <HAL_DMA_IRQHandler+0x1ec>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d004      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xd2>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a48      	ldr	r2, [pc, #288]	; (8005eb0 <HAL_DMA_IRQHandler+0x1f0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d101      	bne.n	8005d96 <HAL_DMA_IRQHandler+0xd6>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <HAL_DMA_IRQHandler+0xd8>
 8005d96:	2300      	movs	r3, #0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 842b 	beq.w	80065f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	2208      	movs	r2, #8
 8005da8:	409a      	lsls	r2, r3
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	4013      	ands	r3, r2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 80a2 	beq.w	8005ef8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a2e      	ldr	r2, [pc, #184]	; (8005e74 <HAL_DMA_IRQHandler+0x1b4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d04a      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a2d      	ldr	r2, [pc, #180]	; (8005e78 <HAL_DMA_IRQHandler+0x1b8>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d045      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a2b      	ldr	r2, [pc, #172]	; (8005e7c <HAL_DMA_IRQHandler+0x1bc>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d040      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a2a      	ldr	r2, [pc, #168]	; (8005e80 <HAL_DMA_IRQHandler+0x1c0>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d03b      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a28      	ldr	r2, [pc, #160]	; (8005e84 <HAL_DMA_IRQHandler+0x1c4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d036      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a27      	ldr	r2, [pc, #156]	; (8005e88 <HAL_DMA_IRQHandler+0x1c8>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d031      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a25      	ldr	r2, [pc, #148]	; (8005e8c <HAL_DMA_IRQHandler+0x1cc>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d02c      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a24      	ldr	r2, [pc, #144]	; (8005e90 <HAL_DMA_IRQHandler+0x1d0>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d027      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a22      	ldr	r2, [pc, #136]	; (8005e94 <HAL_DMA_IRQHandler+0x1d4>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d022      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a21      	ldr	r2, [pc, #132]	; (8005e98 <HAL_DMA_IRQHandler+0x1d8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d01d      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1f      	ldr	r2, [pc, #124]	; (8005e9c <HAL_DMA_IRQHandler+0x1dc>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d018      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a1e      	ldr	r2, [pc, #120]	; (8005ea0 <HAL_DMA_IRQHandler+0x1e0>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d013      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a1c      	ldr	r2, [pc, #112]	; (8005ea4 <HAL_DMA_IRQHandler+0x1e4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d00e      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a1b      	ldr	r2, [pc, #108]	; (8005ea8 <HAL_DMA_IRQHandler+0x1e8>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d009      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a19      	ldr	r2, [pc, #100]	; (8005eac <HAL_DMA_IRQHandler+0x1ec>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d004      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x194>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a18      	ldr	r2, [pc, #96]	; (8005eb0 <HAL_DMA_IRQHandler+0x1f0>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d12f      	bne.n	8005eb4 <HAL_DMA_IRQHandler+0x1f4>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	bf14      	ite	ne
 8005e62:	2301      	movne	r3, #1
 8005e64:	2300      	moveq	r3, #0
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	e02e      	b.n	8005ec8 <HAL_DMA_IRQHandler+0x208>
 8005e6a:	bf00      	nop
 8005e6c:	24000000 	.word	0x24000000
 8005e70:	1b4e81b5 	.word	0x1b4e81b5
 8005e74:	40020010 	.word	0x40020010
 8005e78:	40020028 	.word	0x40020028
 8005e7c:	40020040 	.word	0x40020040
 8005e80:	40020058 	.word	0x40020058
 8005e84:	40020070 	.word	0x40020070
 8005e88:	40020088 	.word	0x40020088
 8005e8c:	400200a0 	.word	0x400200a0
 8005e90:	400200b8 	.word	0x400200b8
 8005e94:	40020410 	.word	0x40020410
 8005e98:	40020428 	.word	0x40020428
 8005e9c:	40020440 	.word	0x40020440
 8005ea0:	40020458 	.word	0x40020458
 8005ea4:	40020470 	.word	0x40020470
 8005ea8:	40020488 	.word	0x40020488
 8005eac:	400204a0 	.word	0x400204a0
 8005eb0:	400204b8 	.word	0x400204b8
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0308 	and.w	r3, r3, #8
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	bf14      	ite	ne
 8005ec2:	2301      	movne	r3, #1
 8005ec4:	2300      	moveq	r3, #0
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d015      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0204 	bic.w	r2, r2, #4
 8005eda:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee0:	f003 031f 	and.w	r3, r3, #31
 8005ee4:	2208      	movs	r2, #8
 8005ee6:	409a      	lsls	r2, r3
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef0:	f043 0201 	orr.w	r2, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efc:	f003 031f 	and.w	r3, r3, #31
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	fa22 f303 	lsr.w	r3, r2, r3
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d06e      	beq.n	8005fec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a69      	ldr	r2, [pc, #420]	; (80060b8 <HAL_DMA_IRQHandler+0x3f8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d04a      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a67      	ldr	r2, [pc, #412]	; (80060bc <HAL_DMA_IRQHandler+0x3fc>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d045      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a66      	ldr	r2, [pc, #408]	; (80060c0 <HAL_DMA_IRQHandler+0x400>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d040      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a64      	ldr	r2, [pc, #400]	; (80060c4 <HAL_DMA_IRQHandler+0x404>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d03b      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a63      	ldr	r2, [pc, #396]	; (80060c8 <HAL_DMA_IRQHandler+0x408>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d036      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a61      	ldr	r2, [pc, #388]	; (80060cc <HAL_DMA_IRQHandler+0x40c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d031      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a60      	ldr	r2, [pc, #384]	; (80060d0 <HAL_DMA_IRQHandler+0x410>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d02c      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a5e      	ldr	r2, [pc, #376]	; (80060d4 <HAL_DMA_IRQHandler+0x414>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d027      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a5d      	ldr	r2, [pc, #372]	; (80060d8 <HAL_DMA_IRQHandler+0x418>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d022      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a5b      	ldr	r2, [pc, #364]	; (80060dc <HAL_DMA_IRQHandler+0x41c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d01d      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a5a      	ldr	r2, [pc, #360]	; (80060e0 <HAL_DMA_IRQHandler+0x420>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d018      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a58      	ldr	r2, [pc, #352]	; (80060e4 <HAL_DMA_IRQHandler+0x424>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d013      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a57      	ldr	r2, [pc, #348]	; (80060e8 <HAL_DMA_IRQHandler+0x428>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d00e      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a55      	ldr	r2, [pc, #340]	; (80060ec <HAL_DMA_IRQHandler+0x42c>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d009      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a54      	ldr	r2, [pc, #336]	; (80060f0 <HAL_DMA_IRQHandler+0x430>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d004      	beq.n	8005fae <HAL_DMA_IRQHandler+0x2ee>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a52      	ldr	r2, [pc, #328]	; (80060f4 <HAL_DMA_IRQHandler+0x434>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d10a      	bne.n	8005fc4 <HAL_DMA_IRQHandler+0x304>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	bf14      	ite	ne
 8005fbc:	2301      	movne	r3, #1
 8005fbe:	2300      	moveq	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	e003      	b.n	8005fcc <HAL_DMA_IRQHandler+0x30c>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00d      	beq.n	8005fec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd4:	f003 031f 	and.w	r3, r3, #31
 8005fd8:	2201      	movs	r2, #1
 8005fda:	409a      	lsls	r2, r3
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe4:	f043 0202 	orr.w	r2, r3, #2
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff0:	f003 031f 	and.w	r3, r3, #31
 8005ff4:	2204      	movs	r2, #4
 8005ff6:	409a      	lsls	r2, r3
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 808f 	beq.w	8006120 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a2c      	ldr	r2, [pc, #176]	; (80060b8 <HAL_DMA_IRQHandler+0x3f8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d04a      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a2a      	ldr	r2, [pc, #168]	; (80060bc <HAL_DMA_IRQHandler+0x3fc>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d045      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a29      	ldr	r2, [pc, #164]	; (80060c0 <HAL_DMA_IRQHandler+0x400>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d040      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a27      	ldr	r2, [pc, #156]	; (80060c4 <HAL_DMA_IRQHandler+0x404>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d03b      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a26      	ldr	r2, [pc, #152]	; (80060c8 <HAL_DMA_IRQHandler+0x408>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d036      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a24      	ldr	r2, [pc, #144]	; (80060cc <HAL_DMA_IRQHandler+0x40c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d031      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a23      	ldr	r2, [pc, #140]	; (80060d0 <HAL_DMA_IRQHandler+0x410>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d02c      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a21      	ldr	r2, [pc, #132]	; (80060d4 <HAL_DMA_IRQHandler+0x414>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d027      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a20      	ldr	r2, [pc, #128]	; (80060d8 <HAL_DMA_IRQHandler+0x418>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d022      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a1e      	ldr	r2, [pc, #120]	; (80060dc <HAL_DMA_IRQHandler+0x41c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d01d      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a1d      	ldr	r2, [pc, #116]	; (80060e0 <HAL_DMA_IRQHandler+0x420>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d018      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a1b      	ldr	r2, [pc, #108]	; (80060e4 <HAL_DMA_IRQHandler+0x424>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d013      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1a      	ldr	r2, [pc, #104]	; (80060e8 <HAL_DMA_IRQHandler+0x428>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d00e      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a18      	ldr	r2, [pc, #96]	; (80060ec <HAL_DMA_IRQHandler+0x42c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d009      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a17      	ldr	r2, [pc, #92]	; (80060f0 <HAL_DMA_IRQHandler+0x430>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d004      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x3e2>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a15      	ldr	r2, [pc, #84]	; (80060f4 <HAL_DMA_IRQHandler+0x434>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d12a      	bne.n	80060f8 <HAL_DMA_IRQHandler+0x438>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	bf14      	ite	ne
 80060b0:	2301      	movne	r3, #1
 80060b2:	2300      	moveq	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	e023      	b.n	8006100 <HAL_DMA_IRQHandler+0x440>
 80060b8:	40020010 	.word	0x40020010
 80060bc:	40020028 	.word	0x40020028
 80060c0:	40020040 	.word	0x40020040
 80060c4:	40020058 	.word	0x40020058
 80060c8:	40020070 	.word	0x40020070
 80060cc:	40020088 	.word	0x40020088
 80060d0:	400200a0 	.word	0x400200a0
 80060d4:	400200b8 	.word	0x400200b8
 80060d8:	40020410 	.word	0x40020410
 80060dc:	40020428 	.word	0x40020428
 80060e0:	40020440 	.word	0x40020440
 80060e4:	40020458 	.word	0x40020458
 80060e8:	40020470 	.word	0x40020470
 80060ec:	40020488 	.word	0x40020488
 80060f0:	400204a0 	.word	0x400204a0
 80060f4:	400204b8 	.word	0x400204b8
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2300      	movs	r3, #0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00d      	beq.n	8006120 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006108:	f003 031f 	and.w	r3, r3, #31
 800610c:	2204      	movs	r2, #4
 800610e:	409a      	lsls	r2, r3
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006118:	f043 0204 	orr.w	r2, r3, #4
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006124:	f003 031f 	and.w	r3, r3, #31
 8006128:	2210      	movs	r2, #16
 800612a:	409a      	lsls	r2, r3
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	4013      	ands	r3, r2
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 80a6 	beq.w	8006282 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a85      	ldr	r2, [pc, #532]	; (8006350 <HAL_DMA_IRQHandler+0x690>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d04a      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a83      	ldr	r2, [pc, #524]	; (8006354 <HAL_DMA_IRQHandler+0x694>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d045      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a82      	ldr	r2, [pc, #520]	; (8006358 <HAL_DMA_IRQHandler+0x698>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d040      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a80      	ldr	r2, [pc, #512]	; (800635c <HAL_DMA_IRQHandler+0x69c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d03b      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a7f      	ldr	r2, [pc, #508]	; (8006360 <HAL_DMA_IRQHandler+0x6a0>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d036      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a7d      	ldr	r2, [pc, #500]	; (8006364 <HAL_DMA_IRQHandler+0x6a4>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d031      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a7c      	ldr	r2, [pc, #496]	; (8006368 <HAL_DMA_IRQHandler+0x6a8>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d02c      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a7a      	ldr	r2, [pc, #488]	; (800636c <HAL_DMA_IRQHandler+0x6ac>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d027      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a79      	ldr	r2, [pc, #484]	; (8006370 <HAL_DMA_IRQHandler+0x6b0>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d022      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a77      	ldr	r2, [pc, #476]	; (8006374 <HAL_DMA_IRQHandler+0x6b4>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d01d      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a76      	ldr	r2, [pc, #472]	; (8006378 <HAL_DMA_IRQHandler+0x6b8>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d018      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a74      	ldr	r2, [pc, #464]	; (800637c <HAL_DMA_IRQHandler+0x6bc>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d013      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a73      	ldr	r2, [pc, #460]	; (8006380 <HAL_DMA_IRQHandler+0x6c0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d00e      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a71      	ldr	r2, [pc, #452]	; (8006384 <HAL_DMA_IRQHandler+0x6c4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d009      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a70      	ldr	r2, [pc, #448]	; (8006388 <HAL_DMA_IRQHandler+0x6c8>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d004      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x516>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a6e      	ldr	r2, [pc, #440]	; (800638c <HAL_DMA_IRQHandler+0x6cc>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d10a      	bne.n	80061ec <HAL_DMA_IRQHandler+0x52c>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0308 	and.w	r3, r3, #8
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	bf14      	ite	ne
 80061e4:	2301      	movne	r3, #1
 80061e6:	2300      	moveq	r3, #0
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	e009      	b.n	8006200 <HAL_DMA_IRQHandler+0x540>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0304 	and.w	r3, r3, #4
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	bf14      	ite	ne
 80061fa:	2301      	movne	r3, #1
 80061fc:	2300      	moveq	r3, #0
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	d03e      	beq.n	8006282 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006208:	f003 031f 	and.w	r3, r3, #31
 800620c:	2210      	movs	r2, #16
 800620e:	409a      	lsls	r2, r3
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d018      	beq.n	8006254 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d108      	bne.n	8006242 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	d024      	beq.n	8006282 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	4798      	blx	r3
 8006240:	e01f      	b.n	8006282 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006246:	2b00      	cmp	r3, #0
 8006248:	d01b      	beq.n	8006282 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	4798      	blx	r3
 8006252:	e016      	b.n	8006282 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625e:	2b00      	cmp	r3, #0
 8006260:	d107      	bne.n	8006272 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0208 	bic.w	r2, r2, #8
 8006270:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006286:	f003 031f 	and.w	r3, r3, #31
 800628a:	2220      	movs	r2, #32
 800628c:	409a      	lsls	r2, r3
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	4013      	ands	r3, r2
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 8110 	beq.w	80064b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a2c      	ldr	r2, [pc, #176]	; (8006350 <HAL_DMA_IRQHandler+0x690>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d04a      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a2b      	ldr	r2, [pc, #172]	; (8006354 <HAL_DMA_IRQHandler+0x694>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d045      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a29      	ldr	r2, [pc, #164]	; (8006358 <HAL_DMA_IRQHandler+0x698>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d040      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a28      	ldr	r2, [pc, #160]	; (800635c <HAL_DMA_IRQHandler+0x69c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d03b      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a26      	ldr	r2, [pc, #152]	; (8006360 <HAL_DMA_IRQHandler+0x6a0>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d036      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a25      	ldr	r2, [pc, #148]	; (8006364 <HAL_DMA_IRQHandler+0x6a4>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d031      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a23      	ldr	r2, [pc, #140]	; (8006368 <HAL_DMA_IRQHandler+0x6a8>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d02c      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a22      	ldr	r2, [pc, #136]	; (800636c <HAL_DMA_IRQHandler+0x6ac>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d027      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a20      	ldr	r2, [pc, #128]	; (8006370 <HAL_DMA_IRQHandler+0x6b0>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d022      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1f      	ldr	r2, [pc, #124]	; (8006374 <HAL_DMA_IRQHandler+0x6b4>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d01d      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1d      	ldr	r2, [pc, #116]	; (8006378 <HAL_DMA_IRQHandler+0x6b8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d018      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1c      	ldr	r2, [pc, #112]	; (800637c <HAL_DMA_IRQHandler+0x6bc>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d013      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a1a      	ldr	r2, [pc, #104]	; (8006380 <HAL_DMA_IRQHandler+0x6c0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d00e      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a19      	ldr	r2, [pc, #100]	; (8006384 <HAL_DMA_IRQHandler+0x6c4>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d009      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a17      	ldr	r2, [pc, #92]	; (8006388 <HAL_DMA_IRQHandler+0x6c8>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d004      	beq.n	8006338 <HAL_DMA_IRQHandler+0x678>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a16      	ldr	r2, [pc, #88]	; (800638c <HAL_DMA_IRQHandler+0x6cc>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d12b      	bne.n	8006390 <HAL_DMA_IRQHandler+0x6d0>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0310 	and.w	r3, r3, #16
 8006342:	2b00      	cmp	r3, #0
 8006344:	bf14      	ite	ne
 8006346:	2301      	movne	r3, #1
 8006348:	2300      	moveq	r3, #0
 800634a:	b2db      	uxtb	r3, r3
 800634c:	e02a      	b.n	80063a4 <HAL_DMA_IRQHandler+0x6e4>
 800634e:	bf00      	nop
 8006350:	40020010 	.word	0x40020010
 8006354:	40020028 	.word	0x40020028
 8006358:	40020040 	.word	0x40020040
 800635c:	40020058 	.word	0x40020058
 8006360:	40020070 	.word	0x40020070
 8006364:	40020088 	.word	0x40020088
 8006368:	400200a0 	.word	0x400200a0
 800636c:	400200b8 	.word	0x400200b8
 8006370:	40020410 	.word	0x40020410
 8006374:	40020428 	.word	0x40020428
 8006378:	40020440 	.word	0x40020440
 800637c:	40020458 	.word	0x40020458
 8006380:	40020470 	.word	0x40020470
 8006384:	40020488 	.word	0x40020488
 8006388:	400204a0 	.word	0x400204a0
 800638c:	400204b8 	.word	0x400204b8
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	bf14      	ite	ne
 800639e:	2301      	movne	r3, #1
 80063a0:	2300      	moveq	r3, #0
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 8087 	beq.w	80064b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	2220      	movs	r2, #32
 80063b4:	409a      	lsls	r2, r3
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d139      	bne.n	800643a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0216 	bic.w	r2, r2, #22
 80063d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	695a      	ldr	r2, [r3, #20]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d103      	bne.n	80063f6 <HAL_DMA_IRQHandler+0x736>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d007      	beq.n	8006406 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0208 	bic.w	r2, r2, #8
 8006404:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640a:	f003 031f 	and.w	r3, r3, #31
 800640e:	223f      	movs	r2, #63	; 0x3f
 8006410:	409a      	lsls	r2, r3
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 834a 	beq.w	8006ac4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	4798      	blx	r3
          }
          return;
 8006438:	e344      	b.n	8006ac4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d018      	beq.n	800647a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d108      	bne.n	8006468 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645a:	2b00      	cmp	r3, #0
 800645c:	d02c      	beq.n	80064b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	4798      	blx	r3
 8006466:	e027      	b.n	80064b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800646c:	2b00      	cmp	r3, #0
 800646e:	d023      	beq.n	80064b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	4798      	blx	r3
 8006478:	e01e      	b.n	80064b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10f      	bne.n	80064a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0210 	bic.w	r2, r2, #16
 8006496:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d003      	beq.n	80064b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 8306 	beq.w	8006ace <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 8088 	beq.w	80065e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2204      	movs	r2, #4
 80064d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a7a      	ldr	r2, [pc, #488]	; (80066c8 <HAL_DMA_IRQHandler+0xa08>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d04a      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a79      	ldr	r2, [pc, #484]	; (80066cc <HAL_DMA_IRQHandler+0xa0c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d045      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a77      	ldr	r2, [pc, #476]	; (80066d0 <HAL_DMA_IRQHandler+0xa10>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d040      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a76      	ldr	r2, [pc, #472]	; (80066d4 <HAL_DMA_IRQHandler+0xa14>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d03b      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a74      	ldr	r2, [pc, #464]	; (80066d8 <HAL_DMA_IRQHandler+0xa18>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d036      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a73      	ldr	r2, [pc, #460]	; (80066dc <HAL_DMA_IRQHandler+0xa1c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d031      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a71      	ldr	r2, [pc, #452]	; (80066e0 <HAL_DMA_IRQHandler+0xa20>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d02c      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a70      	ldr	r2, [pc, #448]	; (80066e4 <HAL_DMA_IRQHandler+0xa24>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d027      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a6e      	ldr	r2, [pc, #440]	; (80066e8 <HAL_DMA_IRQHandler+0xa28>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d022      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a6d      	ldr	r2, [pc, #436]	; (80066ec <HAL_DMA_IRQHandler+0xa2c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d01d      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a6b      	ldr	r2, [pc, #428]	; (80066f0 <HAL_DMA_IRQHandler+0xa30>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d018      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a6a      	ldr	r2, [pc, #424]	; (80066f4 <HAL_DMA_IRQHandler+0xa34>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d013      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a68      	ldr	r2, [pc, #416]	; (80066f8 <HAL_DMA_IRQHandler+0xa38>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00e      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a67      	ldr	r2, [pc, #412]	; (80066fc <HAL_DMA_IRQHandler+0xa3c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d009      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a65      	ldr	r2, [pc, #404]	; (8006700 <HAL_DMA_IRQHandler+0xa40>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d004      	beq.n	8006578 <HAL_DMA_IRQHandler+0x8b8>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a64      	ldr	r2, [pc, #400]	; (8006704 <HAL_DMA_IRQHandler+0xa44>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d108      	bne.n	800658a <HAL_DMA_IRQHandler+0x8ca>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0201 	bic.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	e007      	b.n	800659a <HAL_DMA_IRQHandler+0x8da>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 0201 	bic.w	r2, r2, #1
 8006598:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	3301      	adds	r3, #1
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d307      	bcc.n	80065b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1f2      	bne.n	800659a <HAL_DMA_IRQHandler+0x8da>
 80065b4:	e000      	b.n	80065b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80065b6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d004      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2203      	movs	r2, #3
 80065ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80065ce:	e003      	b.n	80065d8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 8272 	beq.w	8006ace <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	4798      	blx	r3
 80065f2:	e26c      	b.n	8006ace <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a43      	ldr	r2, [pc, #268]	; (8006708 <HAL_DMA_IRQHandler+0xa48>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d022      	beq.n	8006644 <HAL_DMA_IRQHandler+0x984>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a42      	ldr	r2, [pc, #264]	; (800670c <HAL_DMA_IRQHandler+0xa4c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d01d      	beq.n	8006644 <HAL_DMA_IRQHandler+0x984>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a40      	ldr	r2, [pc, #256]	; (8006710 <HAL_DMA_IRQHandler+0xa50>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d018      	beq.n	8006644 <HAL_DMA_IRQHandler+0x984>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a3f      	ldr	r2, [pc, #252]	; (8006714 <HAL_DMA_IRQHandler+0xa54>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d013      	beq.n	8006644 <HAL_DMA_IRQHandler+0x984>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a3d      	ldr	r2, [pc, #244]	; (8006718 <HAL_DMA_IRQHandler+0xa58>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d00e      	beq.n	8006644 <HAL_DMA_IRQHandler+0x984>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a3c      	ldr	r2, [pc, #240]	; (800671c <HAL_DMA_IRQHandler+0xa5c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d009      	beq.n	8006644 <HAL_DMA_IRQHandler+0x984>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a3a      	ldr	r2, [pc, #232]	; (8006720 <HAL_DMA_IRQHandler+0xa60>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d004      	beq.n	8006644 <HAL_DMA_IRQHandler+0x984>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a39      	ldr	r2, [pc, #228]	; (8006724 <HAL_DMA_IRQHandler+0xa64>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d101      	bne.n	8006648 <HAL_DMA_IRQHandler+0x988>
 8006644:	2301      	movs	r3, #1
 8006646:	e000      	b.n	800664a <HAL_DMA_IRQHandler+0x98a>
 8006648:	2300      	movs	r3, #0
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 823f 	beq.w	8006ace <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800665c:	f003 031f 	and.w	r3, r3, #31
 8006660:	2204      	movs	r2, #4
 8006662:	409a      	lsls	r2, r3
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	4013      	ands	r3, r2
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 80cd 	beq.w	8006808 <HAL_DMA_IRQHandler+0xb48>
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	f003 0304 	and.w	r3, r3, #4
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 80c7 	beq.w	8006808 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800667e:	f003 031f 	and.w	r3, r3, #31
 8006682:	2204      	movs	r2, #4
 8006684:	409a      	lsls	r2, r3
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d049      	beq.n	8006728 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d109      	bne.n	80066b2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 8210 	beq.w	8006ac8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066b0:	e20a      	b.n	8006ac8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f000 8206 	beq.w	8006ac8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066c4:	e200      	b.n	8006ac8 <HAL_DMA_IRQHandler+0xe08>
 80066c6:	bf00      	nop
 80066c8:	40020010 	.word	0x40020010
 80066cc:	40020028 	.word	0x40020028
 80066d0:	40020040 	.word	0x40020040
 80066d4:	40020058 	.word	0x40020058
 80066d8:	40020070 	.word	0x40020070
 80066dc:	40020088 	.word	0x40020088
 80066e0:	400200a0 	.word	0x400200a0
 80066e4:	400200b8 	.word	0x400200b8
 80066e8:	40020410 	.word	0x40020410
 80066ec:	40020428 	.word	0x40020428
 80066f0:	40020440 	.word	0x40020440
 80066f4:	40020458 	.word	0x40020458
 80066f8:	40020470 	.word	0x40020470
 80066fc:	40020488 	.word	0x40020488
 8006700:	400204a0 	.word	0x400204a0
 8006704:	400204b8 	.word	0x400204b8
 8006708:	58025408 	.word	0x58025408
 800670c:	5802541c 	.word	0x5802541c
 8006710:	58025430 	.word	0x58025430
 8006714:	58025444 	.word	0x58025444
 8006718:	58025458 	.word	0x58025458
 800671c:	5802546c 	.word	0x5802546c
 8006720:	58025480 	.word	0x58025480
 8006724:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	2b00      	cmp	r3, #0
 8006730:	d160      	bne.n	80067f4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a7f      	ldr	r2, [pc, #508]	; (8006934 <HAL_DMA_IRQHandler+0xc74>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d04a      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xb12>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a7d      	ldr	r2, [pc, #500]	; (8006938 <HAL_DMA_IRQHandler+0xc78>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d045      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xb12>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a7c      	ldr	r2, [pc, #496]	; (800693c <HAL_DMA_IRQHandler+0xc7c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d040      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xb12>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a7a      	ldr	r2, [pc, #488]	; (8006940 <HAL_DMA_IRQHandler+0xc80>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d03b      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xb12>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a79      	ldr	r2, [pc, #484]	; (8006944 <HAL_DMA_IRQHandler+0xc84>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d036      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xb12>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a77      	ldr	r2, [pc, #476]	; (8006948 <HAL_DMA_IRQHandler+0xc88>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d031      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xb12>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a76      	ldr	r2, [pc, #472]	; (800694c <HAL_DMA_IRQHandler+0xc8c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d02c      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xb12>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a74      	ldr	r2, [pc, #464]	; (8006950 <HAL_DMA_IRQHandler+0xc90>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d027      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xb12>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a73      	ldr	r2, [pc, #460]	; (8006954 <HAL_DMA_IRQHandler+0xc94>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d022      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xb12>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a71      	ldr	r2, [pc, #452]	; (8006958 <HAL_DMA_IRQHandler+0xc98>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d01d      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xb12>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a70      	ldr	r2, [pc, #448]	; (800695c <HAL_DMA_IRQHandler+0xc9c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d018      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xb12>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a6e      	ldr	r2, [pc, #440]	; (8006960 <HAL_DMA_IRQHandler+0xca0>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d013      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xb12>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a6d      	ldr	r2, [pc, #436]	; (8006964 <HAL_DMA_IRQHandler+0xca4>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00e      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xb12>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a6b      	ldr	r2, [pc, #428]	; (8006968 <HAL_DMA_IRQHandler+0xca8>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d009      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xb12>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a6a      	ldr	r2, [pc, #424]	; (800696c <HAL_DMA_IRQHandler+0xcac>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d004      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xb12>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a68      	ldr	r2, [pc, #416]	; (8006970 <HAL_DMA_IRQHandler+0xcb0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d108      	bne.n	80067e4 <HAL_DMA_IRQHandler+0xb24>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 0208 	bic.w	r2, r2, #8
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	e007      	b.n	80067f4 <HAL_DMA_IRQHandler+0xb34>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0204 	bic.w	r2, r2, #4
 80067f2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 8165 	beq.w	8006ac8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006806:	e15f      	b.n	8006ac8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800680c:	f003 031f 	and.w	r3, r3, #31
 8006810:	2202      	movs	r2, #2
 8006812:	409a      	lsls	r2, r3
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	4013      	ands	r3, r2
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 80c5 	beq.w	80069a8 <HAL_DMA_IRQHandler+0xce8>
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 80bf 	beq.w	80069a8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800682e:	f003 031f 	and.w	r3, r3, #31
 8006832:	2202      	movs	r2, #2
 8006834:	409a      	lsls	r2, r3
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d018      	beq.n	8006876 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d109      	bne.n	8006862 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 813a 	beq.w	8006acc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006860:	e134      	b.n	8006acc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 8130 	beq.w	8006acc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006874:	e12a      	b.n	8006acc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f003 0320 	and.w	r3, r3, #32
 800687c:	2b00      	cmp	r3, #0
 800687e:	f040 8089 	bne.w	8006994 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a2b      	ldr	r2, [pc, #172]	; (8006934 <HAL_DMA_IRQHandler+0xc74>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d04a      	beq.n	8006922 <HAL_DMA_IRQHandler+0xc62>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a29      	ldr	r2, [pc, #164]	; (8006938 <HAL_DMA_IRQHandler+0xc78>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d045      	beq.n	8006922 <HAL_DMA_IRQHandler+0xc62>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a28      	ldr	r2, [pc, #160]	; (800693c <HAL_DMA_IRQHandler+0xc7c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d040      	beq.n	8006922 <HAL_DMA_IRQHandler+0xc62>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a26      	ldr	r2, [pc, #152]	; (8006940 <HAL_DMA_IRQHandler+0xc80>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d03b      	beq.n	8006922 <HAL_DMA_IRQHandler+0xc62>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a25      	ldr	r2, [pc, #148]	; (8006944 <HAL_DMA_IRQHandler+0xc84>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d036      	beq.n	8006922 <HAL_DMA_IRQHandler+0xc62>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a23      	ldr	r2, [pc, #140]	; (8006948 <HAL_DMA_IRQHandler+0xc88>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d031      	beq.n	8006922 <HAL_DMA_IRQHandler+0xc62>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a22      	ldr	r2, [pc, #136]	; (800694c <HAL_DMA_IRQHandler+0xc8c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d02c      	beq.n	8006922 <HAL_DMA_IRQHandler+0xc62>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a20      	ldr	r2, [pc, #128]	; (8006950 <HAL_DMA_IRQHandler+0xc90>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d027      	beq.n	8006922 <HAL_DMA_IRQHandler+0xc62>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a1f      	ldr	r2, [pc, #124]	; (8006954 <HAL_DMA_IRQHandler+0xc94>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d022      	beq.n	8006922 <HAL_DMA_IRQHandler+0xc62>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a1d      	ldr	r2, [pc, #116]	; (8006958 <HAL_DMA_IRQHandler+0xc98>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d01d      	beq.n	8006922 <HAL_DMA_IRQHandler+0xc62>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a1c      	ldr	r2, [pc, #112]	; (800695c <HAL_DMA_IRQHandler+0xc9c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d018      	beq.n	8006922 <HAL_DMA_IRQHandler+0xc62>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a1a      	ldr	r2, [pc, #104]	; (8006960 <HAL_DMA_IRQHandler+0xca0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d013      	beq.n	8006922 <HAL_DMA_IRQHandler+0xc62>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a19      	ldr	r2, [pc, #100]	; (8006964 <HAL_DMA_IRQHandler+0xca4>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d00e      	beq.n	8006922 <HAL_DMA_IRQHandler+0xc62>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a17      	ldr	r2, [pc, #92]	; (8006968 <HAL_DMA_IRQHandler+0xca8>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d009      	beq.n	8006922 <HAL_DMA_IRQHandler+0xc62>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a16      	ldr	r2, [pc, #88]	; (800696c <HAL_DMA_IRQHandler+0xcac>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d004      	beq.n	8006922 <HAL_DMA_IRQHandler+0xc62>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a14      	ldr	r2, [pc, #80]	; (8006970 <HAL_DMA_IRQHandler+0xcb0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d128      	bne.n	8006974 <HAL_DMA_IRQHandler+0xcb4>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0214 	bic.w	r2, r2, #20
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	e027      	b.n	8006984 <HAL_DMA_IRQHandler+0xcc4>
 8006934:	40020010 	.word	0x40020010
 8006938:	40020028 	.word	0x40020028
 800693c:	40020040 	.word	0x40020040
 8006940:	40020058 	.word	0x40020058
 8006944:	40020070 	.word	0x40020070
 8006948:	40020088 	.word	0x40020088
 800694c:	400200a0 	.word	0x400200a0
 8006950:	400200b8 	.word	0x400200b8
 8006954:	40020410 	.word	0x40020410
 8006958:	40020428 	.word	0x40020428
 800695c:	40020440 	.word	0x40020440
 8006960:	40020458 	.word	0x40020458
 8006964:	40020470 	.word	0x40020470
 8006968:	40020488 	.word	0x40020488
 800696c:	400204a0 	.word	0x400204a0
 8006970:	400204b8 	.word	0x400204b8
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 020a 	bic.w	r2, r2, #10
 8006982:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 8097 	beq.w	8006acc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069a6:	e091      	b.n	8006acc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ac:	f003 031f 	and.w	r3, r3, #31
 80069b0:	2208      	movs	r2, #8
 80069b2:	409a      	lsls	r2, r3
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	4013      	ands	r3, r2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 8088 	beq.w	8006ace <HAL_DMA_IRQHandler+0xe0e>
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f003 0308 	and.w	r3, r3, #8
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 8082 	beq.w	8006ace <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a41      	ldr	r2, [pc, #260]	; (8006ad4 <HAL_DMA_IRQHandler+0xe14>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d04a      	beq.n	8006a6a <HAL_DMA_IRQHandler+0xdaa>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a3f      	ldr	r2, [pc, #252]	; (8006ad8 <HAL_DMA_IRQHandler+0xe18>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d045      	beq.n	8006a6a <HAL_DMA_IRQHandler+0xdaa>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a3e      	ldr	r2, [pc, #248]	; (8006adc <HAL_DMA_IRQHandler+0xe1c>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d040      	beq.n	8006a6a <HAL_DMA_IRQHandler+0xdaa>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a3c      	ldr	r2, [pc, #240]	; (8006ae0 <HAL_DMA_IRQHandler+0xe20>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d03b      	beq.n	8006a6a <HAL_DMA_IRQHandler+0xdaa>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a3b      	ldr	r2, [pc, #236]	; (8006ae4 <HAL_DMA_IRQHandler+0xe24>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d036      	beq.n	8006a6a <HAL_DMA_IRQHandler+0xdaa>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a39      	ldr	r2, [pc, #228]	; (8006ae8 <HAL_DMA_IRQHandler+0xe28>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d031      	beq.n	8006a6a <HAL_DMA_IRQHandler+0xdaa>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a38      	ldr	r2, [pc, #224]	; (8006aec <HAL_DMA_IRQHandler+0xe2c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d02c      	beq.n	8006a6a <HAL_DMA_IRQHandler+0xdaa>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a36      	ldr	r2, [pc, #216]	; (8006af0 <HAL_DMA_IRQHandler+0xe30>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d027      	beq.n	8006a6a <HAL_DMA_IRQHandler+0xdaa>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a35      	ldr	r2, [pc, #212]	; (8006af4 <HAL_DMA_IRQHandler+0xe34>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d022      	beq.n	8006a6a <HAL_DMA_IRQHandler+0xdaa>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a33      	ldr	r2, [pc, #204]	; (8006af8 <HAL_DMA_IRQHandler+0xe38>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d01d      	beq.n	8006a6a <HAL_DMA_IRQHandler+0xdaa>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a32      	ldr	r2, [pc, #200]	; (8006afc <HAL_DMA_IRQHandler+0xe3c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d018      	beq.n	8006a6a <HAL_DMA_IRQHandler+0xdaa>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a30      	ldr	r2, [pc, #192]	; (8006b00 <HAL_DMA_IRQHandler+0xe40>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d013      	beq.n	8006a6a <HAL_DMA_IRQHandler+0xdaa>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a2f      	ldr	r2, [pc, #188]	; (8006b04 <HAL_DMA_IRQHandler+0xe44>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d00e      	beq.n	8006a6a <HAL_DMA_IRQHandler+0xdaa>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a2d      	ldr	r2, [pc, #180]	; (8006b08 <HAL_DMA_IRQHandler+0xe48>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d009      	beq.n	8006a6a <HAL_DMA_IRQHandler+0xdaa>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a2c      	ldr	r2, [pc, #176]	; (8006b0c <HAL_DMA_IRQHandler+0xe4c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d004      	beq.n	8006a6a <HAL_DMA_IRQHandler+0xdaa>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a2a      	ldr	r2, [pc, #168]	; (8006b10 <HAL_DMA_IRQHandler+0xe50>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d108      	bne.n	8006a7c <HAL_DMA_IRQHandler+0xdbc>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 021c 	bic.w	r2, r2, #28
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	e007      	b.n	8006a8c <HAL_DMA_IRQHandler+0xdcc>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 020e 	bic.w	r2, r2, #14
 8006a8a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a90:	f003 031f 	and.w	r3, r3, #31
 8006a94:	2201      	movs	r2, #1
 8006a96:	409a      	lsls	r2, r3
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d009      	beq.n	8006ace <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	4798      	blx	r3
 8006ac2:	e004      	b.n	8006ace <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006ac4:	bf00      	nop
 8006ac6:	e002      	b.n	8006ace <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ac8:	bf00      	nop
 8006aca:	e000      	b.n	8006ace <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006acc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006ace:	3728      	adds	r7, #40	; 0x28
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	40020010 	.word	0x40020010
 8006ad8:	40020028 	.word	0x40020028
 8006adc:	40020040 	.word	0x40020040
 8006ae0:	40020058 	.word	0x40020058
 8006ae4:	40020070 	.word	0x40020070
 8006ae8:	40020088 	.word	0x40020088
 8006aec:	400200a0 	.word	0x400200a0
 8006af0:	400200b8 	.word	0x400200b8
 8006af4:	40020410 	.word	0x40020410
 8006af8:	40020428 	.word	0x40020428
 8006afc:	40020440 	.word	0x40020440
 8006b00:	40020458 	.word	0x40020458
 8006b04:	40020470 	.word	0x40020470
 8006b08:	40020488 	.word	0x40020488
 8006b0c:	400204a0 	.word	0x400204a0
 8006b10:	400204b8 	.word	0x400204b8

08006b14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b26:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b2c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a7f      	ldr	r2, [pc, #508]	; (8006d30 <DMA_SetConfig+0x21c>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d072      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a7d      	ldr	r2, [pc, #500]	; (8006d34 <DMA_SetConfig+0x220>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d06d      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a7c      	ldr	r2, [pc, #496]	; (8006d38 <DMA_SetConfig+0x224>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d068      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a7a      	ldr	r2, [pc, #488]	; (8006d3c <DMA_SetConfig+0x228>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d063      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a79      	ldr	r2, [pc, #484]	; (8006d40 <DMA_SetConfig+0x22c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d05e      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a77      	ldr	r2, [pc, #476]	; (8006d44 <DMA_SetConfig+0x230>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d059      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a76      	ldr	r2, [pc, #472]	; (8006d48 <DMA_SetConfig+0x234>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d054      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a74      	ldr	r2, [pc, #464]	; (8006d4c <DMA_SetConfig+0x238>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d04f      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a73      	ldr	r2, [pc, #460]	; (8006d50 <DMA_SetConfig+0x23c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d04a      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a71      	ldr	r2, [pc, #452]	; (8006d54 <DMA_SetConfig+0x240>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d045      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a70      	ldr	r2, [pc, #448]	; (8006d58 <DMA_SetConfig+0x244>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d040      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a6e      	ldr	r2, [pc, #440]	; (8006d5c <DMA_SetConfig+0x248>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d03b      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a6d      	ldr	r2, [pc, #436]	; (8006d60 <DMA_SetConfig+0x24c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d036      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a6b      	ldr	r2, [pc, #428]	; (8006d64 <DMA_SetConfig+0x250>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d031      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a6a      	ldr	r2, [pc, #424]	; (8006d68 <DMA_SetConfig+0x254>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d02c      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a68      	ldr	r2, [pc, #416]	; (8006d6c <DMA_SetConfig+0x258>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d027      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a67      	ldr	r2, [pc, #412]	; (8006d70 <DMA_SetConfig+0x25c>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d022      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a65      	ldr	r2, [pc, #404]	; (8006d74 <DMA_SetConfig+0x260>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d01d      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a64      	ldr	r2, [pc, #400]	; (8006d78 <DMA_SetConfig+0x264>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d018      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a62      	ldr	r2, [pc, #392]	; (8006d7c <DMA_SetConfig+0x268>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d013      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a61      	ldr	r2, [pc, #388]	; (8006d80 <DMA_SetConfig+0x26c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d00e      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a5f      	ldr	r2, [pc, #380]	; (8006d84 <DMA_SetConfig+0x270>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d009      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a5e      	ldr	r2, [pc, #376]	; (8006d88 <DMA_SetConfig+0x274>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d004      	beq.n	8006c1e <DMA_SetConfig+0x10a>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a5c      	ldr	r2, [pc, #368]	; (8006d8c <DMA_SetConfig+0x278>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d101      	bne.n	8006c22 <DMA_SetConfig+0x10e>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e000      	b.n	8006c24 <DMA_SetConfig+0x110>
 8006c22:	2300      	movs	r3, #0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00d      	beq.n	8006c44 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006c30:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d004      	beq.n	8006c44 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006c42:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a39      	ldr	r2, [pc, #228]	; (8006d30 <DMA_SetConfig+0x21c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d04a      	beq.n	8006ce4 <DMA_SetConfig+0x1d0>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a38      	ldr	r2, [pc, #224]	; (8006d34 <DMA_SetConfig+0x220>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d045      	beq.n	8006ce4 <DMA_SetConfig+0x1d0>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a36      	ldr	r2, [pc, #216]	; (8006d38 <DMA_SetConfig+0x224>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d040      	beq.n	8006ce4 <DMA_SetConfig+0x1d0>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a35      	ldr	r2, [pc, #212]	; (8006d3c <DMA_SetConfig+0x228>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d03b      	beq.n	8006ce4 <DMA_SetConfig+0x1d0>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a33      	ldr	r2, [pc, #204]	; (8006d40 <DMA_SetConfig+0x22c>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d036      	beq.n	8006ce4 <DMA_SetConfig+0x1d0>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a32      	ldr	r2, [pc, #200]	; (8006d44 <DMA_SetConfig+0x230>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d031      	beq.n	8006ce4 <DMA_SetConfig+0x1d0>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a30      	ldr	r2, [pc, #192]	; (8006d48 <DMA_SetConfig+0x234>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d02c      	beq.n	8006ce4 <DMA_SetConfig+0x1d0>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a2f      	ldr	r2, [pc, #188]	; (8006d4c <DMA_SetConfig+0x238>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d027      	beq.n	8006ce4 <DMA_SetConfig+0x1d0>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a2d      	ldr	r2, [pc, #180]	; (8006d50 <DMA_SetConfig+0x23c>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d022      	beq.n	8006ce4 <DMA_SetConfig+0x1d0>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a2c      	ldr	r2, [pc, #176]	; (8006d54 <DMA_SetConfig+0x240>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d01d      	beq.n	8006ce4 <DMA_SetConfig+0x1d0>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a2a      	ldr	r2, [pc, #168]	; (8006d58 <DMA_SetConfig+0x244>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d018      	beq.n	8006ce4 <DMA_SetConfig+0x1d0>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a29      	ldr	r2, [pc, #164]	; (8006d5c <DMA_SetConfig+0x248>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d013      	beq.n	8006ce4 <DMA_SetConfig+0x1d0>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a27      	ldr	r2, [pc, #156]	; (8006d60 <DMA_SetConfig+0x24c>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d00e      	beq.n	8006ce4 <DMA_SetConfig+0x1d0>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a26      	ldr	r2, [pc, #152]	; (8006d64 <DMA_SetConfig+0x250>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d009      	beq.n	8006ce4 <DMA_SetConfig+0x1d0>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a24      	ldr	r2, [pc, #144]	; (8006d68 <DMA_SetConfig+0x254>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d004      	beq.n	8006ce4 <DMA_SetConfig+0x1d0>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a23      	ldr	r2, [pc, #140]	; (8006d6c <DMA_SetConfig+0x258>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d101      	bne.n	8006ce8 <DMA_SetConfig+0x1d4>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e000      	b.n	8006cea <DMA_SetConfig+0x1d6>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d059      	beq.n	8006da2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cf2:	f003 031f 	and.w	r3, r3, #31
 8006cf6:	223f      	movs	r2, #63	; 0x3f
 8006cf8:	409a      	lsls	r2, r3
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d0c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	2b40      	cmp	r3, #64	; 0x40
 8006d1c:	d138      	bne.n	8006d90 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d2e:	e086      	b.n	8006e3e <DMA_SetConfig+0x32a>
 8006d30:	40020010 	.word	0x40020010
 8006d34:	40020028 	.word	0x40020028
 8006d38:	40020040 	.word	0x40020040
 8006d3c:	40020058 	.word	0x40020058
 8006d40:	40020070 	.word	0x40020070
 8006d44:	40020088 	.word	0x40020088
 8006d48:	400200a0 	.word	0x400200a0
 8006d4c:	400200b8 	.word	0x400200b8
 8006d50:	40020410 	.word	0x40020410
 8006d54:	40020428 	.word	0x40020428
 8006d58:	40020440 	.word	0x40020440
 8006d5c:	40020458 	.word	0x40020458
 8006d60:	40020470 	.word	0x40020470
 8006d64:	40020488 	.word	0x40020488
 8006d68:	400204a0 	.word	0x400204a0
 8006d6c:	400204b8 	.word	0x400204b8
 8006d70:	58025408 	.word	0x58025408
 8006d74:	5802541c 	.word	0x5802541c
 8006d78:	58025430 	.word	0x58025430
 8006d7c:	58025444 	.word	0x58025444
 8006d80:	58025458 	.word	0x58025458
 8006d84:	5802546c 	.word	0x5802546c
 8006d88:	58025480 	.word	0x58025480
 8006d8c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	60da      	str	r2, [r3, #12]
}
 8006da0:	e04d      	b.n	8006e3e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a29      	ldr	r2, [pc, #164]	; (8006e4c <DMA_SetConfig+0x338>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d022      	beq.n	8006df2 <DMA_SetConfig+0x2de>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a27      	ldr	r2, [pc, #156]	; (8006e50 <DMA_SetConfig+0x33c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d01d      	beq.n	8006df2 <DMA_SetConfig+0x2de>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a26      	ldr	r2, [pc, #152]	; (8006e54 <DMA_SetConfig+0x340>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d018      	beq.n	8006df2 <DMA_SetConfig+0x2de>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a24      	ldr	r2, [pc, #144]	; (8006e58 <DMA_SetConfig+0x344>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d013      	beq.n	8006df2 <DMA_SetConfig+0x2de>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a23      	ldr	r2, [pc, #140]	; (8006e5c <DMA_SetConfig+0x348>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00e      	beq.n	8006df2 <DMA_SetConfig+0x2de>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a21      	ldr	r2, [pc, #132]	; (8006e60 <DMA_SetConfig+0x34c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d009      	beq.n	8006df2 <DMA_SetConfig+0x2de>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a20      	ldr	r2, [pc, #128]	; (8006e64 <DMA_SetConfig+0x350>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d004      	beq.n	8006df2 <DMA_SetConfig+0x2de>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a1e      	ldr	r2, [pc, #120]	; (8006e68 <DMA_SetConfig+0x354>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d101      	bne.n	8006df6 <DMA_SetConfig+0x2e2>
 8006df2:	2301      	movs	r3, #1
 8006df4:	e000      	b.n	8006df8 <DMA_SetConfig+0x2e4>
 8006df6:	2300      	movs	r3, #0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d020      	beq.n	8006e3e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e00:	f003 031f 	and.w	r3, r3, #31
 8006e04:	2201      	movs	r2, #1
 8006e06:	409a      	lsls	r2, r3
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	2b40      	cmp	r3, #64	; 0x40
 8006e1a:	d108      	bne.n	8006e2e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	60da      	str	r2, [r3, #12]
}
 8006e2c:	e007      	b.n	8006e3e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	60da      	str	r2, [r3, #12]
}
 8006e3e:	bf00      	nop
 8006e40:	371c      	adds	r7, #28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	58025408 	.word	0x58025408
 8006e50:	5802541c 	.word	0x5802541c
 8006e54:	58025430 	.word	0x58025430
 8006e58:	58025444 	.word	0x58025444
 8006e5c:	58025458 	.word	0x58025458
 8006e60:	5802546c 	.word	0x5802546c
 8006e64:	58025480 	.word	0x58025480
 8006e68:	58025494 	.word	0x58025494

08006e6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a42      	ldr	r2, [pc, #264]	; (8006f84 <DMA_CalcBaseAndBitshift+0x118>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d04a      	beq.n	8006f14 <DMA_CalcBaseAndBitshift+0xa8>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a41      	ldr	r2, [pc, #260]	; (8006f88 <DMA_CalcBaseAndBitshift+0x11c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d045      	beq.n	8006f14 <DMA_CalcBaseAndBitshift+0xa8>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a3f      	ldr	r2, [pc, #252]	; (8006f8c <DMA_CalcBaseAndBitshift+0x120>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d040      	beq.n	8006f14 <DMA_CalcBaseAndBitshift+0xa8>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a3e      	ldr	r2, [pc, #248]	; (8006f90 <DMA_CalcBaseAndBitshift+0x124>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d03b      	beq.n	8006f14 <DMA_CalcBaseAndBitshift+0xa8>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a3c      	ldr	r2, [pc, #240]	; (8006f94 <DMA_CalcBaseAndBitshift+0x128>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d036      	beq.n	8006f14 <DMA_CalcBaseAndBitshift+0xa8>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a3b      	ldr	r2, [pc, #236]	; (8006f98 <DMA_CalcBaseAndBitshift+0x12c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d031      	beq.n	8006f14 <DMA_CalcBaseAndBitshift+0xa8>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a39      	ldr	r2, [pc, #228]	; (8006f9c <DMA_CalcBaseAndBitshift+0x130>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d02c      	beq.n	8006f14 <DMA_CalcBaseAndBitshift+0xa8>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a38      	ldr	r2, [pc, #224]	; (8006fa0 <DMA_CalcBaseAndBitshift+0x134>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d027      	beq.n	8006f14 <DMA_CalcBaseAndBitshift+0xa8>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a36      	ldr	r2, [pc, #216]	; (8006fa4 <DMA_CalcBaseAndBitshift+0x138>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d022      	beq.n	8006f14 <DMA_CalcBaseAndBitshift+0xa8>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a35      	ldr	r2, [pc, #212]	; (8006fa8 <DMA_CalcBaseAndBitshift+0x13c>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d01d      	beq.n	8006f14 <DMA_CalcBaseAndBitshift+0xa8>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a33      	ldr	r2, [pc, #204]	; (8006fac <DMA_CalcBaseAndBitshift+0x140>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d018      	beq.n	8006f14 <DMA_CalcBaseAndBitshift+0xa8>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a32      	ldr	r2, [pc, #200]	; (8006fb0 <DMA_CalcBaseAndBitshift+0x144>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d013      	beq.n	8006f14 <DMA_CalcBaseAndBitshift+0xa8>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a30      	ldr	r2, [pc, #192]	; (8006fb4 <DMA_CalcBaseAndBitshift+0x148>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d00e      	beq.n	8006f14 <DMA_CalcBaseAndBitshift+0xa8>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a2f      	ldr	r2, [pc, #188]	; (8006fb8 <DMA_CalcBaseAndBitshift+0x14c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d009      	beq.n	8006f14 <DMA_CalcBaseAndBitshift+0xa8>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a2d      	ldr	r2, [pc, #180]	; (8006fbc <DMA_CalcBaseAndBitshift+0x150>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d004      	beq.n	8006f14 <DMA_CalcBaseAndBitshift+0xa8>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a2c      	ldr	r2, [pc, #176]	; (8006fc0 <DMA_CalcBaseAndBitshift+0x154>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d101      	bne.n	8006f18 <DMA_CalcBaseAndBitshift+0xac>
 8006f14:	2301      	movs	r3, #1
 8006f16:	e000      	b.n	8006f1a <DMA_CalcBaseAndBitshift+0xae>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d024      	beq.n	8006f68 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	3b10      	subs	r3, #16
 8006f26:	4a27      	ldr	r2, [pc, #156]	; (8006fc4 <DMA_CalcBaseAndBitshift+0x158>)
 8006f28:	fba2 2303 	umull	r2, r3, r2, r3
 8006f2c:	091b      	lsrs	r3, r3, #4
 8006f2e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	4a24      	ldr	r2, [pc, #144]	; (8006fc8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006f38:	5cd3      	ldrb	r3, [r2, r3]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b03      	cmp	r3, #3
 8006f44:	d908      	bls.n	8006f58 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	4b1f      	ldr	r3, [pc, #124]	; (8006fcc <DMA_CalcBaseAndBitshift+0x160>)
 8006f4e:	4013      	ands	r3, r2
 8006f50:	1d1a      	adds	r2, r3, #4
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	659a      	str	r2, [r3, #88]	; 0x58
 8006f56:	e00d      	b.n	8006f74 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	4b1b      	ldr	r3, [pc, #108]	; (8006fcc <DMA_CalcBaseAndBitshift+0x160>)
 8006f60:	4013      	ands	r3, r2
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	6593      	str	r3, [r2, #88]	; 0x58
 8006f66:	e005      	b.n	8006f74 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	40020010 	.word	0x40020010
 8006f88:	40020028 	.word	0x40020028
 8006f8c:	40020040 	.word	0x40020040
 8006f90:	40020058 	.word	0x40020058
 8006f94:	40020070 	.word	0x40020070
 8006f98:	40020088 	.word	0x40020088
 8006f9c:	400200a0 	.word	0x400200a0
 8006fa0:	400200b8 	.word	0x400200b8
 8006fa4:	40020410 	.word	0x40020410
 8006fa8:	40020428 	.word	0x40020428
 8006fac:	40020440 	.word	0x40020440
 8006fb0:	40020458 	.word	0x40020458
 8006fb4:	40020470 	.word	0x40020470
 8006fb8:	40020488 	.word	0x40020488
 8006fbc:	400204a0 	.word	0x400204a0
 8006fc0:	400204b8 	.word	0x400204b8
 8006fc4:	aaaaaaab 	.word	0xaaaaaaab
 8006fc8:	0800e550 	.word	0x0800e550
 8006fcc:	fffffc00 	.word	0xfffffc00

08006fd0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d120      	bne.n	8007026 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d858      	bhi.n	800709e <DMA_CheckFifoParam+0xce>
 8006fec:	a201      	add	r2, pc, #4	; (adr r2, 8006ff4 <DMA_CheckFifoParam+0x24>)
 8006fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff2:	bf00      	nop
 8006ff4:	08007005 	.word	0x08007005
 8006ff8:	08007017 	.word	0x08007017
 8006ffc:	08007005 	.word	0x08007005
 8007000:	0800709f 	.word	0x0800709f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d048      	beq.n	80070a2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007014:	e045      	b.n	80070a2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800701e:	d142      	bne.n	80070a6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007024:	e03f      	b.n	80070a6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800702e:	d123      	bne.n	8007078 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007034:	2b03      	cmp	r3, #3
 8007036:	d838      	bhi.n	80070aa <DMA_CheckFifoParam+0xda>
 8007038:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <DMA_CheckFifoParam+0x70>)
 800703a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703e:	bf00      	nop
 8007040:	08007051 	.word	0x08007051
 8007044:	08007057 	.word	0x08007057
 8007048:	08007051 	.word	0x08007051
 800704c:	08007069 	.word	0x08007069
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	73fb      	strb	r3, [r7, #15]
        break;
 8007054:	e030      	b.n	80070b8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d025      	beq.n	80070ae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007066:	e022      	b.n	80070ae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007070:	d11f      	bne.n	80070b2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007076:	e01c      	b.n	80070b2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707c:	2b02      	cmp	r3, #2
 800707e:	d902      	bls.n	8007086 <DMA_CheckFifoParam+0xb6>
 8007080:	2b03      	cmp	r3, #3
 8007082:	d003      	beq.n	800708c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007084:	e018      	b.n	80070b8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	73fb      	strb	r3, [r7, #15]
        break;
 800708a:	e015      	b.n	80070b8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00e      	beq.n	80070b6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	73fb      	strb	r3, [r7, #15]
    break;
 800709c:	e00b      	b.n	80070b6 <DMA_CheckFifoParam+0xe6>
        break;
 800709e:	bf00      	nop
 80070a0:	e00a      	b.n	80070b8 <DMA_CheckFifoParam+0xe8>
        break;
 80070a2:	bf00      	nop
 80070a4:	e008      	b.n	80070b8 <DMA_CheckFifoParam+0xe8>
        break;
 80070a6:	bf00      	nop
 80070a8:	e006      	b.n	80070b8 <DMA_CheckFifoParam+0xe8>
        break;
 80070aa:	bf00      	nop
 80070ac:	e004      	b.n	80070b8 <DMA_CheckFifoParam+0xe8>
        break;
 80070ae:	bf00      	nop
 80070b0:	e002      	b.n	80070b8 <DMA_CheckFifoParam+0xe8>
        break;
 80070b2:	bf00      	nop
 80070b4:	e000      	b.n	80070b8 <DMA_CheckFifoParam+0xe8>
    break;
 80070b6:	bf00      	nop
    }
  }

  return status;
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop

080070c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a38      	ldr	r2, [pc, #224]	; (80071bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d022      	beq.n	8007126 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a36      	ldr	r2, [pc, #216]	; (80071c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d01d      	beq.n	8007126 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a35      	ldr	r2, [pc, #212]	; (80071c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d018      	beq.n	8007126 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a33      	ldr	r2, [pc, #204]	; (80071c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d013      	beq.n	8007126 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a32      	ldr	r2, [pc, #200]	; (80071cc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d00e      	beq.n	8007126 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a30      	ldr	r2, [pc, #192]	; (80071d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d009      	beq.n	8007126 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a2f      	ldr	r2, [pc, #188]	; (80071d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d004      	beq.n	8007126 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a2d      	ldr	r2, [pc, #180]	; (80071d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d101      	bne.n	800712a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007126:	2301      	movs	r3, #1
 8007128:	e000      	b.n	800712c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800712a:	2300      	movs	r3, #0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d01a      	beq.n	8007166 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	b2db      	uxtb	r3, r3
 8007136:	3b08      	subs	r3, #8
 8007138:	4a28      	ldr	r2, [pc, #160]	; (80071dc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800713a:	fba2 2303 	umull	r2, r3, r2, r3
 800713e:	091b      	lsrs	r3, r3, #4
 8007140:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	4b26      	ldr	r3, [pc, #152]	; (80071e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007146:	4413      	add	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	461a      	mov	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a24      	ldr	r2, [pc, #144]	; (80071e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007154:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f003 031f 	and.w	r3, r3, #31
 800715c:	2201      	movs	r2, #1
 800715e:	409a      	lsls	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007164:	e024      	b.n	80071b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	b2db      	uxtb	r3, r3
 800716c:	3b10      	subs	r3, #16
 800716e:	4a1e      	ldr	r2, [pc, #120]	; (80071e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007170:	fba2 2303 	umull	r2, r3, r2, r3
 8007174:	091b      	lsrs	r3, r3, #4
 8007176:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	4a1c      	ldr	r2, [pc, #112]	; (80071ec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d806      	bhi.n	800718e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	4a1b      	ldr	r2, [pc, #108]	; (80071f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d902      	bls.n	800718e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	3308      	adds	r3, #8
 800718c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	4b18      	ldr	r3, [pc, #96]	; (80071f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007192:	4413      	add	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	461a      	mov	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a16      	ldr	r2, [pc, #88]	; (80071f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80071a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f003 031f 	and.w	r3, r3, #31
 80071a8:	2201      	movs	r2, #1
 80071aa:	409a      	lsls	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 80071b0:	bf00      	nop
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	58025408 	.word	0x58025408
 80071c0:	5802541c 	.word	0x5802541c
 80071c4:	58025430 	.word	0x58025430
 80071c8:	58025444 	.word	0x58025444
 80071cc:	58025458 	.word	0x58025458
 80071d0:	5802546c 	.word	0x5802546c
 80071d4:	58025480 	.word	0x58025480
 80071d8:	58025494 	.word	0x58025494
 80071dc:	cccccccd 	.word	0xcccccccd
 80071e0:	16009600 	.word	0x16009600
 80071e4:	58025880 	.word	0x58025880
 80071e8:	aaaaaaab 	.word	0xaaaaaaab
 80071ec:	400204b8 	.word	0x400204b8
 80071f0:	4002040f 	.word	0x4002040f
 80071f4:	10008200 	.word	0x10008200
 80071f8:	40020880 	.word	0x40020880

080071fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	b2db      	uxtb	r3, r3
 800720a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d04a      	beq.n	80072a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2b08      	cmp	r3, #8
 8007216:	d847      	bhi.n	80072a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a25      	ldr	r2, [pc, #148]	; (80072b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d022      	beq.n	8007268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a24      	ldr	r2, [pc, #144]	; (80072b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d01d      	beq.n	8007268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a22      	ldr	r2, [pc, #136]	; (80072bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d018      	beq.n	8007268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a21      	ldr	r2, [pc, #132]	; (80072c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d013      	beq.n	8007268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a1f      	ldr	r2, [pc, #124]	; (80072c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d00e      	beq.n	8007268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a1e      	ldr	r2, [pc, #120]	; (80072c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d009      	beq.n	8007268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a1c      	ldr	r2, [pc, #112]	; (80072cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d004      	beq.n	8007268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a1b      	ldr	r2, [pc, #108]	; (80072d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d101      	bne.n	800726c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007268:	2301      	movs	r3, #1
 800726a:	e000      	b.n	800726e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800726c:	2300      	movs	r3, #0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00a      	beq.n	8007288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	4b17      	ldr	r3, [pc, #92]	; (80072d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	461a      	mov	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a15      	ldr	r2, [pc, #84]	; (80072d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007284:	671a      	str	r2, [r3, #112]	; 0x70
 8007286:	e009      	b.n	800729c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	4b14      	ldr	r3, [pc, #80]	; (80072dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800728c:	4413      	add	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	461a      	mov	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a11      	ldr	r2, [pc, #68]	; (80072e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800729a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	3b01      	subs	r3, #1
 80072a0:	2201      	movs	r2, #1
 80072a2:	409a      	lsls	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80072a8:	bf00      	nop
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr
 80072b4:	58025408 	.word	0x58025408
 80072b8:	5802541c 	.word	0x5802541c
 80072bc:	58025430 	.word	0x58025430
 80072c0:	58025444 	.word	0x58025444
 80072c4:	58025458 	.word	0x58025458
 80072c8:	5802546c 	.word	0x5802546c
 80072cc:	58025480 	.word	0x58025480
 80072d0:	58025494 	.word	0x58025494
 80072d4:	1600963f 	.word	0x1600963f
 80072d8:	58025940 	.word	0x58025940
 80072dc:	1000823f 	.word	0x1000823f
 80072e0:	40020940 	.word	0x40020940

080072e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b089      	sub	sp, #36	; 0x24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80072ee:	2300      	movs	r3, #0
 80072f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80072f2:	4b86      	ldr	r3, [pc, #536]	; (800750c <HAL_GPIO_Init+0x228>)
 80072f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80072f6:	e18c      	b.n	8007612 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	2101      	movs	r1, #1
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	fa01 f303 	lsl.w	r3, r1, r3
 8007304:	4013      	ands	r3, r2
 8007306:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 817e 	beq.w	800760c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f003 0303 	and.w	r3, r3, #3
 8007318:	2b01      	cmp	r3, #1
 800731a:	d005      	beq.n	8007328 <HAL_GPIO_Init+0x44>
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f003 0303 	and.w	r3, r3, #3
 8007324:	2b02      	cmp	r3, #2
 8007326:	d130      	bne.n	800738a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	2203      	movs	r2, #3
 8007334:	fa02 f303 	lsl.w	r3, r2, r3
 8007338:	43db      	mvns	r3, r3
 800733a:	69ba      	ldr	r2, [r7, #24]
 800733c:	4013      	ands	r3, r2
 800733e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	68da      	ldr	r2, [r3, #12]
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	fa02 f303 	lsl.w	r3, r2, r3
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	4313      	orrs	r3, r2
 8007350:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800735e:	2201      	movs	r2, #1
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	fa02 f303 	lsl.w	r3, r2, r3
 8007366:	43db      	mvns	r3, r3
 8007368:	69ba      	ldr	r2, [r7, #24]
 800736a:	4013      	ands	r3, r2
 800736c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	091b      	lsrs	r3, r3, #4
 8007374:	f003 0201 	and.w	r2, r3, #1
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	fa02 f303 	lsl.w	r3, r2, r3
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	4313      	orrs	r3, r2
 8007382:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	69ba      	ldr	r2, [r7, #24]
 8007388:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f003 0303 	and.w	r3, r3, #3
 8007392:	2b03      	cmp	r3, #3
 8007394:	d017      	beq.n	80073c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	2203      	movs	r2, #3
 80073a2:	fa02 f303 	lsl.w	r3, r2, r3
 80073a6:	43db      	mvns	r3, r3
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	4013      	ands	r3, r2
 80073ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	689a      	ldr	r2, [r3, #8]
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	4313      	orrs	r3, r2
 80073be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f003 0303 	and.w	r3, r3, #3
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d123      	bne.n	800741a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	08da      	lsrs	r2, r3, #3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	3208      	adds	r2, #8
 80073da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	f003 0307 	and.w	r3, r3, #7
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	220f      	movs	r2, #15
 80073ea:	fa02 f303 	lsl.w	r3, r2, r3
 80073ee:	43db      	mvns	r3, r3
 80073f0:	69ba      	ldr	r2, [r7, #24]
 80073f2:	4013      	ands	r3, r2
 80073f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	691a      	ldr	r2, [r3, #16]
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	f003 0307 	and.w	r3, r3, #7
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	fa02 f303 	lsl.w	r3, r2, r3
 8007406:	69ba      	ldr	r2, [r7, #24]
 8007408:	4313      	orrs	r3, r2
 800740a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	08da      	lsrs	r2, r3, #3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3208      	adds	r2, #8
 8007414:	69b9      	ldr	r1, [r7, #24]
 8007416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	2203      	movs	r2, #3
 8007426:	fa02 f303 	lsl.w	r3, r2, r3
 800742a:	43db      	mvns	r3, r3
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	4013      	ands	r3, r2
 8007430:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f003 0203 	and.w	r2, r3, #3
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	fa02 f303 	lsl.w	r3, r2, r3
 8007442:	69ba      	ldr	r2, [r7, #24]
 8007444:	4313      	orrs	r3, r2
 8007446:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 80d8 	beq.w	800760c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800745c:	4b2c      	ldr	r3, [pc, #176]	; (8007510 <HAL_GPIO_Init+0x22c>)
 800745e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007462:	4a2b      	ldr	r2, [pc, #172]	; (8007510 <HAL_GPIO_Init+0x22c>)
 8007464:	f043 0302 	orr.w	r3, r3, #2
 8007468:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800746c:	4b28      	ldr	r3, [pc, #160]	; (8007510 <HAL_GPIO_Init+0x22c>)
 800746e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800747a:	4a26      	ldr	r2, [pc, #152]	; (8007514 <HAL_GPIO_Init+0x230>)
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	089b      	lsrs	r3, r3, #2
 8007480:	3302      	adds	r3, #2
 8007482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	f003 0303 	and.w	r3, r3, #3
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	220f      	movs	r2, #15
 8007492:	fa02 f303 	lsl.w	r3, r2, r3
 8007496:	43db      	mvns	r3, r3
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	4013      	ands	r3, r2
 800749c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a1d      	ldr	r2, [pc, #116]	; (8007518 <HAL_GPIO_Init+0x234>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d04a      	beq.n	800753c <HAL_GPIO_Init+0x258>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a1c      	ldr	r2, [pc, #112]	; (800751c <HAL_GPIO_Init+0x238>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d02b      	beq.n	8007506 <HAL_GPIO_Init+0x222>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a1b      	ldr	r2, [pc, #108]	; (8007520 <HAL_GPIO_Init+0x23c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d025      	beq.n	8007502 <HAL_GPIO_Init+0x21e>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a1a      	ldr	r2, [pc, #104]	; (8007524 <HAL_GPIO_Init+0x240>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d01f      	beq.n	80074fe <HAL_GPIO_Init+0x21a>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a19      	ldr	r2, [pc, #100]	; (8007528 <HAL_GPIO_Init+0x244>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d019      	beq.n	80074fa <HAL_GPIO_Init+0x216>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a18      	ldr	r2, [pc, #96]	; (800752c <HAL_GPIO_Init+0x248>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d013      	beq.n	80074f6 <HAL_GPIO_Init+0x212>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a17      	ldr	r2, [pc, #92]	; (8007530 <HAL_GPIO_Init+0x24c>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d00d      	beq.n	80074f2 <HAL_GPIO_Init+0x20e>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a16      	ldr	r2, [pc, #88]	; (8007534 <HAL_GPIO_Init+0x250>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d007      	beq.n	80074ee <HAL_GPIO_Init+0x20a>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a15      	ldr	r2, [pc, #84]	; (8007538 <HAL_GPIO_Init+0x254>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d101      	bne.n	80074ea <HAL_GPIO_Init+0x206>
 80074e6:	2309      	movs	r3, #9
 80074e8:	e029      	b.n	800753e <HAL_GPIO_Init+0x25a>
 80074ea:	230a      	movs	r3, #10
 80074ec:	e027      	b.n	800753e <HAL_GPIO_Init+0x25a>
 80074ee:	2307      	movs	r3, #7
 80074f0:	e025      	b.n	800753e <HAL_GPIO_Init+0x25a>
 80074f2:	2306      	movs	r3, #6
 80074f4:	e023      	b.n	800753e <HAL_GPIO_Init+0x25a>
 80074f6:	2305      	movs	r3, #5
 80074f8:	e021      	b.n	800753e <HAL_GPIO_Init+0x25a>
 80074fa:	2304      	movs	r3, #4
 80074fc:	e01f      	b.n	800753e <HAL_GPIO_Init+0x25a>
 80074fe:	2303      	movs	r3, #3
 8007500:	e01d      	b.n	800753e <HAL_GPIO_Init+0x25a>
 8007502:	2302      	movs	r3, #2
 8007504:	e01b      	b.n	800753e <HAL_GPIO_Init+0x25a>
 8007506:	2301      	movs	r3, #1
 8007508:	e019      	b.n	800753e <HAL_GPIO_Init+0x25a>
 800750a:	bf00      	nop
 800750c:	58000080 	.word	0x58000080
 8007510:	58024400 	.word	0x58024400
 8007514:	58000400 	.word	0x58000400
 8007518:	58020000 	.word	0x58020000
 800751c:	58020400 	.word	0x58020400
 8007520:	58020800 	.word	0x58020800
 8007524:	58020c00 	.word	0x58020c00
 8007528:	58021000 	.word	0x58021000
 800752c:	58021400 	.word	0x58021400
 8007530:	58021800 	.word	0x58021800
 8007534:	58021c00 	.word	0x58021c00
 8007538:	58022400 	.word	0x58022400
 800753c:	2300      	movs	r3, #0
 800753e:	69fa      	ldr	r2, [r7, #28]
 8007540:	f002 0203 	and.w	r2, r2, #3
 8007544:	0092      	lsls	r2, r2, #2
 8007546:	4093      	lsls	r3, r2
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	4313      	orrs	r3, r2
 800754c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800754e:	4938      	ldr	r1, [pc, #224]	; (8007630 <HAL_GPIO_Init+0x34c>)
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	089b      	lsrs	r3, r3, #2
 8007554:	3302      	adds	r3, #2
 8007556:	69ba      	ldr	r2, [r7, #24]
 8007558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800755c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	43db      	mvns	r3, r3
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	4013      	ands	r3, r2
 800756c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	4313      	orrs	r3, r2
 8007580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007582:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800758a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	43db      	mvns	r3, r3
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	4013      	ands	r3, r2
 800759a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d003      	beq.n	80075b0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80075b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	43db      	mvns	r3, r3
 80075c2:	69ba      	ldr	r2, [r7, #24]
 80075c4:	4013      	ands	r3, r2
 80075c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d003      	beq.n	80075dc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80075d4:	69ba      	ldr	r2, [r7, #24]
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	4313      	orrs	r3, r2
 80075da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	69ba      	ldr	r2, [r7, #24]
 80075e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	43db      	mvns	r3, r3
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	4013      	ands	r3, r2
 80075f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	4313      	orrs	r3, r2
 8007604:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	3301      	adds	r3, #1
 8007610:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	fa22 f303 	lsr.w	r3, r2, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	f47f ae6b 	bne.w	80072f8 <HAL_GPIO_Init+0x14>
  }
}
 8007622:	bf00      	nop
 8007624:	bf00      	nop
 8007626:	3724      	adds	r7, #36	; 0x24
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	58000400 	.word	0x58000400

08007634 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800763e:	2300      	movs	r3, #0
 8007640:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007642:	4b72      	ldr	r3, [pc, #456]	; (800780c <HAL_GPIO_DeInit+0x1d8>)
 8007644:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8007646:	e0d3      	b.n	80077f0 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007648:	2201      	movs	r2, #1
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	fa02 f303 	lsl.w	r3, r2, r3
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	4013      	ands	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 80c6 	beq.w	80077ea <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800765e:	4a6c      	ldr	r2, [pc, #432]	; (8007810 <HAL_GPIO_DeInit+0x1dc>)
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	089b      	lsrs	r3, r3, #2
 8007664:	3302      	adds	r3, #2
 8007666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800766a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	f003 0303 	and.w	r3, r3, #3
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	220f      	movs	r2, #15
 8007676:	fa02 f303 	lsl.w	r3, r2, r3
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	4013      	ands	r3, r2
 800767e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a64      	ldr	r2, [pc, #400]	; (8007814 <HAL_GPIO_DeInit+0x1e0>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d031      	beq.n	80076ec <HAL_GPIO_DeInit+0xb8>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a63      	ldr	r2, [pc, #396]	; (8007818 <HAL_GPIO_DeInit+0x1e4>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d02b      	beq.n	80076e8 <HAL_GPIO_DeInit+0xb4>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a62      	ldr	r2, [pc, #392]	; (800781c <HAL_GPIO_DeInit+0x1e8>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d025      	beq.n	80076e4 <HAL_GPIO_DeInit+0xb0>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a61      	ldr	r2, [pc, #388]	; (8007820 <HAL_GPIO_DeInit+0x1ec>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d01f      	beq.n	80076e0 <HAL_GPIO_DeInit+0xac>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a60      	ldr	r2, [pc, #384]	; (8007824 <HAL_GPIO_DeInit+0x1f0>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d019      	beq.n	80076dc <HAL_GPIO_DeInit+0xa8>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a5f      	ldr	r2, [pc, #380]	; (8007828 <HAL_GPIO_DeInit+0x1f4>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d013      	beq.n	80076d8 <HAL_GPIO_DeInit+0xa4>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a5e      	ldr	r2, [pc, #376]	; (800782c <HAL_GPIO_DeInit+0x1f8>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d00d      	beq.n	80076d4 <HAL_GPIO_DeInit+0xa0>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a5d      	ldr	r2, [pc, #372]	; (8007830 <HAL_GPIO_DeInit+0x1fc>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d007      	beq.n	80076d0 <HAL_GPIO_DeInit+0x9c>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a5c      	ldr	r2, [pc, #368]	; (8007834 <HAL_GPIO_DeInit+0x200>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d101      	bne.n	80076cc <HAL_GPIO_DeInit+0x98>
 80076c8:	2309      	movs	r3, #9
 80076ca:	e010      	b.n	80076ee <HAL_GPIO_DeInit+0xba>
 80076cc:	230a      	movs	r3, #10
 80076ce:	e00e      	b.n	80076ee <HAL_GPIO_DeInit+0xba>
 80076d0:	2307      	movs	r3, #7
 80076d2:	e00c      	b.n	80076ee <HAL_GPIO_DeInit+0xba>
 80076d4:	2306      	movs	r3, #6
 80076d6:	e00a      	b.n	80076ee <HAL_GPIO_DeInit+0xba>
 80076d8:	2305      	movs	r3, #5
 80076da:	e008      	b.n	80076ee <HAL_GPIO_DeInit+0xba>
 80076dc:	2304      	movs	r3, #4
 80076de:	e006      	b.n	80076ee <HAL_GPIO_DeInit+0xba>
 80076e0:	2303      	movs	r3, #3
 80076e2:	e004      	b.n	80076ee <HAL_GPIO_DeInit+0xba>
 80076e4:	2302      	movs	r3, #2
 80076e6:	e002      	b.n	80076ee <HAL_GPIO_DeInit+0xba>
 80076e8:	2301      	movs	r3, #1
 80076ea:	e000      	b.n	80076ee <HAL_GPIO_DeInit+0xba>
 80076ec:	2300      	movs	r3, #0
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	f002 0203 	and.w	r2, r2, #3
 80076f4:	0092      	lsls	r2, r2, #2
 80076f6:	4093      	lsls	r3, r2
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d136      	bne.n	800776c <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	43db      	mvns	r3, r3
 8007706:	401a      	ands	r2, r3
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	43db      	mvns	r3, r3
 8007714:	401a      	ands	r2, r3
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800771a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	43db      	mvns	r3, r3
 8007724:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007728:	4013      	ands	r3, r2
 800772a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800772c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	43db      	mvns	r3, r3
 8007736:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800773a:	4013      	ands	r3, r2
 800773c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f003 0303 	and.w	r3, r3, #3
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	220f      	movs	r2, #15
 8007748:	fa02 f303 	lsl.w	r3, r2, r3
 800774c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800774e:	4a30      	ldr	r2, [pc, #192]	; (8007810 <HAL_GPIO_DeInit+0x1dc>)
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	089b      	lsrs	r3, r3, #2
 8007754:	3302      	adds	r3, #2
 8007756:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	43da      	mvns	r2, r3
 800775e:	482c      	ldr	r0, [pc, #176]	; (8007810 <HAL_GPIO_DeInit+0x1dc>)
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	089b      	lsrs	r3, r3, #2
 8007764:	400a      	ands	r2, r1
 8007766:	3302      	adds	r3, #2
 8007768:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	005b      	lsls	r3, r3, #1
 8007774:	2103      	movs	r1, #3
 8007776:	fa01 f303 	lsl.w	r3, r1, r3
 800777a:	431a      	orrs	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	08da      	lsrs	r2, r3, #3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	3208      	adds	r2, #8
 8007788:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	f003 0307 	and.w	r3, r3, #7
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	220f      	movs	r2, #15
 8007796:	fa02 f303 	lsl.w	r3, r2, r3
 800779a:	43db      	mvns	r3, r3
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	08d2      	lsrs	r2, r2, #3
 80077a0:	4019      	ands	r1, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	3208      	adds	r2, #8
 80077a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68da      	ldr	r2, [r3, #12]
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	005b      	lsls	r3, r3, #1
 80077b2:	2103      	movs	r1, #3
 80077b4:	fa01 f303 	lsl.w	r3, r1, r3
 80077b8:	43db      	mvns	r3, r3
 80077ba:	401a      	ands	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	2101      	movs	r1, #1
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	fa01 f303 	lsl.w	r3, r1, r3
 80077cc:	43db      	mvns	r3, r3
 80077ce:	401a      	ands	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	689a      	ldr	r2, [r3, #8]
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	005b      	lsls	r3, r3, #1
 80077dc:	2103      	movs	r1, #3
 80077de:	fa01 f303 	lsl.w	r3, r1, r3
 80077e2:	43db      	mvns	r3, r3
 80077e4:	401a      	ands	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	609a      	str	r2, [r3, #8]
    }

    position++;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	3301      	adds	r3, #1
 80077ee:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80077f0:	683a      	ldr	r2, [r7, #0]
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	fa22 f303 	lsr.w	r3, r2, r3
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f47f af25 	bne.w	8007648 <HAL_GPIO_DeInit+0x14>
  }
}
 80077fe:	bf00      	nop
 8007800:	bf00      	nop
 8007802:	371c      	adds	r7, #28
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	58000080 	.word	0x58000080
 8007810:	58000400 	.word	0x58000400
 8007814:	58020000 	.word	0x58020000
 8007818:	58020400 	.word	0x58020400
 800781c:	58020800 	.word	0x58020800
 8007820:	58020c00 	.word	0x58020c00
 8007824:	58021000 	.word	0x58021000
 8007828:	58021400 	.word	0x58021400
 800782c:	58021800 	.word	0x58021800
 8007830:	58021c00 	.word	0x58021c00
 8007834:	58022400 	.word	0x58022400

08007838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	460b      	mov	r3, r1
 8007842:	807b      	strh	r3, [r7, #2]
 8007844:	4613      	mov	r3, r2
 8007846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007848:	787b      	ldrb	r3, [r7, #1]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800784e:	887a      	ldrh	r2, [r7, #2]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007854:	e003      	b.n	800785e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007856:	887b      	ldrh	r3, [r7, #2]
 8007858:	041a      	lsls	r2, r3, #16
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	619a      	str	r2, [r3, #24]
}
 800785e:	bf00      	nop
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
	...

0800786c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007874:	4b19      	ldr	r3, [pc, #100]	; (80078dc <HAL_PWREx_ConfigSupply+0x70>)
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	f003 0304 	and.w	r3, r3, #4
 800787c:	2b04      	cmp	r3, #4
 800787e:	d00a      	beq.n	8007896 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007880:	4b16      	ldr	r3, [pc, #88]	; (80078dc <HAL_PWREx_ConfigSupply+0x70>)
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	f003 0307 	and.w	r3, r3, #7
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	429a      	cmp	r2, r3
 800788c:	d001      	beq.n	8007892 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e01f      	b.n	80078d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	e01d      	b.n	80078d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007896:	4b11      	ldr	r3, [pc, #68]	; (80078dc <HAL_PWREx_ConfigSupply+0x70>)
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f023 0207 	bic.w	r2, r3, #7
 800789e:	490f      	ldr	r1, [pc, #60]	; (80078dc <HAL_PWREx_ConfigSupply+0x70>)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80078a6:	f7fc fbdf 	bl	8004068 <HAL_GetTick>
 80078aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80078ac:	e009      	b.n	80078c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80078ae:	f7fc fbdb 	bl	8004068 <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078bc:	d901      	bls.n	80078c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e007      	b.n	80078d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80078c2:	4b06      	ldr	r3, [pc, #24]	; (80078dc <HAL_PWREx_ConfigSupply+0x70>)
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ce:	d1ee      	bne.n	80078ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	58024800 	.word	0x58024800

080078e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08c      	sub	sp, #48	; 0x30
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e3c8      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 8087 	beq.w	8007a0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007900:	4b88      	ldr	r3, [pc, #544]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007908:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800790a:	4b86      	ldr	r3, [pc, #536]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 800790c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007912:	2b10      	cmp	r3, #16
 8007914:	d007      	beq.n	8007926 <HAL_RCC_OscConfig+0x46>
 8007916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007918:	2b18      	cmp	r3, #24
 800791a:	d110      	bne.n	800793e <HAL_RCC_OscConfig+0x5e>
 800791c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791e:	f003 0303 	and.w	r3, r3, #3
 8007922:	2b02      	cmp	r3, #2
 8007924:	d10b      	bne.n	800793e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007926:	4b7f      	ldr	r3, [pc, #508]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d06c      	beq.n	8007a0c <HAL_RCC_OscConfig+0x12c>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d168      	bne.n	8007a0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e3a2      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007946:	d106      	bne.n	8007956 <HAL_RCC_OscConfig+0x76>
 8007948:	4b76      	ldr	r3, [pc, #472]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a75      	ldr	r2, [pc, #468]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 800794e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007952:	6013      	str	r3, [r2, #0]
 8007954:	e02e      	b.n	80079b4 <HAL_RCC_OscConfig+0xd4>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10c      	bne.n	8007978 <HAL_RCC_OscConfig+0x98>
 800795e:	4b71      	ldr	r3, [pc, #452]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a70      	ldr	r2, [pc, #448]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007968:	6013      	str	r3, [r2, #0]
 800796a:	4b6e      	ldr	r3, [pc, #440]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a6d      	ldr	r2, [pc, #436]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007970:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	e01d      	b.n	80079b4 <HAL_RCC_OscConfig+0xd4>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007980:	d10c      	bne.n	800799c <HAL_RCC_OscConfig+0xbc>
 8007982:	4b68      	ldr	r3, [pc, #416]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a67      	ldr	r2, [pc, #412]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	4b65      	ldr	r3, [pc, #404]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a64      	ldr	r2, [pc, #400]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	e00b      	b.n	80079b4 <HAL_RCC_OscConfig+0xd4>
 800799c:	4b61      	ldr	r3, [pc, #388]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a60      	ldr	r2, [pc, #384]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 80079a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079a6:	6013      	str	r3, [r2, #0]
 80079a8:	4b5e      	ldr	r3, [pc, #376]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a5d      	ldr	r2, [pc, #372]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 80079ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d013      	beq.n	80079e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079bc:	f7fc fb54 	bl	8004068 <HAL_GetTick>
 80079c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079c2:	e008      	b.n	80079d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079c4:	f7fc fb50 	bl	8004068 <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	2b64      	cmp	r3, #100	; 0x64
 80079d0:	d901      	bls.n	80079d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e356      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079d6:	4b53      	ldr	r3, [pc, #332]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d0f0      	beq.n	80079c4 <HAL_RCC_OscConfig+0xe4>
 80079e2:	e014      	b.n	8007a0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e4:	f7fc fb40 	bl	8004068 <HAL_GetTick>
 80079e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80079ea:	e008      	b.n	80079fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079ec:	f7fc fb3c 	bl	8004068 <HAL_GetTick>
 80079f0:	4602      	mov	r2, r0
 80079f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	2b64      	cmp	r3, #100	; 0x64
 80079f8:	d901      	bls.n	80079fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e342      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80079fe:	4b49      	ldr	r3, [pc, #292]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1f0      	bne.n	80079ec <HAL_RCC_OscConfig+0x10c>
 8007a0a:	e000      	b.n	8007a0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 808c 	beq.w	8007b34 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a1c:	4b41      	ldr	r3, [pc, #260]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a26:	4b3f      	ldr	r3, [pc, #252]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d007      	beq.n	8007a42 <HAL_RCC_OscConfig+0x162>
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	2b18      	cmp	r3, #24
 8007a36:	d137      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x1c8>
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d132      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a42:	4b38      	ldr	r3, [pc, #224]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0304 	and.w	r3, r3, #4
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d005      	beq.n	8007a5a <HAL_RCC_OscConfig+0x17a>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e314      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007a5a:	4b32      	ldr	r3, [pc, #200]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f023 0219 	bic.w	r2, r3, #25
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	492f      	ldr	r1, [pc, #188]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a6c:	f7fc fafc 	bl	8004068 <HAL_GetTick>
 8007a70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a72:	e008      	b.n	8007a86 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a74:	f7fc faf8 	bl	8004068 <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d901      	bls.n	8007a86 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e2fe      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a86:	4b27      	ldr	r3, [pc, #156]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 0304 	and.w	r3, r3, #4
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d0f0      	beq.n	8007a74 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a92:	4b24      	ldr	r3, [pc, #144]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	061b      	lsls	r3, r3, #24
 8007aa0:	4920      	ldr	r1, [pc, #128]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007aa6:	e045      	b.n	8007b34 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d026      	beq.n	8007afe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007ab0:	4b1c      	ldr	r3, [pc, #112]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f023 0219 	bic.w	r2, r3, #25
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	4919      	ldr	r1, [pc, #100]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac2:	f7fc fad1 	bl	8004068 <HAL_GetTick>
 8007ac6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ac8:	e008      	b.n	8007adc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007aca:	f7fc facd 	bl	8004068 <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d901      	bls.n	8007adc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e2d3      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007adc:	4b11      	ldr	r3, [pc, #68]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0304 	and.w	r3, r3, #4
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d0f0      	beq.n	8007aca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ae8:	4b0e      	ldr	r3, [pc, #56]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	061b      	lsls	r3, r3, #24
 8007af6:	490b      	ldr	r1, [pc, #44]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	604b      	str	r3, [r1, #4]
 8007afc:	e01a      	b.n	8007b34 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007afe:	4b09      	ldr	r3, [pc, #36]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a08      	ldr	r2, [pc, #32]	; (8007b24 <HAL_RCC_OscConfig+0x244>)
 8007b04:	f023 0301 	bic.w	r3, r3, #1
 8007b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b0a:	f7fc faad 	bl	8004068 <HAL_GetTick>
 8007b0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b10:	e00a      	b.n	8007b28 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b12:	f7fc faa9 	bl	8004068 <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d903      	bls.n	8007b28 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e2af      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
 8007b24:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b28:	4b96      	ldr	r3, [pc, #600]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0304 	and.w	r3, r3, #4
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1ee      	bne.n	8007b12 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0310 	and.w	r3, r3, #16
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d06a      	beq.n	8007c16 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b40:	4b90      	ldr	r3, [pc, #576]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b48:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b4a:	4b8e      	ldr	r3, [pc, #568]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	2b08      	cmp	r3, #8
 8007b54:	d007      	beq.n	8007b66 <HAL_RCC_OscConfig+0x286>
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	2b18      	cmp	r3, #24
 8007b5a:	d11b      	bne.n	8007b94 <HAL_RCC_OscConfig+0x2b4>
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	f003 0303 	and.w	r3, r3, #3
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d116      	bne.n	8007b94 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b66:	4b87      	ldr	r3, [pc, #540]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d005      	beq.n	8007b7e <HAL_RCC_OscConfig+0x29e>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	2b80      	cmp	r3, #128	; 0x80
 8007b78:	d001      	beq.n	8007b7e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e282      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b7e:	4b81      	ldr	r3, [pc, #516]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	061b      	lsls	r3, r3, #24
 8007b8c:	497d      	ldr	r1, [pc, #500]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b92:	e040      	b.n	8007c16 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	69db      	ldr	r3, [r3, #28]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d023      	beq.n	8007be4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007b9c:	4b79      	ldr	r3, [pc, #484]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a78      	ldr	r2, [pc, #480]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ba8:	f7fc fa5e 	bl	8004068 <HAL_GetTick>
 8007bac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007bae:	e008      	b.n	8007bc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007bb0:	f7fc fa5a 	bl	8004068 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d901      	bls.n	8007bc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e260      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007bc2:	4b70      	ldr	r3, [pc, #448]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d0f0      	beq.n	8007bb0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007bce:	4b6d      	ldr	r3, [pc, #436]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	061b      	lsls	r3, r3, #24
 8007bdc:	4969      	ldr	r1, [pc, #420]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60cb      	str	r3, [r1, #12]
 8007be2:	e018      	b.n	8007c16 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007be4:	4b67      	ldr	r3, [pc, #412]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a66      	ldr	r2, [pc, #408]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bf0:	f7fc fa3a 	bl	8004068 <HAL_GetTick>
 8007bf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007bf6:	e008      	b.n	8007c0a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007bf8:	f7fc fa36 	bl	8004068 <HAL_GetTick>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d901      	bls.n	8007c0a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e23c      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007c0a:	4b5e      	ldr	r3, [pc, #376]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1f0      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0308 	and.w	r3, r3, #8
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d036      	beq.n	8007c90 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d019      	beq.n	8007c5e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c2a:	4b56      	ldr	r3, [pc, #344]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c2e:	4a55      	ldr	r2, [pc, #340]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007c30:	f043 0301 	orr.w	r3, r3, #1
 8007c34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c36:	f7fc fa17 	bl	8004068 <HAL_GetTick>
 8007c3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c3c:	e008      	b.n	8007c50 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c3e:	f7fc fa13 	bl	8004068 <HAL_GetTick>
 8007c42:	4602      	mov	r2, r0
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d901      	bls.n	8007c50 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e219      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c50:	4b4c      	ldr	r3, [pc, #304]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c54:	f003 0302 	and.w	r3, r3, #2
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d0f0      	beq.n	8007c3e <HAL_RCC_OscConfig+0x35e>
 8007c5c:	e018      	b.n	8007c90 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c5e:	4b49      	ldr	r3, [pc, #292]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c62:	4a48      	ldr	r2, [pc, #288]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007c64:	f023 0301 	bic.w	r3, r3, #1
 8007c68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c6a:	f7fc f9fd 	bl	8004068 <HAL_GetTick>
 8007c6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c70:	e008      	b.n	8007c84 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c72:	f7fc f9f9 	bl	8004068 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d901      	bls.n	8007c84 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e1ff      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c84:	4b3f      	ldr	r3, [pc, #252]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c88:	f003 0302 	and.w	r3, r3, #2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1f0      	bne.n	8007c72 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0320 	and.w	r3, r3, #32
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d036      	beq.n	8007d0a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d019      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007ca4:	4b37      	ldr	r3, [pc, #220]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a36      	ldr	r2, [pc, #216]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007caa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007cae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007cb0:	f7fc f9da 	bl	8004068 <HAL_GetTick>
 8007cb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007cb6:	e008      	b.n	8007cca <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007cb8:	f7fc f9d6 	bl	8004068 <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d901      	bls.n	8007cca <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e1dc      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007cca:	4b2e      	ldr	r3, [pc, #184]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0f0      	beq.n	8007cb8 <HAL_RCC_OscConfig+0x3d8>
 8007cd6:	e018      	b.n	8007d0a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007cd8:	4b2a      	ldr	r3, [pc, #168]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a29      	ldr	r2, [pc, #164]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ce2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007ce4:	f7fc f9c0 	bl	8004068 <HAL_GetTick>
 8007ce8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007cea:	e008      	b.n	8007cfe <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007cec:	f7fc f9bc 	bl	8004068 <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d901      	bls.n	8007cfe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e1c2      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007cfe:	4b21      	ldr	r3, [pc, #132]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1f0      	bne.n	8007cec <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0304 	and.w	r3, r3, #4
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f000 8086 	beq.w	8007e24 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007d18:	4b1b      	ldr	r3, [pc, #108]	; (8007d88 <HAL_RCC_OscConfig+0x4a8>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a1a      	ldr	r2, [pc, #104]	; (8007d88 <HAL_RCC_OscConfig+0x4a8>)
 8007d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d24:	f7fc f9a0 	bl	8004068 <HAL_GetTick>
 8007d28:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d2a:	e008      	b.n	8007d3e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d2c:	f7fc f99c 	bl	8004068 <HAL_GetTick>
 8007d30:	4602      	mov	r2, r0
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	2b64      	cmp	r3, #100	; 0x64
 8007d38:	d901      	bls.n	8007d3e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e1a2      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d3e:	4b12      	ldr	r3, [pc, #72]	; (8007d88 <HAL_RCC_OscConfig+0x4a8>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d0f0      	beq.n	8007d2c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d106      	bne.n	8007d60 <HAL_RCC_OscConfig+0x480>
 8007d52:	4b0c      	ldr	r3, [pc, #48]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d56:	4a0b      	ldr	r2, [pc, #44]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007d58:	f043 0301 	orr.w	r3, r3, #1
 8007d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8007d5e:	e032      	b.n	8007dc6 <HAL_RCC_OscConfig+0x4e6>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d111      	bne.n	8007d8c <HAL_RCC_OscConfig+0x4ac>
 8007d68:	4b06      	ldr	r3, [pc, #24]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d6c:	4a05      	ldr	r2, [pc, #20]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007d6e:	f023 0301 	bic.w	r3, r3, #1
 8007d72:	6713      	str	r3, [r2, #112]	; 0x70
 8007d74:	4b03      	ldr	r3, [pc, #12]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d78:	4a02      	ldr	r2, [pc, #8]	; (8007d84 <HAL_RCC_OscConfig+0x4a4>)
 8007d7a:	f023 0304 	bic.w	r3, r3, #4
 8007d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d80:	e021      	b.n	8007dc6 <HAL_RCC_OscConfig+0x4e6>
 8007d82:	bf00      	nop
 8007d84:	58024400 	.word	0x58024400
 8007d88:	58024800 	.word	0x58024800
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	2b05      	cmp	r3, #5
 8007d92:	d10c      	bne.n	8007dae <HAL_RCC_OscConfig+0x4ce>
 8007d94:	4b83      	ldr	r3, [pc, #524]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d98:	4a82      	ldr	r2, [pc, #520]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007d9a:	f043 0304 	orr.w	r3, r3, #4
 8007d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8007da0:	4b80      	ldr	r3, [pc, #512]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da4:	4a7f      	ldr	r2, [pc, #508]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007da6:	f043 0301 	orr.w	r3, r3, #1
 8007daa:	6713      	str	r3, [r2, #112]	; 0x70
 8007dac:	e00b      	b.n	8007dc6 <HAL_RCC_OscConfig+0x4e6>
 8007dae:	4b7d      	ldr	r3, [pc, #500]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db2:	4a7c      	ldr	r2, [pc, #496]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007db4:	f023 0301 	bic.w	r3, r3, #1
 8007db8:	6713      	str	r3, [r2, #112]	; 0x70
 8007dba:	4b7a      	ldr	r3, [pc, #488]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dbe:	4a79      	ldr	r2, [pc, #484]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007dc0:	f023 0304 	bic.w	r3, r3, #4
 8007dc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d015      	beq.n	8007dfa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dce:	f7fc f94b 	bl	8004068 <HAL_GetTick>
 8007dd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dd4:	e00a      	b.n	8007dec <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dd6:	f7fc f947 	bl	8004068 <HAL_GetTick>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d901      	bls.n	8007dec <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e14b      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dec:	4b6d      	ldr	r3, [pc, #436]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d0ee      	beq.n	8007dd6 <HAL_RCC_OscConfig+0x4f6>
 8007df8:	e014      	b.n	8007e24 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dfa:	f7fc f935 	bl	8004068 <HAL_GetTick>
 8007dfe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007e00:	e00a      	b.n	8007e18 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e02:	f7fc f931 	bl	8004068 <HAL_GetTick>
 8007e06:	4602      	mov	r2, r0
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d901      	bls.n	8007e18 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e135      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007e18:	4b62      	ldr	r3, [pc, #392]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e1c:	f003 0302 	and.w	r3, r3, #2
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1ee      	bne.n	8007e02 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 812a 	beq.w	8008082 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007e2e:	4b5d      	ldr	r3, [pc, #372]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e36:	2b18      	cmp	r3, #24
 8007e38:	f000 80ba 	beq.w	8007fb0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	f040 8095 	bne.w	8007f70 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e46:	4b57      	ldr	r3, [pc, #348]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a56      	ldr	r2, [pc, #344]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007e4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e52:	f7fc f909 	bl	8004068 <HAL_GetTick>
 8007e56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e58:	e008      	b.n	8007e6c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e5a:	f7fc f905 	bl	8004068 <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d901      	bls.n	8007e6c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e10b      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e6c:	4b4d      	ldr	r3, [pc, #308]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1f0      	bne.n	8007e5a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e78:	4b4a      	ldr	r3, [pc, #296]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007e7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e7c:	4b4a      	ldr	r3, [pc, #296]	; (8007fa8 <HAL_RCC_OscConfig+0x6c8>)
 8007e7e:	4013      	ands	r3, r2
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007e88:	0112      	lsls	r2, r2, #4
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	4945      	ldr	r1, [pc, #276]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	628b      	str	r3, [r1, #40]	; 0x28
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e96:	3b01      	subs	r3, #1
 8007e98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	025b      	lsls	r3, r3, #9
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eac:	3b01      	subs	r3, #1
 8007eae:	041b      	lsls	r3, r3, #16
 8007eb0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	061b      	lsls	r3, r3, #24
 8007ebe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ec2:	4938      	ldr	r1, [pc, #224]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007ec8:	4b36      	ldr	r3, [pc, #216]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ecc:	4a35      	ldr	r2, [pc, #212]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007ece:	f023 0301 	bic.w	r3, r3, #1
 8007ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007ed4:	4b33      	ldr	r3, [pc, #204]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ed8:	4b34      	ldr	r3, [pc, #208]	; (8007fac <HAL_RCC_OscConfig+0x6cc>)
 8007eda:	4013      	ands	r3, r2
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007ee0:	00d2      	lsls	r2, r2, #3
 8007ee2:	4930      	ldr	r1, [pc, #192]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007ee8:	4b2e      	ldr	r3, [pc, #184]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eec:	f023 020c 	bic.w	r2, r3, #12
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef4:	492b      	ldr	r1, [pc, #172]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007efa:	4b2a      	ldr	r3, [pc, #168]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efe:	f023 0202 	bic.w	r2, r3, #2
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f06:	4927      	ldr	r1, [pc, #156]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007f0c:	4b25      	ldr	r3, [pc, #148]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f10:	4a24      	ldr	r2, [pc, #144]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f18:	4b22      	ldr	r3, [pc, #136]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1c:	4a21      	ldr	r2, [pc, #132]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007f24:	4b1f      	ldr	r3, [pc, #124]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f28:	4a1e      	ldr	r2, [pc, #120]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007f2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007f30:	4b1c      	ldr	r3, [pc, #112]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f34:	4a1b      	ldr	r2, [pc, #108]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007f36:	f043 0301 	orr.w	r3, r3, #1
 8007f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f3c:	4b19      	ldr	r3, [pc, #100]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a18      	ldr	r2, [pc, #96]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f48:	f7fc f88e 	bl	8004068 <HAL_GetTick>
 8007f4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f4e:	e008      	b.n	8007f62 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f50:	f7fc f88a 	bl	8004068 <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d901      	bls.n	8007f62 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e090      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f62:	4b10      	ldr	r3, [pc, #64]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d0f0      	beq.n	8007f50 <HAL_RCC_OscConfig+0x670>
 8007f6e:	e088      	b.n	8008082 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f70:	4b0c      	ldr	r3, [pc, #48]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a0b      	ldr	r2, [pc, #44]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f7c:	f7fc f874 	bl	8004068 <HAL_GetTick>
 8007f80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f82:	e008      	b.n	8007f96 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f84:	f7fc f870 	bl	8004068 <HAL_GetTick>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d901      	bls.n	8007f96 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e076      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f96:	4b03      	ldr	r3, [pc, #12]	; (8007fa4 <HAL_RCC_OscConfig+0x6c4>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1f0      	bne.n	8007f84 <HAL_RCC_OscConfig+0x6a4>
 8007fa2:	e06e      	b.n	8008082 <HAL_RCC_OscConfig+0x7a2>
 8007fa4:	58024400 	.word	0x58024400
 8007fa8:	fffffc0c 	.word	0xfffffc0c
 8007fac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007fb0:	4b36      	ldr	r3, [pc, #216]	; (800808c <HAL_RCC_OscConfig+0x7ac>)
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007fb6:	4b35      	ldr	r3, [pc, #212]	; (800808c <HAL_RCC_OscConfig+0x7ac>)
 8007fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d031      	beq.n	8008028 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	f003 0203 	and.w	r2, r3, #3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d12a      	bne.n	8008028 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	091b      	lsrs	r3, r3, #4
 8007fd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d122      	bne.n	8008028 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d11a      	bne.n	8008028 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	0a5b      	lsrs	r3, r3, #9
 8007ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ffe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008000:	429a      	cmp	r2, r3
 8008002:	d111      	bne.n	8008028 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	0c1b      	lsrs	r3, r3, #16
 8008008:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008010:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008012:	429a      	cmp	r2, r3
 8008014:	d108      	bne.n	8008028 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	0e1b      	lsrs	r3, r3, #24
 800801a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008022:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008024:	429a      	cmp	r2, r3
 8008026:	d001      	beq.n	800802c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e02b      	b.n	8008084 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800802c:	4b17      	ldr	r3, [pc, #92]	; (800808c <HAL_RCC_OscConfig+0x7ac>)
 800802e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008030:	08db      	lsrs	r3, r3, #3
 8008032:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008036:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800803c:	693a      	ldr	r2, [r7, #16]
 800803e:	429a      	cmp	r2, r3
 8008040:	d01f      	beq.n	8008082 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008042:	4b12      	ldr	r3, [pc, #72]	; (800808c <HAL_RCC_OscConfig+0x7ac>)
 8008044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008046:	4a11      	ldr	r2, [pc, #68]	; (800808c <HAL_RCC_OscConfig+0x7ac>)
 8008048:	f023 0301 	bic.w	r3, r3, #1
 800804c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800804e:	f7fc f80b 	bl	8004068 <HAL_GetTick>
 8008052:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008054:	bf00      	nop
 8008056:	f7fc f807 	bl	8004068 <HAL_GetTick>
 800805a:	4602      	mov	r2, r0
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	4293      	cmp	r3, r2
 8008060:	d0f9      	beq.n	8008056 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008062:	4b0a      	ldr	r3, [pc, #40]	; (800808c <HAL_RCC_OscConfig+0x7ac>)
 8008064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008066:	4b0a      	ldr	r3, [pc, #40]	; (8008090 <HAL_RCC_OscConfig+0x7b0>)
 8008068:	4013      	ands	r3, r2
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800806e:	00d2      	lsls	r2, r2, #3
 8008070:	4906      	ldr	r1, [pc, #24]	; (800808c <HAL_RCC_OscConfig+0x7ac>)
 8008072:	4313      	orrs	r3, r2
 8008074:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008076:	4b05      	ldr	r3, [pc, #20]	; (800808c <HAL_RCC_OscConfig+0x7ac>)
 8008078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807a:	4a04      	ldr	r2, [pc, #16]	; (800808c <HAL_RCC_OscConfig+0x7ac>)
 800807c:	f043 0301 	orr.w	r3, r3, #1
 8008080:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3730      	adds	r7, #48	; 0x30
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	58024400 	.word	0x58024400
 8008090:	ffff0007 	.word	0xffff0007

08008094 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e19c      	b.n	80083e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80080a8:	4b8a      	ldr	r3, [pc, #552]	; (80082d4 <HAL_RCC_ClockConfig+0x240>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 030f 	and.w	r3, r3, #15
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d910      	bls.n	80080d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080b6:	4b87      	ldr	r3, [pc, #540]	; (80082d4 <HAL_RCC_ClockConfig+0x240>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f023 020f 	bic.w	r2, r3, #15
 80080be:	4985      	ldr	r1, [pc, #532]	; (80082d4 <HAL_RCC_ClockConfig+0x240>)
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080c6:	4b83      	ldr	r3, [pc, #524]	; (80082d4 <HAL_RCC_ClockConfig+0x240>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 030f 	and.w	r3, r3, #15
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d001      	beq.n	80080d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e184      	b.n	80083e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0304 	and.w	r3, r3, #4
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d010      	beq.n	8008106 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	691a      	ldr	r2, [r3, #16]
 80080e8:	4b7b      	ldr	r3, [pc, #492]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d908      	bls.n	8008106 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80080f4:	4b78      	ldr	r3, [pc, #480]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	4975      	ldr	r1, [pc, #468]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 8008102:	4313      	orrs	r3, r2
 8008104:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 0308 	and.w	r3, r3, #8
 800810e:	2b00      	cmp	r3, #0
 8008110:	d010      	beq.n	8008134 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	695a      	ldr	r2, [r3, #20]
 8008116:	4b70      	ldr	r3, [pc, #448]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 8008118:	69db      	ldr	r3, [r3, #28]
 800811a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800811e:	429a      	cmp	r2, r3
 8008120:	d908      	bls.n	8008134 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008122:	4b6d      	ldr	r3, [pc, #436]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	496a      	ldr	r1, [pc, #424]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 8008130:	4313      	orrs	r3, r2
 8008132:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 0310 	and.w	r3, r3, #16
 800813c:	2b00      	cmp	r3, #0
 800813e:	d010      	beq.n	8008162 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	699a      	ldr	r2, [r3, #24]
 8008144:	4b64      	ldr	r3, [pc, #400]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 8008146:	69db      	ldr	r3, [r3, #28]
 8008148:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800814c:	429a      	cmp	r2, r3
 800814e:	d908      	bls.n	8008162 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008150:	4b61      	ldr	r3, [pc, #388]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 8008152:	69db      	ldr	r3, [r3, #28]
 8008154:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	495e      	ldr	r1, [pc, #376]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 800815e:	4313      	orrs	r3, r2
 8008160:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0320 	and.w	r3, r3, #32
 800816a:	2b00      	cmp	r3, #0
 800816c:	d010      	beq.n	8008190 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	69da      	ldr	r2, [r3, #28]
 8008172:	4b59      	ldr	r3, [pc, #356]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800817a:	429a      	cmp	r2, r3
 800817c:	d908      	bls.n	8008190 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800817e:	4b56      	ldr	r3, [pc, #344]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	4953      	ldr	r1, [pc, #332]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 800818c:	4313      	orrs	r3, r2
 800818e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0302 	and.w	r3, r3, #2
 8008198:	2b00      	cmp	r3, #0
 800819a:	d010      	beq.n	80081be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	68da      	ldr	r2, [r3, #12]
 80081a0:	4b4d      	ldr	r3, [pc, #308]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	f003 030f 	and.w	r3, r3, #15
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d908      	bls.n	80081be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081ac:	4b4a      	ldr	r3, [pc, #296]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	f023 020f 	bic.w	r2, r3, #15
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	4947      	ldr	r1, [pc, #284]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d055      	beq.n	8008276 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80081ca:	4b43      	ldr	r3, [pc, #268]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	4940      	ldr	r1, [pc, #256]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 80081d8:	4313      	orrs	r3, r2
 80081da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d107      	bne.n	80081f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081e4:	4b3c      	ldr	r3, [pc, #240]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d121      	bne.n	8008234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e0f6      	b.n	80083e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	2b03      	cmp	r3, #3
 80081fa:	d107      	bne.n	800820c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081fc:	4b36      	ldr	r3, [pc, #216]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d115      	bne.n	8008234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e0ea      	b.n	80083e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d107      	bne.n	8008224 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008214:	4b30      	ldr	r3, [pc, #192]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800821c:	2b00      	cmp	r3, #0
 800821e:	d109      	bne.n	8008234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e0de      	b.n	80083e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008224:	4b2c      	ldr	r3, [pc, #176]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0304 	and.w	r3, r3, #4
 800822c:	2b00      	cmp	r3, #0
 800822e:	d101      	bne.n	8008234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e0d6      	b.n	80083e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008234:	4b28      	ldr	r3, [pc, #160]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	f023 0207 	bic.w	r2, r3, #7
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	4925      	ldr	r1, [pc, #148]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 8008242:	4313      	orrs	r3, r2
 8008244:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008246:	f7fb ff0f 	bl	8004068 <HAL_GetTick>
 800824a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800824c:	e00a      	b.n	8008264 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800824e:	f7fb ff0b 	bl	8004068 <HAL_GetTick>
 8008252:	4602      	mov	r2, r0
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	f241 3288 	movw	r2, #5000	; 0x1388
 800825c:	4293      	cmp	r3, r2
 800825e:	d901      	bls.n	8008264 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e0be      	b.n	80083e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008264:	4b1c      	ldr	r3, [pc, #112]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	00db      	lsls	r3, r3, #3
 8008272:	429a      	cmp	r2, r3
 8008274:	d1eb      	bne.n	800824e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 0302 	and.w	r3, r3, #2
 800827e:	2b00      	cmp	r3, #0
 8008280:	d010      	beq.n	80082a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68da      	ldr	r2, [r3, #12]
 8008286:	4b14      	ldr	r3, [pc, #80]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	f003 030f 	and.w	r3, r3, #15
 800828e:	429a      	cmp	r2, r3
 8008290:	d208      	bcs.n	80082a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008292:	4b11      	ldr	r3, [pc, #68]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	f023 020f 	bic.w	r2, r3, #15
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	490e      	ldr	r1, [pc, #56]	; (80082d8 <HAL_RCC_ClockConfig+0x244>)
 80082a0:	4313      	orrs	r3, r2
 80082a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082a4:	4b0b      	ldr	r3, [pc, #44]	; (80082d4 <HAL_RCC_ClockConfig+0x240>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 030f 	and.w	r3, r3, #15
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d214      	bcs.n	80082dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082b2:	4b08      	ldr	r3, [pc, #32]	; (80082d4 <HAL_RCC_ClockConfig+0x240>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f023 020f 	bic.w	r2, r3, #15
 80082ba:	4906      	ldr	r1, [pc, #24]	; (80082d4 <HAL_RCC_ClockConfig+0x240>)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	4313      	orrs	r3, r2
 80082c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082c2:	4b04      	ldr	r3, [pc, #16]	; (80082d4 <HAL_RCC_ClockConfig+0x240>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 030f 	and.w	r3, r3, #15
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d005      	beq.n	80082dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e086      	b.n	80083e2 <HAL_RCC_ClockConfig+0x34e>
 80082d4:	52002000 	.word	0x52002000
 80082d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0304 	and.w	r3, r3, #4
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d010      	beq.n	800830a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	691a      	ldr	r2, [r3, #16]
 80082ec:	4b3f      	ldr	r3, [pc, #252]	; (80083ec <HAL_RCC_ClockConfig+0x358>)
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d208      	bcs.n	800830a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80082f8:	4b3c      	ldr	r3, [pc, #240]	; (80083ec <HAL_RCC_ClockConfig+0x358>)
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	4939      	ldr	r1, [pc, #228]	; (80083ec <HAL_RCC_ClockConfig+0x358>)
 8008306:	4313      	orrs	r3, r2
 8008308:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 0308 	and.w	r3, r3, #8
 8008312:	2b00      	cmp	r3, #0
 8008314:	d010      	beq.n	8008338 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	695a      	ldr	r2, [r3, #20]
 800831a:	4b34      	ldr	r3, [pc, #208]	; (80083ec <HAL_RCC_ClockConfig+0x358>)
 800831c:	69db      	ldr	r3, [r3, #28]
 800831e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008322:	429a      	cmp	r2, r3
 8008324:	d208      	bcs.n	8008338 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008326:	4b31      	ldr	r3, [pc, #196]	; (80083ec <HAL_RCC_ClockConfig+0x358>)
 8008328:	69db      	ldr	r3, [r3, #28]
 800832a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	492e      	ldr	r1, [pc, #184]	; (80083ec <HAL_RCC_ClockConfig+0x358>)
 8008334:	4313      	orrs	r3, r2
 8008336:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0310 	and.w	r3, r3, #16
 8008340:	2b00      	cmp	r3, #0
 8008342:	d010      	beq.n	8008366 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	699a      	ldr	r2, [r3, #24]
 8008348:	4b28      	ldr	r3, [pc, #160]	; (80083ec <HAL_RCC_ClockConfig+0x358>)
 800834a:	69db      	ldr	r3, [r3, #28]
 800834c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008350:	429a      	cmp	r2, r3
 8008352:	d208      	bcs.n	8008366 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008354:	4b25      	ldr	r3, [pc, #148]	; (80083ec <HAL_RCC_ClockConfig+0x358>)
 8008356:	69db      	ldr	r3, [r3, #28]
 8008358:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	4922      	ldr	r1, [pc, #136]	; (80083ec <HAL_RCC_ClockConfig+0x358>)
 8008362:	4313      	orrs	r3, r2
 8008364:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0320 	and.w	r3, r3, #32
 800836e:	2b00      	cmp	r3, #0
 8008370:	d010      	beq.n	8008394 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	69da      	ldr	r2, [r3, #28]
 8008376:	4b1d      	ldr	r3, [pc, #116]	; (80083ec <HAL_RCC_ClockConfig+0x358>)
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800837e:	429a      	cmp	r2, r3
 8008380:	d208      	bcs.n	8008394 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008382:	4b1a      	ldr	r3, [pc, #104]	; (80083ec <HAL_RCC_ClockConfig+0x358>)
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	4917      	ldr	r1, [pc, #92]	; (80083ec <HAL_RCC_ClockConfig+0x358>)
 8008390:	4313      	orrs	r3, r2
 8008392:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008394:	f000 f834 	bl	8008400 <HAL_RCC_GetSysClockFreq>
 8008398:	4602      	mov	r2, r0
 800839a:	4b14      	ldr	r3, [pc, #80]	; (80083ec <HAL_RCC_ClockConfig+0x358>)
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	0a1b      	lsrs	r3, r3, #8
 80083a0:	f003 030f 	and.w	r3, r3, #15
 80083a4:	4912      	ldr	r1, [pc, #72]	; (80083f0 <HAL_RCC_ClockConfig+0x35c>)
 80083a6:	5ccb      	ldrb	r3, [r1, r3]
 80083a8:	f003 031f 	and.w	r3, r3, #31
 80083ac:	fa22 f303 	lsr.w	r3, r2, r3
 80083b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80083b2:	4b0e      	ldr	r3, [pc, #56]	; (80083ec <HAL_RCC_ClockConfig+0x358>)
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	f003 030f 	and.w	r3, r3, #15
 80083ba:	4a0d      	ldr	r2, [pc, #52]	; (80083f0 <HAL_RCC_ClockConfig+0x35c>)
 80083bc:	5cd3      	ldrb	r3, [r2, r3]
 80083be:	f003 031f 	and.w	r3, r3, #31
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	fa22 f303 	lsr.w	r3, r2, r3
 80083c8:	4a0a      	ldr	r2, [pc, #40]	; (80083f4 <HAL_RCC_ClockConfig+0x360>)
 80083ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80083cc:	4a0a      	ldr	r2, [pc, #40]	; (80083f8 <HAL_RCC_ClockConfig+0x364>)
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80083d2:	4b0a      	ldr	r3, [pc, #40]	; (80083fc <HAL_RCC_ClockConfig+0x368>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fb fdfc 	bl	8003fd4 <HAL_InitTick>
 80083dc:	4603      	mov	r3, r0
 80083de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	58024400 	.word	0x58024400
 80083f0:	0800e540 	.word	0x0800e540
 80083f4:	24000004 	.word	0x24000004
 80083f8:	24000000 	.word	0x24000000
 80083fc:	24000008 	.word	0x24000008

08008400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008400:	b480      	push	{r7}
 8008402:	b089      	sub	sp, #36	; 0x24
 8008404:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008406:	4bb3      	ldr	r3, [pc, #716]	; (80086d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800840e:	2b18      	cmp	r3, #24
 8008410:	f200 8155 	bhi.w	80086be <HAL_RCC_GetSysClockFreq+0x2be>
 8008414:	a201      	add	r2, pc, #4	; (adr r2, 800841c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841a:	bf00      	nop
 800841c:	08008481 	.word	0x08008481
 8008420:	080086bf 	.word	0x080086bf
 8008424:	080086bf 	.word	0x080086bf
 8008428:	080086bf 	.word	0x080086bf
 800842c:	080086bf 	.word	0x080086bf
 8008430:	080086bf 	.word	0x080086bf
 8008434:	080086bf 	.word	0x080086bf
 8008438:	080086bf 	.word	0x080086bf
 800843c:	080084a7 	.word	0x080084a7
 8008440:	080086bf 	.word	0x080086bf
 8008444:	080086bf 	.word	0x080086bf
 8008448:	080086bf 	.word	0x080086bf
 800844c:	080086bf 	.word	0x080086bf
 8008450:	080086bf 	.word	0x080086bf
 8008454:	080086bf 	.word	0x080086bf
 8008458:	080086bf 	.word	0x080086bf
 800845c:	080084ad 	.word	0x080084ad
 8008460:	080086bf 	.word	0x080086bf
 8008464:	080086bf 	.word	0x080086bf
 8008468:	080086bf 	.word	0x080086bf
 800846c:	080086bf 	.word	0x080086bf
 8008470:	080086bf 	.word	0x080086bf
 8008474:	080086bf 	.word	0x080086bf
 8008478:	080086bf 	.word	0x080086bf
 800847c:	080084b3 	.word	0x080084b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008480:	4b94      	ldr	r3, [pc, #592]	; (80086d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0320 	and.w	r3, r3, #32
 8008488:	2b00      	cmp	r3, #0
 800848a:	d009      	beq.n	80084a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800848c:	4b91      	ldr	r3, [pc, #580]	; (80086d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	08db      	lsrs	r3, r3, #3
 8008492:	f003 0303 	and.w	r3, r3, #3
 8008496:	4a90      	ldr	r2, [pc, #576]	; (80086d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008498:	fa22 f303 	lsr.w	r3, r2, r3
 800849c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800849e:	e111      	b.n	80086c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80084a0:	4b8d      	ldr	r3, [pc, #564]	; (80086d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80084a2:	61bb      	str	r3, [r7, #24]
      break;
 80084a4:	e10e      	b.n	80086c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80084a6:	4b8d      	ldr	r3, [pc, #564]	; (80086dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80084a8:	61bb      	str	r3, [r7, #24]
      break;
 80084aa:	e10b      	b.n	80086c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80084ac:	4b8c      	ldr	r3, [pc, #560]	; (80086e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80084ae:	61bb      	str	r3, [r7, #24]
      break;
 80084b0:	e108      	b.n	80086c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084b2:	4b88      	ldr	r3, [pc, #544]	; (80086d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b6:	f003 0303 	and.w	r3, r3, #3
 80084ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80084bc:	4b85      	ldr	r3, [pc, #532]	; (80086d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c0:	091b      	lsrs	r3, r3, #4
 80084c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80084c8:	4b82      	ldr	r3, [pc, #520]	; (80086d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80084d2:	4b80      	ldr	r3, [pc, #512]	; (80086d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d6:	08db      	lsrs	r3, r3, #3
 80084d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	fb02 f303 	mul.w	r3, r2, r3
 80084e2:	ee07 3a90 	vmov	s15, r3
 80084e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f000 80e1 	beq.w	80086b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	f000 8083 	beq.w	8008604 <HAL_RCC_GetSysClockFreq+0x204>
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2b02      	cmp	r3, #2
 8008502:	f200 80a1 	bhi.w	8008648 <HAL_RCC_GetSysClockFreq+0x248>
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d003      	beq.n	8008514 <HAL_RCC_GetSysClockFreq+0x114>
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	2b01      	cmp	r3, #1
 8008510:	d056      	beq.n	80085c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008512:	e099      	b.n	8008648 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008514:	4b6f      	ldr	r3, [pc, #444]	; (80086d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0320 	and.w	r3, r3, #32
 800851c:	2b00      	cmp	r3, #0
 800851e:	d02d      	beq.n	800857c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008520:	4b6c      	ldr	r3, [pc, #432]	; (80086d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	08db      	lsrs	r3, r3, #3
 8008526:	f003 0303 	and.w	r3, r3, #3
 800852a:	4a6b      	ldr	r2, [pc, #428]	; (80086d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800852c:	fa22 f303 	lsr.w	r3, r2, r3
 8008530:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	ee07 3a90 	vmov	s15, r3
 8008538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	ee07 3a90 	vmov	s15, r3
 8008542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800854a:	4b62      	ldr	r3, [pc, #392]	; (80086d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800854c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008552:	ee07 3a90 	vmov	s15, r3
 8008556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800855a:	ed97 6a02 	vldr	s12, [r7, #8]
 800855e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80086e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800856a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800856e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008576:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800857a:	e087      	b.n	800868c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	ee07 3a90 	vmov	s15, r3
 8008582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008586:	eddf 6a58 	vldr	s13, [pc, #352]	; 80086e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800858a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800858e:	4b51      	ldr	r3, [pc, #324]	; (80086d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008596:	ee07 3a90 	vmov	s15, r3
 800859a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800859e:	ed97 6a02 	vldr	s12, [r7, #8]
 80085a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80086e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80085a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80085be:	e065      	b.n	800868c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	ee07 3a90 	vmov	s15, r3
 80085c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80086ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80085ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085d2:	4b40      	ldr	r3, [pc, #256]	; (80086d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085da:	ee07 3a90 	vmov	s15, r3
 80085de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80085e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80086e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80085ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008602:	e043      	b.n	800868c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	ee07 3a90 	vmov	s15, r3
 800860a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800860e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80086f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008616:	4b2f      	ldr	r3, [pc, #188]	; (80086d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800861e:	ee07 3a90 	vmov	s15, r3
 8008622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008626:	ed97 6a02 	vldr	s12, [r7, #8]
 800862a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80086e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800862e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800863a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800863e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008642:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008646:	e021      	b.n	800868c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	ee07 3a90 	vmov	s15, r3
 800864e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008652:	eddf 6a26 	vldr	s13, [pc, #152]	; 80086ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8008656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800865a:	4b1e      	ldr	r3, [pc, #120]	; (80086d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800865c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008662:	ee07 3a90 	vmov	s15, r3
 8008666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800866a:	ed97 6a02 	vldr	s12, [r7, #8]
 800866e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80086e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800867a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800867e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008686:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800868a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800868c:	4b11      	ldr	r3, [pc, #68]	; (80086d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800868e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008690:	0a5b      	lsrs	r3, r3, #9
 8008692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008696:	3301      	adds	r3, #1
 8008698:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	ee07 3a90 	vmov	s15, r3
 80086a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80086a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80086a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086b0:	ee17 3a90 	vmov	r3, s15
 80086b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80086b6:	e005      	b.n	80086c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80086b8:	2300      	movs	r3, #0
 80086ba:	61bb      	str	r3, [r7, #24]
      break;
 80086bc:	e002      	b.n	80086c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80086be:	4b07      	ldr	r3, [pc, #28]	; (80086dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80086c0:	61bb      	str	r3, [r7, #24]
      break;
 80086c2:	bf00      	nop
  }

  return sysclockfreq;
 80086c4:	69bb      	ldr	r3, [r7, #24]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3724      	adds	r7, #36	; 0x24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	58024400 	.word	0x58024400
 80086d8:	03d09000 	.word	0x03d09000
 80086dc:	003d0900 	.word	0x003d0900
 80086e0:	007a1200 	.word	0x007a1200
 80086e4:	46000000 	.word	0x46000000
 80086e8:	4c742400 	.word	0x4c742400
 80086ec:	4a742400 	.word	0x4a742400
 80086f0:	4af42400 	.word	0x4af42400

080086f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80086fa:	f7ff fe81 	bl	8008400 <HAL_RCC_GetSysClockFreq>
 80086fe:	4602      	mov	r2, r0
 8008700:	4b10      	ldr	r3, [pc, #64]	; (8008744 <HAL_RCC_GetHCLKFreq+0x50>)
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	0a1b      	lsrs	r3, r3, #8
 8008706:	f003 030f 	and.w	r3, r3, #15
 800870a:	490f      	ldr	r1, [pc, #60]	; (8008748 <HAL_RCC_GetHCLKFreq+0x54>)
 800870c:	5ccb      	ldrb	r3, [r1, r3]
 800870e:	f003 031f 	and.w	r3, r3, #31
 8008712:	fa22 f303 	lsr.w	r3, r2, r3
 8008716:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008718:	4b0a      	ldr	r3, [pc, #40]	; (8008744 <HAL_RCC_GetHCLKFreq+0x50>)
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	f003 030f 	and.w	r3, r3, #15
 8008720:	4a09      	ldr	r2, [pc, #36]	; (8008748 <HAL_RCC_GetHCLKFreq+0x54>)
 8008722:	5cd3      	ldrb	r3, [r2, r3]
 8008724:	f003 031f 	and.w	r3, r3, #31
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	fa22 f303 	lsr.w	r3, r2, r3
 800872e:	4a07      	ldr	r2, [pc, #28]	; (800874c <HAL_RCC_GetHCLKFreq+0x58>)
 8008730:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008732:	4a07      	ldr	r2, [pc, #28]	; (8008750 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008738:	4b04      	ldr	r3, [pc, #16]	; (800874c <HAL_RCC_GetHCLKFreq+0x58>)
 800873a:	681b      	ldr	r3, [r3, #0]
}
 800873c:	4618      	mov	r0, r3
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	58024400 	.word	0x58024400
 8008748:	0800e540 	.word	0x0800e540
 800874c:	24000004 	.word	0x24000004
 8008750:	24000000 	.word	0x24000000

08008754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008758:	f7ff ffcc 	bl	80086f4 <HAL_RCC_GetHCLKFreq>
 800875c:	4602      	mov	r2, r0
 800875e:	4b06      	ldr	r3, [pc, #24]	; (8008778 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	091b      	lsrs	r3, r3, #4
 8008764:	f003 0307 	and.w	r3, r3, #7
 8008768:	4904      	ldr	r1, [pc, #16]	; (800877c <HAL_RCC_GetPCLK1Freq+0x28>)
 800876a:	5ccb      	ldrb	r3, [r1, r3]
 800876c:	f003 031f 	and.w	r3, r3, #31
 8008770:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008774:	4618      	mov	r0, r3
 8008776:	bd80      	pop	{r7, pc}
 8008778:	58024400 	.word	0x58024400
 800877c:	0800e540 	.word	0x0800e540

08008780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008784:	f7ff ffb6 	bl	80086f4 <HAL_RCC_GetHCLKFreq>
 8008788:	4602      	mov	r2, r0
 800878a:	4b06      	ldr	r3, [pc, #24]	; (80087a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	0a1b      	lsrs	r3, r3, #8
 8008790:	f003 0307 	and.w	r3, r3, #7
 8008794:	4904      	ldr	r1, [pc, #16]	; (80087a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008796:	5ccb      	ldrb	r3, [r1, r3]
 8008798:	f003 031f 	and.w	r3, r3, #31
 800879c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	58024400 	.word	0x58024400
 80087a8:	0800e540 	.word	0x0800e540

080087ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80087ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087b0:	b0c6      	sub	sp, #280	; 0x118
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80087b8:	2300      	movs	r3, #0
 80087ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80087be:	2300      	movs	r3, #0
 80087c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80087c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087cc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80087d0:	2500      	movs	r5, #0
 80087d2:	ea54 0305 	orrs.w	r3, r4, r5
 80087d6:	d049      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80087d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087e2:	d02f      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80087e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087e8:	d828      	bhi.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80087ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087ee:	d01a      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80087f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087f4:	d822      	bhi.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d003      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80087fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087fe:	d007      	beq.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008800:	e01c      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008802:	4bab      	ldr	r3, [pc, #684]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008806:	4aaa      	ldr	r2, [pc, #680]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800880c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800880e:	e01a      	b.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008814:	3308      	adds	r3, #8
 8008816:	2102      	movs	r1, #2
 8008818:	4618      	mov	r0, r3
 800881a:	f001 fc25 	bl	800a068 <RCCEx_PLL2_Config>
 800881e:	4603      	mov	r3, r0
 8008820:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008824:	e00f      	b.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800882a:	3328      	adds	r3, #40	; 0x28
 800882c:	2102      	movs	r1, #2
 800882e:	4618      	mov	r0, r3
 8008830:	f001 fccc 	bl	800a1cc <RCCEx_PLL3_Config>
 8008834:	4603      	mov	r3, r0
 8008836:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800883a:	e004      	b.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008842:	e000      	b.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008846:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10a      	bne.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800884e:	4b98      	ldr	r3, [pc, #608]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008852:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800885a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800885c:	4a94      	ldr	r2, [pc, #592]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800885e:	430b      	orrs	r3, r1
 8008860:	6513      	str	r3, [r2, #80]	; 0x50
 8008862:	e003      	b.n	800886c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008864:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008868:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800886c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008874:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008878:	f04f 0900 	mov.w	r9, #0
 800887c:	ea58 0309 	orrs.w	r3, r8, r9
 8008880:	d047      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008888:	2b04      	cmp	r3, #4
 800888a:	d82a      	bhi.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800888c:	a201      	add	r2, pc, #4	; (adr r2, 8008894 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800888e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008892:	bf00      	nop
 8008894:	080088a9 	.word	0x080088a9
 8008898:	080088b7 	.word	0x080088b7
 800889c:	080088cd 	.word	0x080088cd
 80088a0:	080088eb 	.word	0x080088eb
 80088a4:	080088eb 	.word	0x080088eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088a8:	4b81      	ldr	r3, [pc, #516]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ac:	4a80      	ldr	r2, [pc, #512]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088b4:	e01a      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088ba:	3308      	adds	r3, #8
 80088bc:	2100      	movs	r1, #0
 80088be:	4618      	mov	r0, r3
 80088c0:	f001 fbd2 	bl	800a068 <RCCEx_PLL2_Config>
 80088c4:	4603      	mov	r3, r0
 80088c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088ca:	e00f      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80088cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088d0:	3328      	adds	r3, #40	; 0x28
 80088d2:	2100      	movs	r1, #0
 80088d4:	4618      	mov	r0, r3
 80088d6:	f001 fc79 	bl	800a1cc <RCCEx_PLL3_Config>
 80088da:	4603      	mov	r3, r0
 80088dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088e0:	e004      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80088e8:	e000      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80088ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10a      	bne.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80088f4:	4b6e      	ldr	r3, [pc, #440]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f8:	f023 0107 	bic.w	r1, r3, #7
 80088fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008902:	4a6b      	ldr	r2, [pc, #428]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008904:	430b      	orrs	r3, r1
 8008906:	6513      	str	r3, [r2, #80]	; 0x50
 8008908:	e003      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800890a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800890e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800891e:	f04f 0b00 	mov.w	fp, #0
 8008922:	ea5a 030b 	orrs.w	r3, sl, fp
 8008926:	d05b      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800892c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008930:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008934:	d03b      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008936:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800893a:	d834      	bhi.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800893c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008940:	d037      	beq.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008942:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008946:	d82e      	bhi.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008948:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800894c:	d033      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800894e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008952:	d828      	bhi.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008958:	d01a      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800895a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800895e:	d822      	bhi.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008960:	2b00      	cmp	r3, #0
 8008962:	d003      	beq.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008964:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008968:	d007      	beq.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800896a:	e01c      	b.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800896c:	4b50      	ldr	r3, [pc, #320]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800896e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008970:	4a4f      	ldr	r2, [pc, #316]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008976:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008978:	e01e      	b.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800897a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800897e:	3308      	adds	r3, #8
 8008980:	2100      	movs	r1, #0
 8008982:	4618      	mov	r0, r3
 8008984:	f001 fb70 	bl	800a068 <RCCEx_PLL2_Config>
 8008988:	4603      	mov	r3, r0
 800898a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800898e:	e013      	b.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008994:	3328      	adds	r3, #40	; 0x28
 8008996:	2100      	movs	r1, #0
 8008998:	4618      	mov	r0, r3
 800899a:	f001 fc17 	bl	800a1cc <RCCEx_PLL3_Config>
 800899e:	4603      	mov	r3, r0
 80089a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80089a4:	e008      	b.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80089ac:	e004      	b.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80089ae:	bf00      	nop
 80089b0:	e002      	b.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80089b2:	bf00      	nop
 80089b4:	e000      	b.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80089b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d10b      	bne.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80089c0:	4b3b      	ldr	r3, [pc, #236]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089c4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80089c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80089d0:	4a37      	ldr	r2, [pc, #220]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089d2:	430b      	orrs	r3, r1
 80089d4:	6593      	str	r3, [r2, #88]	; 0x58
 80089d6:	e003      	b.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80089dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80089e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80089ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089f0:	2300      	movs	r3, #0
 80089f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80089f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80089fa:	460b      	mov	r3, r1
 80089fc:	4313      	orrs	r3, r2
 80089fe:	d05d      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008a08:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008a0c:	d03b      	beq.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008a0e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008a12:	d834      	bhi.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008a14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a18:	d037      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008a1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a1e:	d82e      	bhi.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008a20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a24:	d033      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008a26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a2a:	d828      	bhi.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008a2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a30:	d01a      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008a32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a36:	d822      	bhi.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d003      	beq.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a40:	d007      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008a42:	e01c      	b.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a44:	4b1a      	ldr	r3, [pc, #104]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a48:	4a19      	ldr	r2, [pc, #100]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a50:	e01e      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a56:	3308      	adds	r3, #8
 8008a58:	2100      	movs	r1, #0
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f001 fb04 	bl	800a068 <RCCEx_PLL2_Config>
 8008a60:	4603      	mov	r3, r0
 8008a62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008a66:	e013      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a6c:	3328      	adds	r3, #40	; 0x28
 8008a6e:	2100      	movs	r1, #0
 8008a70:	4618      	mov	r0, r3
 8008a72:	f001 fbab 	bl	800a1cc <RCCEx_PLL3_Config>
 8008a76:	4603      	mov	r3, r0
 8008a78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a7c:	e008      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008a84:	e004      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008a86:	bf00      	nop
 8008a88:	e002      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008a8a:	bf00      	nop
 8008a8c:	e000      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10d      	bne.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008a98:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a9c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aa4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008aa8:	4a01      	ldr	r2, [pc, #4]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008aaa:	430b      	orrs	r3, r1
 8008aac:	6593      	str	r3, [r2, #88]	; 0x58
 8008aae:	e005      	b.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008ab0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ab8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008ac8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008acc:	2300      	movs	r3, #0
 8008ace:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008ad2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	d03a      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ae2:	2b30      	cmp	r3, #48	; 0x30
 8008ae4:	d01f      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008ae6:	2b30      	cmp	r3, #48	; 0x30
 8008ae8:	d819      	bhi.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008aea:	2b20      	cmp	r3, #32
 8008aec:	d00c      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008aee:	2b20      	cmp	r3, #32
 8008af0:	d815      	bhi.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d019      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008af6:	2b10      	cmp	r3, #16
 8008af8:	d111      	bne.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008afa:	4baa      	ldr	r3, [pc, #680]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afe:	4aa9      	ldr	r2, [pc, #676]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008b06:	e011      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b0c:	3308      	adds	r3, #8
 8008b0e:	2102      	movs	r1, #2
 8008b10:	4618      	mov	r0, r3
 8008b12:	f001 faa9 	bl	800a068 <RCCEx_PLL2_Config>
 8008b16:	4603      	mov	r3, r0
 8008b18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008b1c:	e006      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008b24:	e002      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008b26:	bf00      	nop
 8008b28:	e000      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10a      	bne.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008b34:	4b9b      	ldr	r3, [pc, #620]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b38:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b42:	4a98      	ldr	r2, [pc, #608]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b44:	430b      	orrs	r3, r1
 8008b46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b48:	e003      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b4e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008b5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b62:	2300      	movs	r3, #0
 8008b64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008b68:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	d051      	beq.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b7c:	d035      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8008b7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b82:	d82e      	bhi.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008b84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b88:	d031      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x442>
 8008b8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b8e:	d828      	bhi.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b94:	d01a      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b9a:	d822      	bhi.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d003      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ba4:	d007      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008ba6:	e01c      	b.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ba8:	4b7e      	ldr	r3, [pc, #504]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	4a7d      	ldr	r2, [pc, #500]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008bb4:	e01c      	b.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bba:	3308      	adds	r3, #8
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f001 fa52 	bl	800a068 <RCCEx_PLL2_Config>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008bca:	e011      	b.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bd0:	3328      	adds	r3, #40	; 0x28
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f001 faf9 	bl	800a1cc <RCCEx_PLL3_Config>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008be0:	e006      	b.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008be8:	e002      	b.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008bea:	bf00      	nop
 8008bec:	e000      	b.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bf0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10a      	bne.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008bf8:	4b6a      	ldr	r3, [pc, #424]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bfc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c06:	4a67      	ldr	r2, [pc, #412]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c08:	430b      	orrs	r3, r1
 8008c0a:	6513      	str	r3, [r2, #80]	; 0x50
 8008c0c:	e003      	b.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c12:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008c22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c26:	2300      	movs	r3, #0
 8008c28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c2c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008c30:	460b      	mov	r3, r1
 8008c32:	4313      	orrs	r3, r2
 8008c34:	d053      	beq.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c40:	d033      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8008c42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c46:	d82c      	bhi.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008c48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c4c:	d02f      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x502>
 8008c4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c52:	d826      	bhi.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008c54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008c58:	d02b      	beq.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008c5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008c5e:	d820      	bhi.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008c60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c64:	d012      	beq.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8008c66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c6a:	d81a      	bhi.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d022      	beq.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c74:	d115      	bne.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c7a:	3308      	adds	r3, #8
 8008c7c:	2101      	movs	r1, #1
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f001 f9f2 	bl	800a068 <RCCEx_PLL2_Config>
 8008c84:	4603      	mov	r3, r0
 8008c86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008c8a:	e015      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c90:	3328      	adds	r3, #40	; 0x28
 8008c92:	2101      	movs	r1, #1
 8008c94:	4618      	mov	r0, r3
 8008c96:	f001 fa99 	bl	800a1cc <RCCEx_PLL3_Config>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008ca0:	e00a      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008ca8:	e006      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008caa:	bf00      	nop
 8008cac:	e004      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008cae:	bf00      	nop
 8008cb0:	e002      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008cb2:	bf00      	nop
 8008cb4:	e000      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008cb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10a      	bne.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008cc0:	4b38      	ldr	r3, [pc, #224]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cce:	4a35      	ldr	r2, [pc, #212]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008cd0:	430b      	orrs	r3, r1
 8008cd2:	6513      	str	r3, [r2, #80]	; 0x50
 8008cd4:	e003      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008cda:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008cea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008cee:	2300      	movs	r3, #0
 8008cf0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008cf4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	d058      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d0a:	d033      	beq.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d10:	d82c      	bhi.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d16:	d02f      	beq.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d1c:	d826      	bhi.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008d1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d22:	d02b      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008d24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d28:	d820      	bhi.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d2e:	d012      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8008d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d34:	d81a      	bhi.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d022      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008d3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d3e:	d115      	bne.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d44:	3308      	adds	r3, #8
 8008d46:	2101      	movs	r1, #1
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f001 f98d 	bl	800a068 <RCCEx_PLL2_Config>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008d54:	e015      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d5a:	3328      	adds	r3, #40	; 0x28
 8008d5c:	2101      	movs	r1, #1
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f001 fa34 	bl	800a1cc <RCCEx_PLL3_Config>
 8008d64:	4603      	mov	r3, r0
 8008d66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008d6a:	e00a      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008d72:	e006      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008d74:	bf00      	nop
 8008d76:	e004      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008d78:	bf00      	nop
 8008d7a:	e002      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008d7c:	bf00      	nop
 8008d7e:	e000      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10e      	bne.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008d8a:	4b06      	ldr	r3, [pc, #24]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d8e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008d9a:	4a02      	ldr	r2, [pc, #8]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d9c:	430b      	orrs	r3, r1
 8008d9e:	6593      	str	r3, [r2, #88]	; 0x58
 8008da0:	e006      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008da2:	bf00      	nop
 8008da4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008dac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008dc6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008dca:	460b      	mov	r3, r1
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	d037      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dda:	d00e      	beq.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008de0:	d816      	bhi.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d018      	beq.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008de6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dea:	d111      	bne.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dec:	4bc4      	ldr	r3, [pc, #784]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df0:	4ac3      	ldr	r2, [pc, #780]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008df6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008df8:	e00f      	b.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dfe:	3308      	adds	r3, #8
 8008e00:	2101      	movs	r1, #1
 8008e02:	4618      	mov	r0, r3
 8008e04:	f001 f930 	bl	800a068 <RCCEx_PLL2_Config>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008e0e:	e004      	b.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008e16:	e000      	b.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e1a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10a      	bne.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008e22:	4bb7      	ldr	r3, [pc, #732]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e26:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e30:	4ab3      	ldr	r2, [pc, #716]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e32:	430b      	orrs	r3, r1
 8008e34:	6513      	str	r3, [r2, #80]	; 0x50
 8008e36:	e003      	b.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e48:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008e4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e50:	2300      	movs	r3, #0
 8008e52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e56:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	d039      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d81c      	bhi.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008e6a:	a201      	add	r2, pc, #4	; (adr r2, 8008e70 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e70:	08008ead 	.word	0x08008ead
 8008e74:	08008e81 	.word	0x08008e81
 8008e78:	08008e8f 	.word	0x08008e8f
 8008e7c:	08008ead 	.word	0x08008ead
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e80:	4b9f      	ldr	r3, [pc, #636]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e84:	4a9e      	ldr	r2, [pc, #632]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008e8c:	e00f      	b.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e92:	3308      	adds	r3, #8
 8008e94:	2102      	movs	r1, #2
 8008e96:	4618      	mov	r0, r3
 8008e98:	f001 f8e6 	bl	800a068 <RCCEx_PLL2_Config>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008ea2:	e004      	b.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008eaa:	e000      	b.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008eac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008eae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10a      	bne.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008eb6:	4b92      	ldr	r3, [pc, #584]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eba:	f023 0103 	bic.w	r1, r3, #3
 8008ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ec4:	4a8e      	ldr	r2, [pc, #568]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ec6:	430b      	orrs	r3, r1
 8008ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008eca:	e003      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ed0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008ee0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008eea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	f000 8099 	beq.w	8009028 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ef6:	4b83      	ldr	r3, [pc, #524]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a82      	ldr	r2, [pc, #520]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f02:	f7fb f8b1 	bl	8004068 <HAL_GetTick>
 8008f06:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f0a:	e00b      	b.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f0c:	f7fb f8ac 	bl	8004068 <HAL_GetTick>
 8008f10:	4602      	mov	r2, r0
 8008f12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f16:	1ad3      	subs	r3, r2, r3
 8008f18:	2b64      	cmp	r3, #100	; 0x64
 8008f1a:	d903      	bls.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008f22:	e005      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f24:	4b77      	ldr	r3, [pc, #476]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d0ed      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008f30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d173      	bne.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008f38:	4b71      	ldr	r3, [pc, #452]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f44:	4053      	eors	r3, r2
 8008f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d015      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f4e:	4b6c      	ldr	r3, [pc, #432]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f56:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008f5a:	4b69      	ldr	r3, [pc, #420]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f5e:	4a68      	ldr	r2, [pc, #416]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f64:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008f66:	4b66      	ldr	r3, [pc, #408]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f6a:	4a65      	ldr	r2, [pc, #404]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f70:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008f72:	4a63      	ldr	r2, [pc, #396]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f78:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f86:	d118      	bne.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f88:	f7fb f86e 	bl	8004068 <HAL_GetTick>
 8008f8c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f90:	e00d      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f92:	f7fb f869 	bl	8004068 <HAL_GetTick>
 8008f96:	4602      	mov	r2, r0
 8008f98:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f9c:	1ad2      	subs	r2, r2, r3
 8008f9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d903      	bls.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8008fac:	e005      	b.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fae:	4b54      	ldr	r3, [pc, #336]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fb2:	f003 0302 	and.w	r3, r3, #2
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d0eb      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008fba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d129      	bne.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fd2:	d10e      	bne.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008fd4:	4b4a      	ldr	r3, [pc, #296]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fe0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008fe4:	091a      	lsrs	r2, r3, #4
 8008fe6:	4b48      	ldr	r3, [pc, #288]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008fe8:	4013      	ands	r3, r2
 8008fea:	4a45      	ldr	r2, [pc, #276]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fec:	430b      	orrs	r3, r1
 8008fee:	6113      	str	r3, [r2, #16]
 8008ff0:	e005      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008ff2:	4b43      	ldr	r3, [pc, #268]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	4a42      	ldr	r2, [pc, #264]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ff8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008ffc:	6113      	str	r3, [r2, #16]
 8008ffe:	4b40      	ldr	r3, [pc, #256]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009000:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009006:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800900a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800900e:	4a3c      	ldr	r2, [pc, #240]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009010:	430b      	orrs	r3, r1
 8009012:	6713      	str	r3, [r2, #112]	; 0x70
 8009014:	e008      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009016:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800901a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800901e:	e003      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009020:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009024:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800902c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009030:	f002 0301 	and.w	r3, r2, #1
 8009034:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009038:	2300      	movs	r3, #0
 800903a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800903e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009042:	460b      	mov	r3, r1
 8009044:	4313      	orrs	r3, r2
 8009046:	f000 808f 	beq.w	8009168 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800904a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800904e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009050:	2b28      	cmp	r3, #40	; 0x28
 8009052:	d871      	bhi.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009054:	a201      	add	r2, pc, #4	; (adr r2, 800905c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905a:	bf00      	nop
 800905c:	08009141 	.word	0x08009141
 8009060:	08009139 	.word	0x08009139
 8009064:	08009139 	.word	0x08009139
 8009068:	08009139 	.word	0x08009139
 800906c:	08009139 	.word	0x08009139
 8009070:	08009139 	.word	0x08009139
 8009074:	08009139 	.word	0x08009139
 8009078:	08009139 	.word	0x08009139
 800907c:	0800910d 	.word	0x0800910d
 8009080:	08009139 	.word	0x08009139
 8009084:	08009139 	.word	0x08009139
 8009088:	08009139 	.word	0x08009139
 800908c:	08009139 	.word	0x08009139
 8009090:	08009139 	.word	0x08009139
 8009094:	08009139 	.word	0x08009139
 8009098:	08009139 	.word	0x08009139
 800909c:	08009123 	.word	0x08009123
 80090a0:	08009139 	.word	0x08009139
 80090a4:	08009139 	.word	0x08009139
 80090a8:	08009139 	.word	0x08009139
 80090ac:	08009139 	.word	0x08009139
 80090b0:	08009139 	.word	0x08009139
 80090b4:	08009139 	.word	0x08009139
 80090b8:	08009139 	.word	0x08009139
 80090bc:	08009141 	.word	0x08009141
 80090c0:	08009139 	.word	0x08009139
 80090c4:	08009139 	.word	0x08009139
 80090c8:	08009139 	.word	0x08009139
 80090cc:	08009139 	.word	0x08009139
 80090d0:	08009139 	.word	0x08009139
 80090d4:	08009139 	.word	0x08009139
 80090d8:	08009139 	.word	0x08009139
 80090dc:	08009141 	.word	0x08009141
 80090e0:	08009139 	.word	0x08009139
 80090e4:	08009139 	.word	0x08009139
 80090e8:	08009139 	.word	0x08009139
 80090ec:	08009139 	.word	0x08009139
 80090f0:	08009139 	.word	0x08009139
 80090f4:	08009139 	.word	0x08009139
 80090f8:	08009139 	.word	0x08009139
 80090fc:	08009141 	.word	0x08009141
 8009100:	58024400 	.word	0x58024400
 8009104:	58024800 	.word	0x58024800
 8009108:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800910c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009110:	3308      	adds	r3, #8
 8009112:	2101      	movs	r1, #1
 8009114:	4618      	mov	r0, r3
 8009116:	f000 ffa7 	bl	800a068 <RCCEx_PLL2_Config>
 800911a:	4603      	mov	r3, r0
 800911c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009120:	e00f      	b.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009126:	3328      	adds	r3, #40	; 0x28
 8009128:	2101      	movs	r1, #1
 800912a:	4618      	mov	r0, r3
 800912c:	f001 f84e 	bl	800a1cc <RCCEx_PLL3_Config>
 8009130:	4603      	mov	r3, r0
 8009132:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009136:	e004      	b.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800913e:	e000      	b.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009142:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009146:	2b00      	cmp	r3, #0
 8009148:	d10a      	bne.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800914a:	4bbf      	ldr	r3, [pc, #764]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800914c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800914e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009156:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009158:	4abb      	ldr	r2, [pc, #748]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800915a:	430b      	orrs	r3, r1
 800915c:	6553      	str	r3, [r2, #84]	; 0x54
 800915e:	e003      	b.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009160:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009164:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800916c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009170:	f002 0302 	and.w	r3, r2, #2
 8009174:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009178:	2300      	movs	r3, #0
 800917a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800917e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009182:	460b      	mov	r3, r1
 8009184:	4313      	orrs	r3, r2
 8009186:	d041      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800918c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800918e:	2b05      	cmp	r3, #5
 8009190:	d824      	bhi.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009192:	a201      	add	r2, pc, #4	; (adr r2, 8009198 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009198:	080091e5 	.word	0x080091e5
 800919c:	080091b1 	.word	0x080091b1
 80091a0:	080091c7 	.word	0x080091c7
 80091a4:	080091e5 	.word	0x080091e5
 80091a8:	080091e5 	.word	0x080091e5
 80091ac:	080091e5 	.word	0x080091e5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091b4:	3308      	adds	r3, #8
 80091b6:	2101      	movs	r1, #1
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 ff55 	bl	800a068 <RCCEx_PLL2_Config>
 80091be:	4603      	mov	r3, r0
 80091c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80091c4:	e00f      	b.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091ca:	3328      	adds	r3, #40	; 0x28
 80091cc:	2101      	movs	r1, #1
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fffc 	bl	800a1cc <RCCEx_PLL3_Config>
 80091d4:	4603      	mov	r3, r0
 80091d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80091da:	e004      	b.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80091e2:	e000      	b.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80091e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10a      	bne.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80091ee:	4b96      	ldr	r3, [pc, #600]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80091f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f2:	f023 0107 	bic.w	r1, r3, #7
 80091f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091fc:	4a92      	ldr	r2, [pc, #584]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80091fe:	430b      	orrs	r3, r1
 8009200:	6553      	str	r3, [r2, #84]	; 0x54
 8009202:	e003      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009204:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009208:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800920c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009214:	f002 0304 	and.w	r3, r2, #4
 8009218:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800921c:	2300      	movs	r3, #0
 800921e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009222:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009226:	460b      	mov	r3, r1
 8009228:	4313      	orrs	r3, r2
 800922a:	d044      	beq.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800922c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009234:	2b05      	cmp	r3, #5
 8009236:	d825      	bhi.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009238:	a201      	add	r2, pc, #4	; (adr r2, 8009240 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800923a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800923e:	bf00      	nop
 8009240:	0800928d 	.word	0x0800928d
 8009244:	08009259 	.word	0x08009259
 8009248:	0800926f 	.word	0x0800926f
 800924c:	0800928d 	.word	0x0800928d
 8009250:	0800928d 	.word	0x0800928d
 8009254:	0800928d 	.word	0x0800928d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800925c:	3308      	adds	r3, #8
 800925e:	2101      	movs	r1, #1
 8009260:	4618      	mov	r0, r3
 8009262:	f000 ff01 	bl	800a068 <RCCEx_PLL2_Config>
 8009266:	4603      	mov	r3, r0
 8009268:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800926c:	e00f      	b.n	800928e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800926e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009272:	3328      	adds	r3, #40	; 0x28
 8009274:	2101      	movs	r1, #1
 8009276:	4618      	mov	r0, r3
 8009278:	f000 ffa8 	bl	800a1cc <RCCEx_PLL3_Config>
 800927c:	4603      	mov	r3, r0
 800927e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009282:	e004      	b.n	800928e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800928a:	e000      	b.n	800928e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800928c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800928e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009292:	2b00      	cmp	r3, #0
 8009294:	d10b      	bne.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009296:	4b6c      	ldr	r3, [pc, #432]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800929a:	f023 0107 	bic.w	r1, r3, #7
 800929e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092a6:	4a68      	ldr	r2, [pc, #416]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80092a8:	430b      	orrs	r3, r1
 80092aa:	6593      	str	r3, [r2, #88]	; 0x58
 80092ac:	e003      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80092b2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80092b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092be:	f002 0320 	and.w	r3, r2, #32
 80092c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80092c6:	2300      	movs	r3, #0
 80092c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80092cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80092d0:	460b      	mov	r3, r1
 80092d2:	4313      	orrs	r3, r2
 80092d4:	d055      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80092d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092e2:	d033      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80092e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092e8:	d82c      	bhi.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80092ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ee:	d02f      	beq.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80092f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092f4:	d826      	bhi.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80092f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80092fa:	d02b      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80092fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009300:	d820      	bhi.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009306:	d012      	beq.n	800932e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800930c:	d81a      	bhi.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800930e:	2b00      	cmp	r3, #0
 8009310:	d022      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009312:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009316:	d115      	bne.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800931c:	3308      	adds	r3, #8
 800931e:	2100      	movs	r1, #0
 8009320:	4618      	mov	r0, r3
 8009322:	f000 fea1 	bl	800a068 <RCCEx_PLL2_Config>
 8009326:	4603      	mov	r3, r0
 8009328:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800932c:	e015      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800932e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009332:	3328      	adds	r3, #40	; 0x28
 8009334:	2102      	movs	r1, #2
 8009336:	4618      	mov	r0, r3
 8009338:	f000 ff48 	bl	800a1cc <RCCEx_PLL3_Config>
 800933c:	4603      	mov	r3, r0
 800933e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009342:	e00a      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800934a:	e006      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800934c:	bf00      	nop
 800934e:	e004      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009350:	bf00      	nop
 8009352:	e002      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009354:	bf00      	nop
 8009356:	e000      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800935a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10b      	bne.n	800937a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009362:	4b39      	ldr	r3, [pc, #228]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009366:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800936a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800936e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009372:	4a35      	ldr	r2, [pc, #212]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009374:	430b      	orrs	r3, r1
 8009376:	6553      	str	r3, [r2, #84]	; 0x54
 8009378:	e003      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800937a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800937e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800938e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009392:	2300      	movs	r3, #0
 8009394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009398:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800939c:	460b      	mov	r3, r1
 800939e:	4313      	orrs	r3, r2
 80093a0:	d058      	beq.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80093a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80093aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80093ae:	d033      	beq.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80093b0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80093b4:	d82c      	bhi.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80093b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ba:	d02f      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80093bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093c0:	d826      	bhi.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80093c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093c6:	d02b      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80093c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093cc:	d820      	bhi.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80093ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093d2:	d012      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80093d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093d8:	d81a      	bhi.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d022      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80093de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093e2:	d115      	bne.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093e8:	3308      	adds	r3, #8
 80093ea:	2100      	movs	r1, #0
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 fe3b 	bl	800a068 <RCCEx_PLL2_Config>
 80093f2:	4603      	mov	r3, r0
 80093f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80093f8:	e015      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80093fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093fe:	3328      	adds	r3, #40	; 0x28
 8009400:	2102      	movs	r1, #2
 8009402:	4618      	mov	r0, r3
 8009404:	f000 fee2 	bl	800a1cc <RCCEx_PLL3_Config>
 8009408:	4603      	mov	r3, r0
 800940a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800940e:	e00a      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009416:	e006      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009418:	bf00      	nop
 800941a:	e004      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800941c:	bf00      	nop
 800941e:	e002      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009420:	bf00      	nop
 8009422:	e000      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009426:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10e      	bne.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800942e:	4b06      	ldr	r3, [pc, #24]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009432:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800943a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800943e:	4a02      	ldr	r2, [pc, #8]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009440:	430b      	orrs	r3, r1
 8009442:	6593      	str	r3, [r2, #88]	; 0x58
 8009444:	e006      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009446:	bf00      	nop
 8009448:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800944c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009450:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009460:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009464:	2300      	movs	r3, #0
 8009466:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800946a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800946e:	460b      	mov	r3, r1
 8009470:	4313      	orrs	r3, r2
 8009472:	d055      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009478:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800947c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009480:	d033      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009482:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009486:	d82c      	bhi.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800948c:	d02f      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800948e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009492:	d826      	bhi.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009494:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009498:	d02b      	beq.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800949a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800949e:	d820      	bhi.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80094a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094a4:	d012      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80094a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094aa:	d81a      	bhi.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d022      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80094b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094b4:	d115      	bne.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094ba:	3308      	adds	r3, #8
 80094bc:	2100      	movs	r1, #0
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 fdd2 	bl	800a068 <RCCEx_PLL2_Config>
 80094c4:	4603      	mov	r3, r0
 80094c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80094ca:	e015      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80094cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094d0:	3328      	adds	r3, #40	; 0x28
 80094d2:	2102      	movs	r1, #2
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 fe79 	bl	800a1cc <RCCEx_PLL3_Config>
 80094da:	4603      	mov	r3, r0
 80094dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80094e0:	e00a      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80094e8:	e006      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80094ea:	bf00      	nop
 80094ec:	e004      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80094ee:	bf00      	nop
 80094f0:	e002      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80094f2:	bf00      	nop
 80094f4:	e000      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80094f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10b      	bne.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009500:	4ba0      	ldr	r3, [pc, #640]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009504:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800950c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009510:	4a9c      	ldr	r2, [pc, #624]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009512:	430b      	orrs	r3, r1
 8009514:	6593      	str	r3, [r2, #88]	; 0x58
 8009516:	e003      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009518:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800951c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009528:	f002 0308 	and.w	r3, r2, #8
 800952c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009530:	2300      	movs	r3, #0
 8009532:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009536:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800953a:	460b      	mov	r3, r1
 800953c:	4313      	orrs	r3, r2
 800953e:	d01e      	beq.n	800957e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800954c:	d10c      	bne.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800954e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009552:	3328      	adds	r3, #40	; 0x28
 8009554:	2102      	movs	r1, #2
 8009556:	4618      	mov	r0, r3
 8009558:	f000 fe38 	bl	800a1cc <RCCEx_PLL3_Config>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d002      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009568:	4b86      	ldr	r3, [pc, #536]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800956a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800956c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009578:	4a82      	ldr	r2, [pc, #520]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800957a:	430b      	orrs	r3, r1
 800957c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800957e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009586:	f002 0310 	and.w	r3, r2, #16
 800958a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800958e:	2300      	movs	r3, #0
 8009590:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009594:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009598:	460b      	mov	r3, r1
 800959a:	4313      	orrs	r3, r2
 800959c:	d01e      	beq.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800959e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095aa:	d10c      	bne.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80095ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095b0:	3328      	adds	r3, #40	; 0x28
 80095b2:	2102      	movs	r1, #2
 80095b4:	4618      	mov	r0, r3
 80095b6:	f000 fe09 	bl	800a1cc <RCCEx_PLL3_Config>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80095c6:	4b6f      	ldr	r3, [pc, #444]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80095c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80095ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095d6:	4a6b      	ldr	r2, [pc, #428]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80095d8:	430b      	orrs	r3, r1
 80095da:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80095e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80095ea:	2300      	movs	r3, #0
 80095ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80095ee:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80095f2:	460b      	mov	r3, r1
 80095f4:	4313      	orrs	r3, r2
 80095f6:	d03e      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80095f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009600:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009604:	d022      	beq.n	800964c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800960a:	d81b      	bhi.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800960c:	2b00      	cmp	r3, #0
 800960e:	d003      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009614:	d00b      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009616:	e015      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800961c:	3308      	adds	r3, #8
 800961e:	2100      	movs	r1, #0
 8009620:	4618      	mov	r0, r3
 8009622:	f000 fd21 	bl	800a068 <RCCEx_PLL2_Config>
 8009626:	4603      	mov	r3, r0
 8009628:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800962c:	e00f      	b.n	800964e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800962e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009632:	3328      	adds	r3, #40	; 0x28
 8009634:	2102      	movs	r1, #2
 8009636:	4618      	mov	r0, r3
 8009638:	f000 fdc8 	bl	800a1cc <RCCEx_PLL3_Config>
 800963c:	4603      	mov	r3, r0
 800963e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009642:	e004      	b.n	800964e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800964a:	e000      	b.n	800964e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800964c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800964e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10b      	bne.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009656:	4b4b      	ldr	r3, [pc, #300]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800965a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800965e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009662:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009666:	4a47      	ldr	r2, [pc, #284]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009668:	430b      	orrs	r3, r1
 800966a:	6593      	str	r3, [r2, #88]	; 0x58
 800966c:	e003      	b.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800966e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009672:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800967a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009682:	673b      	str	r3, [r7, #112]	; 0x70
 8009684:	2300      	movs	r3, #0
 8009686:	677b      	str	r3, [r7, #116]	; 0x74
 8009688:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800968c:	460b      	mov	r3, r1
 800968e:	4313      	orrs	r3, r2
 8009690:	d03b      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800969a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800969e:	d01f      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80096a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096a4:	d818      	bhi.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80096a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096aa:	d003      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80096ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096b0:	d007      	beq.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80096b2:	e011      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096b4:	4b33      	ldr	r3, [pc, #204]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b8:	4a32      	ldr	r2, [pc, #200]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80096c0:	e00f      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096c6:	3328      	adds	r3, #40	; 0x28
 80096c8:	2101      	movs	r1, #1
 80096ca:	4618      	mov	r0, r3
 80096cc:	f000 fd7e 	bl	800a1cc <RCCEx_PLL3_Config>
 80096d0:	4603      	mov	r3, r0
 80096d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80096d6:	e004      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80096de:	e000      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80096e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d10b      	bne.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80096ea:	4b26      	ldr	r3, [pc, #152]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80096f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096fa:	4a22      	ldr	r2, [pc, #136]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096fc:	430b      	orrs	r3, r1
 80096fe:	6553      	str	r3, [r2, #84]	; 0x54
 8009700:	e003      	b.n	800970a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009702:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009706:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800970a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800970e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009712:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009716:	66bb      	str	r3, [r7, #104]	; 0x68
 8009718:	2300      	movs	r3, #0
 800971a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800971c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009720:	460b      	mov	r3, r1
 8009722:	4313      	orrs	r3, r2
 8009724:	d034      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800972a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800972c:	2b00      	cmp	r3, #0
 800972e:	d003      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009734:	d007      	beq.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009736:	e011      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009738:	4b12      	ldr	r3, [pc, #72]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800973a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973c:	4a11      	ldr	r2, [pc, #68]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800973e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009742:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009744:	e00e      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800974a:	3308      	adds	r3, #8
 800974c:	2102      	movs	r1, #2
 800974e:	4618      	mov	r0, r3
 8009750:	f000 fc8a 	bl	800a068 <RCCEx_PLL2_Config>
 8009754:	4603      	mov	r3, r0
 8009756:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800975a:	e003      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009764:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009768:	2b00      	cmp	r3, #0
 800976a:	d10d      	bne.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800976c:	4b05      	ldr	r3, [pc, #20]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800976e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009770:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800977a:	4a02      	ldr	r2, [pc, #8]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800977c:	430b      	orrs	r3, r1
 800977e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009780:	e006      	b.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009782:	bf00      	nop
 8009784:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009788:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800978c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800979c:	663b      	str	r3, [r7, #96]	; 0x60
 800979e:	2300      	movs	r3, #0
 80097a0:	667b      	str	r3, [r7, #100]	; 0x64
 80097a2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80097a6:	460b      	mov	r3, r1
 80097a8:	4313      	orrs	r3, r2
 80097aa:	d00c      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80097ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097b0:	3328      	adds	r3, #40	; 0x28
 80097b2:	2102      	movs	r1, #2
 80097b4:	4618      	mov	r0, r3
 80097b6:	f000 fd09 	bl	800a1cc <RCCEx_PLL3_Config>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d002      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80097c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ce:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80097d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80097d4:	2300      	movs	r3, #0
 80097d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097d8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80097dc:	460b      	mov	r3, r1
 80097de:	4313      	orrs	r3, r2
 80097e0:	d036      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80097e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097ec:	d018      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80097ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097f2:	d811      	bhi.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80097f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097f8:	d014      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80097fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097fe:	d80b      	bhi.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009800:	2b00      	cmp	r3, #0
 8009802:	d011      	beq.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009808:	d106      	bne.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800980a:	4bb7      	ldr	r3, [pc, #732]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800980c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980e:	4ab6      	ldr	r2, [pc, #728]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009814:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009816:	e008      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800981e:	e004      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009820:	bf00      	nop
 8009822:	e002      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009824:	bf00      	nop
 8009826:	e000      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800982a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800982e:	2b00      	cmp	r3, #0
 8009830:	d10a      	bne.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009832:	4bad      	ldr	r3, [pc, #692]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009836:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800983a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800983e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009840:	4aa9      	ldr	r2, [pc, #676]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009842:	430b      	orrs	r3, r1
 8009844:	6553      	str	r3, [r2, #84]	; 0x54
 8009846:	e003      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009848:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800984c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009858:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800985c:	653b      	str	r3, [r7, #80]	; 0x50
 800985e:	2300      	movs	r3, #0
 8009860:	657b      	str	r3, [r7, #84]	; 0x54
 8009862:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009866:	460b      	mov	r3, r1
 8009868:	4313      	orrs	r3, r2
 800986a:	d009      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800986c:	4b9e      	ldr	r3, [pc, #632]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800986e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009870:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800987a:	4a9b      	ldr	r2, [pc, #620]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800987c:	430b      	orrs	r3, r1
 800987e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009888:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800988c:	64bb      	str	r3, [r7, #72]	; 0x48
 800988e:	2300      	movs	r3, #0
 8009890:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009892:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009896:	460b      	mov	r3, r1
 8009898:	4313      	orrs	r3, r2
 800989a:	d009      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800989c:	4b92      	ldr	r3, [pc, #584]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800989e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098a0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80098a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098aa:	4a8f      	ldr	r2, [pc, #572]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098ac:	430b      	orrs	r3, r1
 80098ae:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80098b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80098bc:	643b      	str	r3, [r7, #64]	; 0x40
 80098be:	2300      	movs	r3, #0
 80098c0:	647b      	str	r3, [r7, #68]	; 0x44
 80098c2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80098c6:	460b      	mov	r3, r1
 80098c8:	4313      	orrs	r3, r2
 80098ca:	d00e      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80098cc:	4b86      	ldr	r3, [pc, #536]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	4a85      	ldr	r2, [pc, #532]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80098d6:	6113      	str	r3, [r2, #16]
 80098d8:	4b83      	ldr	r3, [pc, #524]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098da:	6919      	ldr	r1, [r3, #16]
 80098dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80098e4:	4a80      	ldr	r2, [pc, #512]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098e6:	430b      	orrs	r3, r1
 80098e8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80098ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80098f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80098f8:	2300      	movs	r3, #0
 80098fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098fc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009900:	460b      	mov	r3, r1
 8009902:	4313      	orrs	r3, r2
 8009904:	d009      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009906:	4b78      	ldr	r3, [pc, #480]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800990a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800990e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009914:	4a74      	ldr	r2, [pc, #464]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009916:	430b      	orrs	r3, r1
 8009918:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800991a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800991e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009922:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009926:	633b      	str	r3, [r7, #48]	; 0x30
 8009928:	2300      	movs	r3, #0
 800992a:	637b      	str	r3, [r7, #52]	; 0x34
 800992c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009930:	460b      	mov	r3, r1
 8009932:	4313      	orrs	r3, r2
 8009934:	d00a      	beq.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009936:	4b6c      	ldr	r3, [pc, #432]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800993a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800993e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009946:	4a68      	ldr	r2, [pc, #416]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009948:	430b      	orrs	r3, r1
 800994a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800994c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009954:	2100      	movs	r1, #0
 8009956:	62b9      	str	r1, [r7, #40]	; 0x28
 8009958:	f003 0301 	and.w	r3, r3, #1
 800995c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800995e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009962:	460b      	mov	r3, r1
 8009964:	4313      	orrs	r3, r2
 8009966:	d011      	beq.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800996c:	3308      	adds	r3, #8
 800996e:	2100      	movs	r1, #0
 8009970:	4618      	mov	r0, r3
 8009972:	f000 fb79 	bl	800a068 <RCCEx_PLL2_Config>
 8009976:	4603      	mov	r3, r0
 8009978:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800997c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009980:	2b00      	cmp	r3, #0
 8009982:	d003      	beq.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009984:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009988:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800998c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009994:	2100      	movs	r1, #0
 8009996:	6239      	str	r1, [r7, #32]
 8009998:	f003 0302 	and.w	r3, r3, #2
 800999c:	627b      	str	r3, [r7, #36]	; 0x24
 800999e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80099a2:	460b      	mov	r3, r1
 80099a4:	4313      	orrs	r3, r2
 80099a6:	d011      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ac:	3308      	adds	r3, #8
 80099ae:	2101      	movs	r1, #1
 80099b0:	4618      	mov	r0, r3
 80099b2:	f000 fb59 	bl	800a068 <RCCEx_PLL2_Config>
 80099b6:	4603      	mov	r3, r0
 80099b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80099bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d003      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80099c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80099cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d4:	2100      	movs	r1, #0
 80099d6:	61b9      	str	r1, [r7, #24]
 80099d8:	f003 0304 	and.w	r3, r3, #4
 80099dc:	61fb      	str	r3, [r7, #28]
 80099de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80099e2:	460b      	mov	r3, r1
 80099e4:	4313      	orrs	r3, r2
 80099e6:	d011      	beq.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80099e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ec:	3308      	adds	r3, #8
 80099ee:	2102      	movs	r1, #2
 80099f0:	4618      	mov	r0, r3
 80099f2:	f000 fb39 	bl	800a068 <RCCEx_PLL2_Config>
 80099f6:	4603      	mov	r3, r0
 80099f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80099fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d003      	beq.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a14:	2100      	movs	r1, #0
 8009a16:	6139      	str	r1, [r7, #16]
 8009a18:	f003 0308 	and.w	r3, r3, #8
 8009a1c:	617b      	str	r3, [r7, #20]
 8009a1e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009a22:	460b      	mov	r3, r1
 8009a24:	4313      	orrs	r3, r2
 8009a26:	d011      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a2c:	3328      	adds	r3, #40	; 0x28
 8009a2e:	2100      	movs	r1, #0
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 fbcb 	bl	800a1cc <RCCEx_PLL3_Config>
 8009a36:	4603      	mov	r3, r0
 8009a38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8009a3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d003      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a54:	2100      	movs	r1, #0
 8009a56:	60b9      	str	r1, [r7, #8]
 8009a58:	f003 0310 	and.w	r3, r3, #16
 8009a5c:	60fb      	str	r3, [r7, #12]
 8009a5e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009a62:	460b      	mov	r3, r1
 8009a64:	4313      	orrs	r3, r2
 8009a66:	d011      	beq.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a6c:	3328      	adds	r3, #40	; 0x28
 8009a6e:	2101      	movs	r1, #1
 8009a70:	4618      	mov	r0, r3
 8009a72:	f000 fbab 	bl	800a1cc <RCCEx_PLL3_Config>
 8009a76:	4603      	mov	r3, r0
 8009a78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009a7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d003      	beq.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	2100      	movs	r1, #0
 8009a96:	6039      	str	r1, [r7, #0]
 8009a98:	f003 0320 	and.w	r3, r3, #32
 8009a9c:	607b      	str	r3, [r7, #4]
 8009a9e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	d011      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aac:	3328      	adds	r3, #40	; 0x28
 8009aae:	2102      	movs	r1, #2
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f000 fb8b 	bl	800a1cc <RCCEx_PLL3_Config>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009abc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d003      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ac4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ac8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8009acc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d101      	bne.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	e000      	b.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ae6:	bf00      	nop
 8009ae8:	58024400 	.word	0x58024400

08009aec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009af0:	f7fe fe00 	bl	80086f4 <HAL_RCC_GetHCLKFreq>
 8009af4:	4602      	mov	r2, r0
 8009af6:	4b06      	ldr	r3, [pc, #24]	; (8009b10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009af8:	6a1b      	ldr	r3, [r3, #32]
 8009afa:	091b      	lsrs	r3, r3, #4
 8009afc:	f003 0307 	and.w	r3, r3, #7
 8009b00:	4904      	ldr	r1, [pc, #16]	; (8009b14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009b02:	5ccb      	ldrb	r3, [r1, r3]
 8009b04:	f003 031f 	and.w	r3, r3, #31
 8009b08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	58024400 	.word	0x58024400
 8009b14:	0800e540 	.word	0x0800e540

08009b18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b089      	sub	sp, #36	; 0x24
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b20:	4ba1      	ldr	r3, [pc, #644]	; (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b24:	f003 0303 	and.w	r3, r3, #3
 8009b28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009b2a:	4b9f      	ldr	r3, [pc, #636]	; (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b2e:	0b1b      	lsrs	r3, r3, #12
 8009b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009b36:	4b9c      	ldr	r3, [pc, #624]	; (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3a:	091b      	lsrs	r3, r3, #4
 8009b3c:	f003 0301 	and.w	r3, r3, #1
 8009b40:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009b42:	4b99      	ldr	r3, [pc, #612]	; (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b46:	08db      	lsrs	r3, r3, #3
 8009b48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b4c:	693a      	ldr	r2, [r7, #16]
 8009b4e:	fb02 f303 	mul.w	r3, r2, r3
 8009b52:	ee07 3a90 	vmov	s15, r3
 8009b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f000 8111 	beq.w	8009d88 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	f000 8083 	beq.w	8009c74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	f200 80a1 	bhi.w	8009cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d003      	beq.n	8009b84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d056      	beq.n	8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009b82:	e099      	b.n	8009cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b84:	4b88      	ldr	r3, [pc, #544]	; (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 0320 	and.w	r3, r3, #32
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d02d      	beq.n	8009bec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b90:	4b85      	ldr	r3, [pc, #532]	; (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	08db      	lsrs	r3, r3, #3
 8009b96:	f003 0303 	and.w	r3, r3, #3
 8009b9a:	4a84      	ldr	r2, [pc, #528]	; (8009dac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009ba0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	ee07 3a90 	vmov	s15, r3
 8009ba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	ee07 3a90 	vmov	s15, r3
 8009bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bba:	4b7b      	ldr	r3, [pc, #492]	; (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bc2:	ee07 3a90 	vmov	s15, r3
 8009bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bce:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009db0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009bea:	e087      	b.n	8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	ee07 3a90 	vmov	s15, r3
 8009bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009db4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bfe:	4b6a      	ldr	r3, [pc, #424]	; (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c06:	ee07 3a90 	vmov	s15, r3
 8009c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c12:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009db0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c2e:	e065      	b.n	8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	ee07 3a90 	vmov	s15, r3
 8009c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009db8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c42:	4b59      	ldr	r3, [pc, #356]	; (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c4a:	ee07 3a90 	vmov	s15, r3
 8009c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c56:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009db0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c72:	e043      	b.n	8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	ee07 3a90 	vmov	s15, r3
 8009c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c86:	4b48      	ldr	r3, [pc, #288]	; (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c8e:	ee07 3a90 	vmov	s15, r3
 8009c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009db0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cb6:	e021      	b.n	8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	ee07 3a90 	vmov	s15, r3
 8009cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009db8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cca:	4b37      	ldr	r3, [pc, #220]	; (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cd2:	ee07 3a90 	vmov	s15, r3
 8009cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cde:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009db0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cfa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009cfc:	4b2a      	ldr	r3, [pc, #168]	; (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d00:	0a5b      	lsrs	r3, r3, #9
 8009d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d06:	ee07 3a90 	vmov	s15, r3
 8009d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d16:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d22:	ee17 2a90 	vmov	r2, s15
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009d2a:	4b1f      	ldr	r3, [pc, #124]	; (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2e:	0c1b      	lsrs	r3, r3, #16
 8009d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d34:	ee07 3a90 	vmov	s15, r3
 8009d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d44:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d50:	ee17 2a90 	vmov	r2, s15
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009d58:	4b13      	ldr	r3, [pc, #76]	; (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5c:	0e1b      	lsrs	r3, r3, #24
 8009d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d62:	ee07 3a90 	vmov	s15, r3
 8009d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d72:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d7e:	ee17 2a90 	vmov	r2, s15
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009d86:	e008      	b.n	8009d9a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	609a      	str	r2, [r3, #8]
}
 8009d9a:	bf00      	nop
 8009d9c:	3724      	adds	r7, #36	; 0x24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	58024400 	.word	0x58024400
 8009dac:	03d09000 	.word	0x03d09000
 8009db0:	46000000 	.word	0x46000000
 8009db4:	4c742400 	.word	0x4c742400
 8009db8:	4a742400 	.word	0x4a742400
 8009dbc:	4af42400 	.word	0x4af42400

08009dc0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b089      	sub	sp, #36	; 0x24
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009dc8:	4ba1      	ldr	r3, [pc, #644]	; (800a050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dcc:	f003 0303 	and.w	r3, r3, #3
 8009dd0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009dd2:	4b9f      	ldr	r3, [pc, #636]	; (800a050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd6:	0d1b      	lsrs	r3, r3, #20
 8009dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ddc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009dde:	4b9c      	ldr	r3, [pc, #624]	; (800a050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de2:	0a1b      	lsrs	r3, r3, #8
 8009de4:	f003 0301 	and.w	r3, r3, #1
 8009de8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009dea:	4b99      	ldr	r3, [pc, #612]	; (800a050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dee:	08db      	lsrs	r3, r3, #3
 8009df0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009df4:	693a      	ldr	r2, [r7, #16]
 8009df6:	fb02 f303 	mul.w	r3, r2, r3
 8009dfa:	ee07 3a90 	vmov	s15, r3
 8009dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f000 8111 	beq.w	800a030 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	f000 8083 	beq.w	8009f1c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	f200 80a1 	bhi.w	8009f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d003      	beq.n	8009e2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d056      	beq.n	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009e2a:	e099      	b.n	8009f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e2c:	4b88      	ldr	r3, [pc, #544]	; (800a050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 0320 	and.w	r3, r3, #32
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d02d      	beq.n	8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e38:	4b85      	ldr	r3, [pc, #532]	; (800a050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	08db      	lsrs	r3, r3, #3
 8009e3e:	f003 0303 	and.w	r3, r3, #3
 8009e42:	4a84      	ldr	r2, [pc, #528]	; (800a054 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009e44:	fa22 f303 	lsr.w	r3, r2, r3
 8009e48:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	ee07 3a90 	vmov	s15, r3
 8009e50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	ee07 3a90 	vmov	s15, r3
 8009e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e62:	4b7b      	ldr	r3, [pc, #492]	; (800a050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e6a:	ee07 3a90 	vmov	s15, r3
 8009e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e76:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a058 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009e92:	e087      	b.n	8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	ee07 3a90 	vmov	s15, r3
 8009e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a05c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ea6:	4b6a      	ldr	r3, [pc, #424]	; (800a050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eae:	ee07 3a90 	vmov	s15, r3
 8009eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a058 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ed6:	e065      	b.n	8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	ee07 3a90 	vmov	s15, r3
 8009ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eea:	4b59      	ldr	r3, [pc, #356]	; (800a050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef2:	ee07 3a90 	vmov	s15, r3
 8009ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009efe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a058 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f1a:	e043      	b.n	8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	ee07 3a90 	vmov	s15, r3
 8009f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f2e:	4b48      	ldr	r3, [pc, #288]	; (800a050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f36:	ee07 3a90 	vmov	s15, r3
 8009f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f42:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a058 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f5e:	e021      	b.n	8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	ee07 3a90 	vmov	s15, r3
 8009f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f72:	4b37      	ldr	r3, [pc, #220]	; (800a050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f7a:	ee07 3a90 	vmov	s15, r3
 8009f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f86:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a058 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fa2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009fa4:	4b2a      	ldr	r3, [pc, #168]	; (800a050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa8:	0a5b      	lsrs	r3, r3, #9
 8009faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fae:	ee07 3a90 	vmov	s15, r3
 8009fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fca:	ee17 2a90 	vmov	r2, s15
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009fd2:	4b1f      	ldr	r3, [pc, #124]	; (800a050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd6:	0c1b      	lsrs	r3, r3, #16
 8009fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fdc:	ee07 3a90 	vmov	s15, r3
 8009fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fe8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fec:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ff8:	ee17 2a90 	vmov	r2, s15
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a000:	4b13      	ldr	r3, [pc, #76]	; (800a050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a004:	0e1b      	lsrs	r3, r3, #24
 800a006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a00a:	ee07 3a90 	vmov	s15, r3
 800a00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a016:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a01a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a01e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a026:	ee17 2a90 	vmov	r2, s15
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a02e:	e008      	b.n	800a042 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	609a      	str	r2, [r3, #8]
}
 800a042:	bf00      	nop
 800a044:	3724      	adds	r7, #36	; 0x24
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr
 800a04e:	bf00      	nop
 800a050:	58024400 	.word	0x58024400
 800a054:	03d09000 	.word	0x03d09000
 800a058:	46000000 	.word	0x46000000
 800a05c:	4c742400 	.word	0x4c742400
 800a060:	4a742400 	.word	0x4a742400
 800a064:	4af42400 	.word	0x4af42400

0800a068 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a072:	2300      	movs	r3, #0
 800a074:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a076:	4b53      	ldr	r3, [pc, #332]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a07a:	f003 0303 	and.w	r3, r3, #3
 800a07e:	2b03      	cmp	r3, #3
 800a080:	d101      	bne.n	800a086 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e099      	b.n	800a1ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a086:	4b4f      	ldr	r3, [pc, #316]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a4e      	ldr	r2, [pc, #312]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a08c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a092:	f7f9 ffe9 	bl	8004068 <HAL_GetTick>
 800a096:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a098:	e008      	b.n	800a0ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a09a:	f7f9 ffe5 	bl	8004068 <HAL_GetTick>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	2b02      	cmp	r3, #2
 800a0a6:	d901      	bls.n	800a0ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e086      	b.n	800a1ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0ac:	4b45      	ldr	r3, [pc, #276]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1f0      	bne.n	800a09a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a0b8:	4b42      	ldr	r3, [pc, #264]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	031b      	lsls	r3, r3, #12
 800a0c6:	493f      	ldr	r1, [pc, #252]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	628b      	str	r3, [r1, #40]	; 0x28
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	025b      	lsls	r3, r3, #9
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	431a      	orrs	r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	041b      	lsls	r3, r3, #16
 800a0ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a0ee:	431a      	orrs	r2, r3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	691b      	ldr	r3, [r3, #16]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	061b      	lsls	r3, r3, #24
 800a0f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a0fc:	4931      	ldr	r1, [pc, #196]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a0fe:	4313      	orrs	r3, r2
 800a100:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a102:	4b30      	ldr	r3, [pc, #192]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a106:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	695b      	ldr	r3, [r3, #20]
 800a10e:	492d      	ldr	r1, [pc, #180]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a110:	4313      	orrs	r3, r2
 800a112:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a114:	4b2b      	ldr	r3, [pc, #172]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a118:	f023 0220 	bic.w	r2, r3, #32
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	4928      	ldr	r1, [pc, #160]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a122:	4313      	orrs	r3, r2
 800a124:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a126:	4b27      	ldr	r3, [pc, #156]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12a:	4a26      	ldr	r2, [pc, #152]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a12c:	f023 0310 	bic.w	r3, r3, #16
 800a130:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a132:	4b24      	ldr	r3, [pc, #144]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a134:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a136:	4b24      	ldr	r3, [pc, #144]	; (800a1c8 <RCCEx_PLL2_Config+0x160>)
 800a138:	4013      	ands	r3, r2
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	69d2      	ldr	r2, [r2, #28]
 800a13e:	00d2      	lsls	r2, r2, #3
 800a140:	4920      	ldr	r1, [pc, #128]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a142:	4313      	orrs	r3, r2
 800a144:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a146:	4b1f      	ldr	r3, [pc, #124]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14a:	4a1e      	ldr	r2, [pc, #120]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a14c:	f043 0310 	orr.w	r3, r3, #16
 800a150:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d106      	bne.n	800a166 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a158:	4b1a      	ldr	r3, [pc, #104]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15c:	4a19      	ldr	r2, [pc, #100]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a15e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a162:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a164:	e00f      	b.n	800a186 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d106      	bne.n	800a17a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a16c:	4b15      	ldr	r3, [pc, #84]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a170:	4a14      	ldr	r2, [pc, #80]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a176:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a178:	e005      	b.n	800a186 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a17a:	4b12      	ldr	r3, [pc, #72]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17e:	4a11      	ldr	r2, [pc, #68]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a180:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a184:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a186:	4b0f      	ldr	r3, [pc, #60]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a0e      	ldr	r2, [pc, #56]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a18c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a192:	f7f9 ff69 	bl	8004068 <HAL_GetTick>
 800a196:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a198:	e008      	b.n	800a1ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a19a:	f7f9 ff65 	bl	8004068 <HAL_GetTick>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	1ad3      	subs	r3, r2, r3
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d901      	bls.n	800a1ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	e006      	b.n	800a1ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1ac:	4b05      	ldr	r3, [pc, #20]	; (800a1c4 <RCCEx_PLL2_Config+0x15c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d0f0      	beq.n	800a19a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	58024400 	.word	0x58024400
 800a1c8:	ffff0007 	.word	0xffff0007

0800a1cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1da:	4b53      	ldr	r3, [pc, #332]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1de:	f003 0303 	and.w	r3, r3, #3
 800a1e2:	2b03      	cmp	r3, #3
 800a1e4:	d101      	bne.n	800a1ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e099      	b.n	800a31e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a1ea:	4b4f      	ldr	r3, [pc, #316]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a4e      	ldr	r2, [pc, #312]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a1f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1f6:	f7f9 ff37 	bl	8004068 <HAL_GetTick>
 800a1fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a1fc:	e008      	b.n	800a210 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a1fe:	f7f9 ff33 	bl	8004068 <HAL_GetTick>
 800a202:	4602      	mov	r2, r0
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	1ad3      	subs	r3, r2, r3
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d901      	bls.n	800a210 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e086      	b.n	800a31e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a210:	4b45      	ldr	r3, [pc, #276]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1f0      	bne.n	800a1fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a21c:	4b42      	ldr	r3, [pc, #264]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a21e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a220:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	051b      	lsls	r3, r3, #20
 800a22a:	493f      	ldr	r1, [pc, #252]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a22c:	4313      	orrs	r3, r2
 800a22e:	628b      	str	r3, [r1, #40]	; 0x28
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	3b01      	subs	r3, #1
 800a236:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	3b01      	subs	r3, #1
 800a240:	025b      	lsls	r3, r3, #9
 800a242:	b29b      	uxth	r3, r3
 800a244:	431a      	orrs	r2, r3
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	3b01      	subs	r3, #1
 800a24c:	041b      	lsls	r3, r3, #16
 800a24e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a252:	431a      	orrs	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	3b01      	subs	r3, #1
 800a25a:	061b      	lsls	r3, r3, #24
 800a25c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a260:	4931      	ldr	r1, [pc, #196]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a262:	4313      	orrs	r3, r2
 800a264:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a266:	4b30      	ldr	r3, [pc, #192]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	695b      	ldr	r3, [r3, #20]
 800a272:	492d      	ldr	r1, [pc, #180]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a274:	4313      	orrs	r3, r2
 800a276:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a278:	4b2b      	ldr	r3, [pc, #172]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	699b      	ldr	r3, [r3, #24]
 800a284:	4928      	ldr	r1, [pc, #160]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a286:	4313      	orrs	r3, r2
 800a288:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a28a:	4b27      	ldr	r3, [pc, #156]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a28e:	4a26      	ldr	r2, [pc, #152]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a294:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a296:	4b24      	ldr	r3, [pc, #144]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a29a:	4b24      	ldr	r3, [pc, #144]	; (800a32c <RCCEx_PLL3_Config+0x160>)
 800a29c:	4013      	ands	r3, r2
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	69d2      	ldr	r2, [r2, #28]
 800a2a2:	00d2      	lsls	r2, r2, #3
 800a2a4:	4920      	ldr	r1, [pc, #128]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a2aa:	4b1f      	ldr	r3, [pc, #124]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ae:	4a1e      	ldr	r2, [pc, #120]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a2b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d106      	bne.n	800a2ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a2bc:	4b1a      	ldr	r3, [pc, #104]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c0:	4a19      	ldr	r2, [pc, #100]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a2c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a2c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2c8:	e00f      	b.n	800a2ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d106      	bne.n	800a2de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a2d0:	4b15      	ldr	r3, [pc, #84]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d4:	4a14      	ldr	r2, [pc, #80]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a2d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a2da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2dc:	e005      	b.n	800a2ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a2de:	4b12      	ldr	r3, [pc, #72]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e2:	4a11      	ldr	r2, [pc, #68]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a2e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a2e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a2ea:	4b0f      	ldr	r3, [pc, #60]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a0e      	ldr	r2, [pc, #56]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a2f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2f6:	f7f9 feb7 	bl	8004068 <HAL_GetTick>
 800a2fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a2fc:	e008      	b.n	800a310 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a2fe:	f7f9 feb3 	bl	8004068 <HAL_GetTick>
 800a302:	4602      	mov	r2, r0
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d901      	bls.n	800a310 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a30c:	2303      	movs	r3, #3
 800a30e:	e006      	b.n	800a31e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a310:	4b05      	ldr	r3, [pc, #20]	; (800a328 <RCCEx_PLL3_Config+0x15c>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d0f0      	beq.n	800a2fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a31c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	58024400 	.word	0x58024400
 800a32c:	ffff0007 	.word	0xffff0007

0800a330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d101      	bne.n	800a342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	e049      	b.n	800a3d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d106      	bne.n	800a35c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f7f9 fb24 	bl	80039a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2202      	movs	r2, #2
 800a360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	3304      	adds	r3, #4
 800a36c:	4619      	mov	r1, r3
 800a36e:	4610      	mov	r0, r2
 800a370:	f000 feb8 	bl	800b0e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
	...

0800a3e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d001      	beq.n	800a3f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e05e      	b.n	800a4b6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2202      	movs	r2, #2
 800a3fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	68da      	ldr	r2, [r3, #12]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f042 0201 	orr.w	r2, r2, #1
 800a40e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a2b      	ldr	r2, [pc, #172]	; (800a4c4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d02c      	beq.n	800a474 <HAL_TIM_Base_Start_IT+0x94>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a422:	d027      	beq.n	800a474 <HAL_TIM_Base_Start_IT+0x94>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a27      	ldr	r2, [pc, #156]	; (800a4c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d022      	beq.n	800a474 <HAL_TIM_Base_Start_IT+0x94>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a26      	ldr	r2, [pc, #152]	; (800a4cc <HAL_TIM_Base_Start_IT+0xec>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d01d      	beq.n	800a474 <HAL_TIM_Base_Start_IT+0x94>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a24      	ldr	r2, [pc, #144]	; (800a4d0 <HAL_TIM_Base_Start_IT+0xf0>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d018      	beq.n	800a474 <HAL_TIM_Base_Start_IT+0x94>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a23      	ldr	r2, [pc, #140]	; (800a4d4 <HAL_TIM_Base_Start_IT+0xf4>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d013      	beq.n	800a474 <HAL_TIM_Base_Start_IT+0x94>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a21      	ldr	r2, [pc, #132]	; (800a4d8 <HAL_TIM_Base_Start_IT+0xf8>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d00e      	beq.n	800a474 <HAL_TIM_Base_Start_IT+0x94>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a20      	ldr	r2, [pc, #128]	; (800a4dc <HAL_TIM_Base_Start_IT+0xfc>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d009      	beq.n	800a474 <HAL_TIM_Base_Start_IT+0x94>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a1e      	ldr	r2, [pc, #120]	; (800a4e0 <HAL_TIM_Base_Start_IT+0x100>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d004      	beq.n	800a474 <HAL_TIM_Base_Start_IT+0x94>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a1d      	ldr	r2, [pc, #116]	; (800a4e4 <HAL_TIM_Base_Start_IT+0x104>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d115      	bne.n	800a4a0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	689a      	ldr	r2, [r3, #8]
 800a47a:	4b1b      	ldr	r3, [pc, #108]	; (800a4e8 <HAL_TIM_Base_Start_IT+0x108>)
 800a47c:	4013      	ands	r3, r2
 800a47e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2b06      	cmp	r3, #6
 800a484:	d015      	beq.n	800a4b2 <HAL_TIM_Base_Start_IT+0xd2>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a48c:	d011      	beq.n	800a4b2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f042 0201 	orr.w	r2, r2, #1
 800a49c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a49e:	e008      	b.n	800a4b2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f042 0201 	orr.w	r2, r2, #1
 800a4ae:	601a      	str	r2, [r3, #0]
 800a4b0:	e000      	b.n	800a4b4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	40010000 	.word	0x40010000
 800a4c8:	40000400 	.word	0x40000400
 800a4cc:	40000800 	.word	0x40000800
 800a4d0:	40000c00 	.word	0x40000c00
 800a4d4:	40010400 	.word	0x40010400
 800a4d8:	40001800 	.word	0x40001800
 800a4dc:	40014000 	.word	0x40014000
 800a4e0:	4000e000 	.word	0x4000e000
 800a4e4:	4000e400 	.word	0x4000e400
 800a4e8:	00010007 	.word	0x00010007

0800a4ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d101      	bne.n	800a4fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e049      	b.n	800a592 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a504:	b2db      	uxtb	r3, r3
 800a506:	2b00      	cmp	r3, #0
 800a508:	d106      	bne.n	800a518 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f7f9 fa0e 	bl	8003934 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2202      	movs	r2, #2
 800a51c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	3304      	adds	r3, #4
 800a528:	4619      	mov	r1, r3
 800a52a:	4610      	mov	r0, r2
 800a52c:	f000 fdda 	bl	800b0e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a590:	2300      	movs	r3, #0
}
 800a592:	4618      	mov	r0, r3
 800a594:	3708      	adds	r7, #8
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
	...

0800a59c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d109      	bne.n	800a5c0 <HAL_TIM_PWM_Start+0x24>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	bf14      	ite	ne
 800a5b8:	2301      	movne	r3, #1
 800a5ba:	2300      	moveq	r3, #0
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	e03c      	b.n	800a63a <HAL_TIM_PWM_Start+0x9e>
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	2b04      	cmp	r3, #4
 800a5c4:	d109      	bne.n	800a5da <HAL_TIM_PWM_Start+0x3e>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	bf14      	ite	ne
 800a5d2:	2301      	movne	r3, #1
 800a5d4:	2300      	moveq	r3, #0
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	e02f      	b.n	800a63a <HAL_TIM_PWM_Start+0x9e>
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	2b08      	cmp	r3, #8
 800a5de:	d109      	bne.n	800a5f4 <HAL_TIM_PWM_Start+0x58>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	bf14      	ite	ne
 800a5ec:	2301      	movne	r3, #1
 800a5ee:	2300      	moveq	r3, #0
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	e022      	b.n	800a63a <HAL_TIM_PWM_Start+0x9e>
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	2b0c      	cmp	r3, #12
 800a5f8:	d109      	bne.n	800a60e <HAL_TIM_PWM_Start+0x72>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a600:	b2db      	uxtb	r3, r3
 800a602:	2b01      	cmp	r3, #1
 800a604:	bf14      	ite	ne
 800a606:	2301      	movne	r3, #1
 800a608:	2300      	moveq	r3, #0
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	e015      	b.n	800a63a <HAL_TIM_PWM_Start+0x9e>
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	2b10      	cmp	r3, #16
 800a612:	d109      	bne.n	800a628 <HAL_TIM_PWM_Start+0x8c>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	bf14      	ite	ne
 800a620:	2301      	movne	r3, #1
 800a622:	2300      	moveq	r3, #0
 800a624:	b2db      	uxtb	r3, r3
 800a626:	e008      	b.n	800a63a <HAL_TIM_PWM_Start+0x9e>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	2b01      	cmp	r3, #1
 800a632:	bf14      	ite	ne
 800a634:	2301      	movne	r3, #1
 800a636:	2300      	moveq	r3, #0
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e0ab      	b.n	800a79a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d104      	bne.n	800a652 <HAL_TIM_PWM_Start+0xb6>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2202      	movs	r2, #2
 800a64c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a650:	e023      	b.n	800a69a <HAL_TIM_PWM_Start+0xfe>
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	2b04      	cmp	r3, #4
 800a656:	d104      	bne.n	800a662 <HAL_TIM_PWM_Start+0xc6>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2202      	movs	r2, #2
 800a65c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a660:	e01b      	b.n	800a69a <HAL_TIM_PWM_Start+0xfe>
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	2b08      	cmp	r3, #8
 800a666:	d104      	bne.n	800a672 <HAL_TIM_PWM_Start+0xd6>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2202      	movs	r2, #2
 800a66c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a670:	e013      	b.n	800a69a <HAL_TIM_PWM_Start+0xfe>
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	2b0c      	cmp	r3, #12
 800a676:	d104      	bne.n	800a682 <HAL_TIM_PWM_Start+0xe6>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2202      	movs	r2, #2
 800a67c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a680:	e00b      	b.n	800a69a <HAL_TIM_PWM_Start+0xfe>
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	2b10      	cmp	r3, #16
 800a686:	d104      	bne.n	800a692 <HAL_TIM_PWM_Start+0xf6>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2202      	movs	r2, #2
 800a68c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a690:	e003      	b.n	800a69a <HAL_TIM_PWM_Start+0xfe>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2202      	movs	r2, #2
 800a696:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	6839      	ldr	r1, [r7, #0]
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f001 f938 	bl	800b918 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a3d      	ldr	r2, [pc, #244]	; (800a7a4 <HAL_TIM_PWM_Start+0x208>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d013      	beq.n	800a6da <HAL_TIM_PWM_Start+0x13e>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a3c      	ldr	r2, [pc, #240]	; (800a7a8 <HAL_TIM_PWM_Start+0x20c>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d00e      	beq.n	800a6da <HAL_TIM_PWM_Start+0x13e>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a3a      	ldr	r2, [pc, #232]	; (800a7ac <HAL_TIM_PWM_Start+0x210>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d009      	beq.n	800a6da <HAL_TIM_PWM_Start+0x13e>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a39      	ldr	r2, [pc, #228]	; (800a7b0 <HAL_TIM_PWM_Start+0x214>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d004      	beq.n	800a6da <HAL_TIM_PWM_Start+0x13e>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a37      	ldr	r2, [pc, #220]	; (800a7b4 <HAL_TIM_PWM_Start+0x218>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d101      	bne.n	800a6de <HAL_TIM_PWM_Start+0x142>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e000      	b.n	800a6e0 <HAL_TIM_PWM_Start+0x144>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d007      	beq.n	800a6f4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a2a      	ldr	r2, [pc, #168]	; (800a7a4 <HAL_TIM_PWM_Start+0x208>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d02c      	beq.n	800a758 <HAL_TIM_PWM_Start+0x1bc>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a706:	d027      	beq.n	800a758 <HAL_TIM_PWM_Start+0x1bc>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a2a      	ldr	r2, [pc, #168]	; (800a7b8 <HAL_TIM_PWM_Start+0x21c>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d022      	beq.n	800a758 <HAL_TIM_PWM_Start+0x1bc>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a29      	ldr	r2, [pc, #164]	; (800a7bc <HAL_TIM_PWM_Start+0x220>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d01d      	beq.n	800a758 <HAL_TIM_PWM_Start+0x1bc>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a27      	ldr	r2, [pc, #156]	; (800a7c0 <HAL_TIM_PWM_Start+0x224>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d018      	beq.n	800a758 <HAL_TIM_PWM_Start+0x1bc>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a1f      	ldr	r2, [pc, #124]	; (800a7a8 <HAL_TIM_PWM_Start+0x20c>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d013      	beq.n	800a758 <HAL_TIM_PWM_Start+0x1bc>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a23      	ldr	r2, [pc, #140]	; (800a7c4 <HAL_TIM_PWM_Start+0x228>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d00e      	beq.n	800a758 <HAL_TIM_PWM_Start+0x1bc>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a1b      	ldr	r2, [pc, #108]	; (800a7ac <HAL_TIM_PWM_Start+0x210>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d009      	beq.n	800a758 <HAL_TIM_PWM_Start+0x1bc>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a1f      	ldr	r2, [pc, #124]	; (800a7c8 <HAL_TIM_PWM_Start+0x22c>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d004      	beq.n	800a758 <HAL_TIM_PWM_Start+0x1bc>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a1e      	ldr	r2, [pc, #120]	; (800a7cc <HAL_TIM_PWM_Start+0x230>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d115      	bne.n	800a784 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	689a      	ldr	r2, [r3, #8]
 800a75e:	4b1c      	ldr	r3, [pc, #112]	; (800a7d0 <HAL_TIM_PWM_Start+0x234>)
 800a760:	4013      	ands	r3, r2
 800a762:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2b06      	cmp	r3, #6
 800a768:	d015      	beq.n	800a796 <HAL_TIM_PWM_Start+0x1fa>
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a770:	d011      	beq.n	800a796 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f042 0201 	orr.w	r2, r2, #1
 800a780:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a782:	e008      	b.n	800a796 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f042 0201 	orr.w	r2, r2, #1
 800a792:	601a      	str	r2, [r3, #0]
 800a794:	e000      	b.n	800a798 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a796:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	40010000 	.word	0x40010000
 800a7a8:	40010400 	.word	0x40010400
 800a7ac:	40014000 	.word	0x40014000
 800a7b0:	40014400 	.word	0x40014400
 800a7b4:	40014800 	.word	0x40014800
 800a7b8:	40000400 	.word	0x40000400
 800a7bc:	40000800 	.word	0x40000800
 800a7c0:	40000c00 	.word	0x40000c00
 800a7c4:	40001800 	.word	0x40001800
 800a7c8:	4000e000 	.word	0x4000e000
 800a7cc:	4000e400 	.word	0x4000e400
 800a7d0:	00010007 	.word	0x00010007

0800a7d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d101      	bne.n	800a7e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e08f      	b.n	800a908 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d106      	bne.n	800a802 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f7f8 ffdd 	bl	80037bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2202      	movs	r2, #2
 800a806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	6899      	ldr	r1, [r3, #8]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	4b3e      	ldr	r3, [pc, #248]	; (800a910 <HAL_TIM_Encoder_Init+0x13c>)
 800a816:	400b      	ands	r3, r1
 800a818:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	3304      	adds	r3, #4
 800a822:	4619      	mov	r1, r3
 800a824:	4610      	mov	r0, r2
 800a826:	f000 fc5d 	bl	800b0e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	699b      	ldr	r3, [r3, #24]
 800a838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	6a1b      	ldr	r3, [r3, #32]
 800a840:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	697a      	ldr	r2, [r7, #20]
 800a848:	4313      	orrs	r3, r2
 800a84a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a84c:	693a      	ldr	r2, [r7, #16]
 800a84e:	4b31      	ldr	r3, [pc, #196]	; (800a914 <HAL_TIM_Encoder_Init+0x140>)
 800a850:	4013      	ands	r3, r2
 800a852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	689a      	ldr	r2, [r3, #8]
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	021b      	lsls	r3, r3, #8
 800a85e:	4313      	orrs	r3, r2
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	4313      	orrs	r3, r2
 800a864:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a866:	693a      	ldr	r2, [r7, #16]
 800a868:	4b2b      	ldr	r3, [pc, #172]	; (800a918 <HAL_TIM_Encoder_Init+0x144>)
 800a86a:	4013      	ands	r3, r2
 800a86c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a86e:	693a      	ldr	r2, [r7, #16]
 800a870:	4b2a      	ldr	r3, [pc, #168]	; (800a91c <HAL_TIM_Encoder_Init+0x148>)
 800a872:	4013      	ands	r3, r2
 800a874:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	68da      	ldr	r2, [r3, #12]
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	69db      	ldr	r3, [r3, #28]
 800a87e:	021b      	lsls	r3, r3, #8
 800a880:	4313      	orrs	r3, r2
 800a882:	693a      	ldr	r2, [r7, #16]
 800a884:	4313      	orrs	r3, r2
 800a886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	011a      	lsls	r2, r3, #4
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	6a1b      	ldr	r3, [r3, #32]
 800a892:	031b      	lsls	r3, r3, #12
 800a894:	4313      	orrs	r3, r2
 800a896:	693a      	ldr	r2, [r7, #16]
 800a898:	4313      	orrs	r3, r2
 800a89a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a8a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a8aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	685a      	ldr	r2, [r3, #4]
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	695b      	ldr	r3, [r3, #20]
 800a8b4:	011b      	lsls	r3, r3, #4
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	697a      	ldr	r2, [r7, #20]
 800a8c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	693a      	ldr	r2, [r7, #16]
 800a8cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3718      	adds	r7, #24
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	fffebff8 	.word	0xfffebff8
 800a914:	fffffcfc 	.word	0xfffffcfc
 800a918:	fffff3f3 	.word	0xfffff3f3
 800a91c:	ffff0f0f 	.word	0xffff0f0f

0800a920 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a930:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a938:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a940:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a948:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d110      	bne.n	800a972 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a950:	7bfb      	ldrb	r3, [r7, #15]
 800a952:	2b01      	cmp	r3, #1
 800a954:	d102      	bne.n	800a95c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a956:	7b7b      	ldrb	r3, [r7, #13]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d001      	beq.n	800a960 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	e069      	b.n	800aa34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2202      	movs	r2, #2
 800a964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2202      	movs	r2, #2
 800a96c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a970:	e031      	b.n	800a9d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	2b04      	cmp	r3, #4
 800a976:	d110      	bne.n	800a99a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a978:	7bbb      	ldrb	r3, [r7, #14]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d102      	bne.n	800a984 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a97e:	7b3b      	ldrb	r3, [r7, #12]
 800a980:	2b01      	cmp	r3, #1
 800a982:	d001      	beq.n	800a988 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	e055      	b.n	800aa34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2202      	movs	r2, #2
 800a98c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2202      	movs	r2, #2
 800a994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a998:	e01d      	b.n	800a9d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a99a:	7bfb      	ldrb	r3, [r7, #15]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d108      	bne.n	800a9b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a9a0:	7bbb      	ldrb	r3, [r7, #14]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d105      	bne.n	800a9b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a9a6:	7b7b      	ldrb	r3, [r7, #13]
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d102      	bne.n	800a9b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a9ac:	7b3b      	ldrb	r3, [r7, #12]
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d001      	beq.n	800a9b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e03e      	b.n	800aa34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2202      	movs	r2, #2
 800a9ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2202      	movs	r2, #2
 800a9ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2202      	movs	r2, #2
 800a9d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d003      	beq.n	800a9e4 <HAL_TIM_Encoder_Start+0xc4>
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	2b04      	cmp	r3, #4
 800a9e0:	d008      	beq.n	800a9f4 <HAL_TIM_Encoder_Start+0xd4>
 800a9e2:	e00f      	b.n	800aa04 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f000 ff93 	bl	800b918 <TIM_CCxChannelCmd>
      break;
 800a9f2:	e016      	b.n	800aa22 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	2104      	movs	r1, #4
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f000 ff8b 	bl	800b918 <TIM_CCxChannelCmd>
      break;
 800aa02:	e00e      	b.n	800aa22 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f000 ff83 	bl	800b918 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2201      	movs	r2, #1
 800aa18:	2104      	movs	r1, #4
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f000 ff7c 	bl	800b918 <TIM_CCxChannelCmd>
      break;
 800aa20:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f042 0201 	orr.w	r2, r2, #1
 800aa30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	691b      	ldr	r3, [r3, #16]
 800aa4a:	f003 0302 	and.w	r3, r3, #2
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	d122      	bne.n	800aa98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	f003 0302 	and.w	r3, r3, #2
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	d11b      	bne.n	800aa98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f06f 0202 	mvn.w	r2, #2
 800aa68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	699b      	ldr	r3, [r3, #24]
 800aa76:	f003 0303 	and.w	r3, r3, #3
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d003      	beq.n	800aa86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 fb12 	bl	800b0a8 <HAL_TIM_IC_CaptureCallback>
 800aa84:	e005      	b.n	800aa92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 fb04 	bl	800b094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fb15 	bl	800b0bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	f003 0304 	and.w	r3, r3, #4
 800aaa2:	2b04      	cmp	r3, #4
 800aaa4:	d122      	bne.n	800aaec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	f003 0304 	and.w	r3, r3, #4
 800aab0:	2b04      	cmp	r3, #4
 800aab2:	d11b      	bne.n	800aaec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f06f 0204 	mvn.w	r2, #4
 800aabc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2202      	movs	r2, #2
 800aac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	699b      	ldr	r3, [r3, #24]
 800aaca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d003      	beq.n	800aada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 fae8 	bl	800b0a8 <HAL_TIM_IC_CaptureCallback>
 800aad8:	e005      	b.n	800aae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fada 	bl	800b094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 faeb 	bl	800b0bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	f003 0308 	and.w	r3, r3, #8
 800aaf6:	2b08      	cmp	r3, #8
 800aaf8:	d122      	bne.n	800ab40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	f003 0308 	and.w	r3, r3, #8
 800ab04:	2b08      	cmp	r3, #8
 800ab06:	d11b      	bne.n	800ab40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f06f 0208 	mvn.w	r2, #8
 800ab10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2204      	movs	r2, #4
 800ab16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	69db      	ldr	r3, [r3, #28]
 800ab1e:	f003 0303 	and.w	r3, r3, #3
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d003      	beq.n	800ab2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fabe 	bl	800b0a8 <HAL_TIM_IC_CaptureCallback>
 800ab2c:	e005      	b.n	800ab3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fab0 	bl	800b094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 fac1 	bl	800b0bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	691b      	ldr	r3, [r3, #16]
 800ab46:	f003 0310 	and.w	r3, r3, #16
 800ab4a:	2b10      	cmp	r3, #16
 800ab4c:	d122      	bne.n	800ab94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	68db      	ldr	r3, [r3, #12]
 800ab54:	f003 0310 	and.w	r3, r3, #16
 800ab58:	2b10      	cmp	r3, #16
 800ab5a:	d11b      	bne.n	800ab94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f06f 0210 	mvn.w	r2, #16
 800ab64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2208      	movs	r2, #8
 800ab6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	69db      	ldr	r3, [r3, #28]
 800ab72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d003      	beq.n	800ab82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 fa94 	bl	800b0a8 <HAL_TIM_IC_CaptureCallback>
 800ab80:	e005      	b.n	800ab8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 fa86 	bl	800b094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 fa97 	bl	800b0bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2200      	movs	r2, #0
 800ab92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	691b      	ldr	r3, [r3, #16]
 800ab9a:	f003 0301 	and.w	r3, r3, #1
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d10e      	bne.n	800abc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	f003 0301 	and.w	r3, r3, #1
 800abac:	2b01      	cmp	r3, #1
 800abae:	d107      	bne.n	800abc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f06f 0201 	mvn.w	r2, #1
 800abb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f7f6 f98a 	bl	8000ed4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	691b      	ldr	r3, [r3, #16]
 800abc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abca:	2b80      	cmp	r3, #128	; 0x80
 800abcc:	d10e      	bne.n	800abec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abd8:	2b80      	cmp	r3, #128	; 0x80
 800abda:	d107      	bne.n	800abec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800abe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f001 f802 	bl	800bbf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abfa:	d10e      	bne.n	800ac1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac06:	2b80      	cmp	r3, #128	; 0x80
 800ac08:	d107      	bne.n	800ac1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 fff5 	bl	800bc04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	691b      	ldr	r3, [r3, #16]
 800ac20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac24:	2b40      	cmp	r3, #64	; 0x40
 800ac26:	d10e      	bne.n	800ac46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac32:	2b40      	cmp	r3, #64	; 0x40
 800ac34:	d107      	bne.n	800ac46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 fa45 	bl	800b0d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	f003 0320 	and.w	r3, r3, #32
 800ac50:	2b20      	cmp	r3, #32
 800ac52:	d10e      	bne.n	800ac72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	f003 0320 	and.w	r3, r3, #32
 800ac5e:	2b20      	cmp	r3, #32
 800ac60:	d107      	bne.n	800ac72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f06f 0220 	mvn.w	r2, #32
 800ac6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 ffb5 	bl	800bbdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac72:	bf00      	nop
 800ac74:	3708      	adds	r7, #8
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
	...

0800ac7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b086      	sub	sp, #24
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d101      	bne.n	800ac9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ac96:	2302      	movs	r3, #2
 800ac98:	e0ff      	b.n	800ae9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2b14      	cmp	r3, #20
 800aca6:	f200 80f0 	bhi.w	800ae8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800acaa:	a201      	add	r2, pc, #4	; (adr r2, 800acb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800acac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb0:	0800ad05 	.word	0x0800ad05
 800acb4:	0800ae8b 	.word	0x0800ae8b
 800acb8:	0800ae8b 	.word	0x0800ae8b
 800acbc:	0800ae8b 	.word	0x0800ae8b
 800acc0:	0800ad45 	.word	0x0800ad45
 800acc4:	0800ae8b 	.word	0x0800ae8b
 800acc8:	0800ae8b 	.word	0x0800ae8b
 800accc:	0800ae8b 	.word	0x0800ae8b
 800acd0:	0800ad87 	.word	0x0800ad87
 800acd4:	0800ae8b 	.word	0x0800ae8b
 800acd8:	0800ae8b 	.word	0x0800ae8b
 800acdc:	0800ae8b 	.word	0x0800ae8b
 800ace0:	0800adc7 	.word	0x0800adc7
 800ace4:	0800ae8b 	.word	0x0800ae8b
 800ace8:	0800ae8b 	.word	0x0800ae8b
 800acec:	0800ae8b 	.word	0x0800ae8b
 800acf0:	0800ae09 	.word	0x0800ae09
 800acf4:	0800ae8b 	.word	0x0800ae8b
 800acf8:	0800ae8b 	.word	0x0800ae8b
 800acfc:	0800ae8b 	.word	0x0800ae8b
 800ad00:	0800ae49 	.word	0x0800ae49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	68b9      	ldr	r1, [r7, #8]
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f000 fa90 	bl	800b230 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	699a      	ldr	r2, [r3, #24]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f042 0208 	orr.w	r2, r2, #8
 800ad1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	699a      	ldr	r2, [r3, #24]
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f022 0204 	bic.w	r2, r2, #4
 800ad2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	6999      	ldr	r1, [r3, #24]
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	691a      	ldr	r2, [r3, #16]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	430a      	orrs	r2, r1
 800ad40:	619a      	str	r2, [r3, #24]
      break;
 800ad42:	e0a5      	b.n	800ae90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	68b9      	ldr	r1, [r7, #8]
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f000 fb00 	bl	800b350 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	699a      	ldr	r2, [r3, #24]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	699a      	ldr	r2, [r3, #24]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	6999      	ldr	r1, [r3, #24]
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	691b      	ldr	r3, [r3, #16]
 800ad7a:	021a      	lsls	r2, r3, #8
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	430a      	orrs	r2, r1
 800ad82:	619a      	str	r2, [r3, #24]
      break;
 800ad84:	e084      	b.n	800ae90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	68b9      	ldr	r1, [r7, #8]
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f000 fb69 	bl	800b464 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	69da      	ldr	r2, [r3, #28]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f042 0208 	orr.w	r2, r2, #8
 800ada0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	69da      	ldr	r2, [r3, #28]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f022 0204 	bic.w	r2, r2, #4
 800adb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	69d9      	ldr	r1, [r3, #28]
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	691a      	ldr	r2, [r3, #16]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	430a      	orrs	r2, r1
 800adc2:	61da      	str	r2, [r3, #28]
      break;
 800adc4:	e064      	b.n	800ae90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68b9      	ldr	r1, [r7, #8]
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 fbd1 	bl	800b574 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	69da      	ldr	r2, [r3, #28]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ade0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	69da      	ldr	r2, [r3, #28]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800adf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	69d9      	ldr	r1, [r3, #28]
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	021a      	lsls	r2, r3, #8
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	430a      	orrs	r2, r1
 800ae04:	61da      	str	r2, [r3, #28]
      break;
 800ae06:	e043      	b.n	800ae90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	68b9      	ldr	r1, [r7, #8]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f000 fc1a 	bl	800b648 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f042 0208 	orr.w	r2, r2, #8
 800ae22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f022 0204 	bic.w	r2, r2, #4
 800ae32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	691a      	ldr	r2, [r3, #16]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	430a      	orrs	r2, r1
 800ae44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ae46:	e023      	b.n	800ae90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	68b9      	ldr	r1, [r7, #8]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 fc5e 	bl	800b710 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	021a      	lsls	r2, r3, #8
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	430a      	orrs	r2, r1
 800ae86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ae88:	e002      	b.n	800ae90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	75fb      	strb	r3, [r7, #23]
      break;
 800ae8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3718      	adds	r7, #24
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop

0800aea4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d101      	bne.n	800aec0 <HAL_TIM_ConfigClockSource+0x1c>
 800aebc:	2302      	movs	r3, #2
 800aebe:	e0dc      	b.n	800b07a <HAL_TIM_ConfigClockSource+0x1d6>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2202      	movs	r2, #2
 800aecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	4b6a      	ldr	r3, [pc, #424]	; (800b084 <HAL_TIM_ConfigClockSource+0x1e0>)
 800aedc:	4013      	ands	r3, r2
 800aede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aee6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	68ba      	ldr	r2, [r7, #8]
 800aeee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a64      	ldr	r2, [pc, #400]	; (800b088 <HAL_TIM_ConfigClockSource+0x1e4>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	f000 80a9 	beq.w	800b04e <HAL_TIM_ConfigClockSource+0x1aa>
 800aefc:	4a62      	ldr	r2, [pc, #392]	; (800b088 <HAL_TIM_ConfigClockSource+0x1e4>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	f200 80ae 	bhi.w	800b060 <HAL_TIM_ConfigClockSource+0x1bc>
 800af04:	4a61      	ldr	r2, [pc, #388]	; (800b08c <HAL_TIM_ConfigClockSource+0x1e8>)
 800af06:	4293      	cmp	r3, r2
 800af08:	f000 80a1 	beq.w	800b04e <HAL_TIM_ConfigClockSource+0x1aa>
 800af0c:	4a5f      	ldr	r2, [pc, #380]	; (800b08c <HAL_TIM_ConfigClockSource+0x1e8>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	f200 80a6 	bhi.w	800b060 <HAL_TIM_ConfigClockSource+0x1bc>
 800af14:	4a5e      	ldr	r2, [pc, #376]	; (800b090 <HAL_TIM_ConfigClockSource+0x1ec>)
 800af16:	4293      	cmp	r3, r2
 800af18:	f000 8099 	beq.w	800b04e <HAL_TIM_ConfigClockSource+0x1aa>
 800af1c:	4a5c      	ldr	r2, [pc, #368]	; (800b090 <HAL_TIM_ConfigClockSource+0x1ec>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	f200 809e 	bhi.w	800b060 <HAL_TIM_ConfigClockSource+0x1bc>
 800af24:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800af28:	f000 8091 	beq.w	800b04e <HAL_TIM_ConfigClockSource+0x1aa>
 800af2c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800af30:	f200 8096 	bhi.w	800b060 <HAL_TIM_ConfigClockSource+0x1bc>
 800af34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af38:	f000 8089 	beq.w	800b04e <HAL_TIM_ConfigClockSource+0x1aa>
 800af3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af40:	f200 808e 	bhi.w	800b060 <HAL_TIM_ConfigClockSource+0x1bc>
 800af44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af48:	d03e      	beq.n	800afc8 <HAL_TIM_ConfigClockSource+0x124>
 800af4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af4e:	f200 8087 	bhi.w	800b060 <HAL_TIM_ConfigClockSource+0x1bc>
 800af52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af56:	f000 8086 	beq.w	800b066 <HAL_TIM_ConfigClockSource+0x1c2>
 800af5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af5e:	d87f      	bhi.n	800b060 <HAL_TIM_ConfigClockSource+0x1bc>
 800af60:	2b70      	cmp	r3, #112	; 0x70
 800af62:	d01a      	beq.n	800af9a <HAL_TIM_ConfigClockSource+0xf6>
 800af64:	2b70      	cmp	r3, #112	; 0x70
 800af66:	d87b      	bhi.n	800b060 <HAL_TIM_ConfigClockSource+0x1bc>
 800af68:	2b60      	cmp	r3, #96	; 0x60
 800af6a:	d050      	beq.n	800b00e <HAL_TIM_ConfigClockSource+0x16a>
 800af6c:	2b60      	cmp	r3, #96	; 0x60
 800af6e:	d877      	bhi.n	800b060 <HAL_TIM_ConfigClockSource+0x1bc>
 800af70:	2b50      	cmp	r3, #80	; 0x50
 800af72:	d03c      	beq.n	800afee <HAL_TIM_ConfigClockSource+0x14a>
 800af74:	2b50      	cmp	r3, #80	; 0x50
 800af76:	d873      	bhi.n	800b060 <HAL_TIM_ConfigClockSource+0x1bc>
 800af78:	2b40      	cmp	r3, #64	; 0x40
 800af7a:	d058      	beq.n	800b02e <HAL_TIM_ConfigClockSource+0x18a>
 800af7c:	2b40      	cmp	r3, #64	; 0x40
 800af7e:	d86f      	bhi.n	800b060 <HAL_TIM_ConfigClockSource+0x1bc>
 800af80:	2b30      	cmp	r3, #48	; 0x30
 800af82:	d064      	beq.n	800b04e <HAL_TIM_ConfigClockSource+0x1aa>
 800af84:	2b30      	cmp	r3, #48	; 0x30
 800af86:	d86b      	bhi.n	800b060 <HAL_TIM_ConfigClockSource+0x1bc>
 800af88:	2b20      	cmp	r3, #32
 800af8a:	d060      	beq.n	800b04e <HAL_TIM_ConfigClockSource+0x1aa>
 800af8c:	2b20      	cmp	r3, #32
 800af8e:	d867      	bhi.n	800b060 <HAL_TIM_ConfigClockSource+0x1bc>
 800af90:	2b00      	cmp	r3, #0
 800af92:	d05c      	beq.n	800b04e <HAL_TIM_ConfigClockSource+0x1aa>
 800af94:	2b10      	cmp	r3, #16
 800af96:	d05a      	beq.n	800b04e <HAL_TIM_ConfigClockSource+0x1aa>
 800af98:	e062      	b.n	800b060 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6818      	ldr	r0, [r3, #0]
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	6899      	ldr	r1, [r3, #8]
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	685a      	ldr	r2, [r3, #4]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	f000 fc95 	bl	800b8d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800afbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	609a      	str	r2, [r3, #8]
      break;
 800afc6:	e04f      	b.n	800b068 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6818      	ldr	r0, [r3, #0]
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	6899      	ldr	r1, [r3, #8]
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	685a      	ldr	r2, [r3, #4]
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	f000 fc7e 	bl	800b8d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	689a      	ldr	r2, [r3, #8]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800afea:	609a      	str	r2, [r3, #8]
      break;
 800afec:	e03c      	b.n	800b068 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6818      	ldr	r0, [r3, #0]
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	6859      	ldr	r1, [r3, #4]
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	461a      	mov	r2, r3
 800affc:	f000 fbee 	bl	800b7dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	2150      	movs	r1, #80	; 0x50
 800b006:	4618      	mov	r0, r3
 800b008:	f000 fc48 	bl	800b89c <TIM_ITRx_SetConfig>
      break;
 800b00c:	e02c      	b.n	800b068 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6818      	ldr	r0, [r3, #0]
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	6859      	ldr	r1, [r3, #4]
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	68db      	ldr	r3, [r3, #12]
 800b01a:	461a      	mov	r2, r3
 800b01c:	f000 fc0d 	bl	800b83a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2160      	movs	r1, #96	; 0x60
 800b026:	4618      	mov	r0, r3
 800b028:	f000 fc38 	bl	800b89c <TIM_ITRx_SetConfig>
      break;
 800b02c:	e01c      	b.n	800b068 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6818      	ldr	r0, [r3, #0]
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	6859      	ldr	r1, [r3, #4]
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	461a      	mov	r2, r3
 800b03c:	f000 fbce 	bl	800b7dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2140      	movs	r1, #64	; 0x40
 800b046:	4618      	mov	r0, r3
 800b048:	f000 fc28 	bl	800b89c <TIM_ITRx_SetConfig>
      break;
 800b04c:	e00c      	b.n	800b068 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4619      	mov	r1, r3
 800b058:	4610      	mov	r0, r2
 800b05a:	f000 fc1f 	bl	800b89c <TIM_ITRx_SetConfig>
      break;
 800b05e:	e003      	b.n	800b068 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b060:	2301      	movs	r3, #1
 800b062:	73fb      	strb	r3, [r7, #15]
      break;
 800b064:	e000      	b.n	800b068 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b066:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2201      	movs	r2, #1
 800b06c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b078:	7bfb      	ldrb	r3, [r7, #15]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	ffceff88 	.word	0xffceff88
 800b088:	00100040 	.word	0x00100040
 800b08c:	00100030 	.word	0x00100030
 800b090:	00100020 	.word	0x00100020

0800b094 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b09c:	bf00      	nop
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b0b0:	bf00      	nop
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b0c4:	bf00      	nop
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b0d8:	bf00      	nop
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	4a44      	ldr	r2, [pc, #272]	; (800b208 <TIM_Base_SetConfig+0x124>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d013      	beq.n	800b124 <TIM_Base_SetConfig+0x40>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b102:	d00f      	beq.n	800b124 <TIM_Base_SetConfig+0x40>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4a41      	ldr	r2, [pc, #260]	; (800b20c <TIM_Base_SetConfig+0x128>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d00b      	beq.n	800b124 <TIM_Base_SetConfig+0x40>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	4a40      	ldr	r2, [pc, #256]	; (800b210 <TIM_Base_SetConfig+0x12c>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d007      	beq.n	800b124 <TIM_Base_SetConfig+0x40>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	4a3f      	ldr	r2, [pc, #252]	; (800b214 <TIM_Base_SetConfig+0x130>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d003      	beq.n	800b124 <TIM_Base_SetConfig+0x40>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	4a3e      	ldr	r2, [pc, #248]	; (800b218 <TIM_Base_SetConfig+0x134>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d108      	bne.n	800b136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b12a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	68fa      	ldr	r2, [r7, #12]
 800b132:	4313      	orrs	r3, r2
 800b134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	4a33      	ldr	r2, [pc, #204]	; (800b208 <TIM_Base_SetConfig+0x124>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d027      	beq.n	800b18e <TIM_Base_SetConfig+0xaa>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b144:	d023      	beq.n	800b18e <TIM_Base_SetConfig+0xaa>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4a30      	ldr	r2, [pc, #192]	; (800b20c <TIM_Base_SetConfig+0x128>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d01f      	beq.n	800b18e <TIM_Base_SetConfig+0xaa>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4a2f      	ldr	r2, [pc, #188]	; (800b210 <TIM_Base_SetConfig+0x12c>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d01b      	beq.n	800b18e <TIM_Base_SetConfig+0xaa>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a2e      	ldr	r2, [pc, #184]	; (800b214 <TIM_Base_SetConfig+0x130>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d017      	beq.n	800b18e <TIM_Base_SetConfig+0xaa>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a2d      	ldr	r2, [pc, #180]	; (800b218 <TIM_Base_SetConfig+0x134>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d013      	beq.n	800b18e <TIM_Base_SetConfig+0xaa>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4a2c      	ldr	r2, [pc, #176]	; (800b21c <TIM_Base_SetConfig+0x138>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d00f      	beq.n	800b18e <TIM_Base_SetConfig+0xaa>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4a2b      	ldr	r2, [pc, #172]	; (800b220 <TIM_Base_SetConfig+0x13c>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d00b      	beq.n	800b18e <TIM_Base_SetConfig+0xaa>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4a2a      	ldr	r2, [pc, #168]	; (800b224 <TIM_Base_SetConfig+0x140>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d007      	beq.n	800b18e <TIM_Base_SetConfig+0xaa>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a29      	ldr	r2, [pc, #164]	; (800b228 <TIM_Base_SetConfig+0x144>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d003      	beq.n	800b18e <TIM_Base_SetConfig+0xaa>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a28      	ldr	r2, [pc, #160]	; (800b22c <TIM_Base_SetConfig+0x148>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d108      	bne.n	800b1a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	695b      	ldr	r3, [r3, #20]
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	689a      	ldr	r2, [r3, #8]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a10      	ldr	r2, [pc, #64]	; (800b208 <TIM_Base_SetConfig+0x124>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d00f      	beq.n	800b1ec <TIM_Base_SetConfig+0x108>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4a12      	ldr	r2, [pc, #72]	; (800b218 <TIM_Base_SetConfig+0x134>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d00b      	beq.n	800b1ec <TIM_Base_SetConfig+0x108>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4a11      	ldr	r2, [pc, #68]	; (800b21c <TIM_Base_SetConfig+0x138>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d007      	beq.n	800b1ec <TIM_Base_SetConfig+0x108>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4a10      	ldr	r2, [pc, #64]	; (800b220 <TIM_Base_SetConfig+0x13c>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d003      	beq.n	800b1ec <TIM_Base_SetConfig+0x108>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	4a0f      	ldr	r2, [pc, #60]	; (800b224 <TIM_Base_SetConfig+0x140>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d103      	bne.n	800b1f4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	691a      	ldr	r2, [r3, #16]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	615a      	str	r2, [r3, #20]
}
 800b1fa:	bf00      	nop
 800b1fc:	3714      	adds	r7, #20
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr
 800b206:	bf00      	nop
 800b208:	40010000 	.word	0x40010000
 800b20c:	40000400 	.word	0x40000400
 800b210:	40000800 	.word	0x40000800
 800b214:	40000c00 	.word	0x40000c00
 800b218:	40010400 	.word	0x40010400
 800b21c:	40014000 	.word	0x40014000
 800b220:	40014400 	.word	0x40014400
 800b224:	40014800 	.word	0x40014800
 800b228:	4000e000 	.word	0x4000e000
 800b22c:	4000e400 	.word	0x4000e400

0800b230 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b230:	b480      	push	{r7}
 800b232:	b087      	sub	sp, #28
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a1b      	ldr	r3, [r3, #32]
 800b23e:	f023 0201 	bic.w	r2, r3, #1
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6a1b      	ldr	r3, [r3, #32]
 800b24a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	699b      	ldr	r3, [r3, #24]
 800b256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	4b37      	ldr	r3, [pc, #220]	; (800b338 <TIM_OC1_SetConfig+0x108>)
 800b25c:	4013      	ands	r3, r2
 800b25e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f023 0303 	bic.w	r3, r3, #3
 800b266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	4313      	orrs	r3, r2
 800b270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f023 0302 	bic.w	r3, r3, #2
 800b278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	697a      	ldr	r2, [r7, #20]
 800b280:	4313      	orrs	r3, r2
 800b282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	4a2d      	ldr	r2, [pc, #180]	; (800b33c <TIM_OC1_SetConfig+0x10c>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d00f      	beq.n	800b2ac <TIM_OC1_SetConfig+0x7c>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a2c      	ldr	r2, [pc, #176]	; (800b340 <TIM_OC1_SetConfig+0x110>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d00b      	beq.n	800b2ac <TIM_OC1_SetConfig+0x7c>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4a2b      	ldr	r2, [pc, #172]	; (800b344 <TIM_OC1_SetConfig+0x114>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d007      	beq.n	800b2ac <TIM_OC1_SetConfig+0x7c>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	4a2a      	ldr	r2, [pc, #168]	; (800b348 <TIM_OC1_SetConfig+0x118>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d003      	beq.n	800b2ac <TIM_OC1_SetConfig+0x7c>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	4a29      	ldr	r2, [pc, #164]	; (800b34c <TIM_OC1_SetConfig+0x11c>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d10c      	bne.n	800b2c6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	f023 0308 	bic.w	r3, r3, #8
 800b2b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	697a      	ldr	r2, [r7, #20]
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	f023 0304 	bic.w	r3, r3, #4
 800b2c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a1c      	ldr	r2, [pc, #112]	; (800b33c <TIM_OC1_SetConfig+0x10c>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d00f      	beq.n	800b2ee <TIM_OC1_SetConfig+0xbe>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a1b      	ldr	r2, [pc, #108]	; (800b340 <TIM_OC1_SetConfig+0x110>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d00b      	beq.n	800b2ee <TIM_OC1_SetConfig+0xbe>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a1a      	ldr	r2, [pc, #104]	; (800b344 <TIM_OC1_SetConfig+0x114>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d007      	beq.n	800b2ee <TIM_OC1_SetConfig+0xbe>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a19      	ldr	r2, [pc, #100]	; (800b348 <TIM_OC1_SetConfig+0x118>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d003      	beq.n	800b2ee <TIM_OC1_SetConfig+0xbe>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a18      	ldr	r2, [pc, #96]	; (800b34c <TIM_OC1_SetConfig+0x11c>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d111      	bne.n	800b312 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b2fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	693a      	ldr	r2, [r7, #16]
 800b304:	4313      	orrs	r3, r2
 800b306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	699b      	ldr	r3, [r3, #24]
 800b30c:	693a      	ldr	r2, [r7, #16]
 800b30e:	4313      	orrs	r3, r2
 800b310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	693a      	ldr	r2, [r7, #16]
 800b316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	68fa      	ldr	r2, [r7, #12]
 800b31c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	685a      	ldr	r2, [r3, #4]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	697a      	ldr	r2, [r7, #20]
 800b32a:	621a      	str	r2, [r3, #32]
}
 800b32c:	bf00      	nop
 800b32e:	371c      	adds	r7, #28
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr
 800b338:	fffeff8f 	.word	0xfffeff8f
 800b33c:	40010000 	.word	0x40010000
 800b340:	40010400 	.word	0x40010400
 800b344:	40014000 	.word	0x40014000
 800b348:	40014400 	.word	0x40014400
 800b34c:	40014800 	.word	0x40014800

0800b350 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b350:	b480      	push	{r7}
 800b352:	b087      	sub	sp, #28
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a1b      	ldr	r3, [r3, #32]
 800b35e:	f023 0210 	bic.w	r2, r3, #16
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a1b      	ldr	r3, [r3, #32]
 800b36a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	699b      	ldr	r3, [r3, #24]
 800b376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b378:	68fa      	ldr	r2, [r7, #12]
 800b37a:	4b34      	ldr	r3, [pc, #208]	; (800b44c <TIM_OC2_SetConfig+0xfc>)
 800b37c:	4013      	ands	r3, r2
 800b37e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	021b      	lsls	r3, r3, #8
 800b38e:	68fa      	ldr	r2, [r7, #12]
 800b390:	4313      	orrs	r3, r2
 800b392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	f023 0320 	bic.w	r3, r3, #32
 800b39a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	689b      	ldr	r3, [r3, #8]
 800b3a0:	011b      	lsls	r3, r3, #4
 800b3a2:	697a      	ldr	r2, [r7, #20]
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4a29      	ldr	r2, [pc, #164]	; (800b450 <TIM_OC2_SetConfig+0x100>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d003      	beq.n	800b3b8 <TIM_OC2_SetConfig+0x68>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a28      	ldr	r2, [pc, #160]	; (800b454 <TIM_OC2_SetConfig+0x104>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d10d      	bne.n	800b3d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	011b      	lsls	r3, r3, #4
 800b3c6:	697a      	ldr	r2, [r7, #20]
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	4a1e      	ldr	r2, [pc, #120]	; (800b450 <TIM_OC2_SetConfig+0x100>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d00f      	beq.n	800b3fc <TIM_OC2_SetConfig+0xac>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	4a1d      	ldr	r2, [pc, #116]	; (800b454 <TIM_OC2_SetConfig+0x104>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d00b      	beq.n	800b3fc <TIM_OC2_SetConfig+0xac>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	4a1c      	ldr	r2, [pc, #112]	; (800b458 <TIM_OC2_SetConfig+0x108>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d007      	beq.n	800b3fc <TIM_OC2_SetConfig+0xac>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4a1b      	ldr	r2, [pc, #108]	; (800b45c <TIM_OC2_SetConfig+0x10c>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d003      	beq.n	800b3fc <TIM_OC2_SetConfig+0xac>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4a1a      	ldr	r2, [pc, #104]	; (800b460 <TIM_OC2_SetConfig+0x110>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d113      	bne.n	800b424 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b402:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b40a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	695b      	ldr	r3, [r3, #20]
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	693a      	ldr	r2, [r7, #16]
 800b414:	4313      	orrs	r3, r2
 800b416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	699b      	ldr	r3, [r3, #24]
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	693a      	ldr	r2, [r7, #16]
 800b420:	4313      	orrs	r3, r2
 800b422:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	693a      	ldr	r2, [r7, #16]
 800b428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	685a      	ldr	r2, [r3, #4]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	697a      	ldr	r2, [r7, #20]
 800b43c:	621a      	str	r2, [r3, #32]
}
 800b43e:	bf00      	nop
 800b440:	371c      	adds	r7, #28
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	feff8fff 	.word	0xfeff8fff
 800b450:	40010000 	.word	0x40010000
 800b454:	40010400 	.word	0x40010400
 800b458:	40014000 	.word	0x40014000
 800b45c:	40014400 	.word	0x40014400
 800b460:	40014800 	.word	0x40014800

0800b464 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b464:	b480      	push	{r7}
 800b466:	b087      	sub	sp, #28
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a1b      	ldr	r3, [r3, #32]
 800b472:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6a1b      	ldr	r3, [r3, #32]
 800b47e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	69db      	ldr	r3, [r3, #28]
 800b48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	4b33      	ldr	r3, [pc, #204]	; (800b55c <TIM_OC3_SetConfig+0xf8>)
 800b490:	4013      	ands	r3, r2
 800b492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f023 0303 	bic.w	r3, r3, #3
 800b49a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	68fa      	ldr	r2, [r7, #12]
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	021b      	lsls	r3, r3, #8
 800b4b4:	697a      	ldr	r2, [r7, #20]
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4a28      	ldr	r2, [pc, #160]	; (800b560 <TIM_OC3_SetConfig+0xfc>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d003      	beq.n	800b4ca <TIM_OC3_SetConfig+0x66>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4a27      	ldr	r2, [pc, #156]	; (800b564 <TIM_OC3_SetConfig+0x100>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d10d      	bne.n	800b4e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	68db      	ldr	r3, [r3, #12]
 800b4d6:	021b      	lsls	r3, r3, #8
 800b4d8:	697a      	ldr	r2, [r7, #20]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b4e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	4a1d      	ldr	r2, [pc, #116]	; (800b560 <TIM_OC3_SetConfig+0xfc>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d00f      	beq.n	800b50e <TIM_OC3_SetConfig+0xaa>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	4a1c      	ldr	r2, [pc, #112]	; (800b564 <TIM_OC3_SetConfig+0x100>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d00b      	beq.n	800b50e <TIM_OC3_SetConfig+0xaa>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4a1b      	ldr	r2, [pc, #108]	; (800b568 <TIM_OC3_SetConfig+0x104>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d007      	beq.n	800b50e <TIM_OC3_SetConfig+0xaa>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4a1a      	ldr	r2, [pc, #104]	; (800b56c <TIM_OC3_SetConfig+0x108>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d003      	beq.n	800b50e <TIM_OC3_SetConfig+0xaa>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4a19      	ldr	r2, [pc, #100]	; (800b570 <TIM_OC3_SetConfig+0x10c>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d113      	bne.n	800b536 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b51c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	695b      	ldr	r3, [r3, #20]
 800b522:	011b      	lsls	r3, r3, #4
 800b524:	693a      	ldr	r2, [r7, #16]
 800b526:	4313      	orrs	r3, r2
 800b528:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	699b      	ldr	r3, [r3, #24]
 800b52e:	011b      	lsls	r3, r3, #4
 800b530:	693a      	ldr	r2, [r7, #16]
 800b532:	4313      	orrs	r3, r2
 800b534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	693a      	ldr	r2, [r7, #16]
 800b53a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	685a      	ldr	r2, [r3, #4]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	697a      	ldr	r2, [r7, #20]
 800b54e:	621a      	str	r2, [r3, #32]
}
 800b550:	bf00      	nop
 800b552:	371c      	adds	r7, #28
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr
 800b55c:	fffeff8f 	.word	0xfffeff8f
 800b560:	40010000 	.word	0x40010000
 800b564:	40010400 	.word	0x40010400
 800b568:	40014000 	.word	0x40014000
 800b56c:	40014400 	.word	0x40014400
 800b570:	40014800 	.word	0x40014800

0800b574 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b574:	b480      	push	{r7}
 800b576:	b087      	sub	sp, #28
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a1b      	ldr	r3, [r3, #32]
 800b582:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a1b      	ldr	r3, [r3, #32]
 800b58e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	69db      	ldr	r3, [r3, #28]
 800b59a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	4b24      	ldr	r3, [pc, #144]	; (800b630 <TIM_OC4_SetConfig+0xbc>)
 800b5a0:	4013      	ands	r3, r2
 800b5a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	021b      	lsls	r3, r3, #8
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b5be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	689b      	ldr	r3, [r3, #8]
 800b5c4:	031b      	lsls	r3, r3, #12
 800b5c6:	693a      	ldr	r2, [r7, #16]
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a19      	ldr	r2, [pc, #100]	; (800b634 <TIM_OC4_SetConfig+0xc0>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d00f      	beq.n	800b5f4 <TIM_OC4_SetConfig+0x80>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a18      	ldr	r2, [pc, #96]	; (800b638 <TIM_OC4_SetConfig+0xc4>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d00b      	beq.n	800b5f4 <TIM_OC4_SetConfig+0x80>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a17      	ldr	r2, [pc, #92]	; (800b63c <TIM_OC4_SetConfig+0xc8>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d007      	beq.n	800b5f4 <TIM_OC4_SetConfig+0x80>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4a16      	ldr	r2, [pc, #88]	; (800b640 <TIM_OC4_SetConfig+0xcc>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d003      	beq.n	800b5f4 <TIM_OC4_SetConfig+0x80>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a15      	ldr	r2, [pc, #84]	; (800b644 <TIM_OC4_SetConfig+0xd0>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d109      	bne.n	800b608 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b5fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	695b      	ldr	r3, [r3, #20]
 800b600:	019b      	lsls	r3, r3, #6
 800b602:	697a      	ldr	r2, [r7, #20]
 800b604:	4313      	orrs	r3, r2
 800b606:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	697a      	ldr	r2, [r7, #20]
 800b60c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	68fa      	ldr	r2, [r7, #12]
 800b612:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	685a      	ldr	r2, [r3, #4]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	693a      	ldr	r2, [r7, #16]
 800b620:	621a      	str	r2, [r3, #32]
}
 800b622:	bf00      	nop
 800b624:	371c      	adds	r7, #28
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr
 800b62e:	bf00      	nop
 800b630:	feff8fff 	.word	0xfeff8fff
 800b634:	40010000 	.word	0x40010000
 800b638:	40010400 	.word	0x40010400
 800b63c:	40014000 	.word	0x40014000
 800b640:	40014400 	.word	0x40014400
 800b644:	40014800 	.word	0x40014800

0800b648 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b648:	b480      	push	{r7}
 800b64a:	b087      	sub	sp, #28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6a1b      	ldr	r3, [r3, #32]
 800b656:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6a1b      	ldr	r3, [r3, #32]
 800b662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b66e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b670:	68fa      	ldr	r2, [r7, #12]
 800b672:	4b21      	ldr	r3, [pc, #132]	; (800b6f8 <TIM_OC5_SetConfig+0xb0>)
 800b674:	4013      	ands	r3, r2
 800b676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	4313      	orrs	r3, r2
 800b680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b688:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	689b      	ldr	r3, [r3, #8]
 800b68e:	041b      	lsls	r3, r3, #16
 800b690:	693a      	ldr	r2, [r7, #16]
 800b692:	4313      	orrs	r3, r2
 800b694:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4a18      	ldr	r2, [pc, #96]	; (800b6fc <TIM_OC5_SetConfig+0xb4>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d00f      	beq.n	800b6be <TIM_OC5_SetConfig+0x76>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4a17      	ldr	r2, [pc, #92]	; (800b700 <TIM_OC5_SetConfig+0xb8>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d00b      	beq.n	800b6be <TIM_OC5_SetConfig+0x76>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	4a16      	ldr	r2, [pc, #88]	; (800b704 <TIM_OC5_SetConfig+0xbc>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d007      	beq.n	800b6be <TIM_OC5_SetConfig+0x76>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	4a15      	ldr	r2, [pc, #84]	; (800b708 <TIM_OC5_SetConfig+0xc0>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d003      	beq.n	800b6be <TIM_OC5_SetConfig+0x76>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4a14      	ldr	r2, [pc, #80]	; (800b70c <TIM_OC5_SetConfig+0xc4>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d109      	bne.n	800b6d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	695b      	ldr	r3, [r3, #20]
 800b6ca:	021b      	lsls	r3, r3, #8
 800b6cc:	697a      	ldr	r2, [r7, #20]
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	697a      	ldr	r2, [r7, #20]
 800b6d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	68fa      	ldr	r2, [r7, #12]
 800b6dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	685a      	ldr	r2, [r3, #4]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	693a      	ldr	r2, [r7, #16]
 800b6ea:	621a      	str	r2, [r3, #32]
}
 800b6ec:	bf00      	nop
 800b6ee:	371c      	adds	r7, #28
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr
 800b6f8:	fffeff8f 	.word	0xfffeff8f
 800b6fc:	40010000 	.word	0x40010000
 800b700:	40010400 	.word	0x40010400
 800b704:	40014000 	.word	0x40014000
 800b708:	40014400 	.word	0x40014400
 800b70c:	40014800 	.word	0x40014800

0800b710 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b710:	b480      	push	{r7}
 800b712:	b087      	sub	sp, #28
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6a1b      	ldr	r3, [r3, #32]
 800b71e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6a1b      	ldr	r3, [r3, #32]
 800b72a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b738:	68fa      	ldr	r2, [r7, #12]
 800b73a:	4b22      	ldr	r3, [pc, #136]	; (800b7c4 <TIM_OC6_SetConfig+0xb4>)
 800b73c:	4013      	ands	r3, r2
 800b73e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	021b      	lsls	r3, r3, #8
 800b746:	68fa      	ldr	r2, [r7, #12]
 800b748:	4313      	orrs	r3, r2
 800b74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b752:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	051b      	lsls	r3, r3, #20
 800b75a:	693a      	ldr	r2, [r7, #16]
 800b75c:	4313      	orrs	r3, r2
 800b75e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4a19      	ldr	r2, [pc, #100]	; (800b7c8 <TIM_OC6_SetConfig+0xb8>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d00f      	beq.n	800b788 <TIM_OC6_SetConfig+0x78>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4a18      	ldr	r2, [pc, #96]	; (800b7cc <TIM_OC6_SetConfig+0xbc>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d00b      	beq.n	800b788 <TIM_OC6_SetConfig+0x78>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a17      	ldr	r2, [pc, #92]	; (800b7d0 <TIM_OC6_SetConfig+0xc0>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d007      	beq.n	800b788 <TIM_OC6_SetConfig+0x78>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4a16      	ldr	r2, [pc, #88]	; (800b7d4 <TIM_OC6_SetConfig+0xc4>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d003      	beq.n	800b788 <TIM_OC6_SetConfig+0x78>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a15      	ldr	r2, [pc, #84]	; (800b7d8 <TIM_OC6_SetConfig+0xc8>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d109      	bne.n	800b79c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b78e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	695b      	ldr	r3, [r3, #20]
 800b794:	029b      	lsls	r3, r3, #10
 800b796:	697a      	ldr	r2, [r7, #20]
 800b798:	4313      	orrs	r3, r2
 800b79a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	697a      	ldr	r2, [r7, #20]
 800b7a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	685a      	ldr	r2, [r3, #4]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	693a      	ldr	r2, [r7, #16]
 800b7b4:	621a      	str	r2, [r3, #32]
}
 800b7b6:	bf00      	nop
 800b7b8:	371c      	adds	r7, #28
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	feff8fff 	.word	0xfeff8fff
 800b7c8:	40010000 	.word	0x40010000
 800b7cc:	40010400 	.word	0x40010400
 800b7d0:	40014000 	.word	0x40014000
 800b7d4:	40014400 	.word	0x40014400
 800b7d8:	40014800 	.word	0x40014800

0800b7dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b087      	sub	sp, #28
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6a1b      	ldr	r3, [r3, #32]
 800b7ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6a1b      	ldr	r3, [r3, #32]
 800b7f2:	f023 0201 	bic.w	r2, r3, #1
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	699b      	ldr	r3, [r3, #24]
 800b7fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	011b      	lsls	r3, r3, #4
 800b80c:	693a      	ldr	r2, [r7, #16]
 800b80e:	4313      	orrs	r3, r2
 800b810:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	f023 030a 	bic.w	r3, r3, #10
 800b818:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b81a:	697a      	ldr	r2, [r7, #20]
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	4313      	orrs	r3, r2
 800b820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	693a      	ldr	r2, [r7, #16]
 800b826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	697a      	ldr	r2, [r7, #20]
 800b82c:	621a      	str	r2, [r3, #32]
}
 800b82e:	bf00      	nop
 800b830:	371c      	adds	r7, #28
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr

0800b83a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b83a:	b480      	push	{r7}
 800b83c:	b087      	sub	sp, #28
 800b83e:	af00      	add	r7, sp, #0
 800b840:	60f8      	str	r0, [r7, #12]
 800b842:	60b9      	str	r1, [r7, #8]
 800b844:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6a1b      	ldr	r3, [r3, #32]
 800b84a:	f023 0210 	bic.w	r2, r3, #16
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	699b      	ldr	r3, [r3, #24]
 800b856:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	6a1b      	ldr	r3, [r3, #32]
 800b85c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b864:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	031b      	lsls	r3, r3, #12
 800b86a:	697a      	ldr	r2, [r7, #20]
 800b86c:	4313      	orrs	r3, r2
 800b86e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b876:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	011b      	lsls	r3, r3, #4
 800b87c:	693a      	ldr	r2, [r7, #16]
 800b87e:	4313      	orrs	r3, r2
 800b880:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	697a      	ldr	r2, [r7, #20]
 800b886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	693a      	ldr	r2, [r7, #16]
 800b88c:	621a      	str	r2, [r3, #32]
}
 800b88e:	bf00      	nop
 800b890:	371c      	adds	r7, #28
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr
	...

0800b89c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	4b09      	ldr	r3, [pc, #36]	; (800b8d4 <TIM_ITRx_SetConfig+0x38>)
 800b8b0:	4013      	ands	r3, r2
 800b8b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b8b4:	683a      	ldr	r2, [r7, #0]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	f043 0307 	orr.w	r3, r3, #7
 800b8be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	68fa      	ldr	r2, [r7, #12]
 800b8c4:	609a      	str	r2, [r3, #8]
}
 800b8c6:	bf00      	nop
 800b8c8:	3714      	adds	r7, #20
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr
 800b8d2:	bf00      	nop
 800b8d4:	ffcfff8f 	.word	0xffcfff8f

0800b8d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b087      	sub	sp, #28
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	607a      	str	r2, [r7, #4]
 800b8e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	689b      	ldr	r3, [r3, #8]
 800b8ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	021a      	lsls	r2, r3, #8
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	431a      	orrs	r2, r3
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	4313      	orrs	r3, r2
 800b900:	697a      	ldr	r2, [r7, #20]
 800b902:	4313      	orrs	r3, r2
 800b904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	697a      	ldr	r2, [r7, #20]
 800b90a:	609a      	str	r2, [r3, #8]
}
 800b90c:	bf00      	nop
 800b90e:	371c      	adds	r7, #28
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b918:	b480      	push	{r7}
 800b91a:	b087      	sub	sp, #28
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	f003 031f 	and.w	r3, r3, #31
 800b92a:	2201      	movs	r2, #1
 800b92c:	fa02 f303 	lsl.w	r3, r2, r3
 800b930:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6a1a      	ldr	r2, [r3, #32]
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	43db      	mvns	r3, r3
 800b93a:	401a      	ands	r2, r3
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6a1a      	ldr	r2, [r3, #32]
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	f003 031f 	and.w	r3, r3, #31
 800b94a:	6879      	ldr	r1, [r7, #4]
 800b94c:	fa01 f303 	lsl.w	r3, r1, r3
 800b950:	431a      	orrs	r2, r3
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	621a      	str	r2, [r3, #32]
}
 800b956:	bf00      	nop
 800b958:	371c      	adds	r7, #28
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr
	...

0800b964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b964:	b480      	push	{r7}
 800b966:	b085      	sub	sp, #20
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b974:	2b01      	cmp	r3, #1
 800b976:	d101      	bne.n	800b97c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b978:	2302      	movs	r3, #2
 800b97a:	e077      	b.n	800ba6c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2202      	movs	r2, #2
 800b988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a35      	ldr	r2, [pc, #212]	; (800ba78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d004      	beq.n	800b9b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a34      	ldr	r2, [pc, #208]	; (800ba7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d108      	bne.n	800b9c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b9b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	68fa      	ldr	r2, [r7, #12]
 800b9da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a25      	ldr	r2, [pc, #148]	; (800ba78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d02c      	beq.n	800ba40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9ee:	d027      	beq.n	800ba40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a22      	ldr	r2, [pc, #136]	; (800ba80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d022      	beq.n	800ba40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4a21      	ldr	r2, [pc, #132]	; (800ba84 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d01d      	beq.n	800ba40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a1f      	ldr	r2, [pc, #124]	; (800ba88 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d018      	beq.n	800ba40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a1a      	ldr	r2, [pc, #104]	; (800ba7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d013      	beq.n	800ba40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a1b      	ldr	r2, [pc, #108]	; (800ba8c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d00e      	beq.n	800ba40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a1a      	ldr	r2, [pc, #104]	; (800ba90 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d009      	beq.n	800ba40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a18      	ldr	r2, [pc, #96]	; (800ba94 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d004      	beq.n	800ba40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a17      	ldr	r2, [pc, #92]	; (800ba98 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d10c      	bne.n	800ba5a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	68ba      	ldr	r2, [r7, #8]
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	68ba      	ldr	r2, [r7, #8]
 800ba58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2200      	movs	r2, #0
 800ba66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3714      	adds	r7, #20
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr
 800ba78:	40010000 	.word	0x40010000
 800ba7c:	40010400 	.word	0x40010400
 800ba80:	40000400 	.word	0x40000400
 800ba84:	40000800 	.word	0x40000800
 800ba88:	40000c00 	.word	0x40000c00
 800ba8c:	40001800 	.word	0x40001800
 800ba90:	40014000 	.word	0x40014000
 800ba94:	4000e000 	.word	0x4000e000
 800ba98:	4000e400 	.word	0x4000e400

0800ba9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b085      	sub	sp, #20
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800baa6:	2300      	movs	r3, #0
 800baa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d101      	bne.n	800bab8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bab4:	2302      	movs	r3, #2
 800bab6:	e087      	b.n	800bbc8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2201      	movs	r2, #1
 800babc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	4313      	orrs	r3, r2
 800bacc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	4313      	orrs	r3, r2
 800bada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4313      	orrs	r3, r2
 800baf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	4313      	orrs	r3, r2
 800bb04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	695b      	ldr	r3, [r3, #20]
 800bb10:	4313      	orrs	r3, r2
 800bb12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	699b      	ldr	r3, [r3, #24]
 800bb2c:	041b      	lsls	r3, r3, #16
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a27      	ldr	r2, [pc, #156]	; (800bbd4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d004      	beq.n	800bb46 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a25      	ldr	r2, [pc, #148]	; (800bbd8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d106      	bne.n	800bb54 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	69db      	ldr	r3, [r3, #28]
 800bb50:	4313      	orrs	r3, r2
 800bb52:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	4a1e      	ldr	r2, [pc, #120]	; (800bbd4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d004      	beq.n	800bb68 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a1d      	ldr	r2, [pc, #116]	; (800bbd8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d126      	bne.n	800bbb6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb72:	051b      	lsls	r3, r3, #20
 800bb74:	4313      	orrs	r3, r2
 800bb76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	6a1b      	ldr	r3, [r3, #32]
 800bb82:	4313      	orrs	r3, r2
 800bb84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb90:	4313      	orrs	r3, r2
 800bb92:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a0e      	ldr	r2, [pc, #56]	; (800bbd4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d004      	beq.n	800bba8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a0d      	ldr	r2, [pc, #52]	; (800bbd8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d106      	bne.n	800bbb6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	68fa      	ldr	r2, [r7, #12]
 800bbbc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbc6:	2300      	movs	r3, #0
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3714      	adds	r7, #20
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr
 800bbd4:	40010000 	.word	0x40010000
 800bbd8:	40010400 	.word	0x40010400

0800bbdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bbe4:	bf00      	nop
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bbf8:	bf00      	nop
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bc0c:	bf00      	nop
 800bc0e:	370c      	adds	r7, #12
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr

0800bc18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d101      	bne.n	800bc2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	e042      	b.n	800bcb0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d106      	bne.n	800bc42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f7f7 ff3b 	bl	8003ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2224      	movs	r2, #36	; 0x24
 800bc46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f022 0201 	bic.w	r2, r2, #1
 800bc58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 fd12 	bl	800c684 <UART_SetConfig>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d101      	bne.n	800bc6a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bc66:	2301      	movs	r3, #1
 800bc68:	e022      	b.n	800bcb0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d002      	beq.n	800bc78 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f001 fb72 	bl	800d35c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bc86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	689a      	ldr	r2, [r3, #8]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bc96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	681a      	ldr	r2, [r3, #0]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f042 0201 	orr.w	r2, r2, #1
 800bca6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f001 fbf9 	bl	800d4a0 <UART_CheckIdleState>
 800bcae:	4603      	mov	r3, r0
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3708      	adds	r7, #8
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d101      	bne.n	800bcca <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e031      	b.n	800bd2e <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2224      	movs	r2, #36	; 0x24
 800bcce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f022 0201 	bic.w	r2, r2, #1
 800bce0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2200      	movs	r2, #0
 800bce8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f7f7 ffb4 	bl	8003c68 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2200      	movs	r2, #0
 800bd14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2200      	movs	r2, #0
 800bd22:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3708      	adds	r7, #8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
	...

0800bd38 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b08a      	sub	sp, #40	; 0x28
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	4613      	mov	r3, r2
 800bd44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd4c:	2b20      	cmp	r3, #32
 800bd4e:	d167      	bne.n	800be20 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d002      	beq.n	800bd5c <HAL_UART_Transmit_DMA+0x24>
 800bd56:	88fb      	ldrh	r3, [r7, #6]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d101      	bne.n	800bd60 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	e060      	b.n	800be22 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	68ba      	ldr	r2, [r7, #8]
 800bd64:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	88fa      	ldrh	r2, [r7, #6]
 800bd6a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	88fa      	ldrh	r2, [r7, #6]
 800bd72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2221      	movs	r2, #33	; 0x21
 800bd82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d028      	beq.n	800bde0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd92:	4a26      	ldr	r2, [pc, #152]	; (800be2c <HAL_UART_Transmit_DMA+0xf4>)
 800bd94:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd9a:	4a25      	ldr	r2, [pc, #148]	; (800be30 <HAL_UART_Transmit_DMA+0xf8>)
 800bd9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bda2:	4a24      	ldr	r2, [pc, #144]	; (800be34 <HAL_UART_Transmit_DMA+0xfc>)
 800bda4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdaa:	2200      	movs	r2, #0
 800bdac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	3328      	adds	r3, #40	; 0x28
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	88fb      	ldrh	r3, [r7, #6]
 800bdc2:	f7f8 ffaf 	bl	8004d24 <HAL_DMA_Start_IT>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d009      	beq.n	800bde0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2210      	movs	r2, #16
 800bdd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2220      	movs	r2, #32
 800bdd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800bddc:	2301      	movs	r3, #1
 800bdde:	e020      	b.n	800be22 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2240      	movs	r2, #64	; 0x40
 800bde6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	3308      	adds	r3, #8
 800bdee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	e853 3f00 	ldrex	r3, [r3]
 800bdf6:	613b      	str	r3, [r7, #16]
   return(result);
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdfe:	627b      	str	r3, [r7, #36]	; 0x24
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	3308      	adds	r3, #8
 800be06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be08:	623a      	str	r2, [r7, #32]
 800be0a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be0c:	69f9      	ldr	r1, [r7, #28]
 800be0e:	6a3a      	ldr	r2, [r7, #32]
 800be10:	e841 2300 	strex	r3, r2, [r1]
 800be14:	61bb      	str	r3, [r7, #24]
   return(result);
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1e5      	bne.n	800bde8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800be1c:	2300      	movs	r3, #0
 800be1e:	e000      	b.n	800be22 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800be20:	2302      	movs	r3, #2
  }
}
 800be22:	4618      	mov	r0, r3
 800be24:	3728      	adds	r7, #40	; 0x28
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	bf00      	nop
 800be2c:	0800d961 	.word	0x0800d961
 800be30:	0800d9f7 	.word	0x0800d9f7
 800be34:	0800db79 	.word	0x0800db79

0800be38 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b08a      	sub	sp, #40	; 0x28
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	4613      	mov	r3, r2
 800be44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be4c:	2b20      	cmp	r3, #32
 800be4e:	d137      	bne.n	800bec0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d002      	beq.n	800be5c <HAL_UART_Receive_DMA+0x24>
 800be56:	88fb      	ldrh	r3, [r7, #6]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d101      	bne.n	800be60 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800be5c:	2301      	movs	r3, #1
 800be5e:	e030      	b.n	800bec2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a18      	ldr	r2, [pc, #96]	; (800becc <HAL_UART_Receive_DMA+0x94>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d01f      	beq.n	800beb0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d018      	beq.n	800beb0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	e853 3f00 	ldrex	r3, [r3]
 800be8a:	613b      	str	r3, [r7, #16]
   return(result);
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800be92:	627b      	str	r3, [r7, #36]	; 0x24
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	461a      	mov	r2, r3
 800be9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9c:	623b      	str	r3, [r7, #32]
 800be9e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea0:	69f9      	ldr	r1, [r7, #28]
 800bea2:	6a3a      	ldr	r2, [r7, #32]
 800bea4:	e841 2300 	strex	r3, r2, [r1]
 800bea8:	61bb      	str	r3, [r7, #24]
   return(result);
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d1e6      	bne.n	800be7e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800beb0:	88fb      	ldrh	r3, [r7, #6]
 800beb2:	461a      	mov	r2, r3
 800beb4:	68b9      	ldr	r1, [r7, #8]
 800beb6:	68f8      	ldr	r0, [r7, #12]
 800beb8:	f001 fc04 	bl	800d6c4 <UART_Start_Receive_DMA>
 800bebc:	4603      	mov	r3, r0
 800bebe:	e000      	b.n	800bec2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bec0:	2302      	movs	r3, #2
  }
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3728      	adds	r7, #40	; 0x28
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	58000c00 	.word	0x58000c00

0800bed0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b0ba      	sub	sp, #232	; 0xe8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	69db      	ldr	r3, [r3, #28]
 800bede:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bef6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800befa:	f640 030f 	movw	r3, #2063	; 0x80f
 800befe:	4013      	ands	r3, r2
 800bf00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bf04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d11b      	bne.n	800bf44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf10:	f003 0320 	and.w	r3, r3, #32
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d015      	beq.n	800bf44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf1c:	f003 0320 	and.w	r3, r3, #32
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d105      	bne.n	800bf30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d009      	beq.n	800bf44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f000 8377 	beq.w	800c628 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	4798      	blx	r3
      }
      return;
 800bf42:	e371      	b.n	800c628 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bf44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f000 8123 	beq.w	800c194 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bf4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bf52:	4b8d      	ldr	r3, [pc, #564]	; (800c188 <HAL_UART_IRQHandler+0x2b8>)
 800bf54:	4013      	ands	r3, r2
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d106      	bne.n	800bf68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bf5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bf5e:	4b8b      	ldr	r3, [pc, #556]	; (800c18c <HAL_UART_IRQHandler+0x2bc>)
 800bf60:	4013      	ands	r3, r2
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	f000 8116 	beq.w	800c194 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bf68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf6c:	f003 0301 	and.w	r3, r3, #1
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d011      	beq.n	800bf98 <HAL_UART_IRQHandler+0xc8>
 800bf74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d00b      	beq.n	800bf98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2201      	movs	r2, #1
 800bf86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf8e:	f043 0201 	orr.w	r2, r3, #1
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf9c:	f003 0302 	and.w	r3, r3, #2
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d011      	beq.n	800bfc8 <HAL_UART_IRQHandler+0xf8>
 800bfa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfa8:	f003 0301 	and.w	r3, r3, #1
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d00b      	beq.n	800bfc8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2202      	movs	r2, #2
 800bfb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfbe:	f043 0204 	orr.w	r2, r3, #4
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bfc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfcc:	f003 0304 	and.w	r3, r3, #4
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d011      	beq.n	800bff8 <HAL_UART_IRQHandler+0x128>
 800bfd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfd8:	f003 0301 	and.w	r3, r3, #1
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d00b      	beq.n	800bff8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2204      	movs	r2, #4
 800bfe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfee:	f043 0202 	orr.w	r2, r3, #2
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bffc:	f003 0308 	and.w	r3, r3, #8
 800c000:	2b00      	cmp	r3, #0
 800c002:	d017      	beq.n	800c034 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c008:	f003 0320 	and.w	r3, r3, #32
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d105      	bne.n	800c01c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c010:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c014:	4b5c      	ldr	r3, [pc, #368]	; (800c188 <HAL_UART_IRQHandler+0x2b8>)
 800c016:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00b      	beq.n	800c034 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2208      	movs	r2, #8
 800c022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c02a:	f043 0208 	orr.w	r2, r3, #8
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d012      	beq.n	800c066 <HAL_UART_IRQHandler+0x196>
 800c040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c044:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00c      	beq.n	800c066 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c054:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c05c:	f043 0220 	orr.w	r2, r3, #32
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f000 82dd 	beq.w	800c62c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c076:	f003 0320 	and.w	r3, r3, #32
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d013      	beq.n	800c0a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c07e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c082:	f003 0320 	and.w	r3, r3, #32
 800c086:	2b00      	cmp	r3, #0
 800c088:	d105      	bne.n	800c096 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c08a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c08e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c092:	2b00      	cmp	r3, #0
 800c094:	d007      	beq.n	800c0a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d003      	beq.n	800c0a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0ba:	2b40      	cmp	r3, #64	; 0x40
 800c0bc:	d005      	beq.n	800c0ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c0be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c0c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d054      	beq.n	800c174 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f001 fbe2 	bl	800d894 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0da:	2b40      	cmp	r3, #64	; 0x40
 800c0dc:	d146      	bne.n	800c16c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	3308      	adds	r3, #8
 800c0e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c0ec:	e853 3f00 	ldrex	r3, [r3]
 800c0f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c0f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c0f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	3308      	adds	r3, #8
 800c106:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c10a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c10e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c112:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c116:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c11a:	e841 2300 	strex	r3, r2, [r1]
 800c11e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d1d9      	bne.n	800c0de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c130:	2b00      	cmp	r3, #0
 800c132:	d017      	beq.n	800c164 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c13a:	4a15      	ldr	r2, [pc, #84]	; (800c190 <HAL_UART_IRQHandler+0x2c0>)
 800c13c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c144:	4618      	mov	r0, r3
 800c146:	f7f9 fb75 	bl	8005834 <HAL_DMA_Abort_IT>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d019      	beq.n	800c184 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800c15e:	4610      	mov	r0, r2
 800c160:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c162:	e00f      	b.n	800c184 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f7f4 fe85 	bl	8000e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c16a:	e00b      	b.n	800c184 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f7f4 fe81 	bl	8000e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c172:	e007      	b.n	800c184 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f7f4 fe7d 	bl	8000e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800c182:	e253      	b.n	800c62c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c184:	bf00      	nop
    return;
 800c186:	e251      	b.n	800c62c <HAL_UART_IRQHandler+0x75c>
 800c188:	10000001 	.word	0x10000001
 800c18c:	04000120 	.word	0x04000120
 800c190:	0800dbf9 	.word	0x0800dbf9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c198:	2b01      	cmp	r3, #1
 800c19a:	f040 81e7 	bne.w	800c56c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c19e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1a2:	f003 0310 	and.w	r3, r3, #16
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	f000 81e0 	beq.w	800c56c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c1ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1b0:	f003 0310 	and.w	r3, r3, #16
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f000 81d9 	beq.w	800c56c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2210      	movs	r2, #16
 800c1c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	689b      	ldr	r3, [r3, #8]
 800c1c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1cc:	2b40      	cmp	r3, #64	; 0x40
 800c1ce:	f040 8151 	bne.w	800c474 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a96      	ldr	r2, [pc, #600]	; (800c434 <HAL_UART_IRQHandler+0x564>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d068      	beq.n	800c2b2 <HAL_UART_IRQHandler+0x3e2>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4a93      	ldr	r2, [pc, #588]	; (800c438 <HAL_UART_IRQHandler+0x568>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d061      	beq.n	800c2b2 <HAL_UART_IRQHandler+0x3e2>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4a91      	ldr	r2, [pc, #580]	; (800c43c <HAL_UART_IRQHandler+0x56c>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d05a      	beq.n	800c2b2 <HAL_UART_IRQHandler+0x3e2>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a8e      	ldr	r2, [pc, #568]	; (800c440 <HAL_UART_IRQHandler+0x570>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d053      	beq.n	800c2b2 <HAL_UART_IRQHandler+0x3e2>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4a8c      	ldr	r2, [pc, #560]	; (800c444 <HAL_UART_IRQHandler+0x574>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d04c      	beq.n	800c2b2 <HAL_UART_IRQHandler+0x3e2>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4a89      	ldr	r2, [pc, #548]	; (800c448 <HAL_UART_IRQHandler+0x578>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d045      	beq.n	800c2b2 <HAL_UART_IRQHandler+0x3e2>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4a87      	ldr	r2, [pc, #540]	; (800c44c <HAL_UART_IRQHandler+0x57c>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d03e      	beq.n	800c2b2 <HAL_UART_IRQHandler+0x3e2>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a84      	ldr	r2, [pc, #528]	; (800c450 <HAL_UART_IRQHandler+0x580>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d037      	beq.n	800c2b2 <HAL_UART_IRQHandler+0x3e2>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a82      	ldr	r2, [pc, #520]	; (800c454 <HAL_UART_IRQHandler+0x584>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d030      	beq.n	800c2b2 <HAL_UART_IRQHandler+0x3e2>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4a7f      	ldr	r2, [pc, #508]	; (800c458 <HAL_UART_IRQHandler+0x588>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d029      	beq.n	800c2b2 <HAL_UART_IRQHandler+0x3e2>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	4a7d      	ldr	r2, [pc, #500]	; (800c45c <HAL_UART_IRQHandler+0x58c>)
 800c268:	4293      	cmp	r3, r2
 800c26a:	d022      	beq.n	800c2b2 <HAL_UART_IRQHandler+0x3e2>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a7a      	ldr	r2, [pc, #488]	; (800c460 <HAL_UART_IRQHandler+0x590>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d01b      	beq.n	800c2b2 <HAL_UART_IRQHandler+0x3e2>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a78      	ldr	r2, [pc, #480]	; (800c464 <HAL_UART_IRQHandler+0x594>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d014      	beq.n	800c2b2 <HAL_UART_IRQHandler+0x3e2>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a75      	ldr	r2, [pc, #468]	; (800c468 <HAL_UART_IRQHandler+0x598>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d00d      	beq.n	800c2b2 <HAL_UART_IRQHandler+0x3e2>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a73      	ldr	r2, [pc, #460]	; (800c46c <HAL_UART_IRQHandler+0x59c>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d006      	beq.n	800c2b2 <HAL_UART_IRQHandler+0x3e2>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4a70      	ldr	r2, [pc, #448]	; (800c470 <HAL_UART_IRQHandler+0x5a0>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d106      	bne.n	800c2c0 <HAL_UART_IRQHandler+0x3f0>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	e005      	b.n	800c2cc <HAL_UART_IRQHandler+0x3fc>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c2d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	f000 81ab 	beq.w	800c630 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c2e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	f080 81a3 	bcs.w	800c630 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c2f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2fa:	69db      	ldr	r3, [r3, #28]
 800c2fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c300:	f000 8087 	beq.w	800c412 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c30c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c310:	e853 3f00 	ldrex	r3, [r3]
 800c314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c31c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	461a      	mov	r2, r3
 800c32a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c32e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c332:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c336:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c33a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c33e:	e841 2300 	strex	r3, r2, [r1]
 800c342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c346:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1da      	bne.n	800c304 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	3308      	adds	r3, #8
 800c354:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c358:	e853 3f00 	ldrex	r3, [r3]
 800c35c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c35e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c360:	f023 0301 	bic.w	r3, r3, #1
 800c364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	3308      	adds	r3, #8
 800c36e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c372:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c376:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c378:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c37a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c37e:	e841 2300 	strex	r3, r2, [r1]
 800c382:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c386:	2b00      	cmp	r3, #0
 800c388:	d1e1      	bne.n	800c34e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	3308      	adds	r3, #8
 800c390:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c394:	e853 3f00 	ldrex	r3, [r3]
 800c398:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c39a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c39c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	3308      	adds	r3, #8
 800c3aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c3ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c3b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c3b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c3b6:	e841 2300 	strex	r3, r2, [r1]
 800c3ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c3bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d1e3      	bne.n	800c38a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2220      	movs	r2, #32
 800c3c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3d8:	e853 3f00 	ldrex	r3, [r3]
 800c3dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c3de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3e0:	f023 0310 	bic.w	r3, r3, #16
 800c3e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c3f2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c3f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c3f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c3fa:	e841 2300 	strex	r3, r2, [r1]
 800c3fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1e4      	bne.n	800c3d0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7f8 fef3 	bl	80051f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2202      	movs	r2, #2
 800c416:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c424:	b29b      	uxth	r3, r3
 800c426:	1ad3      	subs	r3, r2, r3
 800c428:	b29b      	uxth	r3, r3
 800c42a:	4619      	mov	r1, r3
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 f91d 	bl	800c66c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c432:	e0fd      	b.n	800c630 <HAL_UART_IRQHandler+0x760>
 800c434:	40020010 	.word	0x40020010
 800c438:	40020028 	.word	0x40020028
 800c43c:	40020040 	.word	0x40020040
 800c440:	40020058 	.word	0x40020058
 800c444:	40020070 	.word	0x40020070
 800c448:	40020088 	.word	0x40020088
 800c44c:	400200a0 	.word	0x400200a0
 800c450:	400200b8 	.word	0x400200b8
 800c454:	40020410 	.word	0x40020410
 800c458:	40020428 	.word	0x40020428
 800c45c:	40020440 	.word	0x40020440
 800c460:	40020458 	.word	0x40020458
 800c464:	40020470 	.word	0x40020470
 800c468:	40020488 	.word	0x40020488
 800c46c:	400204a0 	.word	0x400204a0
 800c470:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c480:	b29b      	uxth	r3, r3
 800c482:	1ad3      	subs	r3, r2, r3
 800c484:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c48e:	b29b      	uxth	r3, r3
 800c490:	2b00      	cmp	r3, #0
 800c492:	f000 80cf 	beq.w	800c634 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c496:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f000 80ca 	beq.w	800c634 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a8:	e853 3f00 	ldrex	r3, [r3]
 800c4ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c4b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	461a      	mov	r2, r3
 800c4be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c4c2:	647b      	str	r3, [r7, #68]	; 0x44
 800c4c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c4c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4ca:	e841 2300 	strex	r3, r2, [r1]
 800c4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c4d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d1e4      	bne.n	800c4a0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	3308      	adds	r3, #8
 800c4dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e0:	e853 3f00 	ldrex	r3, [r3]
 800c4e4:	623b      	str	r3, [r7, #32]
   return(result);
 800c4e6:	6a3a      	ldr	r2, [r7, #32]
 800c4e8:	4b55      	ldr	r3, [pc, #340]	; (800c640 <HAL_UART_IRQHandler+0x770>)
 800c4ea:	4013      	ands	r3, r2
 800c4ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	3308      	adds	r3, #8
 800c4f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c4fa:	633a      	str	r2, [r7, #48]	; 0x30
 800c4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c502:	e841 2300 	strex	r3, r2, [r1]
 800c506:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d1e3      	bne.n	800c4d6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2220      	movs	r2, #32
 800c512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2200      	movs	r2, #0
 800c51a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2200      	movs	r2, #0
 800c520:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	e853 3f00 	ldrex	r3, [r3]
 800c52e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f023 0310 	bic.w	r3, r3, #16
 800c536:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	461a      	mov	r2, r3
 800c540:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c544:	61fb      	str	r3, [r7, #28]
 800c546:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c548:	69b9      	ldr	r1, [r7, #24]
 800c54a:	69fa      	ldr	r2, [r7, #28]
 800c54c:	e841 2300 	strex	r3, r2, [r1]
 800c550:	617b      	str	r3, [r7, #20]
   return(result);
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d1e4      	bne.n	800c522 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2202      	movs	r2, #2
 800c55c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c55e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c562:	4619      	mov	r1, r3
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 f881 	bl	800c66c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c56a:	e063      	b.n	800c634 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c56c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c570:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c574:	2b00      	cmp	r3, #0
 800c576:	d00e      	beq.n	800c596 <HAL_UART_IRQHandler+0x6c6>
 800c578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c57c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c580:	2b00      	cmp	r3, #0
 800c582:	d008      	beq.n	800c596 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c58c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f001 fb73 	bl	800dc7a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c594:	e051      	b.n	800c63a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c59a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d014      	beq.n	800c5cc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c5a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d105      	bne.n	800c5ba <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c5ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d008      	beq.n	800c5cc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d03a      	beq.n	800c638 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	4798      	blx	r3
    }
    return;
 800c5ca:	e035      	b.n	800c638 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c5cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d009      	beq.n	800c5ec <HAL_UART_IRQHandler+0x71c>
 800c5d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d003      	beq.n	800c5ec <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f001 fb1d 	bl	800dc24 <UART_EndTransmit_IT>
    return;
 800c5ea:	e026      	b.n	800c63a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c5ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d009      	beq.n	800c60c <HAL_UART_IRQHandler+0x73c>
 800c5f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c600:	2b00      	cmp	r3, #0
 800c602:	d003      	beq.n	800c60c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f001 fb4c 	bl	800dca2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c60a:	e016      	b.n	800c63a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c60c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c610:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c614:	2b00      	cmp	r3, #0
 800c616:	d010      	beq.n	800c63a <HAL_UART_IRQHandler+0x76a>
 800c618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	da0c      	bge.n	800c63a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f001 fb34 	bl	800dc8e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c626:	e008      	b.n	800c63a <HAL_UART_IRQHandler+0x76a>
      return;
 800c628:	bf00      	nop
 800c62a:	e006      	b.n	800c63a <HAL_UART_IRQHandler+0x76a>
    return;
 800c62c:	bf00      	nop
 800c62e:	e004      	b.n	800c63a <HAL_UART_IRQHandler+0x76a>
      return;
 800c630:	bf00      	nop
 800c632:	e002      	b.n	800c63a <HAL_UART_IRQHandler+0x76a>
      return;
 800c634:	bf00      	nop
 800c636:	e000      	b.n	800c63a <HAL_UART_IRQHandler+0x76a>
    return;
 800c638:	bf00      	nop
  }
}
 800c63a:	37e8      	adds	r7, #232	; 0xe8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	effffffe 	.word	0xeffffffe

0800c644 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c64c:	bf00      	nop
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c660:	bf00      	nop
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr

0800c66c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b083      	sub	sp, #12
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	460b      	mov	r3, r1
 800c676:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c678:	bf00      	nop
 800c67a:	370c      	adds	r7, #12
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr

0800c684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c688:	b092      	sub	sp, #72	; 0x48
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c68e:	2300      	movs	r3, #0
 800c690:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	689a      	ldr	r2, [r3, #8]
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	691b      	ldr	r3, [r3, #16]
 800c69c:	431a      	orrs	r2, r3
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	695b      	ldr	r3, [r3, #20]
 800c6a2:	431a      	orrs	r2, r3
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	69db      	ldr	r3, [r3, #28]
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	4bbe      	ldr	r3, [pc, #760]	; (800c9ac <UART_SetConfig+0x328>)
 800c6b4:	4013      	ands	r3, r2
 800c6b6:	697a      	ldr	r2, [r7, #20]
 800c6b8:	6812      	ldr	r2, [r2, #0]
 800c6ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c6bc:	430b      	orrs	r3, r1
 800c6be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	68da      	ldr	r2, [r3, #12]
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	430a      	orrs	r2, r1
 800c6d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	699b      	ldr	r3, [r3, #24]
 800c6da:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4ab3      	ldr	r2, [pc, #716]	; (800c9b0 <UART_SetConfig+0x32c>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d004      	beq.n	800c6f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	6a1b      	ldr	r3, [r3, #32]
 800c6ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	689a      	ldr	r2, [r3, #8]
 800c6f6:	4baf      	ldr	r3, [pc, #700]	; (800c9b4 <UART_SetConfig+0x330>)
 800c6f8:	4013      	ands	r3, r2
 800c6fa:	697a      	ldr	r2, [r7, #20]
 800c6fc:	6812      	ldr	r2, [r2, #0]
 800c6fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c700:	430b      	orrs	r3, r1
 800c702:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c70a:	f023 010f 	bic.w	r1, r3, #15
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	430a      	orrs	r2, r1
 800c718:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4aa6      	ldr	r2, [pc, #664]	; (800c9b8 <UART_SetConfig+0x334>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d177      	bne.n	800c814 <UART_SetConfig+0x190>
 800c724:	4ba5      	ldr	r3, [pc, #660]	; (800c9bc <UART_SetConfig+0x338>)
 800c726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c728:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c72c:	2b28      	cmp	r3, #40	; 0x28
 800c72e:	d86d      	bhi.n	800c80c <UART_SetConfig+0x188>
 800c730:	a201      	add	r2, pc, #4	; (adr r2, 800c738 <UART_SetConfig+0xb4>)
 800c732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c736:	bf00      	nop
 800c738:	0800c7dd 	.word	0x0800c7dd
 800c73c:	0800c80d 	.word	0x0800c80d
 800c740:	0800c80d 	.word	0x0800c80d
 800c744:	0800c80d 	.word	0x0800c80d
 800c748:	0800c80d 	.word	0x0800c80d
 800c74c:	0800c80d 	.word	0x0800c80d
 800c750:	0800c80d 	.word	0x0800c80d
 800c754:	0800c80d 	.word	0x0800c80d
 800c758:	0800c7e5 	.word	0x0800c7e5
 800c75c:	0800c80d 	.word	0x0800c80d
 800c760:	0800c80d 	.word	0x0800c80d
 800c764:	0800c80d 	.word	0x0800c80d
 800c768:	0800c80d 	.word	0x0800c80d
 800c76c:	0800c80d 	.word	0x0800c80d
 800c770:	0800c80d 	.word	0x0800c80d
 800c774:	0800c80d 	.word	0x0800c80d
 800c778:	0800c7ed 	.word	0x0800c7ed
 800c77c:	0800c80d 	.word	0x0800c80d
 800c780:	0800c80d 	.word	0x0800c80d
 800c784:	0800c80d 	.word	0x0800c80d
 800c788:	0800c80d 	.word	0x0800c80d
 800c78c:	0800c80d 	.word	0x0800c80d
 800c790:	0800c80d 	.word	0x0800c80d
 800c794:	0800c80d 	.word	0x0800c80d
 800c798:	0800c7f5 	.word	0x0800c7f5
 800c79c:	0800c80d 	.word	0x0800c80d
 800c7a0:	0800c80d 	.word	0x0800c80d
 800c7a4:	0800c80d 	.word	0x0800c80d
 800c7a8:	0800c80d 	.word	0x0800c80d
 800c7ac:	0800c80d 	.word	0x0800c80d
 800c7b0:	0800c80d 	.word	0x0800c80d
 800c7b4:	0800c80d 	.word	0x0800c80d
 800c7b8:	0800c7fd 	.word	0x0800c7fd
 800c7bc:	0800c80d 	.word	0x0800c80d
 800c7c0:	0800c80d 	.word	0x0800c80d
 800c7c4:	0800c80d 	.word	0x0800c80d
 800c7c8:	0800c80d 	.word	0x0800c80d
 800c7cc:	0800c80d 	.word	0x0800c80d
 800c7d0:	0800c80d 	.word	0x0800c80d
 800c7d4:	0800c80d 	.word	0x0800c80d
 800c7d8:	0800c805 	.word	0x0800c805
 800c7dc:	2301      	movs	r3, #1
 800c7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7e2:	e326      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c7e4:	2304      	movs	r3, #4
 800c7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ea:	e322      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c7ec:	2308      	movs	r3, #8
 800c7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7f2:	e31e      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c7f4:	2310      	movs	r3, #16
 800c7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7fa:	e31a      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c7fc:	2320      	movs	r3, #32
 800c7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c802:	e316      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c804:	2340      	movs	r3, #64	; 0x40
 800c806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c80a:	e312      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c80c:	2380      	movs	r3, #128	; 0x80
 800c80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c812:	e30e      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a69      	ldr	r2, [pc, #420]	; (800c9c0 <UART_SetConfig+0x33c>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d130      	bne.n	800c880 <UART_SetConfig+0x1fc>
 800c81e:	4b67      	ldr	r3, [pc, #412]	; (800c9bc <UART_SetConfig+0x338>)
 800c820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c822:	f003 0307 	and.w	r3, r3, #7
 800c826:	2b05      	cmp	r3, #5
 800c828:	d826      	bhi.n	800c878 <UART_SetConfig+0x1f4>
 800c82a:	a201      	add	r2, pc, #4	; (adr r2, 800c830 <UART_SetConfig+0x1ac>)
 800c82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c830:	0800c849 	.word	0x0800c849
 800c834:	0800c851 	.word	0x0800c851
 800c838:	0800c859 	.word	0x0800c859
 800c83c:	0800c861 	.word	0x0800c861
 800c840:	0800c869 	.word	0x0800c869
 800c844:	0800c871 	.word	0x0800c871
 800c848:	2300      	movs	r3, #0
 800c84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c84e:	e2f0      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c850:	2304      	movs	r3, #4
 800c852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c856:	e2ec      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c858:	2308      	movs	r3, #8
 800c85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c85e:	e2e8      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c860:	2310      	movs	r3, #16
 800c862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c866:	e2e4      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c868:	2320      	movs	r3, #32
 800c86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c86e:	e2e0      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c870:	2340      	movs	r3, #64	; 0x40
 800c872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c876:	e2dc      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c878:	2380      	movs	r3, #128	; 0x80
 800c87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c87e:	e2d8      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a4f      	ldr	r2, [pc, #316]	; (800c9c4 <UART_SetConfig+0x340>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d130      	bne.n	800c8ec <UART_SetConfig+0x268>
 800c88a:	4b4c      	ldr	r3, [pc, #304]	; (800c9bc <UART_SetConfig+0x338>)
 800c88c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c88e:	f003 0307 	and.w	r3, r3, #7
 800c892:	2b05      	cmp	r3, #5
 800c894:	d826      	bhi.n	800c8e4 <UART_SetConfig+0x260>
 800c896:	a201      	add	r2, pc, #4	; (adr r2, 800c89c <UART_SetConfig+0x218>)
 800c898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c89c:	0800c8b5 	.word	0x0800c8b5
 800c8a0:	0800c8bd 	.word	0x0800c8bd
 800c8a4:	0800c8c5 	.word	0x0800c8c5
 800c8a8:	0800c8cd 	.word	0x0800c8cd
 800c8ac:	0800c8d5 	.word	0x0800c8d5
 800c8b0:	0800c8dd 	.word	0x0800c8dd
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ba:	e2ba      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c8bc:	2304      	movs	r3, #4
 800c8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8c2:	e2b6      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c8c4:	2308      	movs	r3, #8
 800c8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ca:	e2b2      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c8cc:	2310      	movs	r3, #16
 800c8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8d2:	e2ae      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c8d4:	2320      	movs	r3, #32
 800c8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8da:	e2aa      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c8dc:	2340      	movs	r3, #64	; 0x40
 800c8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8e2:	e2a6      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c8e4:	2380      	movs	r3, #128	; 0x80
 800c8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ea:	e2a2      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a35      	ldr	r2, [pc, #212]	; (800c9c8 <UART_SetConfig+0x344>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d130      	bne.n	800c958 <UART_SetConfig+0x2d4>
 800c8f6:	4b31      	ldr	r3, [pc, #196]	; (800c9bc <UART_SetConfig+0x338>)
 800c8f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8fa:	f003 0307 	and.w	r3, r3, #7
 800c8fe:	2b05      	cmp	r3, #5
 800c900:	d826      	bhi.n	800c950 <UART_SetConfig+0x2cc>
 800c902:	a201      	add	r2, pc, #4	; (adr r2, 800c908 <UART_SetConfig+0x284>)
 800c904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c908:	0800c921 	.word	0x0800c921
 800c90c:	0800c929 	.word	0x0800c929
 800c910:	0800c931 	.word	0x0800c931
 800c914:	0800c939 	.word	0x0800c939
 800c918:	0800c941 	.word	0x0800c941
 800c91c:	0800c949 	.word	0x0800c949
 800c920:	2300      	movs	r3, #0
 800c922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c926:	e284      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c928:	2304      	movs	r3, #4
 800c92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c92e:	e280      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c930:	2308      	movs	r3, #8
 800c932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c936:	e27c      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c938:	2310      	movs	r3, #16
 800c93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c93e:	e278      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c940:	2320      	movs	r3, #32
 800c942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c946:	e274      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c948:	2340      	movs	r3, #64	; 0x40
 800c94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c94e:	e270      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c950:	2380      	movs	r3, #128	; 0x80
 800c952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c956:	e26c      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a1b      	ldr	r2, [pc, #108]	; (800c9cc <UART_SetConfig+0x348>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d142      	bne.n	800c9e8 <UART_SetConfig+0x364>
 800c962:	4b16      	ldr	r3, [pc, #88]	; (800c9bc <UART_SetConfig+0x338>)
 800c964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c966:	f003 0307 	and.w	r3, r3, #7
 800c96a:	2b05      	cmp	r3, #5
 800c96c:	d838      	bhi.n	800c9e0 <UART_SetConfig+0x35c>
 800c96e:	a201      	add	r2, pc, #4	; (adr r2, 800c974 <UART_SetConfig+0x2f0>)
 800c970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c974:	0800c98d 	.word	0x0800c98d
 800c978:	0800c995 	.word	0x0800c995
 800c97c:	0800c99d 	.word	0x0800c99d
 800c980:	0800c9a5 	.word	0x0800c9a5
 800c984:	0800c9d1 	.word	0x0800c9d1
 800c988:	0800c9d9 	.word	0x0800c9d9
 800c98c:	2300      	movs	r3, #0
 800c98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c992:	e24e      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c994:	2304      	movs	r3, #4
 800c996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c99a:	e24a      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c99c:	2308      	movs	r3, #8
 800c99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9a2:	e246      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c9a4:	2310      	movs	r3, #16
 800c9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9aa:	e242      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c9ac:	cfff69f3 	.word	0xcfff69f3
 800c9b0:	58000c00 	.word	0x58000c00
 800c9b4:	11fff4ff 	.word	0x11fff4ff
 800c9b8:	40011000 	.word	0x40011000
 800c9bc:	58024400 	.word	0x58024400
 800c9c0:	40004400 	.word	0x40004400
 800c9c4:	40004800 	.word	0x40004800
 800c9c8:	40004c00 	.word	0x40004c00
 800c9cc:	40005000 	.word	0x40005000
 800c9d0:	2320      	movs	r3, #32
 800c9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9d6:	e22c      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c9d8:	2340      	movs	r3, #64	; 0x40
 800c9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9de:	e228      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c9e0:	2380      	movs	r3, #128	; 0x80
 800c9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9e6:	e224      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4ab1      	ldr	r2, [pc, #708]	; (800ccb4 <UART_SetConfig+0x630>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d176      	bne.n	800cae0 <UART_SetConfig+0x45c>
 800c9f2:	4bb1      	ldr	r3, [pc, #708]	; (800ccb8 <UART_SetConfig+0x634>)
 800c9f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c9fa:	2b28      	cmp	r3, #40	; 0x28
 800c9fc:	d86c      	bhi.n	800cad8 <UART_SetConfig+0x454>
 800c9fe:	a201      	add	r2, pc, #4	; (adr r2, 800ca04 <UART_SetConfig+0x380>)
 800ca00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca04:	0800caa9 	.word	0x0800caa9
 800ca08:	0800cad9 	.word	0x0800cad9
 800ca0c:	0800cad9 	.word	0x0800cad9
 800ca10:	0800cad9 	.word	0x0800cad9
 800ca14:	0800cad9 	.word	0x0800cad9
 800ca18:	0800cad9 	.word	0x0800cad9
 800ca1c:	0800cad9 	.word	0x0800cad9
 800ca20:	0800cad9 	.word	0x0800cad9
 800ca24:	0800cab1 	.word	0x0800cab1
 800ca28:	0800cad9 	.word	0x0800cad9
 800ca2c:	0800cad9 	.word	0x0800cad9
 800ca30:	0800cad9 	.word	0x0800cad9
 800ca34:	0800cad9 	.word	0x0800cad9
 800ca38:	0800cad9 	.word	0x0800cad9
 800ca3c:	0800cad9 	.word	0x0800cad9
 800ca40:	0800cad9 	.word	0x0800cad9
 800ca44:	0800cab9 	.word	0x0800cab9
 800ca48:	0800cad9 	.word	0x0800cad9
 800ca4c:	0800cad9 	.word	0x0800cad9
 800ca50:	0800cad9 	.word	0x0800cad9
 800ca54:	0800cad9 	.word	0x0800cad9
 800ca58:	0800cad9 	.word	0x0800cad9
 800ca5c:	0800cad9 	.word	0x0800cad9
 800ca60:	0800cad9 	.word	0x0800cad9
 800ca64:	0800cac1 	.word	0x0800cac1
 800ca68:	0800cad9 	.word	0x0800cad9
 800ca6c:	0800cad9 	.word	0x0800cad9
 800ca70:	0800cad9 	.word	0x0800cad9
 800ca74:	0800cad9 	.word	0x0800cad9
 800ca78:	0800cad9 	.word	0x0800cad9
 800ca7c:	0800cad9 	.word	0x0800cad9
 800ca80:	0800cad9 	.word	0x0800cad9
 800ca84:	0800cac9 	.word	0x0800cac9
 800ca88:	0800cad9 	.word	0x0800cad9
 800ca8c:	0800cad9 	.word	0x0800cad9
 800ca90:	0800cad9 	.word	0x0800cad9
 800ca94:	0800cad9 	.word	0x0800cad9
 800ca98:	0800cad9 	.word	0x0800cad9
 800ca9c:	0800cad9 	.word	0x0800cad9
 800caa0:	0800cad9 	.word	0x0800cad9
 800caa4:	0800cad1 	.word	0x0800cad1
 800caa8:	2301      	movs	r3, #1
 800caaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caae:	e1c0      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cab0:	2304      	movs	r3, #4
 800cab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cab6:	e1bc      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cab8:	2308      	movs	r3, #8
 800caba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cabe:	e1b8      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cac0:	2310      	movs	r3, #16
 800cac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cac6:	e1b4      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cac8:	2320      	movs	r3, #32
 800caca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cace:	e1b0      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cad0:	2340      	movs	r3, #64	; 0x40
 800cad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cad6:	e1ac      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cad8:	2380      	movs	r3, #128	; 0x80
 800cada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cade:	e1a8      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a75      	ldr	r2, [pc, #468]	; (800ccbc <UART_SetConfig+0x638>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d130      	bne.n	800cb4c <UART_SetConfig+0x4c8>
 800caea:	4b73      	ldr	r3, [pc, #460]	; (800ccb8 <UART_SetConfig+0x634>)
 800caec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caee:	f003 0307 	and.w	r3, r3, #7
 800caf2:	2b05      	cmp	r3, #5
 800caf4:	d826      	bhi.n	800cb44 <UART_SetConfig+0x4c0>
 800caf6:	a201      	add	r2, pc, #4	; (adr r2, 800cafc <UART_SetConfig+0x478>)
 800caf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cafc:	0800cb15 	.word	0x0800cb15
 800cb00:	0800cb1d 	.word	0x0800cb1d
 800cb04:	0800cb25 	.word	0x0800cb25
 800cb08:	0800cb2d 	.word	0x0800cb2d
 800cb0c:	0800cb35 	.word	0x0800cb35
 800cb10:	0800cb3d 	.word	0x0800cb3d
 800cb14:	2300      	movs	r3, #0
 800cb16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb1a:	e18a      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cb1c:	2304      	movs	r3, #4
 800cb1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb22:	e186      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cb24:	2308      	movs	r3, #8
 800cb26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb2a:	e182      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cb2c:	2310      	movs	r3, #16
 800cb2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb32:	e17e      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cb34:	2320      	movs	r3, #32
 800cb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb3a:	e17a      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cb3c:	2340      	movs	r3, #64	; 0x40
 800cb3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb42:	e176      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cb44:	2380      	movs	r3, #128	; 0x80
 800cb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb4a:	e172      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a5b      	ldr	r2, [pc, #364]	; (800ccc0 <UART_SetConfig+0x63c>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d130      	bne.n	800cbb8 <UART_SetConfig+0x534>
 800cb56:	4b58      	ldr	r3, [pc, #352]	; (800ccb8 <UART_SetConfig+0x634>)
 800cb58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb5a:	f003 0307 	and.w	r3, r3, #7
 800cb5e:	2b05      	cmp	r3, #5
 800cb60:	d826      	bhi.n	800cbb0 <UART_SetConfig+0x52c>
 800cb62:	a201      	add	r2, pc, #4	; (adr r2, 800cb68 <UART_SetConfig+0x4e4>)
 800cb64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb68:	0800cb81 	.word	0x0800cb81
 800cb6c:	0800cb89 	.word	0x0800cb89
 800cb70:	0800cb91 	.word	0x0800cb91
 800cb74:	0800cb99 	.word	0x0800cb99
 800cb78:	0800cba1 	.word	0x0800cba1
 800cb7c:	0800cba9 	.word	0x0800cba9
 800cb80:	2300      	movs	r3, #0
 800cb82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb86:	e154      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cb88:	2304      	movs	r3, #4
 800cb8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb8e:	e150      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cb90:	2308      	movs	r3, #8
 800cb92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb96:	e14c      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cb98:	2310      	movs	r3, #16
 800cb9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb9e:	e148      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cba0:	2320      	movs	r3, #32
 800cba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cba6:	e144      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cba8:	2340      	movs	r3, #64	; 0x40
 800cbaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbae:	e140      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cbb0:	2380      	movs	r3, #128	; 0x80
 800cbb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbb6:	e13c      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a41      	ldr	r2, [pc, #260]	; (800ccc4 <UART_SetConfig+0x640>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	f040 8082 	bne.w	800ccc8 <UART_SetConfig+0x644>
 800cbc4:	4b3c      	ldr	r3, [pc, #240]	; (800ccb8 <UART_SetConfig+0x634>)
 800cbc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cbcc:	2b28      	cmp	r3, #40	; 0x28
 800cbce:	d86d      	bhi.n	800ccac <UART_SetConfig+0x628>
 800cbd0:	a201      	add	r2, pc, #4	; (adr r2, 800cbd8 <UART_SetConfig+0x554>)
 800cbd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd6:	bf00      	nop
 800cbd8:	0800cc7d 	.word	0x0800cc7d
 800cbdc:	0800ccad 	.word	0x0800ccad
 800cbe0:	0800ccad 	.word	0x0800ccad
 800cbe4:	0800ccad 	.word	0x0800ccad
 800cbe8:	0800ccad 	.word	0x0800ccad
 800cbec:	0800ccad 	.word	0x0800ccad
 800cbf0:	0800ccad 	.word	0x0800ccad
 800cbf4:	0800ccad 	.word	0x0800ccad
 800cbf8:	0800cc85 	.word	0x0800cc85
 800cbfc:	0800ccad 	.word	0x0800ccad
 800cc00:	0800ccad 	.word	0x0800ccad
 800cc04:	0800ccad 	.word	0x0800ccad
 800cc08:	0800ccad 	.word	0x0800ccad
 800cc0c:	0800ccad 	.word	0x0800ccad
 800cc10:	0800ccad 	.word	0x0800ccad
 800cc14:	0800ccad 	.word	0x0800ccad
 800cc18:	0800cc8d 	.word	0x0800cc8d
 800cc1c:	0800ccad 	.word	0x0800ccad
 800cc20:	0800ccad 	.word	0x0800ccad
 800cc24:	0800ccad 	.word	0x0800ccad
 800cc28:	0800ccad 	.word	0x0800ccad
 800cc2c:	0800ccad 	.word	0x0800ccad
 800cc30:	0800ccad 	.word	0x0800ccad
 800cc34:	0800ccad 	.word	0x0800ccad
 800cc38:	0800cc95 	.word	0x0800cc95
 800cc3c:	0800ccad 	.word	0x0800ccad
 800cc40:	0800ccad 	.word	0x0800ccad
 800cc44:	0800ccad 	.word	0x0800ccad
 800cc48:	0800ccad 	.word	0x0800ccad
 800cc4c:	0800ccad 	.word	0x0800ccad
 800cc50:	0800ccad 	.word	0x0800ccad
 800cc54:	0800ccad 	.word	0x0800ccad
 800cc58:	0800cc9d 	.word	0x0800cc9d
 800cc5c:	0800ccad 	.word	0x0800ccad
 800cc60:	0800ccad 	.word	0x0800ccad
 800cc64:	0800ccad 	.word	0x0800ccad
 800cc68:	0800ccad 	.word	0x0800ccad
 800cc6c:	0800ccad 	.word	0x0800ccad
 800cc70:	0800ccad 	.word	0x0800ccad
 800cc74:	0800ccad 	.word	0x0800ccad
 800cc78:	0800cca5 	.word	0x0800cca5
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc82:	e0d6      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cc84:	2304      	movs	r3, #4
 800cc86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc8a:	e0d2      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cc8c:	2308      	movs	r3, #8
 800cc8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc92:	e0ce      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cc94:	2310      	movs	r3, #16
 800cc96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc9a:	e0ca      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cc9c:	2320      	movs	r3, #32
 800cc9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cca2:	e0c6      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cca4:	2340      	movs	r3, #64	; 0x40
 800cca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccaa:	e0c2      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800ccac:	2380      	movs	r3, #128	; 0x80
 800ccae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccb2:	e0be      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800ccb4:	40011400 	.word	0x40011400
 800ccb8:	58024400 	.word	0x58024400
 800ccbc:	40007800 	.word	0x40007800
 800ccc0:	40007c00 	.word	0x40007c00
 800ccc4:	40011800 	.word	0x40011800
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4aad      	ldr	r2, [pc, #692]	; (800cf84 <UART_SetConfig+0x900>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d176      	bne.n	800cdc0 <UART_SetConfig+0x73c>
 800ccd2:	4bad      	ldr	r3, [pc, #692]	; (800cf88 <UART_SetConfig+0x904>)
 800ccd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ccda:	2b28      	cmp	r3, #40	; 0x28
 800ccdc:	d86c      	bhi.n	800cdb8 <UART_SetConfig+0x734>
 800ccde:	a201      	add	r2, pc, #4	; (adr r2, 800cce4 <UART_SetConfig+0x660>)
 800cce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cce4:	0800cd89 	.word	0x0800cd89
 800cce8:	0800cdb9 	.word	0x0800cdb9
 800ccec:	0800cdb9 	.word	0x0800cdb9
 800ccf0:	0800cdb9 	.word	0x0800cdb9
 800ccf4:	0800cdb9 	.word	0x0800cdb9
 800ccf8:	0800cdb9 	.word	0x0800cdb9
 800ccfc:	0800cdb9 	.word	0x0800cdb9
 800cd00:	0800cdb9 	.word	0x0800cdb9
 800cd04:	0800cd91 	.word	0x0800cd91
 800cd08:	0800cdb9 	.word	0x0800cdb9
 800cd0c:	0800cdb9 	.word	0x0800cdb9
 800cd10:	0800cdb9 	.word	0x0800cdb9
 800cd14:	0800cdb9 	.word	0x0800cdb9
 800cd18:	0800cdb9 	.word	0x0800cdb9
 800cd1c:	0800cdb9 	.word	0x0800cdb9
 800cd20:	0800cdb9 	.word	0x0800cdb9
 800cd24:	0800cd99 	.word	0x0800cd99
 800cd28:	0800cdb9 	.word	0x0800cdb9
 800cd2c:	0800cdb9 	.word	0x0800cdb9
 800cd30:	0800cdb9 	.word	0x0800cdb9
 800cd34:	0800cdb9 	.word	0x0800cdb9
 800cd38:	0800cdb9 	.word	0x0800cdb9
 800cd3c:	0800cdb9 	.word	0x0800cdb9
 800cd40:	0800cdb9 	.word	0x0800cdb9
 800cd44:	0800cda1 	.word	0x0800cda1
 800cd48:	0800cdb9 	.word	0x0800cdb9
 800cd4c:	0800cdb9 	.word	0x0800cdb9
 800cd50:	0800cdb9 	.word	0x0800cdb9
 800cd54:	0800cdb9 	.word	0x0800cdb9
 800cd58:	0800cdb9 	.word	0x0800cdb9
 800cd5c:	0800cdb9 	.word	0x0800cdb9
 800cd60:	0800cdb9 	.word	0x0800cdb9
 800cd64:	0800cda9 	.word	0x0800cda9
 800cd68:	0800cdb9 	.word	0x0800cdb9
 800cd6c:	0800cdb9 	.word	0x0800cdb9
 800cd70:	0800cdb9 	.word	0x0800cdb9
 800cd74:	0800cdb9 	.word	0x0800cdb9
 800cd78:	0800cdb9 	.word	0x0800cdb9
 800cd7c:	0800cdb9 	.word	0x0800cdb9
 800cd80:	0800cdb9 	.word	0x0800cdb9
 800cd84:	0800cdb1 	.word	0x0800cdb1
 800cd88:	2301      	movs	r3, #1
 800cd8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd8e:	e050      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cd90:	2304      	movs	r3, #4
 800cd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd96:	e04c      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cd98:	2308      	movs	r3, #8
 800cd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd9e:	e048      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cda0:	2310      	movs	r3, #16
 800cda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cda6:	e044      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cda8:	2320      	movs	r3, #32
 800cdaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdae:	e040      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cdb0:	2340      	movs	r3, #64	; 0x40
 800cdb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdb6:	e03c      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cdb8:	2380      	movs	r3, #128	; 0x80
 800cdba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdbe:	e038      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a71      	ldr	r2, [pc, #452]	; (800cf8c <UART_SetConfig+0x908>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d130      	bne.n	800ce2c <UART_SetConfig+0x7a8>
 800cdca:	4b6f      	ldr	r3, [pc, #444]	; (800cf88 <UART_SetConfig+0x904>)
 800cdcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdce:	f003 0307 	and.w	r3, r3, #7
 800cdd2:	2b05      	cmp	r3, #5
 800cdd4:	d826      	bhi.n	800ce24 <UART_SetConfig+0x7a0>
 800cdd6:	a201      	add	r2, pc, #4	; (adr r2, 800cddc <UART_SetConfig+0x758>)
 800cdd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cddc:	0800cdf5 	.word	0x0800cdf5
 800cde0:	0800cdfd 	.word	0x0800cdfd
 800cde4:	0800ce05 	.word	0x0800ce05
 800cde8:	0800ce0d 	.word	0x0800ce0d
 800cdec:	0800ce15 	.word	0x0800ce15
 800cdf0:	0800ce1d 	.word	0x0800ce1d
 800cdf4:	2302      	movs	r3, #2
 800cdf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdfa:	e01a      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800cdfc:	2304      	movs	r3, #4
 800cdfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce02:	e016      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800ce04:	2308      	movs	r3, #8
 800ce06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce0a:	e012      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800ce0c:	2310      	movs	r3, #16
 800ce0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce12:	e00e      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800ce14:	2320      	movs	r3, #32
 800ce16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce1a:	e00a      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800ce1c:	2340      	movs	r3, #64	; 0x40
 800ce1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce22:	e006      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800ce24:	2380      	movs	r3, #128	; 0x80
 800ce26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce2a:	e002      	b.n	800ce32 <UART_SetConfig+0x7ae>
 800ce2c:	2380      	movs	r3, #128	; 0x80
 800ce2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a55      	ldr	r2, [pc, #340]	; (800cf8c <UART_SetConfig+0x908>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	f040 80f8 	bne.w	800d02e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ce3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ce42:	2b20      	cmp	r3, #32
 800ce44:	dc46      	bgt.n	800ced4 <UART_SetConfig+0x850>
 800ce46:	2b02      	cmp	r3, #2
 800ce48:	db75      	blt.n	800cf36 <UART_SetConfig+0x8b2>
 800ce4a:	3b02      	subs	r3, #2
 800ce4c:	2b1e      	cmp	r3, #30
 800ce4e:	d872      	bhi.n	800cf36 <UART_SetConfig+0x8b2>
 800ce50:	a201      	add	r2, pc, #4	; (adr r2, 800ce58 <UART_SetConfig+0x7d4>)
 800ce52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce56:	bf00      	nop
 800ce58:	0800cedb 	.word	0x0800cedb
 800ce5c:	0800cf37 	.word	0x0800cf37
 800ce60:	0800cee3 	.word	0x0800cee3
 800ce64:	0800cf37 	.word	0x0800cf37
 800ce68:	0800cf37 	.word	0x0800cf37
 800ce6c:	0800cf37 	.word	0x0800cf37
 800ce70:	0800cef3 	.word	0x0800cef3
 800ce74:	0800cf37 	.word	0x0800cf37
 800ce78:	0800cf37 	.word	0x0800cf37
 800ce7c:	0800cf37 	.word	0x0800cf37
 800ce80:	0800cf37 	.word	0x0800cf37
 800ce84:	0800cf37 	.word	0x0800cf37
 800ce88:	0800cf37 	.word	0x0800cf37
 800ce8c:	0800cf37 	.word	0x0800cf37
 800ce90:	0800cf03 	.word	0x0800cf03
 800ce94:	0800cf37 	.word	0x0800cf37
 800ce98:	0800cf37 	.word	0x0800cf37
 800ce9c:	0800cf37 	.word	0x0800cf37
 800cea0:	0800cf37 	.word	0x0800cf37
 800cea4:	0800cf37 	.word	0x0800cf37
 800cea8:	0800cf37 	.word	0x0800cf37
 800ceac:	0800cf37 	.word	0x0800cf37
 800ceb0:	0800cf37 	.word	0x0800cf37
 800ceb4:	0800cf37 	.word	0x0800cf37
 800ceb8:	0800cf37 	.word	0x0800cf37
 800cebc:	0800cf37 	.word	0x0800cf37
 800cec0:	0800cf37 	.word	0x0800cf37
 800cec4:	0800cf37 	.word	0x0800cf37
 800cec8:	0800cf37 	.word	0x0800cf37
 800cecc:	0800cf37 	.word	0x0800cf37
 800ced0:	0800cf29 	.word	0x0800cf29
 800ced4:	2b40      	cmp	r3, #64	; 0x40
 800ced6:	d02a      	beq.n	800cf2e <UART_SetConfig+0x8aa>
 800ced8:	e02d      	b.n	800cf36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ceda:	f7fc fe07 	bl	8009aec <HAL_RCCEx_GetD3PCLK1Freq>
 800cede:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cee0:	e02f      	b.n	800cf42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7fc fe16 	bl	8009b18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ceec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cef0:	e027      	b.n	800cf42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cef2:	f107 0318 	add.w	r3, r7, #24
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7fc ff62 	bl	8009dc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cefc:	69fb      	ldr	r3, [r7, #28]
 800cefe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf00:	e01f      	b.n	800cf42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf02:	4b21      	ldr	r3, [pc, #132]	; (800cf88 <UART_SetConfig+0x904>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f003 0320 	and.w	r3, r3, #32
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d009      	beq.n	800cf22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cf0e:	4b1e      	ldr	r3, [pc, #120]	; (800cf88 <UART_SetConfig+0x904>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	08db      	lsrs	r3, r3, #3
 800cf14:	f003 0303 	and.w	r3, r3, #3
 800cf18:	4a1d      	ldr	r2, [pc, #116]	; (800cf90 <UART_SetConfig+0x90c>)
 800cf1a:	fa22 f303 	lsr.w	r3, r2, r3
 800cf1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cf20:	e00f      	b.n	800cf42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cf22:	4b1b      	ldr	r3, [pc, #108]	; (800cf90 <UART_SetConfig+0x90c>)
 800cf24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf26:	e00c      	b.n	800cf42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf28:	4b1a      	ldr	r3, [pc, #104]	; (800cf94 <UART_SetConfig+0x910>)
 800cf2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf2c:	e009      	b.n	800cf42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf34:	e005      	b.n	800cf42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cf36:	2300      	movs	r3, #0
 800cf38:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cf40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cf42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	f000 81ee 	beq.w	800d326 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf4e:	4a12      	ldr	r2, [pc, #72]	; (800cf98 <UART_SetConfig+0x914>)
 800cf50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf54:	461a      	mov	r2, r3
 800cf56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf58:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf5c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	685a      	ldr	r2, [r3, #4]
 800cf62:	4613      	mov	r3, r2
 800cf64:	005b      	lsls	r3, r3, #1
 800cf66:	4413      	add	r3, r2
 800cf68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d305      	bcc.n	800cf7a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	685b      	ldr	r3, [r3, #4]
 800cf72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d910      	bls.n	800cf9c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cf80:	e1d1      	b.n	800d326 <UART_SetConfig+0xca2>
 800cf82:	bf00      	nop
 800cf84:	40011c00 	.word	0x40011c00
 800cf88:	58024400 	.word	0x58024400
 800cf8c:	58000c00 	.word	0x58000c00
 800cf90:	03d09000 	.word	0x03d09000
 800cf94:	003d0900 	.word	0x003d0900
 800cf98:	0800e558 	.word	0x0800e558
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	60bb      	str	r3, [r7, #8]
 800cfa2:	60fa      	str	r2, [r7, #12]
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa8:	4ac0      	ldr	r2, [pc, #768]	; (800d2ac <UART_SetConfig+0xc28>)
 800cfaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfae:	b29b      	uxth	r3, r3
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	603b      	str	r3, [r7, #0]
 800cfb4:	607a      	str	r2, [r7, #4]
 800cfb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cfbe:	f7f3 f9ad 	bl	800031c <__aeabi_uldivmod>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	4610      	mov	r0, r2
 800cfc8:	4619      	mov	r1, r3
 800cfca:	f04f 0200 	mov.w	r2, #0
 800cfce:	f04f 0300 	mov.w	r3, #0
 800cfd2:	020b      	lsls	r3, r1, #8
 800cfd4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cfd8:	0202      	lsls	r2, r0, #8
 800cfda:	6979      	ldr	r1, [r7, #20]
 800cfdc:	6849      	ldr	r1, [r1, #4]
 800cfde:	0849      	lsrs	r1, r1, #1
 800cfe0:	2000      	movs	r0, #0
 800cfe2:	460c      	mov	r4, r1
 800cfe4:	4605      	mov	r5, r0
 800cfe6:	eb12 0804 	adds.w	r8, r2, r4
 800cfea:	eb43 0905 	adc.w	r9, r3, r5
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	2200      	movs	r2, #0
 800cff4:	469a      	mov	sl, r3
 800cff6:	4693      	mov	fp, r2
 800cff8:	4652      	mov	r2, sl
 800cffa:	465b      	mov	r3, fp
 800cffc:	4640      	mov	r0, r8
 800cffe:	4649      	mov	r1, r9
 800d000:	f7f3 f98c 	bl	800031c <__aeabi_uldivmod>
 800d004:	4602      	mov	r2, r0
 800d006:	460b      	mov	r3, r1
 800d008:	4613      	mov	r3, r2
 800d00a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d00e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d012:	d308      	bcc.n	800d026 <UART_SetConfig+0x9a2>
 800d014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d01a:	d204      	bcs.n	800d026 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d022:	60da      	str	r2, [r3, #12]
 800d024:	e17f      	b.n	800d326 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d026:	2301      	movs	r3, #1
 800d028:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d02c:	e17b      	b.n	800d326 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	69db      	ldr	r3, [r3, #28]
 800d032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d036:	f040 80bd 	bne.w	800d1b4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d03a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d03e:	2b20      	cmp	r3, #32
 800d040:	dc48      	bgt.n	800d0d4 <UART_SetConfig+0xa50>
 800d042:	2b00      	cmp	r3, #0
 800d044:	db7b      	blt.n	800d13e <UART_SetConfig+0xaba>
 800d046:	2b20      	cmp	r3, #32
 800d048:	d879      	bhi.n	800d13e <UART_SetConfig+0xaba>
 800d04a:	a201      	add	r2, pc, #4	; (adr r2, 800d050 <UART_SetConfig+0x9cc>)
 800d04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d050:	0800d0db 	.word	0x0800d0db
 800d054:	0800d0e3 	.word	0x0800d0e3
 800d058:	0800d13f 	.word	0x0800d13f
 800d05c:	0800d13f 	.word	0x0800d13f
 800d060:	0800d0eb 	.word	0x0800d0eb
 800d064:	0800d13f 	.word	0x0800d13f
 800d068:	0800d13f 	.word	0x0800d13f
 800d06c:	0800d13f 	.word	0x0800d13f
 800d070:	0800d0fb 	.word	0x0800d0fb
 800d074:	0800d13f 	.word	0x0800d13f
 800d078:	0800d13f 	.word	0x0800d13f
 800d07c:	0800d13f 	.word	0x0800d13f
 800d080:	0800d13f 	.word	0x0800d13f
 800d084:	0800d13f 	.word	0x0800d13f
 800d088:	0800d13f 	.word	0x0800d13f
 800d08c:	0800d13f 	.word	0x0800d13f
 800d090:	0800d10b 	.word	0x0800d10b
 800d094:	0800d13f 	.word	0x0800d13f
 800d098:	0800d13f 	.word	0x0800d13f
 800d09c:	0800d13f 	.word	0x0800d13f
 800d0a0:	0800d13f 	.word	0x0800d13f
 800d0a4:	0800d13f 	.word	0x0800d13f
 800d0a8:	0800d13f 	.word	0x0800d13f
 800d0ac:	0800d13f 	.word	0x0800d13f
 800d0b0:	0800d13f 	.word	0x0800d13f
 800d0b4:	0800d13f 	.word	0x0800d13f
 800d0b8:	0800d13f 	.word	0x0800d13f
 800d0bc:	0800d13f 	.word	0x0800d13f
 800d0c0:	0800d13f 	.word	0x0800d13f
 800d0c4:	0800d13f 	.word	0x0800d13f
 800d0c8:	0800d13f 	.word	0x0800d13f
 800d0cc:	0800d13f 	.word	0x0800d13f
 800d0d0:	0800d131 	.word	0x0800d131
 800d0d4:	2b40      	cmp	r3, #64	; 0x40
 800d0d6:	d02e      	beq.n	800d136 <UART_SetConfig+0xab2>
 800d0d8:	e031      	b.n	800d13e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0da:	f7fb fb3b 	bl	8008754 <HAL_RCC_GetPCLK1Freq>
 800d0de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d0e0:	e033      	b.n	800d14a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0e2:	f7fb fb4d 	bl	8008780 <HAL_RCC_GetPCLK2Freq>
 800d0e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d0e8:	e02f      	b.n	800d14a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7fc fd12 	bl	8009b18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0f8:	e027      	b.n	800d14a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0fa:	f107 0318 	add.w	r3, r7, #24
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7fc fe5e 	bl	8009dc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d108:	e01f      	b.n	800d14a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d10a:	4b69      	ldr	r3, [pc, #420]	; (800d2b0 <UART_SetConfig+0xc2c>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f003 0320 	and.w	r3, r3, #32
 800d112:	2b00      	cmp	r3, #0
 800d114:	d009      	beq.n	800d12a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d116:	4b66      	ldr	r3, [pc, #408]	; (800d2b0 <UART_SetConfig+0xc2c>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	08db      	lsrs	r3, r3, #3
 800d11c:	f003 0303 	and.w	r3, r3, #3
 800d120:	4a64      	ldr	r2, [pc, #400]	; (800d2b4 <UART_SetConfig+0xc30>)
 800d122:	fa22 f303 	lsr.w	r3, r2, r3
 800d126:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d128:	e00f      	b.n	800d14a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d12a:	4b62      	ldr	r3, [pc, #392]	; (800d2b4 <UART_SetConfig+0xc30>)
 800d12c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d12e:	e00c      	b.n	800d14a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d130:	4b61      	ldr	r3, [pc, #388]	; (800d2b8 <UART_SetConfig+0xc34>)
 800d132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d134:	e009      	b.n	800d14a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d13c:	e005      	b.n	800d14a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d13e:	2300      	movs	r3, #0
 800d140:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d142:	2301      	movs	r3, #1
 800d144:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d148:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d14a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	f000 80ea 	beq.w	800d326 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d156:	4a55      	ldr	r2, [pc, #340]	; (800d2ac <UART_SetConfig+0xc28>)
 800d158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d15c:	461a      	mov	r2, r3
 800d15e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d160:	fbb3 f3f2 	udiv	r3, r3, r2
 800d164:	005a      	lsls	r2, r3, #1
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	085b      	lsrs	r3, r3, #1
 800d16c:	441a      	add	r2, r3
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	fbb2 f3f3 	udiv	r3, r2, r3
 800d176:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17a:	2b0f      	cmp	r3, #15
 800d17c:	d916      	bls.n	800d1ac <UART_SetConfig+0xb28>
 800d17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d184:	d212      	bcs.n	800d1ac <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d188:	b29b      	uxth	r3, r3
 800d18a:	f023 030f 	bic.w	r3, r3, #15
 800d18e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d192:	085b      	lsrs	r3, r3, #1
 800d194:	b29b      	uxth	r3, r3
 800d196:	f003 0307 	and.w	r3, r3, #7
 800d19a:	b29a      	uxth	r2, r3
 800d19c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d1a8:	60da      	str	r2, [r3, #12]
 800d1aa:	e0bc      	b.n	800d326 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d1b2:	e0b8      	b.n	800d326 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d1b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d1b8:	2b20      	cmp	r3, #32
 800d1ba:	dc4b      	bgt.n	800d254 <UART_SetConfig+0xbd0>
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	f2c0 8087 	blt.w	800d2d0 <UART_SetConfig+0xc4c>
 800d1c2:	2b20      	cmp	r3, #32
 800d1c4:	f200 8084 	bhi.w	800d2d0 <UART_SetConfig+0xc4c>
 800d1c8:	a201      	add	r2, pc, #4	; (adr r2, 800d1d0 <UART_SetConfig+0xb4c>)
 800d1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ce:	bf00      	nop
 800d1d0:	0800d25b 	.word	0x0800d25b
 800d1d4:	0800d263 	.word	0x0800d263
 800d1d8:	0800d2d1 	.word	0x0800d2d1
 800d1dc:	0800d2d1 	.word	0x0800d2d1
 800d1e0:	0800d26b 	.word	0x0800d26b
 800d1e4:	0800d2d1 	.word	0x0800d2d1
 800d1e8:	0800d2d1 	.word	0x0800d2d1
 800d1ec:	0800d2d1 	.word	0x0800d2d1
 800d1f0:	0800d27b 	.word	0x0800d27b
 800d1f4:	0800d2d1 	.word	0x0800d2d1
 800d1f8:	0800d2d1 	.word	0x0800d2d1
 800d1fc:	0800d2d1 	.word	0x0800d2d1
 800d200:	0800d2d1 	.word	0x0800d2d1
 800d204:	0800d2d1 	.word	0x0800d2d1
 800d208:	0800d2d1 	.word	0x0800d2d1
 800d20c:	0800d2d1 	.word	0x0800d2d1
 800d210:	0800d28b 	.word	0x0800d28b
 800d214:	0800d2d1 	.word	0x0800d2d1
 800d218:	0800d2d1 	.word	0x0800d2d1
 800d21c:	0800d2d1 	.word	0x0800d2d1
 800d220:	0800d2d1 	.word	0x0800d2d1
 800d224:	0800d2d1 	.word	0x0800d2d1
 800d228:	0800d2d1 	.word	0x0800d2d1
 800d22c:	0800d2d1 	.word	0x0800d2d1
 800d230:	0800d2d1 	.word	0x0800d2d1
 800d234:	0800d2d1 	.word	0x0800d2d1
 800d238:	0800d2d1 	.word	0x0800d2d1
 800d23c:	0800d2d1 	.word	0x0800d2d1
 800d240:	0800d2d1 	.word	0x0800d2d1
 800d244:	0800d2d1 	.word	0x0800d2d1
 800d248:	0800d2d1 	.word	0x0800d2d1
 800d24c:	0800d2d1 	.word	0x0800d2d1
 800d250:	0800d2c3 	.word	0x0800d2c3
 800d254:	2b40      	cmp	r3, #64	; 0x40
 800d256:	d037      	beq.n	800d2c8 <UART_SetConfig+0xc44>
 800d258:	e03a      	b.n	800d2d0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d25a:	f7fb fa7b 	bl	8008754 <HAL_RCC_GetPCLK1Freq>
 800d25e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d260:	e03c      	b.n	800d2dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d262:	f7fb fa8d 	bl	8008780 <HAL_RCC_GetPCLK2Freq>
 800d266:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d268:	e038      	b.n	800d2dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d26a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fc fc52 	bl	8009b18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d278:	e030      	b.n	800d2dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d27a:	f107 0318 	add.w	r3, r7, #24
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fc fd9e 	bl	8009dc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d284:	69fb      	ldr	r3, [r7, #28]
 800d286:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d288:	e028      	b.n	800d2dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d28a:	4b09      	ldr	r3, [pc, #36]	; (800d2b0 <UART_SetConfig+0xc2c>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f003 0320 	and.w	r3, r3, #32
 800d292:	2b00      	cmp	r3, #0
 800d294:	d012      	beq.n	800d2bc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d296:	4b06      	ldr	r3, [pc, #24]	; (800d2b0 <UART_SetConfig+0xc2c>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	08db      	lsrs	r3, r3, #3
 800d29c:	f003 0303 	and.w	r3, r3, #3
 800d2a0:	4a04      	ldr	r2, [pc, #16]	; (800d2b4 <UART_SetConfig+0xc30>)
 800d2a2:	fa22 f303 	lsr.w	r3, r2, r3
 800d2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d2a8:	e018      	b.n	800d2dc <UART_SetConfig+0xc58>
 800d2aa:	bf00      	nop
 800d2ac:	0800e558 	.word	0x0800e558
 800d2b0:	58024400 	.word	0x58024400
 800d2b4:	03d09000 	.word	0x03d09000
 800d2b8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d2bc:	4b24      	ldr	r3, [pc, #144]	; (800d350 <UART_SetConfig+0xccc>)
 800d2be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2c0:	e00c      	b.n	800d2dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d2c2:	4b24      	ldr	r3, [pc, #144]	; (800d354 <UART_SetConfig+0xcd0>)
 800d2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2c6:	e009      	b.n	800d2dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2ce:	e005      	b.n	800d2dc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d2da:	bf00      	nop
    }

    if (pclk != 0U)
 800d2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d021      	beq.n	800d326 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e6:	4a1c      	ldr	r2, [pc, #112]	; (800d358 <UART_SetConfig+0xcd4>)
 800d2e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2f0:	fbb3 f2f2 	udiv	r2, r3, r2
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	685b      	ldr	r3, [r3, #4]
 800d2f8:	085b      	lsrs	r3, r3, #1
 800d2fa:	441a      	add	r2, r3
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	fbb2 f3f3 	udiv	r3, r2, r3
 800d304:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d308:	2b0f      	cmp	r3, #15
 800d30a:	d909      	bls.n	800d320 <UART_SetConfig+0xc9c>
 800d30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d30e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d312:	d205      	bcs.n	800d320 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d316:	b29a      	uxth	r2, r3
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	60da      	str	r2, [r3, #12]
 800d31e:	e002      	b.n	800d326 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d320:	2301      	movs	r3, #1
 800d322:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	2201      	movs	r2, #1
 800d32a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	2201      	movs	r2, #1
 800d332:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	2200      	movs	r2, #0
 800d33a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	2200      	movs	r2, #0
 800d340:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d342:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d346:	4618      	mov	r0, r3
 800d348:	3748      	adds	r7, #72	; 0x48
 800d34a:	46bd      	mov	sp, r7
 800d34c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d350:	03d09000 	.word	0x03d09000
 800d354:	003d0900 	.word	0x003d0900
 800d358:	0800e558 	.word	0x0800e558

0800d35c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d368:	f003 0301 	and.w	r3, r3, #1
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d00a      	beq.n	800d386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	430a      	orrs	r2, r1
 800d384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d38a:	f003 0302 	and.w	r3, r3, #2
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d00a      	beq.n	800d3a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	685b      	ldr	r3, [r3, #4]
 800d398:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	430a      	orrs	r2, r1
 800d3a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ac:	f003 0304 	and.w	r3, r3, #4
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d00a      	beq.n	800d3ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	430a      	orrs	r2, r1
 800d3c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ce:	f003 0308 	and.w	r3, r3, #8
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d00a      	beq.n	800d3ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	430a      	orrs	r2, r1
 800d3ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3f0:	f003 0310 	and.w	r3, r3, #16
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d00a      	beq.n	800d40e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	689b      	ldr	r3, [r3, #8]
 800d3fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	430a      	orrs	r2, r1
 800d40c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d412:	f003 0320 	and.w	r3, r3, #32
 800d416:	2b00      	cmp	r3, #0
 800d418:	d00a      	beq.n	800d430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	689b      	ldr	r3, [r3, #8]
 800d420:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	430a      	orrs	r2, r1
 800d42e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d01a      	beq.n	800d472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	430a      	orrs	r2, r1
 800d450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d45a:	d10a      	bne.n	800d472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	430a      	orrs	r2, r1
 800d470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d00a      	beq.n	800d494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	430a      	orrs	r2, r1
 800d492:	605a      	str	r2, [r3, #4]
  }
}
 800d494:	bf00      	nop
 800d496:	370c      	adds	r7, #12
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr

0800d4a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b098      	sub	sp, #96	; 0x60
 800d4a4:	af02      	add	r7, sp, #8
 800d4a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d4b0:	f7f6 fdda 	bl	8004068 <HAL_GetTick>
 800d4b4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f003 0308 	and.w	r3, r3, #8
 800d4c0:	2b08      	cmp	r3, #8
 800d4c2:	d12f      	bne.n	800d524 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d4c8:	9300      	str	r3, [sp, #0]
 800d4ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f000 f88e 	bl	800d5f4 <UART_WaitOnFlagUntilTimeout>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d022      	beq.n	800d524 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e6:	e853 3f00 	ldrex	r3, [r3]
 800d4ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d4ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d4f2:	653b      	str	r3, [r7, #80]	; 0x50
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4fc:	647b      	str	r3, [r7, #68]	; 0x44
 800d4fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d500:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d504:	e841 2300 	strex	r3, r2, [r1]
 800d508:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d50a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d1e6      	bne.n	800d4de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2220      	movs	r2, #32
 800d514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2200      	movs	r2, #0
 800d51c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d520:	2303      	movs	r3, #3
 800d522:	e063      	b.n	800d5ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f003 0304 	and.w	r3, r3, #4
 800d52e:	2b04      	cmp	r3, #4
 800d530:	d149      	bne.n	800d5c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d532:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d536:	9300      	str	r3, [sp, #0]
 800d538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d53a:	2200      	movs	r2, #0
 800d53c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f000 f857 	bl	800d5f4 <UART_WaitOnFlagUntilTimeout>
 800d546:	4603      	mov	r3, r0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d03c      	beq.n	800d5c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d554:	e853 3f00 	ldrex	r3, [r3]
 800d558:	623b      	str	r3, [r7, #32]
   return(result);
 800d55a:	6a3b      	ldr	r3, [r7, #32]
 800d55c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d560:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	461a      	mov	r2, r3
 800d568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d56a:	633b      	str	r3, [r7, #48]	; 0x30
 800d56c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d56e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d572:	e841 2300 	strex	r3, r2, [r1]
 800d576:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d1e6      	bne.n	800d54c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	3308      	adds	r3, #8
 800d584:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	e853 3f00 	ldrex	r3, [r3]
 800d58c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	f023 0301 	bic.w	r3, r3, #1
 800d594:	64bb      	str	r3, [r7, #72]	; 0x48
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	3308      	adds	r3, #8
 800d59c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d59e:	61fa      	str	r2, [r7, #28]
 800d5a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a2:	69b9      	ldr	r1, [r7, #24]
 800d5a4:	69fa      	ldr	r2, [r7, #28]
 800d5a6:	e841 2300 	strex	r3, r2, [r1]
 800d5aa:	617b      	str	r3, [r7, #20]
   return(result);
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d1e5      	bne.n	800d57e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2220      	movs	r2, #32
 800d5b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d5c2:	2303      	movs	r3, #3
 800d5c4:	e012      	b.n	800d5ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2220      	movs	r2, #32
 800d5ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2220      	movs	r2, #32
 800d5d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d5ea:	2300      	movs	r3, #0
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3758      	adds	r7, #88	; 0x58
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b084      	sub	sp, #16
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	60f8      	str	r0, [r7, #12]
 800d5fc:	60b9      	str	r1, [r7, #8]
 800d5fe:	603b      	str	r3, [r7, #0]
 800d600:	4613      	mov	r3, r2
 800d602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d604:	e049      	b.n	800d69a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d606:	69bb      	ldr	r3, [r7, #24]
 800d608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d60c:	d045      	beq.n	800d69a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d60e:	f7f6 fd2b 	bl	8004068 <HAL_GetTick>
 800d612:	4602      	mov	r2, r0
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	1ad3      	subs	r3, r2, r3
 800d618:	69ba      	ldr	r2, [r7, #24]
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d302      	bcc.n	800d624 <UART_WaitOnFlagUntilTimeout+0x30>
 800d61e:	69bb      	ldr	r3, [r7, #24]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d101      	bne.n	800d628 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d624:	2303      	movs	r3, #3
 800d626:	e048      	b.n	800d6ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f003 0304 	and.w	r3, r3, #4
 800d632:	2b00      	cmp	r3, #0
 800d634:	d031      	beq.n	800d69a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	69db      	ldr	r3, [r3, #28]
 800d63c:	f003 0308 	and.w	r3, r3, #8
 800d640:	2b08      	cmp	r3, #8
 800d642:	d110      	bne.n	800d666 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2208      	movs	r2, #8
 800d64a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d64c:	68f8      	ldr	r0, [r7, #12]
 800d64e:	f000 f921 	bl	800d894 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2208      	movs	r2, #8
 800d656:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	2200      	movs	r2, #0
 800d65e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800d662:	2301      	movs	r3, #1
 800d664:	e029      	b.n	800d6ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	69db      	ldr	r3, [r3, #28]
 800d66c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d674:	d111      	bne.n	800d69a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d67e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d680:	68f8      	ldr	r0, [r7, #12]
 800d682:	f000 f907 	bl	800d894 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2220      	movs	r2, #32
 800d68a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2200      	movs	r2, #0
 800d692:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d696:	2303      	movs	r3, #3
 800d698:	e00f      	b.n	800d6ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	69da      	ldr	r2, [r3, #28]
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	4013      	ands	r3, r2
 800d6a4:	68ba      	ldr	r2, [r7, #8]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	bf0c      	ite	eq
 800d6aa:	2301      	moveq	r3, #1
 800d6ac:	2300      	movne	r3, #0
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	79fb      	ldrb	r3, [r7, #7]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d0a6      	beq.n	800d606 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d6b8:	2300      	movs	r3, #0
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3710      	adds	r7, #16
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
	...

0800d6c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b096      	sub	sp, #88	; 0x58
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	60f8      	str	r0, [r7, #12]
 800d6cc:	60b9      	str	r1, [r7, #8]
 800d6ce:	4613      	mov	r3, r2
 800d6d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	68ba      	ldr	r2, [r7, #8]
 800d6d6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	88fa      	ldrh	r2, [r7, #6]
 800d6dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2222      	movs	r2, #34	; 0x22
 800d6ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d02d      	beq.n	800d756 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d700:	4a40      	ldr	r2, [pc, #256]	; (800d804 <UART_Start_Receive_DMA+0x140>)
 800d702:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d70a:	4a3f      	ldr	r2, [pc, #252]	; (800d808 <UART_Start_Receive_DMA+0x144>)
 800d70c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d714:	4a3d      	ldr	r2, [pc, #244]	; (800d80c <UART_Start_Receive_DMA+0x148>)
 800d716:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d71e:	2200      	movs	r2, #0
 800d720:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	3324      	adds	r3, #36	; 0x24
 800d72e:	4619      	mov	r1, r3
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d734:	461a      	mov	r2, r3
 800d736:	88fb      	ldrh	r3, [r7, #6]
 800d738:	f7f7 faf4 	bl	8004d24 <HAL_DMA_Start_IT>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d009      	beq.n	800d756 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2210      	movs	r2, #16
 800d746:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2220      	movs	r2, #32
 800d74e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800d752:	2301      	movs	r3, #1
 800d754:	e051      	b.n	800d7fa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	691b      	ldr	r3, [r3, #16]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d018      	beq.n	800d790 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d766:	e853 3f00 	ldrex	r3, [r3]
 800d76a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d76e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d772:	657b      	str	r3, [r7, #84]	; 0x54
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	461a      	mov	r2, r3
 800d77a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d77c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d77e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d780:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d784:	e841 2300 	strex	r3, r2, [r1]
 800d788:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d78a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d1e6      	bne.n	800d75e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	3308      	adds	r3, #8
 800d796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79a:	e853 3f00 	ldrex	r3, [r3]
 800d79e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a2:	f043 0301 	orr.w	r3, r3, #1
 800d7a6:	653b      	str	r3, [r7, #80]	; 0x50
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	3308      	adds	r3, #8
 800d7ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d7b0:	637a      	str	r2, [r7, #52]	; 0x34
 800d7b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d7b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d7b8:	e841 2300 	strex	r3, r2, [r1]
 800d7bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d1e5      	bne.n	800d790 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	3308      	adds	r3, #8
 800d7ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	e853 3f00 	ldrex	r3, [r3]
 800d7d2:	613b      	str	r3, [r7, #16]
   return(result);
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	3308      	adds	r3, #8
 800d7e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d7e4:	623a      	str	r2, [r7, #32]
 800d7e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e8:	69f9      	ldr	r1, [r7, #28]
 800d7ea:	6a3a      	ldr	r2, [r7, #32]
 800d7ec:	e841 2300 	strex	r3, r2, [r1]
 800d7f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d7f2:	69bb      	ldr	r3, [r7, #24]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d1e5      	bne.n	800d7c4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3758      	adds	r7, #88	; 0x58
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	0800da13 	.word	0x0800da13
 800d808:	0800db3b 	.word	0x0800db3b
 800d80c:	0800db79 	.word	0x0800db79

0800d810 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d810:	b480      	push	{r7}
 800d812:	b08f      	sub	sp, #60	; 0x3c
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d81e:	6a3b      	ldr	r3, [r7, #32]
 800d820:	e853 3f00 	ldrex	r3, [r3]
 800d824:	61fb      	str	r3, [r7, #28]
   return(result);
 800d826:	69fb      	ldr	r3, [r7, #28]
 800d828:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d82c:	637b      	str	r3, [r7, #52]	; 0x34
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	461a      	mov	r2, r3
 800d834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d836:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d838:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d83a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d83c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d83e:	e841 2300 	strex	r3, r2, [r1]
 800d842:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d846:	2b00      	cmp	r3, #0
 800d848:	d1e6      	bne.n	800d818 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	3308      	adds	r3, #8
 800d850:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	e853 3f00 	ldrex	r3, [r3]
 800d858:	60bb      	str	r3, [r7, #8]
   return(result);
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d860:	633b      	str	r3, [r7, #48]	; 0x30
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	3308      	adds	r3, #8
 800d868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d86a:	61ba      	str	r2, [r7, #24]
 800d86c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d86e:	6979      	ldr	r1, [r7, #20]
 800d870:	69ba      	ldr	r2, [r7, #24]
 800d872:	e841 2300 	strex	r3, r2, [r1]
 800d876:	613b      	str	r3, [r7, #16]
   return(result);
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d1e5      	bne.n	800d84a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2220      	movs	r2, #32
 800d882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800d886:	bf00      	nop
 800d888:	373c      	adds	r7, #60	; 0x3c
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr
	...

0800d894 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d894:	b480      	push	{r7}
 800d896:	b095      	sub	sp, #84	; 0x54
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8a4:	e853 3f00 	ldrex	r3, [r3]
 800d8a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d8b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8ba:	643b      	str	r3, [r7, #64]	; 0x40
 800d8bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d8c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8c2:	e841 2300 	strex	r3, r2, [r1]
 800d8c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d1e6      	bne.n	800d89c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	3308      	adds	r3, #8
 800d8d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d6:	6a3b      	ldr	r3, [r7, #32]
 800d8d8:	e853 3f00 	ldrex	r3, [r3]
 800d8dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8de:	69fa      	ldr	r2, [r7, #28]
 800d8e0:	4b1e      	ldr	r3, [pc, #120]	; (800d95c <UART_EndRxTransfer+0xc8>)
 800d8e2:	4013      	ands	r3, r2
 800d8e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	3308      	adds	r3, #8
 800d8ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d8f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8f6:	e841 2300 	strex	r3, r2, [r1]
 800d8fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d1e5      	bne.n	800d8ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d906:	2b01      	cmp	r3, #1
 800d908:	d118      	bne.n	800d93c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	e853 3f00 	ldrex	r3, [r3]
 800d916:	60bb      	str	r3, [r7, #8]
   return(result);
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	f023 0310 	bic.w	r3, r3, #16
 800d91e:	647b      	str	r3, [r7, #68]	; 0x44
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	461a      	mov	r2, r3
 800d926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d928:	61bb      	str	r3, [r7, #24]
 800d92a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d92c:	6979      	ldr	r1, [r7, #20]
 800d92e:	69ba      	ldr	r2, [r7, #24]
 800d930:	e841 2300 	strex	r3, r2, [r1]
 800d934:	613b      	str	r3, [r7, #16]
   return(result);
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d1e6      	bne.n	800d90a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2220      	movs	r2, #32
 800d940:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2200      	movs	r2, #0
 800d948:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2200      	movs	r2, #0
 800d94e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d950:	bf00      	nop
 800d952:	3754      	adds	r7, #84	; 0x54
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr
 800d95c:	effffffe 	.word	0xeffffffe

0800d960 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b090      	sub	sp, #64	; 0x40
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d96c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	69db      	ldr	r3, [r3, #28]
 800d972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d976:	d037      	beq.n	800d9e8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d97a:	2200      	movs	r2, #0
 800d97c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	3308      	adds	r3, #8
 800d986:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98a:	e853 3f00 	ldrex	r3, [r3]
 800d98e:	623b      	str	r3, [r7, #32]
   return(result);
 800d990:	6a3b      	ldr	r3, [r7, #32]
 800d992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d996:	63bb      	str	r3, [r7, #56]	; 0x38
 800d998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	3308      	adds	r3, #8
 800d99e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9a0:	633a      	str	r2, [r7, #48]	; 0x30
 800d9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d9a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9a8:	e841 2300 	strex	r3, r2, [r1]
 800d9ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d1e5      	bne.n	800d980 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d9b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	e853 3f00 	ldrex	r3, [r3]
 800d9c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9c8:	637b      	str	r3, [r7, #52]	; 0x34
 800d9ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9d2:	61fb      	str	r3, [r7, #28]
 800d9d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9d6:	69b9      	ldr	r1, [r7, #24]
 800d9d8:	69fa      	ldr	r2, [r7, #28]
 800d9da:	e841 2300 	strex	r3, r2, [r1]
 800d9de:	617b      	str	r3, [r7, #20]
   return(result);
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d1e6      	bne.n	800d9b4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d9e6:	e002      	b.n	800d9ee <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d9e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d9ea:	f7f5 f891 	bl	8002b10 <HAL_UART_TxCpltCallback>
}
 800d9ee:	bf00      	nop
 800d9f0:	3740      	adds	r7, #64	; 0x40
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d9f6:	b580      	push	{r7, lr}
 800d9f8:	b084      	sub	sp, #16
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da02:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800da04:	68f8      	ldr	r0, [r7, #12]
 800da06:	f7fe fe1d 	bl	800c644 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da0a:	bf00      	nop
 800da0c:	3710      	adds	r7, #16
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800da12:	b580      	push	{r7, lr}
 800da14:	b09c      	sub	sp, #112	; 0x70
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da1e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	69db      	ldr	r3, [r3, #28]
 800da24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da28:	d071      	beq.n	800db0e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800da2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da2c:	2200      	movs	r2, #0
 800da2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da3a:	e853 3f00 	ldrex	r3, [r3]
 800da3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800da40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da46:	66bb      	str	r3, [r7, #104]	; 0x68
 800da48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	461a      	mov	r2, r3
 800da4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da50:	65bb      	str	r3, [r7, #88]	; 0x58
 800da52:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800da56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da58:	e841 2300 	strex	r3, r2, [r1]
 800da5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800da5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da60:	2b00      	cmp	r3, #0
 800da62:	d1e6      	bne.n	800da32 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	3308      	adds	r3, #8
 800da6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da6e:	e853 3f00 	ldrex	r3, [r3]
 800da72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800da74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da76:	f023 0301 	bic.w	r3, r3, #1
 800da7a:	667b      	str	r3, [r7, #100]	; 0x64
 800da7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	3308      	adds	r3, #8
 800da82:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800da84:	647a      	str	r2, [r7, #68]	; 0x44
 800da86:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800da8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da8c:	e841 2300 	strex	r3, r2, [r1]
 800da90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800da92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da94:	2b00      	cmp	r3, #0
 800da96:	d1e5      	bne.n	800da64 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	3308      	adds	r3, #8
 800da9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa2:	e853 3f00 	ldrex	r3, [r3]
 800daa6:	623b      	str	r3, [r7, #32]
   return(result);
 800daa8:	6a3b      	ldr	r3, [r7, #32]
 800daaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800daae:	663b      	str	r3, [r7, #96]	; 0x60
 800dab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	3308      	adds	r3, #8
 800dab6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dab8:	633a      	str	r2, [r7, #48]	; 0x30
 800daba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dabc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dabe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dac0:	e841 2300 	strex	r3, r2, [r1]
 800dac4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d1e5      	bne.n	800da98 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dacc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dace:	2220      	movs	r2, #32
 800dad0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d118      	bne.n	800db0e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dadc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	e853 3f00 	ldrex	r3, [r3]
 800dae8:	60fb      	str	r3, [r7, #12]
   return(result);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f023 0310 	bic.w	r3, r3, #16
 800daf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800daf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	461a      	mov	r2, r3
 800daf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dafa:	61fb      	str	r3, [r7, #28]
 800dafc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dafe:	69b9      	ldr	r1, [r7, #24]
 800db00:	69fa      	ldr	r2, [r7, #28]
 800db02:	e841 2300 	strex	r3, r2, [r1]
 800db06:	617b      	str	r3, [r7, #20]
   return(result);
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d1e6      	bne.n	800dadc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db10:	2200      	movs	r2, #0
 800db12:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d107      	bne.n	800db2c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db22:	4619      	mov	r1, r3
 800db24:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800db26:	f7fe fda1 	bl	800c66c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800db2a:	e002      	b.n	800db32 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800db2c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800db2e:	f7f5 f801 	bl	8002b34 <HAL_UART_RxCpltCallback>
}
 800db32:	bf00      	nop
 800db34:	3770      	adds	r7, #112	; 0x70
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}

0800db3a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800db3a:	b580      	push	{r7, lr}
 800db3c:	b084      	sub	sp, #16
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db46:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	2201      	movs	r2, #1
 800db4c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db52:	2b01      	cmp	r3, #1
 800db54:	d109      	bne.n	800db6a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db5c:	085b      	lsrs	r3, r3, #1
 800db5e:	b29b      	uxth	r3, r3
 800db60:	4619      	mov	r1, r3
 800db62:	68f8      	ldr	r0, [r7, #12]
 800db64:	f7fe fd82 	bl	800c66c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800db68:	e002      	b.n	800db70 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800db6a:	68f8      	ldr	r0, [r7, #12]
 800db6c:	f7fe fd74 	bl	800c658 <HAL_UART_RxHalfCpltCallback>
}
 800db70:	bf00      	nop
 800db72:	3710      	adds	r7, #16
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b086      	sub	sp, #24
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db84:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db8c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db94:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	689b      	ldr	r3, [r3, #8]
 800db9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dba0:	2b80      	cmp	r3, #128	; 0x80
 800dba2:	d109      	bne.n	800dbb8 <UART_DMAError+0x40>
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	2b21      	cmp	r3, #33	; 0x21
 800dba8:	d106      	bne.n	800dbb8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	2200      	movs	r2, #0
 800dbae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800dbb2:	6978      	ldr	r0, [r7, #20]
 800dbb4:	f7ff fe2c 	bl	800d810 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	689b      	ldr	r3, [r3, #8]
 800dbbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbc2:	2b40      	cmp	r3, #64	; 0x40
 800dbc4:	d109      	bne.n	800dbda <UART_DMAError+0x62>
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2b22      	cmp	r3, #34	; 0x22
 800dbca:	d106      	bne.n	800dbda <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800dbd4:	6978      	ldr	r0, [r7, #20]
 800dbd6:	f7ff fe5d 	bl	800d894 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbe0:	f043 0210 	orr.w	r2, r3, #16
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dbea:	6978      	ldr	r0, [r7, #20]
 800dbec:	f7f3 f942 	bl	8000e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbf0:	bf00      	nop
 800dbf2:	3718      	adds	r7, #24
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2200      	movs	r2, #0
 800dc12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dc16:	68f8      	ldr	r0, [r7, #12]
 800dc18:	f7f3 f92c 	bl	8000e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc1c:	bf00      	nop
 800dc1e:	3710      	adds	r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b088      	sub	sp, #32
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	e853 3f00 	ldrex	r3, [r3]
 800dc38:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc40:	61fb      	str	r3, [r7, #28]
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	461a      	mov	r2, r3
 800dc48:	69fb      	ldr	r3, [r7, #28]
 800dc4a:	61bb      	str	r3, [r7, #24]
 800dc4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc4e:	6979      	ldr	r1, [r7, #20]
 800dc50:	69ba      	ldr	r2, [r7, #24]
 800dc52:	e841 2300 	strex	r3, r2, [r1]
 800dc56:	613b      	str	r3, [r7, #16]
   return(result);
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d1e6      	bne.n	800dc2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2220      	movs	r2, #32
 800dc62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f7f4 ff4f 	bl	8002b10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc72:	bf00      	nop
 800dc74:	3720      	adds	r7, #32
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dc7a:	b480      	push	{r7}
 800dc7c:	b083      	sub	sp, #12
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dc82:	bf00      	nop
 800dc84:	370c      	adds	r7, #12
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr

0800dc8e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dc8e:	b480      	push	{r7}
 800dc90:	b083      	sub	sp, #12
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dc96:	bf00      	nop
 800dc98:	370c      	adds	r7, #12
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr

0800dca2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dca2:	b480      	push	{r7}
 800dca4:	b083      	sub	sp, #12
 800dca6:	af00      	add	r7, sp, #0
 800dca8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dcaa:	bf00      	nop
 800dcac:	370c      	adds	r7, #12
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr

0800dcb6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dcb6:	b480      	push	{r7}
 800dcb8:	b085      	sub	sp, #20
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d101      	bne.n	800dccc <HAL_UARTEx_DisableFifoMode+0x16>
 800dcc8:	2302      	movs	r3, #2
 800dcca:	e027      	b.n	800dd1c <HAL_UARTEx_DisableFifoMode+0x66>
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2201      	movs	r2, #1
 800dcd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2224      	movs	r2, #36	; 0x24
 800dcd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	681a      	ldr	r2, [r3, #0]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f022 0201 	bic.w	r2, r2, #1
 800dcf2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dcfa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	68fa      	ldr	r2, [r7, #12]
 800dd08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2220      	movs	r2, #32
 800dd0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2200      	movs	r2, #0
 800dd16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dd1a:	2300      	movs	r3, #0
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3714      	adds	r7, #20
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr

0800dd28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b084      	sub	sp, #16
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	d101      	bne.n	800dd40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd3c:	2302      	movs	r3, #2
 800dd3e:	e02d      	b.n	800dd9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2201      	movs	r2, #1
 800dd44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2224      	movs	r2, #36	; 0x24
 800dd4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f022 0201 	bic.w	r2, r2, #1
 800dd66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	689b      	ldr	r3, [r3, #8]
 800dd6e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	683a      	ldr	r2, [r7, #0]
 800dd78:	430a      	orrs	r2, r1
 800dd7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f000 f84f 	bl	800de20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	68fa      	ldr	r2, [r7, #12]
 800dd88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2220      	movs	r2, #32
 800dd8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dd9a:	2300      	movs	r3, #0
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3710      	adds	r7, #16
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b084      	sub	sp, #16
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d101      	bne.n	800ddbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ddb8:	2302      	movs	r3, #2
 800ddba:	e02d      	b.n	800de18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2224      	movs	r2, #36	; 0x24
 800ddc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	681a      	ldr	r2, [r3, #0]
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f022 0201 	bic.w	r2, r2, #1
 800dde2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	689b      	ldr	r3, [r3, #8]
 800ddea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	683a      	ldr	r2, [r7, #0]
 800ddf4:	430a      	orrs	r2, r1
 800ddf6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f000 f811 	bl	800de20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	68fa      	ldr	r2, [r7, #12]
 800de04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2220      	movs	r2, #32
 800de0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2200      	movs	r2, #0
 800de12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800de16:	2300      	movs	r3, #0
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3710      	adds	r7, #16
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800de20:	b480      	push	{r7}
 800de22:	b085      	sub	sp, #20
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d108      	bne.n	800de42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2201      	movs	r2, #1
 800de34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2201      	movs	r2, #1
 800de3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800de40:	e031      	b.n	800dea6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800de42:	2310      	movs	r3, #16
 800de44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800de46:	2310      	movs	r3, #16
 800de48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	689b      	ldr	r3, [r3, #8]
 800de50:	0e5b      	lsrs	r3, r3, #25
 800de52:	b2db      	uxtb	r3, r3
 800de54:	f003 0307 	and.w	r3, r3, #7
 800de58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	689b      	ldr	r3, [r3, #8]
 800de60:	0f5b      	lsrs	r3, r3, #29
 800de62:	b2db      	uxtb	r3, r3
 800de64:	f003 0307 	and.w	r3, r3, #7
 800de68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de6a:	7bbb      	ldrb	r3, [r7, #14]
 800de6c:	7b3a      	ldrb	r2, [r7, #12]
 800de6e:	4911      	ldr	r1, [pc, #68]	; (800deb4 <UARTEx_SetNbDataToProcess+0x94>)
 800de70:	5c8a      	ldrb	r2, [r1, r2]
 800de72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800de76:	7b3a      	ldrb	r2, [r7, #12]
 800de78:	490f      	ldr	r1, [pc, #60]	; (800deb8 <UARTEx_SetNbDataToProcess+0x98>)
 800de7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de7c:	fb93 f3f2 	sdiv	r3, r3, r2
 800de80:	b29a      	uxth	r2, r3
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de88:	7bfb      	ldrb	r3, [r7, #15]
 800de8a:	7b7a      	ldrb	r2, [r7, #13]
 800de8c:	4909      	ldr	r1, [pc, #36]	; (800deb4 <UARTEx_SetNbDataToProcess+0x94>)
 800de8e:	5c8a      	ldrb	r2, [r1, r2]
 800de90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800de94:	7b7a      	ldrb	r2, [r7, #13]
 800de96:	4908      	ldr	r1, [pc, #32]	; (800deb8 <UARTEx_SetNbDataToProcess+0x98>)
 800de98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de9a:	fb93 f3f2 	sdiv	r3, r3, r2
 800de9e:	b29a      	uxth	r2, r3
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dea6:	bf00      	nop
 800dea8:	3714      	adds	r7, #20
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr
 800deb2:	bf00      	nop
 800deb4:	0800e570 	.word	0x0800e570
 800deb8:	0800e578 	.word	0x0800e578

0800debc <__cxa_pure_virtual>:
 800debc:	b508      	push	{r3, lr}
 800debe:	f000 f80d 	bl	800dedc <_ZSt9terminatev>

0800dec2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800dec2:	b508      	push	{r3, lr}
 800dec4:	4780      	blx	r0
 800dec6:	f000 f80e 	bl	800dee6 <abort>
	...

0800decc <_ZSt13get_terminatev>:
 800decc:	4b02      	ldr	r3, [pc, #8]	; (800ded8 <_ZSt13get_terminatev+0xc>)
 800dece:	6818      	ldr	r0, [r3, #0]
 800ded0:	f3bf 8f5b 	dmb	ish
 800ded4:	4770      	bx	lr
 800ded6:	bf00      	nop
 800ded8:	24000010 	.word	0x24000010

0800dedc <_ZSt9terminatev>:
 800dedc:	b508      	push	{r3, lr}
 800dede:	f7ff fff5 	bl	800decc <_ZSt13get_terminatev>
 800dee2:	f7ff ffee 	bl	800dec2 <_ZN10__cxxabiv111__terminateEPFvvE>

0800dee6 <abort>:
 800dee6:	b508      	push	{r3, lr}
 800dee8:	2006      	movs	r0, #6
 800deea:	f000 f873 	bl	800dfd4 <raise>
 800deee:	2001      	movs	r0, #1
 800def0:	f7f5 ff52 	bl	8003d98 <_exit>

0800def4 <__errno>:
 800def4:	4b01      	ldr	r3, [pc, #4]	; (800defc <__errno+0x8>)
 800def6:	6818      	ldr	r0, [r3, #0]
 800def8:	4770      	bx	lr
 800defa:	bf00      	nop
 800defc:	24000014 	.word	0x24000014

0800df00 <__libc_init_array>:
 800df00:	b570      	push	{r4, r5, r6, lr}
 800df02:	4d0d      	ldr	r5, [pc, #52]	; (800df38 <__libc_init_array+0x38>)
 800df04:	4c0d      	ldr	r4, [pc, #52]	; (800df3c <__libc_init_array+0x3c>)
 800df06:	1b64      	subs	r4, r4, r5
 800df08:	10a4      	asrs	r4, r4, #2
 800df0a:	2600      	movs	r6, #0
 800df0c:	42a6      	cmp	r6, r4
 800df0e:	d109      	bne.n	800df24 <__libc_init_array+0x24>
 800df10:	4d0b      	ldr	r5, [pc, #44]	; (800df40 <__libc_init_array+0x40>)
 800df12:	4c0c      	ldr	r4, [pc, #48]	; (800df44 <__libc_init_array+0x44>)
 800df14:	f000 f9b0 	bl	800e278 <_init>
 800df18:	1b64      	subs	r4, r4, r5
 800df1a:	10a4      	asrs	r4, r4, #2
 800df1c:	2600      	movs	r6, #0
 800df1e:	42a6      	cmp	r6, r4
 800df20:	d105      	bne.n	800df2e <__libc_init_array+0x2e>
 800df22:	bd70      	pop	{r4, r5, r6, pc}
 800df24:	f855 3b04 	ldr.w	r3, [r5], #4
 800df28:	4798      	blx	r3
 800df2a:	3601      	adds	r6, #1
 800df2c:	e7ee      	b.n	800df0c <__libc_init_array+0xc>
 800df2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800df32:	4798      	blx	r3
 800df34:	3601      	adds	r6, #1
 800df36:	e7f2      	b.n	800df1e <__libc_init_array+0x1e>
 800df38:	0800e588 	.word	0x0800e588
 800df3c:	0800e588 	.word	0x0800e588
 800df40:	0800e588 	.word	0x0800e588
 800df44:	0800e590 	.word	0x0800e590

0800df48 <memcpy>:
 800df48:	440a      	add	r2, r1
 800df4a:	4291      	cmp	r1, r2
 800df4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800df50:	d100      	bne.n	800df54 <memcpy+0xc>
 800df52:	4770      	bx	lr
 800df54:	b510      	push	{r4, lr}
 800df56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df5e:	4291      	cmp	r1, r2
 800df60:	d1f9      	bne.n	800df56 <memcpy+0xe>
 800df62:	bd10      	pop	{r4, pc}

0800df64 <memset>:
 800df64:	4402      	add	r2, r0
 800df66:	4603      	mov	r3, r0
 800df68:	4293      	cmp	r3, r2
 800df6a:	d100      	bne.n	800df6e <memset+0xa>
 800df6c:	4770      	bx	lr
 800df6e:	f803 1b01 	strb.w	r1, [r3], #1
 800df72:	e7f9      	b.n	800df68 <memset+0x4>

0800df74 <realloc>:
 800df74:	4b02      	ldr	r3, [pc, #8]	; (800df80 <realloc+0xc>)
 800df76:	460a      	mov	r2, r1
 800df78:	4601      	mov	r1, r0
 800df7a:	6818      	ldr	r0, [r3, #0]
 800df7c:	f000 b8da 	b.w	800e134 <_realloc_r>
 800df80:	24000014 	.word	0x24000014

0800df84 <_raise_r>:
 800df84:	291f      	cmp	r1, #31
 800df86:	b538      	push	{r3, r4, r5, lr}
 800df88:	4604      	mov	r4, r0
 800df8a:	460d      	mov	r5, r1
 800df8c:	d904      	bls.n	800df98 <_raise_r+0x14>
 800df8e:	2316      	movs	r3, #22
 800df90:	6003      	str	r3, [r0, #0]
 800df92:	f04f 30ff 	mov.w	r0, #4294967295
 800df96:	bd38      	pop	{r3, r4, r5, pc}
 800df98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800df9a:	b112      	cbz	r2, 800dfa2 <_raise_r+0x1e>
 800df9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dfa0:	b94b      	cbnz	r3, 800dfb6 <_raise_r+0x32>
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f000 f830 	bl	800e008 <_getpid_r>
 800dfa8:	462a      	mov	r2, r5
 800dfaa:	4601      	mov	r1, r0
 800dfac:	4620      	mov	r0, r4
 800dfae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfb2:	f000 b817 	b.w	800dfe4 <_kill_r>
 800dfb6:	2b01      	cmp	r3, #1
 800dfb8:	d00a      	beq.n	800dfd0 <_raise_r+0x4c>
 800dfba:	1c59      	adds	r1, r3, #1
 800dfbc:	d103      	bne.n	800dfc6 <_raise_r+0x42>
 800dfbe:	2316      	movs	r3, #22
 800dfc0:	6003      	str	r3, [r0, #0]
 800dfc2:	2001      	movs	r0, #1
 800dfc4:	e7e7      	b.n	800df96 <_raise_r+0x12>
 800dfc6:	2400      	movs	r4, #0
 800dfc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dfcc:	4628      	mov	r0, r5
 800dfce:	4798      	blx	r3
 800dfd0:	2000      	movs	r0, #0
 800dfd2:	e7e0      	b.n	800df96 <_raise_r+0x12>

0800dfd4 <raise>:
 800dfd4:	4b02      	ldr	r3, [pc, #8]	; (800dfe0 <raise+0xc>)
 800dfd6:	4601      	mov	r1, r0
 800dfd8:	6818      	ldr	r0, [r3, #0]
 800dfda:	f7ff bfd3 	b.w	800df84 <_raise_r>
 800dfde:	bf00      	nop
 800dfe0:	24000014 	.word	0x24000014

0800dfe4 <_kill_r>:
 800dfe4:	b538      	push	{r3, r4, r5, lr}
 800dfe6:	4d07      	ldr	r5, [pc, #28]	; (800e004 <_kill_r+0x20>)
 800dfe8:	2300      	movs	r3, #0
 800dfea:	4604      	mov	r4, r0
 800dfec:	4608      	mov	r0, r1
 800dfee:	4611      	mov	r1, r2
 800dff0:	602b      	str	r3, [r5, #0]
 800dff2:	f7f5 fec1 	bl	8003d78 <_kill>
 800dff6:	1c43      	adds	r3, r0, #1
 800dff8:	d102      	bne.n	800e000 <_kill_r+0x1c>
 800dffa:	682b      	ldr	r3, [r5, #0]
 800dffc:	b103      	cbz	r3, 800e000 <_kill_r+0x1c>
 800dffe:	6023      	str	r3, [r4, #0]
 800e000:	bd38      	pop	{r3, r4, r5, pc}
 800e002:	bf00      	nop
 800e004:	24000dc0 	.word	0x24000dc0

0800e008 <_getpid_r>:
 800e008:	f7f5 beae 	b.w	8003d68 <_getpid>

0800e00c <sbrk_aligned>:
 800e00c:	b570      	push	{r4, r5, r6, lr}
 800e00e:	4e0e      	ldr	r6, [pc, #56]	; (800e048 <sbrk_aligned+0x3c>)
 800e010:	460c      	mov	r4, r1
 800e012:	6831      	ldr	r1, [r6, #0]
 800e014:	4605      	mov	r5, r0
 800e016:	b911      	cbnz	r1, 800e01e <sbrk_aligned+0x12>
 800e018:	f000 f8bc 	bl	800e194 <_sbrk_r>
 800e01c:	6030      	str	r0, [r6, #0]
 800e01e:	4621      	mov	r1, r4
 800e020:	4628      	mov	r0, r5
 800e022:	f000 f8b7 	bl	800e194 <_sbrk_r>
 800e026:	1c43      	adds	r3, r0, #1
 800e028:	d00a      	beq.n	800e040 <sbrk_aligned+0x34>
 800e02a:	1cc4      	adds	r4, r0, #3
 800e02c:	f024 0403 	bic.w	r4, r4, #3
 800e030:	42a0      	cmp	r0, r4
 800e032:	d007      	beq.n	800e044 <sbrk_aligned+0x38>
 800e034:	1a21      	subs	r1, r4, r0
 800e036:	4628      	mov	r0, r5
 800e038:	f000 f8ac 	bl	800e194 <_sbrk_r>
 800e03c:	3001      	adds	r0, #1
 800e03e:	d101      	bne.n	800e044 <sbrk_aligned+0x38>
 800e040:	f04f 34ff 	mov.w	r4, #4294967295
 800e044:	4620      	mov	r0, r4
 800e046:	bd70      	pop	{r4, r5, r6, pc}
 800e048:	24000dbc 	.word	0x24000dbc

0800e04c <_malloc_r>:
 800e04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e050:	1ccd      	adds	r5, r1, #3
 800e052:	f025 0503 	bic.w	r5, r5, #3
 800e056:	3508      	adds	r5, #8
 800e058:	2d0c      	cmp	r5, #12
 800e05a:	bf38      	it	cc
 800e05c:	250c      	movcc	r5, #12
 800e05e:	2d00      	cmp	r5, #0
 800e060:	4607      	mov	r7, r0
 800e062:	db01      	blt.n	800e068 <_malloc_r+0x1c>
 800e064:	42a9      	cmp	r1, r5
 800e066:	d905      	bls.n	800e074 <_malloc_r+0x28>
 800e068:	230c      	movs	r3, #12
 800e06a:	603b      	str	r3, [r7, #0]
 800e06c:	2600      	movs	r6, #0
 800e06e:	4630      	mov	r0, r6
 800e070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e074:	4e2e      	ldr	r6, [pc, #184]	; (800e130 <_malloc_r+0xe4>)
 800e076:	f000 f89d 	bl	800e1b4 <__malloc_lock>
 800e07a:	6833      	ldr	r3, [r6, #0]
 800e07c:	461c      	mov	r4, r3
 800e07e:	bb34      	cbnz	r4, 800e0ce <_malloc_r+0x82>
 800e080:	4629      	mov	r1, r5
 800e082:	4638      	mov	r0, r7
 800e084:	f7ff ffc2 	bl	800e00c <sbrk_aligned>
 800e088:	1c43      	adds	r3, r0, #1
 800e08a:	4604      	mov	r4, r0
 800e08c:	d14d      	bne.n	800e12a <_malloc_r+0xde>
 800e08e:	6834      	ldr	r4, [r6, #0]
 800e090:	4626      	mov	r6, r4
 800e092:	2e00      	cmp	r6, #0
 800e094:	d140      	bne.n	800e118 <_malloc_r+0xcc>
 800e096:	6823      	ldr	r3, [r4, #0]
 800e098:	4631      	mov	r1, r6
 800e09a:	4638      	mov	r0, r7
 800e09c:	eb04 0803 	add.w	r8, r4, r3
 800e0a0:	f000 f878 	bl	800e194 <_sbrk_r>
 800e0a4:	4580      	cmp	r8, r0
 800e0a6:	d13a      	bne.n	800e11e <_malloc_r+0xd2>
 800e0a8:	6821      	ldr	r1, [r4, #0]
 800e0aa:	3503      	adds	r5, #3
 800e0ac:	1a6d      	subs	r5, r5, r1
 800e0ae:	f025 0503 	bic.w	r5, r5, #3
 800e0b2:	3508      	adds	r5, #8
 800e0b4:	2d0c      	cmp	r5, #12
 800e0b6:	bf38      	it	cc
 800e0b8:	250c      	movcc	r5, #12
 800e0ba:	4629      	mov	r1, r5
 800e0bc:	4638      	mov	r0, r7
 800e0be:	f7ff ffa5 	bl	800e00c <sbrk_aligned>
 800e0c2:	3001      	adds	r0, #1
 800e0c4:	d02b      	beq.n	800e11e <_malloc_r+0xd2>
 800e0c6:	6823      	ldr	r3, [r4, #0]
 800e0c8:	442b      	add	r3, r5
 800e0ca:	6023      	str	r3, [r4, #0]
 800e0cc:	e00e      	b.n	800e0ec <_malloc_r+0xa0>
 800e0ce:	6822      	ldr	r2, [r4, #0]
 800e0d0:	1b52      	subs	r2, r2, r5
 800e0d2:	d41e      	bmi.n	800e112 <_malloc_r+0xc6>
 800e0d4:	2a0b      	cmp	r2, #11
 800e0d6:	d916      	bls.n	800e106 <_malloc_r+0xba>
 800e0d8:	1961      	adds	r1, r4, r5
 800e0da:	42a3      	cmp	r3, r4
 800e0dc:	6025      	str	r5, [r4, #0]
 800e0de:	bf18      	it	ne
 800e0e0:	6059      	strne	r1, [r3, #4]
 800e0e2:	6863      	ldr	r3, [r4, #4]
 800e0e4:	bf08      	it	eq
 800e0e6:	6031      	streq	r1, [r6, #0]
 800e0e8:	5162      	str	r2, [r4, r5]
 800e0ea:	604b      	str	r3, [r1, #4]
 800e0ec:	4638      	mov	r0, r7
 800e0ee:	f104 060b 	add.w	r6, r4, #11
 800e0f2:	f000 f865 	bl	800e1c0 <__malloc_unlock>
 800e0f6:	f026 0607 	bic.w	r6, r6, #7
 800e0fa:	1d23      	adds	r3, r4, #4
 800e0fc:	1af2      	subs	r2, r6, r3
 800e0fe:	d0b6      	beq.n	800e06e <_malloc_r+0x22>
 800e100:	1b9b      	subs	r3, r3, r6
 800e102:	50a3      	str	r3, [r4, r2]
 800e104:	e7b3      	b.n	800e06e <_malloc_r+0x22>
 800e106:	6862      	ldr	r2, [r4, #4]
 800e108:	42a3      	cmp	r3, r4
 800e10a:	bf0c      	ite	eq
 800e10c:	6032      	streq	r2, [r6, #0]
 800e10e:	605a      	strne	r2, [r3, #4]
 800e110:	e7ec      	b.n	800e0ec <_malloc_r+0xa0>
 800e112:	4623      	mov	r3, r4
 800e114:	6864      	ldr	r4, [r4, #4]
 800e116:	e7b2      	b.n	800e07e <_malloc_r+0x32>
 800e118:	4634      	mov	r4, r6
 800e11a:	6876      	ldr	r6, [r6, #4]
 800e11c:	e7b9      	b.n	800e092 <_malloc_r+0x46>
 800e11e:	230c      	movs	r3, #12
 800e120:	603b      	str	r3, [r7, #0]
 800e122:	4638      	mov	r0, r7
 800e124:	f000 f84c 	bl	800e1c0 <__malloc_unlock>
 800e128:	e7a1      	b.n	800e06e <_malloc_r+0x22>
 800e12a:	6025      	str	r5, [r4, #0]
 800e12c:	e7de      	b.n	800e0ec <_malloc_r+0xa0>
 800e12e:	bf00      	nop
 800e130:	24000db8 	.word	0x24000db8

0800e134 <_realloc_r>:
 800e134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e138:	4680      	mov	r8, r0
 800e13a:	4614      	mov	r4, r2
 800e13c:	460e      	mov	r6, r1
 800e13e:	b921      	cbnz	r1, 800e14a <_realloc_r+0x16>
 800e140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e144:	4611      	mov	r1, r2
 800e146:	f7ff bf81 	b.w	800e04c <_malloc_r>
 800e14a:	b92a      	cbnz	r2, 800e158 <_realloc_r+0x24>
 800e14c:	f000 f83e 	bl	800e1cc <_free_r>
 800e150:	4625      	mov	r5, r4
 800e152:	4628      	mov	r0, r5
 800e154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e158:	f000 f884 	bl	800e264 <_malloc_usable_size_r>
 800e15c:	4284      	cmp	r4, r0
 800e15e:	4607      	mov	r7, r0
 800e160:	d802      	bhi.n	800e168 <_realloc_r+0x34>
 800e162:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e166:	d812      	bhi.n	800e18e <_realloc_r+0x5a>
 800e168:	4621      	mov	r1, r4
 800e16a:	4640      	mov	r0, r8
 800e16c:	f7ff ff6e 	bl	800e04c <_malloc_r>
 800e170:	4605      	mov	r5, r0
 800e172:	2800      	cmp	r0, #0
 800e174:	d0ed      	beq.n	800e152 <_realloc_r+0x1e>
 800e176:	42bc      	cmp	r4, r7
 800e178:	4622      	mov	r2, r4
 800e17a:	4631      	mov	r1, r6
 800e17c:	bf28      	it	cs
 800e17e:	463a      	movcs	r2, r7
 800e180:	f7ff fee2 	bl	800df48 <memcpy>
 800e184:	4631      	mov	r1, r6
 800e186:	4640      	mov	r0, r8
 800e188:	f000 f820 	bl	800e1cc <_free_r>
 800e18c:	e7e1      	b.n	800e152 <_realloc_r+0x1e>
 800e18e:	4635      	mov	r5, r6
 800e190:	e7df      	b.n	800e152 <_realloc_r+0x1e>
	...

0800e194 <_sbrk_r>:
 800e194:	b538      	push	{r3, r4, r5, lr}
 800e196:	4d06      	ldr	r5, [pc, #24]	; (800e1b0 <_sbrk_r+0x1c>)
 800e198:	2300      	movs	r3, #0
 800e19a:	4604      	mov	r4, r0
 800e19c:	4608      	mov	r0, r1
 800e19e:	602b      	str	r3, [r5, #0]
 800e1a0:	f7f5 fe04 	bl	8003dac <_sbrk>
 800e1a4:	1c43      	adds	r3, r0, #1
 800e1a6:	d102      	bne.n	800e1ae <_sbrk_r+0x1a>
 800e1a8:	682b      	ldr	r3, [r5, #0]
 800e1aa:	b103      	cbz	r3, 800e1ae <_sbrk_r+0x1a>
 800e1ac:	6023      	str	r3, [r4, #0]
 800e1ae:	bd38      	pop	{r3, r4, r5, pc}
 800e1b0:	24000dc0 	.word	0x24000dc0

0800e1b4 <__malloc_lock>:
 800e1b4:	4801      	ldr	r0, [pc, #4]	; (800e1bc <__malloc_lock+0x8>)
 800e1b6:	f000 b85d 	b.w	800e274 <__retarget_lock_acquire_recursive>
 800e1ba:	bf00      	nop
 800e1bc:	24000dc4 	.word	0x24000dc4

0800e1c0 <__malloc_unlock>:
 800e1c0:	4801      	ldr	r0, [pc, #4]	; (800e1c8 <__malloc_unlock+0x8>)
 800e1c2:	f000 b858 	b.w	800e276 <__retarget_lock_release_recursive>
 800e1c6:	bf00      	nop
 800e1c8:	24000dc4 	.word	0x24000dc4

0800e1cc <_free_r>:
 800e1cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1ce:	2900      	cmp	r1, #0
 800e1d0:	d044      	beq.n	800e25c <_free_r+0x90>
 800e1d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1d6:	9001      	str	r0, [sp, #4]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	f1a1 0404 	sub.w	r4, r1, #4
 800e1de:	bfb8      	it	lt
 800e1e0:	18e4      	addlt	r4, r4, r3
 800e1e2:	f7ff ffe7 	bl	800e1b4 <__malloc_lock>
 800e1e6:	4a1e      	ldr	r2, [pc, #120]	; (800e260 <_free_r+0x94>)
 800e1e8:	9801      	ldr	r0, [sp, #4]
 800e1ea:	6813      	ldr	r3, [r2, #0]
 800e1ec:	b933      	cbnz	r3, 800e1fc <_free_r+0x30>
 800e1ee:	6063      	str	r3, [r4, #4]
 800e1f0:	6014      	str	r4, [r2, #0]
 800e1f2:	b003      	add	sp, #12
 800e1f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1f8:	f7ff bfe2 	b.w	800e1c0 <__malloc_unlock>
 800e1fc:	42a3      	cmp	r3, r4
 800e1fe:	d908      	bls.n	800e212 <_free_r+0x46>
 800e200:	6825      	ldr	r5, [r4, #0]
 800e202:	1961      	adds	r1, r4, r5
 800e204:	428b      	cmp	r3, r1
 800e206:	bf01      	itttt	eq
 800e208:	6819      	ldreq	r1, [r3, #0]
 800e20a:	685b      	ldreq	r3, [r3, #4]
 800e20c:	1949      	addeq	r1, r1, r5
 800e20e:	6021      	streq	r1, [r4, #0]
 800e210:	e7ed      	b.n	800e1ee <_free_r+0x22>
 800e212:	461a      	mov	r2, r3
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	b10b      	cbz	r3, 800e21c <_free_r+0x50>
 800e218:	42a3      	cmp	r3, r4
 800e21a:	d9fa      	bls.n	800e212 <_free_r+0x46>
 800e21c:	6811      	ldr	r1, [r2, #0]
 800e21e:	1855      	adds	r5, r2, r1
 800e220:	42a5      	cmp	r5, r4
 800e222:	d10b      	bne.n	800e23c <_free_r+0x70>
 800e224:	6824      	ldr	r4, [r4, #0]
 800e226:	4421      	add	r1, r4
 800e228:	1854      	adds	r4, r2, r1
 800e22a:	42a3      	cmp	r3, r4
 800e22c:	6011      	str	r1, [r2, #0]
 800e22e:	d1e0      	bne.n	800e1f2 <_free_r+0x26>
 800e230:	681c      	ldr	r4, [r3, #0]
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	6053      	str	r3, [r2, #4]
 800e236:	4421      	add	r1, r4
 800e238:	6011      	str	r1, [r2, #0]
 800e23a:	e7da      	b.n	800e1f2 <_free_r+0x26>
 800e23c:	d902      	bls.n	800e244 <_free_r+0x78>
 800e23e:	230c      	movs	r3, #12
 800e240:	6003      	str	r3, [r0, #0]
 800e242:	e7d6      	b.n	800e1f2 <_free_r+0x26>
 800e244:	6825      	ldr	r5, [r4, #0]
 800e246:	1961      	adds	r1, r4, r5
 800e248:	428b      	cmp	r3, r1
 800e24a:	bf04      	itt	eq
 800e24c:	6819      	ldreq	r1, [r3, #0]
 800e24e:	685b      	ldreq	r3, [r3, #4]
 800e250:	6063      	str	r3, [r4, #4]
 800e252:	bf04      	itt	eq
 800e254:	1949      	addeq	r1, r1, r5
 800e256:	6021      	streq	r1, [r4, #0]
 800e258:	6054      	str	r4, [r2, #4]
 800e25a:	e7ca      	b.n	800e1f2 <_free_r+0x26>
 800e25c:	b003      	add	sp, #12
 800e25e:	bd30      	pop	{r4, r5, pc}
 800e260:	24000db8 	.word	0x24000db8

0800e264 <_malloc_usable_size_r>:
 800e264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e268:	1f18      	subs	r0, r3, #4
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	bfbc      	itt	lt
 800e26e:	580b      	ldrlt	r3, [r1, r0]
 800e270:	18c0      	addlt	r0, r0, r3
 800e272:	4770      	bx	lr

0800e274 <__retarget_lock_acquire_recursive>:
 800e274:	4770      	bx	lr

0800e276 <__retarget_lock_release_recursive>:
 800e276:	4770      	bx	lr

0800e278 <_init>:
 800e278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e27a:	bf00      	nop
 800e27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e27e:	bc08      	pop	{r3}
 800e280:	469e      	mov	lr, r3
 800e282:	4770      	bx	lr

0800e284 <_fini>:
 800e284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e286:	bf00      	nop
 800e288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e28a:	bc08      	pop	{r3}
 800e28c:	469e      	mov	lr, r3
 800e28e:	4770      	bx	lr
